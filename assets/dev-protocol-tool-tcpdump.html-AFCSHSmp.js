import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as l,c,a as n,b as s,d as e,f as o}from"./app-IRwI16JE.js";const r={},i=o(`<h1 id="工具-网络抓包神器-tcpdump-使用详解" tabindex="-1"><a class="header-anchor" href="#工具-网络抓包神器-tcpdump-使用详解" aria-hidden="true">#</a> 工具: 网络抓包神器 tcpdump 使用详解</h1><blockquote><p>tcpdump 是一款强大的网络抓包工具，它使用 libpcap 库来抓取网络数据包，这个库在几乎在所有的 Linux/Unix 中都有。熟悉 tcpdump 的使用能够帮助你分析调试网络数据，本文将通过一个个具体的示例来介绍它在不同场景下的使用方法。不管你是系统管理员，程序员，云原生工程师还是 yaml 工程师，掌握 tcpdump 的使用都能让你如虎添翼，升职加薪。</p></blockquote><h2 id="基本语法和使用方法" tabindex="-1"><a class="header-anchor" href="#基本语法和使用方法" aria-hidden="true">#</a> 基本语法和使用方法</h2><h3 id="常用参数" tabindex="-1"><a class="header-anchor" href="#常用参数" aria-hidden="true">#</a> 常用参数</h3><p>tcpdump 的常用参数如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-nn</span> <span class="token parameter variable">-s0</span> <span class="token parameter variable">-v</span> port <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-i : 选择要捕获的接口，通常是以太网卡或无线网卡，也可以是 vlan 或其他特殊接口。如果该系统上只有一个网络接口，则无需指定。</li><li>-nn : 单个 n 表示不解析域名，直接显示 IP；两个 n 表示不解析域名和端口。这样不仅方便查看 IP 和端口号，而且在抓取大量数据时非常高效，因为域名解析会降低抓取速度。</li><li>-s0 : tcpdump 默认只会截取前 96 字节的内容，要想截取所有的报文内容，可以使用 <code>-s number</code>， number 就是你要截取的报文字节数，如果是 0 的话，表示截取报文全部内容。</li><li>-v : 使用 <code>-v</code>，<code>-vv</code> 和 <code>-vvv</code> 来显示更多的详细信息，通常会显示更多与特定协议相关的信息。</li><li><code>port 80</code> : 这是一个常见的端口过滤器，表示仅抓取 80 端口上的流量，通常是 HTTP。</li></ul><p>额外再介绍几个常用参数：</p><ul><li>-p : 不让网络接口进入混杂模式。默认情况下使用 tcpdump 抓包时，会让网络接口进入混杂模式。一般计算机网卡都工作在非混杂模式下，此时网卡只接受来自网络端口的目的地址指向自己的数据。当网卡工作在混杂模式下时，网卡将来自接口的所有数据都捕获并交给相应的驱动程序。如果设备接入的交换机开启了混杂模式，使用 -p 选项可以有效地过滤噪声。</li><li>-e : 显示数据链路层信息。默认情况下 tcpdump 不会显示数据链路层信息，使用 -e 选项可以显示源和目的 MAC 地址，以及 VLAN tag 信息。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-n</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">-c</span> <span class="token number">5</span> not ip6
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on br-lan, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">18</span>:27:53.619865 <span class="token number">24</span>:5e:be:0c:17:af <span class="token operator">&gt;</span> 00:e2:69:23:d3:3b, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">1162</span>: <span class="token number">192.168</span>.100.20.51410 <span class="token operator">&gt;</span> <span class="token number">180.176</span>.26.193.58695: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2045333376</span>:2045334484, ack <span class="token number">3398690514</span>, win <span class="token number">751</span>, length <span class="token number">1108</span>
<span class="token number">18</span>:27:53.626490 00:e2:69:23:d3:3b <span class="token operator">&gt;</span> <span class="token number">24</span>:5e:be:0c:17:af, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">68</span>: <span class="token number">220.173</span>.179.66.36017 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.100.20.51410: UDP, length <span class="token number">26</span>
<span class="token number">18</span>:27:53.626893 <span class="token number">24</span>:5e:be:0c:17:af <span class="token operator">&gt;</span> 00:e2:69:23:d3:3b, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">1444</span>: <span class="token number">192.168</span>.100.20.51410 <span class="token operator">&gt;</span> <span class="token number">220.173</span>.179.66.36017: UDP, length <span class="token number">1402</span>
<span class="token number">18</span>:27:53.628837 00:e2:69:23:d3:3b <span class="token operator">&gt;</span> <span class="token number">24</span>:5e:be:0c:17:af, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">1324</span>: <span class="token number">46.97</span>.169.182.6881 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.100.20.59145: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">3058450381</span>:3058451651, ack <span class="token number">14349180</span>, win <span class="token number">502</span>, length <span class="token number">1270</span>
<span class="token number">18</span>:27:53.629096 <span class="token number">24</span>:5e:be:0c:17:af <span class="token operator">&gt;</span> 00:e2:69:23:d3:3b, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">54</span>: <span class="token number">192.168</span>.100.20.59145 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.100.1.12345: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">3058451651</span>, win <span class="token number">6350</span>, length <span class="token number">0</span>
<span class="token number">5</span> packets captured
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示-ascii-字符串" tabindex="-1"><a class="header-anchor" href="#显示-ascii-字符串" aria-hidden="true">#</a> 显示 ASCII 字符串</h3><p>-A 表示使用 ASCII 字符串打印报文的全部数据，这样可以使读取更加简单，方便使用 grep 等工具解析输出内容。-X 表示同时使用十六进制和 ASCII 字符串打印报文的全部数据。这两个参数不能一起使用。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-A</span> <span class="token parameter variable">-s0</span> port <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="抓取特定协议的数据" tabindex="-1"><a class="header-anchor" href="#抓取特定协议的数据" aria-hidden="true">#</a> 抓取特定协议的数据</h3><p>后面可以跟上协议名称来过滤特定协议的流量，以 UDP 为例，可以加上参数 udp 或 protocol 17，这两个命令意思相同。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> eth0 udp
$ tcpdump <span class="token parameter variable">-i</span> eth0 proto <span class="token number">17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，tcp 与 protocol 6 意思相同。</p><h3 id="抓取特定主机的数据" tabindex="-1"><a class="header-anchor" href="#抓取特定主机的数据" aria-hidden="true">#</a> 抓取特定主机的数据</h3><p>使用过滤器 host 可以抓取特定目的地和源 IP 地址的流量。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> eth0 <span class="token function">host</span> <span class="token number">10.10</span>.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用 src 或 dst 只抓取源或目的地：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> eth0 dst <span class="token number">10.10</span>.1.20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="将抓取的数据写入文件" tabindex="-1"><a class="header-anchor" href="#将抓取的数据写入文件" aria-hidden="true">#</a> 将抓取的数据写入文件</h3><p>使用 tcpdump 截取数据报文的时候，默认会打印到屏幕的默认输出，你会看到按照顺序和格式，很多的数据一行行快速闪过，根本来不及看清楚所有的内容。不过，tcpdump 提供了把截取的数据保存到文件的功能，以便后面使用其他图形工具（比如 wireshark，Snort）来分析。</p><p>-w 选项用来把数据报文输出到文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-s0</span> <span class="token parameter variable">-w</span> test.pcap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="行缓冲模式" tabindex="-1"><a class="header-anchor" href="#行缓冲模式" aria-hidden="true">#</a> 行缓冲模式</h3><p>如果想实时将抓取到的数据通过管道传递给其他工具来处理，需要使用 -l 选项来开启行缓冲模式（或使用 -c 选项来开启数据包缓冲模式）。使用 -l 选项可以将输出通过立即发送给其他命令，其他命令会立即响应。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-s0</span> <span class="token parameter variable">-l</span> port <span class="token number">80</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;Server:&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="组合过滤器" tabindex="-1"><a class="header-anchor" href="#组合过滤器" aria-hidden="true">#</a> 组合过滤器</h3><p>过滤的真正强大之处在于你可以随意组合它们，而连接它们的逻辑就是常用的 与<code>/AND/&amp;&amp; </code>、 <code>或/OR/||</code> 和 <code>非/not/!</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>and or <span class="token operator">&amp;&amp;</span>
or or <span class="token operator">||</span>
not or <span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><blockquote><p>关于 tcpdump 的过滤器，这里有必要单独介绍一下。</p></blockquote><p>机器上的网络报文数量异常的多，很多时候我们只关系和具体问题有关的数据报（比如访问某个网站的数据，或者 icmp 超时的报文等等），而这些数据只占到很小的一部分。把所有的数据截取下来，从里面找到想要的信息无疑是一件很费时费力的工作。而 tcpdump 提供了灵活的语法可以精确地截取关心的数据报，简化分析的工作量。这些选择数据包的语句就是过滤器（filter）！</p><h3 id="host-过滤器" tabindex="-1"><a class="header-anchor" href="#host-过滤器" aria-hidden="true">#</a> Host 过滤器</h3><p>Host 过滤器用来过滤某个主机的数据报文。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token function">host</span> <span class="token number">1.2</span>.3.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会抓取所有发往主机 1.2.3.4 或者从主机 1.2.3.4 发出的流量。如果想只抓取从该主机发出的流量，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump src <span class="token function">host</span> <span class="token number">1.2</span>.3.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="network-过滤器" tabindex="-1"><a class="header-anchor" href="#network-过滤器" aria-hidden="true">#</a> Network 过滤器</h3><p>Network 过滤器用来过滤某个网段的数据，使用的是 CIDR 模式。可以使用四元组（x.x.x.x）、三元组（x.x.x）、二元组（x.x）和一元组（x）。四元组就是指定某个主机，三元组表示子网掩码为 255.255.255.0，二元组表示子网掩码为 255.255.0.0，一元组表示子网掩码为 255.0.0.0。例如，</p><p>抓取所有发往网段 192.168.1.x 或从网段 192.168.1.x 发出的流量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump net <span class="token number">192.168</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>抓取所有发往网段 10.x.x.x 或从网段 10.x.x.x 发出的流量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump net <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和 Host 过滤器一样，这里也可以指定源和目的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump src net <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用 CIDR 格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump src net <span class="token number">172.16</span>.0.0/12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="proto-过滤器" tabindex="-1"><a class="header-anchor" href="#proto-过滤器" aria-hidden="true">#</a> Proto 过滤器</h3><p>Proto 过滤器用来过滤某个协议的数据，关键字为 proto，可省略。proto 后面可以跟上协议号或协议名称，支持 icmp, igmp, igrp, pim, ah, esp, carp, vrrp, udp和 tcp。因为通常的协议名称是保留字段，所以在于 proto 指令一起使用时，必须根据 shell 类型使用一个或两个反斜杠（/）来转义。Linux 中的 shell 需要使用两个反斜杠来转义，MacOS 只需要一个。</p><p>例如，抓取 icmp 协议的报文：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-n</span> proto <span class="token punctuation">\\</span><span class="token punctuation">\\</span>icmp
<span class="token comment"># 或者</span>
$ tcpdump <span class="token parameter variable">-n</span> icmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="port-过滤器" tabindex="-1"><a class="header-anchor" href="#port-过滤器" aria-hidden="true">#</a> Port 过滤器</h3><p>Port 过滤器用来过滤通过某个端口的数据报文，关键字为 port。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump port <span class="token number">389</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="理解-tcpdump-的输出" tabindex="-1"><a class="header-anchor" href="#理解-tcpdump-的输出" aria-hidden="true">#</a> 理解 tcpdump 的输出</h2><p>截取数据只是第一步，第二步就是理解这些数据，下面就解释一下 tcpdump 命令输出各部分的意义。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">21</span>:27:06.995846 IP <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">45646</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto TCP <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>, length <span class="token number">64</span><span class="token punctuation">)</span>
    <span class="token number">192.168</span>.1.106.56166 <span class="token operator">&gt;</span> <span class="token number">124.192</span>.132.54.80: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">cksum</span> 0xa730 <span class="token punctuation">(</span>correct<span class="token punctuation">)</span>, <span class="token function">seq</span> <span class="token number">992042666</span>, win <span class="token number">65535</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,nop,wscale <span class="token number">4</span>,nop,nop,TS val <span class="token number">663433143</span> ecr <span class="token number">0</span>,sackOK,eol<span class="token punctuation">]</span>, length <span class="token number">0</span>
 
<span class="token number">21</span>:27:07.030487 IP <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">51</span>, <span class="token function">id</span> <span class="token number">0</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto TCP <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>, length <span class="token number">44</span><span class="token punctuation">)</span>
    <span class="token number">124.192</span>.132.54.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.1.106.56166: Flags <span class="token punctuation">[</span>S.<span class="token punctuation">]</span>, <span class="token function">cksum</span> 0xedc0 <span class="token punctuation">(</span>correct<span class="token punctuation">)</span>, <span class="token function">seq</span> <span class="token number">2147006684</span>, ack <span class="token number">992042667</span>, win <span class="token number">14600</span>, options <span class="token punctuation">[</span>mss <span class="token number">1440</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
 
<span class="token number">21</span>:27:07.030527 IP <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">59119</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto TCP <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>, length <span class="token number">40</span><span class="token punctuation">)</span>
    <span class="token number">192.168</span>.1.106.56166 <span class="token operator">&gt;</span> <span class="token number">124.192</span>.132.54.80: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, <span class="token function">cksum</span> 0x3e72 <span class="token punctuation">(</span>correct<span class="token punctuation">)</span>, ack <span class="token number">2147006685</span>, win <span class="token number">65535</span>, length <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最基本也是最重要的信息就是数据报的源地址/端口和目的地址/端口，上面的例子第一条数据报中，源地址 ip 是 192.168.1.106，源端口是 56166，目的地址是 124.192.132.54，目的端口是 80。 &gt; 符号代表数据的方向。</p><p>此外，上面的三条数据还是 tcp 协议的三次握手过程，第一条就是 SYN 报文，这个可以通过 Flags [S] 看出。下面是常见的 TCP 报文的 Flags:</p><ul><li>[S] : SYN（开始连接）</li><li>[.] : 没有 Flag</li><li>[P] : PSH（推送数据）</li><li>[F] : FIN （结束连接）</li><li>[R] : RST（重置连接）</li></ul><p>而第二条数据的 [S.] 表示 SYN-ACK，就是 SYN 报文的应答报文。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>下面给出一些具体的例子，每个例子都可以使用多种方法来获得相同的输出，你使用的方法取决于所需的输出和网络上的流量。我们在排障时，通常只想获取自己想要的内容，可以通过过滤器和 ASCII 输出并结合管道与 grep、cut、awk 等工具来实现此目的。</p><p>例如，在抓取 HTTP 请求和响应数据包时，可以通过删除标志 SYN/ACK/FIN 来过滤噪声，但还有更简单的方法，那就是通过管道传递给 grep。在达到目的的同时，我们要选择最简单最高效的方法。下面来看例子。</p><h3 id="提取-http-用户代理" tabindex="-1"><a class="header-anchor" href="#提取-http-用户代理" aria-hidden="true">#</a> 提取 HTTP 用户代理</h3><p>从 HTTP 请求头中提取 HTTP 用户代理：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-s1500</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;User-Agent:&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 egrep 可以同时提取用户代理和主机名（或其他头文件）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-s1500</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;User-Agent:|Host:&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="只抓取-http-get-和-post-流量" tabindex="-1"><a class="header-anchor" href="#只抓取-http-get-和-post-流量" aria-hidden="true">#</a> 只抓取 HTTP GET 和 POST 流量</h3><p>抓取 HTTP GET 流量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-s</span> <span class="token number">0</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-vv</span> <span class="token string">&#39;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以抓取 HTTP POST 请求流量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-s</span> <span class="token number">0</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-vv</span> <span class="token string">&#39;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：该方法不能保证抓取到 HTTP POST 有效数据流量，因为一个 POST 请求会被分割为多个 TCP 数据包。</p><p>上述两个表达式中的十六进制将会与 GET 和 POST 请求的 ASCII 字符串匹配。例如，<code>tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4]</code> 首先会确定我们感兴趣的字节的位置（在 TCP header 之后），然后选择我们希望匹配的 4 个字节。</p><h3 id="提取-http-请求的-url" tabindex="-1"><a class="header-anchor" href="#提取-http-请求的-url" aria-hidden="true">#</a> 提取 HTTP 请求的 URL</h3><p>提取 HTTP 请求的主机名和路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-s</span> <span class="token number">0</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;POST /|GET /|Host:&quot;</span>
 
tcpdump: listening on enp7s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
	POST /wp-login.php HTTP/1.1
	Host: dev.example.com
	GET /wp-login.php HTTP/1.1
	Host: dev.example.com
	GET /favicon.ico HTTP/1.1
	Host: dev.example.com
	GET / HTTP/1.1
	Host: dev.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取-http-post-请求中的密码" tabindex="-1"><a class="header-anchor" href="#提取-http-post-请求中的密码" aria-hidden="true">#</a> 提取 HTTP POST 请求中的密码</h3><p>从 HTTP POST 请求中提取密码和主机名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-s</span> <span class="token number">0</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;POST /|pwd=|passwd=|password=|Host:&quot;</span>
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on enp7s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">11</span>:25:54.799014 IP <span class="token number">10.10</span>.1.30.39224 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.125.80: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">1458768667</span>:1458770008, ack <span class="token number">2440130792</span>, win <span class="token number">704</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">461552632</span> ecr <span class="token number">208900561</span><span class="token punctuation">]</span>, length <span class="token number">1341</span>: HTTP: POST /wp-login.php HTTP/1.1
<span class="token punctuation">..</span><span class="token punctuation">..</span>.s<span class="token punctuation">..</span>POST /wp-login.php HTTP/1.1
Host: dev.example.com
<span class="token punctuation">..</span><span class="token punctuation">..</span>.s<span class="token punctuation">..</span>log<span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">pwd</span><span class="token operator">=</span>notmypassword<span class="token operator">&amp;</span>wp-submit<span class="token operator">=</span>Log+In<span class="token operator">&amp;</span><span class="token assign-left variable">redirect_to</span><span class="token operator">=</span>http%3A%2F%2Fdev.example.com%2Fwp-admin%2F<span class="token operator">&amp;</span><span class="token assign-left variable">testcookie</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取-cookies" tabindex="-1"><a class="header-anchor" href="#提取-cookies" aria-hidden="true">#</a> 提取 Cookies</h3><p>提取 Set-Cookie（服务端的 Cookie）和 Cookie（客户端的 Cookie）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-s0</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;Set-Cookie|Host:|Cookie:&#39;</span>
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on wlp58s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
Host: dev.example.com
Cookie: <span class="token assign-left variable">wordpress_86be02xxxxxxxxxxxxxxxxxxxc43</span><span class="token operator">=</span>admin%7C152xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxfb3e15c744fdd6<span class="token punctuation">;</span> <span class="token assign-left variable">_ga</span><span class="token operator">=</span>GA1.2.21343434343421934<span class="token punctuation">;</span> <span class="token assign-left variable">_gid</span><span class="token operator">=</span>GA1.2.927343434349426<span class="token punctuation">;</span> <span class="token assign-left variable">wordpress_test_cookie</span><span class="token operator">=</span>WP+Cookie+check<span class="token punctuation">;</span> <span class="token assign-left variable">wordpress_logged_in_86be654654645645645654645653fc43</span><span class="token operator">=</span>admin%7C15275102testtesttesttestab7a61e<span class="token punctuation">;</span> wp-settings-time-1<span class="token operator">=</span><span class="token number">1527337439</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抓取-icmp-数据包" tabindex="-1"><a class="header-anchor" href="#抓取-icmp-数据包" aria-hidden="true">#</a> 抓取 ICMP 数据包</h3><p>查看网络上的所有 ICMP 数据包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-n</span> icmp
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on enp7s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">11</span>:34:21.590380 IP <span class="token number">10.10</span>.1.217 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.30: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">27948</span>, <span class="token function">seq</span> <span class="token number">1</span>, length <span class="token number">64</span>
<span class="token number">11</span>:34:21.590434 IP <span class="token number">10.10</span>.1.30 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.217: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">27948</span>, <span class="token function">seq</span> <span class="token number">1</span>, length <span class="token number">64</span>
<span class="token number">11</span>:34:27.680307 IP <span class="token number">10.10</span>.1.159 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.1: ICMP <span class="token number">10.10</span>.1.189 udp port <span class="token number">59619</span> unreachable, length <span class="token number">115</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抓取非-echo-reply-类型的-icmp-数据包" tabindex="-1"><a class="header-anchor" href="#抓取非-echo-reply-类型的-icmp-数据包" aria-hidden="true">#</a> 抓取非 ECHO/REPLY 类型的 ICMP 数据包</h3><p>通过排除 echo 和 reply 类型的数据包使抓取到的数据包不包括标准的 ping 包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token string">&#39;icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply&#39;</span>
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on enp7s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">11</span>:37:04.041037 IP <span class="token number">10.10</span>.1.189 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.20: ICMP <span class="token number">10.10</span>.1.189 udp port <span class="token number">36078</span> unreachable, length <span class="token number">156</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抓取-smtp-pop3-协议的邮件" tabindex="-1"><a class="header-anchor" href="#抓取-smtp-pop3-协议的邮件" aria-hidden="true">#</a> 抓取 SMTP/POP3 协议的邮件</h3><p>可以提取电子邮件的正文和其他数据。例如，只提取电子邮件的收件人：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-l</span> port <span class="token number">25</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;MAIL FROM\\|RCPT TO&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="抓取-ntp-服务的查询和响应" tabindex="-1"><a class="header-anchor" href="#抓取-ntp-服务的查询和响应" aria-hidden="true">#</a> 抓取 NTP 服务的查询和响应</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump dst port <span class="token number">123</span>
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">65535</span> bytes
<span class="token number">21</span>:02:19.112502 IP test33.ntp <span class="token operator">&gt;</span> <span class="token number">199.30</span>.140.74.ntp: NTPv4, Client, length <span class="token number">48</span>
<span class="token number">21</span>:02:19.113888 IP <span class="token number">216.239</span>.35.0.ntp <span class="token operator">&gt;</span> test33.ntp: NTPv4, Server, length <span class="token number">48</span>
<span class="token number">21</span>:02:20.150347 IP test33.ntp <span class="token operator">&gt;</span> <span class="token number">216.239</span>.35.0.ntp: NTPv4, Client, length <span class="token number">48</span>
<span class="token number">21</span>:02:20.150991 IP <span class="token number">216.239</span>.35.0.ntp <span class="token operator">&gt;</span> test33.ntp: NTPv4, Server, length <span class="token number">48</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抓取-snmp-服务的查询和响应" tabindex="-1"><a class="header-anchor" href="#抓取-snmp-服务的查询和响应" aria-hidden="true">#</a> 抓取 SNMP 服务的查询和响应</h3><p>通过 SNMP 服务，渗透测试人员可以获取大量的设备和系统信息。在这些信息中，系统信息最为关键，如操作系统版本、内核版本等。使用 SNMP 协议快速扫描程序 onesixtyone，可以看到目标系统的信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ onesixtyone <span class="token number">10.10</span>.1.10 public
 
Scanning <span class="token number">1</span> hosts, <span class="token number">1</span> communities
<span class="token number">10.10</span>.1.10 <span class="token punctuation">[</span>public<span class="token punctuation">]</span> Linux test33 <span class="token number">4.15</span>.0-20-generic <span class="token comment">#21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 tcpdump 抓取 GetRequest 和 GetResponse：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-n</span> <span class="token parameter variable">-s0</span>  port <span class="token number">161</span> and udp
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on wlp58s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">23</span>:39:13.725522 IP <span class="token number">10.10</span>.1.159.36826 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.20.161:  GetRequest<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>  .1.3.6.1.2.1.1.1.0
<span class="token number">23</span>:39:13.728789 IP <span class="token number">10.10</span>.1.20.161 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.159.36826:  GetResponse<span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">)</span>  .1.3.6.1.2.1.1.1.0<span class="token operator">=</span><span class="token string">&quot;Linux testmachine 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切割-pcap-文件" tabindex="-1"><a class="header-anchor" href="#切割-pcap-文件" aria-hidden="true">#</a> 切割 pcap 文件</h3><p>当抓取大量数据并写入文件时，可以自动切割为多个大小相同的文件。例如，下面的命令表示每 3600 秒创建一个新文件 capture-(hour).pcap，每个文件大小不超过 200*1000000 字节：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump  <span class="token parameter variable">-w</span> /tmp/capture-%H.pcap <span class="token parameter variable">-G</span> <span class="token number">3600</span> <span class="token parameter variable">-C</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些文件的命名为 capture-{1-24}.pcap，24 小时之后，之前的文件就会被覆盖。</p><h3 id="抓取-ipv6-流量" tabindex="-1"><a class="header-anchor" href="#抓取-ipv6-流量" aria-hidden="true">#</a> 抓取 IPv6 流量</h3><p>可以通过过滤器 ip6 来抓取 IPv6 流量，同时可以指定协议如 TCP：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span> ip6 proto <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从之前保存的文件中读取 IPv6 UDP 数据报文：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nr</span> ipv6-test.pcap ip6 proto <span class="token number">17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="检测端口扫描" tabindex="-1"><a class="header-anchor" href="#检测端口扫描" aria-hidden="true">#</a> 检测端口扫描</h3><p>在下面的例子中，你会发现抓取到的报文的源和目的一直不变，且带有标志位 [S] 和 [R]，它们与一系列看似随机的目标端口进行匹配。当发送 SYN 之后，如果目标主机的端口没有打开，就会返回一个 RESET。这是 Nmap 等端口扫描工具的标准做法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span>
 
<span class="token number">21</span>:46:19.693601 IP <span class="token number">10.10</span>.1.10.60460 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.5432: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">116466344</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090332</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.693626 IP <span class="token number">10.10</span>.1.10.35470 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.513: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">3400074709</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090332</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.693762 IP <span class="token number">10.10</span>.1.10.44244 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.389: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2214070267</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090333</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.693772 IP <span class="token number">10.10</span>.1.199.389 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.10.44244: Flags <span class="token punctuation">[</span>R.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">0</span>, ack <span class="token number">2214070268</span>, win <span class="token number">0</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.693783 IP <span class="token number">10.10</span>.1.10.35172 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.1433: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2358257571</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090333</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.693826 IP <span class="token number">10.10</span>.1.10.33022 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.49153: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2406028551</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090333</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695567 IP <span class="token number">10.10</span>.1.10.55130 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.49154: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">3230403372</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090334</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695590 IP <span class="token number">10.10</span>.1.199.49154 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.10.55130: Flags <span class="token punctuation">[</span>R.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">0</span>, ack <span class="token number">3230403373</span>, win <span class="token number">0</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695608 IP <span class="token number">10.10</span>.1.10.33460 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.49152: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">3289070068</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090335</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695622 IP <span class="token number">10.10</span>.1.199.49152 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.10.33460: Flags <span class="token punctuation">[</span>R.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">0</span>, ack <span class="token number">3289070069</span>, win <span class="token number">0</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695637 IP <span class="token number">10.10</span>.1.10.34940 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.1029: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">140319147</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090335</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695650 IP <span class="token number">10.10</span>.1.199.1029 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.10.34940: Flags <span class="token punctuation">[</span>R.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">0</span>, ack <span class="token number">140319148</span>, win <span class="token number">0</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695664 IP <span class="token number">10.10</span>.1.10.45648 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.5060: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2203629201</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090335</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695775 IP <span class="token number">10.10</span>.1.10.49028 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.199.2000: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">635990431</span>, win <span class="token number">29200</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">3547090335</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">21</span>:46:19.695790 IP <span class="token number">10.10</span>.1.199.2000 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.10.49028: Flags <span class="token punctuation">[</span>R.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">0</span>, ack <span class="token number">635990432</span>, win <span class="token number">0</span>, length <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过滤-nmap-nse-脚本测试结果" tabindex="-1"><a class="header-anchor" href="#过滤-nmap-nse-脚本测试结果" aria-hidden="true">#</a> 过滤 Nmap NSE 脚本测试结果</h3><p>本例中 Nmap NSE 测试脚本 http-enum.nse 用来检测 HTTP 服务的合法 URL。</p><p>在执行脚本测试的主机上：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ nmap <span class="token parameter variable">-p</span> <span class="token number">80</span> <span class="token parameter variable">--script</span><span class="token operator">=</span>http-enum.nse targetip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在目标主机上：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nn</span> port <span class="token number">80</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;GET /&quot;</span>
 
GET /w3perl/ HTTP/1.1
GET /w-agora/ HTTP/1.1
GET /way-board/ HTTP/1.1
GET /web800fo/ HTTP/1.1
GET /webaccess/ HTTP/1.1
GET /webadmin/ HTTP/1.1
GET /webAdmin/ HTTP/1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抓取-dns-请求和响应" tabindex="-1"><a class="header-anchor" href="#抓取-dns-请求和响应" aria-hidden="true">#</a> 抓取 DNS 请求和响应</h3><p>向 Google 公共 DNS 发起的出站 DNS 请求和 A 记录响应可以通过 tcpdump 抓取到：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-i</span> wlp58s0 <span class="token parameter variable">-s0</span> port <span class="token number">53</span>
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on wlp58s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">14</span>:19:06.879799 IP test.53852 <span class="token operator">&gt;</span> google-public-dns-a.google.com.domain: <span class="token number">26977</span>+ <span class="token punctuation">[</span>1au<span class="token punctuation">]</span> A? play.google.com. <span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>
<span class="token number">14</span>:19:07.022618 IP google-public-dns-a.google.com.domain <span class="token operator">&gt;</span> test.53852: <span class="token number">26977</span> <span class="token number">1</span>/0/1 A <span class="token number">216.58</span>.203.110 <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抓取-http-有效数据包" tabindex="-1"><a class="header-anchor" href="#抓取-http-有效数据包" aria-hidden="true">#</a> 抓取 HTTP 有效数据包</h3><p>抓取 80 端口的 HTTP 有效数据包，排除 TCP 连接建立过程的数据包（SYN / FIN / ACK）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token string">&#39;tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="将输出内容重定向到-wireshark" tabindex="-1"><a class="header-anchor" href="#将输出内容重定向到-wireshark" aria-hidden="true">#</a> 将输出内容重定向到 Wireshark</h3><p>通常 Wireshark（或 tshark）比 tcpdump 更容易分析应用层协议。一般的做法是在远程服务器上先使用 tcpdump 抓取数据并写入文件，然后再将文件拷贝到本地工作站上用 Wireshark 分析。</p><p>还有一种更高效的方法，可以通过 ssh 连接将抓取到的数据实时发送给 Wireshark 进行分析。以 MacOS 系统为例，可以通过 <code>brew cask install wireshark</code> 来安装，然后通过下面的命令来分析：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> root@remotesystem <span class="token string">&#39;tcpdump -s0 -c 1000 -nn -w - not port 22&#39;</span> <span class="token operator">|</span> /Applications/Wireshark.app/Contents/MacOS/Wireshark <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，如果想分析 DNS 协议，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> root@remotesystem <span class="token string">&#39;tcpdump -s0 -c 1000 -nn -w - port 53&#39;</span> <span class="token operator">|</span> /Applications/Wireshark.app/Contents/MacOS/Wireshark <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>抓取到的数据：</p><figure><img src="https://www.pdai.tech/images/develop/network/dev-network-tcpdump-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>-c</code> 选项用来限制抓取数据的大小。如果不限制大小，就只能通过 ctrl-c 来停止抓取，这样一来不仅关闭了 tcpdump，也关闭了 wireshark。</p><h3 id="找出发包最多的-ip" tabindex="-1"><a class="header-anchor" href="#找出发包最多的-ip" aria-hidden="true">#</a> 找出发包最多的 IP</h3><p>找出一段时间内发包最多的 IP，或者从一堆报文中找出发包最多的 IP，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-nnn</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> <span class="token number">200</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-f</span> <span class="token number">1,2</span>,3,4 <span class="token parameter variable">-d</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">20</span>
 
tcpdump: verbose output suppressed, use <span class="token parameter variable">-v</span> or <span class="token parameter variable">-vv</span> <span class="token keyword">for</span> full protocol decode
listening on enp7s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">200</span> packets captured
<span class="token number">261</span> packets received by filter
<span class="token number">0</span> packets dropped by kernel
    <span class="token number">108</span> IP <span class="token number">10.10</span>.211.181
     <span class="token number">91</span> IP <span class="token number">10.10</span>.1.30
      <span class="token number">1</span> IP <span class="token number">10.10</span>.1.50
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>cut -f 1,2,3,4 -d &#39;.&#39; </code>: 以 . 为分隔符，打印出每行的前四列。即 IP 地址。</li><li><code>sort | uniq -c</code> : 排序并计数</li><li><code>sort -nr</code> : 按照数值大小逆向排序</li></ul><h3 id="抓取用户名和密码" tabindex="-1"><a class="header-anchor" href="#抓取用户名和密码" aria-hidden="true">#</a> 抓取用户名和密码</h3><p>本例将重点放在标准纯文本协议上，过滤出于用户名和密码相关的报文：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump port http or port <span class="token function">ftp</span> or port smtp or port imap or port pop3 or port telnet <span class="token parameter variable">-l</span> <span class="token parameter variable">-A</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-B5</span> <span class="token string">&#39;pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|username:|password:|login:|pass |user &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="抓取-dhcp-报文" tabindex="-1"><a class="header-anchor" href="#抓取-dhcp-报文" aria-hidden="true">#</a> 抓取 DHCP 报文</h3><p>最后一个例子，抓取 DHCP 服务的请求和响应报文，67 为 DHCP 端口，68 为客户机端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tcpdump <span class="token parameter variable">-v</span> <span class="token parameter variable">-n</span> port <span class="token number">67</span> or <span class="token number">68</span>
 
tcpdump: listening on enp7s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes
<span class="token number">14</span>:37:50.059662 IP <span class="token punctuation">(</span>tos 0x10, ttl <span class="token number">128</span>, <span class="token function">id</span> <span class="token number">0</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">328</span><span class="token punctuation">)</span>
    <span class="token number">0.0</span>.0.0.68 <span class="token operator">&gt;</span> <span class="token number">255.255</span>.255.255.67: BOOTP/DHCP, Request from 00:0c:xx:xx:xx:d5, length <span class="token number">300</span>, xid 0xc9779c2a, Flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>
	  Client-Ethernet-Address 00:0c:xx:xx:xx:d5
	  Vendor-rfc1048 Extensions
	    Magic Cookie 0x63825363
	    DHCP-Message Option <span class="token number">53</span>, length <span class="token number">1</span>: Request
	    Requested-IP Option <span class="token number">50</span>, length <span class="token number">4</span>: <span class="token number">10.10</span>.1.163
	    Hostname Option <span class="token number">12</span>, length <span class="token number">14</span>: <span class="token string">&quot;test-ubuntu&quot;</span>
	    Parameter-Request Option <span class="token number">55</span>, length <span class="token number">16</span>: 
	      Subnet-Mask, BR, Time-Zone, Default-Gateway
	      Domain-Name, Domain-Name-Server, Option <span class="token number">119</span>, Hostname
	      Netbios-Name-Server, Netbios-Scope, MTU, Classless-Static-Route
	      NTP, Classless-Static-Route-Microsoft, Static-Route, Option <span class="token number">252</span>
<span class="token number">14</span>:37:50.059667 IP <span class="token punctuation">(</span>tos 0x10, ttl <span class="token number">128</span>, <span class="token function">id</span> <span class="token number">0</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">328</span><span class="token punctuation">)</span>
    <span class="token number">0.0</span>.0.0.68 <span class="token operator">&gt;</span> <span class="token number">255.255</span>.255.255.67: BOOTP/DHCP, Request from 00:0c:xx:xx:xx:d5, length <span class="token number">300</span>, xid 0xc9779c2a, Flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>
	  Client-Ethernet-Address 00:0c:xx:xx:xx:d5
	  Vendor-rfc1048 Extensions
	    Magic Cookie 0x63825363
	    DHCP-Message Option <span class="token number">53</span>, length <span class="token number">1</span>: Request
	    Requested-IP Option <span class="token number">50</span>, length <span class="token number">4</span>: <span class="token number">10.10</span>.1.163
	    Hostname Option <span class="token number">12</span>, length <span class="token number">14</span>: <span class="token string">&quot;test-ubuntu&quot;</span>
	    Parameter-Request Option <span class="token number">55</span>, length <span class="token number">16</span>: 
	      Subnet-Mask, BR, Time-Zone, Default-Gateway
	      Domain-Name, Domain-Name-Server, Option <span class="token number">119</span>, Hostname
	      Netbios-Name-Server, Netbios-Scope, MTU, Classless-Static-Route
	      NTP, Classless-Static-Route-Microsoft, Static-Route, Option <span class="token number">252</span>
<span class="token number">14</span>:37:50.060780 IP <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">53564</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">339</span><span class="token punctuation">)</span>
    <span class="token number">10.10</span>.1.1.67 <span class="token operator">&gt;</span> <span class="token number">10.10</span>.1.163.68: BOOTP/DHCP, Reply, length <span class="token number">311</span>, xid 0xc9779c2a, Flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>
	  Your-IP <span class="token number">10.10</span>.1.163
	  Server-IP <span class="token number">10.10</span>.1.1
	  Client-Ethernet-Address 00:0c:xx:xx:xx:d5
	  Vendor-rfc1048 Extensions
	    Magic Cookie 0x63825363
	    DHCP-Message Option <span class="token number">53</span>, length <span class="token number">1</span>: ACK
	    Server-ID Option <span class="token number">54</span>, length <span class="token number">4</span>: <span class="token number">10.10</span>.1.1
	    Lease-Time Option <span class="token number">51</span>, length <span class="token number">4</span>: <span class="token number">86400</span>
	    RN Option <span class="token number">58</span>, length <span class="token number">4</span>: <span class="token number">43200</span>
	    RB Option <span class="token number">59</span>, length <span class="token number">4</span>: <span class="token number">75600</span>
	    Subnet-Mask Option <span class="token number">1</span>, length <span class="token number">4</span>: <span class="token number">255.255</span>.255.0
	    BR Option <span class="token number">28</span>, length <span class="token number">4</span>: <span class="token number">10.10</span>.1.255
	    Domain-Name-Server Option <span class="token number">6</span>, length <span class="token number">4</span>: <span class="token number">10.10</span>.1.1
	    Hostname Option <span class="token number">12</span>, length <span class="token number">14</span>: <span class="token string">&quot;test-ubuntu&quot;</span>
	    T252 Option <span class="token number">252</span>, length <span class="token number">1</span>: <span class="token number">10</span>
	    Default-Gateway Option <span class="token number">3</span>, length <span class="token number">4</span>: <span class="token number">10.10</span>.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文主要介绍了 tcpdump 的基本语法和使用方法，并通过一些示例来展示它强大的过滤功能。将 tcpdump 与 wireshark 进行组合可以发挥更强大的功效，本文也展示了如何优雅顺滑地结合 tcpdump 和 wireshark。如果你想了解更多的细节，可以查看 tcpdump 的 man 手册。</p><h2 id="文章来源" tabindex="-1"><a class="header-anchor" href="#文章来源" aria-hidden="true">#</a> 文章来源</h2>`,150),u=n("li",null,"本文作者： 米开朗基杨",-1),d={href:"https://www.cnblogs.com/ryanyangcs/p/12448499.html",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"版权声明：本作品采用知识共享署名-非商业性使用-禁止演绎 2.5 中国大陆许可协议进行许可。",-1),b={href:"https://hackertarget.com/tcpdump-examples/",target:"_blank",rel:"noopener noreferrer"};function k(v,h){const a=t("ExternalLinkIcon");return l(),c("div",null,[i,n("ul",null,[u,n("li",null,[s("本文链接："),n("a",d,[s("https://www.cnblogs.com/ryanyangcs/p/12448499.html"),e(a)])]),m]),n("p",null,[s("原文主要翻译自 《"),n("a",b,[s("Tcpdump Examples在新窗口打开"),e(a)]),s("》。")])])}const f=p(r,[["render",k],["__file","dev-protocol-tool-tcpdump.html.vue"]]);export{f as default};
