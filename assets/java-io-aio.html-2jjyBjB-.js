const e=JSON.parse('{"key":"v-3593583a","path":"/java/io/java-io-aio.html","title":"Java AIO - 异步IO详解","lang":"zh-CN","frontmatter":{"date":"2022-03-29T00:00:00.000Z","category":["Java IO/NIO/AIO"],"tag":["Java IO/NIO/AIO"],"description":"Java AIO - 异步IO详解 本文主要对异步IO和Java中对AIO的支持详解。 异步IO 上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明了IO模型是由操作系统提供支持，且这三种IO模型都是同步IO，都是采用的“应用程序不询问我，我绝不会主动通知”的方式。 异步IO则是采用“订阅-通知”模式: 即应用程序向操作系统注册IO监听，然后继续做自己的事情。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数:","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/io/java-io-aio.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Java AIO - 异步IO详解"}],["meta",{"property":"og:description","content":"Java AIO - 异步IO详解 本文主要对异步IO和Java中对AIO的支持详解。 异步IO 上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明了IO模型是由操作系统提供支持，且这三种IO模型都是同步IO，都是采用的“应用程序不询问我，我绝不会主动通知”的方式。 异步IO则是采用“订阅-通知”模式: 即应用程序向操作系统注册IO监听，然后继续做自己的事情。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java IO/NIO/AIO"}],["meta",{"property":"article:published_time","content":"2022-03-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java AIO - 异步IO详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"异步IO","slug":"异步io","link":"#异步io","children":[]},{"level":2,"title":"JAVA对AIO的支持","slug":"java对aio的支持","link":"#java对aio的支持","children":[{"level":3,"title":"JAVA AIO框架简析","slug":"java-aio框架简析","link":"#java-aio框架简析","children":[]},{"level":3,"title":"代码实例","slug":"代码实例","link":"#代码实例","children":[]},{"level":3,"title":"要点讲解","slug":"要点讲解","link":"#要点讲解","children":[]},{"level":3,"title":"还有改进可能","slug":"还有改进可能","link":"#还有改进可能","children":[]}]},{"level":2,"title":"为什么还有Netty","slug":"为什么还有netty","link":"#为什么还有netty","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":11.03,"words":3308},"filePathRelative":"java/io/java-io-aio.md","localizedDate":"2022年3月29日","excerpt":"<h1> Java AIO - 异步IO详解</h1>\\n<blockquote>\\n<p>本文主要对异步IO和Java中对AIO的支持详解。</p>\\n</blockquote>\\n<h2> 异步IO</h2>\\n<p>上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明了IO模型是由操作系统提供支持，且这三种IO模型都是同步IO，都是采用的“应用程序不询问我，我绝不会主动通知”的方式。</p>\\n<p>异步IO则是采用“订阅-通知”模式: 即应用程序向操作系统注册IO监听，然后继续做自己的事情。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数:</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
