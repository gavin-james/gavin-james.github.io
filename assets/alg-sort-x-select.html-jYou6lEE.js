const e=JSON.parse('{"key":"v-12a17ece","path":"/develop/algorithms-structures/alg-sort/alg-sort-x-select.html","title":"排序 - 选择排序(Selection sort)","lang":"zh-CN","frontmatter":{"date":"2019-07-05T00:00:00.000Z","category":["算法和数据结构"],"tag":["排序算法"],"description":"排序 - 选择排序(Selection sort) 选择排序(Selection sort)是一种简单直观的排序算法。 选择排序介绍 它的基本思想是: 首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 选择排序实现 下面以数列{20,40,30,10,60,50}为例，演示它的选择排序过程(如下图)。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-sort/alg-sort-x-select.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"排序 - 选择排序(Selection sort)"}],["meta",{"property":"og:description","content":"排序 - 选择排序(Selection sort) 选择排序(Selection sort)是一种简单直观的排序算法。 选择排序介绍 它的基本思想是: 首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 选择排序实现 下面以数列{20,40,30,10,60,50}为例，演示它的选择排序过程(如下图)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"排序算法"}],["meta",{"property":"article:published_time","content":"2019-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序 - 选择排序(Selection sort)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"选择排序介绍","slug":"选择排序介绍","link":"#选择排序介绍","children":[]},{"level":2,"title":"选择排序实现","slug":"选择排序实现","link":"#选择排序实现","children":[]},{"level":2,"title":"选择排序的时间复杂度和稳定性","slug":"选择排序的时间复杂度和稳定性","link":"#选择排序的时间复杂度和稳定性","children":[{"level":3,"title":"选择排序时间复杂度","slug":"选择排序时间复杂度","link":"#选择排序时间复杂度","children":[]},{"level":3,"title":"选择排序稳定性","slug":"选择排序稳定性","link":"#选择排序稳定性","children":[]}]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":3.5,"words":1051},"filePathRelative":"develop/algorithms-structures/alg-sort/alg-sort-x-select.md","localizedDate":"2019年7月5日","excerpt":"<h1> 排序 - 选择排序(Selection sort)</h1>\\n<blockquote>\\n<p>选择排序(Selection sort)是一种简单直观的排序算法。</p>\\n</blockquote>\\n<h2> 选择排序介绍</h2>\\n<p>它的基本思想是: 首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\\n<h2> 选择排序实现</h2>\\n<p>下面以数列{20,40,30,10,60,50}为例，演示它的选择排序过程(如下图)。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
