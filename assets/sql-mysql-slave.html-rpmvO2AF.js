import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,f as t}from"./app-IRwI16JE.js";const l={},s=t('<h1 id="mysql-主从复制与读写分离" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制与读写分离" aria-hidden="true">#</a> MySQL - 主从复制与读写分离</h1><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h2><p>主要涉及三个线程: binlog 线程、I/O 线程和 SQL 线程。</p><ul><li><strong>binlog 线程</strong> : 负责将主服务器上的数据更改写入二进制日志中。</li><li><strong>I/O 线程</strong> : 负责从主服务器上读取二进制日志，并写入从服务器的中继日志中。</li><li><strong>SQL 线程</strong> : 负责读取中继日志并重放其中的 SQL 语句。</li></ul><figure><img src="https://www.pdai.tech/images/mysql/master-slave.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离" aria-hidden="true">#</a> 读写分离</h2><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p><p>读写分离能提高性能的原因在于:</p><ul><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性。</li></ul><p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p><figure><img src="https://www.pdai.tech/images/mysql/master-slave-proxy.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',11),r=[s];function n(o,c){return a(),e("div",null,r)}const h=i(l,[["render",n],["__file","sql-mysql-slave.html.vue"]]);export{h as default};
