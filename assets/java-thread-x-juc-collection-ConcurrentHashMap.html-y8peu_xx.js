const e=JSON.parse('{"key":"v-0e60e6be","path":"/java/thread/java-thread-x-juc-collection-ConcurrentHashMap.html","title":"JUC集合: ConcurrentHashMap详解","lang":"zh-CN","frontmatter":{"date":"2022-03-05T00:00:00.000Z","category":["Java 多线程"],"tag":["Java 多线程"],"description":"JUC集合: ConcurrentHashMap详解 JDK1.7之前的ConcurrentHashMap使用分段锁机制实现，JDK1.8则使用数组+链表+红黑树数据结构和CAS原子操作实现ConcurrentHashMap；本文将分别介绍这两种方式的实现方案及其区别。 带着BAT大厂的面试问题去理解 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。 为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么? ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题 ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制 ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容? ConcurrentHashMap JDK1.7说说其put的机制? ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容) ConcurrentHashMap JDK1.8是如何扩容的? tryPresize ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8? ConcurrentHashMap JDK1.8是如何进行数据迁移的? transfer","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/thread/java-thread-x-juc-collection-ConcurrentHashMap.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"JUC集合: ConcurrentHashMap详解"}],["meta",{"property":"og:description","content":"JUC集合: ConcurrentHashMap详解 JDK1.7之前的ConcurrentHashMap使用分段锁机制实现，JDK1.8则使用数组+链表+红黑树数据结构和CAS原子操作实现ConcurrentHashMap；本文将分别介绍这两种方式的实现方案及其区别。 带着BAT大厂的面试问题去理解 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。 为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么? ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题 ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制 ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容? ConcurrentHashMap JDK1.7说说其put的机制? ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容) ConcurrentHashMap JDK1.8是如何扩容的? tryPresize ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8? ConcurrentHashMap JDK1.8是如何进行数据迁移的? transfer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 多线程"}],["meta",{"property":"article:published_time","content":"2022-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC集合: ConcurrentHashMap详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"为什么HashTable慢","slug":"为什么hashtable慢","link":"#为什么hashtable慢","children":[]},{"level":2,"title":"ConcurrentHashMap - JDK 1.7","slug":"concurrenthashmap-jdk-1-7","link":"#concurrenthashmap-jdk-1-7","children":[{"level":3,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"put 过程分析","slug":"put-过程分析","link":"#put-过程分析","children":[]},{"level":3,"title":"初始化槽: ensureSegment","slug":"初始化槽-ensuresegment","link":"#初始化槽-ensuresegment","children":[]},{"level":3,"title":"获取写入锁: scanAndLockForPut","slug":"获取写入锁-scanandlockforput","link":"#获取写入锁-scanandlockforput","children":[]},{"level":3,"title":"扩容: rehash","slug":"扩容-rehash","link":"#扩容-rehash","children":[]},{"level":3,"title":"get 过程分析","slug":"get-过程分析","link":"#get-过程分析","children":[]},{"level":3,"title":"并发问题分析","slug":"并发问题分析","link":"#并发问题分析","children":[]}]},{"level":2,"title":"ConcurrentHashMap - JDK 1.8","slug":"concurrenthashmap-jdk-1-8","link":"#concurrenthashmap-jdk-1-8","children":[{"level":3,"title":"数据结构","slug":"数据结构-1","link":"#数据结构-1","children":[]},{"level":3,"title":"初始化","slug":"初始化-1","link":"#初始化-1","children":[]},{"level":3,"title":"put 过程分析","slug":"put-过程分析-1","link":"#put-过程分析-1","children":[]},{"level":3,"title":"初始化数组: initTable","slug":"初始化数组-inittable","link":"#初始化数组-inittable","children":[]},{"level":3,"title":"链表转红黑树: treeifyBin","slug":"链表转红黑树-treeifybin","link":"#链表转红黑树-treeifybin","children":[]},{"level":3,"title":"扩容: tryPresize","slug":"扩容-trypresize","link":"#扩容-trypresize","children":[]},{"level":3,"title":"数据迁移: transfer","slug":"数据迁移-transfer","link":"#数据迁移-transfer","children":[]},{"level":3,"title":"get 过程分析","slug":"get-过程分析-1","link":"#get-过程分析-1","children":[]}]},{"level":2,"title":"对比总结","slug":"对比总结","link":"#对比总结","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":30.13,"words":9039},"filePathRelative":"java/thread/java-thread-x-juc-collection-ConcurrentHashMap.md","localizedDate":"2022年3月5日","excerpt":"<h1> JUC集合: ConcurrentHashMap详解</h1>\\n<blockquote>\\n<p>JDK1.7之前的ConcurrentHashMap使用分段锁机制实现，JDK1.8则使用数组+链表+红黑树数据结构和CAS原子操作实现ConcurrentHashMap；本文将分别介绍这两种方式的实现方案及其区别。</p>\\n</blockquote>\\n<h2> 带着BAT大厂的面试问题去理解</h2>\\n<blockquote>\\n<p>提示</p>\\n<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。</p>\\n</blockquote>\\n<ul>\\n<li>为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么?</li>\\n<li>ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题</li>\\n<li>ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制</li>\\n<li>ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS</li>\\n<li>ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容?</li>\\n<li>ConcurrentHashMap JDK1.7说说其put的机制?</li>\\n<li>ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容)</li>\\n<li>ConcurrentHashMap JDK1.8是如何扩容的? tryPresize</li>\\n<li>ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8?</li>\\n<li>ConcurrentHashMap JDK1.8是如何进行数据迁移的? transfer</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
