const t=JSON.parse(`{"key":"v-48dcdeca","path":"/develop/spec/dev-x-overview.html","title":"♥常见开发理论♥","lang":"zh-CN","frontmatter":{"date":"2019-05-05T00:00:00.000Z","category":["开发理论"],"tag":["开发理论"],"description":"♥常见开发理论♥ 开源协议知识体系详解。 相关文章 常见开发理论相关文章。 软件开发中的原则 - SOLID 在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将总结这些常见的原则，和具体阐述意义。 分布式理论 - CAP CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。 分布式理论 - BASE BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。 事务理论 - ACID 一个事务有四个基本特性，也就是我们常说的（ACID）：Atomicity（原子性）：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。Consistency（一致性）：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。Isolation（隔离性）： 多个并发事务之间相互隔离，不能互相干扰。Durability（持久性）：事务完成后，对数据库的更改是永久保存的，不能回滚。 微服务基础 - 康威定律 微服务这个概念很早就提出了， 真正火起来是在2016年左右，而康威定律(Conway's Law)就是微服务理论基础。本文整理自肥侠的文章, 帮助大家理解微服务理论体系。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/spec/dev-x-overview.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"♥常见开发理论♥"}],["meta",{"property":"og:description","content":"♥常见开发理论♥ 开源协议知识体系详解。 相关文章 常见开发理论相关文章。 软件开发中的原则 - SOLID 在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将总结这些常见的原则，和具体阐述意义。 分布式理论 - CAP CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。 分布式理论 - BASE BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。 事务理论 - ACID 一个事务有四个基本特性，也就是我们常说的（ACID）：Atomicity（原子性）：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。Consistency（一致性）：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。Isolation（隔离性）： 多个并发事务之间相互隔离，不能互相干扰。Durability（持久性）：事务完成后，对数据库的更改是永久保存的，不能回滚。 微服务基础 - 康威定律 微服务这个概念很早就提出了， 真正火起来是在2016年左右，而康威定律(Conway's Law)就是微服务理论基础。本文整理自肥侠的文章, 帮助大家理解微服务理论体系。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"开发理论"}],["meta",{"property":"article:published_time","content":"2019-05-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"♥常见开发理论♥\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-05-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"createdTime":1690160698000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"develop/spec/dev-x-overview.md","localizedDate":"2019年5月5日","excerpt":"<h1> ♥常见开发理论♥</h1>\\n<blockquote>\\n<p>开源协议知识体系详解。</p>\\n</blockquote>\\n<h2> 相关文章</h2>\\n<blockquote>\\n<p>常见开发理论相关文章。</p>\\n</blockquote>\\n<ul>\\n<li>软件开发中的原则 - SOLID\\n<ul>\\n<li>在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将总结这些常见的原则，和具体阐述意义。</li>\\n</ul>\\n</li>\\n<li>分布式理论 - CAP\\n<ul>\\n<li>CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。</li>\\n</ul>\\n</li>\\n<li>分布式理论 - BASE\\n<ul>\\n<li>BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。</li>\\n</ul>\\n</li>\\n<li>事务理论 - ACID\\n<ul>\\n<li>一个事务有四个基本特性，也就是我们常说的（ACID）：<strong>Atomicity（原子性）</strong>：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。<strong>Consistency（一致性）</strong>：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。<strong>Isolation（隔离性）</strong>： 多个并发事务之间相互隔离，不能互相干扰。<strong>Durability（持久性）</strong>：事务完成后，对数据库的更改是永久保存的，不能回滚。</li>\\n</ul>\\n</li>\\n<li>微服务基础 - 康威定律\\n<ul>\\n<li>微服务这个概念很早就提出了， 真正火起来是在2016年左右，而康威定律(Conway's Law)就是微服务理论基础。本文整理自肥侠的文章, 帮助大家理解微服务理论体系。</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}`);export{t as data};
