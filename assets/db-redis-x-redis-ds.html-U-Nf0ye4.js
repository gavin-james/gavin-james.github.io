const e=JSON.parse('{"key":"v-1d4cc7ae","path":"/db/nosql-redis/db-redis-x-redis-ds.html","title":"Redis进阶 - 数据结构：底层数据结构详解","lang":"zh-CN","frontmatter":{"date":"2022-06-15T00:00:00.000Z","category":["NoSQL Redis"],"tag":["NoSQL Redis"],"description":"Redis进阶 - 数据结构：底层数据结构详解 我们在前文已经阐述了Redis 5种基础数据类型详解，分别是字符串(string)、列表(list)、哈希(hash)、集合(set)、有序集合(zset)；那么这些基础类型的底层是如何实现的呢？Redis的每种对象其实都由对象结构(redisObject) 与 对应编码的数据结构组合而成, 前文是第一部分对象机制详解, 本文主要介绍底层数据结构 部分。（在这特别提下，大多数人构建知识体系去读源码是不太现实的，这时候我认为更为重要的是，理解为何会出现这样的设计，知道它解决了什么问题，然后对应了解相关知识点，最终在一些应用场景时可以以此来通过调整存储的类型进一步提升优化性能）。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/db/nosql-redis/db-redis-x-redis-ds.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Redis进阶 - 数据结构：底层数据结构详解"}],["meta",{"property":"og:description","content":"Redis进阶 - 数据结构：底层数据结构详解 我们在前文已经阐述了Redis 5种基础数据类型详解，分别是字符串(string)、列表(list)、哈希(hash)、集合(set)、有序集合(zset)；那么这些基础类型的底层是如何实现的呢？Redis的每种对象其实都由对象结构(redisObject) 与 对应编码的数据结构组合而成, 前文是第一部分对象机制详解, 本文主要介绍底层数据结构 部分。（在这特别提下，大多数人构建知识体系去读源码是不太现实的，这时候我认为更为重要的是，理解为何会出现这样的设计，知道它解决了什么问题，然后对应了解相关知识点，最终在一些应用场景时可以以此来通过调整存储的类型进一步提升优化性能）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T08:34:19.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"NoSQL Redis"}],["meta",{"property":"article:published_time","content":"2022-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T08:34:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis进阶 - 数据结构：底层数据结构详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T08:34:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"底层数据结构引入","slug":"底层数据结构引入","link":"#底层数据结构引入","children":[]},{"level":2,"title":"简单动态字符串 - sds","slug":"简单动态字符串-sds","link":"#简单动态字符串-sds","children":[{"level":3,"title":"SDS 定义","slug":"sds-定义","link":"#sds-定义","children":[]},{"level":3,"title":"为什么使用SDS","slug":"为什么使用sds","link":"#为什么使用sds","children":[]},{"level":3,"title":"空间预分配补进一步理解","slug":"空间预分配补进一步理解","link":"#空间预分配补进一步理解","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"压缩列表 - ZipList","slug":"压缩列表-ziplist","link":"#压缩列表-ziplist","children":[{"level":3,"title":"ziplist结构","slug":"ziplist结构","link":"#ziplist结构","children":[]},{"level":3,"title":"Entry结构","slug":"entry结构","link":"#entry结构","children":[]},{"level":3,"title":"为什么ZipList特别省内存","slug":"为什么ziplist特别省内存","link":"#为什么ziplist特别省内存","children":[]},{"level":3,"title":"ziplist的缺点","slug":"ziplist的缺点","link":"#ziplist的缺点","children":[]}]},{"level":2,"title":"快表 - QuickList","slug":"快表-quicklist","link":"#快表-quicklist","children":[{"level":3,"title":"quicklist结构","slug":"quicklist结构","link":"#quicklist结构","children":[]},{"level":3,"title":"quicklist内存布局图","slug":"quicklist内存布局图","link":"#quicklist内存布局图","children":[]},{"level":3,"title":"quicklist更多额外信息","slug":"quicklist更多额外信息","link":"#quicklist更多额外信息","children":[]}]},{"level":2,"title":"字典/哈希表 - Dict","slug":"字典-哈希表-dict","link":"#字典-哈希表-dict","children":[{"level":3,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":3,"title":"一些要点","slug":"一些要点","link":"#一些要点","children":[]}]},{"level":2,"title":"整数集 - IntSet","slug":"整数集-intset","link":"#整数集-intset","children":[{"level":3,"title":"intset结构","slug":"intset结构","link":"#intset结构","children":[]},{"level":3,"title":"内存布局图","slug":"内存布局图","link":"#内存布局图","children":[]},{"level":3,"title":"整数集合的升级","slug":"整数集合的升级","link":"#整数集合的升级","children":[]}]},{"level":2,"title":"跳表 - ZSkipList","slug":"跳表-zskiplist","link":"#跳表-zskiplist","children":[{"level":3,"title":"什么是跳跃表","slug":"什么是跳跃表","link":"#什么是跳跃表","children":[]},{"level":3,"title":"Redis跳跃表的设计","slug":"redis跳跃表的设计","link":"#redis跳跃表的设计","children":[]},{"level":3,"title":"为什么不用平衡树或者哈希表","slug":"为什么不用平衡树或者哈希表","link":"#为什么不用平衡树或者哈希表","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1690160698000,"updatedTime":1703579659000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":29.01,"words":8702},"filePathRelative":"db/nosql-redis/db-redis-x-redis-ds.md","localizedDate":"2022年6月15日","excerpt":"<h1> Redis进阶 - 数据结构：底层数据结构详解</h1>\\n<blockquote>\\n<p>我们在前文已经阐述了<a href=\\"\\">Redis 5种基础数据类型详解</a>，分别是字符串(string)、列表(list)、哈希(hash)、集合(set)、有序集合(zset)；那么这些基础类型的底层是如何实现的呢？Redis的每种对象其实都由<strong>对象结构(redisObject)</strong> 与 <strong>对应编码的数据结构</strong>组合而成, 前文是第一部分<a href=\\"\\">对象机制详解</a>, 本文主要介绍<strong>底层数据结构</strong> 部分。（在这特别提下，大多数人构建知识体系去读源码是不太现实的，这时候我认为更为重要的是，理解为何会出现这样的设计，知道它解决了什么问题，然后对应了解相关知识点，最终在一些应用场景时可以以此来通过调整存储的类型进一步提升优化性能）。</p>\\n</blockquote>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
