const e=JSON.parse('{"key":"v-8e59b74e","path":"/develop/design/facade.html","title":"结构型外观模式","lang":"zh-CN","frontmatter":{"title":"结构型外观模式","date":"2019-10-26T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"外观模式基本介绍 现实生活中，常常存在办事较复杂的例子，如办房产证或注册一家公司，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。 软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了「开闭原则」，也违背了「迪米特法则」，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。 外观模式（Facade Pattern），也叫 过程模式、门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/design/facade.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"结构型外观模式"}],["meta",{"property":"og:description","content":"外观模式基本介绍 现实生活中，常常存在办事较复杂的例子，如办房产证或注册一家公司，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。 软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了「开闭原则」，也违背了「迪米特法则」，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。 外观模式（Facade Pattern），也叫 过程模式、门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-12T04:14:48.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-10-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-12T04:14:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构型外观模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-12T04:14:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"外观模式基本介绍","slug":"外观模式基本介绍","link":"#外观模式基本介绍","children":[]},{"level":2,"title":"外观模式的结构与实现","slug":"外观模式的结构与实现","link":"#外观模式的结构与实现","children":[{"level":3,"title":"模式的结构","slug":"模式的结构","link":"#模式的结构","children":[]},{"level":3,"title":"模式的实现","slug":"模式的实现","link":"#模式的实现","children":[]}]},{"level":2,"title":"影院管理项目","slug":"影院管理项目","link":"#影院管理项目","children":[]},{"level":2,"title":"传统方式解决影院管理","slug":"传统方式解决影院管理","link":"#传统方式解决影院管理","children":[{"level":3,"title":"传统方式解决问题图","slug":"传统方式解决问题图","link":"#传统方式解决问题图","children":[]},{"level":3,"title":"传统方式解决问题分析","slug":"传统方式解决问题分析","link":"#传统方式解决问题分析","children":[]}]},{"level":2,"title":"外观模式解决影院管理","slug":"外观模式解决影院管理","link":"#外观模式解决影院管理","children":[]},{"level":2,"title":"MyBatis 框架的外观模式剖析","slug":"mybatis-框架的外观模式剖析","link":"#mybatis-框架的外观模式剖析","children":[]},{"level":2,"title":"外观模式的注意事项和细节","slug":"外观模式的注意事项和细节","link":"#外观模式的注意事项和细节","children":[]},{"level":2,"title":"外观模式的应用场景","slug":"外观模式的应用场景","link":"#外观模式的应用场景","children":[]}],"git":{"createdTime":1681272888000,"updatedTime":1681272888000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":7.67,"words":2300},"filePathRelative":"develop/design/facade.md","localizedDate":"2019年10月26日","excerpt":"<h2> 外观模式基本介绍</h2>\\n<p>现实生活中，常常存在办事较复杂的例子，如办房产证或注册一家公司，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。</p>\\n<p>软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了「开闭原则」，也违背了「迪米特法则」，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。</p>\\n<p><strong>外观模式</strong>（Facade Pattern），也叫 <strong>过程模式</strong>、<strong>门面模式</strong>，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
