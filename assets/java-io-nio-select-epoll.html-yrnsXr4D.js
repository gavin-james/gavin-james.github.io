const e=JSON.parse('{"key":"v-74aca148","path":"/java/io/java-io-nio-select-epoll.html","title":"Java NIO - IO多路复用详解","lang":"zh-CN","frontmatter":{"date":"2022-03-28T00:00:00.000Z","category":["Java IO/NIO/AIO"],"tag":["Java IO/NIO/AIO"],"description":"Java NIO - IO多路复用详解 本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。 现实场景 我们试想一下这样的现实场景: 一个餐厅同时有100位客人到店，当然到店后第一件要做的事情就是点菜。但是问题来了，餐厅老板为了节约人力成本目前只有一位大堂服务员拿着唯一的一本菜单等待客人进行服务。 那么最笨(但是最简单)的方法是(方法A)，无论有多少客人等待点餐，服务员都把仅有的一份菜单递给其中一位客人，然后站在客人身旁等待这个客人完成点菜过程。在记录客人点菜内容后，把点菜记录交给后堂厨师。然后是第二位客人。。。。然后是第三位客人。很明显，只有脑袋被门夹过的老板，才会这样设置服务流程。因为随后的80位客人，再等待超时后就会离店(还会给差评)。 于是还有一种办法(方法B)，老板马上新雇佣99名服务员，同时印制99本新的菜单。每一名服务员手持一本菜单负责一位客人(关键不只在于服务员，还在于菜单。因为没有菜单客人也无法点菜)。在客人点完菜后，记录点菜内容交给后堂厨师(当然为了更高效，后堂厨师最好也有100名)。这样每一位客人享受的就是VIP服务咯，当然客人不会走，但是人力成本可是一个大头哦(亏死你)。 另外一种办法(方法C)，就是改进点菜的方式，当客人到店后，自己申请一本菜单。想好自己要点的才后，就呼叫服务员。服务员站在自己身边后记录客人的菜单内容。将菜单递给厨师的过程也要进行改进，并不是每一份菜单记录好以后，都要交给后堂厨师。服务员可以记录号多份菜单后，同时交给厨师就行了。那么这种方式，对于老板来说人力成本是最低的；对于客人来说，虽然不再享受VIP服务并且要进行一定的等待，但是这些都是可接受的；对于服务员来说，基本上她的时间都没有浪费，基本上被老板压杆了最后一滴油水。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/io/java-io-nio-select-epoll.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Java NIO - IO多路复用详解"}],["meta",{"property":"og:description","content":"Java NIO - IO多路复用详解 本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。 现实场景 我们试想一下这样的现实场景: 一个餐厅同时有100位客人到店，当然到店后第一件要做的事情就是点菜。但是问题来了，餐厅老板为了节约人力成本目前只有一位大堂服务员拿着唯一的一本菜单等待客人进行服务。 那么最笨(但是最简单)的方法是(方法A)，无论有多少客人等待点餐，服务员都把仅有的一份菜单递给其中一位客人，然后站在客人身旁等待这个客人完成点菜过程。在记录客人点菜内容后，把点菜记录交给后堂厨师。然后是第二位客人。。。。然后是第三位客人。很明显，只有脑袋被门夹过的老板，才会这样设置服务流程。因为随后的80位客人，再等待超时后就会离店(还会给差评)。 于是还有一种办法(方法B)，老板马上新雇佣99名服务员，同时印制99本新的菜单。每一名服务员手持一本菜单负责一位客人(关键不只在于服务员，还在于菜单。因为没有菜单客人也无法点菜)。在客人点完菜后，记录点菜内容交给后堂厨师(当然为了更高效，后堂厨师最好也有100名)。这样每一位客人享受的就是VIP服务咯，当然客人不会走，但是人力成本可是一个大头哦(亏死你)。 另外一种办法(方法C)，就是改进点菜的方式，当客人到店后，自己申请一本菜单。想好自己要点的才后，就呼叫服务员。服务员站在自己身边后记录客人的菜单内容。将菜单递给厨师的过程也要进行改进，并不是每一份菜单记录好以后，都要交给后堂厨师。服务员可以记录号多份菜单后，同时交给厨师就行了。那么这种方式，对于老板来说人力成本是最低的；对于客人来说，虽然不再享受VIP服务并且要进行一定的等待，但是这些都是可接受的；对于服务员来说，基本上她的时间都没有浪费，基本上被老板压杆了最后一滴油水。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java IO/NIO/AIO"}],["meta",{"property":"article:published_time","content":"2022-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java NIO - IO多路复用详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"现实场景","slug":"现实场景","link":"#现实场景","children":[]},{"level":2,"title":"典型的多路复用IO实现","slug":"典型的多路复用io实现","link":"#典型的多路复用io实现","children":[]},{"level":2,"title":"Reactor模型和Proactor模型","slug":"reactor模型和proactor模型","link":"#reactor模型和proactor模型","children":[{"level":3,"title":"传统IO模型","slug":"传统io模型","link":"#传统io模型","children":[]},{"level":3,"title":"Reactor事件驱动模型","slug":"reactor事件驱动模型","link":"#reactor事件驱动模型","children":[]},{"level":3,"title":"Reactor模型----业务处理与IO分离","slug":"reactor模型-业务处理与io分离","link":"#reactor模型-业务处理与io分离","children":[]},{"level":3,"title":"Reactor模型----并发读写","slug":"reactor模型-并发读写","link":"#reactor模型-并发读写","children":[]},{"level":3,"title":"Reactor模型示例","slug":"reactor模型示例","link":"#reactor模型示例","children":[]}]},{"level":2,"title":"JAVA对多路复用IO的支持","slug":"java对多路复用io的支持","link":"#java对多路复用io的支持","children":[{"level":3,"title":"重要概念: Channel","slug":"重要概念-channel","link":"#重要概念-channel","children":[]},{"level":3,"title":"重要概念: Buffer","slug":"重要概念-buffer","link":"#重要概念-buffer","children":[]},{"level":3,"title":"重要概念: Selector","slug":"重要概念-selector","link":"#重要概念-selector","children":[]},{"level":3,"title":"JAVA NIO 框架简要设计分析","slug":"java-nio-框架简要设计分析","link":"#java-nio-框架简要设计分析","children":[]},{"level":3,"title":"JAVA实例","slug":"java实例","link":"#java实例","children":[]},{"level":3,"title":"JAVA实例改进","slug":"java实例改进","link":"#java实例改进","children":[]}]},{"level":2,"title":"多路复用IO的优缺点","slug":"多路复用io的优缺点","link":"#多路复用io的优缺点","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":30.65,"words":9194},"filePathRelative":"java/io/java-io-nio-select-epoll.md","localizedDate":"2022年3月28日","excerpt":"<h1> Java NIO - IO多路复用详解</h1>\\n<blockquote>\\n<p>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。</p>\\n</blockquote>\\n<h2> 现实场景</h2>\\n<p>我们试想一下这样的现实场景:</p>\\n<p>一个餐厅同时有100位客人到店，当然到店后第一件要做的事情就是点菜。但是问题来了，餐厅老板为了节约人力成本目前只有一位大堂服务员拿着唯一的一本菜单等待客人进行服务。</p>\\n<ul>\\n<li>那么最笨(但是最简单)的方法是(方法A)，无论有多少客人等待点餐，服务员都把仅有的一份菜单递给其中一位客人，然后站在客人身旁等待这个客人完成点菜过程。在记录客人点菜内容后，把点菜记录交给后堂厨师。然后是第二位客人。。。。然后是第三位客人。很明显，只有脑袋被门夹过的老板，才会这样设置服务流程。因为随后的80位客人，再等待超时后就会离店(还会给差评)。</li>\\n<li>于是还有一种办法(方法B)，老板马上新雇佣99名服务员，同时印制99本新的菜单。每一名服务员手持一本菜单负责一位客人(关键不只在于服务员，还在于菜单。因为没有菜单客人也无法点菜)。在客人点完菜后，记录点菜内容交给后堂厨师(当然为了更高效，后堂厨师最好也有100名)。这样每一位客人享受的就是VIP服务咯，当然客人不会走，但是人力成本可是一个大头哦(亏死你)。</li>\\n<li>另外一种办法(方法C)，就是改进点菜的方式，当客人到店后，自己申请一本菜单。想好自己要点的才后，就呼叫服务员。服务员站在自己身边后记录客人的菜单内容。将菜单递给厨师的过程也要进行改进，并不是每一份菜单记录好以后，都要交给后堂厨师。服务员可以记录号多份菜单后，同时交给厨师就行了。那么这种方式，对于老板来说人力成本是最低的；对于客人来说，虽然不再享受VIP服务并且要进行一定的等待，但是这些都是可接受的；对于服务员来说，基本上她的时间都没有浪费，基本上被老板压杆了最后一滴油水。</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
