import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as l,a,b as n,d as t,f as p}from"./app-PDcd_-E9.js";const c={},u=p(`<h1 id="字符串匹配-模式预处理-kmp-算法-knuth-morris-pratt" tabindex="-1"><a class="header-anchor" href="#字符串匹配-模式预处理-kmp-算法-knuth-morris-pratt" aria-hidden="true">#</a> 字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt）</h1><blockquote><p>Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一。</p></blockquote><h2 id="算法简介" tabindex="-1"><a class="header-anchor" href="#算法简介" aria-hidden="true">#</a> 算法简介</h2><blockquote><p>如下算法解释主要来源于这里，但是通常很难阅读完全，我推荐你直接进入下一节 <strong>图例解释部分</strong>。</p></blockquote><p>我们来观察一下朴素的字符串匹配算法的操作过程。如下图（a）中所描述，在模式 P = ababaca 和文本 T 的匹配过程中，模板的一个特定位移 s，q = 5 个字符已经匹配成功，但模式 P 的第 6 个字符不能与相应的文本字符匹配。</p><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-21.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，q 个字符已经匹配成功的信息确定了相应的文本字符，而知道这 q 个文本字符，就使我们能够立即确定某些位移是非法的。例如上图（a）中，我们可以判断位移 s+1 是非法的，因为模式 P 的第一个字符 a 将与模式的第二个字符 b 匹配的文本字符进行匹配，显然是不匹配的。而图（b）中则显示了位移 s’ = s+2 处，使模式 P 的前三个字符和相应的三个文本字符对齐后必定会匹配。KMP 算法的基本思路就是设法利用这些已知信息，不要把 &quot;搜索位置&quot; 移回已经比较过的位置，而是继续把它向后面移，这样就提高了匹配效率。</p><blockquote><p>The basic idea behind KMP’s algorithm is: whenever we detect a mismatch (after some matches), we already know some of the characters in the text (since they matched the pattern characters prior to the mismatch). We take advantage of this information to avoid matching the characters that we know will anyway match.</p></blockquote><p>已知模式 P[1..q] 与文本 T[s+1..s+q] 匹配，那么满足 P[1..k] = T[s’+1..s’+k] 其中 s’+k = s+q 的最小位移 s’ &gt; s 是多少？这样的位移 s’ 是大于 s 的但未必非法的第一个位移，因为已知 T[s+1..s+q] 。在最好的情况下有 s’ = s+q，因此立刻能排除掉位移 s+1, s+2 .. s+q-1。在任何情况下，对于新的位移 s’，无需把 P 的前 k 个字符与 T 中相应的字符进行比较，因为它们肯定匹配。</p><p>可以用模式 P 与其自身进行比较，以预先计算出这些必要的信息。例如上图（c）中所示，由于 T[s’+1..s’+k] 是文本中已经知道的部分，所以它是字符串 Pq 的一个后缀。</p><p>此处我们引入模式的前缀函数 π（Pai），π 包含有模式与其自身的位移进行匹配的信息。这些信息可用于避免在朴素的字符串匹配算法中，对无用位移进行测试。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>π<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> max <span class="token punctuation">{</span>k <span class="token operator">:</span> k <span class="token operator">&lt;</span> q and <span class="token class-name">Pk</span> ⊐ <span class="token class-name">Pq</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>π[q] 代表当前字符之前的字符串中，最长的共同前缀后缀的长度。（π[q] is the length of the longest prefix of P that is a proper suffix of Pq.）</p><p>下图给出了关于模式 P = ababababca 的完整前缀函数 π，可称为部分匹配表（Partial Match Table）。</p><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-22.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>计算过程：</p><ul><li>π[1] = 0，a 仅一个字符，前缀和后缀为空集，共有元素最大长度为 0；</li><li>π[2] = 0，ab 的前缀 a，后缀 b，不匹配，共有元素最大长度为 0；</li><li>π[3] = 1，aba，前缀 a ab，后缀 ba a，共有元素最大长度为 1；</li><li>π[4] = 2，abab，前缀 a ab aba，后缀 bab ab b，共有元素最大长度为 2；</li><li>π[5] = 3，ababa，前缀 a ab aba abab，后缀 baba aba ba a，共有元素最大长度为 3；</li><li>π[6] = 4，ababab，前缀 a ab aba abab ababa，后缀 babab abab bab ab b，共有元素最大长度为 4；</li><li>π[7] = 5，abababa，前缀 a ab aba abab ababa ababab，后缀 bababa ababa baba aba ba a，共有元素最大长度为 5；</li><li>π[8] = 6，abababab，前缀 .. ababab ..，后缀 .. ababab ..，共有元素最大长度为 6；</li><li>π[9] = 0，ababababc，前缀和后缀不匹配，共有元素最大长度为 0；</li><li>π[10] = 1，ababababca，前缀 .. a ..，后缀 .. a ..，共有元素最大长度为 1；</li></ul><p>KMP 算法 KMP-MATCHER 中通过调用 COMPUTE-PREFIX-FUNCTION 函数来计算部分匹配表。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">KMP</span><span class="token operator">-</span><span class="token function">MATCHER</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">)</span>
n ← length<span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span>
m ← length<span class="token punctuation">[</span><span class="token class-name">P</span><span class="token punctuation">]</span>
π ← <span class="token constant">COMPUTE</span><span class="token operator">-</span><span class="token constant">PREFIX</span><span class="token operator">-</span><span class="token function">FUNCTION</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">)</span>
q ← <span class="token number">0</span>                          <span class="token comment">//Number of characters matched.</span>
<span class="token keyword">for</span> i ← <span class="token number">1</span> <span class="token keyword">to</span> <span class="token namespace">n</span>                 <span class="token comment">//Scan the text from left to right.</span>
    <span class="token keyword">do</span> <span class="token keyword">while</span> q <span class="token operator">&gt;</span> <span class="token number">0</span> and <span class="token class-name">P</span><span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> ≠ <span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">do</span> q ← π<span class="token punctuation">[</span>q<span class="token punctuation">]</span>        <span class="token comment">//Next character does not match.</span>
        <span class="token keyword">if</span> <span class="token class-name">P</span><span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            then q ← q <span class="token operator">+</span> <span class="token number">1</span>     <span class="token comment">//Next character matches.</span>
        <span class="token keyword">if</span> q <span class="token operator">=</span> m               <span class="token comment">//Is all of P matched?</span>
            then print <span class="token string">&quot;Pattern occurs with shift&quot;</span> i <span class="token operator">-</span> m
            q ← π<span class="token punctuation">[</span>q<span class="token punctuation">]</span>           <span class="token comment">//Look for the next match.</span>
<span class="token constant">COMPUTE</span><span class="token operator">-</span><span class="token constant">PREFIX</span><span class="token operator">-</span><span class="token function">FUNCTION</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">)</span>
m ← length<span class="token punctuation">[</span><span class="token class-name">P</span><span class="token punctuation">]</span>
π<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> ← <span class="token number">0</span>
k ← <span class="token number">0</span>
<span class="token keyword">for</span> q ← <span class="token number">2</span> <span class="token keyword">to</span> <span class="token namespace">m</span>
     <span class="token keyword">do</span> <span class="token keyword">while</span> k <span class="token operator">&gt;</span> <span class="token number">0</span> and <span class="token class-name">P</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> ≠ <span class="token class-name">P</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span>
            <span class="token keyword">do</span> k ← π<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token class-name">P</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span>
           then k ← k <span class="token operator">+</span> <span class="token number">1</span>
        π<span class="token punctuation">[</span>q<span class="token punctuation">]</span> ← k
<span class="token keyword">return</span> π
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>预处理过程 COMPUTE-PREFIX-FUNCTION 的运行时间为 Θ(m)，KMP-MATCHER 的匹配时间为 Θ(n)。</p><p>相比较于 NAIVE-STRING-MATCHER，KMP-MATCHER 的主要优化点就是在当确定字符不匹配时对于 pattern 的位移。</p><p>NAIVE-STRING-MATCHER 的位移效果是：文本向后移一位，模式从头开始。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    s <span class="token operator">=</span> s <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>KMP-MATCHER 首先对模式做了获取共同前缀后缀最大长度的预处理操作，位移过程是先将模式向后移 partial_match_length - table[partial_match_length - 1]，然后再判断是否匹配。这样通过对已匹配字符串的已知信息的利用，可以有效节省比较数量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        s<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面描述了当发现字符 j 与 c 不匹配时的位移效果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// partial_match_length - table[partial_match_length - 1]</span>
    rrababababjjjjjiiooorababababcauuu
      <span class="token operator">||</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">-</span>
      ababababca
    <span class="token comment">// 8-6=2</span>
    rrababababjjjjjiiooorababababcauuu
      xx<span class="token operator">||</span><span class="token operator">||</span><span class="token operator">||</span><span class="token operator">-</span>
        ababababca
    <span class="token comment">// 6-4=2</span>
    rrababababjjjjjiiooorababababcauuu
        xx<span class="token operator">||</span><span class="token operator">||</span><span class="token operator">-</span>
          ababababca
    <span class="token comment">// 4-2=2</span>
    rrababababjjjjjiiooorababababcauuu
          xx<span class="token operator">||</span><span class="token operator">-</span>
            ababababca
    <span class="token comment">// 2-0=2</span>
    rrababababjjjjjiiooorababababcauuu
            xx<span class="token operator">-</span>
              ababababca
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上可知，<strong>KMP 算法的主要特点</strong>是：</p><ul><li>需要对模式字符串做预处理；</li><li>预处理阶段需要额外的 O(m) 空间和复杂度；</li><li>匹配阶段与字符集的大小无关；</li><li>匹配阶段至多执行 2n - 1 次字符比较；</li><li>对模式中字符的比较顺序时从左到右；</li></ul><h2 id="算法图例" tabindex="-1"><a class="header-anchor" href="#算法图例" aria-hidden="true">#</a> 算法图例</h2>`,30),r={href:"http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先，字符串&quot;BBC ABCDAB ABCDABCDABDE&quot;的第一个字符与搜索词&quot;ABCDABD&quot;的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为B与A不匹配，搜索词再往后移。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着比较字符串和搜索词的下一个字符，还是相同。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把&quot;搜索位置&quot;移到已经比较过的位置，重比一遍。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是&quot;ABCDAB&quot;。KMP算法的想法是，设法利用这个已知信息，不要把&quot;搜索位置&quot;移回已经比较过的位置，继续把它向后移，这样就提高了效率。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>已知空格与D不匹配时，前面六个字符&quot;ABCDAB&quot;是匹配的。查表可知，最后一个匹配字符B对应的&quot;部分匹配值&quot;为2，因此按照下面的公式算出向后移动的位数：</p><p>移动位数 = 已匹配的字符数 - 对应的部分匹配值</p><p>因为 6 - 2 等于4，所以将搜索词向后移动4位。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（&quot;AB&quot;），对应的&quot;部分匹配值&quot;为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为空格与A不匹配，继续后移一位。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-12.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-13.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-14.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>下面介绍《部分匹配表》是如何产生的。</p><p>首先，要了解两个概念：&quot;前缀&quot;和&quot;后缀&quot;。 &quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。</p><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-15.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>&quot;部分匹配值&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。以&quot;ABCDABD&quot;为例，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>　　－　<span class="token string">&quot;A&quot;</span>的前缀和后缀都为空集，共有元素的长度为<span class="token number">0</span>；

　　－　<span class="token string">&quot;AB&quot;</span>的前缀为<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">]</span>，后缀为<span class="token punctuation">[</span><span class="token class-name">B</span><span class="token punctuation">]</span>，共有元素的长度为<span class="token number">0</span>；

　　－　<span class="token string">&quot;ABC&quot;</span>的前缀为<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token constant">AB</span><span class="token punctuation">]</span>，后缀为<span class="token punctuation">[</span><span class="token constant">BC</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">]</span>，共有元素的长度<span class="token number">0</span>；

　　－　<span class="token string">&quot;ABCD&quot;</span>的前缀为<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token constant">AB</span><span class="token punctuation">,</span> <span class="token constant">ABC</span><span class="token punctuation">]</span>，后缀为<span class="token punctuation">[</span><span class="token constant">BCD</span><span class="token punctuation">,</span> <span class="token constant">CD</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">]</span>，共有元素的长度为<span class="token number">0</span>；

　　－　<span class="token string">&quot;ABCDA&quot;</span>的前缀为<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token constant">AB</span><span class="token punctuation">,</span> <span class="token constant">ABC</span><span class="token punctuation">,</span> <span class="token constant">ABCD</span><span class="token punctuation">]</span>，后缀为<span class="token punctuation">[</span><span class="token constant">BCDA</span><span class="token punctuation">,</span> <span class="token constant">CDA</span><span class="token punctuation">,</span> <span class="token constant">DA</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">]</span>，共有元素为<span class="token string">&quot;A&quot;</span>，长度为<span class="token number">1</span>；

　　－　<span class="token string">&quot;ABCDAB&quot;</span>的前缀为<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token constant">AB</span><span class="token punctuation">,</span> <span class="token constant">ABC</span><span class="token punctuation">,</span> <span class="token constant">ABCD</span><span class="token punctuation">,</span> <span class="token constant">ABCDA</span><span class="token punctuation">]</span>，后缀为<span class="token punctuation">[</span><span class="token constant">BCDAB</span><span class="token punctuation">,</span> <span class="token constant">CDAB</span><span class="token punctuation">,</span> <span class="token constant">DAB</span><span class="token punctuation">,</span> <span class="token constant">AB</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">]</span>，共有元素为<span class="token string">&quot;AB&quot;</span>，长度为<span class="token number">2</span>；

　　－　<span class="token string">&quot;ABCDABD&quot;</span>的前缀为<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token constant">AB</span><span class="token punctuation">,</span> <span class="token constant">ABC</span><span class="token punctuation">,</span> <span class="token constant">ABCD</span><span class="token punctuation">,</span> <span class="token constant">ABCDA</span><span class="token punctuation">,</span> <span class="token constant">ABCDAB</span><span class="token punctuation">]</span>，后缀为<span class="token punctuation">[</span><span class="token constant">BCDABD</span><span class="token punctuation">,</span> <span class="token constant">CDABD</span><span class="token punctuation">,</span> <span class="token constant">DABD</span><span class="token punctuation">,</span> <span class="token constant">ABD</span><span class="token punctuation">,</span> <span class="token constant">BD</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">]</span>，共有元素的长度为<span class="token number">0</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li></li></ol><figure><img src="https://www.pdai.tech/images/alg/alg-kpm-16.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>&quot;部分匹配&quot;的实质是，有时候，字符串头部和尾部会有重复。比如，&quot;ABCDAB&quot;之中有两个&quot;AB&quot;，那么它的&quot;部分匹配值&quot;就是2（&quot;AB&quot;的长度）。搜索词移动的时候，第一个&quot;AB&quot;向后移动4位（字符串长度-部分匹配值），就可以来到第二个&quot;AB&quot;的位置。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,54),m={href:"http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.cnblogs.com/gaochundong/p/string_matching.html#kmp_string_matching_algorithm",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html",target:"_blank",rel:"noopener noreferrer"};function b(v,h){const s=o("ExternalLinkIcon");return i(),l("div",null,[u,a("blockquote",null,[a("p",null,[n("如下是阮一峰根据"),a("a",r,[n("Jake Boxer在新窗口打开"),t(s)]),n("的文章总结的图例。")])]),k,a("ul",null,[a("li",null,[a("a",m,[n("http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/"),t(s)])]),a("li",null,[a("a",d,[n("https://www.cnblogs.com/gaochundong/p/string_matching.html#kmp_string_matching_algorithm"),t(s)])]),a("li",null,[a("a",g,[n("http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html"),t(s)])])])])}const w=e(c,[["render",b],["__file","alg-domain-char-match-kmp.html.vue"]]);export{w as default};
