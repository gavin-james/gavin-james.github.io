const o=JSON.parse('{"key":"v-6a09898a","path":"/java/thread/java-thread-x-juc-executor-ForkJoinPool.html","title":"JUC线程池: Fork/Join框架详解","lang":"zh-CN","frontmatter":{"date":"2022-03-12T00:00:00.000Z","category":["Java 多线程"],"tag":["Java 多线程"],"description":"JUC线程池: Fork/Join框架详解 ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。 带着BAT大厂的面试问题去理解Fork/Join框架 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解Fork/Join框架。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/thread/java-thread-x-juc-executor-ForkJoinPool.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"JUC线程池: Fork/Join框架详解"}],["meta",{"property":"og:description","content":"JUC线程池: Fork/Join框架详解 ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。 带着BAT大厂的面试问题去理解Fork/Join框架 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解Fork/Join框架。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 多线程"}],["meta",{"property":"article:published_time","content":"2022-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC线程池: Fork/Join框架详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"带着BAT大厂的面试问题去理解Fork/Join框架","slug":"带着bat大厂的面试问题去理解fork-join框架","link":"#带着bat大厂的面试问题去理解fork-join框架","children":[]},{"level":2,"title":"Fork/Join框架简介","slug":"fork-join框架简介","link":"#fork-join框架简介","children":[{"level":3,"title":"三个模块及关系","slug":"三个模块及关系","link":"#三个模块及关系","children":[]},{"level":3,"title":"核心思想: 分治算法(Divide-and-Conquer)","slug":"核心思想-分治算法-divide-and-conquer","link":"#核心思想-分治算法-divide-and-conquer","children":[]},{"level":3,"title":"核心思想: work-stealing(工作窃取)算法","slug":"核心思想-work-stealing-工作窃取-算法","link":"#核心思想-work-stealing-工作窃取-算法","children":[]},{"level":3,"title":"Fork/Join 框架的执行流程","slug":"fork-join-框架的执行流程","link":"#fork-join-框架的执行流程","children":[]}]},{"level":2,"title":"Fork/Join类关系","slug":"fork-join类关系","link":"#fork-join类关系","children":[{"level":3,"title":"ForkJoinPool继承关系","slug":"forkjoinpool继承关系","link":"#forkjoinpool继承关系","children":[]},{"level":3,"title":"ForkJoinTask继承关系","slug":"forkjointask继承关系","link":"#forkjointask继承关系","children":[]}]},{"level":2,"title":"Fork/Join框架源码解析","slug":"fork-join框架源码解析","link":"#fork-join框架源码解析","children":[{"level":3,"title":"ForkJoinPool","slug":"forkjoinpool","link":"#forkjoinpool","children":[]},{"level":3,"title":"ForkJoinTask","slug":"forkjointask","link":"#forkjointask","children":[]}]},{"level":2,"title":"Fork/Join框架源码解析","slug":"fork-join框架源码解析-1","link":"#fork-join框架源码解析-1","children":[{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"执行流程 - 外部任务(external/submissions task)提交","slug":"执行流程-外部任务-external-submissions-task-提交","link":"#执行流程-外部任务-external-submissions-task-提交","children":[]},{"level":3,"title":"执行流程: 子任务(Worker task)提交","slug":"执行流程-子任务-worker-task-提交","link":"#执行流程-子任务-worker-task-提交","children":[]},{"level":3,"title":"执行流程: 任务执行","slug":"执行流程-任务执行","link":"#执行流程-任务执行","children":[]},{"level":3,"title":"获取任务结果 - ForkJoinTask.join() / ForkJoinTask.invoke()","slug":"获取任务结果-forkjointask-join-forkjointask-invoke","link":"#获取任务结果-forkjointask-join-forkjointask-invoke","children":[]}]},{"level":2,"title":"Fork/Join的陷阱与注意事项","slug":"fork-join的陷阱与注意事项","link":"#fork-join的陷阱与注意事项","children":[{"level":3,"title":"避免不必要的fork()","slug":"避免不必要的fork","link":"#避免不必要的fork","children":[]},{"level":3,"title":"注意fork()、compute()、join()的顺序","slug":"注意fork-、compute-、join-的顺序","link":"#注意fork-、compute-、join-的顺序","children":[]},{"level":3,"title":"选择合适的子任务粒度","slug":"选择合适的子任务粒度","link":"#选择合适的子任务粒度","children":[]},{"level":3,"title":"避免重量级任务划分与结果合并","slug":"避免重量级任务划分与结果合并","link":"#避免重量级任务划分与结果合并","children":[]}]},{"level":2,"title":"再深入理解","slug":"再深入理解","link":"#再深入理解","children":[{"level":3,"title":"有哪些JDK源码中使用了Fork/Join思想?","slug":"有哪些jdk源码中使用了fork-join思想","link":"#有哪些jdk源码中使用了fork-join思想","children":[]},{"level":3,"title":"使用Executors工具类创建ForkJoinPool","slug":"使用executors工具类创建forkjoinpool","link":"#使用executors工具类创建forkjoinpool","children":[]},{"level":3,"title":"关于Fork/Join异常处理","slug":"关于fork-join异常处理","link":"#关于fork-join异常处理","children":[]}]},{"level":2,"title":"一些Fork/Join例子","slug":"一些fork-join例子","link":"#一些fork-join例子","children":[{"level":3,"title":"采用Fork/Join来异步计算1+2+3+…+10000的结果","slug":"采用fork-join来异步计算1-2-3-10000的结果","link":"#采用fork-join来异步计算1-2-3-10000的结果","children":[]},{"level":3,"title":"实现斐波那契数列","slug":"实现斐波那契数列","link":"#实现斐波那契数列","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":46.96,"words":14089},"filePathRelative":"java/thread/java-thread-x-juc-executor-ForkJoinPool.md","localizedDate":"2022年3月12日","excerpt":"<h1> JUC线程池: Fork/Join框架详解</h1>\\n<blockquote>\\n<p>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。</p>\\n</blockquote>\\n<h2> 带着BAT大厂的面试问题去理解Fork/Join框架</h2>\\n<blockquote>\\n<p>提示</p>\\n<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解Fork/Join框架。</p>\\n</blockquote>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{o as data};
