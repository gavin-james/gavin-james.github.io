import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-5798e4ed.js";const p={},e=t(`<h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><p>在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。</p><p>在软件设计中也可能出现：需要开发的具有某种业务功能的组件在现有的组件库中已经存在，但它们与当前系统的接口规范不兼容，如果重新开发这些组件成本又很高，这时用适配器模式能很好地解决这些问题。</p><p><strong>适配器模式</strong>（Adapter Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器（Wrapper）。</p><p>适配器模式属于结构型模式，主要分为三类：类适配器模式、对象适配器模式、接口适配器模式。</p><blockquote><p>主要优点</p></blockquote><ul><li>客户端通过适配器可以透明地调用目标接口</li><li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类</li><li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题</li><li>在很多业务场景中符合开闭原则</li></ul><blockquote><p>主要缺点</p></blockquote><ul><li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性</li><li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱</li></ul><h2 id="模式的结构" tabindex="-1"><a class="header-anchor" href="#模式的结构" aria-hidden="true">#</a> 模式的结构</h2><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者</li></ul><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><ul><li><p>适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容</p></li><li><p>从用户的角度看不到被适配者，是解耦的</p></li><li><p>用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法</p></li><li><p>用户收到反馈结果，感觉只是和目标接口交互，如图</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172447.png" alt="image-20220307113733499" tabindex="0" loading="lazy"><figcaption>image-20220307113733499</figcaption></figure></li></ul><h2 id="现实生活中的适配器例子" tabindex="-1"><a class="header-anchor" href="#现实生活中的适配器例子" aria-hidden="true">#</a> 现实生活中的适配器例子</h2><p>泰国插座用的是两孔的（欧标），可以买个多功能转换插头 (适配器) ，这样就可以使用了。</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172337.png" alt="image-20220307113604066" tabindex="0" loading="lazy"><figcaption>image-20220307113604066</figcaption></figure><h2 id="类适配器模式" tabindex="-1"><a class="header-anchor" href="#类适配器模式" aria-hidden="true">#</a> 类适配器模式</h2><h3 id="类适配器模式介绍" tabindex="-1"><a class="header-anchor" href="#类适配器模式介绍" aria-hidden="true">#</a> 类适配器模式介绍</h3><p>基本介绍：Adapter 类，通过继承 <strong>被适配类</strong>，实现 <strong>适配接口</strong>，完成被适配类到适配接口的适配。</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172519.png" alt="image-20220314150218744" tabindex="0" loading="lazy"><figcaption>image-20220314150218744</figcaption></figure><h3 id="类适配器模式应用实例" tabindex="-1"><a class="header-anchor" href="#类适配器模式应用实例" aria-hidden="true">#</a> 类适配器模式应用实例</h3><p>应用实例说明：以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src（即被适配者），我们的目标是 5V 直流电。</p><p>思路分析（类图）：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172450.png" alt="image-20220307113851301" tabindex="0" loading="lazy"><figcaption>image-20220307113851301</figcaption></figure><p>代码实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// dst 适配接口（充电器需要 5V）</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 被适配的类（插排的 220V）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token punctuation">{</span>
	<span class="token comment">// 输出 220V 的电压</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;电压=&quot;</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">&quot;伏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> src<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 适配器类（充电器）需要将插排的 220V 转为实际需要的 5V</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Voltage220V</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取到 220V 电压</span>
		<span class="token keyword">int</span> srcV <span class="token operator">=</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> dstV <span class="token operator">=</span> srcV <span class="token operator">/</span> <span class="token number">44</span> <span class="token punctuation">;</span> <span class="token comment">// 转成 5v</span>
		<span class="token keyword">return</span> dstV<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手机类和测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>
	<span class="token comment">// 充电</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span><span class="token class-name">IVoltage5V</span> iVoltage5V<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;电压为5V, 可以充电~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;电压大于5V, 不能充电~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; === 类适配器模式 ====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类适配器模式注意事项和细节" tabindex="-1"><a class="header-anchor" href="#类适配器模式注意事项和细节" aria-hidden="true">#</a> 类适配器模式注意事项和细节</h3><ul><li>Java 是单继承机制，所以类适配器需要继承 src（被适配类）类这一点算是一个缺点，因为这要求 dst（适配接口） 必须是接口，有一定局限性</li><li>src 类的方法在 Adapter 中都会暴露出来，也增加了使用的成本</li><li>由于其继承了 src 类，所以它可以根据需求重写 src 类的方法，使得 Adapter 的灵活性增强了</li></ul><h2 id="对象适配器模式" tabindex="-1"><a class="header-anchor" href="#对象适配器模式" aria-hidden="true">#</a> 对象适配器模式</h2><h3 id="对象适配器模式介绍" tabindex="-1"><a class="header-anchor" href="#对象适配器模式介绍" aria-hidden="true">#</a> 对象适配器模式介绍</h3><p>基本思路和类的适配器模式相同，只是将 Adapter 类作修改，不是继承 src 类，而是持有 src 类的实例，以解决兼容性的问题。即：持有 src 类，实现 dst 类接口，完成 src 到 dst 的适配。</p><p>根据「<strong>合成复用原则</strong>」，在系统中尽量使用 <strong>关联关系（聚合）来替代继承</strong> 关系。</p><p>对象适配器模式是适配器模式常用的一种。</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172454.png" alt="image-20220314150231277" tabindex="0" loading="lazy"><figcaption>image-20220314150231277</figcaption></figure><h3 id="对象适配器模式应用实例" tabindex="-1"><a class="header-anchor" href="#对象适配器模式应用实例" aria-hidden="true">#</a> 对象适配器模式应用实例</h3><blockquote><p>应用实例说明</p></blockquote><p>以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的 dst（即目标）是 5V 直流电，使用对象适配器模式完成。</p><blockquote><p>思路分析（类图）</p></blockquote><p>只需修改适配器即可，如下：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172456.png" alt="image-20220307153329627" tabindex="0" loading="lazy"><figcaption>image-20220307153329627</figcaption></figure><blockquote><p>代码实现</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 适配接口（充电器需要 5V）</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 被适配的类（插排的 220V）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出 220V 的电压，不变</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;电压=&quot;</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">&quot;伏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> src<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 适配器类（充电器）需要将插排的 220V 转为实际需要的 5V</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span>  <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Voltage220V</span> voltage220V<span class="token punctuation">;</span> <span class="token comment">// 关联关系-聚合</span>

    <span class="token comment">// 通过构造器，传入一个 Voltage220V 实例</span>
    <span class="token keyword">public</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token class-name">Voltage220V</span> voltage220v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>voltage220V <span class="token operator">=</span> voltage220v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> voltage220V<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> src <span class="token operator">=</span> voltage220V<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取 220V 电压</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用对象适配器，进行适配~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dst <span class="token operator">=</span> src <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;适配完成，输出的电压为=&quot;</span> <span class="token operator">+</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dst<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手机类和测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>
	<span class="token comment">// 充电</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span><span class="token class-name">IVoltage5V</span> iVoltage5V<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;电压为5V, 可以充电~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;电压大于5V, 不能充电~~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; === 对象适配器模式 ====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Voltage220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象适配器模式注意事项和细节" tabindex="-1"><a class="header-anchor" href="#对象适配器模式注意事项和细节" aria-hidden="true">#</a> 对象适配器模式注意事项和细节</h3><ul><li><p>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承，所以它解决了类适配器必须继承 src 的局限性问题，也不再要求 dst 必须是接口</p></li><li><p>使用成本更低，更灵活</p></li></ul><h2 id="接口适配器模式" tabindex="-1"><a class="header-anchor" href="#接口适配器模式" aria-hidden="true">#</a> 接口适配器模式</h2><h3 id="接口适配器模式介绍" tabindex="-1"><a class="header-anchor" href="#接口适配器模式介绍" aria-hidden="true">#</a> 接口适配器模式介绍</h3><ul><li>一些书籍称为：适配器模式（Default Adapter Pattern）或缺省适配器模式</li><li>核心思路：当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求</li><li>适用于一个接口不想使用其所有的方法的情况</li></ul><h3 id="接口适配器模式应用实例" tabindex="-1"><a class="header-anchor" href="#接口适配器模式应用实例" aria-hidden="true">#</a> 接口适配器模式应用实例</h3><ul><li><p>Android 中的属性动画 ValueAnimator 类可以通过 <code>addListener(AnimatorListener listener)</code> 方法添加监听器，那么常规写法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ValueAnimator</span> valueAnimator <span class="token operator">=</span> <span class="token class-name">ValueAnimator</span><span class="token punctuation">.</span><span class="token function">oflnt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
valueAnimator<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animator<span class="token punctuation">.</span>AnimatorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationCancel</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
valueAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有时候我们不想实现 <code>Animator.AnimatorListener</code> 接口的全部方法，我们只想监听 onAnimationStart，我们会如下写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ValueAnimator</span> valueAnimator <span class="token operator">=</span> <span class="token class-name">ValueAnimator</span><span class="token punctuation">.</span><span class="token function">oflnt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
valueAnimator<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// xxxx 具体实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
valueAnimator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>AnimatorListenerAdapter 类，就是一个接口适配器，代码如下：它空实现了 Animator.AnimatorListener 类(src)的所有方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnimatorListenerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Animator<span class="token punctuation">.</span>Animator</span> <span class="token keyword">extends</span> <span class="token class-name">Animator<span class="token punctuation">.</span>AnimatorPauseListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token comment">// 默认实现</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationCancel</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationPause</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationResume</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>AnimatorListener 是一个接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">AnimatorListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onAnimationCancel</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>程序里的匿名内部类就是 Listener 具体实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// xxxx 具体实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>案例说明</p></blockquote><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172506.png" alt="image-20220307154814117" tabindex="0" loading="lazy"><figcaption>image-20220307154814117</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface4</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在 AbsAdapter 我们将 Interface4 的方法进行默认实现</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Interface4</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认实现</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AbsAdapter</span> absAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbsAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 只需要去覆盖我们 需要使用 接口方法</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用了m1的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        absAdapter<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springmvc-的适配器模式剖析" tabindex="-1"><a class="header-anchor" href="#springmvc-的适配器模式剖析" aria-hidden="true">#</a> SpringMVC 的适配器模式剖析</h2><ul><li><p>SpringMVC 中的 HandlerAdapter, 就使用了适配器模式</p></li><li><p>SpringMVC 处理请求的流程回顾</p></li><li><p>使用 HandlerAdapter 的原因分析：</p><p>可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的，如果需要直接调用 Controller 方法，需要调用的时候就得不断是使用 if-else 来进行判断是哪一种子类然后执行。那么如果后面要扩展 Controller，就得修改原来的代码，这样违背了 OCP 原则。</p></li></ul><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220314172509.png" alt="image-20220307155052736" tabindex="0" loading="lazy"><figcaption>image-20220307155052736</figcaption></figure><h2 id="适配器模式的注意事项和细节" tabindex="-1"><a class="header-anchor" href="#适配器模式的注意事项和细节" aria-hidden="true">#</a> 适配器模式的注意事项和细节</h2><ul><li>三种命名方式，是根据 src 是以怎样的形式给到 Adapter（在 Adapter 里的形式）来命名的</li><li>类适配器：以类给到，在 Adapter 里，就是将 src 当做类，继承 <ul><li>对象适配器：以对象给到，在 Adapter 里，将 src 作为一个对象，持有</li><li>接口适配器：以接口给到，在 Adapter 里，将 src 作为一个接口，实现</li></ul></li><li>Adapter 模式最大的作用还是将原本不兼容的接口融合在一起工作</li><li>实际开发中，实现起来不拘泥于我们讲解的三种经典形式</li></ul><h2 id="适配器模式的应用场景" tabindex="-1"><a class="header-anchor" href="#适配器模式的应用场景" aria-hidden="true">#</a> 适配器模式的应用场景</h2><p>适配器模式（Adapter）通常适用于以下场景：</p><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同</li></ul>`,67),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","adapter.html.vue"]]);export{d as default};
