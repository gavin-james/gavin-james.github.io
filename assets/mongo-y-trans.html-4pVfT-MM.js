const e=JSON.parse('{"key":"v-6d3a7b71","path":"/db/nosql-mongo/mongo-y-trans.html","title":"Mongo进阶 - WT引擎：事务实现","lang":"zh-CN","frontmatter":{"date":"2022-07-14T00:00:00.000Z","category":["NoSQL MongoDB"],"tag":["NoSQL MongoDB"],"description":"Mongo进阶 - WT引擎：事务实现 在本文中，我们主要针对WT引擎的事务来展开分析，来看看它的事务是如何实现的。 理解本文需要有哪些基础 以下是基础，可以参考本网张其它文章。 什么是事务？ 什么是ACID？ 什么是MVCC？ 什么是事务快照？ 什么是redo log? WT的事务构造 知道了基本的事务概念和ACID后，来看看WT引擎是怎么来实现事务和ACID的。要了解实现先要知道它的事务的构造和使用相关的技术，WT在实现事务的时使用主要是使用了三个技术：snapshot(事务快照)、MVCC (多版本并发控制)和redo log(重做日志)，为了实现这三个技术，它还定义了一个基于这三个技术的事务对象和全局事务管理器。事务对象描述如下","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/db/nosql-mongo/mongo-y-trans.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Mongo进阶 - WT引擎：事务实现"}],["meta",{"property":"og:description","content":"Mongo进阶 - WT引擎：事务实现 在本文中，我们主要针对WT引擎的事务来展开分析，来看看它的事务是如何实现的。 理解本文需要有哪些基础 以下是基础，可以参考本网张其它文章。 什么是事务？ 什么是ACID？ 什么是MVCC？ 什么是事务快照？ 什么是redo log? WT的事务构造 知道了基本的事务概念和ACID后，来看看WT引擎是怎么来实现事务和ACID的。要了解实现先要知道它的事务的构造和使用相关的技术，WT在实现事务的时使用主要是使用了三个技术：snapshot(事务快照)、MVCC (多版本并发控制)和redo log(重做日志)，为了实现这三个技术，它还定义了一个基于这三个技术的事务对象和全局事务管理器。事务对象描述如下"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T08:34:19.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"NoSQL MongoDB"}],["meta",{"property":"article:published_time","content":"2022-07-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T08:34:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mongo进阶 - WT引擎：事务实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T08:34:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"理解本文需要有哪些基础","slug":"理解本文需要有哪些基础","link":"#理解本文需要有哪些基础","children":[]},{"level":2,"title":"WT的事务构造","slug":"wt的事务构造","link":"#wt的事务构造","children":[{"level":3,"title":"WT的多版本并发控制","slug":"wt的多版本并发控制","link":"#wt的多版本并发控制","children":[]},{"level":3,"title":"WT事务snapshot","slug":"wt事务snapshot","link":"#wt事务snapshot","children":[]},{"level":3,"title":"全局事务管理器","slug":"全局事务管理器","link":"#全局事务管理器","children":[]},{"level":3,"title":"事务ID","slug":"事务id","link":"#事务id","children":[]}]},{"level":2,"title":"WT的事务过程","slug":"wt的事务过程","link":"#wt的事务过程","children":[{"level":3,"title":"事务开启","slug":"事务开启","link":"#事务开启","children":[]},{"level":3,"title":"事务执行","slug":"事务执行","link":"#事务执行","children":[]},{"level":3,"title":"事务提交","slug":"事务提交","link":"#事务提交","children":[]},{"level":3,"title":"事务回滚","slug":"事务回滚","link":"#事务回滚","children":[]}]},{"level":2,"title":"WT的事务隔离","slug":"wt的事务隔离","link":"#wt的事务隔离","children":[{"level":3,"title":"Read-uncommited","slug":"read-uncommited","link":"#read-uncommited","children":[]},{"level":3,"title":"Read-Commited","slug":"read-commited","link":"#read-commited","children":[]},{"level":3,"title":"Snapshot- Isolation","slug":"snapshot-isolation","link":"#snapshot-isolation","children":[]}]},{"level":2,"title":"WT的事务日志","slug":"wt的事务日志","link":"#wt的事务日志","children":[{"level":3,"title":"日志格式","slug":"日志格式","link":"#日志格式","children":[]},{"level":3,"title":"WAL与日志写并发","slug":"wal与日志写并发","link":"#wal与日志写并发","children":[]}]},{"level":2,"title":"WT的事务恢复","slug":"wt的事务恢复","link":"#wt的事务恢复","children":[]},{"level":2,"title":"后记","slug":"后记","link":"#后记","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1690160698000,"updatedTime":1703579659000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":22.17,"words":6652},"filePathRelative":"db/nosql-mongo/mongo-y-trans.md","localizedDate":"2022年7月14日","excerpt":"<h1> Mongo进阶 - WT引擎：事务实现</h1>\\n<blockquote>\\n<p>在本文中，我们主要针对WT引擎的事务来展开分析，来看看它的事务是如何实现的。</p>\\n</blockquote>\\n<h2> 理解本文需要有哪些基础</h2>\\n<blockquote>\\n<p>以下是基础，可以参考本网张其它文章。</p>\\n</blockquote>\\n<ul>\\n<li>什么是事务？</li>\\n<li>什么是ACID？</li>\\n<li>什么是MVCC？</li>\\n<li>什么是事务快照？</li>\\n<li>什么是redo log?</li>\\n</ul>\\n<h2> WT的事务构造</h2>\\n<p>知道了基本的事务概念和ACID后，来看看WT引擎是怎么来实现事务和ACID的。要了解实现先要知道它的事务的构造和使用相关的技术，WT在实现事务的时使用主要是使用了三个技术：<code>snapshot(事务快照)</code>、<code>MVCC (多版本并发控制)</code>和<code>redo log(重做日志)</code>，为了实现这三个技术，它还定义了一个基于这三个技术的事务对象和<strong>全局事务管理器</strong>。事务对象描述如下</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
