import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as r,f as n}from"./app-pgelmVnX.js";const s={},e=n('<h1 id="事务理论-acid" tabindex="-1"><a class="header-anchor" href="#事务理论-acid" aria-hidden="true">#</a> 事务理论 - ACID</h1><blockquote><p>事务的四个基本特性: <strong>Atomicity（原子性）</strong>：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。<strong>Consistency（一致性）</strong>：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。<strong>Isolation（隔离性）</strong>： 多个并发事务之间相互隔离，不能互相干扰。<strong>Durability（持久性）</strong>：事务完成后，对数据库的更改是永久保存的，不能回滚。</p></blockquote><h2 id="什么是acid" tabindex="-1"><a class="header-anchor" href="#什么是acid" aria-hidden="true">#</a> 什么是ACID</h2><p>一个事务有四个基本特性，也就是我们常说的（ACID）：</p><ol><li><strong>Atomicity（原子性）</strong>：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。</li><li><strong>Consistency（一致性）</strong>：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。</li><li><strong>Isolation（隔离性）</strong>： 多个并发事务之间相互隔离，不能互相干扰。</li><li><strong>Durability（持久性）</strong>：事务完成后，对数据库的更改是永久保存的，不能回滚。</li></ol><h2 id="acid靠什么保证的呢" tabindex="-1"><a class="header-anchor" href="#acid靠什么保证的呢" aria-hidden="true">#</a> ACID靠什么保证的呢？</h2><p>以MySQL为例：</p><p><strong>A原子性</strong>由undo log日志保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql</p><p><strong>C一致性</strong>一般由代码层面来保证</p><p><strong>I隔离性</strong>由MVCC来保证</p><p><strong>D持久性</strong>由内存+redo log来保证，mysql修改数据同时在内存和redo log记录这次操作，事务提交的时候通过redo log刷盘，宕机的时候可以从redo log恢复</p>',11),i=[e];function a(c,d){return t(),r("div",null,i)}const h=o(s,[["render",a],["__file","dev-th-acid.html.vue"]]);export{h as default};
