import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as i,c,a as s,b as n,d as e,f as t}from"./app-PDcd_-E9.js";const l={},u=s("h1",{id:"twitter-java-style-guide",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#twitter-java-style-guide","aria-hidden":"true"},"#"),n(" Twitter Java Style Guide")],-1),r=s("blockquote",null,[s("p",null,"本文是Twitter的Java代码规范。")],-1),d=s("p",null,"The intention of this guide is to provide a set of conventions that encourage good code. It is the distillation of many combined man-years of software engineering and Java development experience. While some suggestions are more strict than others, you should always practice good judgement.",-1),k=s("p",null,[n("If following the guide causes unnecessary hoop-jumping or otherwise less-readable code, "),s("em",null,"readability trumps the guide"),n(". However, if the more 'readable' variant comes with perils or pitfalls, readability may be sacrificed.")],-1),m={href:"http://www.oracle.com/technetwork/java/codeconvtoc-136057.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://google.github.io/styleguide/javaguide.html",target:"_blank",rel:"noopener noreferrer"},h=s("h1",{id:"recommended-reading",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#recommended-reading","aria-hidden":"true"},"#"),n(" Recommended reading")],-1),b={href:"http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683",target:"_blank",rel:"noopener noreferrer"},g={href:"http://jcip.net/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.stevemcconnell.com/cc.htm",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),w=t('<h1 id="coding-style" tabindex="-1"><a class="header-anchor" href="#coding-style" aria-hidden="true">#</a> Coding style</h1><h2 id="formatting" tabindex="-1"><a class="header-anchor" href="#formatting" aria-hidden="true">#</a> Formatting</h2><h3 id="use-line-breaks-wisely" tabindex="-1"><a class="header-anchor" href="#use-line-breaks-wisely" aria-hidden="true">#</a> Use line breaks wisely</h3><p>There are generally two reasons to insert a line break:</p><ol><li>Your statement exceeds the column limit.</li><li>You want to logically separate a thought.<br> Writing code is like telling a story. Written language constructs like chapters, paragraphs, and punctuation (e.g. semicolons, commas, periods, hyphens) convey thought hierarchy and separation. We have similar constructs in programming languages; you should use them to your advantage to effectively tell the story to those reading the code.</li></ol><h3 id="indent-style" tabindex="-1"><a class="header-anchor" href="#indent-style" aria-hidden="true">#</a> Indent style</h3>',6),x={href:"http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Like this.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">negative</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">nonnegative</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Not like this.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token function">negative</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Also not like this.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">negative</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Continuation indent is 4 columns. Nested continuations may add 4 columns or 2 at each level.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Line breaks are arbitrary.</span>
<span class="token comment">//   - Scanning the code makes it difficult to piece the message together.</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to process request&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">+</span> <span class="token string">&quot; for user &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; query: &#39;&quot;</span> <span class="token operator">+</span> query<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - Each component of the message is separate and self-contained.</span>
<span class="token comment">//   - Adding or removing a component of the message requires minimal reformatting.</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to process&quot;</span>
    <span class="token operator">+</span> <span class="token string">&quot; request &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">+</span> <span class="token string">&quot; for user &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">+</span> <span class="token string">&quot; query: &#39;&quot;</span> <span class="token operator">+</span> query<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don&#39;t break up a statement unnecessarily.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> value <span class="token operator">=</span>
    otherValue<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> value <span class="token operator">=</span> otherValue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Method declaration continuations.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Sub-optimal since line breaks are arbitrary and only filling lines.</span>
<span class="token class-name">String</span> <span class="token function">downloadAnInternet</span><span class="token punctuation">(</span><span class="token class-name">Internet</span> internet<span class="token punctuation">,</span> <span class="token class-name">Tubes</span> tubes<span class="token punctuation">,</span>
    <span class="token class-name">Blogosphere</span> blogs<span class="token punctuation">,</span> <span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> bandwidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tubes<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>internet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Acceptable.</span>
<span class="token class-name">String</span> <span class="token function">downloadAnInternet</span><span class="token punctuation">(</span><span class="token class-name">Internet</span> internet<span class="token punctuation">,</span> <span class="token class-name">Tubes</span> tubes<span class="token punctuation">,</span> <span class="token class-name">Blogosphere</span> blogs<span class="token punctuation">,</span>
    <span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> bandwidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tubes<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>internet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Nicer, as the extra newline gives visual separation to the method body.</span>
<span class="token class-name">String</span> <span class="token function">downloadAnInternet</span><span class="token punctuation">(</span><span class="token class-name">Internet</span> internet<span class="token punctuation">,</span> <span class="token class-name">Tubes</span> tubes<span class="token punctuation">,</span> <span class="token class-name">Blogosphere</span> blogs<span class="token punctuation">,</span>
    <span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> bandwidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  tubes<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>internet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Also acceptable, but may be awkward depending on the column depth of the opening parenthesis.</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">downloadAnInternet</span><span class="token punctuation">(</span><span class="token class-name">Internet</span> internet<span class="token punctuation">,</span>
                                  <span class="token class-name">Tubes</span> tubes<span class="token punctuation">,</span>
                                  <span class="token class-name">Blogosphere</span> blogs<span class="token punctuation">,</span>
                                  <span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> bandwidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tubes<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>internet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Preferred for easy scanning and extra column space.</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">downloadAnInternet</span><span class="token punctuation">(</span>
    <span class="token class-name">Internet</span> internet<span class="token punctuation">,</span>
    <span class="token class-name">Tubes</span> tubes<span class="token punctuation">,</span>
    <span class="token class-name">Blogosphere</span> blogs<span class="token punctuation">,</span>
    <span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> bandwidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  tubes<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>internet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chained-method-calls" tabindex="-1"><a class="header-anchor" href="#chained-method-calls" aria-hidden="true">#</a> Chained method calls</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Line breaks are based on line length, not logic.</span>
<span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Module</span><span class="token punctuation">&gt;</span></span> modules <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Module</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LifecycleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppLauncherModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Better.</span>
<span class="token comment">//   - Calls are logically separated.</span>
<span class="token comment">//   - However, the trailing period logically splits a statement across two lines.</span>
<span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Module</span><span class="token punctuation">&gt;</span></span> modules <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Module</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LifecycleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppLauncherModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">addAll</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - Method calls are isolated to a line.</span>
<span class="token comment">//   - The proper location for a new method call is unambiguous.</span>
<span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Module</span><span class="token punctuation">&gt;</span></span> modules <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Module</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LifecycleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppLauncherModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="no-tabs" tabindex="-1"><a class="header-anchor" href="#no-tabs" aria-hidden="true">#</a> No tabs</h3><p>An oldie, but goodie. We&#39;ve found tab characters to cause more harm than good.</p><h3 id="_100-column-limit" tabindex="-1"><a class="header-anchor" href="#_100-column-limit" aria-hidden="true">#</a> 100 column limit</h3><p>You should follow the convention set by the body of code you are working with. We tend to use 100 columns for a balance between fewer continuation lines but still easily fitting two editor tabs side-by-side on a reasonably-high resolution display.</p><h3 id="camelcase-for-types-camelcase-for-variables-upper-snake-for-constants" tabindex="-1"><a class="header-anchor" href="#camelcase-for-types-camelcase-for-variables-upper-snake-for-constants" aria-hidden="true">#</a> CamelCase for types, camelCase for variables, UPPER_SNAKE for constants</h3><h3 id="no-trailing-whitespace" tabindex="-1"><a class="header-anchor" href="#no-trailing-whitespace" aria-hidden="true">#</a> No trailing whitespace</h3><p>Trailing whitespace characters, while logically benign, add nothing to the program. However, they do serve to frustrate developers when using keyboard shortcuts to navigate code.</p><h2 id="field-class-and-method-declarations" tabindex="-1"><a class="header-anchor" href="#field-class-and-method-declarations" aria-hidden="true">#</a> Field, class, and method declarations</h2><h4 id="modifier-order" tabindex="-1"><a class="header-anchor" href="#modifier-order" aria-hidden="true">#</a> Modifier order</h4>`,18),j={href:"http://docs.oracle.com/javase/specs/",target:"_blank",rel:"noopener noreferrer"},S={href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.1",target:"_blank",rel:"noopener noreferrer"},T={href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1",target:"_blank",rel:"noopener noreferrer"},I={href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.3",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token keyword">final</span> <span class="token keyword">volatile</span> <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">volatile</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="variable-naming" tabindex="-1"><a class="header-anchor" href="#variable-naming" aria-hidden="true">#</a> Variable naming</h2><h3 id="extremely-short-variable-names-should-be-reserved-for-instances-like-loop-indices" tabindex="-1"><a class="header-anchor" href="#extremely-short-variable-names-should-be-reserved-for-instances-like-loop-indices" aria-hidden="true">#</a> Extremely short variable names should be reserved for instances like loop indices.</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Field names give little insight into what fields are used for.</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> m<span class="token punctuation">;</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ageInYears<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> maidenName<span class="token punctuation">;</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="include-units-in-variable-names" tabindex="-1"><a class="header-anchor" href="#include-units-in-variable-names" aria-hidden="true">#</a> Include units in variable names</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token keyword">long</span> pollInterval<span class="token punctuation">;</span>
<span class="token keyword">int</span> fileSize<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">long</span> pollIntervalMs<span class="token punctuation">;</span>
<span class="token keyword">int</span> fileSizeGb<span class="token punctuation">.</span>

<span class="token comment">// Better.</span>
<span class="token comment">//   - Unit is built in to the type.</span>
<span class="token comment">//   - The field is easily adaptable between units, readability is high.</span>
<span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">&gt;</span></span> pollInterval<span class="token punctuation">;</span>
<span class="token class-name">Amount</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> fileSize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="don-t-embed-metadata-in-variable-names" tabindex="-1"><a class="header-anchor" href="#don-t-embed-metadata-in-variable-names" aria-hidden="true">#</a> Don&#39;t embed metadata in variable names</h3><p>A variable name should describe the variable&#39;s purpose. Adding extra information like scope and type is generally a sign of a bad variable name.</p><p>Avoid embedding the field type in the field name.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> idToUserMap<span class="token punctuation">;</span>
<span class="token class-name">String</span> valueString<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> usersById<span class="token punctuation">;</span>
<span class="token class-name">String</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also avoid embedding scope information in a variable. Hierarchy-based naming suggests that a class is too complex and should be broken apart.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token class-name">String</span> _value<span class="token punctuation">;</span>
<span class="token class-name">String</span> mValue<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token class-name">String</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="space-pad-operators-and-equals" tabindex="-1"><a class="header-anchor" href="#space-pad-operators-and-equals" aria-hidden="true">#</a> Space pad operators and equals.</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - This offers poor visual separation of operations.</span>
<span class="token keyword">int</span> foo<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">int</span> foo <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="be-explicit-about-operator-precedence" tabindex="-1"><a class="header-anchor" href="#be-explicit-about-operator-precedence" aria-hidden="true">#</a> Be explicit about operator precedence</h2>`,15),C={href:"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token keyword">return</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s even good to be <em>really</em> obvious.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>values <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&gt;</span> values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation" aria-hidden="true">#</a> Documentation</h2><p>The more visible a piece of code is (and by extension - the farther away consumers might be), the more documentation is needed.</p><h3 id="i-m-writing-a-report-about" tabindex="-1"><a class="header-anchor" href="#i-m-writing-a-report-about" aria-hidden="true">#</a> &quot;I&#39;m writing a report about...&quot;</h3><p>Your elementary school teacher was right - you should never start a statement this way. Likewise, you shouldn&#39;t write documentation this way.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token doc-comment comment">/**
  * This is a class that implements a cache.  It does caching for you.
  */</span>
<span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token doc-comment comment">/**
  * A volatile storage for objects based on a key, which may be invalidated and discarded.
  */</span>
<span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="documenting-a-class" tabindex="-1"><a class="header-anchor" href="#documenting-a-class" aria-hidden="true">#</a> Documenting a class</h3><p>Documentation for a class may range from a single sentence to paragraphs with code examples. Documentation should serve to disambiguate any conceptual blanks in the API, and make it easier to quickly and <em>correctly</em> use your API. A thorough class doc usually has a one sentence summary and, if necessary, a more detailed explanation.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * An RPC equivalent of a unix pipe tee.  Any RPC sent to the tee input is guaranteed to have
  * been sent to both tee outputs before the call returns.
  *
  * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> The type of the tee&#39;d service.
  */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcTee</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="documenting-a-method" tabindex="-1"><a class="header-anchor" href="#documenting-a-method" aria-hidden="true">#</a> Documenting a method</h3><p>A method doc should tell what the method <em>does</em>. Depending on the argument types, it may also be important to document input format.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - The doc tells nothing that the method declaration didn&#39;t.</span>
<span class="token comment">//   - This is the &#39;filler doc&#39;.  It would pass style checks, but doesn&#39;t help anybody.</span>
<span class="token doc-comment comment">/**
  * Splits a string.
  *
  * <span class="token keyword">@param</span> <span class="token parameter">s</span> A string.
  * <span class="token keyword">@return</span> A list of strings.
  */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Better.</span>
<span class="token comment">//   - We know what the method splits on.</span>
<span class="token comment">//   - Still some undefined behavior.</span>
<span class="token doc-comment comment">/**
  * Splits a string on whitespace.
  *
  * <span class="token keyword">@param</span> <span class="token parameter">s</span> The string to split.  An <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> string is treated as an empty string.
  * <span class="token keyword">@return</span> A list of the whitespace-delimited parts of the input.
  */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Great.</span>
<span class="token comment">//   - Covers yet another edge case.</span>
<span class="token doc-comment comment">/**
  * Splits a string on whitespace.  Repeated whitespace characters are collapsed.
  *
  * <span class="token keyword">@param</span> <span class="token parameter">s</span> The string to split.  An <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> string is treated as an empty string.
  * <span class="token keyword">@return</span> A list of the whitespace-delimited parts of the input.
  */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="be-professional" tabindex="-1"><a class="header-anchor" href="#be-professional" aria-hidden="true">#</a> Be professional</h3><p>We&#39;ve all encountered frustration when dealing with other libraries, but ranting about it doesn&#39;t do you any favors. Suppress the expletives and get to the point.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">// I hate xml/soap so much, why can&#39;t it do this for me!?</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  userId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">// TODO(Jim): Tuck field validation away in a library.</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  userId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>xml<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="don-t-document-overriding-methods-usually" tabindex="-1"><a class="header-anchor" href="#don-t-document-overriding-methods-usually" aria-hidden="true">#</a> Don&#39;t document overriding methods (usually)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
    * Gets the installed version of the database.
    *
    * <span class="token keyword">@return</span> The database version identifier.
    */</span>
  <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Bad.</span>
<span class="token comment">//   - Overriding method doc doesn&#39;t add anything.</span>
<span class="token keyword">class</span> <span class="token class-name">PostgresDatabase</span> <span class="token keyword">implements</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
    * Gets the installed version of the database.
    *
    * <span class="token keyword">@return</span> The database version identifier.
    */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">class</span> <span class="token class-name">PostgresDatabase</span> <span class="token keyword">implements</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Great.</span>
<span class="token comment">//   - The doc explains how it differs from or adds to the interface doc.</span>
<span class="token keyword">class</span> <span class="token class-name">TwitterDatabase</span> <span class="token keyword">implements</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
    * Semantic version number.
    *
    * <span class="token keyword">@return</span> The database version in semver format.
    */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-javadoc-features" tabindex="-1"><a class="header-anchor" href="#use-javadoc-features" aria-hidden="true">#</a> Use javadoc features</h3><h4 id="no-author-tags" tabindex="-1"><a class="header-anchor" href="#no-author-tags" aria-hidden="true">#</a> No author tags</h4><p>Code can change hands numerous times in its lifetime, and quite often the original author of a source file is irrelevant after several iterations. We find it&#39;s better to trust commit history and <code>OWNERS</code> files to determine ownership of a body of code.</p><h2 id="imports" tabindex="-1"><a class="header-anchor" href="#imports" aria-hidden="true">#</a> Imports</h2><h3 id="import-ordering" tabindex="-1"><a class="header-anchor" href="#import-ordering" aria-hidden="true">#</a> Import ordering</h3><p>Imports are grouped by top-level package, with blank lines separating groups. Static imports are grouped in the same way, in a section below traditional imports.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span></span><span class="token operator">*</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="no-wildcard-imports" tabindex="-1"><a class="header-anchor" href="#no-wildcard-imports" aria-hidden="true">#</a> No wildcard imports</h3>`,27),E={href:"http://en.wikipedia.org/wiki/Coupling_(computer_programming)#Module_coupling",target:"_blank",rel:"noopener noreferrer"},A=s("br",null,null,-1),D=s("em",null,[n("See also "),s("a",{href:"#stay-out-of-texas"},"texas imports")],-1),L=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Where did Foo come from?</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>foo<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>foo<span class="token punctuation">.</span></span><span class="token class-name">BazFoo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span></span><span class="token class-name">Foo</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-annotations-wisely" tabindex="-1"><a class="header-anchor" href="#use-annotations-wisely" aria-hidden="true">#</a> Use annotations wisely</h2><h3 id="nullable" tabindex="-1"><a class="header-anchor" href="#nullable" aria-hidden="true">#</a> @Nullable</h3>`,3),F=s("code",null,"null",-1),O=s("code",null,"null",-1),R={href:"http://code.google.com/p/jsr-305/source/browse/trunk/ri/src/main/java/javax/annotation/Nullable.java?r=24",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">private</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Nullable</span>
  <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">setConnection</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">=</span> connection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="visiblefortesting" tabindex="-1"><a class="header-anchor" href="#visiblefortesting" aria-hidden="true">#</a> @VisibleForTesting</h3>`,2),W={href:"http://docs.guava-libraries.googlecode.com/git-history/v11.0.2/javadoc/com/google/common/annotations/VisibleForTesting.html",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>Constants are a great example of things that are frequently exposed in this way.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Any adjustments to field names need to be duplicated in the test.</span>
<span class="token keyword">class</span> <span class="token class-name">ConfigReader</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER_FIELD</span> <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>

  <span class="token class-name">Config</span> <span class="token function">parseConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> configData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigReaderTest</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParseConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedConfig<span class="token punctuation">,</span> reader<span class="token punctuation">.</span><span class="token function">parseConfig</span><span class="token punctuation">(</span><span class="token string">&quot;{user: bob}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - The test borrows directly from the same constant.</span>
<span class="token keyword">class</span> <span class="token class-name">ConfigReader</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@VisibleForTesting</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER_FIELD</span> <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>

  <span class="token class-name">Config</span> <span class="token function">parseConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> configData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigReaderTest</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParseConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedConfig<span class="token punctuation">,</span>
        reader<span class="token punctuation">.</span><span class="token function">parseConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;{%s: bob}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ConfigReader</span><span class="token punctuation">.</span><span class="token constant">USER_FIELD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-interfaces" tabindex="-1"><a class="header-anchor" href="#use-interfaces" aria-hidden="true">#</a> Use interfaces</h2><p>Interfaces decouple functionality from implementation, allowing you to use multiple implementations without changing consumers. Interfaces are a great way to isolate packages - provide a set of interfaces, and keep your implementations package private.</p><p>Many small interfaces can seem heavyweight, since you end up with a large number of source files. Consider the pattern below as an alternative.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">FileFetcher</span> <span class="token punctuation">{</span>
  <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// All the benefits of an interface, with little source management overhead.</span>
  <span class="token comment">// This is particularly useful when you only expect one implementation of an interface.</span>
  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HdfsFileFetcher</span> <span class="token keyword">implements</span> <span class="token class-name">FileFetcher</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="leverage-or-extend-existing-interfaces" tabindex="-1"><a class="header-anchor" href="#leverage-or-extend-existing-interfaces" aria-hidden="true">#</a> Leverage or extend existing interfaces</h3>`,7),G={href:"http://en.wikipedia.org/wiki/Cohesion_(computer_science)",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// An unfortunate lack of consideration.  Anyone who wants to interact with Blobs will need to</span>
<span class="token comment">// write specific glue code.</span>
<span class="token keyword">class</span> <span class="token class-name">Blobs</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Much better.  Now the caller can easily adapt this to standard collections, or do more</span>
<span class="token comment">// complex things like filtering.</span>
<span class="token keyword">class</span> <span class="token class-name">Blobs</span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token class-name">Iterator</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Warning - don&#39;t bend the definition of an existing interface to make this work. If the interface doesn&#39;t conceptually apply cleanly, it&#39;s best to avoid this.</p><h1 id="writing-testable-code" tabindex="-1"><a class="header-anchor" href="#writing-testable-code" aria-hidden="true">#</a> Writing testable code</h1><p>Writing unit tests doesn&#39;t have to be hard. You can make it easy for yourself if you keep testability in mind while designing your classes and interfaces.</p><h2 id="fakes-and-mocks" tabindex="-1"><a class="header-anchor" href="#fakes-and-mocks" aria-hidden="true">#</a> Fakes and mocks</h2><p>When testing a class, you often need to provide some kind of canned functionality as a replacement for real-world behavior. For example, rather than fetching a row from a real database, you have a test row that you want to return. This is most commonly performed with a fake object or a mock object. While the difference sounds subtle, mocks have major benefits over fakes.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">RpcClient</span> <span class="token punctuation">{</span>
  <span class="token class-name">RpcClient</span><span class="token punctuation">(</span><span class="token class-name">HttpTransport</span> transport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Bad.</span>
<span class="token comment">//   - Our test has little control over method call order and frequency.</span>
<span class="token comment">//   - We need to be careful that changes to HttpTransport don&#39;t disable FakeHttpTransport.</span>
<span class="token comment">//   - May require a significant amount of code.</span>
<span class="token keyword">class</span> <span class="token class-name">FakeHttpTransport</span> <span class="token keyword">extends</span> <span class="token class-name">HttpTransport</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">void</span> <span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">RpcClient</span> client<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">FakeHttpTransport</span> transport<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Before</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeHttpTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClient</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Transport</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RpcClient</span> <span class="token punctuation">{</span>
  <span class="token class-name">RpcClient</span><span class="token punctuation">(</span><span class="token class-name">Transport</span> transport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - We can mock the interface and have very fine control over how it is expected to be used.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">RpcClient</span> client<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Transport</span> transport<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Before</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transport <span class="token operator">=</span> <span class="token class-name">EasyMock</span><span class="token punctuation">.</span><span class="token function">createMock</span><span class="token punctuation">(</span><span class="token class-name">Transport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClient</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="let-your-callers-construct-support-objects" tabindex="-1"><a class="header-anchor" href="#let-your-callers-construct-support-objects" aria-hidden="true">#</a> Let your callers construct support objects</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - A unit test needs to manage a temporary file on disk to test this class.</span>
<span class="token keyword">class</span> <span class="token class-name">ConfigReader</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> configStream<span class="token punctuation">;</span>
  <span class="token class-name">ConfigReader</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>configStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - Testing this class is as easy as using ByteArrayInputStream with a String.</span>
<span class="token keyword">class</span> <span class="token class-name">ConfigReader</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> configStream<span class="token punctuation">;</span>
  <span class="token class-name">ConfigReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> configStream<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>configStream <span class="token operator">=</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span>configStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-multithreaded-code" tabindex="-1"><a class="header-anchor" href="#testing-multithreaded-code" aria-hidden="true">#</a> Testing multithreaded code</h2><p>Testing code that uses multiple threads is notoriously hard. When approached carefully, however, it can be accomplished without deadlocks or unnecessary time-wait statements.</p>`,11),z={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html",target:"_blank",rel:"noopener noreferrer"},P={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html",target:"_blank",rel:"noopener noreferrer"},V={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor()",target:"_blank",rel:"noopener noreferrer"},H={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html",target:"_blank",rel:"noopener noreferrer"},J={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingDeque.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html",target:"_blank",rel:"noopener noreferrer"},K=s("h2",{id:"testing-antipatterns",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#testing-antipatterns","aria-hidden":"true"},"#"),n(" Testing antipatterns")],-1),Q=s("h3",{id:"time-dependence",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#time-dependence","aria-hidden":"true"},"#"),n(" Time-dependence")],-1),X=s("code",null,"new Date()",-1),Z=s("code",null,"System.currentTimeMillis()",-1),$=s("code",null,"System.nanoTime()",-1),nn={href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/util/Clock.java",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/util/Clock.java#L32",target:"_blank",rel:"noopener noreferrer"},an={href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/util/testing/FakeClock.java",target:"_blank",rel:"noopener noreferrer"},en=t('<h3 id="the-hidden-stress-test" tabindex="-1"><a class="header-anchor" href="#the-hidden-stress-test" aria-hidden="true">#</a> The hidden stress test</h3><p>Avoid writing unit tests that attempt to verify a certain amount of performance. This type of testing should be handled separately, and run in a more controlled environment than unit tests typically are.</p><h3 id="thread-sleep" tabindex="-1"><a class="header-anchor" href="#thread-sleep" aria-hidden="true">#</a> Thread.sleep()</h3><p>Sleeping is rarely warranted, especially in test code. Sleeping is expressing an expectation that something else is happening while the executing thread is suspended. This quickly leads to brittleness; for example if the background thread was not scheduled while you were sleeping.</p><p>Sleeping in tests is also bad because it sets a firm lower bound on how fast tests can execute. No matter how fast the machine is, a test that sleeps for one second can never execute in less than one second. Over time, this leads to very long test execution cycles.</p><h2 id="avoid-randomness-in-tests" tabindex="-1"><a class="header-anchor" href="#avoid-randomness-in-tests" aria-hidden="true">#</a> Avoid randomness in tests</h2><p>Using random values may seem like a good idea in a test, as it allows you to cover more test cases with less code. The problem is that you lose control over which test cases you&#39;re covering. When you do encounter a test failure, it may be difficult to reproduce. Pseudorandom input with a fixed seed is slightly better, but in practice rarely improves test coverage. In general it&#39;s better to use fixed input data that exercises known edge cases.</p><h1 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices" aria-hidden="true">#</a> Best practices</h1><h2 id="defensive-programming" tabindex="-1"><a class="header-anchor" href="#defensive-programming" aria-hidden="true">#</a> Defensive programming</h2><h3 id="avoid-assert" tabindex="-1"><a class="header-anchor" href="#avoid-assert" aria-hidden="true">#</a> Avoid assert</h3>',10),tn={href:"http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html#enable-disable",target:"_blank",rel:"noopener noreferrer"},on=t(`<p><em>See also <a href="#preconditions">preconditions</a></em></p><h3 id="preconditions" tabindex="-1"><a class="header-anchor" href="#preconditions" aria-hidden="true">#</a> Preconditions</h3><p>Preconditions checks are a good practice, since they serve as a well-defined barrier against bad input from callers. As a convention, object parameters to public constructors and methods should always be checked against null, unless null is explicitly allowed.</p><p><em>See also <a href="#be-wary-of-null">be wary of null</a>, <a href="#nullable">@Nullable</a></em></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - If the file or callback are null, the problem isn&#39;t noticed until much later.</span>
<span class="token keyword">class</span> <span class="token class-name">AsyncFileReader</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">readLater</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">Closure</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    scheduledExecutor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">readSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">class</span> <span class="token class-name">AsyncFileReader</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">readLater</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">Closure</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkArgument</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;File must exist and be readable.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    scheduledExecutor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">readSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="minimize-visibility" tabindex="-1"><a class="header-anchor" href="#minimize-visibility" aria-hidden="true">#</a> Minimize visibility</h3><p>In a class API, you should support access to any methods and fields that you make accessible. Therefore, only expose what you intend the caller to use. This can be imperative when writing thread-safe code.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token comment">// Bad.</span>
  <span class="token comment">//   - Callers can directly access and mutate, possibly breaking internal assumptions.</span>
  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> rawFields<span class="token punctuation">;</span>

  <span class="token comment">// Bad.</span>
  <span class="token comment">//   - This is probably intended to be an internal utility function.</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readConfigLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - rawFields and the utility function are hidden</span>
<span class="token comment">//   - The class is package-private, indicating that it should only be accessed indirectly.</span>
<span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> rawFields<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readConfigLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="favor-immutability" tabindex="-1"><a class="header-anchor" href="#favor-immutability" aria-hidden="true">#</a> Favor immutability</h3><p>Mutable objects carry a burden - you need to make sure that those who are <em>able</em> to mutate it are not violating expectations of other users of the object, and that it&#39;s even safe for them to modify.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Anyone with a reference to User can modify the user&#39;s birthday.</span>
<span class="token comment">//   - Calling getAttributes() gives mutable access to the underlying map.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> attributes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// If you realize the users don&#39;t need the full map, you can avoid the map copy</span>
  <span class="token comment">// by providing access to individual members.</span>
  <span class="token annotation punctuation">@Nullable</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> attributeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>attributeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="be-wary-of-null" tabindex="-1"><a class="header-anchor" href="#be-wary-of-null" aria-hidden="true">#</a> Be wary of null</h3>`,12),pn=s("code",null,"@Nullable",-1),cn={href:"http://docs.guava-libraries.googlecode.com/git-history/v11.0.2/javadoc/com/google/common/base/Optional.html",target:"_blank",rel:"noopener noreferrer"},ln=s("code",null,"@Nullable",-1),un=s("code",null,"Optional",-1),rn=t(`<h3 id="clean-up-with-finally" tabindex="-1"><a class="header-anchor" href="#clean-up-with-finally" aria-hidden="true">#</a> Clean up with finally</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token class-name">Closeables</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even if there are no checked exceptions, there are still cases where you should use try/finally to guarantee resource symmetry.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Mutex is never unlocked.</span>
mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Bad.</span>
<span class="token comment">//   - Connection is not closed if sendMessage throws.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>receivedBadMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  conn<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Bad request.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>receivedBadMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    conn<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Bad request.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clean-code" tabindex="-1"><a class="header-anchor" href="#clean-code" aria-hidden="true">#</a> Clean code</h2><h3 id="disambiguate" tabindex="-1"><a class="header-anchor" href="#disambiguate" aria-hidden="true">#</a> Disambiguate</h3><p>Favor readability - if there&#39;s an ambiguous and unambiguous route, always favor unambiguous.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Depending on the font, it may be difficult to discern 1001 from 100l.</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">100l</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">100L</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remove-dead-code" tabindex="-1"><a class="header-anchor" href="#remove-dead-code" aria-hidden="true">#</a> Remove dead code</h3><p>Delete unused code (imports, fields, parameters, methods, classes). They will only rot.</p><h3 id="use-general-types" tabindex="-1"><a class="header-anchor" href="#use-general-types" aria-hidden="true">#</a> Use general types</h3><p>When declaring fields and methods, it&#39;s better to use general types whenever possible. This avoids implementation detail leak via your API, and allows you to change the types used internally without affecting users or peripheral code.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Implementations of Database must match the ArrayList return type.</span>
<span class="token comment">//   - Changing return type to Set&lt;User&gt; or List&lt;User&gt; could break implementations and users.</span>
<span class="token keyword">interface</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - Iterable defines the minimal functionality required of the return.</span>
<span class="token keyword">interface</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="always-use-type-parameters" tabindex="-1"><a class="header-anchor" href="#always-use-type-parameters" aria-hidden="true">#</a> Always use type parameters</h3>`,14),dn={href:"http://docs.oracle.com/javase/tutorial/java/generics/index.html",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://docs.oracle.com/javase/tutorial/java/generics/erasure.html",target:"_blank",rel:"noopener noreferrer"},mn=s("p",null,"We conventionally include type parameters on every declaration where the type is parameterized. Even if the type is unknown, it's preferable to include a wildcard or wide type.",-1),vn={id:"stay-out-of-texas在新窗口打开",tabindex:"-1"},hn=s("a",{class:"header-anchor",href:"#stay-out-of-texas在新窗口打开","aria-hidden":"true"},"#",-1),bn={href:"http://en.wikipedia.org/wiki/Texas-sized",target:"_blank",rel:"noopener noreferrer"},gn=t('<p>Try to keep your classes bite-sized and with clearly-defined responsibilities. This can be <em>really</em> hard as a program evolves.</p><ul><li>texas imports</li><li>texas constructors: Can the class be cleanly broken apart?<br> If not, consider builder pattern.</li><li>texas methods</li></ul><p>We could do some science and come up with a statistics-driven threshold for each of these, but it probably wouldn&#39;t be very useful. This is usually just a gut instinct, and these are traits of classes that are too large or complex and should be broken up.</p><h3 id="avoid-typecasting" tabindex="-1"><a class="header-anchor" href="#avoid-typecasting" aria-hidden="true">#</a> Avoid typecasting</h3>',4),fn={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)",target:"_blank",rel:"noopener noreferrer"},yn=t(`<h3 id="use-final-fields" tabindex="-1"><a class="header-anchor" href="#use-final-fields" aria-hidden="true">#</a> Use final fields</h3><p><em>See also <a href="#favor-immutability">favor immutability</a></em></p><p>Final fields are useful because they declare that a field may not be reassigned. When it comes to checking for thread-safety, a final field is one less thing that needs to be checked.</p><h3 id="avoid-mutable-static-state" tabindex="-1"><a class="header-anchor" href="#avoid-mutable-static-state" aria-hidden="true">#</a> Avoid mutable static state</h3><p>Mutable static state is rarely necessary, and causes loads of problems when present. A very simple case that mutable static state complicates is unit testing. Since unit tests runs are typically in a single VM, static state will persist through all test cases. In general, mutable static state is a sign of poor class design.</p><h3 id="exceptions" tabindex="-1"><a class="header-anchor" href="#exceptions" aria-hidden="true">#</a> Exceptions</h3><h4 id="catch-narrow-exceptions" tabindex="-1"><a class="header-anchor" href="#catch-narrow-exceptions" aria-hidden="true">#</a> Catch narrow exceptions</h4><p>Sometimes when using try/catch blocks, it may be tempting to just <code>catch Exception</code>, <code>Error</code>, or <code>Throwable</code> so you don&#39;t have to worry about what type was thrown. This is usually a bad idea, as you can end up catching more than you really wanted to deal with. For example, <code>catch Exception</code> would capture <code>NullPointerException</code>, and <code>catch Throwable</code> would capture <code>OutOfMemoryError</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - If a RuntimeException happens, the program continues rather than aborting.</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  storage<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to insert user.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  storage<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StorageException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to insert user.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="don-t-swallow-exceptions" tabindex="-1"><a class="header-anchor" href="#don-t-swallow-exceptions" aria-hidden="true">#</a> Don&#39;t swallow exceptions</h4><p>An empty <code>catch</code> block is usually a bad idea, as you have no signal of a problem. Coupled with <a href="#catch-narrow-exceptions">narrow exception</a> violations, it&#39;s a recipe for disaster.</p><h4 id="when-interrupted-reset-thread-interrupted-state" tabindex="-1"><a class="header-anchor" href="#when-interrupted-reset-thread-interrupted-state" aria-hidden="true">#</a> When interrupted, reset thread interrupted state</h4>`,12),wn={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html",target:"_blank",rel:"noopener noreferrer"},xn=s("code",null,"InterruptedException",-1),_n={href:"http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html",target:"_blank",rel:"noopener noreferrer"},jn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Surrounding code (or higher-level code) has no idea that the thread was interrupted.</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Interrupted while doing x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - Interrupted state is preserved.</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Interrupted while doing x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="throw-appropriate-exception-types" tabindex="-1"><a class="header-anchor" href="#throw-appropriate-exception-types" aria-hidden="true">#</a> Throw appropriate exception types</h4><p>Let your API users obey <a href="#catch-narrow-exceptions">catch narrow exceptions</a>, don&#39;t throw Exception. Even if you are calling another naughty API that throws Exception, at least hide that so it doesn&#39;t bubble up even further. You should also make an effort to hide implementation details from your callers when it comes to exceptions.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Caller is forced to catch Exception, trapping many unnecessary types of issues.</span>
<span class="token keyword">interface</span> <span class="token class-name">DataStore</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">fetchValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Better.</span>
<span class="token comment">//   - The interface leaks details about one specific implementation.</span>
<span class="token keyword">interface</span> <span class="token class-name">DataStore</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">fetchValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token comment">//   - A custom exception type insulates the user from the implementation.</span>
<span class="token comment">//   - Different implementations aren&#39;t forced to abuse irrelevant exception types.</span>
<span class="token keyword">interface</span> <span class="token class-name">DataStore</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">fetchValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">StorageException</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StorageException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-newer-better-libraries" tabindex="-1"><a class="header-anchor" href="#use-newer-better-libraries" aria-hidden="true">#</a> Use newer/better libraries</h2><h3 id="stringbuilder-over-stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuilder-over-stringbuffer" aria-hidden="true">#</a> StringBuilder over StringBuffer</h3>`,6),Sn={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html",target:"_blank",rel:"noopener noreferrer"},Tn=s("h3",{id:"scheduledexecutorservice-over-timer",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#scheduledexecutorservice-over-timer","aria-hidden":"true"},"#"),n(" ScheduledExecutorService over Timer")],-1),In=s("a",{href:"#recommended-reading"},"Java Concurrency in Practice",-1),qn={href:"http://stackoverflow.com/questions/409932/java-timer-vs-executorservice",target:"_blank",rel:"noopener noreferrer"},Cn=t('<ul><li><code>Timer</code> can be sensitive to changes in the system clock, <code>ScheduledThreadPoolExecutor</code> is not</li><li><code>Timer</code> has only one execution thread, so long-running task can delay other tasks.</li><li><code>ScheduledThreadPoolExecutor</code> can be configured with multiple threads and a <code>ThreadFactory</code><br><em>See <a href="#manage-threads-properly">manage threads properly</a></em></li><li>Exceptions thrown in <code>TimerTask</code> kill the thread, rendering the <code>Timer</code> ineffective.</li><li>ThreadPoolExecutor provides <code>afterExceute</code> so you can explicitly handle execution results.</li></ul><h3 id="list-over-vector" tabindex="-1"><a class="header-anchor" href="#list-over-vector" aria-hidden="true">#</a> List over Vector</h3>',2),Bn=s("code",null,"Vector",-1),En={href:"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#synchronizedList(java.util.List)",target:"_blank",rel:"noopener noreferrer"},An=s("code",null,"Vector",-1),Dn=s("h2",{id:"and-hashcode",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#and-hashcode","aria-hidden":"true"},"#"),n(" and hashCode()")],-1),Ln={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()",target:"_blank",rel:"noopener noreferrer"},Fn={href:"http://docs.guava-libraries.googlecode.com/git-history/v11.0.2/javadoc/com/google/common/base/Objects.html#equal",target:"_blank",rel:"noopener noreferrer"},On={href:"http://docs.guava-libraries.googlecode.com/git-history/v11.0.2/javadoc/com/google/common/base/Objects.html#hashCode(java.lang.Object...)",target:"_blank",rel:"noopener noreferrer"},Rn=s("h2",{id:"premature-optimization-is-the-root-of-all-evil",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#premature-optimization-is-the-root-of-all-evil","aria-hidden":"true"},"#"),n(" Premature optimization is the root of all evil.")],-1),Mn={href:"http://c2.com/cgi/wiki?PrematureOptimization",target:"_blank",rel:"noopener noreferrer"},Wn=t(`<p>Unless you have strong evidence that an optimization is necessary, it&#39;s usually best to implement the un-optimized version first (possibly leaving notes about where optimizations could be made).</p><p>So before you spend a week writing your memory-mapped compressed huffman-encoded hashmap, use the stock stuff first and <em>measure</em>.</p><h2 id="todos" tabindex="-1"><a class="header-anchor" href="#todos" aria-hidden="true">#</a> TODOs</h2><h3 id="leave-todos-early-and-often" tabindex="-1"><a class="header-anchor" href="#leave-todos-early-and-often" aria-hidden="true">#</a> Leave TODOs early and often</h3><p>A TODO isn&#39;t a bad thing - it&#39;s signaling a future developer (possibly yourself) that a consideration was made, but omitted for various reasons. It can also serve as a useful signal when debugging.</p><h3 id="leave-no-todo-unassigned" tabindex="-1"><a class="header-anchor" href="#leave-no-todo-unassigned" aria-hidden="true">#</a> Leave no TODO unassigned</h3><p>TODOs should have owners, otherwise they are unlikely to ever be resolved.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - TODO is unassigned.</span>
<span class="token comment">// TODO: Implement request backoff.</span>

<span class="token comment">// Good.</span>
<span class="token comment">// TODO(George Washington): Implement request backoff.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adopt-todos" tabindex="-1"><a class="header-anchor" href="#adopt-todos" aria-hidden="true">#</a> Adopt TODOs</h3><p>You should adopt an orphan if the owner has left the company/project, or if you make modifications to the code directly related to the TODO topic.</p>`,10),Nn={id:"obey-the-law-of-demeter-lod在新窗口打开",tabindex:"-1"},Gn=s("a",{class:"header-anchor",href:"#obey-the-law-of-demeter-lod在新窗口打开","aria-hidden":"true"},"#",-1),Un={href:"http://en.wikipedia.org/wiki/Law_of_Demeter",target:"_blank",rel:"noopener noreferrer"},zn={href:"http://en.wikipedia.org/wiki/Law_of_Demeter#In_object-oriented_programming",target:"_blank",rel:"noopener noreferrer"},Pn=t(`<h3 id="in-classes" tabindex="-1"><a class="header-anchor" href="#in-classes" aria-hidden="true">#</a> In classes</h3><p>Take what you need, nothing more. This often relates to <a href="#stay-out-of-texas">texas constructors</a> but it can also hide in constructors or methods that take few parameters. The key idea is to defer assembly to the layers of the code that know enough to assemble and instead just take the minimal interface you need to get your work done.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - Weigher uses hosts and port only to immediately construct another object.</span>
<span class="token keyword">class</span> <span class="token class-name">Weigher</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> defaultInitialRate<span class="token punctuation">;</span>

  <span class="token class-name">Weigher</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hosts<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">double</span> defaultInitialRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultInitialRate <span class="token operator">=</span> <span class="token function">validateRate</span><span class="token punctuation">(</span>defaultInitialRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>weightingService <span class="token operator">=</span> <span class="token function">createWeightingServiceClient</span><span class="token punctuation">(</span>hosts<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good.</span>
<span class="token keyword">class</span> <span class="token class-name">Weigher</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> defaultInitialRate<span class="token punctuation">;</span>

  <span class="token class-name">Weigher</span><span class="token punctuation">(</span><span class="token class-name">WeightingService</span> weightingService<span class="token punctuation">,</span> <span class="token keyword">double</span> defaultInitialRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultInitialRate <span class="token operator">=</span> <span class="token function">validateRate</span><span class="token punctuation">(</span>defaultInitialRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>weightingService <span class="token operator">=</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span>weightingService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to provide a convenience constructor, a factory method or an external factory in the form of a builder you still can, but by making the fundamental constructor of a Weigher only take the things it actually uses it becomes easier to unit-test and adapt as the system involves.</p><h3 id="in-methods" tabindex="-1"><a class="header-anchor" href="#in-methods" aria-hidden="true">#</a> In methods</h3><p>If a method has multiple isolated blocks consider naming these blocks by extracting them to helper methods that do just one thing. Besides making the calling sites read less like code and more like english, the extracted sites are often easier to flow-analyse for human eyes. The classic case is branched variable assignment. In the extreme, never do this:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> weight<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useWeightingService</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      weight <span class="token operator">=</span> weightingService<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LayerSpecificException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to look up weight for &quot;</span> <span class="token operator">+</span> subject<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    weight <span class="token operator">=</span> defaultInitialRate <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> onlineLearnedBoost<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Use weight here for further calculations</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead do this:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> weight <span class="token operator">=</span> <span class="token function">calculateWeight</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Use weight here for further calculations</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">calculateWeight</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LayerSpecificException</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useWeightingService</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fetchSubjectWeight</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">currentDefaultRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">fetchSubjectWeight</span><span class="token punctuation">(</span><span class="token keyword">long</span> subjectId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> weightingService<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span>subjectId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LayerSpecificException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to look up weight for &quot;</span> <span class="token operator">+</span> subject<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">currentDefaultRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  defaultInitialRate <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> onlineLearnedBoost<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A code reader that generally trusts methods do what they say can scan calculate quickly now and drill down only to those methods where I want to learn more.</p>`,10),Vn={id:"don-t-repeat-yourself-dry在新窗口打开",tabindex:"-1"},Hn=s("a",{class:"header-anchor",href:"#don-t-repeat-yourself-dry在新窗口打开","aria-hidden":"true"},"#",-1),Jn={href:"http://en.wikipedia.org/wiki/Don't_repeat_yourself",target:"_blank",rel:"noopener noreferrer"},Yn={href:"http://c2.com/cgi/wiki?DontRepeatYourself",target:"_blank",rel:"noopener noreferrer"},Kn=t('<h3 id="extract-constants-whenever-it-makes-sense" tabindex="-1"><a class="header-anchor" href="#extract-constants-whenever-it-makes-sense" aria-hidden="true">#</a> Extract constants whenever it makes sense</h3><h3 id="centralize-duplicate-logic-in-utility-functions" tabindex="-1"><a class="header-anchor" href="#centralize-duplicate-logic-in-utility-functions" aria-hidden="true">#</a> Centralize duplicate logic in utility functions</h3><h2 id="manage-threads-properly" tabindex="-1"><a class="header-anchor" href="#manage-threads-properly" aria-hidden="true">#</a> Manage threads properly</h2>',3),Qn={href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html",target:"_blank",rel:"noopener noreferrer"},Xn={href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html",target:"_blank",rel:"noopener noreferrer"},Zn=s("a",{href:"%5BExecutorService%5D(http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html)"},"ExecutorServiceShutdown",-1),$n={href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/application/ShutdownRegistry.java",target:"_blank",rel:"noopener noreferrer"},ns=t(`<h2 id="avoid-unnecessary-code" tabindex="-1"><a class="header-anchor" href="#avoid-unnecessary-code" aria-hidden="true">#</a> Avoid unnecessary code</h2><h3 id="superfluous-temporary-variables" tabindex="-1"><a class="header-anchor" href="#superfluous-temporary-variables" aria-hidden="true">#</a> Superfluous temporary variables.</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - The variable is immediately returned, and just serves to clutter the code.</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings <span class="token operator">=</span> <span class="token function">fetchStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> strings<span class="token punctuation">;</span>

<span class="token comment">// Good.</span>
<span class="token keyword">return</span> <span class="token function">fetchStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unneeded-assignment" tabindex="-1"><a class="header-anchor" href="#unneeded-assignment" aria-hidden="true">#</a> Unneeded assignment.</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Bad.</span>
<span class="token comment">//   - The null value is never realized.</span>
<span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token string">&quot;The value is &quot;</span> <span class="token operator">+</span> <span class="token function">parse</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Good</span>
<span class="token class-name">String</span> value<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token string">&quot;The value is &quot;</span> <span class="token operator">+</span> <span class="token function">parse</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-fast-implementation" tabindex="-1"><a class="header-anchor" href="#the-fast-implementation" aria-hidden="true">#</a> The &#39;fast&#39; implementation</h2><p>Don&#39;t bewilder your API users with a &#39;fast&#39; or &#39;optimized&#39; implementation of a method.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">fastAdd</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ints<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Why would the caller ever use this when there&#39;s a &#39;fast&#39; add?</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ints<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function ss(as,es){const a=p("ExternalLinkIcon");return i(),c("div",null,[u,r,d,k,s("p",null,[n("In general, much of our style and conventions mirror the "),s("a",m,[n("Code Conventions for the Java Programming Language在新窗口打开"),e(a)]),n(" and "),s("a",v,[n("Google's Java Style Guide在新窗口打开"),e(a)]),n(".")]),h,s("ul",null,[s("li",null,[s("a",b,[n("Effective Java在新窗口打开"),e(a)])]),s("li",null,[s("a",g,[n("Java Concurrency in Practice在新窗口打开"),e(a)])]),s("li",null,[s("a",f,[n("Code Complete 2在新窗口打开"),e(a)]),y,n(" Not java-specific, but a good handbook for programming best-practices.")])]),w,s("p",null,[n('We use the "one true brace style" ('),s("a",x,[n("1TBS在新窗口打开"),e(a)]),n("). Indent size is 2 columns.")]),_,s("p",null,[n("We follow the "),s("a",j,[n("Java Language Specification在新窗口打开"),e(a)]),n(" for modifier ordering (sections "),s("a",S,[n("8.1.1在新窗口打开"),e(a)]),n(", "),s("a",T,[n("8.3.1在新窗口打开"),e(a)]),n(" and "),s("a",I,[n("8.4.3在新窗口打开"),e(a)]),n(").")]),q,s("p",null,[n("Don't make your reader open the "),s("a",C,[n("spec在新窗口打开"),e(a)]),n(" to confirm, if you expect a specific operation ordering, make it obvious with parenthesis.")]),B,s("p",null,[n("Wildcard imports make the source of an imported class less clear. They also tend to hide a high class "),s("a",E,[n("fan-out在新窗口打开"),e(a)]),n("."),A,D]),L,s("p",null,[n("By default - disallow "),F,n(". When a variable, parameter, or method return value may be "),O,n(", be explicit about it by marking "),s("a",R,[n("@Nullable在新窗口打开"),e(a)]),n(". This is advisable even for fields/methods with private visibility.")]),M,s("p",null,[n("Sometimes it makes sense to hide members and functions in general, but they may still be required for good test coverage. It's usually preferred to make these package-private and tag with "),s("a",W,[n("@VisibleForTesting在新窗口打开"),e(a)]),n(" to indicate the purpose for visibility.")]),N,s("p",null,[n("Sometimes an existing interface allows your class to easily 'plug in' to other related classes. This leads to highly "),s("a",G,[n("cohesive在新窗口打开"),e(a)]),n(" code.")]),U,s("p",null,[n("If you are testing code that needs to perform periodic background tasks (such as with a "),s("a",z,[n("ScheduledExecutorService在新窗口打开"),e(a)]),n("), consider mocking the service and/or manually triggering the tasks from your tests, and avoiding the actual scheduling. If you are testing code that submits tasks to an "),s("a",P,[n("ExecutorService在新窗口打开"),e(a)]),n(", you might consider allowing the executor to be injected, and supplying a "),s("a",V,[n("single-thread executor在新窗口打开"),e(a)]),n(" in tests.")]),s("p",null,[n("In cases where multiple threads are inevitable, "),s("a",H,[n("java.util.concurrent在新窗口打开"),e(a)]),n(" provides some useful libraries to help manage lock-step execution.")]),s("p",null,[n("For example, "),s("a",J,[n("LinkedBlockingDeque在新窗口打开"),e(a)]),n(" can provide synchronization between producer and consumer when an asynchronous operation is performed. "),s("a",Y,[n("CountDownLatch在新窗口打开"),e(a)]),n(" is useful for state/operation synchronization when a queue does not apply.")]),K,Q,s("p",null,[n("Code that captures real wall time can be difficult to test repeatably, especially when time deltas are meaningful. Therefore, try to avoid "),X,n(", "),Z,n(", and "),$,n(". A suitable replacement for these is "),s("a",nn,[n("Clock在新窗口打开"),e(a)]),n("; using "),s("a",sn,[n("Clock.SYSTEM_CLOCK在新窗口打开"),e(a)]),n(" when running normally, and "),s("a",an,[n("FakeClock在新窗口打开"),e(a)]),n(" in tests.")]),en,s("p",null,[n("We avoid the assert statement since it can be "),s("a",tn,[n("disabled在新窗口打开"),e(a)]),n(" at execution time, and prefer to enforce these types of invariants at all times.")]),on,s("p",null,[n("Use "),pn,n(" where prudent, but favor "),s("a",cn,[n("Optional在新窗口打开"),e(a)]),n(" over "),ln,n(". "),un,n(" provides better semantics around absence of a value.")]),rn,s("p",null,[n("Java 5 introduced support for "),s("a",dn,[n("generics在新窗口打开"),e(a)]),n(". This added type parameters to collection types, and allowed users to implement their own type-parameterized classes. Backwards compatibility and "),s("a",kn,[n("type erasure在新窗口打开"),e(a)]),n(" mean that type parameters are optional, however depending on usage they do result in compiler warnings.")]),mn,s("h3",vn,[hn,n(" Stay out of "),s("a",bn,[n("Texas在新窗口打开"),e(a)])]),gn,s("p",null,[n("Typecasting is a sign of poor class design, and can often be avoided. An obvious exception here is overriding "),s("a",fn,[n("equals在新窗口打开"),e(a)]),n(".")]),yn,s("p",null,[n("Many blocking operations throw "),s("a",wn,[n("InterruptedException在新窗口打开"),e(a)]),n(" so that you may be awaken for events like a JVM shutdown. When catching "),xn,n(", it is good practice to ensure that the thread interrupted state is preserved.")]),s("p",null,[n("IBM has a good "),s("a",_n,[n("article在新窗口打开"),e(a)]),n(" on this topic.")]),jn,s("p",null,[s("a",Sn,[n("StringBuffer在新窗口打开"),e(a)]),n(" is thread-safe, which is rarely needed.")]),Tn,s("p",null,[n("Drawing from "),In,n(" (directly borrowed from a stackoverflow "),s("a",qn,[n("question在新窗口打开"),e(a)]),n(").")]),Cn,s("p",null,[Bn,n(" is synchronized, which is often unneeded. When synchronization is desirable, a "),s("a",En,[n("synchronized list在新窗口打开"),e(a)]),n(" can usually serve as a drop-in replacement for "),An,n(".")]),Dn,s("p",null,[n("If you override one, you must implement both. "),s("em",null,[n("See the equals/hashCode "),s("a",Ln,[n("contract在新窗口打开"),e(a)])])]),s("p",null,[n("[Objects.equal()]("),s("a",Fn,[n("http://docs.guava-libraries.googlecode.com/git-history/v11.0.2/javadoc/com/google/common/base/Objects.html#equal"),e(a)]),n("(java.lang.Object, java.lang.Object)) and "),s("a",On,[n("Objects.hashCode()在新窗口打开"),e(a)]),n(" make it very easy to follow these contracts.")]),Rn,s("p",null,[n("Donald Knuth is a smart guy, and he had a few things to "),s("a",Mn,[n("say在新窗口打开"),e(a)]),n(" on the topic.")]),Wn,s("h2",Nn,[Gn,n(" Obey the Law of Demeter ("),s("a",Un,[n("LoD在新窗口打开"),e(a)]),n(")")]),s("p",null,[n("The Law of Demeter is most obviously violated by breaking the "),s("a",zn,[n("one dot rule在新窗口打开"),e(a)]),n(", but there are other code structures that lead to violations of the spirit of the law.")]),Pn,s("h2",Vn,[Hn,n(" Don't Repeat Yourself ("),s("a",Jn,[n("DRY在新窗口打开"),e(a)]),n(")")]),s("p",null,[n("For a more long-winded discussion on this topic, read "),s("a",Yn,[n("here在新窗口打开"),e(a)]),n(".")]),Kn,s("p",null,[n("When spawning a thread, either directly or with a thread pool, you need to take special care that you properly manage the lifecycle. Please familiarize yourself with the concept of daemon and non-daemon threads (and their effect on the JVM lifecycle) by reading the documentation for "),s("a",Qn,[n("Thread在新窗口打开"),e(a)]),n(". Failing to understand these concepts can cause your application to hang at shutdown.")]),s("p",null,[n("Shutting down an "),s("a",Xn,[n("ExecutorService在新窗口打开"),e(a)]),n(" properly is a slightly tricky process (see javadoc). If your code manages an executor service with non-daemon threads, you need to follow this procedure. "),Zn,n(" very nicely contains this behavior for you.")]),s("p",null,[n("If you want to automatically perform cleanup like this when the VM is shutting down, consider registering with "),s("a",$n,[n("ShutdownRegistry在新窗口打开"),e(a)]),n(".")]),ns])}const ps=o(l,[["render",ss],["__file","code-style-twitter.html.vue"]]);export{ps as default};
