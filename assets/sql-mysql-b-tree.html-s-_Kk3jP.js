const e=JSON.parse('{"key":"v-6b7f2f62","path":"/db/sql-mysql/sql-mysql-b-tree.html","title":"MySQL - 索引(B+树)","lang":"zh-CN","frontmatter":{"date":"2022-05-29T00:00:00.000Z","category":["SQL MySQL"],"tag":["SQL MySQL"],"description":"MySQL - 索引(B+树) https://www.cnblogs.com/xiaoxi/p/6894610.html B+ Tree 原理 1. 数据结构 B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。 B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/db/sql-mysql/sql-mysql-b-tree.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"MySQL - 索引(B+树)"}],["meta",{"property":"og:description","content":"MySQL - 索引(B+树) https://www.cnblogs.com/xiaoxi/p/6894610.html B+ Tree 原理 1. 数据结构 B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。 B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T08:34:19.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"SQL MySQL"}],["meta",{"property":"article:published_time","content":"2022-05-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T08:34:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL - 索引(B+树)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T08:34:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":3,"title":"B+ Tree 原理","slug":"b-tree-原理","link":"#b-tree-原理","children":[]},{"level":3,"title":"MySQL 索引","slug":"mysql-索引","link":"#mysql-索引","children":[]},{"level":3,"title":"索引优化","slug":"索引优化","link":"#索引优化","children":[]},{"level":3,"title":"索引的优点","slug":"索引的优点","link":"#索引的优点","children":[]},{"level":3,"title":"索引的使用场景","slug":"索引的使用场景","link":"#索引的使用场景","children":[]}],"git":{"createdTime":1690160698000,"updatedTime":1703579659000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":6.85,"words":2055},"filePathRelative":"db/sql-mysql/sql-mysql-b-tree.md","localizedDate":"2022年5月29日","excerpt":"<h1> MySQL - 索引(B+树)</h1>\\n<p><a href=\\"https://www.cnblogs.com/xiaoxi/p/6894610.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/xiaoxi/p/6894610.html</a></p>\\n<h3> B+ Tree 原理</h3>\\n<h4> 1. 数据结构</h4>\\n<p>B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。</p>\\n<p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
