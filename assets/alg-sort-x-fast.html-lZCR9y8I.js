const t=JSON.parse('{"key":"v-722b4f8e","path":"/develop/algorithms-structures/alg-sort/alg-sort-x-fast.html","title":"排序 - 快速排序(Quick Sort)","lang":"zh-CN","frontmatter":{"date":"2019-07-02T00:00:00.000Z","category":["算法和数据结构"],"tag":["排序算法"],"description":"排序 - 快速排序(Quick Sort) 快速排序(Quick Sort)使用分治法算法思想。 快速排序介绍 它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 快速排序实现 从数列中挑出一个基准值。 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。 递归地把\\"基准值前面的子数列\\"和\\"基准值后面的子数列\\"进行排序。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-sort/alg-sort-x-fast.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"排序 - 快速排序(Quick Sort)"}],["meta",{"property":"og:description","content":"排序 - 快速排序(Quick Sort) 快速排序(Quick Sort)使用分治法算法思想。 快速排序介绍 它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 快速排序实现 从数列中挑出一个基准值。 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。 递归地把\\"基准值前面的子数列\\"和\\"基准值后面的子数列\\"进行排序。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"排序算法"}],["meta",{"property":"article:published_time","content":"2019-07-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序 - 快速排序(Quick Sort)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"快速排序介绍","slug":"快速排序介绍","link":"#快速排序介绍","children":[]},{"level":2,"title":"快速排序实现","slug":"快速排序实现","link":"#快速排序实现","children":[]},{"level":2,"title":"快速排序时间复杂度和稳定性","slug":"快速排序时间复杂度和稳定性","link":"#快速排序时间复杂度和稳定性","children":[{"level":3,"title":"快速排序稳定性","slug":"快速排序稳定性","link":"#快速排序稳定性","children":[]},{"level":3,"title":"快速排序时间复杂度","slug":"快速排序时间复杂度","link":"#快速排序时间复杂度","children":[]}]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":3.92,"words":1177},"filePathRelative":"develop/algorithms-structures/alg-sort/alg-sort-x-fast.md","localizedDate":"2019年7月2日","excerpt":"<h1> 排序 - 快速排序(Quick Sort)</h1>\\n<blockquote>\\n<p>快速排序(Quick Sort)使用分治法算法思想。</p>\\n</blockquote>\\n<h2> 快速排序介绍</h2>\\n<p>它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\\n<h2> 快速排序实现</h2>\\n<ul>\\n<li>从数列中挑出一个基准值。</li>\\n<li>将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。</li>\\n<li>递归地把\\"基准值前面的子数列\\"和\\"基准值后面的子数列\\"进行排序。</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
