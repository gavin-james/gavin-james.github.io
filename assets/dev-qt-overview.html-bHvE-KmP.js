const t=JSON.parse('{"key":"v-49af03c3","path":"/develop/quality-assurance/ut/dev-qt-overview.html","title":"♥代码质量保障知识体系详解♥","lang":"zh-CN","frontmatter":{"date":"2019-03-19T00:00:00.000Z","category":["质量保障"],"tag":["代码质量"],"description":"♥代码质量保障知识体系详解♥ 本系列主要针对如何保障开发侧代码质量，包含单元测试及实现，以及常用的控制团队开发中代码质量的方式，比如代码风格，命名规范，静态代码检查等。 相关文章 B1. 开发之单元测试：单元测试是从开发侧保证软件质量的第一步，本章将具体介绍单元测试相关的内容和工具，比如Junit，Mockito等。 单元测试：浅谈单元测试 单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。 单元测试：Junit4 详解 JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。 单元测试：Junit5 详解 JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。 单元测试：Mockito 详解 Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。而Mockito是最流行的Java mock框架之一。 单元测试：IDEA下单元测试详解 工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。 单元测试 - SpringBoot2+Mockito实战 在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/quality-assurance/ut/dev-qt-overview.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"♥代码质量保障知识体系详解♥"}],["meta",{"property":"og:description","content":"♥代码质量保障知识体系详解♥ 本系列主要针对如何保障开发侧代码质量，包含单元测试及实现，以及常用的控制团队开发中代码质量的方式，比如代码风格，命名规范，静态代码检查等。 相关文章 B1. 开发之单元测试：单元测试是从开发侧保证软件质量的第一步，本章将具体介绍单元测试相关的内容和工具，比如Junit，Mockito等。 单元测试：浅谈单元测试 单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。 单元测试：Junit4 详解 JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。 单元测试：Junit5 详解 JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。 单元测试：Mockito 详解 Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。而Mockito是最流行的Java mock框架之一。 单元测试：IDEA下单元测试详解 工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。 单元测试 - SpringBoot2+Mockito实战 在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T09:56:01.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"代码质量"}],["meta",{"property":"article:published_time","content":"2019-03-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T09:56:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"♥代码质量保障知识体系详解♥\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T09:56:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":3,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"createdTime":1703584561000,"updatedTime":1703584561000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":3.28,"words":983},"filePathRelative":"develop/quality-assurance/ut/dev-qt-overview.md","localizedDate":"2019年3月19日","excerpt":"<h1> ♥代码质量保障知识体系详解♥</h1>\\n<blockquote>\\n<p>本系列主要针对如何保障开发侧代码质量，包含单元测试及实现，以及常用的控制团队开发中代码质量的方式，比如代码风格，命名规范，静态代码检查等。</p>\\n</blockquote>\\n<h3> 相关文章</h3>\\n<blockquote>\\n<p><strong>B1. 开发之单元测试</strong>：单元测试是从开发侧保证软件质量的第一步，本章将具体介绍单元测试相关的内容和工具，比如Junit，Mockito等。</p>\\n</blockquote>\\n<ul>\\n<li>单元测试：浅谈单元测试\\n<ul>\\n<li>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。</li>\\n</ul>\\n</li>\\n<li>单元测试：Junit4 详解\\n<ul>\\n<li>JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。</li>\\n</ul>\\n</li>\\n<li>单元测试：Junit5 详解\\n<ul>\\n<li>JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。</li>\\n</ul>\\n</li>\\n<li>单元测试：Mockito 详解\\n<ul>\\n<li>Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。而Mockito是最流行的Java mock框架之一。</li>\\n</ul>\\n</li>\\n<li>单元测试：IDEA下单元测试详解\\n<ul>\\n<li>工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。</li>\\n</ul>\\n</li>\\n<li>单元测试 - SpringBoot2+Mockito实战\\n<ul>\\n<li>在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
