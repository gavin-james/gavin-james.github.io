const a=JSON.parse('{"key":"v-cb1c4026","path":"/java/javaup/java8-default.html","title":"Java 8 - 默认方法","lang":"zh-CN","frontmatter":{"date":"2022-04-04T00:00:00.000Z","category":["Java 新特性"],"tag":["Java 新特性"],"description":"Java 8 - 默认方法 理解Java 8 默认方法需理解几个问题: 为什么会出现默认方法? 接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别? 多重实现的默认方法冲突怎么办? 什么是默认方法，为什么要有默认方法 先上例子 一个接口A，Clazz类实现了接口A。 public interface A { default void foo(){ System.out.println(\\"Calling A.foo()\\"); } } public class Clazz implements A { public static void main(String[] args){ Clazz clazz = new Clazz(); clazz.foo();//调用A.foo() } }","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/javaup/java8-default.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Java 8 - 默认方法"}],["meta",{"property":"og:description","content":"Java 8 - 默认方法 理解Java 8 默认方法需理解几个问题: 为什么会出现默认方法? 接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别? 多重实现的默认方法冲突怎么办? 什么是默认方法，为什么要有默认方法 先上例子 一个接口A，Clazz类实现了接口A。 public interface A { default void foo(){ System.out.println(\\"Calling A.foo()\\"); } } public class Clazz implements A { public static void main(String[] args){ Clazz clazz = new Clazz(); clazz.foo();//调用A.foo() } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 新特性"}],["meta",{"property":"article:published_time","content":"2022-04-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 - 默认方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"什么是默认方法，为什么要有默认方法","slug":"什么是默认方法-为什么要有默认方法","link":"#什么是默认方法-为什么要有默认方法","children":[{"level":3,"title":"先上例子","slug":"先上例子","link":"#先上例子","children":[]},{"level":3,"title":"什么是默认方法","slug":"什么是默认方法","link":"#什么是默认方法","children":[]},{"level":3,"title":"为什么出现默认方法","slug":"为什么出现默认方法","link":"#为什么出现默认方法","children":[]}]},{"level":2,"title":"java 8抽象类与接口对比","slug":"java-8抽象类与接口对比","link":"#java-8抽象类与接口对比","children":[]},{"level":2,"title":"多重继承的冲突","slug":"多重继承的冲突","link":"#多重继承的冲突","children":[{"level":3,"title":"举例子","slug":"举例子","link":"#举例子","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":4.38,"words":1315},"filePathRelative":"java/javaup/java8-default.md","localizedDate":"2022年4月4日","excerpt":"<h1> Java 8 - 默认方法</h1>\\n<blockquote>\\n<p>理解Java 8 默认方法需理解几个问题:</p>\\n<ul>\\n<li>为什么会出现默认方法?</li>\\n<li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li>\\n<li>多重实现的默认方法冲突怎么办?</li>\\n</ul>\\n</blockquote>\\n<h2> 什么是默认方法，为什么要有默认方法</h2>\\n<h3> 先上例子</h3>\\n<p>一个接口A，Clazz类实现了接口A。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">A</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Calling A.foo()\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Clazz</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">A</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n       <span class=\\"token class-name\\">Clazz</span> clazz <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Clazz</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       clazz<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//调用A.foo()</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{a as data};
