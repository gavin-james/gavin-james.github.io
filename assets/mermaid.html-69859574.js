import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as l,d as n,a as e,b as t,f as s}from"./app-16aabab6.js";const c={},h=e("h1",{id:"流程图",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#流程图","aria-hidden":"true"},"#"),t(" 流程图")],-1),p=e("h3",{id:"默认节点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#默认节点","aria-hidden":"true"},"#"),t(" 默认节点")],-1),u=e("blockquote",null,[e("p",null,"注意 id 是框中显示的内容。")],-1),m=e("h3",{id:"文本框节点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文本框节点","aria-hidden":"true"},"#"),t(" 文本框节点")],-1),v=e("p",null,"也可以在不同于 id 的框中设置文本。 如果多次这样做，它将是为将使用的节点找到的最后一个文本。 此外，如果您稍后为节点定义边，则可以省略文本定义。 渲染框时将使用先前定义的那个。",-1),b=e("h2",{id:"图形",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#图形","aria-hidden":"true"},"#"),t(" 图形")],-1),g=e("p",null,"This statement declares the direction of the Flowchart.",-1),f=e("p",null,[t("This declares the flowchart is oriented from top to bottom ("),e("code",null,"TD"),t(" or "),e("code",null,"TB"),t(").")],-1),_=e("p",null,[t("This declares the flowchart is oriented from left to right ("),e("code",null,"LR"),t(").")],-1),x={id:"flowchart-orientation",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#flowchart-orientation","aria-hidden":"true"},"#",-1),w={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=flowchart-orientation",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"Possible FlowChart orientations are:",-1),B=e("ul",null,[e("li",null,"TB - top to bottom"),e("li",null,"TD - top-down/ same as top to bottom"),e("li",null,"BT - bottom to top"),e("li",null,"RL - right to left"),e("li",null,"LR - left to right")],-1),A={id:"node-shapes",tabindex:"-1"},T=e("a",{class:"header-anchor",href:"#node-shapes","aria-hidden":"true"},"#",-1),C={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=node-shapes",target:"_blank",rel:"noopener noreferrer"},L={id:"a-node-with-round-edges",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#a-node-with-round-edges","aria-hidden":"true"},"#",-1),j={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-node-with-round-edges",target:"_blank",rel:"noopener noreferrer"},R={id:"a-stadium-shaped-node",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#a-stadium-shaped-node","aria-hidden":"true"},"#",-1),I={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-stadium-shaped-node",target:"_blank",rel:"noopener noreferrer"},S=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1([This is the text in the box])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p>`,2),E={id:"a-node-in-a-subroutine-shape",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#a-node-in-a-subroutine-shape","aria-hidden":"true"},"#",-1),O={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-node-in-a-subroutine-shape",target:"_blank",rel:"noopener noreferrer"},F=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1[[This is the text in the box]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p>`,2),z={id:"a-node-in-a-cylindrical-shape",tabindex:"-1"},M=e("a",{class:"header-anchor",href:"#a-node-in-a-cylindrical-shape","aria-hidden":"true"},"#",-1),J={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-node-in-a-cylindrical-shape",target:"_blank",rel:"noopener noreferrer"},U=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1[(Database)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Database</p>`,2),H={id:"a-node-in-the-form-of-a-circle",tabindex:"-1"},K=e("a",{class:"header-anchor",href:"#a-node-in-the-form-of-a-circle","aria-hidden":"true"},"#",-1),Y={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-node-in-the-form-of-a-circle",target:"_blank",rel:"noopener noreferrer"},P=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1((This is the text in the circle))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the circle</p>`,2),G={id:"a-node-in-an-asymmetric-shape",tabindex:"-1"},Q=e("a",{class:"header-anchor",href:"#a-node-in-an-asymmetric-shape","aria-hidden":"true"},"#",-1),V={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-node-in-an-asymmetric-shape",target:"_blank",rel:"noopener noreferrer"},W=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1&gt;This is the text in the box]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p><p>Currently only the shape above is possible and not its mirror. <em>This might change with future releases.</em></p>`,3),X={id:"a-node-rhombus",tabindex:"-1"},Z=e("a",{class:"header-anchor",href:"#a-node-rhombus","aria-hidden":"true"},"#",-1),$={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-node-rhombus",target:"_blank",rel:"noopener noreferrer"},ee=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1{This is the text in the box}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p>`,2),te={id:"a-hexagon-node",tabindex:"-1"},ne=e("a",{class:"header-anchor",href:"#a-hexagon-node","aria-hidden":"true"},"#",-1),ae={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-hexagon-node",target:"_blank",rel:"noopener noreferrer"},se=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1{{This is the text in the box}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p>`,2),ie={id:"parallelogram",tabindex:"-1"},de=e("a",{class:"header-anchor",href:"#parallelogram","aria-hidden":"true"},"#",-1),oe={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=parallelogram",target:"_blank",rel:"noopener noreferrer"},re=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    id1[/This is the text in the box/]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p>`,2),le={id:"parallelogram-alt",tabindex:"-1"},ce=e("a",{class:"header-anchor",href:"#parallelogram-alt","aria-hidden":"true"},"#",-1),he={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=parallelogram-alt",target:"_blank",rel:"noopener noreferrer"},pe=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    id1[\\This is the text in the box\\]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the box</p>`,2),ue={id:"trapezoid",tabindex:"-1"},me=e("a",{class:"header-anchor",href:"#trapezoid","aria-hidden":"true"},"#",-1),ve={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=trapezoid",target:"_blank",rel:"noopener noreferrer"},be=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    A[/Christmas\\]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Christmas</p>`,2),ge={id:"trapezoid-alt",tabindex:"-1"},fe=e("a",{class:"header-anchor",href:"#trapezoid-alt","aria-hidden":"true"},"#",-1),_e={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=trapezoid-alt",target:"_blank",rel:"noopener noreferrer"},xe=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    B[\\Go shopping/]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Go shopping</p>`,2),ke={id:"double-circle",tabindex:"-1"},we=e("a",{class:"header-anchor",href:"#double-circle","aria-hidden":"true"},"#",-1),ye={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=double-circle",target:"_blank",rel:"noopener noreferrer"},Be=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    id1(((This is the text in the circle)))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text in the circle</p>`,2),Ae={id:"links-between-nodes",tabindex:"-1"},Te=e("a",{class:"header-anchor",href:"#links-between-nodes","aria-hidden":"true"},"#",-1),Ce={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=links-between-nodes",target:"_blank",rel:"noopener noreferrer"},Le=e("p",null,"Nodes can be connected with links/edges. It is possible to have different types of links or attach a text string to a link.",-1),qe={id:"a-link-with-arrow-head",tabindex:"-1"},je=e("a",{class:"header-anchor",href:"#a-link-with-arrow-head","aria-hidden":"true"},"#",-1),Re={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-link-with-arrow-head",target:"_blank",rel:"noopener noreferrer"},De=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A--&gt;B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>AB</p>`,2),Ie={id:"an-open-link",tabindex:"-1"},Se=e("a",{class:"header-anchor",href:"#an-open-link","aria-hidden":"true"},"#",-1),Ee={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=an-open-link",target:"_blank",rel:"noopener noreferrer"},Ne=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A --- B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>AB</p>`,2),Oe={id:"text-on-links",tabindex:"-1"},Fe=e("a",{class:"header-anchor",href:"#text-on-links","aria-hidden":"true"},"#",-1),ze={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=text-on-links",target:"_blank",rel:"noopener noreferrer"},Me=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A-- This is the text! ---B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the text!AB</p><p>or</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A---|This is the text|B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the textAB</p>`,5),Je={id:"a-link-with-arrow-head-and-text",tabindex:"-1"},Ue=e("a",{class:"header-anchor",href:"#a-link-with-arrow-head-and-text","aria-hidden":"true"},"#",-1),He={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=a-link-with-arrow-head-and-text",target:"_blank",rel:"noopener noreferrer"},Ke=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A--&gt;|text|B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>textAB</p><p>or</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A-- text --&gt;B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>textAB</p>`,5),Ye={id:"dotted-link",tabindex:"-1"},Pe=e("a",{class:"header-anchor",href:"#dotted-link","aria-hidden":"true"},"#",-1),Ge={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=dotted-link",target:"_blank",rel:"noopener noreferrer"},Qe=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR;
   A-.-&gt;B;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>AB</p>`,2),Ve={id:"dotted-link-with-text",tabindex:"-1"},We=e("a",{class:"header-anchor",href:"#dotted-link-with-text","aria-hidden":"true"},"#",-1),Xe={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=dotted-link-with-text",target:"_blank",rel:"noopener noreferrer"},Ze=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
   A-. text .-&gt; B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>textAB</p>`,2),$e={id:"thick-link",tabindex:"-1"},et=e("a",{class:"header-anchor",href:"#thick-link","aria-hidden":"true"},"#",-1),tt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=thick-link",target:"_blank",rel:"noopener noreferrer"},nt=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
   A ==&gt; B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>AB</p>`,2),at={id:"thick-link-with-text",tabindex:"-1"},st=e("a",{class:"header-anchor",href:"#thick-link-with-text","aria-hidden":"true"},"#",-1),it={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=thick-link-with-text",target:"_blank",rel:"noopener noreferrer"},dt=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
   A == text ==&gt; B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>textAB</p>`,2),ot={id:"chaining-of-links",tabindex:"-1"},rt=e("a",{class:"header-anchor",href:"#chaining-of-links","aria-hidden":"true"},"#",-1),lt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=chaining-of-links",target:"_blank",rel:"noopener noreferrer"},ct=s(`<p>It is possible declare many links in the same line as per below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
   A -- text --&gt; B -- text2 --&gt; C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>texttext2ABC</p><p>It is also possible to declare multiple nodes links in the same line as per below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
   a --&gt; b &amp; c--&gt; d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>abcd</p><p>You can then describe dependencies in a very expressive way. Like the one-liner below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TB
    A &amp; B--&gt; C &amp; D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ABCD</p><p>If you describe the same diagram using the the basic syntax, it will take four lines. A word of warning, one could go overboard with this making the flowchart harder to read in markdown form. The Swedish word <code>lagom</code> comes to mind. It means, not too much and not too little. This goes for expressive syntaxes as well.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TB
    A --&gt; C
    A --&gt; D
    B --&gt; C
    B --&gt; D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),ht={id:"new-arrow-types",tabindex:"-1"},pt=e("a",{class:"header-anchor",href:"#new-arrow-types","aria-hidden":"true"},"#",-1),ut={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=new-arrow-types",target:"_blank",rel:"noopener noreferrer"},mt=s(`<p>There are new types of arrows supported as per below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A --o B
    B --x C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ABC</p>`,3),vt={id:"multi-directional-arrows",tabindex:"-1"},bt=e("a",{class:"header-anchor",href:"#multi-directional-arrows","aria-hidden":"true"},"#",-1),gt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=multi-directional-arrows",target:"_blank",rel:"noopener noreferrer"},ft=s(`<p>There is the possibility to use multidirectional arrows.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A o--o B
    B &lt;--&gt; C
    C x--x D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ABCD</p>`,3),_t={id:"minimum-length-of-a-link",tabindex:"-1"},xt=e("a",{class:"header-anchor",href:"#minimum-length-of-a-link","aria-hidden":"true"},"#",-1),kt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=minimum-length-of-a-link",target:"_blank",rel:"noopener noreferrer"},wt=s(`<p>Each node in the flowchart is ultimately assigned to a rank in the rendered graph, i.e. to a vertical or horizontal level (depending on the flowchart orientation), based on the nodes to which it is linked. By default, links can span any number of ranks, but you can ask for any link to be longer than the others by adding extra dashes in the link definition.</p><p>In the following example, two extra dashes are added in the link from node <em>B</em> to node <em>E</em>, so that it spans two more ranks than regular links:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    A[Start] --&gt; B{Is it?}
    B --&gt;|Yes| C[OK]
    C --&gt; D[Rethink]
    D --&gt; B
    B ----&gt;|No| E[End]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>YesNoStartIs it?OKRethinkEnd</p><blockquote><p><strong>Note</strong> Links may still be made longer than the requested number of ranks by the rendering engine to accommodate other requests.</p></blockquote><p>When the link label is written in the middle of the link, the extra dashes must be added on the right side of the link. The following example is equivalent to the previous one:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    A[Start] --&gt; B{Is it?}
    B -- Yes --&gt; C[OK]
    C --&gt; D[Rethink]
    D --&gt; B
    B -- No ----&gt; E[End]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>YesNoStartIs it?OKRethinkEnd</p><p>For dotted or thick links, the characters to add are equals signs or dots, as summed up in the following table:</p><table><thead><tr><th>Length</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>Normal</td><td><code>---</code></td><td><code>----</code></td><td><code>-----</code></td></tr><tr><td>Normal with arrow</td><td><code>--&gt;</code></td><td><code>---&gt;</code></td><td><code>----&gt;</code></td></tr><tr><td>Thick</td><td><code>===</code></td><td><code>====</code></td><td><code>=====</code></td></tr><tr><td>Thick with arrow</td><td><code>==&gt;</code></td><td><code>===&gt;</code></td><td><code>====&gt;</code></td></tr><tr><td>Dotted</td><td><code>-.-</code></td><td><code>-..-</code></td><td><code>-...-</code></td></tr><tr><td>Dotted with arrow</td><td><code>-.-&gt;</code></td><td><code>-..-&gt;</code></td><td><code>-...-&gt;</code></td></tr></tbody></table>`,10),yt={id:"special-characters-that-break-syntax",tabindex:"-1"},Bt=e("a",{class:"header-anchor",href:"#special-characters-that-break-syntax","aria-hidden":"true"},"#",-1),At={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=special-characters-that-break-syntax",target:"_blank",rel:"noopener noreferrer"},Tt=s(`<p>It is possible to put text within quotes in order to render more troublesome characters. As in the example below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1[&quot;This is the (text) in the box&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the (text) in the box</p>`,3),Ct={id:"entity-codes-to-escape-characters",tabindex:"-1"},Lt=e("a",{class:"header-anchor",href:"#entity-codes-to-escape-characters","aria-hidden":"true"},"#",-1),qt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=entity-codes-to-escape-characters",target:"_blank",rel:"noopener noreferrer"},jt=s(`<p>It is possible to escape characters using the syntax exemplified here.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    flowchart LR
        A[&quot;A double quote:#quot;&quot;] --&gt;B[&quot;A dec char:#9829;&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A double quote:&quot;A dec char:♥</p><p>Numbers given are base 10, so <code>#</code> can be encoded as <code>#35;</code>. It is also supported to use HTML character names.</p>`,4),Rt={id:"subgraphs",tabindex:"-1"},Dt=e("a",{class:"header-anchor",href:"#subgraphs","aria-hidden":"true"},"#",-1),It={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=subgraphs",target:"_blank",rel:"noopener noreferrer"},St=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>subgraph title
    graph definition
end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An example below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TB
    c1--&gt;a2
    subgraph one
    a1--&gt;a2
    end
    subgraph two
    b1--&gt;b2
    end
    subgraph three
    c1--&gt;c2
    end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>threeonec2c1twob2b1a2a1</p><p>You can also set an explicit id for the subgraph.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TB
    c1--&gt;a2
    subgraph ide1 [one]
    a1--&gt;a2
    end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>onea2a1c1</p>`,7),Et={id:"flowcharts",tabindex:"-1"},Nt=e("a",{class:"header-anchor",href:"#flowcharts","aria-hidden":"true"},"#",-1),Ot={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=flowcharts",target:"_blank",rel:"noopener noreferrer"},Ft=s(`<p>With the graphtype flowchart it is also possible to set edges to and from subgraphs as in the flowchart below.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TB
    c1--&gt;a2
    subgraph one
    a1--&gt;a2
    end
    subgraph two
    b1--&gt;b2
    end
    subgraph three
    c1--&gt;c2
    end
    one --&gt; two
    three --&gt; two
    two --&gt; c2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>threeonec2c1twob2b1a2a1</p>`,3),zt={id:"direction-in-subgraphs",tabindex:"-1"},Mt=e("a",{class:"header-anchor",href:"#direction-in-subgraphs","aria-hidden":"true"},"#",-1),Jt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=direction-in-subgraphs",target:"_blank",rel:"noopener noreferrer"},Ut=s(`<p>With the graphtype flowcharts you can use the direction statement to set the direction which the subgraph will render like in this example.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
  subgraph TOP
    direction TB
    subgraph B1
        direction RL
        i1 --&gt;f1
    end
    subgraph B2
        direction BT
        i2 --&gt;f2
    end
  end
  A --&gt; TOP --&gt; B
  B1 --&gt; B2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TOPB1f1i1B2f2i2AB</p>`,3),Ht={id:"interaction",tabindex:"-1"},Kt=e("a",{class:"header-anchor",href:"#interaction","aria-hidden":"true"},"#",-1),Yt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=interaction",target:"_blank",rel:"noopener noreferrer"},Pt=s(`<p>It is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab. <strong>Note</strong>: This functionality is disabled when using <code>securityLevel=&#39;strict&#39;</code> and enabled when using <code>securityLevel=&#39;loose&#39;</code>.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>click nodeId callback
click nodeId call callback()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>nodeId is the id of the node</li><li>callback is the name of a javascript function defined on the page displaying the graph, the function will be called with the nodeId as parameter.</li></ul><p>Examples of tooltip usage below:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;A callback was triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The tooltip text is surrounded in double quotes. The styles of the tooltip are set by the class <code>.mermaidTooltip</code>.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A--&gt;B
    B--&gt;C
    C--&gt;D
    click A callback &quot;Tooltip for a callback&quot;
    click B &quot;https://www.github.com&quot; &quot;This is a tooltip for a link&quot;
    click A call callback() &quot;Tooltip for a callback&quot;
    click B href &quot;https://www.github.com&quot; &quot;This is a tooltip for a link&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ABCD</p><blockquote><p><strong>Success</strong> The tooltip functionality and the ability to link to urls are available from version 0.5.2.</p></blockquote>`,9),Gt={href:"https://jsfiddle.net/s37cjoau/3/",target:"_blank",rel:"noopener noreferrer"},Qt=s(`<p>Links are opened in the same browser tab/window by default. It is possible to change this by adding a link target to the click definition (<code>_self</code>, <code>_blank</code>, <code>_parent</code> and <code>_top</code> are supported):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A--&gt;B
    B--&gt;C
    C--&gt;D
    D--&gt;E
    click A &quot;https://www.github.com&quot; _blank
    click B &quot;https://www.github.com&quot; &quot;Open this in a new tab&quot; _blank
    click C href &quot;https://www.github.com&quot; _blank
    click D href &quot;https://www.github.com&quot; &quot;Open this in a new tab&quot; _blank
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ABCDE</p><p>Beginners tip, a full example using interactive links in a html context:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mermaid<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    flowchart LR
        A--&gt;B
        B--&gt;C
        C--&gt;D
        click A callback &quot;Tooltip&quot;
        click B &quot;https://www.github.com&quot; &quot;This is a link&quot;
        click C call callback() &quot;Tooltip&quot;
        click D href &quot;https://www.github.com&quot; &quot;This is a link&quot;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;A callback was triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">startOnLoad</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">flowchart</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">useMaxWidth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">htmlLabels</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">curve</span><span class="token operator">:</span> <span class="token string">&#39;cardinal&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">securityLevel</span><span class="token operator">:</span><span class="token string">&#39;loose&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    mermaid<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Vt={id:"comments",tabindex:"-1"},Wt=e("a",{class:"header-anchor",href:"#comments","aria-hidden":"true"},"#",-1),Xt={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=comments",target:"_blank",rel:"noopener noreferrer"},Zt=s(`<p>Comments can be entered within a flow diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with <code>%%</code> (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any flow syntax</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
%% this is a comment A -- text --&gt; B{node}
   A -- text --&gt; B -- text2 --&gt; C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),$t={id:"styling-and-classes",tabindex:"-1"},en=e("a",{class:"header-anchor",href:"#styling-and-classes","aria-hidden":"true"},"#",-1),tn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=styling-and-classes",target:"_blank",rel:"noopener noreferrer"},nn={id:"styling-links",tabindex:"-1"},an=e("a",{class:"header-anchor",href:"#styling-links","aria-hidden":"true"},"#",-1),sn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=styling-links",target:"_blank",rel:"noopener noreferrer"},dn=e("p",null,"It is possible to style links. For instance you might want to style a link that is going backwards in the flow. As links have no ids in the same way as nodes, some other way of deciding what style the links should be attached to is required. Instead of ids, the order number of when the link was defined in the graph is used, or use default to apply to all links. In the example below the style defined in the linkStyle statement will belong to the fourth link in the graph:",-1),on=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),rn={id:"styling-a-node",tabindex:"-1"},ln=e("a",{class:"header-anchor",href:"#styling-a-node","aria-hidden":"true"},"#",-1),cn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=styling-a-node",target:"_blank",rel:"noopener noreferrer"},hn=s(`<p>It is possible to apply specific styles such as a thicker border or a different background color to a node.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    id1(Start)--&gt;id2(Stop)
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StartStop</p>`,3),pn={id:"classes",tabindex:"-1"},un=e("a",{class:"header-anchor",href:"#classes","aria-hidden":"true"},"#",-1),mn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=classes",target:"_blank",rel:"noopener noreferrer"},vn=s(`<p>More convenient than defining the style every time is to define a class of styles and attach this class to the nodes that should have a different look.</p><p>a class definition looks like the example below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    classDef className fill:#f9f,stroke:#333,stroke-width:4px;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Attachment of a class to a node is done as per below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    class nodeId1 className;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It is also possible to attach a class to a list of nodes in one statement:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    class nodeId1,nodeId2 className;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A shorter form of adding a class is to attach the classname to the node using the <code>:::</code>operator as per below:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A:::someclass --&gt; B
    classDef someclass fill:#f96;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AB</p>`,10),bn={id:"css-classes",tabindex:"-1"},gn=e("a",{class:"header-anchor",href:"#css-classes","aria-hidden":"true"},"#",-1),fn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=css-classes",target:"_blank",rel:"noopener noreferrer"},_n=s(`<p>It is also possible to predefine classes in css styles that can be applied from the graph definition as in the example below:</p><p><strong>Example style</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.cssClass &gt; rect</span><span class="token punctuation">{</span>
        <span class="token property">fill</span><span class="token punctuation">:</span>#FF0000<span class="token punctuation">;</span>
        <span class="token property">stroke</span><span class="token punctuation">:</span>#FFFF00<span class="token punctuation">;</span>
        <span class="token property">stroke-width</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example definition</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR;
    A--&gt;B[AAA&lt;span&gt;BBB&lt;/span&gt;]
    B--&gt;D
    class A cssClass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AAAABBBD</p>`,6),xn={id:"default-class",tabindex:"-1"},kn=e("a",{class:"header-anchor",href:"#default-class","aria-hidden":"true"},"#",-1),wn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=default-class",target:"_blank",rel:"noopener noreferrer"},yn=e("p",null,"If a class is named default it will be assigned to all classes without specific class definitions.",-1),Bn=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`    classDef default fill:#f9f,stroke:#333,stroke-width:4px;
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),An={id:"basic-support-for-fontawesome",tabindex:"-1"},Tn=e("a",{class:"header-anchor",href:"#basic-support-for-fontawesome","aria-hidden":"true"},"#",-1),Cn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=basic-support-for-fontawesome",target:"_blank",rel:"noopener noreferrer"},Ln=s(`<p>It is possible to add icons from fontawesome.</p><p>The icons are accessed via the syntax fa:#icon class name#.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart TD
    B[&quot;fab:fa-twitter for peace&quot;]
    B--&gt;C[fa:fa-ban forbidden]
    B--&gt;D(fa:fa-spinner);
    B--&gt;E(A fa:fa-camera-retro perhaps?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for peace forbiddenA perhaps?</p><p>Mermaid is now only compatible with Font Awesome versions 4 and 5. Check that you are using the correct version of Font Awesome.</p>`,5),qn={id:"graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon",tabindex:"-1"},jn=e("a",{class:"header-anchor",href:"#graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon","aria-hidden":"true"},"#",-1),Rn={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon",target:"_blank",rel:"noopener noreferrer"},Dn=s(`<ul><li>In graph declarations, the statements also can now end without a semicolon. After release 0.2.16, ending a graph statement with semicolon is just optional. So the below graph declaration is also valid along with the old declarations of the graph.</li><li>A single space is allowed between vertices and the link. However there should not be any space between a vertex and its text and a link and its text. The old syntax of graph declaration will also work and hence this new feature is optional and is introduced to improve readability.</li></ul><p>Below is the new declaration of the graph edges which is also valid along with the old declaration of the graph edges.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flowchart LR
    A[Hard edge] --&gt;|Link text| B(Round edge)
    B --&gt; C{Decision}
    C --&gt;|One| D[Result one]
    C --&gt;|Two| E[Result two]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Link textOneTwoHard edgeRound edgeDecisionResult oneResult two</p>`,4),In={id:"configuration",tabindex:"-1"},Sn=e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#",-1),En={href:"https://mermaid-js.github.io/mermaid/#/flowchart?id=configuration",target:"_blank",rel:"noopener noreferrer"},Nn=e("p",null,"Is it possible to adjust the width of the rendered flowchart.",-1),On=e("p",null,[t("This is done by defining "),e("strong",null,"mermaid.flowchartConfig"),t(" or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the mermaidCLI page. mermaid.flowchartConfig can be set to a JSON string with config parameters or the corresponding object.")],-1);function Fn(zn,Mn){const i=d("Mermaid"),a=d("ExternalLinkIcon");return r(),l("div",null,[h,p,n(i,{id:"mermaid-6",code:"eJxLy8kvT85ILCpR8AniUgCCzBQuAEjsBeo="}),u,m,v,n(i,{id:"mermaid-18",code:"eJxLy8kvT85ILCpR8AniUgCCzBTD6JCMzGIFICrJSFUoSa0oUcjMA7OT8itiuQCjchBu"}),b,g,f,n(i,{id:"mermaid-28",code:"eJxLy8kvT85ILCpRCHHhUgCC4BIQR1fXDsjKL+ACAKoYCaM="}),_,n(i,{id:"mermaid-32",code:"eJxLy8kvT85ILCpR8AniUgCC4BIQR1fXDsjKL+ACAKqOCak="}),e("h2",x,[k,t(),e("a",w,[t("Flowchart Orientation"),n(a)])]),y,B,e("h2",A,[T,t(),e("a",C,[t("Node shapes"),n(a)])]),e("h3",L,[q,t(),e("a",j,[t("A node with round edges"),n(a)])]),n(i,{id:"mermaid-72",code:"eJxLy8kvT85ILCpR8AniUgCCzBRDjZCMzGIFICrJSFUoSa0oUcjMA7OT8is0uQCdEBAH"}),e("h3",R,[D,t(),e("a",I,[t("A stadium-shaped node"),n(a)])]),S,e("h3",E,[N,t(),e("a",O,[t("A node in a subroutine shape"),n(a)])]),F,e("h3",z,[M,t(),e("a",J,[t("A node in a cylindrical shape"),n(a)])]),U,e("h3",H,[K,t(),e("a",Y,[t("A node in the form of a circle"),n(a)])]),P,e("h3",G,[Q,t(),e("a",V,[t("A node in an asymmetric shape"),n(a)])]),W,e("h3",X,[Z,t(),e("a",$,[t("A node (rhombus)"),n(a)])]),ee,e("h3",te,[ne,t(),e("a",ae,[t("A hexagon node"),n(a)])]),se,e("h3",ie,[de,t(),e("a",oe,[t("Parallelogram"),n(a)])]),re,e("h3",le,[ce,t(),e("a",he,[t("Parallelogram alt"),n(a)])]),pe,e("h3",ue,[me,t(),e("a",ve,[t("Trapezoid"),n(a)])]),be,e("h3",ge,[fe,t(),e("a",_e,[t("Trapezoid alt"),n(a)])]),xe,e("h3",ke,[we,t(),e("a",ye,[t("Double circle"),n(a)])]),Be,e("h2",Ae,[Te,t(),e("a",Ce,[t("Links between nodes"),n(a)])]),Le,e("h3",qe,[je,t(),e("a",Re,[t("A link with arrow head"),n(a)])]),De,e("h3",Ie,[Se,t(),e("a",Ee,[t("An open link"),n(a)])]),Ne,e("h3",Oe,[Fe,t(),e("a",ze,[t("Text on links"),n(a)])]),Me,e("h3",Je,[Ue,t(),e("a",He,[t("A link with arrow head and text"),n(a)])]),Ke,e("h3",Ye,[Pe,t(),e("a",Ge,[t("Dotted link"),n(a)])]),Qe,e("h3",Ve,[We,t(),e("a",Xe,[t("Dotted link with text"),n(a)])]),Ze,e("h3",$e,[et,t(),e("a",tt,[t("Thick link"),n(a)])]),nt,e("h3",at,[st,t(),e("a",it,[t("Thick link with text"),n(a)])]),dt,e("h3",ot,[rt,t(),e("a",lt,[t("Chaining of links"),n(a)])]),ct,e("h3",ht,[pt,t(),e("a",ut,[t("New arrow types"),n(a)])]),mt,e("h3",vt,[bt,t(),e("a",gt,[t("Multi directional arrows"),n(a)])]),ft,e("h3",_t,[xt,t(),e("a",kt,[t("Minimum length of a link"),n(a)])]),wt,e("h2",yt,[Bt,t(),e("a",At,[t("Special characters that break syntax"),n(a)])]),Tt,e("h3",Ct,[Lt,t(),e("a",qt,[t("Entity codes to escape characters"),n(a)])]),jt,e("h2",Rt,[Dt,t(),e("a",It,[t("Subgraphs"),n(a)])]),St,e("h2",Et,[Nt,t(),e("a",Ot,[t("flowcharts"),n(a)])]),Ft,e("h2",zt,[Mt,t(),e("a",Jt,[t("Direction in subgraphs"),n(a)])]),Ut,e("h2",Ht,[Kt,t(),e("a",Yt,[t("Interaction"),n(a)])]),Pt,e("p",null,[t("Due to limitations with how Docsify handles JavaScript callback functions, an alternate working demo for the above code can be viewed at "),e("a",Gt,[t("this jsfiddle"),n(a)]),t(".")]),Qt,e("h3",Vt,[Wt,t(),e("a",Xt,[t("Comments"),n(a)])]),Zt,e("h2",$t,[en,t(),e("a",tn,[t("Styling and classes"),n(a)])]),e("h3",nn,[an,t(),e("a",sn,[t("Styling links"),n(a)])]),dn,on,e("h3",rn,[ln,t(),e("a",cn,[t("Styling a node"),n(a)])]),hn,e("h4",pn,[un,t(),e("a",mn,[t("Classes"),n(a)])]),vn,e("h3",bn,[gn,t(),e("a",fn,[t("Css classes"),n(a)])]),_n,e("h3",xn,[kn,t(),e("a",wn,[t("Default class"),n(a)])]),yn,Bn,e("h2",An,[Tn,t(),e("a",Cn,[t("Basic support for fontawesome"),n(a)])]),Ln,e("h2",qn,[jn,t(),e("a",Rn,[t("Graph declarations with spaces between vertices and link and without semicolon"),n(a)])]),Dn,e("h2",In,[Sn,t(),e("a",En,[t("Configuration..."),n(a)])]),Nn,On])}const Hn=o(c,[["render",Fn],["__file","mermaid.html.vue"]]);export{Hn as default};
