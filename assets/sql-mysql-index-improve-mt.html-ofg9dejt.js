import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c as t,a as s,b as n,d as c,f as l}from"./app-Kb1srcrM.js";const r={},i=l(`<h1 id="大厂实践-美团-mysql索引原理及慢查询优化" tabindex="-1"><a class="header-anchor" href="#大厂实践-美团-mysql索引原理及慢查询优化" aria-hidden="true">#</a> 大厂实践 - 美团: MySQL索引原理及慢查询优化</h1><blockquote><p>目前常用的 SQL 优化方式包括但不限于：业务层优化、SQL逻辑优化、索引优化等。其中索引优化通常通过调整索引或新增索引从而达到 SQL 优化的目的，索引优化往往可以在短时间内产生非常巨大的效果。本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。</p></blockquote><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>MySQL凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓“好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如“精通MySQL”、“SQL语句优化”、“了解数据库原理”等要求。我们知道一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。</p><p>本人从2013年7月份起，一直在美团核心业务系统部做慢查询的优化工作，共计十余个系统，累计解决和积累了上百个慢查询案例。随着业务的复杂性提升，遇到的问题千奇百怪，五花八门，匪夷所思。本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。</p><h2 id="一个慢查询引发的思考" tabindex="-1"><a class="header-anchor" href="#一个慢查询引发的思考" aria-hidden="true">#</a> 一个慢查询引发的思考</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 
<span class="token keyword">from</span>
   task 
<span class="token keyword">where</span>
   <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">2</span> 
   <span class="token operator">and</span> operator_id<span class="token operator">=</span><span class="token number">20839</span> 
   <span class="token operator">and</span> operate_time<span class="token operator">&gt;</span><span class="token number">1371169729</span> 
   <span class="token operator">and</span> operate_time<span class="token operator">&lt;</span><span class="token number">1371174603</span> 
   <span class="token operator">and</span> <span class="token keyword">type</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>系统使用者反应有一个功能越来越慢，于是工程师找到了上面的SQL。</p><p>并且兴致冲冲的找到了我，“这个SQL需要优化，给我把每个字段都加上索引”。</p><p>我很惊讶，问道：“为什么需要每个字段都加上索引？”</p><p>“把查询的字段都加上索引会更快”，工程师信心满满。</p><p>“这种情况完全可以建一个联合索引，因为是最左前缀匹配，所以operate_time需要放到最后，而且还需要把其他相关的查询都拿来，需要做一个综合评估。”</p><p>“联合索引？最左前缀匹配？综合评估？”工程师不禁陷入了沉思。</p><p>多数情况下，我们知道索引能够提高查询效率，但应该如何建立索引？索引的顺序如何？许多人却只知道大概。其实理解这些概念并不难，而且索引的原理远没有想象的那么复杂。</p><h2 id="mysql索引原理" tabindex="-1"><a class="header-anchor" href="#mysql索引原理" aria-hidden="true">#</a> MySQL索引原理</h2><h3 id="索引目的" tabindex="-1"><a class="header-anchor" href="#索引目的" aria-hidden="true">#</a> 索引目的</h3><p>索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？</p><h3 id="索引原理" tabindex="-1"><a class="header-anchor" href="#索引原理" aria-hidden="true">#</a> 索引原理</h3><p>除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。</p><p>数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><h3 id="磁盘io与预读" tabindex="-1"><a class="header-anchor" href="#磁盘io与预读" aria-hidden="true">#</a> 磁盘IO与预读</h3><p>前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：</p><figure><img src="https://www.pdai.tech/images/db/mysql/db-mysql-index-improve-mt-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p><h3 id="索引的数据结构" tabindex="-1"><a class="header-anchor" href="#索引的数据结构" aria-hidden="true">#</a> 索引的数据结构</h3><p>前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。</p><h4 id="详解b-树" tabindex="-1"><a class="header-anchor" href="#详解b-树" aria-hidden="true">#</a> 详解b+树</h4><figure><img src="https://www.pdai.tech/images/db/mysql/db-mysql-index-improve-mt-2.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><h4 id="b-树的查找过程" tabindex="-1"><a class="header-anchor" href="#b-树的查找过程" aria-hidden="true">#</a> b+树的查找过程</h4><p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><h4 id="b-树性质" tabindex="-1"><a class="header-anchor" href="#b-树性质" aria-hidden="true">#</a> b+树性质</h4><p>1.通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><p>2.当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h2 id="慢查询优化" tabindex="-1"><a class="header-anchor" href="#慢查询优化" aria-hidden="true">#</a> 慢查询优化</h2><p>关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。我们回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则：</p><h3 id="建索引的几大原则" tabindex="-1"><a class="header-anchor" href="#建索引的几大原则" aria-hidden="true">#</a> 建索引的几大原则</h3><ol><li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>like</code>)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li><li>=和in可以乱序，比如<code>a = 1 and b = 2 and c = 3</code> 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</li><li>尽量选择区分度高的列作为索引，区分度的公式是<code>count(distinct col)/count(*)</code>，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</li><li>索引列不能参与计算，保持列“干净”，比如<code>from_unixtime(create_time) = ’2014-05-29’</code>就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)。</li><li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li></ol><h3 id="回到开始的慢查询" tabindex="-1"><a class="header-anchor" href="#回到开始的慢查询" aria-hidden="true">#</a> 回到开始的慢查询</h3><p>根据最左匹配原则，最开始的sql语句的索引应该是status、operator_id、type、operate_time的联合索引；其中status、operator_id、type的顺序可以颠倒，所以我才会说，把这个表的所有相关查询都找到，会综合分析；比如还有如下查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> task <span class="token keyword">where</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">12</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> task <span class="token keyword">where</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么索引建立成<code>(status,type,operator_id,operate_time)</code>就是非常正确的，因为可以覆盖到所有情况。这个就是利用了索引的最左匹配的原则</p><h3 id="查询优化神器-explain命令" tabindex="-1"><a class="header-anchor" href="#查询优化神器-explain命令" aria-hidden="true">#</a> 查询优化神器 - explain命令</h3><blockquote><p>关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网explain-output，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。</p></blockquote><h4 id="慢查询优化基本步骤" tabindex="-1"><a class="header-anchor" href="#慢查询优化基本步骤" aria-hidden="true">#</a> 慢查询优化基本步骤</h4><p>0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE</p><p>1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</p><p>2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</p><p>3.order by limit 形式的sql语句让排序的表优先查</p><p>4.了解业务方使用场景</p><p>5.加索引时参照建索引的几大原则</p><p>6.观察结果，不符合预期继续从0分析</p><h3 id="几个慢查询案例" tabindex="-1"><a class="header-anchor" href="#几个慢查询案例" aria-hidden="true">#</a> 几个慢查询案例</h3><p>下面几个例子详细解释了如何分析和优化慢查询。</p><h4 id="复杂语句写法" tabindex="-1"><a class="header-anchor" href="#复杂语句写法" aria-hidden="true">#</a> 复杂语句写法</h4><p>很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   <span class="token keyword">distinct</span> cert<span class="token punctuation">.</span>emp_id 
<span class="token keyword">from</span>
   cm_log cl 
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   <span class="token punctuation">(</span>
      <span class="token keyword">select</span>
         emp<span class="token punctuation">.</span>id <span class="token keyword">as</span> emp_id<span class="token punctuation">,</span>
         emp_cert<span class="token punctuation">.</span>id <span class="token keyword">as</span> cert_id 
      <span class="token keyword">from</span>
         employee emp 
      <span class="token keyword">left</span> <span class="token keyword">join</span>
         emp_certificate emp_cert 
            <span class="token keyword">on</span> emp<span class="token punctuation">.</span>id <span class="token operator">=</span> emp_cert<span class="token punctuation">.</span>emp_id 
      <span class="token keyword">where</span>
         emp<span class="token punctuation">.</span>is_deleted<span class="token operator">=</span><span class="token number">0</span>
   <span class="token punctuation">)</span> cert 
      <span class="token keyword">on</span> <span class="token punctuation">(</span>
         cl<span class="token punctuation">.</span>ref_table<span class="token operator">=</span><span class="token string">&#39;Employee&#39;</span> 
         <span class="token operator">and</span> cl<span class="token punctuation">.</span>ref_oid<span class="token operator">=</span> cert<span class="token punctuation">.</span>emp_id
      <span class="token punctuation">)</span> 
      <span class="token operator">or</span> <span class="token punctuation">(</span>
         cl<span class="token punctuation">.</span>ref_table<span class="token operator">=</span><span class="token string">&#39;EmpCertificate&#39;</span> 
         <span class="token operator">and</span> cl<span class="token punctuation">.</span>ref_oid<span class="token operator">=</span> cert<span class="token punctuation">.</span>cert_id
      <span class="token punctuation">)</span> 
<span class="token keyword">where</span>
   cl<span class="token punctuation">.</span>last_upd_date <span class="token operator">&gt;=</span><span class="token string">&#39;2013-11-07 15:03:00&#39;</span> 
   <span class="token operator">and</span> cl<span class="token punctuation">.</span>last_upd_date<span class="token operator">&lt;=</span><span class="token string">&#39;2013-11-08 16:00:00&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>先运行一下</strong>，53条记录 1.87秒，又没有用聚合语句，比较慢</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">53</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">1.87</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>explain</strong></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">+</span><span class="token comment">----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>      <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys                   <span class="token operator">|</span> <span class="token keyword">key</span>                   <span class="token operator">|</span> key_len <span class="token operator">|</span> ref               <span class="token operator">|</span> <span class="token keyword">rows</span>  <span class="token operator">|</span> Extra                          <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> cl         <span class="token operator">|</span> range <span class="token operator">|</span> cm_log_cls_id<span class="token punctuation">,</span>idx_last_upd_date <span class="token operator">|</span> idx_last_upd_date     <span class="token operator">|</span> <span class="token number">8</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>              <span class="token operator">|</span>   <span class="token number">379</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span>   <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> <span class="token operator">&lt;</span>derived2<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">ALL</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>                            <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>              <span class="token operator">|</span> <span class="token number">63727</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> DERIVED     <span class="token operator">|</span> emp        <span class="token operator">|</span> <span class="token keyword">ALL</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>                            <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>              <span class="token operator">|</span> <span class="token number">13317</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                    <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> DERIVED     <span class="token operator">|</span> emp_cert   <span class="token operator">|</span> ref   <span class="token operator">|</span> emp_certificate_empid           <span class="token operator">|</span> emp_certificate_empid <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> meituanorg<span class="token punctuation">.</span>emp<span class="token punctuation">.</span>id <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span>                    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>简述一下执行计划</strong>，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID = 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID = 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows = 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。</li><li><strong>如何优化呢</strong>？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。</li></ol><p>优化过的语句如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   emp<span class="token punctuation">.</span>id 
<span class="token keyword">from</span>
   cm_log cl 
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   employee emp 
      <span class="token keyword">on</span> cl<span class="token punctuation">.</span>ref_table <span class="token operator">=</span> <span class="token string">&#39;Employee&#39;</span> 
      <span class="token operator">and</span> cl<span class="token punctuation">.</span>ref_oid <span class="token operator">=</span> emp<span class="token punctuation">.</span>id  
<span class="token keyword">where</span>
   cl<span class="token punctuation">.</span>last_upd_date <span class="token operator">&gt;=</span><span class="token string">&#39;2013-11-07 15:03:00&#39;</span> 
   <span class="token operator">and</span> cl<span class="token punctuation">.</span>last_upd_date<span class="token operator">&lt;=</span><span class="token string">&#39;2013-11-08 16:00:00&#39;</span> 
   <span class="token operator">and</span> emp<span class="token punctuation">.</span>is_deleted <span class="token operator">=</span> <span class="token number">0</span>  
<span class="token keyword">union</span>
<span class="token keyword">select</span>
   emp<span class="token punctuation">.</span>id 
<span class="token keyword">from</span>
   cm_log cl 
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   emp_certificate ec 
      <span class="token keyword">on</span> cl<span class="token punctuation">.</span>ref_table <span class="token operator">=</span> <span class="token string">&#39;EmpCertificate&#39;</span> 
      <span class="token operator">and</span> cl<span class="token punctuation">.</span>ref_oid <span class="token operator">=</span> ec<span class="token punctuation">.</span>id  
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   employee emp 
      <span class="token keyword">on</span> emp<span class="token punctuation">.</span>id <span class="token operator">=</span> ec<span class="token punctuation">.</span>emp_id  
<span class="token keyword">where</span>
   cl<span class="token punctuation">.</span>last_upd_date <span class="token operator">&gt;=</span><span class="token string">&#39;2013-11-07 15:03:00&#39;</span> 
   <span class="token operator">and</span> cl<span class="token punctuation">.</span>last_upd_date<span class="token operator">&lt;=</span><span class="token string">&#39;2013-11-08 16:00:00&#39;</span> 
   <span class="token operator">and</span> emp<span class="token punctuation">.</span>is_deleted <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致</li><li>现有索引可以满足，不需要建索引</li><li>用改造后的语句实验一下，只需要10ms 降低了近200倍！</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">+</span><span class="token comment">----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type  <span class="token operator">|</span> <span class="token keyword">table</span>      <span class="token operator">|</span> <span class="token keyword">type</span>   <span class="token operator">|</span> possible_keys                   <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> Extra       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>      <span class="token operator">|</span> cl         <span class="token operator">|</span> range  <span class="token operator">|</span> cm_log_cls_id<span class="token punctuation">,</span>idx_last_upd_date <span class="token operator">|</span> idx_last_upd_date <span class="token operator">|</span> <span class="token number">8</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span>  <span class="token number">379</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>      <span class="token operator">|</span> emp        <span class="token operator">|</span> eq_ref <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>                         <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>           <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> meituanorg<span class="token punctuation">.</span>cl<span class="token punctuation">.</span>ref_oid <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token keyword">UNION</span>        <span class="token operator">|</span> cl         <span class="token operator">|</span> range  <span class="token operator">|</span> cm_log_cls_id<span class="token punctuation">,</span>idx_last_upd_date <span class="token operator">|</span> idx_last_upd_date <span class="token operator">|</span> <span class="token number">8</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span>  <span class="token number">379</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token keyword">UNION</span>        <span class="token operator">|</span> ec         <span class="token operator">|</span> eq_ref <span class="token operator">|</span> <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>emp_certificate_empid   <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>           <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> meituanorg<span class="token punctuation">.</span>cl<span class="token punctuation">.</span>ref_oid <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>             <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token keyword">UNION</span>        <span class="token operator">|</span> emp        <span class="token operator">|</span> eq_ref <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>                         <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>           <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> meituanorg<span class="token punctuation">.</span>ec<span class="token punctuation">.</span>emp_id  <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token keyword">UNION</span> RESULT <span class="token operator">|</span> <span class="token operator">&lt;</span>union1<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">ALL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                            <span class="token operator">|</span> <span class="token boolean">NULL</span>              <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+</span>
<span class="token number">53</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="明确应用场景" tabindex="-1"><a class="header-anchor" href="#明确应用场景" aria-hidden="true">#</a> 明确应用场景</h4><p>举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   <span class="token operator">*</span> 
<span class="token keyword">from</span>
   stage_poi sp 
<span class="token keyword">where</span>
   sp<span class="token punctuation">.</span>accurate_result<span class="token operator">=</span><span class="token number">1</span> 
   <span class="token operator">and</span> <span class="token punctuation">(</span>
      sp<span class="token punctuation">.</span>sync_status<span class="token operator">=</span><span class="token number">0</span> 
      <span class="token operator">or</span> sp<span class="token punctuation">.</span>sync_status<span class="token operator">=</span><span class="token number">2</span> 
      <span class="token operator">or</span> sp<span class="token punctuation">.</span>sync_status<span class="token operator">=</span><span class="token number">4</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>先看看运行多长时间</strong>,951条数据6.22秒，真的很慢。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">951</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">6.22</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>先explain</strong>，rows达到了361万，type = ALL表明是全表扫描。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">+</span><span class="token comment">----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span>    <span class="token operator">|</span> Extra       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> sp    <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">3613155</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条。</li><li>让explain的rows 尽量逼近951。</li></ol><p>看一下accurate_result = 1的记录数：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>accurate_result <span class="token keyword">from</span> stage_poi  <span class="token keyword">group</span> <span class="token keyword">by</span> accurate_result<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+-----------------+</span>
<span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span> accurate_result <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-----------------+</span>
<span class="token operator">|</span>     <span class="token number">1023</span> <span class="token operator">|</span>              <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2114655</span> <span class="token operator">|</span>               <span class="token number">0</span> <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token number">972815</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-----------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据。</p><p>再看一下sync_status字段的情况：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sync_status <span class="token keyword">from</span> stage_poi  <span class="token keyword">group</span> <span class="token keyword">by</span> sync_status<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+-------------+</span>
<span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span> sync_status <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-------------+</span>
<span class="token operator">|</span>     <span class="token number">3080</span> <span class="token operator">|</span>           <span class="token number">0</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">3085413</span> <span class="token operator">|</span>           <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的区分度也很低，根据理论，也不适合建立索引。</p><p>问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的。</p><ol><li><strong>找业务方去沟通，看看使用场景</strong>。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据。</li><li><strong>根据建立索引规则</strong>，使用如下语句建立索引</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> stage_poi <span class="token keyword">add</span> <span class="token keyword">index</span> idx_acc_status<span class="token punctuation">(</span>accurate_result<span class="token punctuation">,</span>sync_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>观察预期结果</strong>,发现只需要200ms，快了30多倍。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">952</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.20</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。所以我们第4步调查SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。</p><h4 id="无法优化的语句" tabindex="-1"><a class="header-anchor" href="#无法优化的语句" aria-hidden="true">#</a> 无法优化的语句</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>position<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>office_phone<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>feature_info<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>creator_id<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>is_keyperson<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>giveup_reason<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>data_source<span class="token punctuation">,</span>
   from_unixtime<span class="token punctuation">(</span>c<span class="token punctuation">.</span>created_time<span class="token punctuation">)</span> <span class="token keyword">as</span> created_time<span class="token punctuation">,</span>
   from_unixtime<span class="token punctuation">(</span>c<span class="token punctuation">.</span>last_modified<span class="token punctuation">)</span> <span class="token keyword">as</span> last_modified<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>last_modified_user_id  
<span class="token keyword">from</span>
   contact c  
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   contact_branch cb 
      <span class="token keyword">on</span>  c<span class="token punctuation">.</span>id <span class="token operator">=</span> cb<span class="token punctuation">.</span>contact_id  
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   branch_user bu 
      <span class="token keyword">on</span>  cb<span class="token punctuation">.</span>branch_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>branch_id 
      <span class="token operator">and</span> bu<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">in</span> <span class="token punctuation">(</span>
         <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token number">1</span><span class="token punctuation">)</span>  
   <span class="token keyword">inner</span> <span class="token keyword">join</span>
      org_emp_info oei 
         <span class="token keyword">on</span>  oei<span class="token punctuation">.</span>data_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>user_id 
         <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_left <span class="token operator">&gt;=</span> <span class="token number">2875</span> 
         <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_right <span class="token operator">&lt;=</span> <span class="token number">10802</span> 
         <span class="token operator">and</span> oei<span class="token punctuation">.</span>org_category <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">1</span>  
   <span class="token keyword">order</span> <span class="token keyword">by</span>
      c<span class="token punctuation">.</span>created_time <span class="token keyword">desc</span>  <span class="token keyword">limit</span> <span class="token number">0</span> <span class="token punctuation">,</span>
      <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是几个步骤。</p><ol><li><strong>先看语句运行多长时间</strong>，10条记录用了13秒，已经不可忍受。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">13.06</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>explain</strong></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">+</span><span class="token comment">----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> <span class="token keyword">type</span>   <span class="token operator">|</span> possible_keys                       <span class="token operator">|</span> <span class="token keyword">key</span>                     <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                      <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> Extra                                        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> oei   <span class="token operator">|</span> ref    <span class="token operator">|</span> idx_category_left_right<span class="token punctuation">,</span>idx_data_id <span class="token operator">|</span> idx_category_left_right <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> const                    <span class="token operator">|</span> <span class="token number">8849</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> bu    <span class="token operator">|</span> ref    <span class="token operator">|</span> <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>idx_userid_status           <span class="token operator">|</span> idx_userid_status       <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> meituancrm<span class="token punctuation">.</span>oei<span class="token punctuation">.</span>data_id   <span class="token operator">|</span>   <span class="token number">76</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span>                     <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> cb    <span class="token operator">|</span> ref    <span class="token operator">|</span> idx_branch_id<span class="token punctuation">,</span>idx_contact_branch_id <span class="token operator">|</span> idx_branch_id           <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> meituancrm<span class="token punctuation">.</span>bu<span class="token punctuation">.</span>branch_id  <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>                                              <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> c     <span class="token operator">|</span> eq_ref <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>                             <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>                 <span class="token operator">|</span> <span class="token number">108</span>     <span class="token operator">|</span> meituancrm<span class="token punctuation">.</span>cb<span class="token punctuation">.</span>contact_id <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>                                              <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从执行计划上看，mysql先查org_emp_info表扫描8849记录，再用索引idx_userid_status关联branch_user表，再用索引idx_branch_id关联contact_branch表，最后主键关联contact表。</p><p>rows返回的都非常少，看不到有什么异常情况。我们在看一下语句，发现后面有order by + limit组合，会不会是排序量太大搞的？于是我们简化SQL，去掉后面的order by 和 limit，看看到底用了多少记录来排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
  <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">from</span>
   contact c  
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   contact_branch cb 
      <span class="token keyword">on</span>  c<span class="token punctuation">.</span>id <span class="token operator">=</span> cb<span class="token punctuation">.</span>contact_id  
<span class="token keyword">inner</span> <span class="token keyword">join</span>
   branch_user bu 
      <span class="token keyword">on</span>  cb<span class="token punctuation">.</span>branch_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>branch_id 
      <span class="token operator">and</span> bu<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">in</span> <span class="token punctuation">(</span>
         <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token number">2</span><span class="token punctuation">)</span>  
   <span class="token keyword">inner</span> <span class="token keyword">join</span>
      org_emp_info oei 
         <span class="token keyword">on</span>  oei<span class="token punctuation">.</span>data_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>user_id 
         <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_left <span class="token operator">&gt;=</span> <span class="token number">2875</span> 
         <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_right <span class="token operator">&lt;=</span> <span class="token number">10802</span> 
         <span class="token operator">and</span> oei<span class="token punctuation">.</span>org_category <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">1</span>  
<span class="token operator">+</span><span class="token comment">----------+</span>
<span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+</span>
<span class="token operator">|</span>   <span class="token number">778878</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">5.19</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现排序之前居然锁定了778878条记录，如果针对70万的结果集排序，将是灾难性的，怪不得这么慢，那我们能不能换个思路，先根据contact的created_time排序，再来join会不会比较快呢？</p><p>于是改造成下面的语句，也可以用straight_join来优化：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>position<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>office_phone<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>feature_info<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>creator_id<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>is_keyperson<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>giveup_reason<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>data_source<span class="token punctuation">,</span>
   from_unixtime<span class="token punctuation">(</span>c<span class="token punctuation">.</span>created_time<span class="token punctuation">)</span> <span class="token keyword">as</span> created_time<span class="token punctuation">,</span>
   from_unixtime<span class="token punctuation">(</span>c<span class="token punctuation">.</span>last_modified<span class="token punctuation">)</span> <span class="token keyword">as</span> last_modified<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>last_modified_user_id   
<span class="token keyword">from</span>
   contact c  
<span class="token keyword">where</span>
   <span class="token keyword">exists</span> <span class="token punctuation">(</span>
      <span class="token keyword">select</span>
         <span class="token number">1</span> 
      <span class="token keyword">from</span>
         contact_branch cb  
      <span class="token keyword">inner</span> <span class="token keyword">join</span>
         branch_user bu        
            <span class="token keyword">on</span>  cb<span class="token punctuation">.</span>branch_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>branch_id        
            <span class="token operator">and</span> bu<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">in</span> <span class="token punctuation">(</span>
               <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token number">2</span><span class="token punctuation">)</span>      
         <span class="token keyword">inner</span> <span class="token keyword">join</span>
            org_emp_info oei           
               <span class="token keyword">on</span>  oei<span class="token punctuation">.</span>data_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>user_id           
               <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_left <span class="token operator">&gt;=</span> <span class="token number">2875</span>           
               <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_right <span class="token operator">&lt;=</span> <span class="token number">10802</span>           
               <span class="token operator">and</span> oei<span class="token punctuation">.</span>org_category <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">1</span>      
         <span class="token keyword">where</span>
            c<span class="token punctuation">.</span>id <span class="token operator">=</span> cb<span class="token punctuation">.</span>contact_id    
      <span class="token punctuation">)</span>    
   <span class="token keyword">order</span> <span class="token keyword">by</span>
      c<span class="token punctuation">.</span>created_time <span class="token keyword">desc</span>  <span class="token keyword">limit</span> <span class="token number">0</span> <span class="token punctuation">,</span>
      <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证一下效果 预计在1ms内，提升了13000多倍！</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>本以为至此大工告成，但我们在前面的分析中漏了一个细节，先排序再join和先join再排序理论上开销是一样的，为何提升这么多是因为有一个limit！大致执行过程是：mysql先按索引排序得到前10条记录，然后再去join过滤，当发现不够10条的时候，再次去10条，再次join，这显然在内层join过滤的数据非常多的时候，将是灾难的，极端情况，内层一条数据都找不到，mysql还傻乎乎的每次取10条，几乎遍历了这个数据表！</p><p>用不同参数的SQL试验下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
   sql_no_cache   c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>position<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>office_phone<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>feature_info<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>birthday<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>creator_id<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>is_keyperson<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>giveup_reason<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>data_source<span class="token punctuation">,</span>
   from_unixtime<span class="token punctuation">(</span>c<span class="token punctuation">.</span>created_time<span class="token punctuation">)</span> <span class="token keyword">as</span> created_time<span class="token punctuation">,</span>
   from_unixtime<span class="token punctuation">(</span>c<span class="token punctuation">.</span>last_modified<span class="token punctuation">)</span> <span class="token keyword">as</span> last_modified<span class="token punctuation">,</span>
   c<span class="token punctuation">.</span>last_modified_user_id    
<span class="token keyword">from</span>
   contact c   
<span class="token keyword">where</span>
   <span class="token keyword">exists</span> <span class="token punctuation">(</span>
      <span class="token keyword">select</span>
         <span class="token number">1</span>        
      <span class="token keyword">from</span>
         contact_branch cb         
      <span class="token keyword">inner</span> <span class="token keyword">join</span>
         branch_user bu                     
            <span class="token keyword">on</span>  cb<span class="token punctuation">.</span>branch_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>branch_id                     
            <span class="token operator">and</span> bu<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">in</span> <span class="token punctuation">(</span>
               <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token number">2</span><span class="token punctuation">)</span>                
         <span class="token keyword">inner</span> <span class="token keyword">join</span>
            org_emp_info oei                           
               <span class="token keyword">on</span>  oei<span class="token punctuation">.</span>data_id <span class="token operator">=</span> bu<span class="token punctuation">.</span>user_id                           
               <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_left <span class="token operator">&gt;=</span> <span class="token number">2875</span>                           
               <span class="token operator">and</span> oei<span class="token punctuation">.</span>node_right <span class="token operator">&lt;=</span> <span class="token number">2875</span>                           
               <span class="token operator">and</span> oei<span class="token punctuation">.</span>org_category <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">1</span>                
         <span class="token keyword">where</span>
            c<span class="token punctuation">.</span>id <span class="token operator">=</span> cb<span class="token punctuation">.</span>contact_id           
      <span class="token punctuation">)</span>        
   <span class="token keyword">order</span> <span class="token keyword">by</span>
      c<span class="token punctuation">.</span>created_time <span class="token keyword">desc</span>  <span class="token keyword">limit</span> <span class="token number">0</span> <span class="token punctuation">,</span>
      <span class="token number">10</span><span class="token punctuation">;</span>
Empty <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">2</span> min <span class="token number">18.99</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2 min 18.99 sec！比之前的情况还糟糕很多。由于mysql的nested loop机制，遇到这种情况，基本是无法优化的。这条语句最终也只能交给应用系统去优化自己的逻辑了。</p><p><strong>通过这个例子我们可以看到，并不是所有语句都能优化，而往往我们优化时，由于SQL用例回归时落掉一些极端情况，会造成比原来还严重的后果。所以，第一：不要指望所有语句都能通过SQL优化，第二：不要过于自信，只针对具体case来优化，而忽略了更复杂的情况。</strong></p><p>慢查询的案例就分析到这儿，以上只是一些比较典型的案例。我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。</p><h2 id="写在后面的话" tabindex="-1"><a class="header-anchor" href="#写在后面的话" aria-hidden="true">#</a> 写在后面的话</h2><p>本文以一个慢查询案例引入了MySQL索引原理、优化慢查询的一些方法论;并针对遇到的典型案例做了详细的分析。其实做了这么长时间的语句优化后才发现，任何数据库层面的优化都抵不上应用系统的优化，同样是MySQL，可以用来支撑Google/FaceBook/Taobao应用，但可能连你的个人网站都撑不住。套用最近比较流行的话：“查询容易，优化不易，且写且珍惜！”</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ol><li>《高性能MySQL》</li><li>《数据结构与算法分析》</li></ol><h2 id="文章来源" tabindex="-1"><a class="header-anchor" href="#文章来源" aria-hidden="true">#</a> 文章来源</h2>`,112),d=s("p",null,"转载说明",-1),k=s("li",null,"作者：NeverMore",-1),u=s("li",null,"版权声明：本文为美团技术团队的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。",-1),m={href:"https://tech.meituan.com/2014/06/30/mysql-index.html",target:"_blank",rel:"noopener noreferrer"};function v(b,y){const a=p("ExternalLinkIcon");return o(),t("div",null,[i,s("blockquote",null,[d,s("ul",null,[k,u,s("li",null,[n("原文链接："),s("a",m,[n("https://tech.meituan.com/2014/06/30/mysql-index.html"),c(a)])])])])])}const h=e(r,[["render",v],["__file","sql-mysql-index-improve-mt.html.vue"]]);export{h as default};
