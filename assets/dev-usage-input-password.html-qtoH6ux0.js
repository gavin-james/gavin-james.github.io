import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c as r,a,b as e,d as s,f as l}from"./app-IRwI16JE.js";const c={},u=a("h1",{id:"input-password防止自动填充",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#input-password防止自动填充","aria-hidden":"true"},"#"),e(" Input Password防止自动填充")],-1),i=a("blockquote",null,[a("p",null,"在项目中常需要修改或者填写密码，假设浏览器已经记住密码，常会通过autocomplete=off设置防止自动填充type=password的字段。但是大多数情况这样设置是无效的。")],-1),d=a("h2",{id:"防止password-自动填充",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#防止password-自动填充","aria-hidden":"true"},"#"),e(" 防止Password 自动填充")],-1),h=a("p",null,"autocomplete的含义，官网参考如下:",-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values",target:"_blank",rel:"noopener noreferrer"},f=l(`<p>在autocomplete的文档中说明了value为off时，浏览器禁止给当前字段自动的输入或者选中一个值，但下方Note言明: 在大多数现代浏览器中，off 值不能阻止浏览器的密码管理工具自动填充.</p><h3 id="方式一-动态设置密码-input-标签-type" tabindex="-1"><a class="header-anchor" href="#方式一-动态设置密码-input-标签-type" aria-hidden="true">#</a> 方式一 : 动态设置密码 input 标签 type</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样设置 可以保证用户在点击密码框之前，避免浏览器识别为登录表单、自动填充。</p><p>浏览器是如何判断当前表单需要 autocomplete，浏览器自动保存表单是当前 form 存在 type 为 password 的input、且该 input 为表单中的第二个 input 输入框。</p><p>所以，这里给 password 设置初始 type 为 text，在用户 点击 input 聚焦后 设置 type 为 password ，避免浏览器在 页面 onload 之后判断登录表单进行回填。这样可以解决大部分场景下对于避免回填的需要。然而我们的业务需要 依据跳转链接中的 param 给用户填充 密码，这就导致了在用户 主动 focus 之前，密码会被明文展示，聚焦后又会隐藏，操作体验不佳；</p><h3 id="方式二-page-onload-后-js-控制-input-type" tabindex="-1"><a class="header-anchor" href="#方式二-page-onload-后-js-控制-input-type" aria-hidden="true">#</a> 方式二 : page.onload 后 js 控制 input type</h3><p>方法同上，问题点在于 页面load 后手动设置 input type 为 password，而后根据 page url 参数 填充表单。</p><p>但存在问题是 浏览器填充的时机无法控制，导致业务填充表单被自动填充覆盖；方案pass；</p><h3 id="方式三-new-password" tabindex="-1"><a class="header-anchor" href="#方式三-new-password" aria-hidden="true">#</a> 方式三: new-password</h3><p>autocomplete 除了 on、off 之外，还有很多参数: name、email、username、new-password、current-password、street-address 等等；</p><p>当 input type 为 password 但 autocomplete 为 new-password， 即可解决浏览器自动填充问题，浏览器将当前输入框识别为新密码，便不会自阿东填充值。(PS: 有例子提到，设置 autocomplete 为一个 任意字符串 ，也能达到相同效果，大家可以试一下)</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,13),_={href:"https://segmentfault.com/a/1190000016679094",target:"_blank",rel:"noopener noreferrer"},k={href:"https://segmentfault.com/q/1010000006090445?_ea=1009491",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.tuicool.com/articles/zMRrAzu",target:"_blank",rel:"noopener noreferrer"};function g(b,v){const t=o("ExternalLinkIcon");return p(),r("div",null,[u,i,d,h,a("p",null,[a("a",m,[e("https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values"),s(t)])]),f,a("ul",null,[a("li",null,[a("a",_,[e("https://segmentfault.com/a/1190000016679094"),s(t)])]),a("li",null,[a("a",k,[e("https://segmentfault.com/q/1010000006090445?_ea=1009491"),s(t)])]),a("li",null,[a("a",w,[e("https://www.tuicool.com/articles/zMRrAzu"),s(t)])])])])}const q=n(c,[["render",g],["__file","dev-usage-input-password.html.vue"]]);export{q as default};
