const e=JSON.parse('{"key":"v-0ff14b76","path":"/develop/dev-agile/dev-th-agile-xp.html","title":"敏捷开发 - 面向工程管理：极限编程（XP)","lang":"zh-CN","frontmatter":{"date":"2019-06-05T00:00:00.000Z","category":["开发流程"],"tag":["开发流程"],"description":"敏捷开发 - 面向工程管理：极限编程（XP) 极限编程（ExtremeProgramming，简称XP）是由KentBeck在1996年提出的，是一种软件工程方法学，是敏捷软件开发中可能是最富有成效的几种方法学之一。XP是一种近螺旋式的开发方法，它将复杂的开发过程分解为一个个相对比较简单的小周期；通过积极的交流、反馈以及其它一系列的方法，开发人员和客户可以非常清楚开发进度、变化、待解决的问题和潜在的困难等，并根据实际情况及时地调整开发过程。极限编程透过引入基本价值、原则、实践方法等概念来达到降低变更成本的目的。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/dev-agile/dev-th-agile-xp.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"敏捷开发 - 面向工程管理：极限编程（XP)"}],["meta",{"property":"og:description","content":"敏捷开发 - 面向工程管理：极限编程（XP) 极限编程（ExtremeProgramming，简称XP）是由KentBeck在1996年提出的，是一种软件工程方法学，是敏捷软件开发中可能是最富有成效的几种方法学之一。XP是一种近螺旋式的开发方法，它将复杂的开发过程分解为一个个相对比较简单的小周期；通过积极的交流、反馈以及其它一系列的方法，开发人员和客户可以非常清楚开发进度、变化、待解决的问题和潜在的困难等，并根据实际情况及时地调整开发过程。极限编程透过引入基本价值、原则、实践方法等概念来达到降低变更成本的目的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"开发流程"}],["meta",{"property":"article:published_time","content":"2019-06-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"敏捷开发 - 面向工程管理：极限编程（XP)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"什么是极限编程？","slug":"什么是极限编程","link":"#什么是极限编程","children":[]},{"level":2,"title":"极限编程的目标","slug":"极限编程的目标","link":"#极限编程的目标","children":[{"level":3,"title":"极限编程的价值观","slug":"极限编程的价值观","link":"#极限编程的价值观","children":[]},{"level":3,"title":"极限编程的原则","slug":"极限编程的原则","link":"#极限编程的原则","children":[]},{"level":3,"title":"极限编程的实践","slug":"极限编程的实践","link":"#极限编程的实践","children":[]}]},{"level":2,"title":"极限编程的开发过程","slug":"极限编程的开发过程","link":"#极限编程的开发过程","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1690160698000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":14.43,"words":4329},"filePathRelative":"develop/dev-agile/dev-th-agile-xp.md","localizedDate":"2019年6月5日","excerpt":"<h1> 敏捷开发 - 面向工程管理：极限编程（XP)</h1>\\n<blockquote>\\n<p>极限编程（ExtremeProgramming，简称XP）是由KentBeck在1996年提出的，是一种软件工程方法学，是敏捷软件开发中可能是最富有成效的几种方法学之一。XP是一种近螺旋式的开发方法，它将复杂的开发过程分解为一个个相对比较简单的小周期；通过积极的交流、反馈以及其它一系列的方法，开发人员和客户可以非常清楚开发进度、变化、待解决的问题和潜在的困难等，并根据实际情况及时地调整开发过程。极限编程透过引入<strong>基本价值、原则、实践方法</strong>等概念来达到降低变更成本的目的。</p>\\n</blockquote>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
