import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as s,b as n,d as t,f as p}from"./app-5g2Grfu7.js";const l={},u=p('<h1 id="排序-选择排序-selection-sort" tabindex="-1"><a class="header-anchor" href="#排序-选择排序-selection-sort" aria-hidden="true">#</a> 排序 - 选择排序(Selection sort)</h1><blockquote><p>选择排序(Selection sort)是一种简单直观的排序算法。</p></blockquote><h2 id="选择排序介绍" tabindex="-1"><a class="header-anchor" href="#选择排序介绍" aria-hidden="true">#</a> 选择排序介绍</h2><p>它的基本思想是: 首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h2 id="选择排序实现" tabindex="-1"><a class="header-anchor" href="#选择排序实现" aria-hidden="true">#</a> 选择排序实现</h2><p>下面以数列{20,40,30,10,60,50}为例，演示它的选择排序过程(如下图)。</p><figure><img src="https://www.pdai.tech/images/alg/alg-sort-select-1.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>排序流程</p><ul><li>第1趟: i=0。找出a[1...5]中的最小值a[3]=10，然后将a[0]和a[3]互换。 数列变化: 20,40,30,10,60,50 -- &gt; 10,40,30,20,60,50</li><li>第2趟: i=1。找出a[2...5]中的最小值a[3]=20，然后将a[1]和a[3]互换。 数列变化: 10,40,30,20,60,50 -- &gt; 10,20,30,40,60,50</li><li>第3趟: i=2。找出a[3...5]中的最小值，由于该最小值大于a[2]，该趟不做任何处理。</li><li>第4趟: i=3。找出a[4...5]中的最小值，由于该最小值大于a[3]，该趟不做任何处理。</li><li>第5趟: i=4。交换a[4]和a[5]的数据。 数列变化: 10,20,30,40,60,50 -- &gt; 10,20,30,40,50,60</li></ul><h2 id="选择排序的时间复杂度和稳定性" tabindex="-1"><a class="header-anchor" href="#选择排序的时间复杂度和稳定性" aria-hidden="true">#</a> 选择排序的时间复杂度和稳定性</h2><h3 id="选择排序时间复杂度" tabindex="-1"><a class="header-anchor" href="#选择排序时间复杂度" aria-hidden="true">#</a> 选择排序时间复杂度</h3><p>选择排序的时间复杂度是O(N2)。</p><p>假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢? N-1！因此，选择排序的时间复杂度是O(N2)。</p><h3 id="选择排序稳定性" tabindex="-1"><a class="header-anchor" href="#选择排序稳定性" aria-hidden="true">#</a> 选择排序稳定性</h3>',14),r=s("strong",null,"有一些争议",-1),k={href:"https://www.zhihu.com/question/20926405",target:"_blank",rel:"noopener noreferrer"},d=p(`<ul><li><strong>回顾：什么是排序算法的稳定性</strong>？</li></ul><p>假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。</p><ul><li><strong>数组实现和链表实现的差异</strong></li></ul><p>用数组实现的选择排序是不稳定的，用链表实现的选择排序是稳定的。</p><p>不过，一般提到排序算法时，大家往往会默认是数组实现，所以选择排序是不稳定的。</p><ul><li><strong>此外，排序算法的稳定性也是可以改变的，只是需要额外的时间和空间</strong></li></ul><p>有很多办法可以将任意排序算法变成稳定的，但是，往往需要额外的时间或者空间；而我们<strong>默认情况谈算法的稳定性是不考虑这种实现的</strong>。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 选择排序: Java
 *
 * <span class="token keyword">@author</span> skywang
 * <span class="token keyword">@date</span> 2014/03/11
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">{</span>

    <span class="token comment">/*
     * 选择排序
     *
     * 参数说明: 
     *     a -- 待排序的数组
     *     n -- 数组的长度
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token comment">// 有序区的末尾位置</span>
        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token comment">// 无序区的起始位置</span>
        <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token comment">// 无序区中最小元素位置</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            min<span class="token operator">=</span>i<span class="token punctuation">;</span>

            <span class="token comment">// 找出&quot;a[i+1] ... a[n]&quot;之间的最小元素，并赋值给min。</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    min<span class="token operator">=</span>j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 若min!=i，则交换 a[i] 和 a[min]。</span>
            <span class="token comment">// 交换之后，保证了a[0] ... a[i] 之间的元素是有序的。</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;before sort:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">selectSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;after  sort:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2><p>提示</p>`,11),m={href:"https://www.cnblogs.com/skywang12345/p/3597641.html",target:"_blank",rel:"noopener noreferrer"};function v(b,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("blockquote",null,[s("p",null,[n("选择排序的稳定性是"),r,n("的，不过一般提到排序算法，往往默认是数组实现，所以通常认为选择排序是不稳定的。知乎上有个"),s("a",k,[n("讨论在新窗口打开"),t(a)]),n("可以看下。")])]),d,s("p",null,[n("本文主要参考至 "),s("a",m,[n("https://www.cnblogs.com/skywang12345/p/3597641.html"),t(a)]),n(", 在此基础上做了内容的增改。")])])}const w=e(l,[["render",v],["__file","alg-sort-x-select.html.vue"]]);export{w as default};
