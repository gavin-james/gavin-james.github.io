const t=JSON.parse('{"key":"v-2138fc8a","path":"/develop/algorithms-structures/alg-domain/alg-domain-char-match-kmp.html","title":"字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt）","lang":"zh-CN","frontmatter":{"date":"2019-07-23T00:00:00.000Z","category":["算法和数据结构"],"tag":["领域算法"],"description":"字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt） Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一。 算法简介 如下算法解释主要来源于这里，但是通常很难阅读完全，我推荐你直接进入下一节 图例解释部分。 我们来观察一下朴素的字符串匹配算法的操作过程。如下图（a）中所描述，在模式 P = ababaca 和文本 T 的匹配过程中，模板的一个特定位移 s，q = 5 个字符已经匹配成功，但模式 P 的第 6 个字符不能与相应的文本字符匹配。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-domain/alg-domain-char-match-kmp.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt）"}],["meta",{"property":"og:description","content":"字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt） Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一。 算法简介 如下算法解释主要来源于这里，但是通常很难阅读完全，我推荐你直接进入下一节 图例解释部分。 我们来观察一下朴素的字符串匹配算法的操作过程。如下图（a）中所描述，在模式 P = ababaca 和文本 T 的匹配过程中，模板的一个特定位移 s，q = 5 个字符已经匹配成功，但模式 P 的第 6 个字符不能与相应的文本字符匹配。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"领域算法"}],["meta",{"property":"article:published_time","content":"2019-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"算法简介","slug":"算法简介","link":"#算法简介","children":[]},{"level":2,"title":"算法图例","slug":"算法图例","link":"#算法图例","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":8.93,"words":2679},"filePathRelative":"develop/algorithms-structures/alg-domain/alg-domain-char-match-kmp.md","localizedDate":"2019年7月23日","excerpt":"<h1> 字符串匹配 - 模式预处理：KMP 算法（Knuth-Morris-Pratt）</h1>\\n<blockquote>\\n<p>Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一。</p>\\n</blockquote>\\n<h2> 算法简介</h2>\\n<blockquote>\\n<p>如下算法解释主要来源于这里，但是通常很难阅读完全，我推荐你直接进入下一节 <strong>图例解释部分</strong>。</p>\\n</blockquote>\\n<p>我们来观察一下朴素的字符串匹配算法的操作过程。如下图（a）中所描述，在模式 P = ababaca 和文本 T 的匹配过程中，模板的一个特定位移 s，q = 5 个字符已经匹配成功，但模式 P 的第 6 个字符不能与相应的文本字符匹配。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
