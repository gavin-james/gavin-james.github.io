const a=JSON.parse('{"key":"v-23c3b54a","path":"/java/javaup/java8-type.html","title":"Java 8 - 类型推断优化","lang":"zh-CN","frontmatter":{"date":"2022-04-07T00:00:00.000Z","category":["Java 新特性"],"tag":["Java 新特性"],"description":"Java 8 - 类型推断优化 理解Java 8 类型推断需理解几个问题: 什么是泛型 Java7对泛型推断做了哪些优化 Java8对此有做了哪些优化 简单理解泛型 泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。 理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/javaup/java8-type.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Java 8 - 类型推断优化"}],["meta",{"property":"og:description","content":"Java 8 - 类型推断优化 理解Java 8 类型推断需理解几个问题: 什么是泛型 Java7对泛型推断做了哪些优化 Java8对此有做了哪些优化 简单理解泛型 泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。 理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 新特性"}],["meta",{"property":"article:published_time","content":"2022-04-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 - 类型推断优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"简单理解泛型","slug":"简单理解泛型","link":"#简单理解泛型","children":[]},{"level":2,"title":"泛型的尴尬","slug":"泛型的尴尬","link":"#泛型的尴尬","children":[]},{"level":2,"title":"java7的泛型类型推断改进","slug":"java7的泛型类型推断改进","link":"#java7的泛型类型推断改进","children":[]},{"level":2,"title":"Java8的泛型类型推断改进","slug":"java8的泛型类型推断改进","link":"#java8的泛型类型推断改进","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":3.72,"words":1116},"filePathRelative":"java/javaup/java8-type.md","localizedDate":"2022年4月7日","excerpt":"<h1> Java 8 - 类型推断优化</h1>\\n<blockquote>\\n<p>理解Java 8 类型推断需理解几个问题:</p>\\n<ul>\\n<li>什么是泛型</li>\\n<li>Java7对泛型推断做了哪些优化</li>\\n<li>Java8对此有做了哪些优化</li>\\n</ul>\\n</blockquote>\\n<h2> 简单理解泛型</h2>\\n<p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。</p>\\n<p>理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{a as data};
