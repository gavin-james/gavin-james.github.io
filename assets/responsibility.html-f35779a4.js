const e=JSON.parse('{"key":"v-d8e95536","path":"/develop/design/responsibility.html","title":"行为型职责链模式","lang":"zh-CN","frontmatter":{"title":"行为型职责链模式","date":"2019-11-22T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"职责链模式基本介绍 在现实生活中，一个事件需要经过多个对象处理是很常见的场景。例如，采购审批流程、请假流程等。公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据需要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这无疑增加了难度。 在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2 的拦截器、JSP 和 Servlet 的 Filter 等，所有这些都可以考虑使用职责链模式来实现。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/design/responsibility.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"行为型职责链模式"}],["meta",{"property":"og:description","content":"职责链模式基本介绍 在现实生活中，一个事件需要经过多个对象处理是很常见的场景。例如，采购审批流程、请假流程等。公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据需要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这无疑增加了难度。 在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2 的拦截器、JSP 和 Servlet 的 Filter 等，所有这些都可以考虑使用职责链模式来实现。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-28T01:56:10.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-28T01:56:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"行为型职责链模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-28T01:56:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"职责链模式基本介绍","slug":"职责链模式基本介绍","link":"#职责链模式基本介绍","children":[]},{"level":2,"title":"职责链模式的结构与实现","slug":"职责链模式的结构与实现","link":"#职责链模式的结构与实现","children":[]},{"level":2,"title":"学校 OA 系统的采购审批项目","slug":"学校-oa-系统的采购审批项目","link":"#学校-oa-系统的采购审批项目","children":[]},{"level":2,"title":"职责链模式解决采购审批项目","slug":"职责链模式解决采购审批项目","link":"#职责链模式解决采购审批项目","children":[]},{"level":2,"title":"职责链模式的注意事项和细节","slug":"职责链模式的注意事项和细节","link":"#职责链模式的注意事项和细节","children":[]},{"level":2,"title":"职责链模式的应用场景","slug":"职责链模式的应用场景","link":"#职责链模式的应用场景","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1687917370000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":8.26,"words":2478},"filePathRelative":"develop/design/responsibility.md","localizedDate":"2019年11月22日","excerpt":"<h2> 职责链模式基本介绍</h2>\\n<p>在现实生活中，一个事件需要经过多个对象处理是很常见的场景。例如，采购审批流程、请假流程等。公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据需要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这无疑增加了难度。</p>\\n<p>在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2 的拦截器、JSP 和 Servlet 的 Filter 等，所有这些都可以考虑使用职责链模式来实现。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
