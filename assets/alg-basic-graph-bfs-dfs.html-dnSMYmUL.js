const e=JSON.parse('{"key":"v-25cc54b8","path":"/develop/algorithms-structures/alg-basic/alg-basic-graph-bfs-dfs.html","title":"图 - 遍历(BFS & DFS)","lang":"zh-CN","frontmatter":{"date":"2019-06-25T00:00:00.000Z","category":["算法和数据结构"],"tag":["数据结构"],"description":"图 - 遍历(BFS &amp; DFS) 图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似; 广度优先搜索算法(Breadth First Search)，又称为\\"宽度优先搜索\\"或\\"横向优先搜索\\"。 深度优先搜索 深度优先搜索介绍 它的思想: 假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-basic/alg-basic-graph-bfs-dfs.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"图 - 遍历(BFS & DFS)"}],["meta",{"property":"og:description","content":"图 - 遍历(BFS &amp; DFS) 图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似; 广度优先搜索算法(Breadth First Search)，又称为\\"宽度优先搜索\\"或\\"横向优先搜索\\"。 深度优先搜索 深度优先搜索介绍 它的思想: 假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2019-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图 - 遍历(BFS & DFS)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"深度优先搜索","slug":"深度优先搜索","link":"#深度优先搜索","children":[{"level":3,"title":"深度优先搜索介绍","slug":"深度优先搜索介绍","link":"#深度优先搜索介绍","children":[]},{"level":3,"title":"深度优先搜索图解","slug":"深度优先搜索图解","link":"#深度优先搜索图解","children":[]},{"level":3,"title":"有向图的深度优先搜索","slug":"有向图的深度优先搜索","link":"#有向图的深度优先搜索","children":[]}]},{"level":2,"title":"广度优先搜索","slug":"广度优先搜索","link":"#广度优先搜索","children":[{"level":3,"title":"广度优先搜索介绍","slug":"广度优先搜索介绍","link":"#广度优先搜索介绍","children":[]},{"level":3,"title":"广度优先搜索图解","slug":"广度优先搜索图解","link":"#广度优先搜索图解","children":[]}]},{"level":2,"title":"相关实现","slug":"相关实现","link":"#相关实现","children":[{"level":3,"title":"邻接矩阵实现无向图","slug":"邻接矩阵实现无向图","link":"#邻接矩阵实现无向图","children":[]},{"level":3,"title":"邻接表实现的无向图","slug":"邻接表实现的无向图","link":"#邻接表实现的无向图","children":[]},{"level":3,"title":"邻接矩阵实现的有向图","slug":"邻接矩阵实现的有向图","link":"#邻接矩阵实现的有向图","children":[]},{"level":3,"title":"邻接表实现的有向图","slug":"邻接表实现的有向图","link":"#邻接表实现的有向图","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":17.98,"words":5395},"filePathRelative":"develop/algorithms-structures/alg-basic/alg-basic-graph-bfs-dfs.md","localizedDate":"2019年6月25日","excerpt":"<h1> 图 - 遍历(BFS &amp; DFS)</h1>\\n<blockquote>\\n<p>图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似; 广度优先搜索算法(Breadth First Search)，又称为\\"宽度优先搜索\\"或\\"横向优先搜索\\"。</p>\\n</blockquote>\\n<h2> 深度优先搜索</h2>\\n<h3> 深度优先搜索介绍</h3>\\n<p>它的思想: 假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
