const e=JSON.parse('{"key":"v-2ba59b36","path":"/java/io/java-io-nio.html","title":"Java NIO - 基础详解","lang":"zh-CN","frontmatter":{"date":"2022-03-27T00:00:00.000Z","category":["Java IO/NIO/AIO"],"tag":["Java IO/NIO/AIO"],"description":"Java NIO - 基础详解 新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 Standard IO是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。 流与块 I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/io/java-io-nio.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Java NIO - 基础详解"}],["meta",{"property":"og:description","content":"Java NIO - 基础详解 新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 Standard IO是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。 流与块 I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T08:34:19.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java IO/NIO/AIO"}],["meta",{"property":"article:published_time","content":"2022-03-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T08:34:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java NIO - 基础详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T08:34:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"流与块","slug":"流与块","link":"#流与块","children":[]},{"level":2,"title":"通道与缓冲区","slug":"通道与缓冲区","link":"#通道与缓冲区","children":[{"level":3,"title":"1. 通道","slug":"_1-通道","link":"#_1-通道","children":[]},{"level":3,"title":"2. 缓冲区","slug":"_2-缓冲区","link":"#_2-缓冲区","children":[]}]},{"level":2,"title":"缓冲区状态变量","slug":"缓冲区状态变量","link":"#缓冲区状态变量","children":[]},{"level":2,"title":"文件 NIO 实例","slug":"文件-nio-实例","link":"#文件-nio-实例","children":[]},{"level":2,"title":"选择器","slug":"选择器","link":"#选择器","children":[{"level":3,"title":"1. 创建选择器","slug":"_1-创建选择器","link":"#_1-创建选择器","children":[]},{"level":3,"title":"2. 将通道注册到选择器上","slug":"_2-将通道注册到选择器上","link":"#_2-将通道注册到选择器上","children":[]},{"level":3,"title":"3. 监听事件","slug":"_3-监听事件","link":"#_3-监听事件","children":[]},{"level":3,"title":"4. 获取到达的事件","slug":"_4-获取到达的事件","link":"#_4-获取到达的事件","children":[]},{"level":3,"title":"5. 事件循环","slug":"_5-事件循环","link":"#_5-事件循环","children":[]}]},{"level":2,"title":"套接字 NIO 实例","slug":"套接字-nio-实例","link":"#套接字-nio-实例","children":[]},{"level":2,"title":"内存映射文件","slug":"内存映射文件","link":"#内存映射文件","children":[]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703579659000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":3}]},"readingTime":{"minutes":8.08,"words":2423},"filePathRelative":"java/io/java-io-nio.md","localizedDate":"2022年3月27日","excerpt":"<h1> Java NIO - 基础详解</h1>\\n<blockquote>\\n<p>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>\\n</blockquote>\\n<p>Standard IO是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。</p>\\n<h2> 流与块</h2>\\n<p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
