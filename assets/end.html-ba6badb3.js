const t=JSON.parse('{"key":"v-2014e344","path":"/develop/design/end.html","title":"设计模式总结","lang":"zh-CN","frontmatter":{"title":"设计模式总结","date":"2019-11-25T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"总结 23 种设计模式表格总结： 创建型设计模式 简单来说就是用来创建对象的 设计模式 分类 简述 一句话归纳 目的 生活案例 工厂模式（Factory Pattern） 不同条件下创建不同实例 工厂生产物品 产品标准化，生产更高效 封装创建细节 实体工厂 单例模式（Singleton Pattern） 保证一个类仅有一个实例，并且提供一个全局访问点 世上只有一个我 保证独一无二 CEO 原型模式（Prototype Pattern） 通过拷贝原型创建新的对象 拔一根猴毛，吹出千万个 高效创建对象 克隆 建造者模式（Builder Pattern） 用来创建复杂的复合对象 高配中配和低配，想选哪配就哪配 开放个性配置步骤 选配","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/design/end.html"}],["meta",{"property":"og:site_name","content":"Gavin blog"}],["meta",{"property":"og:title","content":"设计模式总结"}],["meta",{"property":"og:description","content":"总结 23 种设计模式表格总结： 创建型设计模式 简单来说就是用来创建对象的 设计模式 分类 简述 一句话归纳 目的 生活案例 工厂模式（Factory Pattern） 不同条件下创建不同实例 工厂生产物品 产品标准化，生产更高效 封装创建细节 实体工厂 单例模式（Singleton Pattern） 保证一个类仅有一个实例，并且提供一个全局访问点 世上只有一个我 保证独一无二 CEO 原型模式（Prototype Pattern） 通过拷贝原型创建新的对象 拔一根猴毛，吹出千万个 高效创建对象 克隆 建造者模式（Builder Pattern） 用来创建复杂的复合对象 高配中配和低配，想选哪配就哪配 开放个性配置步骤 选配"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-12T04:14:48.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-11-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-12T04:14:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-11-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-12T04:14:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"创建型设计模式","slug":"创建型设计模式","link":"#创建型设计模式","children":[]},{"level":3,"title":"结构型设计模式","slug":"结构型设计模式","link":"#结构型设计模式","children":[]},{"level":3,"title":"行为型设计模式","slug":"行为型设计模式","link":"#行为型设计模式","children":[]}]}],"git":{"createdTime":1681272888000,"updatedTime":1681272888000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":4.5,"words":1350},"filePathRelative":"develop/design/end.md","localizedDate":"2019年11月25日","excerpt":"<h2> 总结</h2>\\n<p>23 种设计模式表格总结：</p>\\n<h3> 创建型设计模式</h3>\\n<p>简单来说就是用来创建对象的</p>\\n<table>\\n<thead>\\n<tr>\\n<th>设计模式</th>\\n<th>分类</th>\\n<th>简述</th>\\n<th>一句话归纳</th>\\n<th>目的</th>\\n<th>生活案例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>工厂模式（Factory Pattern）</td>\\n<td>不同条件下创建不同实例</td>\\n<td>工厂生产物品</td>\\n<td>产品标准化，生产更高效</td>\\n<td>封装创建细节</td>\\n<td>实体工厂</td>\\n</tr>\\n<tr>\\n<td>单例模式（Singleton Pattern）</td>\\n<td>保证一个类仅有一个实例，并且提供一个全局访问点</td>\\n<td>世上只有一个我</td>\\n<td>保证独一无二</td>\\n<td>CEO</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>原型模式（Prototype Pattern）</td>\\n<td>通过拷贝原型创建新的对象</td>\\n<td>拔一根猴毛，吹出千万个</td>\\n<td>高效创建对象</td>\\n<td>克隆</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>建造者模式（Builder Pattern）</td>\\n<td>用来创建复杂的复合对象</td>\\n<td>高配中配和低配，想选哪配就哪配</td>\\n<td>开放个性配置步骤</td>\\n<td>选配</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
