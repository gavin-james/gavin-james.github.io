const e=JSON.parse(`{"key":"v-2ca438ac","path":"/develop/algorithms-structures/alg-core/alg-core-backtracking.html","title":"算法思想 - 回溯算法","lang":"zh-CN","frontmatter":{"date":"2019-07-16T00:00:00.000Z","category":["算法和数据结构"],"tag":["算法思想"],"description":"算法思想 - 回溯算法 Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法 Backtracking 普通 DFS 主要用在 可达性问题 ，这种问题只需要执行到特点的位置然后返回即可。 而 Backtracking 主要用于求解 排列组合 问题，例如有 { 'a','b','c' } 三个字符，求解所有由这三个字符排列得到的字符串，这种问题在执行到特定的位置返回之后还会继续执行求解过程。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-core/alg-core-backtracking.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"算法思想 - 回溯算法"}],["meta",{"property":"og:description","content":"算法思想 - 回溯算法 Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法 Backtracking 普通 DFS 主要用在 可达性问题 ，这种问题只需要执行到特点的位置然后返回即可。 而 Backtracking 主要用于求解 排列组合 问题，例如有 { 'a','b','c' } 三个字符，求解所有由这三个字符排列得到的字符串，这种问题在执行到特定的位置返回之后还会继续执行求解过程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"算法思想"}],["meta",{"property":"article:published_time","content":"2019-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法思想 - 回溯算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"Backtracking","slug":"backtracking","link":"#backtracking","children":[{"level":3,"title":"数字键盘组合","slug":"数字键盘组合","link":"#数字键盘组合","children":[]},{"level":3,"title":"IP 地址划分","slug":"ip-地址划分","link":"#ip-地址划分","children":[]},{"level":3,"title":"在矩阵中寻找字符串","slug":"在矩阵中寻找字符串","link":"#在矩阵中寻找字符串","children":[]},{"level":3,"title":"输出二叉树中所有从根到叶子的路径","slug":"输出二叉树中所有从根到叶子的路径","link":"#输出二叉树中所有从根到叶子的路径","children":[]},{"level":3,"title":"排列","slug":"排列","link":"#排列","children":[]},{"level":3,"title":"含有相同元素求排列","slug":"含有相同元素求排列","link":"#含有相同元素求排列","children":[]},{"level":3,"title":"组合","slug":"组合","link":"#组合","children":[]},{"level":3,"title":"组合求和","slug":"组合求和","link":"#组合求和","children":[]},{"level":3,"title":"含有相同元素的求组合求和","slug":"含有相同元素的求组合求和","link":"#含有相同元素的求组合求和","children":[]},{"level":3,"title":"1-9 数字的组合求和","slug":"_1-9-数字的组合求和","link":"#_1-9-数字的组合求和","children":[]},{"level":3,"title":"子集","slug":"子集","link":"#子集","children":[]},{"level":3,"title":"含有相同元素求子集","slug":"含有相同元素求子集","link":"#含有相同元素求子集","children":[]},{"level":3,"title":"分割字符串使得每个部分都是回文数","slug":"分割字符串使得每个部分都是回文数","link":"#分割字符串使得每个部分都是回文数","children":[]},{"level":3,"title":"数独","slug":"数独","link":"#数独","children":[]},{"level":3,"title":"N 皇后","slug":"n-皇后","link":"#n-皇后","children":[]}]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":9.84,"words":2953},"filePathRelative":"develop/algorithms-structures/alg-core/alg-core-backtracking.md","localizedDate":"2019年7月16日","excerpt":"<h1> 算法思想 - 回溯算法</h1>\\n<blockquote>\\n<p>Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</p>\\n</blockquote>\\n<h2> Backtracking</h2>\\n<ul>\\n<li>普通 DFS 主要用在 <strong>可达性问题</strong> ，这种问题只需要执行到特点的位置然后返回即可。</li>\\n<li>而 Backtracking 主要用于求解 <strong>排列组合</strong> 问题，例如有 { 'a','b','c' } 三个字符，求解所有由这三个字符排列得到的字符串，这种问题在执行到特定的位置返回之后还会继续执行求解过程。</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}`);export{e as data};
