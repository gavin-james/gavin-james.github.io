const t=JSON.parse('{"key":"v-ae687ece","path":"/develop/algorithms-structures/alg-sort/alg-sort-x-radix.html","title":"排序 - 基数排序(Radix Sort)","lang":"zh-CN","frontmatter":{"date":"2019-07-09T00:00:00.000Z","category":["算法和数据结构"],"tag":["排序算法"],"description":"排序 - 基数排序(Radix Sort) 基数排序(Radix Sort)是桶排序的扩展. 基数排序介绍 它的基本思想是: 将整数按位数切割成不同的数字，然后按每个位数分别比较。 具体做法是: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。 基数排序实现 通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}，它的示意图如下:","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-sort/alg-sort-x-radix.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"排序 - 基数排序(Radix Sort)"}],["meta",{"property":"og:description","content":"排序 - 基数排序(Radix Sort) 基数排序(Radix Sort)是桶排序的扩展. 基数排序介绍 它的基本思想是: 将整数按位数切割成不同的数字，然后按每个位数分别比较。 具体做法是: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。 基数排序实现 通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}，它的示意图如下:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"排序算法"}],["meta",{"property":"article:published_time","content":"2019-07-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序 - 基数排序(Radix Sort)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"基数排序介绍","slug":"基数排序介绍","link":"#基数排序介绍","children":[]},{"level":2,"title":"基数排序实现","slug":"基数排序实现","link":"#基数排序实现","children":[]},{"level":2,"title":"基数排序复杂度和稳定性","slug":"基数排序复杂度和稳定性","link":"#基数排序复杂度和稳定性","children":[{"level":3,"title":"基数排序复杂度","slug":"基数排序复杂度","link":"#基数排序复杂度","children":[]},{"level":3,"title":"基数排序稳定性","slug":"基数排序稳定性","link":"#基数排序稳定性","children":[]}]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":3.17,"words":950},"filePathRelative":"develop/algorithms-structures/alg-sort/alg-sort-x-radix.md","localizedDate":"2019年7月9日","excerpt":"<h1> 排序 - 基数排序(Radix Sort)</h1>\\n<blockquote>\\n<p>基数排序(Radix Sort)是桶排序的扩展.</p>\\n</blockquote>\\n<h2> 基数排序介绍</h2>\\n<p>它的基本思想是: 将整数按位数切割成不同的数字，然后按每个位数分别比较。 具体做法是: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>\\n<h2> 基数排序实现</h2>\\n<p>通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}，它的示意图如下:</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
