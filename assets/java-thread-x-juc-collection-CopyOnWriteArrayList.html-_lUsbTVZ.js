const t=JSON.parse('{"key":"v-616b765e","path":"/java/thread/java-thread-x-juc-collection-CopyOnWriteArrayList.html","title":"JUC集合: CopyOnWriteArrayList详解","lang":"zh-CN","frontmatter":{"date":"2022-03-06T00:00:00.000Z","category":["Java 多线程"],"tag":["Java 多线程"],"description":"JUC集合: CopyOnWriteArrayList详解 CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。 带着BAT大厂的面试问题去理解 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。 请先说说非并发集合中Fail-fast机制? 再为什么说ArrayList查询快而增删慢? 对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝 再说下弱一致性的迭代器原理是怎么样的? COWIterator&lt;E&gt; CopyOnWriteArrayList为什么并发安全且性能比Vector好? CopyOnWriteArrayList有何缺陷，说说其应用场景?","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/thread/java-thread-x-juc-collection-CopyOnWriteArrayList.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"JUC集合: CopyOnWriteArrayList详解"}],["meta",{"property":"og:description","content":"JUC集合: CopyOnWriteArrayList详解 CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。 带着BAT大厂的面试问题去理解 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。 请先说说非并发集合中Fail-fast机制? 再为什么说ArrayList查询快而增删慢? 对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝 再说下弱一致性的迭代器原理是怎么样的? COWIterator&lt;E&gt; CopyOnWriteArrayList为什么并发安全且性能比Vector好? CopyOnWriteArrayList有何缺陷，说说其应用场景?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 多线程"}],["meta",{"property":"article:published_time","content":"2022-03-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC集合: CopyOnWriteArrayList详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"CopyOnWriteArrayList源码分析","slug":"copyonwritearraylist源码分析","link":"#copyonwritearraylist源码分析","children":[{"level":3,"title":"类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"类的内部类","slug":"类的内部类","link":"#类的内部类","children":[]},{"level":3,"title":"类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"类的构造函数","slug":"类的构造函数","link":"#类的构造函数","children":[]},{"level":3,"title":"核心函数分析","slug":"核心函数分析","link":"#核心函数分析","children":[]}]},{"level":2,"title":"CopyOnWriteArrayList示例","slug":"copyonwritearraylist示例","link":"#copyonwritearraylist示例","children":[]},{"level":2,"title":"更深入理解","slug":"更深入理解","link":"#更深入理解","children":[{"level":3,"title":"CopyOnWriteArrayList的缺陷和使用场景","slug":"copyonwritearraylist的缺陷和使用场景","link":"#copyonwritearraylist的缺陷和使用场景","children":[]},{"level":3,"title":"CopyOnWriteArrayList为什么并发安全且性能比Vector好?","slug":"copyonwritearraylist为什么并发安全且性能比vector好","link":"#copyonwritearraylist为什么并发安全且性能比vector好","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":10.86,"words":3259},"filePathRelative":"java/thread/java-thread-x-juc-collection-CopyOnWriteArrayList.md","localizedDate":"2022年3月6日","excerpt":"<h1> JUC集合: CopyOnWriteArrayList详解</h1>\\n<blockquote>\\n<p>CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。</p>\\n</blockquote>\\n<h2> 带着BAT大厂的面试问题去理解</h2>\\n<blockquote>\\n<p>提示</p>\\n<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。</p>\\n</blockquote>\\n<ul>\\n<li>请先说说非并发集合中Fail-fast机制?</li>\\n<li>再为什么说ArrayList查询快而增删慢?</li>\\n<li>对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝</li>\\n<li>再说下弱一致性的迭代器原理是怎么样的? <code>COWIterator&lt;E&gt;</code></li>\\n<li>CopyOnWriteArrayList为什么并发安全且性能比Vector好?</li>\\n<li>CopyOnWriteArrayList有何缺陷，说说其应用场景?</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
