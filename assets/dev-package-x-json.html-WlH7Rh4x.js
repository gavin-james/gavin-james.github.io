import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,a as n,b as s,d as t,f as e}from"./app-5g2Grfu7.js";const i={},u=e(`<h1 id="json库详解" tabindex="-1"><a class="header-anchor" href="#json库详解" aria-hidden="true">#</a> JSON库详解</h1><blockquote><p>JSON应用非常广泛，对于Java常用的JSON库要完全掌握; 其中考虑到FastJson代码质量，漏洞，坑等等，应该尽量避免使用。</p></blockquote><h2 id="json简介" tabindex="-1"><a class="header-anchor" href="#json简介" aria-hidden="true">#</a> JSON简介</h2><h3 id="json是什么" tabindex="-1"><a class="header-anchor" href="#json是什么" aria-hidden="true">#</a> JSON是什么</h3><ul><li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li><li>JSON 是轻量级的文本数据交换格式</li><li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li><li>JSON 具有自我描述性，更易理解</li></ul><h3 id="结构与类型" tabindex="-1"><a class="header-anchor" href="#结构与类型" aria-hidden="true">#</a> 结构与类型</h3><ul><li>只有两种结构：对象内的键值对集合结构和数组，对象用{}表示、内部是”key”:”value”，数组用[]表示，不同值用逗号分开</li><li>基本数值有7个： false / null / true / object / array / number / string</li><li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li></ul><p>一个简单实例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;Image&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token property">&quot;Width&quot;</span><span class="token operator">:</span>  <span class="token number">800</span><span class="token punctuation">,</span>
       <span class="token property">&quot;Height&quot;</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
       <span class="token property">&quot;Title&quot;</span><span class="token operator">:</span>  <span class="token string">&quot;View from 15th Floor&quot;</span><span class="token punctuation">,</span>
       <span class="token property">&quot;Thumbnail&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
           <span class="token property">&quot;Url&quot;</span><span class="token operator">:</span>    <span class="token string">&quot;http://www.example.com/image/481989943&quot;</span><span class="token punctuation">,</span>
           <span class="token property">&quot;Height&quot;</span><span class="token operator">:</span> <span class="token number">125</span><span class="token punctuation">,</span>
           <span class="token property">&quot;Width&quot;</span><span class="token operator">:</span>  <span class="token string">&quot;100&quot;</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token property">&quot;IDs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">943</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">38793</span><span class="token punctuation">]</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json优秀资源" tabindex="-1"><a class="header-anchor" href="#json优秀资源" aria-hidden="true">#</a> JSON优秀资源</h3>`,10),r={href:"https://github.com/burningtree/awesome-json",target:"_blank",rel:"noopener noreferrer"},k=n("h3",{id:"json在线解析工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json在线解析工具","aria-hidden":"true"},"#"),s(" JSON在线解析工具")],-1),d={href:"http://c.runoob.com/front-end/53",target:"_blank",rel:"noopener noreferrer"},v=e('<figure><img src="https://www.pdai.tech/images/develop/package/dev-package-json-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="json类库" tabindex="-1"><a class="header-anchor" href="#json类库" aria-hidden="true">#</a> JSON类库</h2><p>Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。</p><p>下面是几个常用的 JSON 解析类库：</p><ul><li>FastJson: 阿里巴巴开发的 JSON 库，性能优秀。</li><li>Jackson: 社区十分活跃且更新速度很快。</li><li>Gson: 谷歌开发的 JSON 库，功能十分全面。</li></ul><h3 id="性能测试对比" tabindex="-1"><a class="header-anchor" href="#性能测试对比" aria-hidden="true">#</a> 性能测试对比</h3><p>从下面的测试结果可以看出，序列化次数比较小的时候，Gson性能最好，当不断增加的时候到了100000，Gson明细弱于Jackson和FastJson， 这时候FastJson性能是真的牛，另外还可以看到不管数量少还是多，Jackson一直表现优异。而那个Json-lib可以直接忽略。</p><ul><li>JSON序列化性能</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/dev-package-json-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>JSON反序列化性能</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/dev-package-json-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',11),m={href:"https://www.xncoding.com/2018/01/09/java/jsons.html",target:"_blank",rel:"noopener noreferrer"},b=e('<h2 id="fastjson" tabindex="-1"><a class="header-anchor" href="#fastjson" aria-hidden="true">#</a> FastJson</h2><p>先泼一盆冷水，个人非常不推荐使用FastJson, 为什么？</p><ul><li>FastJson 源码质量较低</li><li>FastJson Bug、漏洞较多</li><li>FastJson 牺牲多数场景下的稳定性而提高的效率</li></ul><h3 id="fastjson-简介" tabindex="-1"><a class="header-anchor" href="#fastjson-简介" aria-hidden="true">#</a> Fastjson 简介</h3><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>',6),g={href:"https://github.com/alibaba/fastjson",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/alibaba/fastjson/wiki/Quick-Start-CN",target:"_blank",rel:"noopener noreferrer"},f=e('<h3 id="fastjson-特性" tabindex="-1"><a class="header-anchor" href="#fastjson-特性" aria-hidden="true">#</a> Fastjson 特性</h3><ul><li>提供服务器端、安卓客户端两种解析工具，性能表现较好。</li><li>提供了 toJSONString() 和 parseObject() 方法来将 Java 对象与 JSON 相互转换。调用toJSONString方 法即可将对象转换成 JSON 字符串，parseObject 方法则反过来将 JSON 字符串转换成对象。</li><li>允许转换预先存在的无法修改的对象（只有class、无源代码）。</li><li>Java泛型的广泛支持。</li><li>允许对象的自定义表示、允许自定义序列化类。</li><li>支持任意复杂对象（具有深厚的继承层次和广泛使用的泛型类型）。</li></ul><h3 id="下载和使用" tabindex="-1"><a class="header-anchor" href="#下载和使用" aria-hidden="true">#</a> 下载和使用</h3>',3),j={href:"http://repo1.maven.org/maven2/com/alibaba/fastjson/",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>配置 maven 依赖:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 x.x.x 是版本号，根据需要使用特定版本，建议使用最新版本。</p><h3 id="序列化一个对象成json字符串" tabindex="-1"><a class="header-anchor" href="#序列化一个对象成json字符串" aria-hidden="true">#</a> 序列化一个对象成JSON字符串</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;校长&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;123456789.0123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 {&quot;age&quot;:3,&quot;name&quot;:&quot;校长&quot;,&quot;old&quot;:false,&quot;salary&quot;:123456789.0123}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反序列化一个json字符串成java对象" tabindex="-1"><a class="header-anchor" href="#反序列化一个json字符串成java对象" aria-hidden="true">#</a> 反序列化一个JSON字符串成Java对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;age\\&quot;:3,\\&quot;birthdate\\&quot;:1496738822842,\\&quot;name\\&quot;:\\&quot;校长\\&quot;,\\&quot;old\\&quot;:true,\\&quot;salary\\&quot;:123456789.0123}&quot;</span><span class="token punctuation">;</span>
 <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString <span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 输出 校长</span>

<span class="token class-name">String</span> jsonStringArray <span class="token operator">=</span> <span class="token string">&quot;[{\\&quot;age\\&quot;:3,\\&quot;birthdate\\&quot;:1496738822842,\\&quot;name\\&quot;:\\&quot;校长\\&quot;,\\&quot;old\\&quot;:true,\\&quot;salary\\&quot;:123456789.0123}]&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>jsonStringArray<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对于日期的处理" tabindex="-1"><a class="header-anchor" href="#对于日期的处理" aria-hidden="true">#</a> 对于日期的处理</h3><p>默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-dd’T’HH:mm:ss”格式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">JSON</span><span class="token punctuation">.</span>defaultTimeZone <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">;</span>
        
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format <span class="token operator">=</span> <span class="token string">&quot;MMM dd, yyyy h:mm:ss aa&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format <span class="token operator">=</span> <span class="token string">&quot;MMM-dd-yyyy h:mm:ss aa&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bean和数组转换" tabindex="-1"><a class="header-anchor" href="#bean和数组转换" aria-hidden="true">#</a> Bean和数组转换</h3>`,11),w={href:"https://github.com/alibaba/fastjson/wiki/BeanToArray_cn",target:"_blank",rel:"noopener noreferrer"},q=e(`<h3 id="设置字段名" tabindex="-1"><a class="header-anchor" href="#设置字段名" aria-hidden="true">#</a> 设置字段名</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置是否不序列化某字段" tabindex="-1"><a class="header-anchor" href="#设置是否不序列化某字段" aria-hidden="true">#</a> 设置是否不序列化某字段</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>deserialize<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置字段顺序" tabindex="-1"><a class="header-anchor" href="#设置字段顺序" aria-hidden="true">#</a> 设置字段顺序</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">VO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> f0<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> f1<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> f2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#自定义序列化和反序列化" aria-hidden="true">#</a> 自定义序列化和反序列化</h3>`,7),J={href:"https://blog.csdn.net/u010246789/article/details/52539576",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"fastjson漏洞问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fastjson漏洞问题","aria-hidden":"true"},"#"),s(" FastJson漏洞问题")],-1),x=n("blockquote",null,[n("p",null,"尽量使用最新版本。")],-1),O={href:"http://blog.nsfocus.net/analysis-protection-fastjson-remote-code-execution-vulnerability/",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,"好了，我要开喷了。",-1),I=n("p",null,"警告",-1),G=n("p",null,"远离FastJson这个库，老程序员都知道这里有多少坑:",-1),M={href:"https://github.com/alibaba/fastjson/issues",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.zhihu.com/question/44199956/answer/112224034",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"jackson",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jackson","aria-hidden":"true"},"#"),s(" JackSon")],-1),A=n("h3",{id:"jackson简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jackson简介","aria-hidden":"true"},"#"),s(" JackSon简介")],-1),B={href:"https://github.com/FasterXML/jackson",target:"_blank",rel:"noopener noreferrer"},D={href:"http://wiki.fasterxml.com/JacksonHome",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/FasterXML/jackson-docs",target:"_blank",rel:"noopener noreferrer"},P=e(`<h3 id="jackson组件" tabindex="-1"><a class="header-anchor" href="#jackson组件" aria-hidden="true">#</a> Jackson组件</h3><h4 id="_3个核心模块" tabindex="-1"><a class="header-anchor" href="#_3个核心模块" aria-hidden="true">#</a> 3个核心模块：</h4><ul><li><strong>Streaming</strong>: jackson-core jar，定义了底层的streaming API和实现了Json特性。</li><li><strong>Annotations</strong>: jackson-annotations jar，包含了标准的Jackson注解。本文暂不介绍。</li><li><strong>Databind</strong>: jackson-databind jar，实现了数据绑定和对象序列化，它依赖于streaming和annotations的包。</li></ul><h4 id="第三方数据类型模块" tabindex="-1"><a class="header-anchor" href="#第三方数据类型模块" aria-hidden="true">#</a> 第三方数据类型模块</h4><p>这些扩展是插件式的Jackson模块，用ObjectMapper.registerModule()注册，并且通过添加serializers和deserializers以便Databind包（ObjectMapper / ObjectReader / ObjectWriter）可以读写这些类型，来增加对各种常用的Java库的数据类型的支持。</p><h4 id="数据格式模块" tabindex="-1"><a class="header-anchor" href="#数据格式模块" aria-hidden="true">#</a> 数据格式模块</h4><p>Jackson也有处理程序对JAX-RS标准实现者例如Jersey, RESTeasy, CXF等提供了数据格式支持。处理程序实现了MessageBodyReader和MessageBodyWriter，目前支持的数据格式包括JSON, Smile, XML, YAML和CBOR。</p><p>数据格式提供了除了Json之外的数据格式支持，它们绝大部分仅仅实现了streaming API abstractions，以便数据绑定组件可以按照原来的方式使用。另一些（几乎不需要）提供了databind标准功能来处理例如schemas。</p><h3 id="jackson的使用" tabindex="-1"><a class="header-anchor" href="#jackson的使用" aria-hidden="true">#</a> Jackson的使用</h3><p>引用maven jar包：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">/</span>jackson<span class="token operator">-</span>core <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jackson<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.10</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">/</span>jackson<span class="token operator">-</span>databind <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jackson<span class="token operator">-</span>databind<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.10</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">/</span>jackson<span class="token operator">-</span>annotations <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jackson<span class="token operator">-</span>annotations<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.10</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化一个对象成json字符串-1" tabindex="-1"><a class="header-anchor" href="#序列化一个对象成json字符串-1" aria-hidden="true">#</a> 序列化一个对象成JSON字符串</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>

    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">City</span> case1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    case1<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;SZ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    case1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> jsonStr <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>case1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JSON:&quot;</span> <span class="token operator">+</span> jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出：JSON:{&quot;city&quot;:&quot;SZ&quot;,&quot;age&quot;:123}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反序列化一个json字符串成java对象-1" tabindex="-1"><a class="header-anchor" href="#反序列化一个json字符串成java对象-1" aria-hidden="true">#</a> 反序列化一个JSON字符串成Java对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonParseException</span><span class="token punctuation">,</span> <span class="token class-name">JsonMappingException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> inputjsonstr <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;city\\&quot;:\\&quot;SZ\\&quot;,\\&quot;age\\&quot;:123}&quot;</span><span class="token punctuation">;</span>
    
    <span class="token class-name">City</span> readcase <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>inputjsonstr<span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;city info:&quot;</span> <span class="token operator">+</span> readcase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果里面有未知属性，比如json中有<code>desc</code>字段，但是City中没有相应字段，会报错, 需要设置如下：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h3><ul><li><code>@JsonProperty(&quot;xxx&quot;)</code>: 将当前的属性名在json字符串中重新命名为当前设置的这个值，比如在示例中，将age--&gt;mAge</li><li><code>@JsonIgnore</code>: 将被标注的属性在生成json字符串的时候，直接忽略</li><li><code>@JsonInclude</code>: 是一个类级别的设置，JsonInclude.Include.NON_EMPTY标识只有非NULL的值才会被纳入json string之中，其余的都被忽略，比如这里的location属性，并没有出现在最终的结果字符串中。</li><li><code>@JsonSerialize</code>: 使用自定义的类来实现自定义的字段转换。写入操作。</li><li><code>@JsonDeserialize</code>: 解析的时候，自定义的转换器；读取操作。</li><li><code>@JsonAutoDetect</code>: 设置类的访问策略，是否所有的属性都可以，还是按照一定的方式来提取。</li><li><code>@JsonRawValue</code>: 无转换的将属性值写入到json 字符串中。 写入操作</li><li><code>@JsonValue</code>: 标注方法，用以替代缺省的方法，由该方法来完成json的字符输出。</li></ul><h2 id="gson" tabindex="-1"><a class="header-anchor" href="#gson" aria-hidden="true">#</a> GSON</h2><h3 id="gson简介" tabindex="-1"><a class="header-anchor" href="#gson简介" aria-hidden="true">#</a> Gson简介</h3><p>Gson是这样一个Java类库，它可以将Java对象转换为相应的JSON形式，也可以将JSON字符串转换为对应的Java对象。 Gson可以使用任意Java对象，包括哪些预先存在的、不在你的源代码中的对象（因此，你并不知道对象的属性）。</p>`,22),z={href:"https://www.jianshu.com/p/1e20b28c39d1",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="gson的目标" tabindex="-1"><a class="header-anchor" href="#gson的目标" aria-hidden="true">#</a> Gson的目标</h3><ul><li>提供一种机制，使得将Java对象转换为JSON或相反如使用toString()以及构造器（工厂方法）一样简单。</li><li>允许预先存在的不可变的对象转换为JSON或与之相反。</li><li>允许自定义对象的表现形式</li><li>支持任意复杂的对象</li><li>输出轻量易读的JSON</li></ul><h3 id="gson的使用" tabindex="-1"><a class="header-anchor" href="#gson的使用" aria-hidden="true">#</a> Gson的使用</h3><p>使用Gson的首要类是Gson类，你可以仅仅通过new Gson()的方式创建它。你也可以通过GsonBuilder类去创建Gson实例，这个类允许你进行一系列配置，例如版本控制等等。</p><p>Gson实例不会保存任何进行Json操作时的状态。因此，你可以自由的服用相同的Gson对象进行诸多的Json序列化和反序列化操作。</p><p>引用maven jar包：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>28.2-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 基础类型</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">==</span><span class="token operator">&gt;</span> prints <span class="token number">1</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">==</span><span class="token operator">&gt;</span> prints <span class="token string">&quot;abcd&quot;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">&gt;</span> prints <span class="token number">10</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">==</span><span class="token operator">&gt;</span> prints <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment">// 对象</span>
<span class="token class-name">BagOfPrimitives</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BagOfPrimitives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token operator">==</span><span class="token operator">&gt;</span> json is <span class="token punctuation">{</span><span class="token string">&quot;value1&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;value2&quot;</span><span class="token operator">:</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">}</span>

<span class="token comment">// 数组</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ghi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">==</span><span class="token operator">&gt;</span> prints <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">==</span><span class="token operator">&gt;</span> prints <span class="token punctuation">[</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ghi&quot;</span><span class="token punctuation">]</span>

<span class="token comment">// 集合</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">&gt;</span> json is <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的对象代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">BagOfPrimitives</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> value2 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> value3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token class-name">BagOfPrimitives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// no-args constructor</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 基础类型</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> one <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> one <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> one <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> <span class="token boolean">false</span> <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;abc\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> anotherStr <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;[\\&quot;abc\\&quot;]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对象</span>
<span class="token class-name">BagOfPrimitives</span> obj2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">BagOfPrimitives</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token operator">==</span><span class="token operator">&gt;</span> obj2 is just like obj

<span class="token comment">// 数组</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">&quot;[1,2,3,4,5]&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">==</span><span class="token operator">&gt;</span> ints2 will be same as ints

<span class="token comment">// 集合</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Type</span> collectionType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ints2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> collectionType<span class="token punctuation">)</span><span class="token punctuation">;</span>
ints2 is same as ints
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义序列化和反序列化机制" tabindex="-1"><a class="header-anchor" href="#自定义序列化和反序列化机制" aria-hidden="true">#</a> 自定义序列化和反序列化机制</h3><p>有时候，默认的实现并不是你想要的。这在处理类库时常常发生（例如DateTime）。Gson允许你注册自己自定义的序列化器和反序列化器。该过程分为两部分：</p><ul><li>Json序列化器：需要为一个对象自定义序列化机制。</li><li>Json反序列化器：需要为一个类型自定义反序列化机制。</li></ul><p>实例构造者：并不需要，如果无参构造器是可用的或者注册了一个反序列化器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GsonBuilder</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">MyType2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyTypeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">MyType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MySerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">MyType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">MyType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyInstanceCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>registerTypeAdapter会检查类型适配器是否实现了上面三个接口中的一个以上并且它们都注册了类型适配器。</p>`,19),E={href:"https://www.jianshu.com/p/1e20b28c39d1",target:"_blank",rel:"noopener noreferrer"},U=n("h2",{id:"参考文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),s(" 参考文章")],-1),V={href:"https://github.com/FasterXML/jackson",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.runoob.com/w3cnote/fastjson-intro.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://blog.csdn.net/m0_37076574/article/details/81317403",target:"_blank",rel:"noopener noreferrer"},X={href:"https://blog.csdn.net/blueheart20/article/details/52212221",target:"_blank",rel:"noopener noreferrer"},W={href:"https://blog.csdn.net/gjb724332682/article/details/51586701",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://www.jianshu.com/p/1e20b28c39d1",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://www.jianshu.com/p/923a9fe78108",target:"_blank",rel:"noopener noreferrer"};function K(Q,$){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("awesome-json在新窗口打开"),t(a)])])]),k,n("ul",null,[n("li",null,[n("a",d,[s("JSON 在线解析在新窗口打开"),t(a)])])]),v,n("p",null,[s("更多请参考： "),n("a",m,[s("Java几种常用JSON库性能比较在新窗口打开"),t(a)])]),b,n("ul",null,[n("li",null,[n("a",g,[s("Fastjson Github在新窗口打开"),t(a)]),s(" 看这里")]),n("li",null,[n("a",h,[s("Fastjson 中文 Wiki在新窗口打开"),t(a)])])]),f,n("p",null,[s("你可以在 maven 中央仓库中直接下载："),n("a",j,[s("http://repo1.maven.org/maven2/com/alibaba/fastjson/在新窗口打开"),t(a)])]),y,n("ul",null,[n("li",null,[n("a",w,[s("官方例子 - BeanToArray_cn在新窗口打开"),t(a)])])]),q,n("ul",null,[n("li",null,[n("a",J,[s("fastjson SerializerFeature详解在新窗口打开"),t(a)])]),n("li",null,[n("a",_,[s("ObjectDeserializer_cn在新窗口打开"),t(a)])])]),S,x,n("ul",null,[n("li",null,[n("a",O,[s("fastjson远程代码执行漏洞技术分析与防护方案在新窗口打开"),t(a)])])]),N,I,G,n("ul",null,[n("li",null,[n("a",M,[s("alibaba/fastjson在新窗口打开"),t(a)])]),n("li",null,[n("a",F,[s("fastjson这么快老外为啥还是热衷 jackson?在新窗口打开"),t(a)])])]),T,A,n("ul",null,[n("li",null,[n("a",B,[s("Jackson Github在新窗口打开"),t(a)]),s(" 看这里")]),n("li",null,[n("a",D,[s("Jackson Wiki在新窗口打开"),t(a)])]),n("li",null,[n("a",L,[s("Jackson 文档在新窗口打开"),t(a)])])]),P,n("ul",null,[n("li",null,[n("a",z,[s("Gson用户指南（中文翻译）在新窗口打开"),t(a)]),s("看这里")])]),C,n("p",null,[s("更多请参考："),n("a",E,[s("Gson用户指南（中文翻译）在新窗口打开"),t(a)])]),U,n("ul",null,[n("li",null,[n("a",V,[s("https://github.com/FasterXML/jackson"),t(a)])]),n("li",null,[n("a",H,[s("https://www.runoob.com/w3cnote/fastjson-intro.html"),t(a)])]),n("li",null,[n("a",R,[s("https://blog.csdn.net/m0_37076574/article/details/81317403"),t(a)])]),n("li",null,[n("a",X,[s("https://blog.csdn.net/blueheart20/article/details/52212221"),t(a)])]),n("li",null,[n("a",W,[s("https://blog.csdn.net/gjb724332682/article/details/51586701"),t(a)])]),n("li",null,[n("a",Z,[s("https://www.jianshu.com/p/1e20b28c39d1"),t(a)])]),n("li",null,[n("a",Y,[s("https://www.jianshu.com/p/923a9fe78108"),t(a)])])])])}const an=p(i,[["render",K],["__file","dev-package-x-json.html.vue"]]);export{an as default};
