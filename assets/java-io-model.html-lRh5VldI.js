const e=JSON.parse('{"key":"v-47bd7701","path":"/java/io/java-io-model.html","title":"IO 模型 - Unix IO 模型","lang":"zh-CN","frontmatter":{"date":"2022-03-25T00:00:00.000Z","category":["Java IO/NIO/AIO"],"tag":["Java IO/NIO/AIO"],"description":"IO 模型 - Unix IO 模型 本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。 Unix IO 模型简介 一个输入操作通常包括两个阶段: 等待数据准备好 从内核向进程复制数据 对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/io/java-io-model.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"IO 模型 - Unix IO 模型"}],["meta",{"property":"og:description","content":"IO 模型 - Unix IO 模型 本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。 Unix IO 模型简介 一个输入操作通常包括两个阶段: 等待数据准备好 从内核向进程复制数据 对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java IO/NIO/AIO"}],["meta",{"property":"article:published_time","content":"2022-03-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO 模型 - Unix IO 模型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"Unix IO 模型简介","slug":"unix-io-模型简介","link":"#unix-io-模型简介","children":[{"level":3,"title":"阻塞式 I/O","slug":"阻塞式-i-o","link":"#阻塞式-i-o","children":[]},{"level":3,"title":"非阻塞式 I/O","slug":"非阻塞式-i-o","link":"#非阻塞式-i-o","children":[]},{"level":3,"title":"I/O 复用","slug":"i-o-复用","link":"#i-o-复用","children":[]},{"level":3,"title":"信号驱动 I/O","slug":"信号驱动-i-o","link":"#信号驱动-i-o","children":[]},{"level":3,"title":"异步 I/O","slug":"异步-i-o","link":"#异步-i-o","children":[]}]},{"level":2,"title":"I/O 模型比较","slug":"i-o-模型比较","link":"#i-o-模型比较","children":[{"level":3,"title":"同步 I/O 与异步 I/O","slug":"同步-i-o-与异步-i-o","link":"#同步-i-o-与异步-i-o","children":[]},{"level":3,"title":"五大 I/O 模型比较","slug":"五大-i-o-模型比较","link":"#五大-i-o-模型比较","children":[]}]},{"level":2,"title":"IO多路复用","slug":"io多路复用","link":"#io多路复用","children":[{"level":3,"title":"IO多路复用工作模式","slug":"io多路复用工作模式","link":"#io多路复用工作模式","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":6.24,"words":1872},"filePathRelative":"java/io/java-io-model.md","localizedDate":"2022年3月25日","excerpt":"<h1> IO 模型 - Unix IO 模型</h1>\\n<blockquote>\\n<p>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。</p>\\n</blockquote>\\n<h2> Unix IO 模型简介</h2>\\n<p>一个输入操作通常包括两个阶段:</p>\\n<ul>\\n<li>等待数据准备好</li>\\n<li>从内核向进程复制数据</li>\\n</ul>\\n<p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p>\\n","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
