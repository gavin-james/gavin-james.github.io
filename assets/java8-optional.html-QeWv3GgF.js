const e=JSON.parse('{"key":"v-42fc1938","path":"/java/javaup/java8-optional.html","title":"Java 8 - Optional类深度解析","lang":"zh-CN","frontmatter":{"date":"2022-04-03T00:00:00.000Z","category":["Java 新特性"],"tag":["Java 新特性"],"description":"Java 8 - Optional类深度解析 对Java 8 Optional类进行深度解析。 身为一名Java程序员，大家可能都有这样的经历: 调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。在我的前一篇文章中，介绍了Scala是如何解决了这个问题。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/javaup/java8-optional.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Java 8 - Optional类深度解析"}],["meta",{"property":"og:description","content":"Java 8 - Optional类深度解析 对Java 8 Optional类进行深度解析。 身为一名Java程序员，大家可能都有这样的经历: 调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。在我的前一篇文章中，介绍了Scala是如何解决了这个问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 新特性"}],["meta",{"property":"article:published_time","content":"2022-04-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 - Optional类深度解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"Optional类包含的方法","slug":"optional类包含的方法","link":"#optional类包含的方法","children":[{"level":3,"title":"of","slug":"of","link":"#of","children":[]},{"level":3,"title":"ofNullable","slug":"ofnullable","link":"#ofnullable","children":[]},{"level":3,"title":"isPresent","slug":"ispresent","link":"#ispresent","children":[]},{"level":3,"title":"get","slug":"get","link":"#get","children":[]},{"level":3,"title":"ifPresent","slug":"ifpresent","link":"#ifpresent","children":[]},{"level":3,"title":"orElse","slug":"orelse","link":"#orelse","children":[]},{"level":3,"title":"orElseGet","slug":"orelseget","link":"#orelseget","children":[]},{"level":3,"title":"orElseThrow","slug":"orelsethrow","link":"#orelsethrow","children":[]},{"level":3,"title":"map","slug":"map","link":"#map","children":[]},{"level":3,"title":"flatMap","slug":"flatmap","link":"#flatmap","children":[]},{"level":3,"title":"filter","slug":"filter","link":"#filter","children":[]}]},{"level":2,"title":"一些例子","slug":"一些例子","link":"#一些例子","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":9,"words":2700},"filePathRelative":"java/javaup/java8-optional.md","localizedDate":"2022年4月3日","excerpt":"<h1> Java 8 - Optional类深度解析</h1>\\n<blockquote>\\n<p>对Java 8 Optional类进行深度解析。</p>\\n</blockquote>\\n<blockquote>\\n<p>身为一名Java程序员，大家可能都有这样的经历: 调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。在我的前一篇文章中，介绍了Scala是如何解决了这个问题。</p>\\n</blockquote>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
