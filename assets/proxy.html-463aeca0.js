const e=JSON.parse('{"key":"v-1902a411","path":"/develop/design/proxy.html","title":"结构型代理模式","lang":"zh-CN","frontmatter":{"title":"结构型代理模式","date":"2019-10-30T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"代理模式的基本介绍 在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。例如，购买火车票不一定要去火车站买，可以通过 12306 网站或者去火车票代售点买。又如找女朋友、找保姆、找工作等都可以通过找中介完成。 在软件设计中，使用代理模式的例子也很多，例如，要访问的远程对象比较大（如视频或大图像等），其下载要花很多时间。还有因为安全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等。 代理模式（Proxy Pattern）：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/design/proxy.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"结构型代理模式"}],["meta",{"property":"og:description","content":"代理模式的基本介绍 在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。例如，购买火车票不一定要去火车站买，可以通过 12306 网站或者去火车票代售点买。又如找女朋友、找保姆、找工作等都可以通过找中介完成。 在软件设计中，使用代理模式的例子也很多，例如，要访问的远程对象比较大（如视频或大图像等），其下载要花很多时间。还有因为安全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等。 代理模式（Proxy Pattern）：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-28T01:56:10.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-10-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-28T01:56:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构型代理模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-28T01:56:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"代理模式的基本介绍","slug":"代理模式的基本介绍","link":"#代理模式的基本介绍","children":[]},{"level":2,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[{"level":3,"title":"静态代理基本介绍","slug":"静态代理基本介绍","link":"#静态代理基本介绍","children":[]},{"level":3,"title":"静态代理应用实例","slug":"静态代理应用实例","link":"#静态代理应用实例","children":[]},{"level":3,"title":"静态代理优缺点","slug":"静态代理优缺点","link":"#静态代理优缺点","children":[]}]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[{"level":3,"title":"动态代理基本介绍","slug":"动态代理基本介绍","link":"#动态代理基本介绍","children":[]},{"level":3,"title":"JDK 中生成代理对象的 API","slug":"jdk-中生成代理对象的-api","link":"#jdk-中生成代理对象的-api","children":[]},{"level":3,"title":"动态代理应用实例","slug":"动态代理应用实例","link":"#动态代理应用实例","children":[]}]},{"level":2,"title":"Cglib 代理","slug":"cglib-代理","link":"#cglib-代理","children":[{"level":3,"title":"Cglib 代理基本介绍","slug":"cglib-代理基本介绍","link":"#cglib-代理基本介绍","children":[]},{"level":3,"title":"Cglib 代理模式应用实例","slug":"cglib-代理模式应用实例","link":"#cglib-代理模式应用实例","children":[]}]},{"level":2,"title":"几种常见的代理模式介绍","slug":"几种常见的代理模式介绍","link":"#几种常见的代理模式介绍","children":[]},{"level":2,"title":"代理模式的应用场景","slug":"代理模式的应用场景","link":"#代理模式的应用场景","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1687917370000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":12,"words":3600},"filePathRelative":"develop/design/proxy.md","localizedDate":"2019年10月30日","excerpt":"<h2> 代理模式的基本介绍</h2>\\n<p>在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。例如，购买火车票不一定要去火车站买，可以通过 12306 网站或者去火车票代售点买。又如找女朋友、找保姆、找工作等都可以通过找中介完成。</p>\\n<p>在软件设计中，使用代理模式的例子也很多，例如，要访问的远程对象比较大（如视频或大图像等），其下载要花很多时间。还有因为安全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等。</p>\\n<p><strong>代理模式</strong>（Proxy Pattern）：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
