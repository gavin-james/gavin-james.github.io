import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-_0pkx0EC.js";const t={},p=e(`<h2 id="uml-基本介绍" tabindex="-1"><a class="header-anchor" href="#uml-基本介绍" aria-hidden="true">#</a> UML 基本介绍</h2><p>997 年 UML 被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是 <strong>简单、统一、图形化、能表达软件设计中的动态与静态信息</strong>。</p><p>UML：Unified modeling language UML (统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果。</p><p>UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他 们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等，如右图：</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">classDiagram</span>
Client <span class="token arrow operator">..&gt;</span>  ProxyFactory <span class="token operator">:</span> 依赖
Client <span class="token arrow operator">..&gt;</span>  TeacherDao <span class="token operator">:</span> 依赖
ProxyFactory <span class="token arrow operator">..|&gt;</span> MethodInterceptor <span class="token operator">:</span> 实现
<span class="token keyword">class</span> MethodInterceptor<span class="token punctuation">{</span>
<span class="token annotation important">&lt;&lt;Interface&gt;&gt;</span>
<span class="token punctuation">}</span>
   <span class="token keyword">class</span> TeacherDao<span class="token punctuation">{</span>
        +teach<span class="token punctuation">(</span><span class="token punctuation">)</span> void
    <span class="token punctuation">}</span>
    <span class="token keyword">class</span> ProxyFactory<span class="token punctuation">{</span>
        +roxyFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
        +getProxyInstance<span class="token punctuation">(</span><span class="token punctuation">)</span> Object
        +intercept<span class="token punctuation">(</span><span class="token punctuation">)</span> void
    <span class="token punctuation">}</span>
    <span class="token keyword">class</span> Client<span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>画 UML 图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理，UML 图分类：</p><ul><li>用例图（use case）</li><li>静态结构图：类图、对象图、包图、组件图、部署图</li><li>动态行为图：交互图（时序图与协作图）、状态图、活动图</li></ul><p>说明：类图是描述类与类之间的关系的，是 UML 图中最核心的。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><p>UML 能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。</p><p>UML 具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML 可以对任何具有静态结构和动态行为的系统进行建模，而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段。</p><p>UML 模型大多以图表的方式表现出来，一份典型的建模图表通常包含几个块或框、连接线和作为模型附加信息的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。</p><p>在这里大家可能会疑问，UML 明明是一种图形，为什么说是语言呢？</p><p>语言是包括文字和图形的，有很多内容文字是无法表达的。你见过建筑设计图纸吗？里面还不是很多图形，光用文字能表达清楚建筑设计吗？在建筑界，有一套标准来描述设计，同样道理，在软件开发界，我们也需要一套标准来帮助我们做好软件开发的工作。UML 就是其中的一种标准，注意这可不是唯一标准，只是 UML 是大家比较推崇的一种标准而已。UML 并不是强制性标准，没有规定在软件开发中一定要用 UML，但是我们需要包括 UML 在内的各种标准，来提高我们软件开发的水平。</p><h2 id="基本构件" tabindex="-1"><a class="header-anchor" href="#基本构件" aria-hidden="true">#</a> 基本构件</h2><p>UML 建模的核心是模型，模型是现实的简化、真实系统的抽象。UML 提供了系统的设计蓝图。当给软件系统建模时，需要采用通用的符号语言，这种描述模型所使用的语言被称为建模语言。在 UML 中，所有的描述由事物、关系和图这些构件组成。下图完整地描述了所有构件的关系：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220326235403.png" alt="image-20220326235402075" tabindex="0" loading="lazy"><figcaption>image-20220326235402075</figcaption></figure><h2 id="uml-接口" tabindex="-1"><a class="header-anchor" href="#uml-接口" aria-hidden="true">#</a> UML 接口</h2><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示。</p><p>如下所示是图形类接口的 UML 表示：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220327001039.png" alt="image-20220327001037848" tabindex="0" loading="lazy"><figcaption>image-20220327001037848</figcaption></figure><p>如果在 IDEA，那么是：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220327001013.png" alt="image-20220327001011970" tabindex="0" loading="lazy"><figcaption>image-20220327001011970</figcaption></figure><h2 id="uml-类图" tabindex="-1"><a class="header-anchor" href="#uml-类图" aria-hidden="true">#</a> UML 类图</h2><p>类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。</p><p>类图中的类可以通过某种编程语言直接实现。类图在软件系统开发的整个生命周期都是有效的，它是面向对象系统的建模中最常见的图。如下所示是「计算长方形和圆形的周长与面积」的类图，图形接口有计算面积和周长的抽象方法，长方形和圆形实现这两个方法供访问类调用。</p><p>类图用于描述系统中的类（对象）本身的组成和类（对象）之间的各种静态关系。</p><ul><li>类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合</li></ul><blockquote><p>类图简单举例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对该类右键</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226225440.png" alt="image-20220226225439452" tabindex="0" loading="lazy"><figcaption>image-20220226225439452</figcaption></figure><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226225626.png" alt="image-20220226225625153" tabindex="0" loading="lazy"><figcaption>image-20220226225625153</figcaption></figure><p>如果新建一个类图，快捷键是空格，或者对着空白处右键，点击 <code>Add Class to Diagram...</code>，搜索其他类即可。</p><blockquote><p>类图用 3 个矩形拼接表示，最上面的部分标识类的名称，中间的部分标识类的属性，最下面的部分标识类的方法。</p></blockquote><p>类图中，需注意以下几点：</p><ul><li>抽象类或抽象方法用斜体表示</li><li>如果是接口，则在类名上方加 <code>&lt;&lt;Interface&gt;&gt;</code></li><li>字段和方法返回值的数据类型非必需</li><li>静态类或静态方法加下划线</li></ul><h2 id="类之间的关系" tabindex="-1"><a class="header-anchor" href="#类之间的关系" aria-hidden="true">#</a> 类之间的关系</h2><p>UML 将事物之间的联系归纳为 6 种，并用对应的图形类表示。下面根据类与类之间的耦合度从弱到强排列。UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。</p><h3 id="类图—依赖关系-dependence" tabindex="-1"><a class="header-anchor" href="#类图—依赖关系-dependence" aria-hidden="true">#</a> 类图—依赖关系（Dependence）</h3><p>依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。</p><p>依赖关系使用 <strong>带箭头的虚线</strong> 来表示，箭头从使用类指向被依赖的类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PersonDao</span> personDao<span class="token punctuation">;</span> <span class="token comment">// 类</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">IDCard</span> <span class="token function">getIDCard</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> personid<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Department</span> department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">PersonDao</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">IDCard</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person1</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的类图：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226230457.png" alt="image-20220226230456728" tabindex="0" loading="lazy"><figcaption>image-20220226230456728</figcaption></figure><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>什么时候显示依赖关系：</p><ul><li>类中用到了对方</li><li>如果是类的成员属性</li><li>如果是方法的返回类型</li><li>是方法接收的参数类型</li><li>方法中使用到</li></ul><h3 id="类图—关联关系-association" tabindex="-1"><a class="header-anchor" href="#类图—关联关系-association" aria-hidden="true">#</a> 类图—关联关系（Association）</h3><p>关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。</p><p>关联具有 <strong>导航性</strong>：即双向关系或单向关系。</p><p>关联具有多重性：如 1(表示有且仅有一个），「0...」(表示 0 个或者多个），「0，1」(表示 0 个或者一个）,「n.….」(表示 n 到 m 个都可以)，「m.….*」（表示至少 m 个)。</p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用 <strong>带两个箭头或者没有箭头的实线</strong> 来表示，单向的关联用 <strong>带一个箭头的实线</strong> 来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。</p><blockquote><p>双向一对一关系</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tercher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> stus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tercher</span><span class="token punctuation">&gt;</span></span> teas<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220327001331.png" alt="image-20220327001329079" tabindex="0" loading="lazy"><figcaption>image-20220327001329079</figcaption></figure><h3 id="类图—聚合关系-aggregation" tabindex="-1"><a class="header-anchor" href="#类图—聚合关系-aggregation" aria-hidden="true">#</a> 类图—聚合关系（Aggregation）</h3><p>聚合（Aggregation）关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系，是 <strong>整体和部分的关系</strong>，<strong>整体与部分可以分开</strong>，是 <strong>关联关系的特例</strong>，所以他具有关联的 <strong>导航性与多重性</strong>。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用 <strong>带空心菱形的实线</strong> 来表示，菱形指向整体。如下是大学和教师的代码和关系图：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">University</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Teacher</span> teas<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTeacher</span><span class="token punctuation">(</span><span class="token class-name">Teacher</span> teas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>teas <span class="token operator">=</span> teas<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220327001544.png" alt="image-20220327001543029" tabindex="0" loading="lazy"><figcaption>image-20220327001543029</figcaption></figure><h3 id="类图—组合关系-composition" tabindex="-1"><a class="header-anchor" href="#类图—组合关系-composition" aria-hidden="true">#</a> 类图—组合关系（Composition）</h3><p>组合（Composition）关系也是关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用 <strong>带实心菱形的实线</strong> 来表示，菱形指向整体。</p><p>案例：在程序中我们定义实体：Person（人）与 IDCard（身份证）、Head（头），那么 Head 和 Person 就是组合，IDCard 和 Person 就是聚合。</p><p>但是如果在程序中 Person 实体中定义了对 IDCard 进行级联删除，即删除 Person 时连同 IDCard 一起删除，那 么 IDCard 和 Person 就是组合了。</p><blockquote><p>案例 1</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Head</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Head</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Head</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图，可以看到黑色的箭头是组合关系，白色的箭头是聚合。</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226232426.png" alt="image-20220226232425687" tabindex="0" loading="lazy"><figcaption>image-20220226232425687</figcaption></figure><blockquote><p>案例 2</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Mouse</span> mouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标可以和 Computer 不能分离</span>
    <span class="token keyword">private</span> <span class="token class-name">Moniter</span> moniter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Moniter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示器可以和 Computer 不能分离</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span><span class="token class-name">Mouse</span> mouse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoniter</span><span class="token punctuation">(</span><span class="token class-name">Moniter</span> moniter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>moniter <span class="token operator">=</span> moniter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Moniter</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226232506.png" alt="image-20220226232506081" tabindex="0" loading="lazy"><figcaption>image-20220226232506081</figcaption></figure><p>聚合通过方法参数、构造器、setter 传入对象，是组合的弱引用。</p><p>组合是直接 new 出对象，依赖性强。</p><h3 id="类图—泛化关系-generalization" tabindex="-1"><a class="header-anchor" href="#类图—泛化关系-generalization" aria-hidden="true">#</a> 类图—泛化关系(generalization）</h3><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。</p><p>在 UML 类图中，泛化关系用 <strong>带空心三角箭头的实线</strong> 来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DaoSupport</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Object</span> entity<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Object</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">PersonServiceBean2</span> <span class="token keyword">extends</span> <span class="token class-name">DaoSupport</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类图（蓝色是 IDEA 自带，实际是空心的）：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226231116.png" alt="image-20220226231114471" tabindex="0" loading="lazy"><figcaption>image-20220226231114471</figcaption></figure><h3 id="类图—实现关系-implementation" tabindex="-1"><a class="header-anchor" href="#类图—实现关系-implementation" aria-hidden="true">#</a> 类图—实现关系（Implementation）</h3><p>实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用 <strong>带空心三角箭头的虚线</strong> 来表示，箭头从实现类指向接口。</p><p>实现关系实际上就是 A 类实现 B 接口，他是依赖关系的特例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Interger</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token keyword">implements</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Interger</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图，绿色是 IDEA 自带，实际是空心的虚线：</p><figure><img src="https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/img/design-pattern/20220226231347.png" alt="image-20220226231346103" tabindex="0" loading="lazy"><figcaption>image-20220226231346103</figcaption></figure><h2 id="类与类箭头技巧" tabindex="-1"><a class="header-anchor" href="#类与类箭头技巧" aria-hidden="true">#</a> 类与类箭头技巧</h2><p>画类图时，要使用正确的箭头。类关系记忆技巧总结如下表所示：</p><table><thead><tr><th>分类</th><th>箭头特征</th><th>记忆技巧</th></tr></thead><tbody><tr><td>箭头方向</td><td>从子类指向父类</td><td>定义子类需要通过 extends 关键字指定父类子类一定是知道父类定义的，但父类并不知道子类的定义只有知道对方信息时才能指向对方箭头的方向是从子类指向父类</td></tr><tr><td>继承/实现</td><td>用线条连接两个类； 空心三角箭头表示继承或实现</td><td>实线表示继承，是is-a的关系，表示扩展，不虚，很结实</td></tr><tr><td>虚线表示实现，虚线代表「虚」无实体</td><td></td><td></td></tr><tr><td>关联/依赖</td><td>用线条连接两个类； 普通箭头表示关联或依赖</td><td>虚线表示依赖关系：临时用一下，若即若离，虚无缥缈，若有若无表示一种使用关系，一个类需要借助另一个类来实现功能一般一个类将另一个类作为参数使用，或作为返回值</td></tr><tr><td>实线表示关联关系：关系稳定，实打实的关系，「铁哥们」表示一个类对象和另一个类对象有关联通常一个类中有另一个类对象作为属性</td><td></td><td></td></tr><tr><td>组合/聚合</td><td>用菱形表示：像一个盛东西的器皿（如盘子）</td><td>聚合：空心菱形，代表空器皿里可以放很多相同的东西，聚集在一起（箭头方向所指的类）整体和局部的关系，两者有独立的生命周期，是 has-a 的关系弱关系，消极的词：弱-空</td></tr><tr><td>组合：实心菱形，代表器皿里已经有实体结构的存在，生死与共整体与局部的关系，和聚合关系对比，关系更加强烈，两者具有相同的生命周期，contains-a 的关系强关系，积极的词；强-满</td><td></td><td></td></tr></tbody></table><p>注意：UML 的标准类关系图中，没有实心箭头。有些 Java 编程的 IDE 自带类生成工具可能出现实心箭头，主要目的是降低理解难度。</p>`,95),i=[p];function c(o,l){return s(),a("div",null,i)}const u=n(t,[["render",c],["__file","uml-class-diagram.html.vue"]]);export{u as default};
