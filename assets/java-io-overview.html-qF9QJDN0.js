import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c as o,a as e,b as t,d as a,f as s}from"./app-Hbmz8LxZ.js";const c={},d=s('<h1 id="♥java-io知识体系详解♥" tabindex="-1"><a class="header-anchor" href="#♥java-io知识体系详解♥" aria-hidden="true">#</a> ♥Java IO知识体系详解♥</h1><blockquote><p>本文主要梳理Java IO/NIO/AIO的知识体系。</p></blockquote><h2 id="知识体系" tabindex="-1"><a class="header-anchor" href="#知识体系" aria-hidden="true">#</a> 知识体系</h2><figure><img src="https://www.pdai.tech/images/io/java-io-overview2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a> 相关文章</h2><blockquote><p><strong>A. Java进阶 - IO框架之知识体系</strong>：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。</p></blockquote><ul><li>Java IO/NIO/AIO - Overview <ul><li>本文主要梳理Java IO/NIO/AIO的知识体系</li></ul></li></ul><blockquote><p><strong>B. Java进阶 - IO框架之基础IO</strong>：其次对Java基础IO框架进行梳理，包括其分类，使用和源码详解。</p></blockquote><ul><li>Java IO - 分类(传输，操作) <ul><li>本文主要从<code>传输方式</code>和<code>数据操作</code>两个方面分析Java IO的分类</li></ul></li><li>Java IO - 设计模式(装饰者模式) <ul><li>Java I/O 使用了装饰者模式来实现</li></ul></li><li>Java IO - 源码: InputStream <ul><li>本文主要从JDK源码角度分析InputStream</li></ul></li><li>Java IO - 源码: OutputStream <ul><li>本文主要从JDK源码角度分析 OutputStream</li></ul></li><li>Java IO - 常见类使用 <ul><li>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作</li></ul></li></ul><blockquote><p><strong>C. Java进阶 - IO框架之NIO/AIO等</strong>：然后再对Unix IO模型学习，引入到Java BIO/NIO/AIO相关知识详解。</p></blockquote><ul><li>IO 模型 - Unix IO 模型 <ul><li>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫</li></ul></li><li>Java IO - BIO 详解 <ul><li>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态</li></ul></li><li>Java NIO - 基础详解 <ul><li>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O</li></ul></li><li>Java NIO - IO多路复用详解 <ul><li>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持</li></ul></li><li>Java AIO - 异步IO详解 <ul><li>本文主要对异步IO和Java中对AIO的支持详解。</li></ul></li></ul><blockquote><p><strong>D. Java进阶 - IO框架之开源框架</strong>：最后再对常用的开源框架进行分析和详解。</p></blockquote><ul><li><a href="">Java NIO - 零拷贝实现</a>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。</li><li><a href="">Java N(A)IO - 框架: Netty</a><ul><li>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等</li></ul></li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',14),h={href:"https://blog.csdn.net/panweiwei1994/article/details/78046000",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/anxpp/article/details/51503329",target:"_blank",rel:"noopener noreferrer"},p={href:"https://blog.csdn.net/anxpp/article/details/51512200",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.csdn.net/KingCat666/article/details/77689627",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"Java IO",-1),g={href:"https://blog.csdn.net/yinwenjie/article/list/6",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/yinwenjie/article/details/48274255",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/yinwenjie/article/details/48344989",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/yinwenjie/article/details/48472237",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/yinwenjie/article/details/48522403",target:"_blank",rel:"noopener noreferrer"},J={href:"https://blog.csdn.net/yinwenjie/article/details/48784375",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"Netty",-1),w={href:"https://blog.csdn.net/yinwenjie/article/details/48829419",target:"_blank",rel:"noopener noreferrer"},N={href:"https://blog.csdn.net/yinwenjie/article/details/48969853",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/woaixiaopangniu521/article/details/70279143",target:"_blank",rel:"noopener noreferrer"};function x(j,m){const l=i("ExternalLinkIcon");return r(),o("div",null,[d,e("ul",null,[e("li",null,[t("Java 基础IO源码 "),e("a",h,[t("https://blog.csdn.net/panweiwei1994/article/details/78046000"),a(l)])]),e("li",null,[t("Linux 网络 I/O 模型简介(图文)"),e("a",u,[t("https://blog.csdn.net/anxpp/article/details/51503329"),a(l)])]),e("li",null,[t("Java 网络IO编程总结(BIO、NIO、AIO均含完整实例代码) "),e("a",p,[t("https://blog.csdn.net/anxpp/article/details/51512200"),a(l)])]),e("li",null,[t("Java 编程思想(八)BIO/NIO/AIO的具体实现 "),e("a",I,[t("https://blog.csdn.net/KingCat666/article/details/77689627"),a(l)])])]),O,e("ul",null,[e("li",null,[t("架构设计: 系统间通信(1)——概述从“聊天”开始上篇 "),e("a",g,[t("https://blog.csdn.net/yinwenjie/article/list/6"),a(l)]),t("?")]),e("li",null,[e("a",_,[t("https://blog.csdn.net/yinwenjie/article/details/48274255"),a(l)])]),e("li",null,[e("a",b,[t("https://blog.csdn.net/yinwenjie/article/details/48344989"),a(l)])]),e("li",null,[e("a",f,[t("https://blog.csdn.net/yinwenjie/article/details/48472237"),a(l)])]),e("li",null,[e("a",v,[t("https://blog.csdn.net/yinwenjie/article/details/48522403"),a(l)])]),e("li",null,[e("a",J,[t("https://blog.csdn.net/yinwenjie/article/details/48784375"),a(l)])])]),k,e("ul",null,[e("li",null,[e("a",w,[t("https://blog.csdn.net/yinwenjie/article/details/48829419"),a(l)])]),e("li",null,[e("a",N,[t("https://blog.csdn.net/yinwenjie/article/details/48969853"),a(l)])]),e("li",null,[e("a",y,[t("https://blog.csdn.net/woaixiaopangniu521/article/details/70279143"),a(l)])])])])}const q=n(c,[["render",x],["__file","java-io-overview.html.vue"]]);export{q as default};
