const e=JSON.parse('{"key":"v-08212d9e","path":"/develop/algorithms-structures/alg-core/alg-core-overview.html","title":"♥算法思想知识体系详解♥","lang":"zh-CN","frontmatter":{"date":"2019-07-10T00:00:00.000Z","category":["算法和数据结构"],"tag":["算法思想"],"description":"♥算法思想知识体系详解♥ 我们通过理解算法背后常用的算法思想，进行归纳总结，并通过leetcode练习来辅助理解和提升. 算法思想详解 相关文章 算法思想 - 分治算法 分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解 算法思想 - 动态规划算法 动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解 算法思想 - 贪心算法 本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的 算法思想 - 二分法 本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 算法思想 - 搜索算法 本文主要介绍算法中搜索算法的思想，主要包含BFS，DFS 算法思想 - 回溯算法 Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-core/alg-core-overview.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"♥算法思想知识体系详解♥"}],["meta",{"property":"og:description","content":"♥算法思想知识体系详解♥ 我们通过理解算法背后常用的算法思想，进行归纳总结，并通过leetcode练习来辅助理解和提升. 算法思想详解 相关文章 算法思想 - 分治算法 分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解 算法思想 - 动态规划算法 动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解 算法思想 - 贪心算法 本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的 算法思想 - 二分法 本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 算法思想 - 搜索算法 本文主要介绍算法中搜索算法的思想，主要包含BFS，DFS 算法思想 - 回溯算法 Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"算法思想"}],["meta",{"property":"article:published_time","content":"2019-07-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"♥算法思想知识体系详解♥\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"算法思想详解","slug":"算法思想详解","link":"#算法思想详解","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"develop/algorithms-structures/alg-core/alg-core-overview.md","localizedDate":"2019年7月10日","excerpt":"<h1> ♥算法思想知识体系详解♥</h1>\\n<blockquote>\\n<p>我们通过理解算法背后常用的算法思想，进行归纳总结，并通过leetcode练习来辅助理解和提升.</p>\\n</blockquote>\\n<h2> 算法思想详解</h2>\\n<p><em>相关文章</em></p>\\n<ul>\\n<li>算法思想 - 分治算法\\n<ul>\\n<li>分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解</li>\\n</ul>\\n</li>\\n<li>算法思想 - 动态规划算法\\n<ul>\\n<li>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解</li>\\n</ul>\\n</li>\\n<li>算法思想 - 贪心算法\\n<ul>\\n<li>本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的</li>\\n</ul>\\n</li>\\n<li>算法思想 - 二分法\\n<ul>\\n<li>本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</li>\\n</ul>\\n</li>\\n<li>算法思想 - 搜索算法\\n<ul>\\n<li>本文主要介绍算法中搜索算法的思想，主要包含BFS，DFS</li>\\n</ul>\\n</li>\\n<li>算法思想 - 回溯算法\\n<ul>\\n<li>Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
