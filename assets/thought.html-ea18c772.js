const e=JSON.parse('{"key":"v-32e615c6","path":"/develop/design/thought.html","title":"设计思想","lang":"zh-CN","frontmatter":{"title":"设计思想","date":"2019-10-02T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"基于接口而非实现编程 这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。 如何解读原则中的「接口」二字 「基于接口而非实现编程」这条原则的英文描述是：「Program to an interface, not an implementation」。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的「接口」语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/design/thought.html"}],["meta",{"property":"og:site_name","content":"Gavin blog"}],["meta",{"property":"og:title","content":"设计思想"}],["meta",{"property":"og:description","content":"基于接口而非实现编程 这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。 如何解读原则中的「接口」二字 「基于接口而非实现编程」这条原则的英文描述是：「Program to an interface, not an implementation」。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的「接口」语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-12T04:14:48.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-10-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-12T04:14:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计思想\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-12T04:14:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"基于接口而非实现编程","slug":"基于接口而非实现编程","link":"#基于接口而非实现编程","children":[{"level":3,"title":"如何解读原则中的「接口」二字","slug":"如何解读原则中的「接口」二字","link":"#如何解读原则中的「接口」二字","children":[]},{"level":3,"title":"如何将这条原则应用到实战中","slug":"如何将这条原则应用到实战中","link":"#如何将这条原则应用到实战中","children":[]},{"level":3,"title":"是否需要为每个类定义接口","slug":"是否需要为每个类定义接口","link":"#是否需要为每个类定义接口","children":[]}]},{"level":2,"title":"多用组合少用继承","slug":"多用组合少用继承","link":"#多用组合少用继承","children":[{"level":3,"title":"为什么不推荐使用继承","slug":"为什么不推荐使用继承","link":"#为什么不推荐使用继承","children":[]},{"level":3,"title":"组合相比继承有哪些优势","slug":"组合相比继承有哪些优势","link":"#组合相比继承有哪些优势","children":[]},{"level":3,"title":"如何判断该用组合还是继承","slug":"如何判断该用组合还是继承","link":"#如何判断该用组合还是继承","children":[]}]},{"level":2,"title":"通过封装、抽象、模块化、中间层等解耦代码","slug":"通过封装、抽象、模块化、中间层等解耦代码","link":"#通过封装、抽象、模块化、中间层等解耦代码","children":[{"level":3,"title":"解耦为何如此重要","slug":"解耦为何如此重要","link":"#解耦为何如此重要","children":[]},{"level":3,"title":"代码是否需要解耦","slug":"代码是否需要解耦","link":"#代码是否需要解耦","children":[]},{"level":3,"title":"如何给代码解耦","slug":"如何给代码解耦","link":"#如何给代码解耦","children":[]}]},{"level":2,"title":"代码复用","slug":"代码复用","link":"#代码复用","children":[]},{"level":2,"title":"扩展性","slug":"扩展性","link":"#扩展性","children":[]}],"git":{"createdTime":1681272888000,"updatedTime":1681272888000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":30.93,"words":9279},"filePathRelative":"develop/design/thought.md","localizedDate":"2019年10月2日","excerpt":"<h2> 基于接口而非实现编程</h2>\\n<p>这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。</p>\\n<h3> 如何解读原则中的「接口」二字</h3>\\n<p>「基于接口而非实现编程」这条原则的英文描述是：「Program to an interface, not an implementation」。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的「接口」语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
