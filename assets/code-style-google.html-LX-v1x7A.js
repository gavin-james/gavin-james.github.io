import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as p,c as i,a,b as n,d as e,e as l,f as t}from"./app-IRwI16JE.js";const d={},r=a("h1",{id:"google-java-编程风格指南",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#google-java-编程风格指南","aria-hidden":"true"},"#"),n(" Google Java 编程风格指南")],-1),u={href:"https://google.github.io/styleguide/javaguide.html",target:"_blank",rel:"noopener noreferrer"},h=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>本文档是 Google Java 语言编程规范的 <strong>完整</strong> 定义。一个 Java 源文件当且仅当遵守本规范时，才可被描述为 Google 风格。</p><p>与其它编程规范指南类似，本文档讨论的不仅涉及代码对齐的美观问题，同时还包含其它类型约定和编码规范。然而，本文档侧重于讨论我们普遍遵循的 <strong>硬性规定</strong>，也避免提供那些无法明确执行的建议。</p><h3 id="术语说明" tabindex="-1"><a class="header-anchor" href="#术语说明" aria-hidden="true">#</a> 术语说明</h3><p>在本文档中，除非另有说明：</p><ol><li><em>class</em> 类 表示 <em>ordinary class</em> 普通的类、<em>enum class</em> 枚举类、<em>interface</em> 接口或 <em>annotation</em> 注解类型。</li><li><em>member</em> 成员 表示 <em>nested class</em> 嵌套类、<em>field</em> 字段、<em>method</em> 方法或 <em>constructor</em> 者构造方法，即除初始化方法和注释之外，类的所有最顶层内容。</li><li><em>comment</em> 注释 表示 <em>implementation comments</em> 实现注释。我们不使用术语 <em>documentation comments</em>，而是使用（在 Java 中）更通用的术语 <em>Javadoc</em>。</li></ol><p>其它出现在本文档中的术语将另作说明。</p><h3 id="指南说明" tabindex="-1"><a class="header-anchor" href="#指南说明" aria-hidden="true">#</a> 指南说明</h3><p>本文档中的示例代是 <strong>不规范</strong> 的。也就是说，虽然示例代码是属于 Google 风格，但并不意味着这是编写优雅代码的唯一方式。示例中代码的风格不应被作为执行的准则。</p><hr><h2 id="源文件准则" tabindex="-1"><a class="header-anchor" href="#源文件准则" aria-hidden="true">#</a> 源文件准则</h2><h3 id="文件名" tabindex="-1"><a class="header-anchor" href="#文件名" aria-hidden="true">#</a> 文件名</h3><p>源文件的名称包含了区分大小写的（并且是 <a href="#%E6%9C%89%E4%B8%94%E4%BB%85%E6%9C%89%E4%B8%80%E4%B8%AA%E9%A1%B6%E7%BA%A7%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E">唯一</a> 的）顶级类的类名和 <code>.java</code> 扩展名组成。</p><h3 id="文件编码-utf-8" tabindex="-1"><a class="header-anchor" href="#文件编码-utf-8" aria-hidden="true">#</a> 文件编码：UTF-8</h3><p>源文件使用 <strong>UTF-8</strong> 编码。</p><h3 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符" aria-hidden="true">#</a> 特殊字符</h3><h4 id="空格字符" tabindex="-1"><a class="header-anchor" href="#空格字符" aria-hidden="true">#</a> 空格字符</h4><p>除了换行符，<strong>ASCII 水平空格字符（0x20）</strong> 是源文件中唯一允许出现的空格字符，这意味着：</p><ol><li>字符串和字符字面量中的所有非空格字符都要进行转义。</li><li>不允许使用制表符缩进。</li></ol><h4 id="特殊转义序列" tabindex="-1"><a class="header-anchor" href="#特殊转义序列" aria-hidden="true">#</a> 特殊转义序列</h4>',20),k={href:"http://docs.oracle.com/javase/tutorial/java/data/characters.html",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"\\b",-1),v=a("code",null,"\\t",-1),b=a("code",null,"\\n",-1),g=a("code",null,"\\f",-1),f=a("code",null,"\\r",-1),E=a("code",null,'\\"',-1),x=a("code",null,"\\'",-1),A=a("code",null,"\\\\",-1),y=a("code",null,"\\012",-1),w=a("code",null,"\\u000a",-1),B=t('<h4 id="非-ascii-字符" tabindex="-1"><a class="header-anchor" href="#非-ascii-字符" aria-hidden="true">#</a> 非 ASCII 字符</h4><p>对剩余的非 ASCII 字符，取决于 <strong>更容易阅读和理解</strong> 的方式，选择 Unicode 字符（例如 <code>∞</code> ）或等价的 Unicode 转义字符（例如 <code>\\u221e</code> ），并且强烈反对在字符串和注释之外使用 Unicode 转义字符。</p><blockquote><p><strong>提示</strong>：在使用 Unicode 转义字符的情况下，或者偶尔使用实际的 Unicode 字符时，添加解释性的注释是非常有帮助的。</p></blockquote><p>例如：</p><table><thead><tr><th>Example</th><th>Discussion</th></tr></thead><tbody><tr><td><code>String unitAbbrev = &quot;μs&quot;;</code></td><td>最好：没有注释也十分清晰</td></tr><tr><td><code>String unitAbbrev = &quot;\\u03bcs&quot;; // &quot;μs&quot;</code></td><td>允许：但没理由这么做</td></tr><tr><td><code>String unitAbbrev = &quot;\\u03bcs&quot;; // Greek letter mu, &quot;s&quot;</code></td><td>允许：但比较笨拙和易出错</td></tr><tr><td><code>String unitAbbrev = &quot;\\u03bcs&quot;;</code></td><td>较差：可读性太差</td></tr><tr><td><code>return &#39;\\ufeff&#39; + content; // byte order mark</code></td><td>很好：转义字符用于非打印字符时，注释是非常有必要的</td></tr></tbody></table><blockquote><p><strong>提示</strong>：不要担心因为一些程序可能不能正确地处理非 ASCII 字符，而使你的代码可读性变差。如果真的发生这种情况，那程序会直接 <strong>报错</strong>，并需要被 <strong>修复</strong>。</p></blockquote><hr><h2 id="源文件结构" tabindex="-1"><a class="header-anchor" href="#源文件结构" aria-hidden="true">#</a> 源文件结构</h2><p>源文件按以下 <strong>顺序</strong> 包括：</p><ol><li>License 或者 Copyright（如果需要的话）</li><li>Package 语句</li><li>Import 语句</li><li>有且只有一个的顶级 Class</li></ol><p>以上每个部分间隔 <strong>一个空行</strong>。</p><h3 id="license-或者-copyright-信息" tabindex="-1"><a class="header-anchor" href="#license-或者-copyright-信息" aria-hidden="true">#</a> License 或者 Copyright 信息</h3><p>如果文件中包含许可证和版权信息，应当至于此处。</p><h3 id="package-语句" tabindex="-1"><a class="header-anchor" href="#package-语句" aria-hidden="true">#</a> Package 语句</h3><p>Package 语句不允许换行。单行字符限制（ <a href="#%E5%88%97%E9%99%90%E5%88%B6100">列限制：100</a> 章节）不适用于 Package 语句。</p><h3 id="import-语句" tabindex="-1"><a class="header-anchor" href="#import-语句" aria-hidden="true">#</a> Import 语句</h3><h4 id="不允许通配符" tabindex="-1"><a class="header-anchor" href="#不允许通配符" aria-hidden="true">#</a> 不允许通配符</h4><p><strong>不允许</strong> 使用静态或者其它形式的 <strong>通配符导入</strong>。</p><h4 id="不允许换行" tabindex="-1"><a class="header-anchor" href="#不允许换行" aria-hidden="true">#</a> 不允许换行</h4><p>Import 语句 <strong>不允许</strong> 换行。单行字符限制（ <a href="#%E5%88%97%E9%99%90%E5%88%B6100">列限制：100</a> 章节）不适用于 Import 语句。</p><h4 id="顺序和间隔" tabindex="-1"><a class="header-anchor" href="#顺序和间隔" aria-hidden="true">#</a> 顺序和间隔</h4><p>Import 语句应按以下方式排序：</p><ol><li>所有静态导入归一组。</li><li>所有非静态导入归一组。</li></ol><p>如果同时存在静态导入和非静态导入，则应使用空行分隔它们。除此之外，在 Import 语句中不允许使用其它空行。</p><p>每组中的 Import 语句以 ASCII 编码顺序先后出现。（<strong>注意</strong>：因为 <code>.</code> 符号的 ASCII 编码排在 <code>;</code> 符号之前，所以这与单纯的按 ASCII 编码排序略有不同。）</p><h4 id="不允许类的静态导入" tabindex="-1"><a class="header-anchor" href="#不允许类的静态导入" aria-hidden="true">#</a> 不允许类的静态导入</h4><p>静态内部类以常规方式导入，而不是使用静态导入。</p><h3 id="class-定义" tabindex="-1"><a class="header-anchor" href="#class-定义" aria-hidden="true">#</a> Class 定义</h3><h4 id="有且仅有一个顶级类的声明" tabindex="-1"><a class="header-anchor" href="#有且仅有一个顶级类的声明" aria-hidden="true">#</a> 有且仅有一个顶级类的声明</h4><p>每个顶级类都定义在它们的源文件中。</p><h4 id="类内容顺序" tabindex="-1"><a class="header-anchor" href="#类内容顺序" aria-hidden="true">#</a> 类内容顺序</h4><p>类的成员和初始化方法的顺序对代码可读性有着很重要的影响。然而，对此并没有一个统一正确的标准：不同的类可能有不同的排序内容的方式。</p><p>重要的是，每个类都应该使用该类的维护者可以解释清楚的 <strong>逻辑排序</strong>。例如，新的方法不是习惯性地添加到类的最后，因为「按时间顺序添加」并不是一种逻辑顺序。</p><h5 id="方法重载-不应被分离" tabindex="-1"><a class="header-anchor" href="#方法重载-不应被分离" aria-hidden="true">#</a> 方法重载：不应被分离</h5><p>同名的类方法应该在一个单独连续的组中出现，中间没有其它成员。对于多个构造方法（它们始终具有相同的名称），也是如此。即使这些方法之间的修饰符，如 <code>static</code> 或 <code>private</code> 不同，也适用这个规则。</p><hr><h2 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h2><p><strong>术语说明</strong>：<em>block-like construct</em> 块状结构 指类或者普通方法或者构造方法的主体。注意，在后续 <a href="#%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%AF%E4%BB%A5%E5%86%99%E6%88%90%E5%9D%97%E7%8A%B6%E7%BB%93%E6%9E%84">数组初始化</a> 章节中，任何数组的初始化可以选择被认为是一个块状结构。</p><h3 id="花括号" tabindex="-1"><a class="header-anchor" href="#花括号" aria-hidden="true">#</a> 花括号</h3><h4 id="可选花括号的使用" tabindex="-1"><a class="header-anchor" href="#可选花括号的使用" aria-hidden="true">#</a> 可选花括号的使用</h4><p>使用花括号来配对 <code>if</code>、<code>else</code>、<code>for</code>、<code>do</code> 和 <code>while</code> 语句，即使它们的语句主体是空的或者仅包含一条语句。</p><p>其它可选的花括号，例如 lambda 表达式中的花括号，仍然是可选的。</p><h4 id="非空语句块-k-r-风格" tabindex="-1"><a class="header-anchor" href="#非空语句块-k-r-风格" aria-hidden="true">#</a> 非空语句块：K &amp; R 风格</h4>',43),j={href:"http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<ul><li>左花括号之前不能换行，除下面详细说明的情况外。</li><li>左花括号之后换行。</li><li>右花括号之前换行。</li><li>仅在右花括号结束一条语句或者方法 / 构造方法 / 类的主体时，右花括号之后才换行。例如 <code>else</code> 和逗号之后的花括号不能换行。</li></ul><p>特殊情况：在这些规则允许以分号 ( <code>;</code> ) 结尾的单个语句的地方，可以出现一组语句，并且该块的左花括号前面有一个换行符。这样的代码块通常用于限制局部变量的作用域，例如在 switch 语句内部。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProblemException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">otherCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">somethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">lastThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">frob</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于枚举类的一些特殊情况，将在 <a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">枚举类</a> 章节说明。</p><h4 id="空语句块-可以简洁" tabindex="-1"><a class="header-anchor" href="#空语句块-可以简洁" aria-hidden="true">#</a> 空语句块：可以简洁</h4><p>一个空的语句块或者块状结构可以遵循 K &amp; R 风格（正如在 <a href="#%E9%9D%9E%E7%A9%BA%E8%AF%AD%E5%8F%A5%E5%9D%97k--r-%E9%A3%8E%E6%A0%BC">非空语句块</a> 章节所中描述的）。或者，当它不是 <em>multi-block statement</em> 多块语句（一个包含多块的语句，例如：<code>if / else</code>、<code>try / catch / finally</code> ）一部分的时候，可以在左花括号开始之后立即使用右花括号结束，<code>{}</code> 之中不包含任何字符或者换行符。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// This is acceptable</span>
<span class="token keyword">void</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// This is equally acceptable</span>
<span class="token keyword">void</span> <span class="token function">doNothingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// This is not acceptable: No concise empty blocks in a multi-block statement</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="块缩进-2-个空格" tabindex="-1"><a class="header-anchor" href="#块缩进-2-个空格" aria-hidden="true">#</a> 块缩进：+2 个空格</h3><p>每当新写一个语句块或者块状结构时，增加 2 个空格的缩进。当语句块结束时，返回至上一级别的缩进。语句块的缩进规则适用于所有代码和注释。（代码示例请见 <a href="#%E9%9D%9E%E7%A9%BA%E8%AF%AD%E5%8F%A5%E5%9D%97k--r-%E9%A3%8E%E6%A0%BC">非空语句块：K &amp; R 风格</a> 章节）</p><h3 id="一条语句占一行" tabindex="-1"><a class="header-anchor" href="#一条语句占一行" aria-hidden="true">#</a> 一条语句占一行</h3><p>每条语句的最后都有换行符。</p><h3 id="列限制-100" tabindex="-1"><a class="header-anchor" href="#列限制-100" aria-hidden="true">#</a> 列限制：100</h3><p>Java 代码的列限制为 100 个字符。这儿的「字符」意味着任意的 Unicode 码位。除非另有说明，任何超过此限制的代码行都必须被换行，正如在 <a href="#%E6%8D%A2%E8%A1%8C">换行</a> 章节中所描述的。</p>`,16),S={href:"https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms",target:"_blank",rel:"noopener noreferrer"},q=a("p",null,"特殊情况：",-1),I=a("li",null,"无法遵守列限制的代码行（例如 Javadoc 中的很长的 URL，或者 JSNI 中很长的方法引用）。",-1),C=a("li",null,[n("Package 语句和 Import 语句（请见 "),a("a",{href:"#package-%E8%AF%AD%E5%8F%A5"},"Package 语句"),n(" 和 "),a("a",{href:"#import-%E8%AF%AD%E5%8F%A5"},"Import 语句"),n(" 章节）。")],-1),F=a("li",null,"注释中可以被复制粘贴到 Shell 中执行的命令。",-1),D={href:"https://github.com/google/google-java-format",target:"_blank",rel:"noopener noreferrer"},T=t(`<h3 id="换行" tabindex="-1"><a class="header-anchor" href="#换行" aria-hidden="true">#</a> 换行</h3><p><strong>术语说明</strong>：将原本可以合法写在一行的代码拆分成多行，这种行为称作 <em>line-wrapping</em> 换行。</p><p>没有全面和明确的准则，可以准确描述每种场景下该如何进行换行。对于同一段代码，通常会有多种有效可行的换行方法。</p><blockquote><p><strong>注意</strong>：换行的典型原因是为了避免代码超出了列数的限制，不过即使符合列限制的一行代码，也可以依据作者的决定而换行。</p></blockquote><blockquote><p><strong>提示</strong>：提取方法或者局部变量或许可以避免换行的问题。</p></blockquote><h4 id="在何处换行" tabindex="-1"><a class="header-anchor" href="#在何处换行" aria-hidden="true">#</a> 在何处换行</h4><p>换行指令的主要内容是：倾向于在 <strong>较高语法级别</strong> 处中断一行代码。并且：</p><ol><li><p>当一行代码的中断发生在 <em>non-assignment</em> 非赋值运算符时，需要在该运算符之前换行。（注意这与其它语言的 Google 编程风格不同，例如 C++ 和 JavaScript）</p><ul><li>这条规则也适用于以下「类似操作符」的符号： <ul><li>点分隔符（ <code>.</code> ）</li><li>方法引用中的两个冒号（ <code>::</code> ）</li><li>类型约束中的 &amp; 符号（ <code>T &lt;extends Foo Foo &amp; Bar&gt;</code> ）</li><li>异常捕获中的 | 符号（ <code>catch (FooException | BarException e)</code> ）</li></ul></li></ul></li><li><p>当一行代码的中断发生在 <em>assignment</em> 赋值运算符时，需要在该运算符之后换行，但在之前换行也可以接受。</p><ul><li>这条规则也适用于 foreach 语句中「类似赋值操作符」的冒号。</li></ul></li><li><p>方法或者构造方法的名称紧随着与它相连的开括号 <code>(</code>。</p></li><li><p>逗号 <code>,</code> 紧随着它之前的内容。</p></li><li><p>在 lambda 语句中，和箭头符号相邻的那行代码永远不会换行，除非 lambda 语句的主体仅是一个不带括号的表达式，并且能紧随着 lambda 语句的箭头立即出现的情况下。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyLambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> lambda <span class="token operator">=</span>
    <span class="token punctuation">(</span><span class="token class-name">String</span> label<span class="token punctuation">,</span> <span class="token class-name">Long</span> value<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> str <span class="token operator">-&gt;</span>
    <span class="token function">longExpressionInvolving</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p><strong>注意</strong>：换行的主要目的是为了拥有清晰的代码，总代码的行数 <strong>不必</strong> 是越少越好的。</p></blockquote><h4 id="换行缩进至少-4-个空格" tabindex="-1"><a class="header-anchor" href="#换行缩进至少-4-个空格" aria-hidden="true">#</a> 换行缩进至少 +4 个空格</h4><p>进行换行时，第一行（在连续换行的多行代码中）之后的每行代码至少比之前的那行多缩进 +4 个空格。</p><p>当进行连续换行时，代码的缩进可以根据实际需要超过 +4 个空格。一般来说，当且仅当两行代码以平级的语法元素开头时，它们才会拥有相同级别的缩进。</p><p>在 <a href="#%E6%B0%B4%E5%B9%B3%E5%AF%B9%E9%BD%90%E4%BB%8E%E4%B8%8D%E8%A6%81%E6%B1%82">水平对齐</a> 章节中介绍了不建议使用数量不确定的空格来与上一行代码中的某些单词（token）对齐。</p><h3 id="空格" tabindex="-1"><a class="header-anchor" href="#空格" aria-hidden="true">#</a> 空格</h3><h4 id="垂直空格" tabindex="-1"><a class="header-anchor" href="#垂直空格" aria-hidden="true">#</a> 垂直空格</h4><p>单个空行总是出现在以下情况中：</p><ol><li>类中连续的成员或初始化方法之间，包括：字段、构造方法、方法、内部类、静态初始化代码块、实例初始化代码块。 <ul><li><strong>特殊情况</strong>：两个连续字段（它们之间没有其它代码）之间的空行是可选的。可以根据实际需要，用空行去创建字段之间的 <em>logical groupings</em> 逻辑分组。</li><li><strong>特殊情况</strong>：枚举常量之间的空行在 <a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">枚举类</a> 章节中介绍。</li></ul></li><li>本文档其它章节中所要求的（例如 <a href="#%E6%BA%90%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">源文件结构</a> 章节和 <a href="#import-%E8%AF%AD%E5%8F%A5">Import 语句</a> 章节）</li></ol><p>单个空行也可以出现在任何需要提高代码可读性的地方，例如在将代码组织成一小块逻辑的语句之间。不鼓励也不反对将单个空行出现在类的第一个成员或初始化方法的之前，或者最后一个成员或初始化方法的之后。</p><p>多个连续的空行是允许的，但这不是本文档所要求的（或者是鼓励的）。</p><h4 id="水平空格" tabindex="-1"><a class="header-anchor" href="#水平空格" aria-hidden="true">#</a> 水平空格</h4><p>除了编程语言或者编程规范的要求之外，除了在字面量、注释和 Javadoc 之外，单个 ASCII 空格 <strong>仅</strong> 在以下位置出现：</p><ol><li><p>分隔任何的保留关键字，例如 <code>if</code>、<code>for</code>、<code>catch</code> ，与它们之后的开括号 <code>(</code>。</p></li><li><p>分隔任何的保留关键字，例如 <code>else</code>、<code>catch</code>，与它之前的右花括号 <code>}</code>。</p></li><li><p>任何的左花括号 <code>{</code> 之前，除了以下两种特殊情况：</p><ul><li><code>@SomeAnnotation({a, b})</code>（没有使用空格）</li><li><code>String[][] x = {{&quot;foo&quot;}};</code>（ <code>{{</code> 之间不需要使用空格，请见往下的第 9 条规则）</li></ul></li><li><p>任何的二元或三元操作符的两侧。这条规则也适用于以下「类似操作符」的符号：</p><ul><li><p>类型约束中的 &amp; 符：<code>&lt;T extends Foo &amp; Bar&gt;</code></p></li><li><p>捕获多个异常中的 | 符：<code>catch (FooException | BarException e)</code></p></li><li><p>foreach 语句中的冒号（ <code>:</code> ）</p></li><li><p>lambda 表达式中的箭头：<code>(String str) -&gt; str.length()</code></p><p>但除了：</p></li><li><p>方法引用中的两个冒号（ <code>::</code> ），写法类似于 <code>Object::toString</code></p></li><li><p>点分隔符（ <code>.</code> ），写法类似于 <code>Object.toString()</code></p></li></ul></li><li><p>在 <code>,:;</code> 符号或者类型转换的闭括号 <code>)</code> 之后。</p></li><li><p>在任何内容与以双斜线 ( <code>//</code> ) 开头的注释之间，允许存在多个空格。</p></li><li><p>在以双斜线 ( <code>//</code> ) 开头的注释符和注释文本之间，允许存在多个空格。</p></li><li><p>在类型和变量的定义之间：<code>List&lt;String&gt; list</code>。</p></li><li><p>在数组初始化的两个花括号的内侧。这条规则不是必须的。</p><ul><li><code>new int[] {5, 6}</code> 和 <code>new int[] { 5, 6 }</code> 都是有效的</li></ul></li><li><p>在注解和 <code>[]</code> 或 <code>...</code> 之间。</p></li></ol><p>这条规则不会被解释为要求或者禁止在行首或者行尾使用额外的空格，它只针对于行内的空格。</p><h4 id="水平对齐-从不要求" tabindex="-1"><a class="header-anchor" href="#水平对齐-从不要求" aria-hidden="true">#</a> 水平对齐：从不要求</h4><p><strong>术语说明</strong>：<em>Horizontal alignment</em> 水平对齐 是一种代码的编写方式，其目的是为了使某些单词（token）出现在上一行代码中的另一些单词的正下方，从而在代码中添加若干数量的额外空格的做法。</p><p>这种做法是允许的，但在 Google 编程规范中却不是必须的。甚至不要求在已经水平对齐的地方继续保持水平对齐。</p><p>如下是一个首先未对齐，然后再对齐的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token comment">// this is fine</span>
<span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span> <span class="token comment">// this too</span>

<span class="token keyword">private</span> <span class="token keyword">int</span>   x<span class="token punctuation">;</span>      <span class="token comment">// permitted, but future edits</span>
<span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>  <span class="token comment">// may leave it unaligned</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：水平对齐有助于阅读代码，但却难以日后维护。考虑这样一种情况：日后的改动需要调整一行代码，这个改动可能会破坏原本令人愉悦的代码格式，不过这种改动是 <strong>允许</strong> 的。（IDE）通常会提示编码人员（也许是你自己）调整附近代码行中的空格，但这可能会触发一系列的代码格式化，于是这个一行代码的改动就导致了一个「范围爆炸」。在最坏的情况下，这可能会导致大量毫无意义的工作。在最好的情况下，这依然会混淆代码版本中的历史信息、降低代码评审的速度、加剧代码合并的冲突。</p></blockquote><h3 id="分组括号-推荐" tabindex="-1"><a class="header-anchor" href="#分组括号-推荐" aria-hidden="true">#</a> 分组括号：推荐</h3><p>只有当开发人员和评审人员都同意，没有分组括号时代码的阅读者不会想当然地错误理解，或者分组括号不会更有助于阅读代码的情况下，才可以省略可选的分组括号。不能假定每个阅读者都能熟记整个 Java 运算符的优先级表，这是不合理的。</p><h3 id="特定结构" tabindex="-1"><a class="header-anchor" href="#特定结构" aria-hidden="true">#</a> 特定结构</h3><h4 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类" aria-hidden="true">#</a> 枚举类</h4><p>每个枚举常量的逗号之后可以选择性地换行，同时也允许添加额外的空行（通常只有一个）。以下是一种可能的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">Answer</span> <span class="token punctuation">{</span>
  <span class="token constant">YES</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token constant">NO</span><span class="token punctuation">,</span>
  <span class="token constant">MAYBE</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有方法和注释的枚举常量可以写成数组初始化的方式（请见 <a href="#%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%AF%E4%BB%A5%E5%86%99%E6%88%90%E5%9D%97%E7%8A%B6%E7%BB%93%E6%9E%84">数组初始化</a> 章节）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">Suit</span> <span class="token punctuation">{</span> <span class="token constant">CLUBS</span><span class="token punctuation">,</span> <span class="token constant">HEARTS</span><span class="token punctuation">,</span> <span class="token constant">SPADES</span><span class="token punctuation">,</span> <span class="token constant">DIAMONDS</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于枚举类也是类，因此所有对于类的格式化规则也适用于枚举类。</p><h4 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h4><h5 id="每次声明一个变量" tabindex="-1"><a class="header-anchor" href="#每次声明一个变量" aria-hidden="true">#</a> 每次声明一个变量</h5><p>每次变量声明（字段或局部变量）只声明一个变量：例如 <code>int a, b;</code> 形式的变量声明是不允许的。</p><p><strong>特殊情况</strong>：可以在 <code>for</code> 循环的头部中声明多个变量。</p><h5 id="在需要时声明" tabindex="-1"><a class="header-anchor" href="#在需要时声明" aria-hidden="true">#</a> 在需要时声明</h5><p>局部变量 <strong>不是</strong> 习惯性地声明在它们所属的代码块或者块状结构的起始位置。相反地，局部变量声明在它们第一次被使用的地方（在合理范围之内），这样做是为了最小化局部变量的作用域。局部变量声明通常具有初始值，或者会在声明之后立即初始化。</p><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4><h5 id="数组初始化-可以写成块状结构" tabindex="-1"><a class="header-anchor" href="#数组初始化-可以写成块状结构" aria-hidden="true">#</a> 数组初始化：可以写成块状结构</h5><p>任何数组的初始化可以选择写成「类似块状结构」的格式。例如，以下例子都是合法的（不全）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>           <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>            <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>                       <span class="token number">1</span><span class="token punctuation">,</span>
                        <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>             <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>               <span class="token punctuation">}</span>
  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token punctuation">}</span>                     <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                          <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="拒绝使用-c-语言式的声明" tabindex="-1"><a class="header-anchor" href="#拒绝使用-c-语言式的声明" aria-hidden="true">#</a> 拒绝使用 C 语言式的声明</h5><p>方括号是类型而非变量的一部分：<code>String[] args</code> 是合法的，<code>String args[]</code> 是非法的。</p><h4 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a> switch 语句</h4><p><strong>术语说明</strong>： switch 语句块的花括号内是一个或多个 <em>statement groups</em> 语句组。每个语句组都包含了一个或多个 switch 标签（ <code>case Foo:</code> 或者 <code>default:</code> ），switch 标签之后跟随着一条或多条语句（或者，对于最后一个语句组，它可以包含零条或多条语句）。</p><h5 id="缩进" tabindex="-1"><a class="header-anchor" href="#缩进" aria-hidden="true">#</a> 缩进</h5><p>和其它任何语句块一样，switch 语句块中的内容缩进 +2 个空格。</p><p>switch 标签之后会有一个换行，并增加 +2 个缩进级别，就好像是在开始一段新的代码块。之后的 switch 标签返回到上一个缩进级别，好像是结束了一段代码块。</p><h5 id="fall-through-需要注释" tabindex="-1"><a class="header-anchor" href="#fall-through-需要注释" aria-hidden="true">#</a> Fall-through：需要注释</h5><p>在 switch 语句块中，每个语句组要么会突然终止（使用 <code>break</code>、<code>continue</code>、<code>return</code> 关键字、或者抛出异常），要么会有注释标记着以指示（程序）将或可能继续执行到下一个语句组。任何可以表达 fall-through 意思的注释都是可行的（例如典型的 <code>// fall through</code> ）。在最后一个语句组中，这个特殊的注释不是必须的。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token function">prepareOneOrTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// fall through</span>
  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
    <span class="token function">handleOneTwoOrThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">handleLargeNumber</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在 <code>case 1:</code> 之后不需要注释，只有在语句组之后才需要使用注释。</p><h5 id="default-分支-需要存在" tabindex="-1"><a class="header-anchor" href="#default-分支-需要存在" aria-hidden="true">#</a> default 分支：需要存在</h5><p>每个 switch 语句都包含了一个 <code>default</code> 语句组，即使它不包含任何代码。</p><p><strong>特殊情况</strong>：如果 <code>enum</code> 类型的 switch 语句明确包含了覆盖所有可能性的枚举值，那么它可以省略 <code>default</code> 语句组。如果遗漏了任何情况，IDE 和静态分析工具可以发出警告。</p><h4 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h4><h5 id="用于类型的注解" tabindex="-1"><a class="header-anchor" href="#用于类型的注解" aria-hidden="true">#</a> 用于类型的注解</h5><p>用于类型的注解出现在被标记的类型之前。当一个注解被元注解 <code>@Target(ElementType.TYPE_USE)</code> 标记时，那么它就是用于类型的注解。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Person</span> <span class="token function">getPersonByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="用于类的注解" tabindex="-1"><a class="header-anchor" href="#用于类的注解" aria-hidden="true">#</a> 用于类的注解</h5><p>用于类的注解出现在文档之后，并且每个注解都列在自己的一行上（即每行一个注解）。这些注解所占用的行不构成换行（请见 <a href="#%E6%8D%A2%E8%A1%8C">换行</a> 章节），因此缩进级别不会增加。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Deprecated</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNameIfPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="用于方法和构造方法的注解" tabindex="-1"><a class="header-anchor" href="#用于方法和构造方法的注解" aria-hidden="true">#</a> 用于方法和构造方法的注解</h5><p>用于方法和构造方法的注解的使用规则与 <a href="#%E7%94%A8%E4%BA%8E%E7%B1%BB%E7%9A%84%E6%B3%A8%E8%A7%A3">前一章节</a> 相同。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Deprecated</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNameIfPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊情况</strong>：一个单独的没有参数的注解可以和方法签名的第一行一起出现，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="用于字段的注解" tabindex="-1"><a class="header-anchor" href="#用于字段的注解" aria-hidden="true">#</a> 用于字段的注解</h5><p>用于字段的注解也出现在文档之后，但这种情况下，多个注解（可能会有参数）可以写在同一行上。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Partial</span> <span class="token annotation punctuation">@Mock</span> <span class="token class-name">DataLoader</span> loader<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="用于参数和局部变量的注解" tabindex="-1"><a class="header-anchor" href="#用于参数和局部变量的注解" aria-hidden="true">#</a> 用于参数和局部变量的注解</h5><p>用于参数和局部变量的注解没有特定的格式化规则。（当然，如果注解是用于类型的注解，则除外。）</p><h4 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h4><p>本章节介绍 <em>implementation comments</em> 实现注释。Javadoc 将在 <a href="#javadoc">Javadoc</a> 章节单独介绍。</p><p>任何换行符之前都可以有任意数量的跟随着实现注释的空格。这样的注释使该行成为非空白的。</p><h5 id="注释块样式" tabindex="-1"><a class="header-anchor" href="#注释块样式" aria-hidden="true">#</a> 注释块样式</h5><p>注释块与它周围的代码拥有相同的缩进级别。注释块可以是 <code>/* ... */</code> 样式或 <code>// ...</code> 样式。对于多行注释 <code>/* ... */</code>，后续的行中必须以 <code>*</code> 开头并且与上一行中的 <code>*</code> 保持对齐。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * This is          // And so           /* Or you can
 * okay.            // is this.          * even do this. */</span>
 <span class="token operator">*</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注释不会被包含在由星号或者其它字符绘制的框中。</p><blockquote><p><strong>提示</strong>：当写多行注释的时候，如果你希望能为了在必要的时候重新包装每行代码而自动格式化（段落样式），那么应使用 <code>/* ... */</code> 样式。大多数格式化程序不会重新包装 <code>// ...</code> 样式中的注释块。</p></blockquote><h4 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h4><p>类和成员如果存在修饰符的话，应以 Java 语言规范建议的顺序出现：</p><p><code>public protected private abstract default static final transient volatile synchronized native strictfp</code></p><h4 id="数字字面量" tabindex="-1"><a class="header-anchor" href="#数字字面量" aria-hidden="true">#</a> 数字字面量</h4><p><code>long</code> 数值的整数字面量会使用大写的 <code>L</code> 后缀，永远不要使用小写（避免与数字 <code>1</code> 混淆）。例如，使用 <code>3000000000L</code> 而不是 <code>3000000000l</code>。</p><hr><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名" aria-hidden="true">#</a> 命名</h2><h3 id="适用于所有标识符的通用规则" tabindex="-1"><a class="header-anchor" href="#适用于所有标识符的通用规则" aria-hidden="true">#</a> 适用于所有标识符的通用规则</h3><p>标识符只允许使用 ASCII 字母和数字，并且在少数情况中可以使用下划线。因此，每个有效的标识符都可以由正则表达式 <code>\\w+</code> 匹配。</p><p>在 Google 风格中，<strong>不</strong> 会使用特殊的前缀或后缀，例如，这些命名不是 Google 风格的：<code>name_</code>、<code>mName</code>、<code>s_name</code> 和 <code>kName</code>。</p><h3 id="各种类型的标识符的规则" tabindex="-1"><a class="header-anchor" href="#各种类型的标识符的规则" aria-hidden="true">#</a> 各种类型的标识符的规则</h3><h4 id="包名" tabindex="-1"><a class="header-anchor" href="#包名" aria-hidden="true">#</a> 包名</h4><p>包名只使用小写字母和数字（不使用下划线），连续的单词直接拼接在一起。例如，使用 <code>com.example.deepspace</code>，而不是 <code>com.example.deepSpace</code> 或者 <code>com.example.deep_space</code>。</p><h4 id="类名" tabindex="-1"><a class="header-anchor" href="#类名" aria-hidden="true">#</a> 类名</h4><p>类名以 <a href="#%E9%AA%86%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89">大骆峰</a> 方式编写。</p><p>类名通常是名词或者名词短语。例如 <code>Character</code> 或者 <code>ImmutableList</code>。接口名可能也是名词或名词短语（例如 <code>List</code> ），但有时候也可能是形容词或形容词短语（例如 <code>Readable</code> ）。</p><p>注解类型的命名没有特定的规则或者完善的约定。</p><p>测试类的名称以 <code>Test</code> 结尾，例如 <code>HashIntegrationTest</code>。如果它覆盖了一整个类，则它的名称是该类的名称加上 <code>Test</code>，例如 <code>HashImplTest</code>。</p><h4 id="方法名" tabindex="-1"><a class="header-anchor" href="#方法名" aria-hidden="true">#</a> 方法名</h4><p>方法名以 <a href="#%E9%AA%86%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89">小骆峰</a> 方式编写。</p><p>方法名通常是动词或者动词短语。例如 <code>sendMessage</code> 或者 <code>stop</code>。</p><p>下划线可以出现在 JUnit 测试方法名中，用于分隔命名上的逻辑组件，每个组件都以 <a href="#%E9%AA%86%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89">小骆峰</a> 方式编写，例如 <code>transferMoney_deductsFromSource</code>。测试方法的命名没有一种唯一正确的方式。</p><h4 id="常量名" tabindex="-1"><a class="header-anchor" href="#常量名" aria-hidden="true">#</a> 常量名</h4><p>常量使用 <code>UPPER_SNAKE_CASE</code> 的格式命名：全大写，单词之间以下划线分隔。但常量究竟意味着什么？</p><p>常量是 static final 修饰的字段，常量的内容是深不可变的（deeply immutable)，并且常量的方法是没有副作用的。以下示例包括了原始类型、字符串、不可变的值类型，和任何可以设置为 <code>null</code> 的内容。如果实例的任何外在状态是可变的，那它就不属于常量。仅仅保证实例引用的不可变属性是不够的。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Constants</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUMBER</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ImmutableList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">NAMES</span> <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Ed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ann&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token constant">AGES</span> <span class="token operator">=</span> <span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Ed&quot;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Joiner</span> <span class="token constant">COMMA_JOINER</span> <span class="token operator">=</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// because Joiner is immutable</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SomeMutableType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_ARRAY</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Not constants</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> nonFinal <span class="token operator">=</span> <span class="token string">&quot;non-final&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> nonStatic <span class="token operator">=</span> <span class="token string">&quot;non-static&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mutableCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ImmutableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SomeMutableType</span><span class="token punctuation">&gt;</span></span> mutableElements <span class="token operator">=</span> <span class="token class-name">ImmutableSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>mutable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ImmutableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SomeMutableType</span><span class="token punctuation">&gt;</span></span> mutableValues <span class="token operator">=</span>
    <span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Ed&quot;</span><span class="token punctuation">,</span> mutableInstance<span class="token punctuation">,</span> <span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> mutableInstance2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nonEmptyArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;these&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;can&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;change&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量名通常是名词或者名词短语。</p><h4 id="非常量字段名" tabindex="-1"><a class="header-anchor" href="#非常量字段名" aria-hidden="true">#</a> 非常量字段名</h4><p>非常量字段名（静态或者其它形式）以 <a href="#%E9%AA%86%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89">小骆峰</a> 方式编写。</p><p>非常量字段名通常是名词或者名词短语。例如：<code>computedValues</code> 或者 <code>index</code>。</p><h4 id="参数名" tabindex="-1"><a class="header-anchor" href="#参数名" aria-hidden="true">#</a> 参数名</h4><p>参数名以 <a href="#%E9%AA%86%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89">小骆峰</a> 方式编写。</p><p>public 方法中应该避免使用一个字符的参数名。</p><h4 id="局部变量名" tabindex="-1"><a class="header-anchor" href="#局部变量名" aria-hidden="true">#</a> 局部变量名</h4><p>局部变量名以 <a href="#%E9%AA%86%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89">小骆峰</a> 方式编写。</p><p>即使是 final 和不可变的，局部变量也不被认为是常量，并且不应该以常量的风格命名。</p><h4 id="类型变量名" tabindex="-1"><a class="header-anchor" href="#类型变量名" aria-hidden="true">#</a> 类型变量名</h4><p>类型变量名以如下两者之一方式编写：</p><ul><li>一个大写字母，可选地跟随着一个数字（例如 <code>E</code>，<code>T</code>，<code>X</code>，<code>T2</code> ）。</li><li>以类名的方式命名（请见 <a href="#%E7%B1%BB%E5%90%8D">类名</a> 章节），跟随着大写字母 T（例如：<code>RequestT</code>，<code>FooBarT</code> ）。</li></ul><h3 id="骆驼峰形式-定义" tabindex="-1"><a class="header-anchor" href="#骆驼峰形式-定义" aria-hidden="true">#</a> 骆驼峰形式：定义</h3><p>有时候会有多种合理的方式用于将英语短语转换为驼峰形式，例如当英语短语里出现首字母缩略词或者不寻常结构的单词（例如「iOS」和「IPv6」）时。为了提高代码的可预测性， Google 编程风格指定了以下（近乎）明确的方案。</p><p>从命名的文字构成开始：</p><ol><li>将短语转换为纯 ASCII 编码，并且删除任何的撇号。例如，「Müller&#39;s algorithm」可以转换为「Muellers algorithm」。</li><li>以空格和任何剩余的标点符号（通常是连字符），将短语划分为单词。 <ul><li>推荐：如果任何单词在普遍用法中已经具有常规的驼峰形式，那就将它分解成它的组成部分（例如，将「AdWords」变成「ad words」）。注意例如「iOS」之类的单词本身并不是驼峰形式。它违反了一些约定，因此这条规则并不适用。</li></ul></li><li>现在将所有内容转换为小写（包括首字母缩略词），然后只将以下内容的第一个字符转换为大写： <ul><li>... 每个单词，用于产生大驼峰形式，或者</li><li>... 除了第一个以外的每个单词，用于产生小驼峰形式</li></ul></li><li>最后，将所有单词合并为一个标识符。</li></ol><p>注意，原始单词的大小写几乎完全被忽略。例如：</p><table><thead><tr><th>Prose form</th><th>Correct</th><th>Incorrect</th></tr></thead><tbody><tr><td>&quot;XML HTTP request&quot;</td><td><code>XmlHttpRequest</code></td><td><code>XMLHTTPRequest</code></td></tr><tr><td>&quot;new customer ID&quot;</td><td><code>newCustomerId</code></td><td><code>newCustomerID</code></td></tr><tr><td>&quot;inner stopwatch&quot;</td><td><code>innerStopwatch</code></td><td><code>innerStopWatch</code></td></tr><tr><td>&quot;supports IPv6 on iOS?&quot;</td><td>supportsIpv6OnIos</td><td>supportsIPv6OnIOS</td></tr><tr><td>&quot;YouTube importer&quot;</td><td>YouTubeImporter<br>YoutubeImporter*</td><td></td></tr></tbody></table><p>* 表示可以接受，但不推荐的。</p><blockquote><p><strong>注意</strong>：一些带连字符的单词在英语中含糊不清的：例如「nonempty」和「non-empty」都是正确的，所以方法名 <code>checkNonempty</code> 和 <code>checkNonEmpty</code> 也都是正确的。</p></blockquote><hr><h2 id="编程实践" tabindex="-1"><a class="header-anchor" href="#编程实践" aria-hidden="true">#</a> 编程实践</h2><h3 id="override-总是使用" tabindex="-1"><a class="header-anchor" href="#override-总是使用" aria-hidden="true">#</a> <code>@Override</code>：总是使用</h3><p>只要是合法的，方法总会被标记 <code>@Override</code> 注解。这包括了一个类的方法重写了父类的方法、一个类的方法实现了接口的方法、一个接口的方法重新定义了父接口的方法。</p><p><strong>特殊情况</strong>：当父类方法是 <code>@Deprecated</code> 的时候，<code>@Override</code> 可以省略。</p><h3 id="捕获异常-不能忽略" tabindex="-1"><a class="header-anchor" href="#捕获异常-不能忽略" aria-hidden="true">#</a> 捕获异常：不能忽略</h3><p>除非另有说明，对捕获的异常不做任何响应是很少正确的。（典型的响应是打印日志，或者如果打印日志是「不可能」的，就重新抛出一个作为 <code>AssertionError</code> 的异常。）</p><p>当对 catch 语句块中的任何内容不做处理确实是合适的时候，应该在注释中说明正当的理由。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">handleNumericResponse</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// it&#39;s not numeric; that&#39;s fine, just continue</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token function">handleTextResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊情况</strong>：在测试代码中，如果捕获的异常名称是 <code>expected</code> 或者以此为开头，那么它可以不加注释地被忽略。以下是一个很常见的惯用语法，用于确认被测试的代码确实抛出了预期类型的异常，所以此处的注释是不必要的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  emptyStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchElementException</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态成员-限定使用类" tabindex="-1"><a class="header-anchor" href="#静态成员-限定使用类" aria-hidden="true">#</a> 静态成员：限定使用类</h3><p>当对静态类的成员的引用必须是有所限定的时候，那它是以该类的名称作为限定，而不是该类的类型的引用或者表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Foo</span> aFoo <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token function">aStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// good</span>
aFoo<span class="token punctuation">.</span><span class="token function">aStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bad</span>
<span class="token function">somethingThatYieldsAFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// very bad</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="finalizers-禁用" tabindex="-1"><a class="header-anchor" href="#finalizers-禁用" aria-hidden="true">#</a> Finalizers：禁用</h3><p>重写 <code>Object.finalize</code> 方法是 <strong>非常罕见</strong> 的。</p>`,150),J=a("strong",null,"提示",-1),N={href:"http://books.google.com/books?isbn=0134686047",target:"_blank",rel:"noopener noreferrer"},M=t(`<hr><h2 id="javadoc" tabindex="-1"><a class="header-anchor" href="#javadoc" aria-hidden="true">#</a> Javadoc</h2><h3 id="格式化-1" tabindex="-1"><a class="header-anchor" href="#格式化-1" aria-hidden="true">#</a> 格式化</h3><h4 id="一般形式" tabindex="-1"><a class="header-anchor" href="#一般形式" aria-hidden="true">#</a> 一般形式</h4><p>Javadoc 语句块的基本格式如这个例子所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Multiple lines of Javadoc text are written here,
 * wrapped normally...
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>... 或者如这个单行例子所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** An especially short bit of Javadoc. */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基本格式总是可以接受的。当整个 Javadoc 语句块（包括注释标记）可以写在一行的时候，单行格式可以被替换。注意这仅适用于没有类似于 <code>@return</code> 之类块标签的情况。</p><h4 id="段落" tabindex="-1"><a class="header-anchor" href="#段落" aria-hidden="true">#</a> 段落</h4><p>一个空行 -- 这意味着，仅包含用于对齐的前导星号（*）的行 -- 会出现在段落之间，和块标签组（如果有的话）之前。除了第一个以外的每个段落，在第一个单词之前有一个 <code>&lt;p&gt;</code> 标签，标签与单词之间没有空格。其它块级元素的 HTML 标签，例如 <code>&lt;ul&gt;</code> 或 <code>&lt;table&gt;</code>，不需要在前面加 <code>&lt;p&gt;</code>。</p><h4 id="块标签" tabindex="-1"><a class="header-anchor" href="#块标签" aria-hidden="true">#</a> 块标签</h4><p>使用到的任何标准「块标签」按以下的顺序出现 <code>@param</code>、<code>@return</code>、<code>@throws</code>、<code>@deprecated</code>，并且这四种类型的块标签不会与空的描述一起出现。当块标签不能写在一行的时候，后续的行从 <code>@</code> 的位置缩进四个（或者更多）空格。</p><h3 id="摘要片段" tabindex="-1"><a class="header-anchor" href="#摘要片段" aria-hidden="true">#</a> 摘要片段</h3><p>每个 Javadoc 语句块以一个简短的 <strong>摘要片段</strong> 开头。这个片段非常重要：它是在某些情况下唯一可以出现的文本，例如在类和方法的索引中。</p><p>这是一个片段 -- 是名词短语或者动词短语，而不是一个完整的句子。它 <strong>不</strong> 以 <code>A {@code Foo} is a...</code> 或者 <code>This method returns...</code> 开头，也不会形成例如 <code>Save the record.</code> 这样的祈使句。然而，这个片段是用大写字母书写的并且会有标签符号，就好像它是个完整的句子。</p><blockquote><p><strong>提示</strong>：一个常见的错误是用以下形式编写简单的 Javadoc <code>/** @return the customer ID */</code>。这是不正确的，并且应该被修正为 <code>/** Returns the customer ID. */</code>。</p></blockquote><h3 id="在何处使用-javadoc" tabindex="-1"><a class="header-anchor" href="#在何处使用-javadoc" aria-hidden="true">#</a> 在何处使用 Javadoc</h3><p>至少，Javadoc 应该出现在每个 <code>public</code> 类，和这个类的每个 <code>public</code> 或者 <code>protected</code> 成员，但除了以下提及的几个例外。</p><p>额外的 Javadoc 内容也可以出现，正如在 <a href="#%E9%9D%9E%E5%BF%85%E9%9C%80%E7%9A%84-javadoc">非必需的 Javadoc</a> 章节中所描述的。</p><h4 id="特殊情况-自解释的成员" tabindex="-1"><a class="header-anchor" href="#特殊情况-自解释的成员" aria-hidden="true">#</a> 特殊情况：自解释的成员</h4><p>对于类似 <code>getFoo</code> 之类的「简单、明显」的成员，Javadoc 是可选的，在这种情况下，除了「Returns the foo」也确实真的没什么值得好说了。</p><blockquote><p><strong>重要</strong>：引用这个特殊情况来证明省略典型的阅读者可能需要知道的相关信息是不合适的。例如，对于名为 <code>getCanonicalName</code> 的方法，一个典型的阅读者可能不知道术语「canonical name」是什么意思，所以不要省略它的文档（以它只会说 <code>/** Returns the canonical name. */</code> 的理由）。</p></blockquote><h4 id="特殊情况-重写" tabindex="-1"><a class="header-anchor" href="#特殊情况-重写" aria-hidden="true">#</a> 特殊情况：重写</h4><p>Javadoc 不会总是出现在一个重写了父类方法的方法中。</p><h4 id="非必需的-javadoc" tabindex="-1"><a class="header-anchor" href="#非必需的-javadoc" aria-hidden="true">#</a> 非必需的 Javadoc</h4><p>其它的类和成员根据实际需要或者期望来编写 Javadoc。</p><p>每当使用实现注释来定义一个类或者成员的总体目的或者行为的时候，这个注释改为用 Javadoc 来编写（使用 <code>/**</code> ）。</p><p>非必需的 Javadoc 内容不是严格要求遵守 <a href="#%E4%B8%80%E8%88%AC%E5%BD%A2%E5%BC%8F">一般形式</a> 章节、<a href="#%E6%AE%B5%E8%90%BD">段落</a> 章节、<a href="#%E5%9D%97%E6%A0%87%E7%AD%BE">块标签</a> 章节以及 <a href="#%E6%91%98%E8%A6%81%E7%89%87%E6%AE%B5">摘要片段</a> 章节的格式化规则，尽管这当然是推荐的。</p>`,29);function O(L,P){const s=c("ExternalLinkIcon");return p(),i("div",null,[r,a("blockquote",null,[a("p",null,[n("转载并翻译自 "),a("a",u,[n("https://google.github.io/styleguide/javaguide.html"),e(s)]),n("。个人英语水平有限，应以原文档为标准。"),l("more")])]),h,a("p",null,[n("对于任何含有 "),a("a",k,[n("特殊转义序列"),e(s)]),n("（ "),m,n("、"),v,n("、"),b,n("、"),g,n("、"),f,n("、"),E,n("、"),x,n(" 和 "),A,n(" ）的字符，推荐使用这些转义序列，而不是对应的八进制（例如 "),y,n(" ）或者 Unicode（例如 "),w,n(" ）转义字符。")]),B,a("p",null,[n("对于非空语句块和块状结构，花括号的使用方式遵循 Kernighan & Ritchie 风格（"),a("a",j,[n("Egyptian brackets"),e(s)]),n("）：")]),_,a("blockquote",null,[a("p",null,[n("每个 Unicode 码位都算作一个字符，不论它显示得更宽或者更窄。例如，如果使用 "),a("a",S,[n("全角字符"),e(s)]),n(" 的话，为了遵守这条严格的要求，可以选择提前换行。")])]),q,a("ul",null,[I,C,F,a("li",null,[n("非常长的标识符（在极少数情况下可能需要）允许超过列限制。在这种情况下，周围代码的有效换行方式应与 "),a("a",D,[n("google-java-format"),e(s)]),n(" 生成的方式相同。")])]),T,a("blockquote",null,[a("p",null,[J,n("：禁止这么做。如果你真的需要，请先仔细阅读和理解 "),a("a",N,[n("《Effective Java》第七章"),e(s)]),n(" —— 避免使用 Finalizer 和 Cleaner，然后禁止这么做。")])]),M])}const G=o(d,[["render",O],["__file","code-style-google.html.vue"]]);export{G as default};
