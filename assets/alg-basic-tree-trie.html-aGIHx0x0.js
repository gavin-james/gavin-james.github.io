const e=JSON.parse('{"key":"v-7e737b03","path":"/develop/algorithms-structures/alg-basic/alg-basic-tree-trie.html","title":"树 - 前缀树(Trie Tree)","lang":"zh-CN","frontmatter":{"date":"2019-06-23T00:00:00.000Z","category":["算法和数据结构"],"tag":["数据结构"],"description":"树 - 前缀树(Trie Tree) Trie，又称字典树、单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。 什么是前缀树 在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-basic/alg-basic-tree-trie.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"树 - 前缀树(Trie Tree)"}],["meta",{"property":"og:description","content":"树 - 前缀树(Trie Tree) Trie，又称字典树、单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。 什么是前缀树 在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2019-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"树 - 前缀树(Trie Tree)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"什么是前缀树","slug":"什么是前缀树","link":"#什么是前缀树","children":[]},{"level":2,"title":"前缀树的实现","slug":"前缀树的实现","link":"#前缀树的实现","children":[{"level":3,"title":"节点数据结构定义","slug":"节点数据结构定义","link":"#节点数据结构定义","children":[]},{"level":3,"title":"插入方法","slug":"插入方法","link":"#插入方法","children":[]},{"level":3,"title":"查询单词方法","slug":"查询单词方法","link":"#查询单词方法","children":[]},{"level":3,"title":"查询前缀方法","slug":"查询前缀方法","link":"#查询前缀方法","children":[]}]},{"level":2,"title":"前缀树的拓展","slug":"前缀树的拓展","link":"#前缀树的拓展","children":[{"level":3,"title":"前缀树的复杂度","slug":"前缀树的复杂度","link":"#前缀树的复杂度","children":[]},{"level":3,"title":"前缀树有哪些应用","slug":"前缀树有哪些应用","link":"#前缀树有哪些应用","children":[]},{"level":3,"title":"前缀树的压缩：基数树","slug":"前缀树的压缩-基数树","link":"#前缀树的压缩-基数树","children":[]},{"level":3,"title":"双数组Trie树(DoubleArrayTrie)","slug":"双数组trie树-doublearraytrie","link":"#双数组trie树-doublearraytrie","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":8.17,"words":2451},"filePathRelative":"develop/algorithms-structures/alg-basic/alg-basic-tree-trie.md","localizedDate":"2019年6月23日","excerpt":"<h1> 树 - 前缀树(Trie Tree)</h1>\\n<blockquote>\\n<p>Trie，又称字典树、单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p>\\n</blockquote>\\n<h2> 什么是前缀树</h2>\\n<p>在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
