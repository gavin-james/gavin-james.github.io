const t=JSON.parse('{"key":"v-0a7bdf2a","path":"/develop/algorithms-structures/alg-sort/alg-sort-x-bucket.html","title":"排序 - 桶排序(Bucket Sort)","lang":"zh-CN","frontmatter":{"date":"2019-07-08T00:00:00.000Z","category":["算法和数据结构"],"tag":["排序算法"],"description":"排序 - 桶排序(Bucket Sort) 桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。 桶排序介绍 假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个\\"桶\\"。 在排序时，逐个遍历数组a，将数组a的值，作为\\"桶数组r\\"的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-sort/alg-sort-x-bucket.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"排序 - 桶排序(Bucket Sort)"}],["meta",{"property":"og:description","content":"排序 - 桶排序(Bucket Sort) 桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。 桶排序介绍 假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个\\"桶\\"。 在排序时，逐个遍历数组a，将数组a的值，作为\\"桶数组r\\"的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"排序算法"}],["meta",{"property":"article:published_time","content":"2019-07-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序 - 桶排序(Bucket Sort)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"桶排序介绍","slug":"桶排序介绍","link":"#桶排序介绍","children":[]},{"level":2,"title":"桶排序实现","slug":"桶排序实现","link":"#桶排序实现","children":[]},{"level":2,"title":"桶排序复杂度和稳定性","slug":"桶排序复杂度和稳定性","link":"#桶排序复杂度和稳定性","children":[{"level":3,"title":"桶排序复杂度","slug":"桶排序复杂度","link":"#桶排序复杂度","children":[]},{"level":3,"title":"桶排序稳定性","slug":"桶排序稳定性","link":"#桶排序稳定性","children":[]}]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"develop/algorithms-structures/alg-sort/alg-sort-x-bucket.md","localizedDate":"2019年7月8日","excerpt":"<h1> 排序 - 桶排序(Bucket Sort)</h1>\\n<blockquote>\\n<p>桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。</p>\\n</blockquote>\\n<h2> 桶排序介绍</h2>\\n<p>假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个\\"桶\\"。</p>\\n<p>在排序时，逐个遍历数组a，将数组a的值，作为\\"桶数组r\\"的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{t as data};
