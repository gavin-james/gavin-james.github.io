const n=JSON.parse('{"key":"v-565d93a1","path":"/develop/refactor/dev-refactor-if-else.html","title":"常见重构技巧 - 去除多余的if else","lang":"zh-CN","frontmatter":{"date":"2019-04-25T00:00:00.000Z","category":["重构技巧"],"tag":["常见重构技巧"],"description":"常见重构技巧 - 去除多余的if else 最为常见的是代码中使用很多的if/else，或者switch/case；如何重构呢？方法特别多，本文带你学习其中的技巧。 出现if/else和switch/case的场景 通常业务代码会包含这样的逻辑：每种条件下会有不同的处理逻辑。比如两个数a和b之间可以通过不同的操作符（+，-，*，/）进行计算，初学者通常会这么写： public int calculate(int a, int b, String operator) { int result = Integer.MIN_VALUE; if (\\"add\\".equals(operator)) { result = a + b; } else if (\\"multiply\\".equals(operator)) { result = a * b; } else if (\\"divide\\".equals(operator)) { result = a / b; } else if (\\"subtract\\".equals(operator)) { result = a - b; } return result; }","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/refactor/dev-refactor-if-else.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"常见重构技巧 - 去除多余的if else"}],["meta",{"property":"og:description","content":"常见重构技巧 - 去除多余的if else 最为常见的是代码中使用很多的if/else，或者switch/case；如何重构呢？方法特别多，本文带你学习其中的技巧。 出现if/else和switch/case的场景 通常业务代码会包含这样的逻辑：每种条件下会有不同的处理逻辑。比如两个数a和b之间可以通过不同的操作符（+，-，*，/）进行计算，初学者通常会这么写： public int calculate(int a, int b, String operator) { int result = Integer.MIN_VALUE; if (\\"add\\".equals(operator)) { result = a + b; } else if (\\"multiply\\".equals(operator)) { result = a * b; } else if (\\"divide\\".equals(operator)) { result = a / b; } else if (\\"subtract\\".equals(operator)) { result = a - b; } return result; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-26T09:56:01.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"常见重构技巧"}],["meta",{"property":"article:published_time","content":"2019-04-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-26T09:56:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见重构技巧 - 去除多余的if else\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-04-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-26T09:56:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"出现if/else和switch/case的场景","slug":"出现if-else和switch-case的场景","link":"#出现if-else和switch-case的场景","children":[]},{"level":2,"title":"重构思路","slug":"重构思路","link":"#重构思路","children":[{"level":3,"title":"方式一 - 工厂类","slug":"方式一-工厂类","link":"#方式一-工厂类","children":[]},{"level":3,"title":"方式二 - 枚举","slug":"方式二-枚举","link":"#方式二-枚举","children":[]},{"level":3,"title":"方法三 - 命令模式","slug":"方法三-命令模式","link":"#方法三-命令模式","children":[]},{"level":3,"title":"方法四 - 规则引擎","slug":"方法四-规则引擎","link":"#方法四-规则引擎","children":[]},{"level":3,"title":"方法五 - 策略模式","slug":"方法五-策略模式","link":"#方法五-策略模式","children":[]}]},{"level":2,"title":"一些反思","slug":"一些反思","link":"#一些反思","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1690160698000,"updatedTime":1703584561000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":6.3,"words":1889},"filePathRelative":"develop/refactor/dev-refactor-if-else.md","localizedDate":"2019年4月25日","excerpt":"<h1> 常见重构技巧 - 去除多余的if else</h1>\\n<blockquote>\\n<p>最为常见的是代码中使用很多的if/else，或者switch/case；如何重构呢？方法特别多，本文带你学习其中的技巧。</p>\\n</blockquote>\\n<h2> 出现if/else和switch/case的场景</h2>\\n<p>通常业务代码会包含这样的逻辑：每种条件下会有不同的处理逻辑。比如两个数a和b之间可以通过不同的操作符（+，-，*，/）进行计算，初学者通常会这么写：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">calculate</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> operator<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> result <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MIN_VALUE</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"add\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>operator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        result <span class=\\"token operator\\">=</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"multiply\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>operator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        result <span class=\\"token operator\\">=</span> a <span class=\\"token operator\\">*</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"divide\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>operator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        result <span class=\\"token operator\\">=</span> a <span class=\\"token operator\\">/</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"subtract\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>operator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        result <span class=\\"token operator\\">=</span> a <span class=\\"token operator\\">-</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{n as data};
