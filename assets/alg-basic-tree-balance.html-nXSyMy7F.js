const e=JSON.parse('{"key":"v-31709ef9","path":"/develop/algorithms-structures/alg-basic/alg-basic-tree-balance.html","title":"树 - 平衡二叉树(AVL)","lang":"zh-CN","frontmatter":{"date":"2019-06-20T00:00:00.000Z","category":["算法和数据结构"],"tag":["数据结构"],"description":"树 - 平衡二叉树(AVL) 平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。 什么是AVL树","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/algorithms-structures/alg-basic/alg-basic-tree-balance.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"树 - 平衡二叉树(AVL)"}],["meta",{"property":"og:description","content":"树 - 平衡二叉树(AVL) 平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。 什么是AVL树"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T08:55:11.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2019-06-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T08:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"树 - 平衡二叉树(AVL)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-27T08:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"什么是AVL树","slug":"什么是avl树","link":"#什么是avl树","children":[]},{"level":2,"title":"AVL树的实现","slug":"avl树的实现","link":"#avl树的实现","children":[{"level":3,"title":"节点","slug":"节点","link":"#节点","children":[]},{"level":3,"title":"旋转","slug":"旋转","link":"#旋转","children":[]},{"level":3,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]}]},{"level":2,"title":"AVL树测试","slug":"avl树测试","link":"#avl树测试","children":[]},{"level":2,"title":"完整实现和测试的代码","slug":"完整实现和测试的代码","link":"#完整实现和测试的代码","children":[{"level":3,"title":"AVL 完整实现代码","slug":"avl-完整实现代码","link":"#avl-完整实现代码","children":[]},{"level":3,"title":"AVL 完整测试代码","slug":"avl-完整测试代码","link":"#avl-完整测试代码","children":[]},{"level":3,"title":"测试结果","slug":"测试结果","link":"#测试结果","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1703667311000,"updatedTime":1703667311000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":19.07,"words":5721},"filePathRelative":"develop/algorithms-structures/alg-basic/alg-basic-tree-balance.md","localizedDate":"2019年6月20日","excerpt":"<h1> 树 - 平衡二叉树(AVL)</h1>\\n<blockquote>\\n<p>平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</p>\\n</blockquote>\\n<h2> 什么是AVL树</h2>\\n","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
