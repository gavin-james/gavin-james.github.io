import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as n,c as d,a as i,b as s,d as t,f as l}from"./app-DmnHa7HT.js";const p={},o=l(`<h1 id="redis进阶-数据结构-redis对象与编码-底层结构-对应关系详解" tabindex="-1"><a class="header-anchor" href="#redis进阶-数据结构-redis对象与编码-底层结构-对应关系详解" aria-hidden="true">#</a> Redis进阶 - 数据结构：redis对象与编码(底层结构)对应关系详解</h1><blockquote><p>在学习完<a href="">底层数据结构</a>之后，我们终于可以结合前文内容阐述redis对象及编码之间的关系了。</p></blockquote><h2 id="redis对象与编码-底层结构-对应关系引入" tabindex="-1"><a class="header-anchor" href="#redis对象与编码-底层结构-对应关系引入" aria-hidden="true">#</a> redis对象与编码(底层结构)对应关系引入</h2><p>在对<a href="">对象机制详解</a> 和 <a href="">底层数据结构</a> 有了初步认识之后，我们便可以继续理解它们是怎么对应的：</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-object-2-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="字符串对象" tabindex="-1"><a class="header-anchor" href="#字符串对象" aria-hidden="true">#</a> 字符串对象</h2><blockquote><p>字符串是Redis最基本的数据类型，不仅所有key都是字符串类型，其它几种数据类型构成的元素也是字符串。注意字符串的长度不能超过512M。</p></blockquote><ul><li><strong>编码</strong></li></ul><p>字符串对象的编码可以是int，raw或者embstr。</p><ul><li><code>int 编码</code>：保存的是可以用 long 类型表示的整数值。</li><li><code>embstr 编码</code>：保存长度小于44字节的字符串（redis3.2版本之前是39字节，之后是44字节）。</li><li><code>raw 编码</code>：保存长度大于44字节的字符串（redis3.2版本之前是39字节，之后是44字节）。</li></ul><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由上可以看出，int 编码是用来保存整数值，而embstr是用来保存短字符串，raw编码是用来保存长字符串。</p><ul><li><strong>内存布局</strong></li></ul><p>字符串对象支持三种编码方式: RAW, INT, EMBSTR, 三种方式的内存布局分别如下:</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-ds-x-21.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>raw 和 embstr 的区别</strong></li></ul><p>其实 embstr 编码是专门用来保存短字符串的一种优化编码，raw 和 embstr 的区别：</p><p>embstr与raw都使用redisObject和sds保存数据，区别在于，embstr的使用只分配一次内存空间（因此redisObject和sds是连续的），而raw需要分配两次内存空间（分别为redisObject和sds分配空间）。因此与raw相比，embstr的好处在于创建时少分配一次空间，删除时少释放一次空间，以及对象的所有数据连在一起，寻找方便。而embstr的坏处也很明显，如果字符串的长度增加需要重新分配内存时，整个redisObject和sds都需要重新分配空间，因此redis中的embstr实现为只读。</p><p>ps：<strong>Redis中对于浮点数类型也是作为字符串保存的，在需要的时候再将其转换成浮点数类型</strong>。</p><ul><li><strong>编码的转换</strong></li></ul><p>当 int 编码保存的值不再是整数，或大小超过了long的范围时，自动转化为raw。</p><p>对于 embstr 编码，由于 Redis 没有对其编写任何的修改程序（embstr 是只读的），在对embstr对象进行修改时，都会先转化为raw再进行修改，因此，只要是修改embstr对象，修改后的对象一定是raw的，无论是否达到了44个字节。</p><h2 id="列表对象" tabindex="-1"><a class="header-anchor" href="#列表对象" aria-hidden="true">#</a> 列表对象</h2><blockquote><p>list 列表，它是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部（左边）或者尾部（右边），它的底层实际上是个链表结构。</p></blockquote><ul><li><strong>编码</strong></li></ul><p>列表对象的编码是quicklist。 (之前版本中有linked和ziplist这两种编码。进一步的, 目前Redis定义的10个对象编码方式宏名中, 有两个被完全闲置了, 分别是: <code>OBJ_ENCODING_ZIPMAP</code>与<code>OBJ_ENCODING_LINKEDLIST</code>。 从Redis的演进历史上来看, 前者是后续可能会得到支持的编码值（代码还在）, 后者则应该是被彻底淘汰了)</p><ul><li><strong>内存布局</strong></li></ul><p>列表对象的内存布局如下图所示:</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-ds-x-22.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="哈希对象" tabindex="-1"><a class="header-anchor" href="#哈希对象" aria-hidden="true">#</a> 哈希对象</h2><blockquote><p>哈希对象的键是一个字符串类型，值是一个键值对集合。</p></blockquote><ul><li><strong>编码</strong></li></ul><p>哈希对象的编码可以是 ziplist 或者 hashtable；对应的底层实现有两种, 一种是ziplist, 一种是dict。</p><p>两种编码<strong>内存布局</strong>分别如下:</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-ds-x-23.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中不严谨的地方有:</p><ol><li>ziplist中每个entry, 除了键与值本身的二进制数据, 还包括其它字段, 图中没有画出来</li><li>dict底层可能持有两个dictht实例</li><li>没有画出dict的哈希冲突</li></ol><p>需要注意的是: 当采用HT编码, 即使用dict作为哈希对象的底层数据结构时, 键与值均是以sds的形式存储的.</p><ul><li><strong>举例说明</strong></li></ul><p>当使用ziplist，也就是压缩列表作为底层实现时，新增的键值对是保存到压缩列表的表尾。比如执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hset profile name <span class="token string">&quot;Tom&quot;</span>
hset profile age <span class="token number">25</span>
hset profile career <span class="token string">&quot;Programmer&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用ziplist，profile 存储如下：</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当使用 hashtable 编码时，上面命令存储如下：</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>hashtable 编码的哈希表对象底层使用字典数据结构，哈希对象中的每个键值对都使用一个字典键值对。</p><p>在前面介绍压缩列表时，我们介绍过压缩列表是Redis为了节省内存而开发的，是由一系列特殊编码的连续内存块组成的顺序型数据结构，相对于字典数据结构，压缩列表用于元素个数少、元素长度小的场景。其优势在于集中存储，节省空间。</p><ul><li><strong>编码转换</strong></li></ul><p>和上面列表对象使用 ziplist 编码一样，当同时满足下面两个条件时，使用ziplist（压缩列表）编码：</p><p>1、列表保存元素个数小于512个</p><p>2、每个元素长度小于64字节</p><p>不能满足这两个条件的时候使用 hashtable 编码。以上两个条件也可以通过Redis配置文件<code>zset-max-ziplist-entries</code> 选项和 <code>zset-max-ziplist-value</code> 进行修改。</p><h2 id="集合对象" tabindex="-1"><a class="header-anchor" href="#集合对象" aria-hidden="true">#</a> 集合对象</h2><blockquote><p>集合对象 set 是 string 类型（整数也会转换成string类型进行存储）的无序集合。注意集合和列表的区别：集合中的元素是无序的，因此不能通过索引来操作元素；集合中的元素不能有重复。</p></blockquote><ul><li><strong>编码</strong></li></ul><p>集合对象的编码可以是 intset 或者 hashtable; 底层实现有两种, 分别是intset和dict。 显然当使用intset作为底层实现的数据结构时, 集合中存储的只能是数值数据, 且必须是整数; 而当使用dict作为集合对象的底层实现时, 是将数据全部存储于dict的键中, 值字段闲置不用.</p><p>集合对象的内存布局如下图所示:</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-ds-x-24.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>举例说明</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SADD numbers <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SADD Dfruits <span class="token string">&quot;apple&quot;</span> <span class="token string">&quot;banana&quot;</span> <span class="token string">&quot;cherry&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-12.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>编码转换</strong></li></ul><p>当集合同时满足以下两个条件时，使用 intset 编码：</p><p>1、集合对象中所有元素都是整数</p><p>2、集合对象所有元素数量不超过512</p><p>不能满足这两个条件的就使用 hashtable 编码。第二个条件可以通过配置文件的 <code>set-max-intset-entries</code> 进行配置。</p><h2 id="有序集合对象" tabindex="-1"><a class="header-anchor" href="#有序集合对象" aria-hidden="true">#</a> 有序集合对象</h2><blockquote><p>和上面的集合对象相比，有序集合对象是有序的。与列表使用索引下标作为排序依据不同，有序集合为每个元素设置一个分数（score）作为排序依据。</p></blockquote><ul><li><strong>编码</strong></li></ul><p>有序集合的底层实现依然有两种, 一种是使用ziplist作为底层实现, 另外一种比较特殊, 底层使用了两种数据结构: dict与skiplist. 前者对应的编码值宏为ZIPLIST, 后者对应的编码值宏为SKIPLIST</p><p>使用ziplist来实现在序集合很容易理解, 只需要在ziplist这个数据结构的基础上做好排序与去重就可以了. 使用zskiplist来实现有序集合也很容易理解, Redis中实现的这个跳跃表似乎天然就是为了实现有序集合对象而实现的, 那么为什么还要辅助一个dict实例呢? 我们先看来有序集合对象在这两种编码方式下的内存布局, 然后再做解释:</p><p>首先是编码为ZIPLIST时, 有序集合的内存布局如下:</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-ds-x-25.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后是编码为SKIPLIST时, 有序集合的内存布局如下:</p><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-ds-x-26.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：其实有序集合单独使用字典或跳跃表其中一种数据结构都可以实现，但是这里使用两种数据结构组合起来，原因是假如我们单独使用 字典，虽然能以 O(1) 的时间复杂度查找成员的分值，但是因为字典是以无序的方式来保存集合元素，所以每次进行范围操作的时候都要进行排序；假如我们单独使用跳跃表来实现，虽然能执行范围操作，但是查找操作有 O(1)的复杂度变为了O(logN)。因此Redis使用了两种数据结构来共同实现有序集合。</p><ul><li><strong>举例说明</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZADD price <span class="token number">8.5</span> apple <span class="token number">5.0</span> banana <span class="token number">6.0</span> cherry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-13.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://www.pdai.tech/images/db/redis/db-redis-x-object-14.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>编码转换</strong></li></ul><p>当有序集合对象同时满足以下两个条件时，对象使用 ziplist 编码：</p><p>1、保存的元素数量小于128；</p><p>2、保存的所有元素长度都小于64字节。</p><p>不能满足上面两个条件的使用 skiplist 编码。以上两个条件也可以通过Redis配置文件<code>zset-max-ziplist-entries</code> 选项和 <code>zset-max-ziplist-value</code> 进行修改。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,88),c={href:"https://www.cnblogs.com/ysocean/p/9080942.html",target:"_blank",rel:"noopener noreferrer"},g={href:"http://redisbook.com/preview/dict/datastruct.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/neooelric/p/9621736.html",target:"_blank",rel:"noopener noreferrer"};function u(h,m){const e=r("ExternalLinkIcon");return n(),d("div",null,[o,i("p",null,[i("a",c,[s("https://www.cnblogs.com/ysocean/p/9080942.html"),t(e)])]),i("p",null,[i("a",g,[s("http://redisbook.com/preview/dict/datastruct.html"),t(e)])]),i("p",null,[i("a",b,[s("https://www.cnblogs.com/neooelric/p/9621736.html"),t(e)])])])}const x=a(p,[["render",u],["__file","db-redis-data-type-enc.html.vue"]]);export{x as default};
