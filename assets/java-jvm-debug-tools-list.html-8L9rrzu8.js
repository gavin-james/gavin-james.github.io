import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as l,c as i,a,b as n,d as e,f as t}from"./app-Kb1srcrM.js";const c={},r=t(`<h1 id="调试排错-java-问题排查之工具单" tabindex="-1"><a class="header-anchor" href="#调试排错-java-问题排查之工具单" aria-hidden="true">#</a> 调试排错 - Java 问题排查之工具单</h1><blockquote><p>Java 在线问题排查主要分两篇：本文是第二篇，通过java调试/排查工具进行问题定位。</p></blockquote><h2 id="java-调试入门工具" tabindex="-1"><a class="header-anchor" href="#java-调试入门工具" aria-hidden="true">#</a> Java 调试入门工具</h2><h3 id="jps" tabindex="-1"><a class="header-anchor" href="#jps" aria-hidden="true">#</a> jps</h3><blockquote><p>jps是jdk提供的一个查看当前java进程的小工具， 可以看做是JavaVirtual Machine Process Status Tool的缩写。</p></blockquote><p>jps常用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps <span class="token comment"># 显示进程的ID 和 类的名称</span>
jps –l <span class="token comment"># 输出输出完全的包名，应用主类名，jar的完全路径名 </span>
jps –v <span class="token comment"># 输出jvm参数</span>
jps –q <span class="token comment"># 显示java进程号</span>
jps <span class="token parameter variable">-m</span> <span class="token comment"># main 方法</span>
jps <span class="token parameter variable">-l</span> xxx.xxx.xx.xx <span class="token comment"># 远程查看 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jps参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-q：仅输出VM标识符，不包括classname,jar name,arguments <span class="token keyword">in</span> main method 
-m：输出main method的参数 
-l：输出完全的包名，应用主类名，jar的完全路径名 
-v：输出jvm参数 
-V：输出通过flag文件传递到JVM中的参数<span class="token punctuation">(</span>.hotspotrc文件或-XX:Flags<span class="token operator">=</span>所指定的文件 
-Joption：传递参数到vm,例如:-J-Xms512m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jps原理</p><blockquote><p>java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_{userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。 至于系统的参数什么，就可以解析这几个文件获得。</p></blockquote>`,11),u={href:"https://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jps.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<h3 id="jstack" tabindex="-1"><a class="header-anchor" href="#jstack" aria-hidden="true">#</a> jstack</h3><blockquote><p>jstack是jdk自带的线程堆栈分析工具，使用该命令可以查看或导出 Java 应用程序中线程堆栈信息。</p></blockquote><p>jstack常用命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 基本</span>
jstack <span class="token number">2815</span>

<span class="token comment"># java和native c/c++框架的所有栈信息</span>
jstack <span class="token parameter variable">-m</span> <span class="token number">2815</span>

<span class="token comment"># 额外的锁信息列表，查看是否死锁</span>
jstack <span class="token parameter variable">-l</span> <span class="token number">2815</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jstack参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-l</span> 长列表. 打印关于锁的附加信息,例如属于java.util.concurrent 的 ownable synchronizers列表.

<span class="token parameter variable">-F</span> 当’jstack <span class="token punctuation">[</span>-l<span class="token punctuation">]</span> pid’没有相应的时候强制打印栈信息

<span class="token parameter variable">-m</span> 打印java和native c/c++框架的所有栈信息.

<span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token parameter variable">-help</span> 打印帮助信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),m={href:"https://www.jianshu.com/p/025cb069cb69",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="jinfo" tabindex="-1"><a class="header-anchor" href="#jinfo" aria-hidden="true">#</a> jinfo</h3><blockquote><p>jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。当系统崩溃时，jinfo可以从core文件里面知道崩溃的Java应用程序的配置信息</p></blockquote><p>jinfo常用命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 输出当前 jvm 进程的全部参数和系统属性</span>
jinfo <span class="token number">2815</span>

<span class="token comment"># 输出所有的参数</span>
jinfo <span class="token parameter variable">-flags</span> <span class="token number">2815</span>

<span class="token comment"># 查看指定的 jvm 参数的值</span>
jinfo <span class="token parameter variable">-flag</span> PrintGC <span class="token number">2815</span>

<span class="token comment"># 开启/关闭指定的JVM参数</span>
jinfo <span class="token parameter variable">-flag</span> +PrintGC <span class="token number">2815</span>

<span class="token comment"># 设置flag的参数</span>
jinfo <span class="token parameter variable">-flag</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>value <span class="token number">2815</span>

<span class="token comment"># 输出当前 jvm 进行的全部的系统属性</span>
jinfo <span class="token parameter variable">-sysprops</span> <span class="token number">2815</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jinfo参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>no option 输出全部的参数和系统属性
<span class="token parameter variable">-flag</span> name 输出对应名称的参数
<span class="token parameter variable">-flag</span> <span class="token punctuation">[</span>+<span class="token operator">|</span>-<span class="token punctuation">]</span>name 开启或者关闭对应名称的参数
<span class="token parameter variable">-flag</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>value 设定对应名称的参数
<span class="token parameter variable">-flags</span> 输出全部的参数
<span class="token parameter variable">-sysprops</span> 输出系统属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k={href:"https://www.jianshu.com/p/8d8aef212b25",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="jmap" tabindex="-1"><a class="header-anchor" href="#jmap" aria-hidden="true">#</a> jmap</h3><blockquote><p>命令jmap是一个多功能的命令。它可以生成 java 程序的 dump 文件， 也可以查看堆内对象示例的统计信息、查看 ClassLoader 的信息以及 finalizer 队列。</p></blockquote><p>两个用途</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看堆的情况</span>
jmap <span class="token parameter variable">-heap</span> <span class="token number">2815</span>

<span class="token comment"># dump</span>
jmap -dump:live,format<span class="token operator">=</span>b,file<span class="token operator">=</span>/tmp/heap2.bin <span class="token number">2815</span>
jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>/tmp/heap3.bin <span class="token number">2815</span>

<span class="token comment"># 查看堆的占用</span>
jmap <span class="token parameter variable">-histo</span> <span class="token number">2815</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jmap参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>no option： 查看进程的内存映像信息,类似 Solaris pmap 命令。
heap： 显示Java堆详细信息
histo<span class="token punctuation">[</span>:live<span class="token punctuation">]</span>： 显示堆中对象的统计信息
clstats：打印类加载器信息
finalizerinfo： 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象
dump:<span class="token operator">&lt;</span>dump-options<span class="token operator">&gt;</span>：生成堆转储快照
F： 当-dump没有响应时，使用-dump或者-histo参数. 在这个模式下,live子参数无效.
help：打印帮助信息
J<span class="token operator">&lt;</span>flag<span class="token operator">&gt;</span>：指定传递给运行jmap的JVM的参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),h={href:"https://www.jianshu.com/p/a4ad53179df3",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jmap.html",target:"_blank",rel:"noopener noreferrer"},j=t(`<h3 id="jstat" tabindex="-1"><a class="header-anchor" href="#jstat" aria-hidden="true">#</a> jstat</h3><p>jstat参数众多，但是使用一个就够了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token parameter variable">-gcutil</span> <span class="token number">2815</span> <span class="token number">1000</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="jdb" tabindex="-1"><a class="header-anchor" href="#jdb" aria-hidden="true">#</a> jdb</h3><p>jdb可以用来预发debug,假设你预发的java_home是/opt/java/，远程调试端口是8000.那么</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jdb <span class="token parameter variable">-attach</span> <span class="token number">8000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现以上代表jdb启动成功。后续可以进行设置断点进行调试。</p>`,7),f={href:"http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="chlsdb" tabindex="-1"><a class="header-anchor" href="#chlsdb" aria-hidden="true">#</a> CHLSDB</h3><p>CHLSDB感觉很多情况下可以看到更好玩的东西，不详细叙述了。 查询资料听说jstack和jmap等工具就是基于它的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-classpath</span> /opt/taobao/java/lib/sa-jdi.jar sun.jvm.hotspot.CLHSDB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),q={href:"http://rednaxelafx.iteye.com/blog/1847971",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="java-调试进阶工具" tabindex="-1"><a class="header-anchor" href="#java-调试进阶工具" aria-hidden="true">#</a> Java 调试进阶工具</h2><h3 id="btrace" tabindex="-1"><a class="header-anchor" href="#btrace" aria-hidden="true">#</a> btrace</h3><p>首当其冲的要说的是btrace。真是生产环境&amp;预发的排查问题大杀器。 简介什么的就不说了。直接上代码干</p><ul><li>查看当前谁调用了ArrayList的add方法，同时只打印当前ArrayList的size大于500的线程调用栈</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@OnMethod</span><span class="token punctuation">(</span>clazz <span class="token operator">=</span> <span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> location <span class="token operator">=</span> <span class="token annotation punctuation">@Location</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Kind</span><span class="token punctuation">.</span><span class="token constant">CALL</span><span class="token punctuation">,</span> clazz <span class="token operator">=</span> <span class="token string">&quot;/./&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;/./&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ProbeClassName</span> <span class="token class-name">String</span> probeClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@ProbeMethodName</span> <span class="token class-name">String</span> probeMethod<span class="token punctuation">,</span> <span class="token annotation punctuation">@TargetInstance</span> <span class="token class-name">Object</span> instance<span class="token punctuation">,</span> <span class="token annotation punctuation">@TargetMethodOrField</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">479</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;check who ArrayList.add method:&quot;</span> <span class="token operator">+</span> probeClass <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> probeMethod  <span class="token operator">+</span> <span class="token string">&quot;, method:&quot;</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">&quot;, size:&quot;</span> <span class="token operator">+</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">jstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>监控当前服务方法被调用时返回的值以及请求的参数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@OnMethod</span><span class="token punctuation">(</span>clazz <span class="token operator">=</span> <span class="token string">&quot;com.taobao.sellerhome.transfer.biz.impl.C2CApplyerServiceImpl&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&quot;nav&quot;</span><span class="token punctuation">,</span> location <span class="token operator">=</span> <span class="token annotation punctuation">@Location</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Kind</span><span class="token punctuation">.</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> current<span class="token punctuation">,</span> <span class="token keyword">int</span> relation<span class="token punctuation">,</span> <span class="token class-name">String</span> check<span class="token punctuation">,</span> <span class="token class-name">String</span> redirectUrl<span class="token punctuation">,</span> <span class="token annotation punctuation">@Return</span> <span class="token class-name">AnyType</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;parameter# userId:&quot;</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">&quot;, current:&quot;</span> <span class="token operator">+</span> current <span class="token operator">+</span> <span class="token string">&quot;, relation:&quot;</span> <span class="token operator">+</span> relation <span class="token operator">+</span> <span class="token string">&quot;, check:&quot;</span> <span class="token operator">+</span> check <span class="token operator">+</span> <span class="token string">&quot;, redirectUrl:&quot;</span> <span class="token operator">+</span> redirectUrl <span class="token operator">+</span> <span class="token string">&quot;, result:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),y={href:"https://github.com/btraceio/btrace",target:"_blank",rel:"noopener noreferrer"},w=t('<p>注意:</p><ul><li>经过观察，1.3.9的release输出不稳定，要多触发几次才能看到正确的结果</li><li>正则表达式匹配trace类时范围一定要控制，否则极有可能出现跑满CPU导致应用卡死的情况</li><li>由于是字节码注入的原理，想要应用恢复到正常情况，需要重启应用。</li></ul><h3 id="greys" tabindex="-1"><a class="header-anchor" href="#greys" aria-hidden="true">#</a> Greys</h3><p>Greys是@杜琨的大作吧。说几个挺棒的功能(部分功能和btrace重合):</p><ul><li><code>sc -df xxx</code>: 输出当前类的详情,包括源码位置和classloader结构</li><li><code>trace class method</code>: 打印出当前方法调用的耗时情况，细分到每个方法, 对排查方法性能时很有帮助。</li></ul><h3 id="arthas" tabindex="-1"><a class="header-anchor" href="#arthas" aria-hidden="true">#</a> Arthas</h3><blockquote><p>Arthas是基于Greys。</p></blockquote><p>具体请参考：<a href="">调试排错 - Java应用在线调试Arthas</a></p><h3 id="javosize" tabindex="-1"><a class="header-anchor" href="#javosize" aria-hidden="true">#</a> javOSize</h3><p>就说一个功能:</p><ul><li><code>classes</code>：通过修改了字节码，改变了类的内容，即时生效。 所以可以做到快速的在某个地方打个日志看看输出，缺点是对代码的侵入性太大。但是如果自己知道自己在干嘛，的确是不错的玩意儿。</li></ul><p>其他功能Greys和btrace都能很轻易做的到，不说了。</p>',12),J={href:"http://www.javosize.com/",target:"_blank",rel:"noopener noreferrer"},M=a("h3",{id:"jprofiler",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jprofiler","aria-hidden":"true"},"#"),n(" JProfiler")],-1),z=a("p",null,"之前判断许多问题要通过JProfiler，但是现在Greys和btrace基本都能搞定了。再加上出问题的基本上都是生产环境(网络隔离)，所以基本不怎么使用了，但是还是要标记一下。",-1),L={href:"https://www.ej-technologies.com/products/jprofiler/overview.html",target:"_blank",rel:"noopener noreferrer"},C=t(`<h2 id="其它工具" tabindex="-1"><a class="header-anchor" href="#其它工具" aria-hidden="true">#</a> 其它工具</h2><h3 id="dmesg" tabindex="-1"><a class="header-anchor" href="#dmesg" aria-hidden="true">#</a> dmesg</h3><p>如果发现自己的java进程悄无声息的消失了，几乎没有留下任何线索，那么dmesg一发，很有可能有你想要的。</p><p>sudo dmesg|grep -i kill|less 去找关键字oom_killer。找到的结果类似如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">6710782.021013</span><span class="token punctuation">]</span> <span class="token function">java</span> invoked oom-killer: <span class="token assign-left variable">gfp_mask</span><span class="token operator">=</span>0xd0, <span class="token assign-left variable">order</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">oom_adj</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">oom_scoe_adj</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token punctuation">[</span><span class="token number">6710782.070639</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>ffffffff8111889<span class="token operator"><span class="token file-descriptor important">8</span>&gt;</span><span class="token punctuation">]</span> ? oom_kill_process+0x68/0x140 
<span class="token punctuation">[</span><span class="token number">6710782.257588</span><span class="token punctuation">]</span> Task <span class="token keyword">in</span> /LXC011175068174 killed as a result of limit of /LXC011175068174 
<span class="token punctuation">[</span><span class="token number">6710784.698347</span><span class="token punctuation">]</span> Memory cgroup out of memory: Kill process <span class="token number">215701</span> <span class="token punctuation">(</span>java<span class="token punctuation">)</span> score <span class="token number">854</span> or sacrifice child 
<span class="token punctuation">[</span><span class="token number">6710784.707978</span><span class="token punctuation">]</span> Killed process <span class="token number">215701</span>, <span class="token environment constant">UID</span> <span class="token number">679</span>, <span class="token punctuation">(</span>java<span class="token punctuation">)</span> total-vm:11017300kB, anon-rss:7152432kB, file-rss:1232kB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上表明，对应的java进程被系统的OOM Killer给干掉了，得分为854. 解释一下OOM killer（Out-Of-Memory killer），该机制会监控机器的内存资源消耗。当机器内存耗尽前，该机制会扫描所有的进程（按照一定规则计算，内存占用，时间等），挑选出得分最高的进程，然后杀死，从而保护机器。</p><p>dmesg日志时间转换公式: log实际时间=格林威治1970-01-01+(当前时间秒数-系统启动至今的秒数+dmesg打印的log时间)秒数：</p><p>date -d &quot;1970-01-01 UTC <code>echo &quot;$(date +%s)-$(cat /proc/uptime|cut -f 1 -d&#39; &#39;)+12288812.926194&quot;|bc </code> seconds&quot; 剩下的，就是看看为什么内存这么大，触发了OOM-Killer了。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,9),S=a("li",null,"文章主要参考了如下， 在此基础上重新整理，和添加新内容。",-1),O=a("li",null,"作者：红魔七号",-1),V={href:"https://yq.aliyun.com/articles/69520",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.cnblogs.com/xuchunlin/p/5671572.html",target:"_blank",rel:"noopener noreferrer"};function I(T,B){const s=p("ExternalLinkIcon");return l(),i("div",null,[r,a("p",null,[n("更多请参考 "),a("a",u,[n("jps - Java Virtual Machine Process Status Tool在新窗口打开"),e(s)])]),d,a("p",null,[n("更多请参考: "),a("a",m,[n("jvm 性能调优工具之 jstack在新窗口打开"),e(s)])]),v,a("p",null,[n("更多请参考："),a("a",k,[n("jvm 性能调优工具之 jinfo在新窗口打开"),e(s)])]),b,a("p",null,[n("更多请参考："),a("a",h,[n("jvm 性能调优工具之 jmap在新窗口打开"),e(s)]),n(" 和 "),a("a",g,[n("jmap - Memory Map在新窗口打开"),e(s)])]),j,a("p",null,[n("具体参数可见oracle官方说明"),a("a",f,[n("jdb - The Java Debugger在新窗口打开"),e(s)])]),_,a("p",null,[n("更详细的可见R大此贴 "),a("a",q,[n("http://rednaxelafx.iteye.com/blog/1847971"),e(s)])]),x,a("p",null,[n("btrace 具体可以参考这里："),a("a",y,[n("https://github.com/btraceio/btrace"),e(s)])]),w,a("p",null,[n("更多请参考："),a("a",J,[n("官网在新窗口打开"),e(s)])]),M,z,a("p",null,[n("更多请参考："),a("a",L,[n("官网在新窗口打开"),e(s)])]),C,a("ul",null,[S,O,a("li",null,[n("文章来源："),a("a",V,[n("https://yq.aliyun.com/articles/69520"),e(s)])]),a("li",null,[a("a",A,[n("https://www.cnblogs.com/xuchunlin/p/5671572.html"),e(s)])])])])}const N=o(c,[["render",I],["__file","java-jvm-debug-tools-list.html.vue"]]);export{N as default};
