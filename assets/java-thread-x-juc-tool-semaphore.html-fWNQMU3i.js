const e=JSON.parse('{"key":"v-277d5092","path":"/java/thread/java-thread-x-juc-tool-semaphore.html","title":"JUC工具类: Semaphore详解","lang":"zh-CN","frontmatter":{"date":"2022-03-15T00:00:00.000Z","category":["Java 多线程"],"tag":["Java 多线程"],"description":"JUC工具类: Semaphore详解 Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。 带着BAT大厂的面试问题去理解 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。 什么是Semaphore? Semaphore内部原理? Semaphore常用方法有哪些? 如何实现线程同步和互斥的? Semaphore适合用在什么场景? 单独使用Semaphore是不会使用到AQS的条件队列? Semaphore中申请令牌(acquire)、释放令牌(release)的实现? Semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么? Semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么? Semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗? Semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/thread/java-thread-x-juc-tool-semaphore.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"JUC工具类: Semaphore详解"}],["meta",{"property":"og:description","content":"JUC工具类: Semaphore详解 Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。 带着BAT大厂的面试问题去理解 提示 请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。 什么是Semaphore? Semaphore内部原理? Semaphore常用方法有哪些? 如何实现线程同步和互斥的? Semaphore适合用在什么场景? 单独使用Semaphore是不会使用到AQS的条件队列? Semaphore中申请令牌(acquire)、释放令牌(release)的实现? Semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么? Semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么? Semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗? Semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T08:42:25.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 多线程"}],["meta",{"property":"article:published_time","content":"2022-03-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T08:42:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC工具类: Semaphore详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T08:42:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"Semaphore源码分析","slug":"semaphore源码分析","link":"#semaphore源码分析","children":[{"level":3,"title":"类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"类的内部类","slug":"类的内部类","link":"#类的内部类","children":[]},{"level":3,"title":"类的内部类 - Sync类","slug":"类的内部类-sync类","link":"#类的内部类-sync类","children":[]},{"level":3,"title":"类的内部类 - NonfairSync类","slug":"类的内部类-nonfairsync类","link":"#类的内部类-nonfairsync类","children":[]},{"level":3,"title":"类的内部类 - FairSync类","slug":"类的内部类-fairsync类","link":"#类的内部类-fairsync类","children":[]},{"level":3,"title":"类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"类的构造函数","slug":"类的构造函数","link":"#类的构造函数","children":[]},{"level":3,"title":"核心函数分析 - acquire函数","slug":"核心函数分析-acquire函数","link":"#核心函数分析-acquire函数","children":[]},{"level":3,"title":"核心函数分析 - release函数","slug":"核心函数分析-release函数","link":"#核心函数分析-release函数","children":[]}]},{"level":2,"title":"Semaphore示例","slug":"semaphore示例","link":"#semaphore示例","children":[]},{"level":2,"title":"更深入理解","slug":"更深入理解","link":"#更深入理解","children":[{"level":3,"title":"单独使用Semaphore是不会使用到AQS的条件队列的","slug":"单独使用semaphore是不会使用到aqs的条件队列的","link":"#单独使用semaphore是不会使用到aqs的条件队列的","children":[]},{"level":3,"title":"场景问题","slug":"场景问题","link":"#场景问题","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703493745000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":2}]},"readingTime":{"minutes":10.11,"words":3033},"filePathRelative":"java/thread/java-thread-x-juc-tool-semaphore.md","localizedDate":"2022年3月15日","excerpt":"<h1> JUC工具类: Semaphore详解</h1>\\n<blockquote>\\n<p>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。</p>\\n</blockquote>\\n<h2> 带着BAT大厂的面试问题去理解</h2>\\n<blockquote>\\n<p>提示</p>\\n<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。</p>\\n</blockquote>\\n<ul>\\n<li>什么是Semaphore?</li>\\n<li>Semaphore内部原理?</li>\\n<li>Semaphore常用方法有哪些? 如何实现线程同步和互斥的?</li>\\n<li>Semaphore适合用在什么场景?</li>\\n<li>单独使用Semaphore是不会使用到AQS的条件队列?</li>\\n<li>Semaphore中申请令牌(acquire)、释放令牌(release)的实现?</li>\\n<li>Semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</li>\\n<li>Semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</li>\\n<li>Semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</li>\\n<li>Semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</li>\\n</ul>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
