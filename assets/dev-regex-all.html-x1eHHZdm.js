import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,f as a}from"./app-PDcd_-E9.js";const s={},d=a(`<h1 id="知识点学习" tabindex="-1"><a class="header-anchor" href="#知识点学习" aria-hidden="true">#</a> 知识点学习</h1><blockquote><p>正则表达式用于文本内容的查找和替换, 通常了解下，具体使用的时候查看下即可。</p></blockquote><h2 id="常用" tabindex="-1"><a class="header-anchor" href="#常用" aria-hidden="true">#</a> 常用</h2><p><strong>Java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pattern</span> p_script <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;正则表达式&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Matcher</span> m_script <span class="token operator">=</span> p_script<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>m_script<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 找到匹配内容，进行后续事情</span>
  <span class="token class-name">String</span> strAid <span class="token operator">=</span> m_script<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Matcher类的常用方法</strong> :</p><ul><li>matches(): 返回整个目标字符串与Pattern是否匹配</li><li>find(): 返回与Pattern匹配的下一个子串</li><li>group(): 返回上一次与Pattern匹配的子串中的内容。group是针对()来说的，group(0)就是指的整个串，group(1) 指的是第一个括号里的东西，group(2)指的第二个括号里的东西</li><li>start(): 返回上一次与Pattern匹配的子串在目标字符串中的开始位置。</li><li>end(): 返回上一次与Pattern匹配的子串在目标字符串中的结束位置加1。</li></ul><p><strong>正则表达式语法</strong></p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\\ </code></td><td>将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“<code>\\\\n</code>”匹配\\n。“<code>\\n</code>”匹配换行符。序列“<code>\\\\</code>”匹配“<code>\\</code>”而“<code>\\(</code>”则匹配“<code>(</code>”。即相当于多种编程语言中都有的“转义字符”的概念。</td></tr><tr><td><code>^</code></td><td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，<code>^</code>也匹配“<code>\\n</code>”或“<code>\\</code>r”之后的位置。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。</td></tr><tr><td><code>*</code></td><td>匹配前面的子表达式任意次。例如，zo*能匹配“z”，“zo”以及“zoo”。*等价于<code>{0,}</code></td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次(大于等于1次)。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于<code>{1,}</code>。</td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于<code>{0,1}</code>。</td></tr><tr><td><code>{n}</code></td><td>n是一个非负整数。匹配确定的n次。例如，“<code>o{2}</code>”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td></tr><tr><td><code>{n,}</code></td><td>n是一个非负整数。至少匹配n次。例如，“<code>o{2,}</code>”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“<code>o{1,}</code>”等价于“o+”。“<code>o{0,}</code>”则等价于“o*”。</td></tr><tr><td><code>{n,m}</code></td><td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“<code>o{1,3}</code>”将匹配“fooooood”中的前三个o。“<code>o{0,1}</code>”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>\`x</td><td>y\`</td></tr><tr><td><code>[xyz]</code></td><td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“plain”中的“a”。</td></tr><tr><td><code>[^xyz]</code></td><td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“plain”中的“plin”。</td></tr><tr><td><code>[a-z]</code></td><td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“a”到“z”范围内的任意小写字母字符。</td></tr><tr><td><code>[^a-z]</code></td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“a”到“z”范围内的任意字符。</td></tr><tr><td><code>.</code></td><td>可以匹配任何字符</td></tr><tr><td><code>\\d</code></td><td>匹配一个数字字符。等价于<code>[0-9]</code></td></tr><tr><td><code>\\D</code></td><td>匹配一个非数字字符。等价于<code>[^0-9]</code></td></tr><tr><td><code>\\s</code></td><td>匹配所有的空白字符，包括空格、制表符、换页符、换行符、回车符 等等。等价于<code>[ \\f\\n\\r\\t\\v]</code>。</td></tr><tr><td><code>\\S</code></td><td>匹配所有的非空白字符</td></tr></tbody></table><h2 id="匹配单个字符" tabindex="-1"><a class="header-anchor" href="#匹配单个字符" aria-hidden="true">#</a> 匹配单个字符</h2><p><strong>.</strong> 可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；</p><p><strong>.</strong> 是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。</p><p>正则表达式一般是区分大小写的，但是也有些实现是不区分。</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nam.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配结果</strong></p><p>My <strong>name</strong> is Zheng.</p><h2 id="匹配一组字符" tabindex="-1"><a class="header-anchor" href="#匹配一组字符" aria-hidden="true">#</a> 匹配一组字符</h2><p><strong>[ ]</strong> 定义一个字符集合；</p><p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。</p><p><strong>-</strong> 只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；</p><p><strong>^</strong> 在 [ ] 中是取非操作。</p><p><strong>应用</strong></p><p>匹配以 abc 为开头，并且最后一个字母不为数字的字符串:</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abc[^0-9]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配结果</strong></p><ol><li><strong>abcd</strong></li><li>abc1</li><li>abc2</li></ol><h2 id="使用元字符" tabindex="-1"><a class="header-anchor" href="#使用元字符" aria-hidden="true">#</a> 使用元字符</h2><h3 id="匹配空白字符" tabindex="-1"><a class="header-anchor" href="#匹配空白字符" aria-hidden="true">#</a> 匹配空白字符</h3><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">[\\b]</td><td style="text-align:center;">回退(删除)一个字符</td></tr><tr><td style="text-align:center;">\\f</td><td style="text-align:center;">换页符</td></tr><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行符</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车符</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">制表符</td></tr><tr><td style="text-align:center;">\\v</td><td style="text-align:center;">垂直制表符</td></tr></tbody></table><p>\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。</p><p>\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它将匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</p><h3 id="匹配特定的字符类别" tabindex="-1"><a class="header-anchor" href="#匹配特定的字符类别" aria-hidden="true">#</a> 匹配特定的字符类别</h3><h4 id="_1-数字元字符" tabindex="-1"><a class="header-anchor" href="#_1-数字元字符" aria-hidden="true">#</a> 1. 数字元字符</h4><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">数字字符，等价于 <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">非数字字符，等价于 <code>[^0-9]</code></td></tr></tbody></table><h4 id="_2-字母数字元字符" tabindex="-1"><a class="header-anchor" href="#_2-字母数字元字符" aria-hidden="true">#</a> 2. 字母数字元字符</h4><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">大小写字母，下划线和数字，等价于 <code>[a-zA-Z0-9\\_]</code></td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">对 \\w 取非</td></tr></tbody></table><h4 id="_3-空白字符元字符" tabindex="-1"><a class="header-anchor" href="#_3-空白字符元字符" aria-hidden="true">#</a> 3. 空白字符元字符</h4><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">任何一个空白字符，等价于 <code>[\\f\\n\\r\\t\\v]</code></td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">对 \\s 取非</td></tr></tbody></table><p>\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\x0A 对应 ASCII 字符 10，等价于 \\n。</p><h2 id="重复匹配" tabindex="-1"><a class="header-anchor" href="#重复匹配" aria-hidden="true">#</a> 重复匹配</h2><ul><li><strong><code>\\+</code></strong> 匹配 1 个或者多个字符</li><li><strong><code>\\*</code></strong> 匹配 0 个或者多个</li><li><strong><code>?</code></strong> 匹配 0 个或者 1 个</li></ul><p><strong>应用</strong></p><p>匹配邮箱地址。</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[\\w.]+@\\w+\\.\\w+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>[\\w.]</code> 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；</p><p><strong>匹配结果</strong></p><p><strong><a href="mailto:abc.def@qq.com">abc.def@qq.com</a></strong></p><ul><li><strong>{n}</strong> 匹配 n 个字符</li><li><strong>{m, n}</strong> 匹配 m~n 个字符</li><li><strong>{m,}</strong> 至少匹配 m 个字符</li></ul><p><code>\\*</code> 和 + 都是贪婪型元字符，会匹配最多的内容。在后面加 ? 可以转换为懒惰型元字符，例如<code>\\*?、+? 和 {m, n}?</code> 。</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a.+c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。</p><p><strong>匹配结果</strong></p><p><strong>abcabcabc</strong></p><h2 id="位置匹配" tabindex="-1"><a class="header-anchor" href="#位置匹配" aria-hidden="true">#</a> 位置匹配</h2><h3 id="单词边界" tabindex="-1"><a class="header-anchor" href="#单词边界" aria-hidden="true">#</a> 单词边界</h3><p><strong>\\b</strong> 可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；<strong>\\B</strong> 匹配一个不是单词边界的位置。</p><p>\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。</p><h3 id="字符串边界" tabindex="-1"><a class="header-anchor" href="#字符串边界" aria-hidden="true">#</a> 字符串边界</h3><p><strong>^</strong> 匹配整个字符串的开头，<strong>$</strong> 匹配结尾。</p><p>^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</p><p>分行匹配模式(multiline)下，换行被当做字符串的边界。</p><p><strong>应用</strong></p><p>匹配代码中以 // 开始的注释行</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>^\\s*\\/\\/.*$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://www.pdai.tech/images/pics/600e9c75-5033-4dad-ae2b-930957db638e.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>匹配结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注释 1 </span>
  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">// 注释 2</span>
  <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用子表达式" tabindex="-1"><a class="header-anchor" href="#使用子表达式" aria-hidden="true">#</a> 使用子表达式</h2><p>使用 <strong>( )</strong> 定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。</p><p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(ab){2,}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配结果</strong></p><p><strong>ababab</strong></p><p><strong>|</strong> 是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(19|20)\\d{2}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配结果</strong></p><ol><li><strong>1900</strong></li><li><strong>2010</strong></li><li>1020</li></ol><p><strong>应用</strong></p><p>匹配 IP 地址。</p><p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的:</p><ul><li>一位数字</li><li>不以 0 开头的两位数字</li><li>1 开头的三位数</li><li>2 开头，第 2 位是 0-4 的三位数</li><li>25 开头，第 3 位是 0-5 的三位数</li></ul><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>((25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\\.){3}(25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配结果</strong></p><ol><li><strong>192.168.0.1</strong></li><li>00.00.00.00</li><li>555.555.555.555</li></ol><h2 id="回溯引用" tabindex="-1"><a class="header-anchor" href="#回溯引用" aria-hidden="true">#</a> 回溯引用</h2><p>回溯引用使用 <strong>\\n</strong> 来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。</p><p><strong>应用</strong></p><p>匹配 HTML 中合法的标题元素。</p><p><strong>正则表达式</strong></p><p>\\1 将回溯引用子表达式 <code>(h[1-6])</code> 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;(h[1-6])&gt;\\w*?&lt;\\/\\1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配结果</strong></p><ol><li><code>**&lt;h1&gt;x&lt;/h1&gt;**</code></li><li><code>**&lt;h2&gt;x&lt;/h2&gt;**</code></li><li><code>&lt;h3&gt;x&lt;/h1&gt;</code></li></ol><h3 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h3><p>需要用到两个正则表达式。</p><p><strong>应用</strong></p><p>修改电话号码格式。</p><p><strong>文本</strong></p><p>313-555-1234</p><p><strong>查找正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(\\d{3})(-)(\\d{3})(-)(\\d{4})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>替换正则表达式</strong></p><p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>($1) $3-$5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结果</strong></p><p>(313) 555-1234</p><h3 id="大小写转换" tabindex="-1"><a class="header-anchor" href="#大小写转换" aria-hidden="true">#</a> 大小写转换</h3><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\l</td><td style="text-align:center;">把下个字符转换为小写</td></tr><tr><td style="text-align:center;">\\u</td><td style="text-align:center;">把下个字符转换为大写</td></tr><tr><td style="text-align:center;">\\L</td><td style="text-align:center;">把\\L 和\\E 之间的字符全部转换为小写</td></tr><tr><td style="text-align:center;">\\U</td><td style="text-align:center;">把\\U 和\\E 之间的字符全部转换为大写</td></tr><tr><td style="text-align:center;">\\E</td><td style="text-align:center;">结束\\L 或者\\U</td></tr></tbody></table><p><strong>应用</strong></p><p>把文本的第二个和第三个字符转换为大写。</p><p><strong>文本</strong></p><p>abcd</p><p><strong>查找</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(\\w)(\\w{2})(\\w)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>替换</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$1\\U$2\\E$3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结果</strong></p><p>aBCd</p><h2 id="前后查找" tabindex="-1"><a class="header-anchor" href="#前后查找" aria-hidden="true">#</a> 前后查找</h2><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。向前查找用 <strong>?=</strong> 来定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 <code>?&lt;=</code> 定义(注: javaScript 不支持向后匹配, java 对其支持也不完善)。</p><p><strong>应用</strong></p><p>查找出邮件地址 @ 字符前面的部分。</p><p><strong>正则表达式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\\w+(?=@)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结果</strong></p><p><strong>abc</strong> @qq.com</p><p>对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p><h2 id="嵌入条件" tabindex="-1"><a class="header-anchor" href="#嵌入条件" aria-hidden="true">#</a> 嵌入条件</h2><h3 id="回溯引用条件" tabindex="-1"><a class="header-anchor" href="#回溯引用条件" aria-hidden="true">#</a> 回溯引用条件</h3><p>条件判断为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p><p><strong>正则表达式</strong></p><p>子表达式 <code>(\\\\()</code> 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 <code>\\)</code> 匹配，也就是匹配右括号。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(\\()?abc(?(1)\\))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结果</strong></p><ol><li><strong>(abc)</strong></li><li><strong>abc</strong></li><li>(abc</li></ol><h3 id="前后查找条件" tabindex="-1"><a class="header-anchor" href="#前后查找条件" aria-hidden="true">#</a> 前后查找条件</h3><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p><p><strong>正则表达式</strong></p><p><code>?(?=-)</code> 为前向查找条件，只有在以 - 为前向查找的结尾能匹配<code>\\d{5}</code>，才继续匹配 <code>-\\d{4}</code> 。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\\d{5}(?(?=-)-\\d{4})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结果</strong></p><ol><li><strong>11111</strong></li><li>22222-</li><li><strong>33333-4444</strong></li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>BenForta. 正则表达式必知必会 [M]. 人民邮电出版社, 2007.</li></ul>`,152),r=[d];function o(i,l){return e(),n("div",null,r)}const g=t(s,[["render",o],["__file","dev-regex-all.html.vue"]]);export{g as default};
