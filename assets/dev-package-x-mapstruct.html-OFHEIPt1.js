import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,a as n,b as s,d as t,f as p}from"./app-5g2Grfu7.js";const i={},u=n("h1",{id:"mapstruct工具库详解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mapstruct工具库详解","aria-hidden":"true"},"#"),s(" MapStruct工具库详解")],-1),r={href:"https://mapstruct.org/documentation/stable/reference/pdf/mapstruct-reference-guide.pdf",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="为什么会引入mapstruct这类工具" tabindex="-1"><a class="header-anchor" href="#为什么会引入mapstruct这类工具" aria-hidden="true">#</a> 为什么会引入MapStruct这类工具</h2><blockquote><p>提示</p><p>首先看下这类工具出现的背景。</p></blockquote><h3 id="javabean-问题引入" tabindex="-1"><a class="header-anchor" href="#javabean-问题引入" aria-hidden="true">#</a> JavaBean 问题引入</h3><p>在开发的时候经常会有业务代码之间有很多的 JavaBean 之间的相互转化，比如PO/DTO/VO/QueryParam之间的转换问题。之前我们的做法是：</p><ul><li><strong>拷贝技术</strong><ul><li>org.apache.commons.beanutils.PropertyUtils.copyProperties</li><li>org.apache.commons.beanutils.BeanUtils.copyProperties</li><li>org.springframework.beans.BeanUtils.copyProperties</li><li>net.sf.cglib.beans.BeanCopier</li></ul></li><li><strong>纯get/set</strong><ul><li>辅助IDE插件拷贝对象时可以自动set所有方法字段 （这种方式可能有些开发人员不清楚）</li><li>不仅看上去冗余添加新的字段时依然需要手动</li><li>开发效率比较低</li></ul></li></ul><h3 id="mapstruct-带来的改变" tabindex="-1"><a class="header-anchor" href="#mapstruct-带来的改变" aria-hidden="true">#</a> MapStruct 带来的改变</h3><blockquote><p>MapSturct 是一个生成类型安全， 高性能且无依赖的 JavaBean 映射代码的注解处理器（annotation processor）。</p></blockquote><p>工具可以帮我们实现 JavaBean 之间的转换， 通过注解的方式。</p><p>同时， 作为一个工具类，相比于手写， 其应该具有便捷， 不容易出错的特点。</p><h2 id="mapstruct入门例子" tabindex="-1"><a class="header-anchor" href="#mapstruct入门例子" aria-hidden="true">#</a> MapStruct入门例子</h2><blockquote><p>这里展示最基本的PO转VO的例子，使用的是IDEA + Lombok + MapStruct</p></blockquote><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="pom-xml" tabindex="-1"><a class="header-anchor" href="#pom-xml" aria-hidden="true">#</a> Pom.xml</h3><blockquote><p>注意：基于当前IDEA设置并不需要<code>mapstruct-processor</code>的依赖</p></blockquote><p>一般来说会加载两个包：</p><ul><li><code>org.mapstruct:mapstruct</code>: 包含Mapstruct核心，比如注解等；如果是<code>mapstruct-jdk8</code>会引入一些jdk8的语言特性;</li><li><code>org.mapstruct:mapstruct-processor</code>: 处理注解用的，可以根据注解自动生成mapstruct的mapperImpl类</li></ul><p>如下示例基于IDEA实现，可以在build阶段的<code>annotationProcessorPaths</code>中配置<code>mapstruct-processor</code>的path。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>1.4.0.Beta3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.projectlombok.version</span><span class="token punctuation">&gt;</span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.projectlombok.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- lombok dependencies should not end up on classpath --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.projectlombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- fastjson --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.71<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!-- See https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html --&gt;</span>
                    <span class="token comment">&lt;!-- Classpath elements to supply as annotation processor path. If specified, the compiler   --&gt;</span>
                    <span class="token comment">&lt;!-- will detect annotation processors only in those classpath elements. If omitted, the     --&gt;</span>
                    <span class="token comment">&lt;!-- default classpath is used to detect annotation processors. The detection itself depends --&gt;</span>
                    <span class="token comment">&lt;!-- on the configuration of annotationProcessors.                                           --&gt;</span>
                    <span class="token comment">&lt;!--                                                                                         --&gt;</span>
                    <span class="token comment">&lt;!-- According to this documentation, the provided dependency processor is not considered!   --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.projectlombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entity" tabindex="-1"><a class="header-anchor" href="#entity" aria-hidden="true">#</a> Entity</h3><p>这里面假设基于一些业务需求采用的是MySQL，且将一些扩展的数据放在了config字段中，并以JSON转String存储。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span> <span class="token comment">// 密码</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>  <span class="token comment">// 性别</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span> <span class="token comment">// 生日</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span> <span class="token comment">// 创建时间</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> config<span class="token punctuation">;</span> <span class="token comment">// 其他扩展信息，以JSON格式存储</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vo-类" tabindex="-1"><a class="header-anchor" href="#vo-类" aria-hidden="true">#</a> VO 类</h3><p>最后真正展示的应该：</p><ul><li>不显示密码；</li><li>将日期转换；</li><li>config要转成对象的list；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> createTime<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserConfig</span><span class="token punctuation">&gt;</span></span> config<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserConfig</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> field1<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> field2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mapper-或者converter" tabindex="-1"><a class="header-anchor" href="#mapper-或者converter" aria-hidden="true">#</a> mapper(或者converter)</h3><p>注意：</p><ul><li>这里没用@Mappings，且看最后编译出的类文件，会自动加</li><li>密码需要ignore</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserConverter</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserConverter</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">UserVo</span> <span class="token function">do2vo</span><span class="token punctuation">(</span><span class="token class-name">User</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;gender&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">vo2Do</span><span class="token punctuation">(</span><span class="token class-name">UserVo</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">do2voList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo<span class="token punctuation">.</span>UserConfig</span><span class="token punctuation">&gt;</span></span> <span class="token function">strConfigToListUserConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token class-name">UserVo<span class="token punctuation">.</span>UserConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">listUserConfigToStrConfig</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo<span class="token punctuation">.</span>UserConfig</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试类" tabindex="-1"><a class="header-anchor" href="#测试类" aria-hidden="true">#</a> 测试类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">do2VoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token string">&quot;[{\\&quot;field1\\&quot;:\\&quot;Test Field1\\&quot;,\\&quot;field2\\&quot;:500}]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token class-name">UserConverter</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">do2vo</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// asset</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>userVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// print</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        User(id=1, username=zhangsan, password=abc123, sex=1, birthday=1999-09-27, createTime=2020-08-17T14:54:01.528, config=[{&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500}])</span>
<span class="token comment">//        UserVo(id=1, username=zhangsan, password=abc123, gender=1, birthday=1999-09-27, createTime=2020-08-17 14:54:01, config=[UserVo.UserConfig(field1=Test Field1, field2=500)])</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vo2DoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserVo<span class="token punctuation">.</span>UserConfig</span> userConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo<span class="token punctuation">.</span>UserConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userConfig<span class="token punctuation">.</span><span class="token function">setField1</span><span class="token punctuation">(</span><span class="token string">&quot;Test Field1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userConfig<span class="token punctuation">.</span><span class="token function">setField2</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token string">&quot;2020-01-18 15:32:54&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>userConfig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">UserConverter</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">vo2Do</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// asset</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>userVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// print</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mapstrcut实现的原理" tabindex="-1"><a class="header-anchor" href="#mapstrcut实现的原理" aria-hidden="true">#</a> MapStrcut实现的原理?</h2><p>MapStruct 来生成的代码， 其类似于人手写。 速度上可以得到保证。</p><p>前面例子中生成的代码可以在编译后看到, 在 target/generated-sources/annotations 里可以看到; 同时真正在代码包执行的可以在target/classes包中看到。</p><h3 id="编译后的类" tabindex="-1"><a class="header-anchor" href="#编译后的类" aria-hidden="true">#</a> 编译后的类</h3><ul><li>编译后的class位置</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>编译后的内容</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConverterImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserConverter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserVo</span> <span class="token function">do2vo</span><span class="token punctuation">(</span><span class="token class-name">User</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> var1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">UserVo</span> userVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        userVo<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            userVo<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        userVo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVo<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVo<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        userVo<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span> <span class="token function">strConfigToListUserConfig</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> userVo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">vo2Do</span><span class="token punctuation">(</span><span class="token class-name">UserVo</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> var1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span> <span class="token function">listUserConfigToStrConfig</span><span class="token punctuation">(</span> var1<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">do2voList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> userList <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">User</span> user <span class="token operator">:</span> userList <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token function">do2vo</span><span class="token punctuation">(</span> user <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="这里面用了什么机制" tabindex="-1"><a class="header-anchor" href="#这里面用了什么机制" aria-hidden="true">#</a> 这里面用了什么机制？</h3><blockquote><p>这和Lombok实现机制一致。</p></blockquote><p>核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。</p><ul><li><strong>运行时解析</strong></li></ul><p>运行时能够解析的注解，必须将@Retention设置为RUNTIME, 比如<code>@Retention(RetentionPolicy.RUNTIME)</code>，这样就可以通过反射拿到该注解。java.lang,reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。</p><ul><li><strong>编译时解析</strong></li></ul><p>编译时解析有两种机制，分别简单描述下：</p><p>1）Annotation Processing Tool</p><p>apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：</p><ul><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行</li></ul><p>2）Pluggable Annotation Processing API</p>`,50),d={href:"https://www.jcp.org/en/jsr/proposalDetails?id=269",target:"_blank",rel:"noopener noreferrer"},g=p('<figure><img src="https://www.pdai.tech/images/develop/package/dev-package-lombok-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Lombok本质上就是一个实现了“JSR 269 API”的程序。在使用javac的过程中，它产生作用的具体流程如下：</p><ul><li>javac对源代码进行分析，生成了一棵抽象语法树（AST）</li><li>运行过程中调用实现了“JSR 269 API”的Lombok程序</li><li>此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点</li><li>javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/dev-package-lombok-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上面的Lombok执行的流程图中可以看出，在Javac 解析成AST抽象语法树之后, Lombok 根据自己编写的注解处理器，动态地修改 AST，增加新的节点（即Lombok自定义注解所需要生成的代码），最终通过分析生成JVM可执行的字节码Class文件。使用Annotation Processing自定义注解是在编译阶段进行修改，而JDK的反射技术是在运行时动态修改，两者相比，反射虽然更加灵活一些但是带来的性能损耗更加大。</p><h2 id="mapstruct更多例子" tabindex="-1"><a class="header-anchor" href="#mapstruct更多例子" aria-hidden="true">#</a> MapStruct更多例子</h2><p>提示</p>',7),v={href:"https://github.com/mapstruct/mapstruct-examples",target:"_blank",rel:"noopener noreferrer"},m=p(`<h3 id="自定义属性的转化" tabindex="-1"><a class="header-anchor" href="#自定义属性的转化" aria-hidden="true">#</a> 自定义属性的转化</h3><blockquote><p>注意在不同的JDK版本中做法不太一样。</p></blockquote><ul><li><strong>JDK 8以上版本</strong></li></ul><p>一般常用的类型字段转换 MapStruct都能替我们完成，但是有一些是我们自定义的对象类型，MapStruct就不能进行字段转换，这就需要我们编写对应的类型转换方法，笔者使用的是JDK8，支持接口中的默认方法，可以直接在转换器中添加自定义类型转换方法。</p><p>上述例子中User对象的config属性是一个JSON字符串，UserVo对象中是List类型的，这需要实现JSON字符串与对象的互转。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">default</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserConfig</span><span class="token punctuation">&gt;</span></span> <span class="token function">strConfigToListUserConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token class-name">UserConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">listUserConfigToStrConfig</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserConfig</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>JDK 8 以下版本</strong></li></ul><p>如果是 JDK8以下的，不支持默认方法，可以另外定义一个 转换器，然后再当前转换器的 @Mapper 中通过 uses = XXX.class 进行引用。</p><p>定义好方法之后，MapStruct当匹配到合适类型的字段时，会调用我们自定义的转换方法进行转换。</p><h3 id="转为多个对象" tabindex="-1"><a class="header-anchor" href="#转为多个对象" aria-hidden="true">#</a> 转为多个对象</h3><p>比如上面例子中User可以转为UserQueryParam, 业务功能上比如通过UserQueryParam里面的参数进行查找用户的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserQueryParam</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加转换方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">UserQueryParam</span> <span class="token function">vo2QueryParam</span><span class="token punctuation">(</span><span class="token class-name">User</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="spring中使用mapstruct" tabindex="-1"><a class="header-anchor" href="#spring中使用mapstruct" aria-hidden="true">#</a> Spring中使用MapStruct</h3><blockquote><p>除了UserConverter.INSTANCE这种方式还可以注入Spring容器中使用。</p></blockquote><ul><li>componentModel</li></ul><p>当添加<code>componentModel=&quot;spring&quot;</code>时，它会在实现类上自动添加<code>@Component</code>注解，这样就能被Spring记性component scan，从而加载到springContext中，进而被<code>@Autowird</code>注入使用。（其它还有<code>jsr330</code>和<code>cdi</code>标准，基本上使用<code>componentModel=&quot;spring&quot;</code>就够了）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel<span class="token operator">=</span><span class="token string">&quot;spring&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserConverter</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引入和测试</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConverterTest</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Resource</span>
  <span class="token keyword">private</span> <span class="token class-name">UserConverter</span> userConverter<span class="token punctuation">;</span>

  <span class="token comment">// test methods</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多个对象转一个对象" tabindex="-1"><a class="header-anchor" href="#多个对象转一个对象" aria-hidden="true">#</a> 多个对象转一个对象</h3><p>比如上述例子中User购买了东西，需要邮寄到他的地址Address，这时需要展示UserWithAddress的信息：</p><ul><li>Address</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> zipCode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> houseNo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserWithAddressVo</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserWithAddressVo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> zipCode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> houseNumber<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>converter方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;person.description&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;address.houseNo&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;houseNumber&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">UserWithAddressVo</span> <span class="token function">userAndAddress2Vo</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Address</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在多对一转换时， 遵循以下几个原则</p></blockquote><ul><li>当多个对象中， 有其中一个为 null， 则会直接返回 null</li><li>如一对一转换一样， 属性通过名字来自动匹配。 因此， 名称和类型相同的不需要进行特殊处理</li><li>当多个原对象中，<strong>有相同名字的属性时，需要通过 @Mapping 注解来具体的指定</strong>， 以免出现歧义（不指定会报错）。 如上面的 description</li></ul><p>属性也可以直接从传入的参数来赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;person.description&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;hn&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;houseNumber&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">UserWithAddressVo</span> <span class="token function">userAndAddressHn2Vo</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Integer</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mapstruct再深入理解" tabindex="-1"><a class="header-anchor" href="#mapstruct再深入理解" aria-hidden="true">#</a> MapStruct再深入理解</h2><p>提示</p><p>在了解基本的MapStruct使用之后，我们将从多个角度来深入理解MapStruct这个工具。</p><h3 id="intellij-idea-中对mapstruct的支持如何" tabindex="-1"><a class="header-anchor" href="#intellij-idea-中对mapstruct的支持如何" aria-hidden="true">#</a> IntelliJ IDEA 中对MapStruct的支持如何？</h3>`,37),b={href:"https://mapstruct.org/documentation/ide-support/",target:"_blank",rel:"noopener noreferrer"},h=p(`<h4 id="maven支持" tabindex="-1"><a class="header-anchor" href="#maven支持" aria-hidden="true">#</a> Maven支持</h4><ul><li>在IntelliJ 2018.1.1之前, 注意在早期的版本中<code>artifactId</code>还需要加jdk版本，比如<code>mapstruct-jdk8</code>；</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>在IntelliJ 2018.1.1之后</strong>是可以不添加<code>mapstruct-processor</code>的</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>1.4.0.Beta3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!-- See https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html --&gt;</span>
                    <span class="token comment">&lt;!-- Classpath elements to supply as annotation processor path. If specified, the compiler   --&gt;</span>
                    <span class="token comment">&lt;!-- will detect annotation processors only in those classpath elements. If omitted, the     --&gt;</span>
                    <span class="token comment">&lt;!-- default classpath is used to detect annotation processors. The detection itself depends --&gt;</span>
                    <span class="token comment">&lt;!-- on the configuration of annotationProcessors.                                           --&gt;</span>
                    <span class="token comment">&lt;!--                                                                                         --&gt;</span>
                    <span class="token comment">&lt;!-- According to this documentation, the provided dependency processor is not considered!   --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编辑器支持" tabindex="-1"><a class="header-anchor" href="#编辑器支持" aria-hidden="true">#</a> 编辑器支持</h4><ul><li>编辑器支持：自动补全</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-1.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>编辑器支持：连接跳转</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-2.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>编辑器支持：查找使用方式</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="eclipse-中对mapstruct的支持如何" tabindex="-1"><a class="header-anchor" href="#eclipse-中对mapstruct的支持如何" aria-hidden="true">#</a> Eclipse 中对MapStruct的支持如何？</h3><blockquote><p>必须保证你使用的Eclipse中包含<code>m2e-apt</code>插件，且尽可能的升级这个插件到最新的版本，这个插件主要用于自动应用<code>annotation processor</code>相关的配置。</p></blockquote><h4 id="maven支持-1" tabindex="-1"><a class="header-anchor" href="#maven支持-1" aria-hidden="true">#</a> Maven支持</h4><p>同时在pom.xml中推荐你加入如下配置, 原因请看官方给的如下注释:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- automatically run annotation processors within the incremental compilation --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>m2e.apt.activation</span><span class="token punctuation">&gt;</span></span>jdt_apt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>m2e.apt.activation</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编辑器支持-1" tabindex="-1"><a class="header-anchor" href="#编辑器支持-1" aria-hidden="true">#</a> 编辑器支持</h3><ul><li>自动补全</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>快速修复</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="与其它属性拷贝框架性能到底相差多少" tabindex="-1"><a class="header-anchor" href="#与其它属性拷贝框架性能到底相差多少" aria-hidden="true">#</a> 与其它属性拷贝框架性能到底相差多少？</h3><blockquote><p>基于我们对它原理的理解，我们知道mapstrcut最后执行时依然是get/set，所以性能是比较高的。同时我们也知道反射优化是可以解决一部分性能问题的，那么通过反射方式进行的属性拷贝和get/set这种性能相差多少呢？</p></blockquote><h4 id="有哪些属性拷贝方式呢" tabindex="-1"><a class="header-anchor" href="#有哪些属性拷贝方式呢" aria-hidden="true">#</a> 有哪些属性拷贝方式呢？</h4><p>综合我们前面的文章，常用的util包中有如下属性拷贝类：</p><ul><li>org.apache.commons.beanutils.PropertyUtils.copyProperties</li><li>org.apache.commons.beanutils.BeanUtils.copyProperties</li><li>org.springframework.beans.BeanUtils.copyProperties</li><li>net.sf.cglib.beans.BeanCopier</li></ul><h4 id="使用属性拷贝和set-get方式性能差异" tabindex="-1"><a class="header-anchor" href="#使用属性拷贝和set-get方式性能差异" aria-hidden="true">#</a> 使用属性拷贝和set/get方式性能差异</h4><ul><li>10000次</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>1000次</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>10次</li></ul><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>结论 <ul><li>property少，写起来也不麻烦，就直接用传统的getter/setter，性能最好</li><li>property多，转换不频繁，那就省点事吧，使用org.apache.commons.beanutils.BeanUtils.copyProperties</li><li>property多，转换很频繁，为性能考虑，使用net.sf.cglib.beans.BeanCopier.BeanCopier，性能近乎getter/setter。但是BeanCopier的创建时消耗较大，所以不要频繁创建该实体，最好的处理方式是静态化或者缓存起来。</li></ul></li></ul>`,35),f={href:"https://www.cnblogs.com/zhaoyanghoo/p/5722113.html",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"和mapstruct类似框架的对比",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#和mapstruct类似框架的对比","aria-hidden":"true"},"#"),s(" 和MapStruct类似框架的对比？")],-1),y={href:"https://www.baeldung.com/java-performance-mapping-frameworks",target:"_blank",rel:"noopener noreferrer"},_=n("h4",{id:"其它类似方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其它类似方案","aria-hidden":"true"},"#"),s(" 其它类似方案")],-1),I=n("ul",null,[n("li",null,[n("strong",null,"Dozer")])],-1),U=n("p",null,"Dozer 是一个映射框架，它使用递归将数据从一个对象复制到另一个对象。框架不仅能够在 bean 之间复制属性，还能够在不同类型之间自动转换。",-1),x={href:"http://dozer.sourceforge.net/documentation/gettingstarted.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.baeldung.com/dozer",target:"_blank",rel:"noopener noreferrer"},j=n("ul",null,[n("li",null,[n("strong",null,"Orika")])],-1),S=n("p",null,"Orika 是一个 bean 到 bean 的映射框架，它递归地将数据从一个对象复制到另一个对象。",-1),M=n("p",null,"Orika 的工作原理与 Dozer 相似。两者之间的主要区别是 Orika 使用字节码生成。这允许以最小的开销生成更快的映射器。",-1),C={href:"https://orika-mapper.github.io/orika-docs/%EF%BC%8C%E6%88%96%E8%80%85%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%98%85%E8%AF%BB%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%9Ahttps://www.baeldung.com/orika-mapping%E3%80%82",target:"_blank",rel:"noopener noreferrer"},P=n("ul",null,[n("li",null,[n("strong",null,"ModelMapper")])],-1),T=n("p",null,"ModelMapper 是一个旨在简化对象映射的框架，它根据约定确定对象之间的映射方式。它提供了类型安全的和重构安全的 API。",-1),A={href:"http://modelmapper.org/",target:"_blank",rel:"noopener noreferrer"},V=n("ul",null,[n("li",null,[n("strong",null,"JMapper")])],-1),D=n("p",null,"JMapper 是一个映射框架，旨在提供易于使用的、高性能的 Java bean 之间的映射。该框架旨在使用注释和关系映射应用 DRY 原则。该框架允许不同的配置方式:基于注释、XML 或基于 api。",-1),L={href:"https://github.com/jmapper-framework/jmapper-core/wiki%E3%80%82",target:"_blank",rel:"noopener noreferrer"},E=n("h4",{id:"性能对比",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性能对比","aria-hidden":"true"},"#"),s(" 性能对比")],-1),J={href:"https://www.baeldung.com/java-microbenchmark-harness",target:"_blank",rel:"noopener noreferrer"},B=p('<p>测试结果（某一种）</p><figure><img src="https://www.pdai.tech/images/develop/package/package-mapstrcut-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所有的基准测试都表明，根据场景的不同，MapStruct 和 JMapper 都是不错的选择，尽管 MapStruct 对 SingleShotTime 给出的结果要差得多。</p><h3 id="其它常见问题" tabindex="-1"><a class="header-anchor" href="#其它常见问题" aria-hidden="true">#</a> 其它常见问题?</h3><ul><li>当两个对象属性不一致时，比如User对象中某个字段不存在与UserVo当中时，在编译时会有警告提示，可以在@Mapping中配置 ignore = true，当字段较多时，可以直接在@Mapper中设置unmappedTargetPolicy属性或者unmappedSourcePolicy属性为 ReportingPolicy.IGNORE即可。</li><li>如果项目中也同时使用到了 Lombok，一定要注意 Lombok的版本要等于或者高于1.18.10，否则会有编译不通过的情况发生。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',6),N={href:"https://mapstruct.org/documentation/stable/reference/pdf/mapstruct-reference-guide.pdf",target:"_blank",rel:"noopener noreferrer"},z={href:"https://mapstruct.org/documentation",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.cnblogs.com/zhaoyanghoo/p/5722113.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.baeldung.com/java-performance-mapping-frameworks",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.cnblogs.com/javaguide/p/11861749.html",target:"_blank",rel:"noopener noreferrer"};function K(H,Q){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("MapStruct是一款非常实用Java工具，主要用于解决对象之间的拷贝问题，比如PO/DTO/VO/QueryParam之间的转换问题。区别于BeanUtils这种通过反射，它通过编译器编译生成常规方法，将可以很大程度上提升效率。全面的官方手册可以参考"),n("a",r,[s("官方文档PDF在新窗口打开"),t(a)]),s("。")])]),k,n("p",null,[n("a",d,[s("JSR 269: Pluggable Annotation Processing API在新窗口打开"),t(a)]),s("自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：")]),g,n("p",null,[s("一般特性和例子最好直接"),n("a",v,[s("参考官网例子在新窗口打开"),t(a)]),s("， 这里会差异化的体现一些常见的用法。")]),m,n("blockquote",null,[n("p",null,[s("通常来说IDE对于MapStruct这类工具的支持体现在两方面，一个是Maven的集成，另一个是编辑时的提示（Hit）； 相关的支持可以"),n("a",b,[s("参考官网在新窗口打开"),t(a)]),s("。")])]),h,n("p",null,[s("更多测试对比可以参考"),n("a",f,[s("这里在新窗口打开"),t(a)])]),w,n("blockquote",null,[n("p",null,[s("我们再看下是否有其它类似的框架呢？这里主要来源"),n("a",y,[s("这篇文章在新窗口打开"),t(a)])])]),_,I,U,n("p",null,[s("更多关于 Dozer 的内容可以在官方文档中找到： "),n("a",x,[s("http://dozer.sourceforge.net/documentation/gettingstarted.html"),t(a)]),s(" ，或者你也可以阅读这篇文章："),n("a",q,[s("https://www.baeldung.com/dozer"),t(a)]),s(" 。")]),j,S,M,n("p",null,[s("更多关于 Orika 的内容可以在官方文档中找到："),n("a",C,[s("https://orika-mapper.github.io/orika-docs/，或者你也可以阅读这篇文章：https://www.baeldung.com/orika-mapping。"),t(a)])]),P,T,n("p",null,[s("更多关于 ModelMapper 的内容可以在官方文档中找到："),n("a",A,[s("http://modelmapper.org/"),t(a)]),s(" 。")]),V,D,n("p",null,[s("更多关于 JMapper 的内容可以在官方文档中找到："),n("a",L,[s("https://github.com/jmapper-framework/jmapper-core/wiki。"),t(a)])]),E,n("p",null,[s("对于性能测试，我们可以使用 Java Microbenchmark Harness，关于如何使用它的更多信息可以在 这篇文章："),n("a",J,[s("https://www.baeldung.com/java-microbenchmark-harness"),t(a)]),s(" 中找到。")]),B,n("ul",null,[n("li",null,[n("a",N,[s("官方文档PDF在新窗口打开"),t(a)])]),n("li",null,[n("a",z,[s("https://mapstruct.org/documentation"),t(a)])]),n("li",null,[n("a",O,[s("https://www.cnblogs.com/zhaoyanghoo/p/5722113.html"),t(a)])]),n("li",null,[n("a",F,[s("https://www.baeldung.com/java-performance-mapping-frameworks"),t(a)])]),n("li",null,[n("a",R,[s("https://www.cnblogs.com/javaguide/p/11861749.html"),t(a)])])])])}const X=e(i,[["render",K],["__file","dev-package-x-mapstruct.html.vue"]]);export{X as default};
