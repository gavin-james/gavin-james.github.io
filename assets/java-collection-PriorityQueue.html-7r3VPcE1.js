const e=JSON.parse('{"key":"v-07c1af0d","path":"/java/collection/java-collection-PriorityQueue.html","title":"Collection - PriorityQueue源码解析","lang":"zh-CN","frontmatter":{"date":"2022-02-15T00:00:00.000Z","category":["Java 集合"],"tag":["Java 集合"],"description":"Collection - PriorityQueue源码解析 本文主要对Collection - PriorityQueue进行源码解析。 概述 前面以Java ArrayDeque为例讲解了Stack和Queue，其实还有一种特殊的队列叫做PriorityQueue，即优先队列。优先队列的作用是能保证每次取出的元素都是队列中权值最小的(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，元素大小的评判可以通过元素本身的自然顺序(*natural ordering*)，也可以通过构造时传入的比较器(Comparator，类似于C++的仿函数)。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/java/collection/java-collection-PriorityQueue.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"Collection - PriorityQueue源码解析"}],["meta",{"property":"og:description","content":"Collection - PriorityQueue源码解析 本文主要对Collection - PriorityQueue进行源码解析。 概述 前面以Java ArrayDeque为例讲解了Stack和Queue，其实还有一种特殊的队列叫做PriorityQueue，即优先队列。优先队列的作用是能保证每次取出的元素都是队列中权值最小的(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，元素大小的评判可以通过元素本身的自然顺序(*natural ordering*)，也可以通过构造时传入的比较器(Comparator，类似于C++的仿函数)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-25T09:17:23.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"Java 集合"}],["meta",{"property":"article:published_time","content":"2022-02-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-25T09:17:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Collection - PriorityQueue源码解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-25T09:17:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"方法剖析","slug":"方法剖析","link":"#方法剖析","children":[{"level":3,"title":"add()和offer()","slug":"add-和offer","link":"#add-和offer","children":[]},{"level":3,"title":"element()和peek()","slug":"element-和peek","link":"#element-和peek","children":[]},{"level":3,"title":"remove()和poll()","slug":"remove-和poll","link":"#remove-和poll","children":[]},{"level":3,"title":"remove(Object o)","slug":"remove-object-o","link":"#remove-object-o","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1703495843000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":3}]},"readingTime":{"minutes":5.65,"words":1694},"filePathRelative":"java/collection/java-collection-PriorityQueue.md","localizedDate":"2022年2月15日","excerpt":"<h1> Collection - PriorityQueue源码解析</h1>\\n<blockquote>\\n<p>本文主要对Collection - PriorityQueue进行源码解析。</p>\\n</blockquote>\\n<h2> 概述</h2>\\n<p>前面以Java <em>ArrayDeque</em>为例讲解了<em>Stack</em>和<em>Queue</em>，其实还有一种特殊的队列叫做<em>PriorityQueue</em>，即优先队列。<strong>优先队列的作用是能保证每次取出的元素都是队列中权值最小的</strong>(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，<strong>元素大小的评判可以通过元素本身的自然顺序(*natural ordering*)，也可以通过构造时传入的比较器</strong>(<em>Comparator</em>，类似于C++的仿函数)。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
