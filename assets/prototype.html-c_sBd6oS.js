const e=JSON.parse('{"key":"v-7dc0f6dd","path":"/develop/design/prototype.html","title":"创建型原型模式","lang":"zh-CN","frontmatter":{"title":"创建型原型模式","date":"2019-10-14T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"原型模式基本介绍 在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。 原型模式（Prototype Pattern）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。 原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。 工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 对象.clone()。","head":[["meta",{"property":"og:url","content":"http://www.gavin-james.com/develop/design/prototype.html"}],["meta",{"property":"og:site_name","content":"Gavin James"}],["meta",{"property":"og:title","content":"创建型原型模式"}],["meta",{"property":"og:description","content":"原型模式基本介绍 在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。 原型模式（Prototype Pattern）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。 原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。 工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 对象.clone()。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-28T01:56:10.000Z"}],["meta",{"property":"article:author","content":"gavin-james"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-28T01:56:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建型原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-28T01:56:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gavin-james\\",\\"url\\":\\"http://www.gavin-james.xyz\\"}]}"]]},"headers":[{"level":2,"title":"原型模式基本介绍","slug":"原型模式基本介绍","link":"#原型模式基本介绍","children":[]},{"level":2,"title":"原型模式原理结构图","slug":"原型模式原理结构图","link":"#原型模式原理结构图","children":[]},{"level":2,"title":"克隆羊案例","slug":"克隆羊案例","link":"#克隆羊案例","children":[]},{"level":2,"title":"传统方式解决克隆羊实例","slug":"传统方式解决克隆羊实例","link":"#传统方式解决克隆羊实例","children":[]},{"level":2,"title":"传统的方式的优缺点","slug":"传统的方式的优缺点","link":"#传统的方式的优缺点","children":[]},{"level":2,"title":"原型模式解决克隆羊实例","slug":"原型模式解决克隆羊实例","link":"#原型模式解决克隆羊实例","children":[]},{"level":2,"title":"Spring 框架的原型模式","slug":"spring-框架的原型模式","link":"#spring-框架的原型模式","children":[]},{"level":2,"title":"深入讨论：浅拷贝和深拷贝","slug":"深入讨论-浅拷贝和深拷贝","link":"#深入讨论-浅拷贝和深拷贝","children":[]},{"level":2,"title":"原型模式的注意事项和细节","slug":"原型模式的注意事项和细节","link":"#原型模式的注意事项和细节","children":[]}],"git":{"createdTime":1687917370000,"updatedTime":1687917370000,"contributors":[{"name":"gavin-james","email":"meaganlindesy1258@gmail.com","commits":1}]},"readingTime":{"minutes":7.91,"words":2374},"filePathRelative":"develop/design/prototype.md","localizedDate":"2019年10月14日","excerpt":"<h2> 原型模式基本介绍</h2>\\n<p>在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。</p>\\n<p><strong>原型模式</strong>（Prototype Pattern）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。</p>\\n<p>原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。</p>\\n<p>工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 <code>对象.clone()</code>。</p>","copyright":{"author":"gavin-james","license":"https://github.com/gavin-james/gavin-james.github.io/LICENSE"},"autoDesc":true}');export{e as data};
