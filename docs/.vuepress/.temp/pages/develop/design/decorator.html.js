export const data = JSON.parse("{\"key\":\"v-3b93eb64\",\"path\":\"/develop/design/decorator.html\",\"title\":\"结构型装饰者模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"结构型装饰者模式\",\"date\":\"2019-10-22T00:00:00.000Z\",\"category\":[\"设计模式\"],\"tag\":[\"设计模式\"],\"description\":\"装饰器模式的定义与特点 上班族大多都有睡懒觉的习惯，每天早上上班时间都很紧张，于是很多人为了多睡一会，就会用方便的方式解决早餐问题。有些人早餐可能会吃煎饼，煎饼中可以加鸡蛋，也可以加香肠，但是不管怎么「加码」，都还是一个煎饼。在现实生活中，常常需要对现有产品增加新的功能或美化其外观，如房子装修、相片加相框等，都是装饰器模式。 在软件开发过程中，有时想用一些现存的组件。这些组件可能只是完成了一些核心功能。但在不改变其结构的情况下，可以动态地扩展其功能。所有这些都可以釆用装饰器模式来实现。 装饰器模式（Decorator Pattern）的定义：指 在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式，也体现了开闭原则（OCP）。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/develop/design/decorator.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin James\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"结构型装饰者模式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"装饰器模式的定义与特点 上班族大多都有睡懒觉的习惯，每天早上上班时间都很紧张，于是很多人为了多睡一会，就会用方便的方式解决早餐问题。有些人早餐可能会吃煎饼，煎饼中可以加鸡蛋，也可以加香肠，但是不管怎么「加码」，都还是一个煎饼。在现实生活中，常常需要对现有产品增加新的功能或美化其外观，如房子装修、相片加相框等，都是装饰器模式。 在软件开发过程中，有时想用一些现存的组件。这些组件可能只是完成了一些核心功能。但在不改变其结构的情况下，可以动态地扩展其功能。所有这些都可以釆用装饰器模式来实现。 装饰器模式（Decorator Pattern）的定义：指 在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式，也体现了开闭原则（OCP）。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-04-12T04:14:48.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"gavin-james\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2019-10-22T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-04-12T04:14:48.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"结构型装饰者模式\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2019-10-22T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-04-12T04:14:48.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"gavin-james\\\",\\\"url\\\":\\\"http://www.gavin-james.xyz\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"装饰器模式的定义与特点\",\"slug\":\"装饰器模式的定义与特点\",\"link\":\"#装饰器模式的定义与特点\",\"children\":[]},{\"level\":2,\"title\":\"装饰器模式的结构与实现\",\"slug\":\"装饰器模式的结构与实现\",\"link\":\"#装饰器模式的结构与实现\",\"children\":[]},{\"level\":2,\"title\":\"星巴克咖啡订单项目\",\"slug\":\"星巴克咖啡订单项目\",\"link\":\"#星巴克咖啡订单项目\",\"children\":[{\"level\":3,\"title\":\"方案 1（较差）\",\"slug\":\"方案-1-较差\",\"link\":\"#方案-1-较差\",\"children\":[]},{\"level\":3,\"title\":\"方案 2（较好）\",\"slug\":\"方案-2-较好\",\"link\":\"#方案-2-较好\",\"children\":[]}]},{\"level\":2,\"title\":\"装饰者模式解决订单项目\",\"slug\":\"装饰者模式解决订单项目\",\"link\":\"#装饰者模式解决订单项目\",\"children\":[]},{\"level\":2,\"title\":\"JDK IO 的装饰者模式剖析\",\"slug\":\"jdk-io-的装饰者模式剖析\",\"link\":\"#jdk-io-的装饰者模式剖析\",\"children\":[]},{\"level\":2,\"title\":\"装饰器模式的应用场景\",\"slug\":\"装饰器模式的应用场景\",\"link\":\"#装饰器模式的应用场景\",\"children\":[]}],\"git\":{\"createdTime\":1681272888000,\"updatedTime\":1681272888000,\"contributors\":[{\"name\":\"gavin-james\",\"email\":\"meaganlindesy1258@gmail.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":7.24,\"words\":2171},\"filePathRelative\":\"develop/design/decorator.md\",\"localizedDate\":\"2019年10月22日\",\"excerpt\":\"<h2> 装饰器模式的定义与特点</h2>\\n<p>上班族大多都有睡懒觉的习惯，每天早上上班时间都很紧张，于是很多人为了多睡一会，就会用方便的方式解决早餐问题。有些人早餐可能会吃煎饼，煎饼中可以加鸡蛋，也可以加香肠，但是不管怎么「加码」，都还是一个煎饼。在现实生活中，常常需要对现有产品增加新的功能或美化其外观，如房子装修、相片加相框等，都是装饰器模式。</p>\\n<p>在软件开发过程中，有时想用一些现存的组件。这些组件可能只是完成了一些核心功能。但在不改变其结构的情况下，可以动态地扩展其功能。所有这些都可以釆用装饰器模式来实现。</p>\\n<p><strong>装饰器模式</strong>（Decorator Pattern）的定义：指 <strong>在不改变现有对象结构的情况下，动态地给该对象增加一些职责</strong>（即增加其额外功能）的模式，它属于对象结构型模式，也体现了开闭原则（OCP）。</p>\",\"copyright\":{\"author\":\"gavin-james\",\"license\":\"https://github.com/gavin-james/gavin-james.github.io/LICENSE\"},\"autoDesc\":true}")
