export const data = JSON.parse("{\"key\":\"v-72c7365c\",\"path\":\"/develop/design/seven-principles.html\",\"title\":\"七大原则\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"七大原则\",\"date\":\"2019-10-04T00:00:00.000Z\",\"category\":[\"设计模式\"],\"tag\":[\"设计模式\"],\"description\":\"设计模式七大原则 设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么 这样设计的依据）。 设计模式常用的七大原则有： 单一职责原则 接口隔离原则 依赖倒转（倒置）原则 里氏替换原则 开闭原则 迪米特法则 合成复用原则 单一职责原则（SRP） 基本介绍 单一职责原则（Single Responsibility Principle，SRP）又称单一功能原则，由罗伯特·C.马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/develop/design/seven-principles.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin James\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"七大原则\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"设计模式七大原则 设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么 这样设计的依据）。 设计模式常用的七大原则有： 单一职责原则 接口隔离原则 依赖倒转（倒置）原则 里氏替换原则 开闭原则 迪米特法则 合成复用原则 单一职责原则（SRP） 基本介绍 单一职责原则（Single Responsibility Principle，SRP）又称单一功能原则，由罗伯特·C.马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-04-12T04:14:48.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"gavin-james\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2019-10-04T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-04-12T04:14:48.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"七大原则\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2019-10-04T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-04-12T04:14:48.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"gavin-james\\\",\\\"url\\\":\\\"http://www.gavin-james.xyz\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"设计模式七大原则\",\"slug\":\"设计模式七大原则\",\"link\":\"#设计模式七大原则\",\"children\":[]},{\"level\":2,\"title\":\"单一职责原则（SRP）\",\"slug\":\"单一职责原则-srp\",\"link\":\"#单一职责原则-srp\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍\",\"link\":\"#基本介绍\",\"children\":[]},{\"level\":3,\"title\":\"单一职责原则的优点\",\"slug\":\"单一职责原则的优点\",\"link\":\"#单一职责原则的优点\",\"children\":[]},{\"level\":3,\"title\":\"应用实例\",\"slug\":\"应用实例\",\"link\":\"#应用实例\",\"children\":[]},{\"level\":3,\"title\":\"单一职责原则注意事项和细节\",\"slug\":\"单一职责原则注意事项和细节\",\"link\":\"#单一职责原则注意事项和细节\",\"children\":[]}]},{\"level\":2,\"title\":\"接口隔离原则（ISP）\",\"slug\":\"接口隔离原则-isp\",\"link\":\"#接口隔离原则-isp\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍-1\",\"link\":\"#基本介绍-1\",\"children\":[]},{\"level\":3,\"title\":\"接口隔离原则的优点\",\"slug\":\"接口隔离原则的优点\",\"link\":\"#接口隔离原则的优点\",\"children\":[]},{\"level\":3,\"title\":\"应用实例\",\"slug\":\"应用实例-1\",\"link\":\"#应用实例-1\",\"children\":[]}]},{\"level\":2,\"title\":\"依赖倒转原则（DIP）\",\"slug\":\"依赖倒转原则-dip\",\"link\":\"#依赖倒转原则-dip\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍-2\",\"link\":\"#基本介绍-2\",\"children\":[]},{\"level\":3,\"title\":\"依赖倒转原则的作用\",\"slug\":\"依赖倒转原则的作用\",\"link\":\"#依赖倒转原则的作用\",\"children\":[]},{\"level\":3,\"title\":\"简单应用实例\",\"slug\":\"简单应用实例\",\"link\":\"#简单应用实例\",\"children\":[]},{\"level\":3,\"title\":\"依赖关系传递的三种方式和应用案例\",\"slug\":\"依赖关系传递的三种方式和应用案例\",\"link\":\"#依赖关系传递的三种方式和应用案例\",\"children\":[]},{\"level\":3,\"title\":\"依赖倒转原则的注意事项和细节\",\"slug\":\"依赖倒转原则的注意事项和细节\",\"link\":\"#依赖倒转原则的注意事项和细节\",\"children\":[]}]},{\"level\":2,\"title\":\"里氏替换原则（LSP）\",\"slug\":\"里氏替换原则-lsp\",\"link\":\"#里氏替换原则-lsp\",\"children\":[{\"level\":3,\"title\":\"OO 中的继承性的思考和说明\",\"slug\":\"oo-中的继承性的思考和说明\",\"link\":\"#oo-中的继承性的思考和说明\",\"children\":[]},{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍-3\",\"link\":\"#基本介绍-3\",\"children\":[]},{\"level\":3,\"title\":\"里氏替换原则的作用\",\"slug\":\"里氏替换原则的作用\",\"link\":\"#里氏替换原则的作用\",\"children\":[]},{\"level\":3,\"title\":\"应用实例\",\"slug\":\"应用实例-2\",\"link\":\"#应用实例-2\",\"children\":[]}]},{\"level\":2,\"title\":\"开闭原则（OCP）\",\"slug\":\"开闭原则-ocp\",\"link\":\"#开闭原则-ocp\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍-4\",\"link\":\"#基本介绍-4\",\"children\":[]},{\"level\":3,\"title\":\"开闭原则的作用\",\"slug\":\"开闭原则的作用\",\"link\":\"#开闭原则的作用\",\"children\":[]},{\"level\":3,\"title\":\"应用示例\",\"slug\":\"应用示例\",\"link\":\"#应用示例\",\"children\":[]},{\"level\":3,\"title\":\"应用实例改进\",\"slug\":\"应用实例改进\",\"link\":\"#应用实例改进\",\"children\":[]}]},{\"level\":2,\"title\":\"迪米特法则（DP）\",\"slug\":\"迪米特法则-dp\",\"link\":\"#迪米特法则-dp\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍-5\",\"link\":\"#基本介绍-5\",\"children\":[]},{\"level\":3,\"title\":\"应用实例\",\"slug\":\"应用实例-3\",\"link\":\"#应用实例-3\",\"children\":[]},{\"level\":3,\"title\":\"应用实例改进\",\"slug\":\"应用实例改进-1\",\"link\":\"#应用实例改进-1\",\"children\":[]},{\"level\":3,\"title\":\"迪米特法则注意事项和细节\",\"slug\":\"迪米特法则注意事项和细节\",\"link\":\"#迪米特法则注意事项和细节\",\"children\":[]}]},{\"level\":2,\"title\":\"合成复用原则（CRP）\",\"slug\":\"合成复用原则-crp\",\"link\":\"#合成复用原则-crp\",\"children\":[{\"level\":3,\"title\":\"设计原则核心思想\",\"slug\":\"设计原则核心思想\",\"link\":\"#设计原则核心思想\",\"children\":[]},{\"level\":3,\"title\":\"合成复用原则的重要性\",\"slug\":\"合成复用原则的重要性\",\"link\":\"#合成复用原则的重要性\",\"children\":[]}]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}],\"git\":{\"createdTime\":1681272888000,\"updatedTime\":1681272888000,\"contributors\":[{\"name\":\"gavin-james\",\"email\":\"meaganlindesy1258@gmail.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":32.4,\"words\":9719},\"filePathRelative\":\"develop/design/seven-principles.md\",\"localizedDate\":\"2019年10月4日\",\"excerpt\":\"<h2> 设计模式七大原则</h2>\\n<p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么 这样设计的依据）。</p>\\n<p>设计模式常用的七大原则有：</p>\\n<ul>\\n<li>单一职责原则</li>\\n<li>接口隔离原则</li>\\n<li>依赖倒转（倒置）原则</li>\\n<li>里氏替换原则</li>\\n<li>开闭原则</li>\\n<li>迪米特法则</li>\\n<li>合成复用原则</li>\\n</ul>\\n<h2> 单一职责原则（SRP）</h2>\\n<h3> 基本介绍</h3>\\n<p><strong>单一职责原则</strong>（Single Responsibility Principle，SRP）又称单一功能原则，由罗伯特·C.马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。</p>\",\"copyright\":{\"author\":\"gavin-james\",\"license\":\"https://github.com/gavin-james/gavin-james.github.io/LICENSE\"},\"autoDesc\":true}")
