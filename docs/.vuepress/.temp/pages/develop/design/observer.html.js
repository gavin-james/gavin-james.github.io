export const data = JSON.parse("{\"key\":\"v-72940dc6\",\"path\":\"/develop/design/observer.html\",\"title\":\"行为型观察者模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"行为型观察者模式\",\"date\":\"2019-11-10T00:00:00.000Z\",\"category\":[\"设计模式\"],\"tag\":[\"设计模式\"],\"description\":\"观察者模式基本介绍 在现实世界中，许多对象并不是独立存在的，其中一个对象的行为发生改变可能会导致一个或者多个其他对象的行为也发生改变。例如，某种商品的物价上涨时会导致部分商家高兴，而消费者伤心；还有，当我们开车到交叉路口时，遇到红灯会停，遇到绿灯会行。这样的例子还有很多，例如，股票价格与股民、微信公众号与微信用户、气象局的天气预报与听众、小偷与警察等。 观察者模式（Observer Pattern）的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/develop/design/observer.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"行为型观察者模式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"观察者模式基本介绍 在现实世界中，许多对象并不是独立存在的，其中一个对象的行为发生改变可能会导致一个或者多个其他对象的行为也发生改变。例如，某种商品的物价上涨时会导致部分商家高兴，而消费者伤心；还有，当我们开车到交叉路口时，遇到红灯会停，遇到绿灯会行。这样的例子还有很多，例如，股票价格与股民、微信公众号与微信用户、气象局的天气预报与听众、小偷与警察等。 观察者模式（Observer Pattern）的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"gavin-james\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2019-11-10T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"行为型观察者模式\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2019-11-10T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"gavin-james\\\",\\\"url\\\":\\\"http://www.gavin-james.xyz\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"观察者模式基本介绍\",\"slug\":\"观察者模式基本介绍\",\"link\":\"#观察者模式基本介绍\",\"children\":[]},{\"level\":2,\"title\":\"观察者模式的结构与实现\",\"slug\":\"观察者模式的结构与实现\",\"link\":\"#观察者模式的结构与实现\",\"children\":[]},{\"level\":2,\"title\":\"天气预报项目需求\",\"slug\":\"天气预报项目需求\",\"link\":\"#天气预报项目需求\",\"children\":[]},{\"level\":2,\"title\":\"普通方案解决天气预报需求\",\"slug\":\"普通方案解决天气预报需求\",\"link\":\"#普通方案解决天气预报需求\",\"children\":[{\"level\":3,\"title\":\"逻辑分析\",\"slug\":\"逻辑分析\",\"link\":\"#逻辑分析\",\"children\":[]},{\"level\":3,\"title\":\"代码实现\",\"slug\":\"代码实现\",\"link\":\"#代码实现\",\"children\":[]},{\"level\":3,\"title\":\"问题分析\",\"slug\":\"问题分析\",\"link\":\"#问题分析\",\"children\":[]}]},{\"level\":2,\"title\":\"观察者模式解决天气预报需求\",\"slug\":\"观察者模式解决天气预报需求\",\"link\":\"#观察者模式解决天气预报需求\",\"children\":[]},{\"level\":2,\"title\":\"JDK 的观察者模式剖析\",\"slug\":\"jdk-的观察者模式剖析\",\"link\":\"#jdk-的观察者模式剖析\",\"children\":[]},{\"level\":2,\"title\":\"观察者模式的应用场景\",\"slug\":\"观察者模式的应用场景\",\"link\":\"#观察者模式的应用场景\",\"children\":[]}],\"readingTime\":{\"minutes\":8.5,\"words\":2551},\"filePathRelative\":\"develop/design/observer.md\",\"localizedDate\":\"2019年11月10日\",\"excerpt\":\"<h2> 观察者模式基本介绍</h2>\\n<p>在现实世界中，许多对象并不是独立存在的，其中一个对象的行为发生改变可能会导致一个或者多个其他对象的行为也发生改变。例如，某种商品的物价上涨时会导致部分商家高兴，而消费者伤心；还有，当我们开车到交叉路口时，遇到红灯会停，遇到绿灯会行。这样的例子还有很多，例如，股票价格与股民、微信公众号与微信用户、气象局的天气预报与听众、小偷与警察等。</p>\\n<p><strong>观察者模式</strong>（Observer Pattern）的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p>\",\"copyright\":{\"author\":\"gavin-james\",\"license\":\"https://github.com/gavin-james/gavin-james.github.io/LICENSE\"},\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
