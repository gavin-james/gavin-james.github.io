export const data = JSON.parse("{\"key\":\"v-05c85d75\",\"path\":\"/develop/design/factory.html\",\"title\":\"创建型工厂模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"创建型工厂模式\",\"date\":\"2019-10-12T00:00:00.000Z\",\"category\":[\"设计模式\"],\"tag\":[\"设计模式\"],\"description\":\"工厂模式概述 工厂模式很重要，后面的很多架构设计，都是工厂模式联合着其它设计模式使用。 一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GOF 的《设计模式》一书中，它将简单工厂模式看作是工厂方法模式的一种特例，所以工厂模式只被分成了工厂方法和抽象工厂两类。实际上，前面一种分类方法更加常见，所以，在今天的讲解中，我们沿用第一种分类方法。 在这三种细分的工厂模式中，简单工厂、工厂方法原理比较简单，在实际的项目中也比较常用。而抽象工厂的原理稍微复杂点，在实际的项目中相对也不常用。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/develop/design/factory.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"创建型工厂模式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"工厂模式概述 工厂模式很重要，后面的很多架构设计，都是工厂模式联合着其它设计模式使用。 一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GOF 的《设计模式》一书中，它将简单工厂模式看作是工厂方法模式的一种特例，所以工厂模式只被分成了工厂方法和抽象工厂两类。实际上，前面一种分类方法更加常见，所以，在今天的讲解中，我们沿用第一种分类方法。 在这三种细分的工厂模式中，简单工厂、工厂方法原理比较简单，在实际的项目中也比较常用。而抽象工厂的原理稍微复杂点，在实际的项目中相对也不常用。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"gavin-james\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2019-10-12T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"创建型工厂模式\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2019-10-12T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"gavin-james\\\",\\\"url\\\":\\\"http://www.gavin-james.xyz\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"工厂模式概述\",\"slug\":\"工厂模式概述\",\"link\":\"#工厂模式概述\",\"children\":[]},{\"level\":2,\"title\":\"简单工厂（Simple Factory）\",\"slug\":\"简单工厂-simple-factory\",\"link\":\"#简单工厂-simple-factory\",\"children\":[{\"level\":3,\"title\":\"简单工厂模式基本介绍\",\"slug\":\"简单工厂模式基本介绍\",\"link\":\"#简单工厂模式基本介绍\",\"children\":[]},{\"level\":3,\"title\":\"传统方式完成披萨案例\",\"slug\":\"传统方式完成披萨案例\",\"link\":\"#传统方式完成披萨案例\",\"children\":[]},{\"level\":3,\"title\":\"简单工厂模式完成案例\",\"slug\":\"简单工厂模式完成案例\",\"link\":\"#简单工厂模式完成案例\",\"children\":[]}]},{\"level\":2,\"title\":\"工厂方法（Factory Method）\",\"slug\":\"工厂方法-factory-method\",\"link\":\"#工厂方法-factory-method\",\"children\":[{\"level\":3,\"title\":\"工厂方法模式介绍\",\"slug\":\"工厂方法模式介绍\",\"link\":\"#工厂方法模式介绍\",\"children\":[]},{\"level\":3,\"title\":\"工厂方法模式完成案例\",\"slug\":\"工厂方法模式完成案例\",\"link\":\"#工厂方法模式完成案例\",\"children\":[]},{\"level\":3,\"title\":\"什么时候该用工厂方法模式，而非简单工厂模式呢？\",\"slug\":\"什么时候该用工厂方法模式-而非简单工厂模式呢\",\"link\":\"#什么时候该用工厂方法模式-而非简单工厂模式呢\",\"children\":[]}]},{\"level\":2,\"title\":\"抽象工厂（Abstract Factory）\",\"slug\":\"抽象工厂-abstract-factory\",\"link\":\"#抽象工厂-abstract-factory\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍\",\"link\":\"#基本介绍\",\"children\":[]},{\"level\":3,\"title\":\"抽象工厂模式应用实例\",\"slug\":\"抽象工厂模式应用实例\",\"link\":\"#抽象工厂模式应用实例\",\"children\":[]}]},{\"level\":2,\"title\":\"工厂模式在 JDK-Calendar 应用的源码分析\",\"slug\":\"工厂模式在-jdk-calendar-应用的源码分析\",\"link\":\"#工厂模式在-jdk-calendar-应用的源码分析\",\"children\":[]},{\"level\":2,\"title\":\"工厂模式小结\",\"slug\":\"工厂模式小结\",\"link\":\"#工厂模式小结\",\"children\":[]},{\"level\":2,\"title\":\"如何设计实现一个Dependency Injection框架\",\"slug\":\"如何设计实现一个dependency-injection框架\",\"link\":\"#如何设计实现一个dependency-injection框架\",\"children\":[{\"level\":3,\"title\":\"工厂模式和 DI 容器有何区别\",\"slug\":\"工厂模式和-di-容器有何区别\",\"link\":\"#工厂模式和-di-容器有何区别\",\"children\":[]},{\"level\":3,\"title\":\"DI 容器的核心功能有哪些\",\"slug\":\"di-容器的核心功能有哪些\",\"link\":\"#di-容器的核心功能有哪些\",\"children\":[]}]},{\"level\":2,\"title\":\"如何实现一个简单的 DI 容器？\",\"slug\":\"如何实现一个简单的-di-容器\",\"link\":\"#如何实现一个简单的-di-容器\",\"children\":[{\"level\":3,\"title\":\"最小原型设计\",\"slug\":\"最小原型设计\",\"link\":\"#最小原型设计\",\"children\":[]},{\"level\":3,\"title\":\"提供执行入口\",\"slug\":\"提供执行入口\",\"link\":\"#提供执行入口\",\"children\":[]},{\"level\":3,\"title\":\"配置文件解析\",\"slug\":\"配置文件解析\",\"link\":\"#配置文件解析\",\"children\":[]},{\"level\":3,\"title\":\"核心工厂类设计\",\"slug\":\"核心工厂类设计\",\"link\":\"#核心工厂类设计\",\"children\":[]}]}],\"readingTime\":{\"minutes\":26.74,\"words\":8023},\"filePathRelative\":\"develop/design/factory.md\",\"localizedDate\":\"2019年10月12日\",\"excerpt\":\"<h2> 工厂模式概述</h2>\\n<blockquote>\\n<p>工厂模式很重要，后面的很多架构设计，都是工厂模式联合着其它设计模式使用。</p>\\n</blockquote>\\n<p>一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GOF 的《设计模式》一书中，它将简单工厂模式看作是工厂方法模式的一种特例，所以工厂模式只被分成了工厂方法和抽象工厂两类。实际上，前面一种分类方法更加常见，所以，在今天的讲解中，我们沿用第一种分类方法。</p>\\n<p>在这三种细分的工厂模式中，简单工厂、工厂方法原理比较简单，在实际的项目中也比较常用。而抽象工厂的原理稍微复杂点，在实际的项目中相对也不常用。</p>\",\"copyright\":{\"author\":\"gavin-james\",\"license\":\"https://github.com/gavin-james/gavin-james.github.io/LICENSE\"},\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
