export const data = JSON.parse("{\"key\":\"v-4a6785aa\",\"path\":\"/develop/design/template-method.html\",\"title\":\"行为型模板方法模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"行为型模板方法模式\",\"date\":\"2019-11-02T00:00:00.000Z\",\"category\":[\"设计模式\"],\"tag\":[\"设计模式\"],\"description\":\"模板方法模式基本介绍 在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。 例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。 这样的例子在生活中还有很多，例如，一个人每天会起床、吃饭、做事、睡觉等，其中「做事」的内容每天可能不同。我们把这些规定了流程或格式的实例定义成模板，允许使用者根据自己的需求去更新它，例如，简历模板、论文模板、Word 中模板文件等。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/develop/design/template-method.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin James\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"行为型模板方法模式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"模板方法模式基本介绍 在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。 例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。 这样的例子在生活中还有很多，例如，一个人每天会起床、吃饭、做事、睡觉等，其中「做事」的内容每天可能不同。我们把这些规定了流程或格式的实例定义成模板，允许使用者根据自己的需求去更新它，例如，简历模板、论文模板、Word 中模板文件等。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-04-12T04:14:48.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"gavin-james\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2019-11-02T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-04-12T04:14:48.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"行为型模板方法模式\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2019-11-02T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-04-12T04:14:48.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"gavin-james\\\",\\\"url\\\":\\\"http://www.gavin-james.xyz\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"模板方法模式基本介绍\",\"slug\":\"模板方法模式基本介绍\",\"link\":\"#模板方法模式基本介绍\",\"children\":[]},{\"level\":2,\"title\":\"模板方法模式结构与实现\",\"slug\":\"模板方法模式结构与实现\",\"link\":\"#模板方法模式结构与实现\",\"children\":[]},{\"level\":2,\"title\":\"模板方法模式解决豆浆制作问题\",\"slug\":\"模板方法模式解决豆浆制作问题\",\"link\":\"#模板方法模式解决豆浆制作问题\",\"children\":[{\"level\":3,\"title\":\"模板方法模式的钩子方法\",\"slug\":\"模板方法模式的钩子方法\",\"link\":\"#模板方法模式的钩子方法\",\"children\":[]}]},{\"level\":2,\"title\":\"模板方法模式的注意事项和细节\",\"slug\":\"模板方法模式的注意事项和细节\",\"link\":\"#模板方法模式的注意事项和细节\",\"children\":[]},{\"level\":2,\"title\":\"模板方法模式的应用场景\",\"slug\":\"模板方法模式的应用场景\",\"link\":\"#模板方法模式的应用场景\",\"children\":[]}],\"git\":{\"createdTime\":1681272888000,\"updatedTime\":1681272888000,\"contributors\":[{\"name\":\"gavin-james\",\"email\":\"meaganlindesy1258@gmail.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":6.95,\"words\":2084},\"filePathRelative\":\"develop/design/template-method.md\",\"localizedDate\":\"2019年11月2日\",\"excerpt\":\"<h2> 模板方法模式基本介绍</h2>\\n<p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p>\\n<p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p>\\n<p>这样的例子在生活中还有很多，例如，一个人每天会起床、吃饭、做事、睡觉等，其中「做事」的内容每天可能不同。我们把这些规定了流程或格式的实例定义成模板，允许使用者根据自己的需求去更新它，例如，简历模板、论文模板、Word 中模板文件等。</p>\",\"copyright\":{\"author\":\"gavin-james\",\"license\":\"https://github.com/gavin-james/gavin-james.github.io/LICENSE\"},\"autoDesc\":true}")
