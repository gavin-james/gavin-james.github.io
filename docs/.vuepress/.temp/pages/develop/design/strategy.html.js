export const data = JSON.parse("{\"key\":\"v-5d8882a0\",\"path\":\"/develop/design/strategy.html\",\"title\":\"行为型策略模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"行为型策略模式\",\"date\":\"2019-11-20T00:00:00.000Z\",\"category\":[\"设计模式\"],\"tag\":[\"设计模式\"],\"description\":\"策略模式基本介绍 在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。 在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。 如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/develop/design/strategy.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"行为型策略模式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"策略模式基本介绍 在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。 在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。 如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"gavin-james\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2019-11-20T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"行为型策略模式\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2019-11-20T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"gavin-james\\\",\\\"url\\\":\\\"http://www.gavin-james.xyz\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"策略模式基本介绍\",\"slug\":\"策略模式基本介绍\",\"link\":\"#策略模式基本介绍\",\"children\":[]},{\"level\":2,\"title\":\"策略模式的结构与实现\",\"slug\":\"策略模式的结构与实现\",\"link\":\"#策略模式的结构与实现\",\"children\":[]},{\"level\":2,\"title\":\"鸭子项目\",\"slug\":\"鸭子项目\",\"link\":\"#鸭子项目\",\"children\":[]},{\"level\":2,\"title\":\"传统方式解决鸭子项目\",\"slug\":\"传统方式解决鸭子项目\",\"link\":\"#传统方式解决鸭子项目\",\"children\":[{\"level\":3,\"title\":\"传统方式代码实现\",\"slug\":\"传统方式代码实现\",\"link\":\"#传统方式代码实现\",\"children\":[]},{\"level\":3,\"title\":\"传统方式问题分析和解决方案\",\"slug\":\"传统方式问题分析和解决方案\",\"link\":\"#传统方式问题分析和解决方案\",\"children\":[]}]},{\"level\":2,\"title\":\"策略模式解决鸭子项目\",\"slug\":\"策略模式解决鸭子项目\",\"link\":\"#策略模式解决鸭子项目\",\"children\":[]},{\"level\":2,\"title\":\"JDK-Arrays 的策略模式剖析\",\"slug\":\"jdk-arrays-的策略模式剖析\",\"link\":\"#jdk-arrays-的策略模式剖析\",\"children\":[]},{\"level\":2,\"title\":\"策略模式的注意事项和细节\",\"slug\":\"策略模式的注意事项和细节\",\"link\":\"#策略模式的注意事项和细节\",\"children\":[]},{\"level\":2,\"title\":\"策略模式的应用场景\",\"slug\":\"策略模式的应用场景\",\"link\":\"#策略模式的应用场景\",\"children\":[]}],\"readingTime\":{\"minutes\":9.62,\"words\":2885},\"filePathRelative\":\"develop/design/strategy.md\",\"localizedDate\":\"2019年11月20日\",\"excerpt\":\"<h2> 策略模式基本介绍</h2>\\n<p>在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。</p>\\n<p>在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。</p>\\n<p>如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。</p>\",\"copyright\":{\"author\":\"gavin-james\",\"license\":\"https://github.com/gavin-james/gavin-james.github.io/LICENSE\"},\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
