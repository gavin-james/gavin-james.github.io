export const data = JSON.parse("{\"key\":\"v-17d5651a\",\"path\":\"/design-pattern/factory/\",\"title\":\"设计模式 - 创建型工厂模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"设计模式 - 创建型工厂模式\",\"date\":\"2022-02-27T13:18:13.000Z\",\"permalink\":\"/design-pattern/factory/\",\"categories\":[\"设计模式\"],\"tags\":[\"设计模式\"],\"author\":{\"name\":\"Gavin\",\"link\":\"https://github.com/Small-market\"},\"summary\":\"[[TOC]] 工厂模式概述 \\\" 工厂模式很重要，后面的很多架构设计，都是工厂模式联合着其它设计模式使用。\\\" 一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GOF 的《设计模式》一书中，它将简单工厂模式看作是工厂方法模式的一种特例，所以工厂模式只被分成了工厂方法和抽象工厂两类。实际上，前面一种分类方法更加常见，所以，在今\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://www.gavin-james.com/design-pattern/factory/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Gavin blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"设计模式 - 创建型工厂模式\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:locale:alternate\",\"content\":\"en-US\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Gavin\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"设计模式\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-02-27T13:18:13.000Z\"}]]},\"excerpt\":\"\",\"headers\":[{\"level\":2,\"title\":\"工厂模式概述\",\"slug\":\"工厂模式概述\",\"children\":[]},{\"level\":2,\"title\":\"简单工厂（Simple Factory）\",\"slug\":\"简单工厂-simple-factory\",\"children\":[{\"level\":3,\"title\":\"简单工厂模式基本介绍\",\"slug\":\"简单工厂模式基本介绍\",\"children\":[]},{\"level\":3,\"title\":\"传统方式完成披萨案例\",\"slug\":\"传统方式完成披萨案例\",\"children\":[]},{\"level\":3,\"title\":\"简单工厂模式完成案例\",\"slug\":\"简单工厂模式完成案例\",\"children\":[]}]},{\"level\":2,\"title\":\"工厂方法（Factory Method）\",\"slug\":\"工厂方法-factory-method\",\"children\":[{\"level\":3,\"title\":\"工厂方法模式介绍\",\"slug\":\"工厂方法模式介绍\",\"children\":[]},{\"level\":3,\"title\":\"工厂方法模式完成案例\",\"slug\":\"工厂方法模式完成案例\",\"children\":[]},{\"level\":3,\"title\":\"什么时候该用工厂方法模式，而非简单工厂模式呢？\",\"slug\":\"什么时候该用工厂方法模式-而非简单工厂模式呢\",\"children\":[]}]},{\"level\":2,\"title\":\"抽象工厂（Abstract Factory）\",\"slug\":\"抽象工厂-abstract-factory\",\"children\":[{\"level\":3,\"title\":\"基本介绍\",\"slug\":\"基本介绍\",\"children\":[]},{\"level\":3,\"title\":\"抽象工厂模式应用实例\",\"slug\":\"抽象工厂模式应用实例\",\"children\":[]}]},{\"level\":2,\"title\":\"工厂模式在 JDK-Calendar 应用的源码分析\",\"slug\":\"工厂模式在-jdk-calendar-应用的源码分析\",\"children\":[]},{\"level\":2,\"title\":\"工厂模式小结\",\"slug\":\"工厂模式小结\",\"children\":[]},{\"level\":2,\"title\":\"如何设计实现一个Dependency Injection框架\",\"slug\":\"如何设计实现一个dependency-injection框架\",\"children\":[{\"level\":3,\"title\":\"工厂模式和 DI 容器有何区别\",\"slug\":\"工厂模式和-di-容器有何区别\",\"children\":[]},{\"level\":3,\"title\":\"DI 容器的核心功能有哪些\",\"slug\":\"di-容器的核心功能有哪些\",\"children\":[]}]},{\"level\":2,\"title\":\"如何实现一个简单的 DI 容器？\",\"slug\":\"如何实现一个简单的-di-容器\",\"children\":[{\"level\":3,\"title\":\"最小原型设计\",\"slug\":\"最小原型设计\",\"children\":[]},{\"level\":3,\"title\":\"提供执行入口\",\"slug\":\"提供执行入口\",\"children\":[]},{\"level\":3,\"title\":\"配置文件解析\",\"slug\":\"配置文件解析\",\"children\":[]},{\"level\":3,\"title\":\"核心工厂类设计\",\"slug\":\"核心工厂类设计\",\"children\":[]}]}],\"readingTime\":{\"minutes\":26.84,\"words\":8052},\"copyright\":\"著作权归Gavin所有\\n基于https://github.com/Small-market/Small-market.github.io/LICENSE协议\\n原文链接：http://www.gavin-james.com/design-pattern/factory/\",\"filePathRelative\":\"develop/design/factory.md\",\"localizedDate\":\"2022年2月27日\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
