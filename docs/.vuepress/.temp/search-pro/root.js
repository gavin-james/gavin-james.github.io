export default "{\"documentCount\":7027,\"nextId\":7027,\"documentIds\":{\"0\":\"v-79fdd481\",\"1\":\"v-79fdd481#0/0\",\"2\":\"v-79fdd481#0/1\",\"3\":\"v-79fdd481#0/2\",\"4\":\"v-79fdd481#0/3\",\"5\":\"v-0e503981\",\"6\":\"v-74bc627b\",\"7\":\"v-2e25198a\",\"8\":\"v-fffb8e28\",\"9\":\"v-fffb8e28#1\",\"10\":\"v-fffb8e28#1/0\",\"11\":\"v-fffb8e28#1/1\",\"12\":\"v-fffb8e28#1/2\",\"13\":\"v-fffb8e28#1/3\",\"14\":\"v-4c863446\",\"15\":\"v-4c863446#0/0\",\"16\":\"v-4c863446#0/1\",\"17\":\"v-4c863446#0/2\",\"18\":\"v-4c863446#0/3\",\"19\":\"v-4c863446#0/4\",\"20\":\"v-4c863446#0/5\",\"21\":\"v-4c863446#0/6\",\"22\":\"v-4c863446#0/7\",\"23\":\"v-4c863446#0/8\",\"24\":\"v-4c863446#0/9\",\"25\":\"v-4c863446#0/10\",\"26\":\"v-4c863446#0/11\",\"27\":\"v-4c863446#0/12\",\"28\":\"v-bf720700\",\"29\":\"v-bf720700#0/0\",\"30\":\"v-bf720700#0/1\",\"31\":\"v-bf720700#0/2\",\"32\":\"v-0978b044\",\"33\":\"v-0978b044#0/0\",\"34\":\"v-0978b044#0/1\",\"35\":\"v-0978b044#1\",\"36\":\"v-0978b044#1/0\",\"37\":\"v-0978b044#2\",\"38\":\"v-0978b044#2/0\",\"39\":\"v-0978b044#2/1\",\"40\":\"v-0978b044#2/2\",\"41\":\"v-0978b044#3\",\"42\":\"v-0978b044#3/0\",\"43\":\"v-0978b044#4\",\"44\":\"v-0978b044#4/0\",\"45\":\"v-0978b044#4/1\",\"46\":\"v-0978b044#5\",\"47\":\"v-0978b044#5/0\",\"48\":\"v-0978b044#5/1\",\"49\":\"v-0978b044#5/2\",\"50\":\"v-0978b044#6\",\"51\":\"v-0978b044#6/0\",\"52\":\"v-0978b044#6/1\",\"53\":\"v-0978b044#6/2\",\"54\":\"v-0978b044#6/3\",\"55\":\"v-0978b044#6/4\",\"56\":\"v-0978b044#6/5\",\"57\":\"v-0978b044#6/6\",\"58\":\"v-0978b044#6/7\",\"59\":\"v-0978b044#6/8\",\"60\":\"v-0978b044#6/9\",\"61\":\"v-0978b044#6/10\",\"62\":\"v-0978b044#6/11\",\"63\":\"v-0978b044#6/12\",\"64\":\"v-0978b044#6/13\",\"65\":\"v-0978b044#6/14\",\"66\":\"v-0978b044#7\",\"67\":\"v-0978b044#7/0\",\"68\":\"v-0978b044#8\",\"69\":\"v-0978b044#8/0\",\"70\":\"v-0978b044#8/1\",\"71\":\"v-0978b044#8/2\",\"72\":\"v-0978b044#9\",\"73\":\"v-0978b044#9/0\",\"74\":\"v-0978b044#9/1\",\"75\":\"v-0978b044#10\",\"76\":\"v-0978b044#10/0\",\"77\":\"v-0978b044#10/1\",\"78\":\"v-0978b044#11\",\"79\":\"v-0978b044#11/0\",\"80\":\"v-0978b044#11/1\",\"81\":\"v-0978b044#12\",\"82\":\"v-0978b044#12/0\",\"83\":\"v-0978b044#12/1\",\"84\":\"v-0978b044#12/2\",\"85\":\"v-0978b044#13\",\"86\":\"v-0978b044#13/0\",\"87\":\"v-0978b044#13/1\",\"88\":\"v-0978b044#14\",\"89\":\"v-0978b044#14/0\",\"90\":\"v-0978b044#15\",\"91\":\"v-0978b044#15/0\",\"92\":\"v-0978b044#16\",\"93\":\"v-0978b044#16/0\",\"94\":\"v-0978b044#17\",\"95\":\"v-0978b044#17/0\",\"96\":\"v-0978b044#18\",\"97\":\"v-0978b044#18/0\",\"98\":\"v-0978b044#19\",\"99\":\"v-0978b044#19/0\",\"100\":\"v-0978b044#20\",\"101\":\"v-0978b044#20/0\",\"102\":\"v-0978b044#21\",\"103\":\"v-0978b044#21/0\",\"104\":\"v-0978b044#21/1\",\"105\":\"v-0978b044#22\",\"106\":\"v-0978b044#22/0\",\"107\":\"v-0978b044#22/1\",\"108\":\"v-4eaf9f84\",\"109\":\"v-4eaf9f84#0/0\",\"110\":\"v-4eaf9f84#1\",\"111\":\"v-4eaf9f84#1/0\",\"112\":\"v-4eaf9f84#1/1\",\"113\":\"v-4eaf9f84#1/2\",\"114\":\"v-4eaf9f84#1/3\",\"115\":\"v-4eaf9f84#1/4\",\"116\":\"v-4eaf9f84#2\",\"117\":\"v-4eaf9f84#2/0\",\"118\":\"v-4eaf9f84#2/1\",\"119\":\"v-4eaf9f84#2/2\",\"120\":\"v-4eaf9f84#2/3\",\"121\":\"v-4eaf9f84#2/4\",\"122\":\"v-4eaf9f84#2/5\",\"123\":\"v-4eaf9f84#3\",\"124\":\"v-4eaf9f84#3/0\",\"125\":\"v-4eaf9f84#3/1\",\"126\":\"v-4eaf9f84#3/2\",\"127\":\"v-4eaf9f84#3/3\",\"128\":\"v-4eaf9f84#3/4\",\"129\":\"v-4eaf9f84#3/5\",\"130\":\"v-4eaf9f84#3/6\",\"131\":\"v-4eaf9f84#3/7\",\"132\":\"v-4eaf9f84#3/8\",\"133\":\"v-4eaf9f84#3/9\",\"134\":\"v-4eaf9f84#3/10\",\"135\":\"v-2250a72e\",\"136\":\"v-2250a72e#1\",\"137\":\"v-2250a72e#1/0\",\"138\":\"v-2250a72e#1/1\",\"139\":\"v-2250a72e#1/2\",\"140\":\"v-2250a72e#1/3\",\"141\":\"v-2250a72e#1/4\",\"142\":\"v-2250a72e#1/5\",\"143\":\"v-2250a72e#1/6\",\"144\":\"v-2250a72e#1/7\",\"145\":\"v-2250a72e#1/8\",\"146\":\"v-2250a72e#1/9\",\"147\":\"v-2250a72e#1/10\",\"148\":\"v-2250a72e#1/11\",\"149\":\"v-2250a72e#1/12\",\"150\":\"v-2250a72e#1/13\",\"151\":\"v-2250a72e#1/14\",\"152\":\"v-2250a72e#1/15\",\"153\":\"v-2250a72e#1/16\",\"154\":\"v-2250a72e#1/17\",\"155\":\"v-ef7dd9f0\",\"156\":\"v-ef7dd9f0#1\",\"157\":\"v-1559ca3e\",\"158\":\"v-acebc5a4\",\"159\":\"v-acebc5a4#1\",\"160\":\"v-acebc5a4#1/0\",\"161\":\"v-acebc5a4#2\",\"162\":\"v-acebc5a4#2/0\",\"163\":\"v-acebc5a4#3\",\"164\":\"v-acebc5a4#3/0\",\"165\":\"v-acebc5a4#3/1\",\"166\":\"v-acebc5a4#3/2\",\"167\":\"v-acebc5a4#4\",\"168\":\"v-acebc5a4#4/0\",\"169\":\"v-acebc5a4#4/1\",\"170\":\"v-acebc5a4#4/2\",\"171\":\"v-acebc5a4#4/3\",\"172\":\"v-acebc5a4#4/4\",\"173\":\"v-acebc5a4#4/5\",\"174\":\"v-acebc5a4#5\",\"175\":\"v-acebc5a4#6\",\"176\":\"v-acebc5a4#7\",\"177\":\"v-acebc5a4#7/0\",\"178\":\"v-acebc5a4#7/1\",\"179\":\"v-acebc5a4#8\",\"180\":\"v-acebc5a4#8/0\",\"181\":\"v-acebc5a4#8/1\",\"182\":\"v-acebc5a4#9\",\"183\":\"v-acebc5a4#9/0\",\"184\":\"v-acebc5a4#9/1\",\"185\":\"v-acebc5a4#10\",\"186\":\"v-acebc5a4#10/0\",\"187\":\"v-acebc5a4#10/1\",\"188\":\"v-acebc5a4#11\",\"189\":\"v-acebc5a4#11/0\",\"190\":\"v-acebc5a4#11/1\",\"191\":\"v-acebc5a4#11/2\",\"192\":\"v-acebc5a4#12\",\"193\":\"v-acebc5a4#12/0\",\"194\":\"v-acebc5a4#12/1\",\"195\":\"v-acebc5a4#13\",\"196\":\"v-acebc5a4#13/0\",\"197\":\"v-acebc5a4#13/1\",\"198\":\"v-acebc5a4#14\",\"199\":\"v-acebc5a4#14/0\",\"200\":\"v-acebc5a4#14/1\",\"201\":\"v-acebc5a4#15\",\"202\":\"v-acebc5a4#15/0\",\"203\":\"v-acebc5a4#15/1\",\"204\":\"v-acebc5a4#16\",\"205\":\"v-acebc5a4#16/0\",\"206\":\"v-acebc5a4#16/1\",\"207\":\"v-acebc5a4#17\",\"208\":\"v-acebc5a4#17/0\",\"209\":\"v-acebc5a4#17/1\",\"210\":\"v-acebc5a4#18\",\"211\":\"v-acebc5a4#18/0\",\"212\":\"v-acebc5a4#18/1\",\"213\":\"v-acebc5a4#19\",\"214\":\"v-acebc5a4#19/0\",\"215\":\"v-acebc5a4#20\",\"216\":\"v-acebc5a4#20/0\",\"217\":\"v-acebc5a4#20/1\",\"218\":\"v-acebc5a4#21\",\"219\":\"v-acebc5a4#21/0\",\"220\":\"v-acebc5a4#21/1\",\"221\":\"v-acebc5a4#22\",\"222\":\"v-acebc5a4#22/0\",\"223\":\"v-acebc5a4#22/1\",\"224\":\"v-acebc5a4#22/2\",\"225\":\"v-acebc5a4#22/3\",\"226\":\"v-acebc5a4#22/4\",\"227\":\"v-acebc5a4#23\",\"228\":\"v-acebc5a4#23/0\",\"229\":\"v-acebc5a4#23/1\",\"230\":\"v-acebc5a4#23/2\",\"231\":\"v-acebc5a4#23/3\",\"232\":\"v-acebc5a4#23/4\",\"233\":\"v-acebc5a4#24\",\"234\":\"v-acebc5a4#24/0\",\"235\":\"v-acebc5a4#24/1\",\"236\":\"v-acebc5a4#25\",\"237\":\"v-acebc5a4#25/0\",\"238\":\"v-acebc5a4#25/1\",\"239\":\"v-acebc5a4#26\",\"240\":\"v-acebc5a4#26/0\",\"241\":\"v-acebc5a4#26/1\",\"242\":\"v-acebc5a4#27\",\"243\":\"v-acebc5a4#27/0\",\"244\":\"v-acebc5a4#27/1\",\"245\":\"v-acebc5a4#28\",\"246\":\"v-acebc5a4#28/0\",\"247\":\"v-acebc5a4#28/1\",\"248\":\"v-acebc5a4#28/2\",\"249\":\"v-acebc5a4#28/3\",\"250\":\"v-acebc5a4#28/4\",\"251\":\"v-acebc5a4#28/5\",\"252\":\"v-acebc5a4#28/6\",\"253\":\"v-acebc5a4#28/7\",\"254\":\"v-acebc5a4#28/8\",\"255\":\"v-acebc5a4#28/9\",\"256\":\"v-acebc5a4#28/10\",\"257\":\"v-acebc5a4#29\",\"258\":\"v-acebc5a4#29/11\",\"259\":\"v-acebc5a4#29/12\",\"260\":\"v-acebc5a4#29/13\",\"261\":\"v-acebc5a4#30\",\"262\":\"v-acebc5a4#30/0\",\"263\":\"v-acebc5a4#30/1\",\"264\":\"v-acebc5a4#30/2\",\"265\":\"v-acebc5a4#31\",\"266\":\"v-acebc5a4#31/0\",\"267\":\"v-acebc5a4#31/1\",\"268\":\"v-acebc5a4#31/2\",\"269\":\"v-acebc5a4#31/3\",\"270\":\"v-acebc5a4#31/4\",\"271\":\"v-acebc5a4#31/5\",\"272\":\"v-acebc5a4#31/6\",\"273\":\"v-acebc5a4#31/7\",\"274\":\"v-acebc5a4#31/8\",\"275\":\"v-acebc5a4#31/9\",\"276\":\"v-acebc5a4#31/10\",\"277\":\"v-acebc5a4#31/11\",\"278\":\"v-acebc5a4#31/12\",\"279\":\"v-acebc5a4#31/13\",\"280\":\"v-acebc5a4#31/14\",\"281\":\"v-acebc5a4#31/15\",\"282\":\"v-acebc5a4#31/16\",\"283\":\"v-acebc5a4#31/17\",\"284\":\"v-acebc5a4#31/18\",\"285\":\"v-acebc5a4#31/19\",\"286\":\"v-acebc5a4#31/20\",\"287\":\"v-acebc5a4#31/21\",\"288\":\"v-acebc5a4#31/22\",\"289\":\"v-acebc5a4#31/23\",\"290\":\"v-acebc5a4#31/24\",\"291\":\"v-acebc5a4#31/25\",\"292\":\"v-acebc5a4#31/26\",\"293\":\"v-acebc5a4#31/27\",\"294\":\"v-acebc5a4#31/28\",\"295\":\"v-acebc5a4#31/29\",\"296\":\"v-acebc5a4#31/30\",\"297\":\"v-acebc5a4#31/31\",\"298\":\"v-acebc5a4#31/32\",\"299\":\"v-acebc5a4#31/33\",\"300\":\"v-acebc5a4#31/34\",\"301\":\"v-acebc5a4#31/35\",\"302\":\"v-acebc5a4#31/36\",\"303\":\"v-acebc5a4#32\",\"304\":\"v-acebc5a4#32/0\",\"305\":\"v-acebc5a4#32/1\",\"306\":\"v-acebc5a4#32/2\",\"307\":\"v-acebc5a4#33\",\"308\":\"v-acebc5a4#33/0\",\"309\":\"v-acebc5a4#33/1\",\"310\":\"v-acebc5a4#33/2\",\"311\":\"v-acebc5a4#33/3\",\"312\":\"v-acebc5a4#34\",\"313\":\"v-acebc5a4#34/0\",\"314\":\"v-acebc5a4#34/1\",\"315\":\"v-acebc5a4#34/2\",\"316\":\"v-acebc5a4#34/3\",\"317\":\"v-acebc5a4#34/4\",\"318\":\"v-acebc5a4#34/5\",\"319\":\"v-acebc5a4#34/6\",\"320\":\"v-acebc5a4#35\",\"321\":\"v-acebc5a4#35/0\",\"322\":\"v-acebc5a4#35/1\",\"323\":\"v-acebc5a4#35/2\",\"324\":\"v-acebc5a4#36\",\"325\":\"v-acebc5a4#36/0\",\"326\":\"v-acebc5a4#36/1\",\"327\":\"v-acebc5a4#36/2\",\"328\":\"v-acebc5a4#37\",\"329\":\"v-acebc5a4#37/0\",\"330\":\"v-acebc5a4#37/1\",\"331\":\"v-acebc5a4#37/2\",\"332\":\"v-acebc5a4#37/3\",\"333\":\"v-acebc5a4#37/4\",\"334\":\"v-acebc5a4#37/5\",\"335\":\"v-acebc5a4#37/6\",\"336\":\"v-acebc5a4#37/7\",\"337\":\"v-acebc5a4#37/8\",\"338\":\"v-acebc5a4#37/9\",\"339\":\"v-acebc5a4#37/10\",\"340\":\"v-acebc5a4#37/11\",\"341\":\"v-acebc5a4#37/12\",\"342\":\"v-acebc5a4#37/13\",\"343\":\"v-acebc5a4#37/14\",\"344\":\"v-acebc5a4#37/15\",\"345\":\"v-acebc5a4#38\",\"346\":\"v-acebc5a4#38/16\",\"347\":\"v-acebc5a4#38/17\",\"348\":\"v-acebc5a4#39\",\"349\":\"v-acebc5a4#40\",\"350\":\"v-acebc5a4#40/18\",\"351\":\"v-acebc5a4#40/19\",\"352\":\"v-acebc5a4#41\",\"353\":\"v-acebc5a4#41/20\",\"354\":\"v-acebc5a4#41/21\",\"355\":\"v-acebc5a4#41/22\",\"356\":\"v-acebc5a4#42\",\"357\":\"v-acebc5a4#42/0\",\"358\":\"v-acebc5a4#42/1\",\"359\":\"v-acebc5a4#42/2\",\"360\":\"v-acebc5a4#42/3\",\"361\":\"v-acebc5a4#42/4\",\"362\":\"v-acebc5a4#42/5\",\"363\":\"v-acebc5a4#42/6\",\"364\":\"v-acebc5a4#42/7\",\"365\":\"v-acebc5a4#42/8\",\"366\":\"v-acebc5a4#42/9\",\"367\":\"v-acebc5a4#43\",\"368\":\"v-acebc5a4#43/0\",\"369\":\"v-acebc5a4#43/1\",\"370\":\"v-acebc5a4#43/2\",\"371\":\"v-acebc5a4#43/3\",\"372\":\"v-acebc5a4#43/4\",\"373\":\"v-acebc5a4#43/5\",\"374\":\"v-acebc5a4#44\",\"375\":\"v-acebc5a4#44/0\",\"376\":\"v-acebc5a4#44/1\",\"377\":\"v-acebc5a4#45\",\"378\":\"v-acebc5a4#45/2\",\"379\":\"v-acebc5a4#45/3\",\"380\":\"v-acebc5a4#45/4\",\"381\":\"v-acebc5a4#45/5\",\"382\":\"v-acebc5a4#45/6\",\"383\":\"v-acebc5a4#46\",\"384\":\"v-acebc5a4#46/0\",\"385\":\"v-acebc5a4#46/1\",\"386\":\"v-acebc5a4#46/2\",\"387\":\"v-acebc5a4#46/3\",\"388\":\"v-acebc5a4#46/4\",\"389\":\"v-acebc5a4#47\",\"390\":\"v-acebc5a4#47/0\",\"391\":\"v-acebc5a4#47/1\",\"392\":\"v-30c465ed\",\"393\":\"v-30c465ed#0/0\",\"394\":\"v-30c465ed#0/1\",\"395\":\"v-30c465ed#0/2\",\"396\":\"v-30c465ed#0/3\",\"397\":\"v-30c465ed#0/4\",\"398\":\"v-30c465ed#0/5\",\"399\":\"v-30c465ed#1\",\"400\":\"v-30c465ed#1/0\",\"401\":\"v-30c465ed#1/1\",\"402\":\"v-30c465ed#1/2\",\"403\":\"v-30c465ed#1/3\",\"404\":\"v-30c465ed#1/4\",\"405\":\"v-30c465ed#1/5\",\"406\":\"v-30c465ed#1/6\",\"407\":\"v-30c465ed#1/7\",\"408\":\"v-30c465ed#1/8\",\"409\":\"v-30c465ed#1/9\",\"410\":\"v-30c465ed#1/10\",\"411\":\"v-30c465ed#1/11\",\"412\":\"v-30c465ed#1/12\",\"413\":\"v-30c465ed#1/13\",\"414\":\"v-30c465ed#1/14\",\"415\":\"v-30c465ed#1/15\",\"416\":\"v-30c465ed#2\",\"417\":\"v-30c465ed#2/0\",\"418\":\"v-30c465ed#2/1\",\"419\":\"v-30c465ed#2/2\",\"420\":\"v-30c465ed#2/3\",\"421\":\"v-30c465ed#2/4\",\"422\":\"v-30c465ed#2/5\",\"423\":\"v-30c465ed#2/6\",\"424\":\"v-30c465ed#2/7\",\"425\":\"v-30c465ed#2/8\",\"426\":\"v-30c465ed#2/9\",\"427\":\"v-30c465ed#2/10\",\"428\":\"v-30c465ed#2/11\",\"429\":\"v-30c465ed#2/12\",\"430\":\"v-30c465ed#2/13\",\"431\":\"v-30c465ed#2/14\",\"432\":\"v-30c465ed#3\",\"433\":\"v-30c465ed#3/0\",\"434\":\"v-30c465ed#3/1\",\"435\":\"v-30c465ed#3/2\",\"436\":\"v-30c465ed#3/3\",\"437\":\"v-30c465ed#3/4\",\"438\":\"v-30c465ed#3/5\",\"439\":\"v-30c465ed#3/6\",\"440\":\"v-30c465ed#3/7\",\"441\":\"v-30c465ed#3/8\",\"442\":\"v-30c465ed#3/9\",\"443\":\"v-30c465ed#3/10\",\"444\":\"v-30c465ed#3/11\",\"445\":\"v-30c465ed#3/12\",\"446\":\"v-30c465ed#3/13\",\"447\":\"v-30c465ed#4\",\"448\":\"v-30c465ed#4/0\",\"449\":\"v-30c465ed#4/1\",\"450\":\"v-30c465ed#4/2\",\"451\":\"v-30c465ed#4/3\",\"452\":\"v-30c465ed#4/4\",\"453\":\"v-30c465ed#4/5\",\"454\":\"v-30c465ed#4/6\",\"455\":\"v-30c465ed#4/7\",\"456\":\"v-30c465ed#4/8\",\"457\":\"v-30c465ed#4/9\",\"458\":\"v-30c465ed#4/10\",\"459\":\"v-30c465ed#4/11\",\"460\":\"v-30c465ed#4/12\",\"461\":\"v-30c465ed#5\",\"462\":\"v-30c465ed#5/0\",\"463\":\"v-30c465ed#5/1\",\"464\":\"v-30c465ed#5/2\",\"465\":\"v-30c465ed#5/3\",\"466\":\"v-30c465ed#5/4\",\"467\":\"v-30c465ed#5/5\",\"468\":\"v-30c465ed#5/6\",\"469\":\"v-30c465ed#5/7\",\"470\":\"v-30c465ed#5/8\",\"471\":\"v-30c465ed#5/9\",\"472\":\"v-30c465ed#5/10\",\"473\":\"v-30c465ed#5/11\",\"474\":\"v-30c465ed#5/12\",\"475\":\"v-30c465ed#5/13\",\"476\":\"v-30c465ed#5/14\",\"477\":\"v-30c465ed#5/15\",\"478\":\"v-30c465ed#5/16\",\"479\":\"v-30c465ed#5/17\",\"480\":\"v-30c465ed#6\",\"481\":\"v-30c465ed#6/0\",\"482\":\"v-30c465ed#6/1\",\"483\":\"v-9fc6e360\",\"484\":\"v-9fc6e360#1\",\"485\":\"v-9fc6e360#1/0\",\"486\":\"v-9fc6e360#1/1\",\"487\":\"v-9fc6e360#1/2\",\"488\":\"v-9fc6e360#1/3\",\"489\":\"v-9fc6e360#1/4\",\"490\":\"v-9fc6e360#1/5\",\"491\":\"v-9fc6e360#1/6\",\"492\":\"v-9fc6e360#1/7\",\"493\":\"v-9fc6e360#1/8\",\"494\":\"v-9fc6e360#1/9\",\"495\":\"v-9fc6e360#1/10\",\"496\":\"v-9fc6e360#1/11\",\"497\":\"v-9fc6e360#2\",\"498\":\"v-9fc6e360#2/0\",\"499\":\"v-9fc6e360#2/1\",\"500\":\"v-9fc6e360#2/2\",\"501\":\"v-9fc6e360#2/3\",\"502\":\"v-9fc6e360#3\",\"503\":\"v-9fc6e360#3/0\",\"504\":\"v-9fc6e360#3/1\",\"505\":\"v-9fc6e360#3/2\",\"506\":\"v-9fc6e360#3/3\",\"507\":\"v-9fc6e360#3/4\",\"508\":\"v-9fc6e360#4\",\"509\":\"v-9fc6e360#4/0\",\"510\":\"v-9fc6e360#4/1\",\"511\":\"v-9fc6e360#5\",\"512\":\"v-9fc6e360#6\",\"513\":\"v-9fc6e360#6/0\",\"514\":\"v-9fc6e360#6/1\",\"515\":\"v-9fc6e360#7\",\"516\":\"v-9fc6e360#7/0\",\"517\":\"v-9fc6e360#7/1\",\"518\":\"v-9fc6e360#7/2\",\"519\":\"v-9fc6e360#7/3\",\"520\":\"v-9fc6e360#7/4\",\"521\":\"v-9fc6e360#7/5\",\"522\":\"v-9fc6e360#7/6\",\"523\":\"v-9fc6e360#8\",\"524\":\"v-9fc6e360#8/7\",\"525\":\"v-9fc6e360#8/8\",\"526\":\"v-9fc6e360#8/9\",\"527\":\"v-9fc6e360#9\",\"528\":\"v-9fc6e360#10\",\"529\":\"v-9fc6e360#10/0\",\"530\":\"v-9fc6e360#10/1\",\"531\":\"v-9fc6e360#10/2\",\"532\":\"v-9fc6e360#10/3\",\"533\":\"v-9fc6e360#11\",\"534\":\"v-9fc6e360#11/0\",\"535\":\"v-9fc6e360#11/1\",\"536\":\"v-9fc6e360#11/2\",\"537\":\"v-9fc6e360#11/3\",\"538\":\"v-9fc6e360#11/4\",\"539\":\"v-9fc6e360#11/5\",\"540\":\"v-9fc6e360#11/6\",\"541\":\"v-9fc6e360#11/7\",\"542\":\"v-9fc6e360#11/8\",\"543\":\"v-9fc6e360#12\",\"544\":\"v-9fc6e360#12/9\",\"545\":\"v-9fc6e360#12/10\",\"546\":\"v-9fc6e360#13\",\"547\":\"v-9fc6e360#14\",\"548\":\"v-9fc6e360#14/0\",\"549\":\"v-9fc6e360#14/1\",\"550\":\"v-9fc6e360#14/2\",\"551\":\"v-9fc6e360#15\",\"552\":\"v-9fc6e360#15/0\",\"553\":\"v-9fc6e360#15/1\",\"554\":\"v-9fc6e360#15/2\",\"555\":\"v-9fc6e360#15/3\",\"556\":\"v-9fc6e360#15/4\",\"557\":\"v-9fc6e360#15/5\",\"558\":\"v-9fc6e360#15/6\",\"559\":\"v-9fc6e360#15/7\",\"560\":\"v-9fc6e360#15/8\",\"561\":\"v-9fc6e360#15/9\",\"562\":\"v-9fc6e360#15/10\",\"563\":\"v-9fc6e360#15/11\",\"564\":\"v-9fc6e360#15/12\",\"565\":\"v-9fc6e360#15/13\",\"566\":\"v-9fc6e360#15/14\",\"567\":\"v-9fc6e360#16\",\"568\":\"v-9fc6e360#16/15\",\"569\":\"v-9fc6e360#16/16\",\"570\":\"v-9fc6e360#16/17\",\"571\":\"v-9fc6e360#16/18\",\"572\":\"v-9fc6e360#16/19\",\"573\":\"v-9fc6e360#17\",\"574\":\"v-9fc6e360#17/0\",\"575\":\"v-9fc6e360#17/1\",\"576\":\"v-9fc6e360#17/2\",\"577\":\"v-9fc6e360#17/3\",\"578\":\"v-9fc6e360#17/4\",\"579\":\"v-9fc6e360#17/5\",\"580\":\"v-9fc6e360#18\",\"581\":\"v-9fc6e360#18/0\",\"582\":\"v-9fc6e360#18/1\",\"583\":\"v-9fc6e360#18/2\",\"584\":\"v-23dca26c\",\"585\":\"v-23dca26c#1\",\"586\":\"v-23dca26c#1/0\",\"587\":\"v-23dca26c#1/1\",\"588\":\"v-23dca26c#1/2\",\"589\":\"v-23dca26c#1/3\",\"590\":\"v-23dca26c#1/4\",\"591\":\"v-23dca26c#1/5\",\"592\":\"v-23dca26c#1/6\",\"593\":\"v-23dca26c#1/7\",\"594\":\"v-23dca26c#1/8\",\"595\":\"v-23dca26c#1/9\",\"596\":\"v-23dca26c#1/10\",\"597\":\"v-23dca26c#2\",\"598\":\"v-23dca26c#2/0\",\"599\":\"v-23dca26c#2/1\",\"600\":\"v-23dca26c#2/2\",\"601\":\"v-23dca26c#2/3\",\"602\":\"v-23dca26c#2/4\",\"603\":\"v-23dca26c#2/5\",\"604\":\"v-23dca26c#2/6\",\"605\":\"v-23dca26c#2/7\",\"606\":\"v-23dca26c#3\",\"607\":\"v-23dca26c#3/8\",\"608\":\"v-23dca26c#3/9\",\"609\":\"v-23dca26c#4\",\"610\":\"v-23dca26c#4/0\",\"611\":\"v-23dca26c#4/1\",\"612\":\"v-23dca26c#5\",\"613\":\"v-23dca26c#5/0\",\"614\":\"v-23dca26c#5/1\",\"615\":\"v-23dca26c#5/2\",\"616\":\"v-23dca26c#6\",\"617\":\"v-23dca26c#6/0\",\"618\":\"v-23dca26c#6/1\",\"619\":\"v-23dca26c#6/2\",\"620\":\"v-23dca26c#6/3\",\"621\":\"v-23dca26c#6/4\",\"622\":\"v-23dca26c#6/5\",\"623\":\"v-23dca26c#6/6\",\"624\":\"v-23dca26c#6/7\",\"625\":\"v-23dca26c#6/8\",\"626\":\"v-23dca26c#6/9\",\"627\":\"v-23dca26c#7\",\"628\":\"v-23dca26c#7/10\",\"629\":\"v-23dca26c#7/11\",\"630\":\"v-23dca26c#7/12\",\"631\":\"v-23dca26c#7/13\",\"632\":\"v-23dca26c#8\",\"633\":\"v-23dca26c#8/0\",\"634\":\"v-23dca26c#8/1\",\"635\":\"v-23dca26c#8/2\",\"636\":\"v-23dca26c#8/3\",\"637\":\"v-23dca26c#8/4\",\"638\":\"v-23dca26c#9\",\"639\":\"v-23dca26c#9/0\",\"640\":\"v-23dca26c#9/1\",\"641\":\"v-23dca26c#9/2\",\"642\":\"v-23dca26c#9/3\",\"643\":\"v-23dca26c#9/4\",\"644\":\"v-23dca26c#9/5\",\"645\":\"v-23dca26c#9/6\",\"646\":\"v-23dca26c#9/7\",\"647\":\"v-23dca26c#9/8\",\"648\":\"v-23dca26c#10\",\"649\":\"v-23dca26c#10/0\",\"650\":\"v-23dca26c#10/1\",\"651\":\"v-23dca26c#10/2\",\"652\":\"v-23dca26c#10/3\",\"653\":\"v-23dca26c#10/4\",\"654\":\"v-23dca26c#10/5\",\"655\":\"v-23dca26c#10/6\",\"656\":\"v-23dca26c#11\",\"657\":\"v-23dca26c#11/0\",\"658\":\"v-23dca26c#11/1\",\"659\":\"v-6e251184\",\"660\":\"v-6e251184#1\",\"661\":\"v-6e251184#1/0\",\"662\":\"v-6e251184#1/1\",\"663\":\"v-6e251184#1/2\",\"664\":\"v-6e251184#1/3\",\"665\":\"v-6e251184#1/4\",\"666\":\"v-6e251184#1/5\",\"667\":\"v-6e251184#1/6\",\"668\":\"v-6e251184#1/7\",\"669\":\"v-6e251184#1/8\",\"670\":\"v-6e251184#1/9\",\"671\":\"v-6e251184#1/10\",\"672\":\"v-6e251184#1/11\",\"673\":\"v-6e251184#1/12\",\"674\":\"v-6e251184#2\",\"675\":\"v-6e251184#2/0\",\"676\":\"v-6e251184#2/1\",\"677\":\"v-6e251184#2/2\",\"678\":\"v-6e251184#2/3\",\"679\":\"v-6e251184#3\",\"680\":\"v-6e251184#3/0\",\"681\":\"v-6e251184#3/1\",\"682\":\"v-6e251184#3/2\",\"683\":\"v-6e251184#3/3\",\"684\":\"v-6e251184#3/4\",\"685\":\"v-6e251184#3/5\",\"686\":\"v-6e251184#4\",\"687\":\"v-6e251184#4/0\",\"688\":\"v-6e251184#4/1\",\"689\":\"v-6e251184#5\",\"690\":\"v-6e251184#5/0\",\"691\":\"v-6e251184#5/1\",\"692\":\"v-6e251184#5/2\",\"693\":\"v-6e251184#5/3\",\"694\":\"v-6e251184#5/4\",\"695\":\"v-6e251184#5/5\",\"696\":\"v-6e251184#5/6\",\"697\":\"v-6e251184#5/7\",\"698\":\"v-6e251184#6\",\"699\":\"v-6e251184#6/8\",\"700\":\"v-6e251184#6/9\",\"701\":\"v-6e251184#6/10\",\"702\":\"v-6e251184#7\",\"703\":\"v-6e251184#7/0\",\"704\":\"v-6e251184#7/1\",\"705\":\"v-6e251184#7/2\",\"706\":\"v-6e251184#7/3\",\"707\":\"v-6e251184#7/4\",\"708\":\"v-6e251184#7/5\",\"709\":\"v-6e251184#7/6\",\"710\":\"v-6e251184#7/7\",\"711\":\"v-6e251184#7/8\",\"712\":\"v-6e251184#7/9\",\"713\":\"v-6e251184#7/10\",\"714\":\"v-6e251184#8\",\"715\":\"v-6e251184#8/11\",\"716\":\"v-6e251184#8/12\",\"717\":\"v-6e251184#8/13\",\"718\":\"v-6e251184#8/14\",\"719\":\"v-6e251184#8/15\",\"720\":\"v-6e251184#8/16\",\"721\":\"v-6e251184#9\",\"722\":\"v-6e251184#9/0\",\"723\":\"v-6e251184#9/1\",\"724\":\"v-6e251184#9/2\",\"725\":\"v-6e251184#9/3\",\"726\":\"v-6e251184#9/4\",\"727\":\"v-6e251184#9/5\",\"728\":\"v-6e251184#9/6\",\"729\":\"v-6e251184#9/7\",\"730\":\"v-6e251184#10\",\"731\":\"v-6e251184#10/0\",\"732\":\"v-6e251184#10/1\",\"733\":\"v-6e251184#10/2\",\"734\":\"v-6e251184#10/3\",\"735\":\"v-6e251184#10/4\",\"736\":\"v-6e251184#10/5\",\"737\":\"v-6e251184#10/6\",\"738\":\"v-2b152058\",\"739\":\"v-2b152058#1\",\"740\":\"v-2b152058#1/0\",\"741\":\"v-2b152058#1/1\",\"742\":\"v-2b152058#1/2\",\"743\":\"v-2b152058#1/3\",\"744\":\"v-2b152058#1/4\",\"745\":\"v-2b152058#1/5\",\"746\":\"v-2b152058#1/6\",\"747\":\"v-2b152058#1/7\",\"748\":\"v-2b152058#1/8\",\"749\":\"v-2b152058#1/9\",\"750\":\"v-2b152058#1/10\",\"751\":\"v-2b152058#1/11\",\"752\":\"v-2b152058#1/12\",\"753\":\"v-2b152058#1/13\",\"754\":\"v-2b152058#1/14\",\"755\":\"v-2b152058#1/15\",\"756\":\"v-2b152058#2\",\"757\":\"v-2b152058#2/0\",\"758\":\"v-2b152058#2/1\",\"759\":\"v-2b152058#2/2\",\"760\":\"v-2b152058#2/3\",\"761\":\"v-2b152058#2/4\",\"762\":\"v-2b152058#2/5\",\"763\":\"v-2b152058#2/6\",\"764\":\"v-2b152058#2/7\",\"765\":\"v-2b152058#2/8\",\"766\":\"v-2b152058#2/9\",\"767\":\"v-2b152058#3\",\"768\":\"v-2b152058#3/10\",\"769\":\"v-2b152058#3/11\",\"770\":\"v-2b152058#3/12\",\"771\":\"v-2b152058#3/13\",\"772\":\"v-2b152058#3/14\",\"773\":\"v-2b152058#3/15\",\"774\":\"v-2b152058#3/16\",\"775\":\"v-2b152058#3/17\",\"776\":\"v-2b152058#3/18\",\"777\":\"v-2b152058#3/19\",\"778\":\"v-2b152058#3/20\",\"779\":\"v-2b152058#3/21\",\"780\":\"v-2b152058#3/22\",\"781\":\"v-2b152058#3/23\",\"782\":\"v-2b152058#3/24\",\"783\":\"v-2b152058#3/25\",\"784\":\"v-2b152058#4\",\"785\":\"v-2b152058#4/26\",\"786\":\"v-2b152058#4/27\",\"787\":\"v-2b152058#4/28\",\"788\":\"v-2b152058#4/29\",\"789\":\"v-2b152058#4/30\",\"790\":\"v-2b152058#4/31\",\"791\":\"v-2b152058#4/32\",\"792\":\"v-2b152058#5\",\"793\":\"v-2b152058#5/0\",\"794\":\"v-2b152058#5/1\",\"795\":\"v-2b152058#5/2\",\"796\":\"v-2b152058#5/3\",\"797\":\"v-2b152058#6\",\"798\":\"v-2b152058#6/0\",\"799\":\"v-2b152058#6/1\",\"800\":\"v-2b152058#6/2\",\"801\":\"v-2b152058#6/3\",\"802\":\"v-2b152058#6/4\",\"803\":\"v-2b152058#6/5\",\"804\":\"v-cf7f7ed0\",\"805\":\"v-cf7f7ed0#1\",\"806\":\"v-cf7f7ed0#1/0\",\"807\":\"v-cf7f7ed0#1/1\",\"808\":\"v-cf7f7ed0#1/2\",\"809\":\"v-cf7f7ed0#1/3\",\"810\":\"v-cf7f7ed0#1/4\",\"811\":\"v-cf7f7ed0#1/5\",\"812\":\"v-cf7f7ed0#1/6\",\"813\":\"v-cf7f7ed0#1/7\",\"814\":\"v-cf7f7ed0#1/8\",\"815\":\"v-cf7f7ed0#1/9\",\"816\":\"v-cf7f7ed0#1/10\",\"817\":\"v-cf7f7ed0#2\",\"818\":\"v-cf7f7ed0#2/0\",\"819\":\"v-cf7f7ed0#2/1\",\"820\":\"v-cf7f7ed0#2/2\",\"821\":\"v-cf7f7ed0#2/3\",\"822\":\"v-cf7f7ed0#3\",\"823\":\"v-cf7f7ed0#3/0\",\"824\":\"v-cf7f7ed0#3/1\",\"825\":\"v-cf7f7ed0#4\",\"826\":\"v-cf7f7ed0#4/0\",\"827\":\"v-cf7f7ed0#4/1\",\"828\":\"v-cf7f7ed0#5\",\"829\":\"v-cf7f7ed0#5/0\",\"830\":\"v-cf7f7ed0#5/1\",\"831\":\"v-cf7f7ed0#5/2\",\"832\":\"v-cf7f7ed0#5/3\",\"833\":\"v-cf7f7ed0#5/4\",\"834\":\"v-cf7f7ed0#5/5\",\"835\":\"v-cf7f7ed0#6\",\"836\":\"v-cf7f7ed0#6/6\",\"837\":\"v-cf7f7ed0#6/7\",\"838\":\"v-cf7f7ed0#7\",\"839\":\"v-cf7f7ed0#7/0\",\"840\":\"v-cf7f7ed0#7/1\",\"841\":\"v-cf7f7ed0#7/2\",\"842\":\"v-cf7f7ed0#7/3\",\"843\":\"v-cf7f7ed0#7/4\",\"844\":\"v-cf7f7ed0#7/5\",\"845\":\"v-cf7f7ed0#8\",\"846\":\"v-cf7f7ed0#8/0\",\"847\":\"v-cf7f7ed0#8/1\",\"848\":\"v-cf7f7ed0#8/2\",\"849\":\"v-cf7f7ed0#8/3\",\"850\":\"v-cf7f7ed0#8/4\",\"851\":\"v-cf7f7ed0#8/5\",\"852\":\"v-cf7f7ed0#8/6\",\"853\":\"v-cf7f7ed0#8/7\",\"854\":\"v-cf7f7ed0#8/8\",\"855\":\"v-cf7f7ed0#8/9\",\"856\":\"v-cf7f7ed0#8/10\",\"857\":\"v-cf7f7ed0#8/11\",\"858\":\"v-cf7f7ed0#8/12\",\"859\":\"v-cf7f7ed0#9\",\"860\":\"v-cf7f7ed0#9/13\",\"861\":\"v-cf7f7ed0#9/14\",\"862\":\"v-cf7f7ed0#9/15\",\"863\":\"v-cf7f7ed0#10\",\"864\":\"v-cf7f7ed0#10/0\",\"865\":\"v-cf7f7ed0#10/1\",\"866\":\"v-cf7f7ed0#10/2\",\"867\":\"v-cf7f7ed0#10/3\",\"868\":\"v-cf7f7ed0#10/4\",\"869\":\"v-cf7f7ed0#11\",\"870\":\"v-cf7f7ed0#11/0\",\"871\":\"v-cf7f7ed0#11/1\",\"872\":\"v-cf7f7ed0#11/2\",\"873\":\"v-3b93eb64\",\"874\":\"v-3b93eb64#1\",\"875\":\"v-3b93eb64#1/0\",\"876\":\"v-3b93eb64#1/1\",\"877\":\"v-3b93eb64#1/2\",\"878\":\"v-3b93eb64#1/3\",\"879\":\"v-3b93eb64#1/4\",\"880\":\"v-3b93eb64#1/5\",\"881\":\"v-3b93eb64#1/6\",\"882\":\"v-3b93eb64#1/7\",\"883\":\"v-3b93eb64#1/8\",\"884\":\"v-3b93eb64#2\",\"885\":\"v-3b93eb64#2/0\",\"886\":\"v-3b93eb64#2/1\",\"887\":\"v-3b93eb64#2/2\",\"888\":\"v-3b93eb64#2/3\",\"889\":\"v-3b93eb64#2/4\",\"890\":\"v-3b93eb64#2/5\",\"891\":\"v-3b93eb64#2/6\",\"892\":\"v-3b93eb64#2/7\",\"893\":\"v-3b93eb64#2/8\",\"894\":\"v-3b93eb64#2/9\",\"895\":\"v-3b93eb64#3\",\"896\":\"v-3b93eb64#3/10\",\"897\":\"v-3b93eb64#3/11\",\"898\":\"v-3b93eb64#3/12\",\"899\":\"v-3b93eb64#3/13\",\"900\":\"v-3b93eb64#4\",\"901\":\"v-3b93eb64#4/0\",\"902\":\"v-3b93eb64#4/1\",\"903\":\"v-3b93eb64#4/2\",\"904\":\"v-3b93eb64#4/3\",\"905\":\"v-3b93eb64#4/4\",\"906\":\"v-3b93eb64#4/5\",\"907\":\"v-3b93eb64#4/6\",\"908\":\"v-3b93eb64#4/7\",\"909\":\"v-3b93eb64#5\",\"910\":\"v-3b93eb64#5/0\",\"911\":\"v-3b93eb64#5/1\",\"912\":\"v-3b93eb64#5/2\",\"913\":\"v-3b93eb64#5/3\",\"914\":\"v-3b93eb64#5/4\",\"915\":\"v-3b93eb64#5/5\",\"916\":\"v-3b93eb64#5/6\",\"917\":\"v-3b93eb64#6\",\"918\":\"v-3b93eb64#6/0\",\"919\":\"v-3b93eb64#6/1\",\"920\":\"v-3b93eb64#6/2\",\"921\":\"v-3b93eb64#6/3\",\"922\":\"v-3b93eb64#6/4\",\"923\":\"v-3b93eb64#6/5\",\"924\":\"v-3b93eb64#6/6\",\"925\":\"v-3b93eb64#6/7\",\"926\":\"v-3b93eb64#6/8\",\"927\":\"v-3b93eb64#6/9\",\"928\":\"v-3b93eb64#6/10\",\"929\":\"v-3b93eb64#7\",\"930\":\"v-3b93eb64#7/11\",\"931\":\"v-3b93eb64#7/12\",\"932\":\"v-3b93eb64#7/13\",\"933\":\"v-3b93eb64#7/14\",\"934\":\"v-3b93eb64#7/15\",\"935\":\"v-3b93eb64#7/16\",\"936\":\"v-3b93eb64#7/17\",\"937\":\"v-3b93eb64#7/18\",\"938\":\"v-3b93eb64#8\",\"939\":\"v-3b93eb64#8/0\",\"940\":\"v-3b93eb64#8/1\",\"941\":\"v-3b93eb64#8/2\",\"942\":\"v-3b93eb64#8/3\",\"943\":\"v-3b93eb64#8/4\",\"944\":\"v-2014e344\",\"945\":\"v-2014e344#1\",\"946\":\"v-2014e344#1/0\",\"947\":\"v-2014e344#2\",\"948\":\"v-2014e344#2/0\",\"949\":\"v-2014e344#2/1\",\"950\":\"v-2014e344#2/2\",\"951\":\"v-2014e344#2/3\",\"952\":\"v-2014e344#2/4\",\"953\":\"v-2014e344#2/5\",\"954\":\"v-2014e344#2/6\",\"955\":\"v-2014e344#2/7\",\"956\":\"v-2014e344#2/8\",\"957\":\"v-2014e344#2/9\",\"958\":\"v-2014e344#2/10\",\"959\":\"v-2014e344#2/11\",\"960\":\"v-2014e344#2/12\",\"961\":\"v-2014e344#2/13\",\"962\":\"v-2014e344#2/14\",\"963\":\"v-2014e344#2/15\",\"964\":\"v-2014e344#2/16\",\"965\":\"v-2014e344#2/17\",\"966\":\"v-2014e344#2/18\",\"967\":\"v-2014e344#2/19\",\"968\":\"v-2014e344#2/20\",\"969\":\"v-2014e344#2/21\",\"970\":\"v-2014e344#2/22\",\"971\":\"v-2014e344#2/23\",\"972\":\"v-2014e344#2/24\",\"973\":\"v-2014e344#2/25\",\"974\":\"v-2014e344#2/26\",\"975\":\"v-2014e344#2/27\",\"976\":\"v-2014e344#3\",\"977\":\"v-2014e344#3/28\",\"978\":\"v-2014e344#3/29\",\"979\":\"v-2014e344#3/30\",\"980\":\"v-2014e344#3/31\",\"981\":\"v-2014e344#3/32\",\"982\":\"v-2014e344#3/33\",\"983\":\"v-2014e344#3/34\",\"984\":\"v-2014e344#3/35\",\"985\":\"v-2014e344#3/36\",\"986\":\"v-2014e344#3/37\",\"987\":\"v-2014e344#3/38\",\"988\":\"v-2014e344#3/39\",\"989\":\"v-2014e344#3/40\",\"990\":\"v-2014e344#3/41\",\"991\":\"v-2014e344#3/42\",\"992\":\"v-2014e344#3/43\",\"993\":\"v-2014e344#3/44\",\"994\":\"v-2014e344#3/45\",\"995\":\"v-2014e344#3/46\",\"996\":\"v-2014e344#3/47\",\"997\":\"v-2014e344#3/48\",\"998\":\"v-2014e344#3/49\",\"999\":\"v-2014e344#3/50\",\"1000\":\"v-2014e344#3/51\",\"1001\":\"v-2014e344#3/52\",\"1002\":\"v-2014e344#3/53\",\"1003\":\"v-2014e344#3/54\",\"1004\":\"v-2014e344#3/55\",\"1005\":\"v-2014e344#3/56\",\"1006\":\"v-2014e344#3/57\",\"1007\":\"v-2014e344#3/58\",\"1008\":\"v-2014e344#3/59\",\"1009\":\"v-2014e344#3/60\",\"1010\":\"v-2014e344#3/61\",\"1011\":\"v-2014e344#3/62\",\"1012\":\"v-2014e344#3/63\",\"1013\":\"v-2014e344#3/64\",\"1014\":\"v-2014e344#3/65\",\"1015\":\"v-2014e344#3/66\",\"1016\":\"v-2014e344#3/67\",\"1017\":\"v-2014e344#3/68\",\"1018\":\"v-2014e344#3/69\",\"1019\":\"v-2014e344#3/70\",\"1020\":\"v-2014e344#4\",\"1021\":\"v-2014e344#4/71\",\"1022\":\"v-2014e344#4/72\",\"1023\":\"v-2014e344#4/73\",\"1024\":\"v-2014e344#4/74\",\"1025\":\"v-2014e344#4/75\",\"1026\":\"v-2014e344#4/76\",\"1027\":\"v-2014e344#4/77\",\"1028\":\"v-2014e344#4/78\",\"1029\":\"v-2014e344#4/79\",\"1030\":\"v-2014e344#4/80\",\"1031\":\"v-2014e344#4/81\",\"1032\":\"v-2014e344#4/82\",\"1033\":\"v-2014e344#4/83\",\"1034\":\"v-2014e344#4/84\",\"1035\":\"v-2014e344#4/85\",\"1036\":\"v-2014e344#4/86\",\"1037\":\"v-2014e344#4/87\",\"1038\":\"v-2014e344#4/88\",\"1039\":\"v-2014e344#4/89\",\"1040\":\"v-2014e344#4/90\",\"1041\":\"v-2014e344#4/91\",\"1042\":\"v-2014e344#4/92\",\"1043\":\"v-2014e344#4/93\",\"1044\":\"v-2014e344#4/94\",\"1045\":\"v-2014e344#4/95\",\"1046\":\"v-2014e344#4/96\",\"1047\":\"v-2014e344#4/97\",\"1048\":\"v-2014e344#4/98\",\"1049\":\"v-2014e344#4/99\",\"1050\":\"v-2014e344#4/100\",\"1051\":\"v-2014e344#4/101\",\"1052\":\"v-2014e344#4/102\",\"1053\":\"v-2014e344#4/103\",\"1054\":\"v-2014e344#4/104\",\"1055\":\"v-2014e344#4/105\",\"1056\":\"v-2014e344#4/106\",\"1057\":\"v-2014e344#4/107\",\"1058\":\"v-2014e344#4/108\",\"1059\":\"v-2014e344#4/109\",\"1060\":\"v-2014e344#4/110\",\"1061\":\"v-2014e344#4/111\",\"1062\":\"v-2014e344#4/112\",\"1063\":\"v-2014e344#4/113\",\"1064\":\"v-2014e344#4/114\",\"1065\":\"v-2014e344#4/115\",\"1066\":\"v-2014e344#4/116\",\"1067\":\"v-2014e344#4/117\",\"1068\":\"v-2014e344#4/118\",\"1069\":\"v-2014e344#4/119\",\"1070\":\"v-2014e344#4/120\",\"1071\":\"v-2014e344#4/121\",\"1072\":\"v-2014e344#4/122\",\"1073\":\"v-2014e344#4/123\",\"1074\":\"v-2014e344#4/124\",\"1075\":\"v-2014e344#4/125\",\"1076\":\"v-2014e344#4/126\",\"1077\":\"v-2014e344#4/127\",\"1078\":\"v-2014e344#4/128\",\"1079\":\"v-2014e344#4/129\",\"1080\":\"v-2014e344#4/130\",\"1081\":\"v-2014e344#4/131\",\"1082\":\"v-2014e344#4/132\",\"1083\":\"v-2014e344#4/133\",\"1084\":\"v-2014e344#4/134\",\"1085\":\"v-2014e344#4/135\",\"1086\":\"v-2014e344#4/136\",\"1087\":\"v-2014e344#4/137\",\"1088\":\"v-2014e344#4/138\",\"1089\":\"v-2014e344#4/139\",\"1090\":\"v-2014e344#4/140\",\"1091\":\"v-8e59b74e\",\"1092\":\"v-8e59b74e#1\",\"1093\":\"v-8e59b74e#1/0\",\"1094\":\"v-8e59b74e#1/1\",\"1095\":\"v-8e59b74e#1/2\",\"1096\":\"v-8e59b74e#1/3\",\"1097\":\"v-8e59b74e#1/4\",\"1098\":\"v-8e59b74e#1/5\",\"1099\":\"v-8e59b74e#1/6\",\"1100\":\"v-8e59b74e#1/7\",\"1101\":\"v-8e59b74e#1/8\",\"1102\":\"v-8e59b74e#1/9\",\"1103\":\"v-8e59b74e#1/10\",\"1104\":\"v-8e59b74e#1/11\",\"1105\":\"v-8e59b74e#2\",\"1106\":\"v-8e59b74e#2/0\",\"1107\":\"v-8e59b74e#3\",\"1108\":\"v-8e59b74e#3/0\",\"1109\":\"v-8e59b74e#3/1\",\"1110\":\"v-8e59b74e#3/2\",\"1111\":\"v-8e59b74e#3/3\",\"1112\":\"v-8e59b74e#3/4\",\"1113\":\"v-8e59b74e#4\",\"1114\":\"v-8e59b74e#4/0\",\"1115\":\"v-8e59b74e#5\",\"1116\":\"v-8e59b74e#5/1\",\"1117\":\"v-8e59b74e#5/2\",\"1118\":\"v-8e59b74e#6\",\"1119\":\"v-8e59b74e#7\",\"1120\":\"v-8e59b74e#7/0\",\"1121\":\"v-8e59b74e#8\",\"1122\":\"v-8e59b74e#8/0\",\"1123\":\"v-8e59b74e#8/1\",\"1124\":\"v-8e59b74e#8/2\",\"1125\":\"v-8e59b74e#9\",\"1126\":\"v-8e59b74e#9/0\",\"1127\":\"v-8e59b74e#9/1\",\"1128\":\"v-8e59b74e#9/2\",\"1129\":\"v-8e59b74e#9/3\",\"1130\":\"v-8e59b74e#9/4\",\"1131\":\"v-8e59b74e#9/5\",\"1132\":\"v-8e59b74e#9/6\",\"1133\":\"v-8e59b74e#9/7\",\"1134\":\"v-8e59b74e#9/8\",\"1135\":\"v-8e59b74e#9/9\",\"1136\":\"v-8e59b74e#9/10\",\"1137\":\"v-8e59b74e#9/11\",\"1138\":\"v-8e59b74e#9/12\",\"1139\":\"v-8e59b74e#10\",\"1140\":\"v-8e59b74e#10/13\",\"1141\":\"v-8e59b74e#10/14\",\"1142\":\"v-8e59b74e#10/15\",\"1143\":\"v-8e59b74e#10/16\",\"1144\":\"v-8e59b74e#11\",\"1145\":\"v-8e59b74e#11/0\",\"1146\":\"v-8e59b74e#11/1\",\"1147\":\"v-8e59b74e#11/2\",\"1148\":\"v-8e59b74e#11/3\",\"1149\":\"v-8e59b74e#11/4\",\"1150\":\"v-8e59b74e#11/5\",\"1151\":\"v-8e59b74e#12\",\"1152\":\"v-8e59b74e#12/0\",\"1153\":\"v-8e59b74e#12/1\",\"1154\":\"v-8e59b74e#12/2\",\"1155\":\"v-8e59b74e#12/3\",\"1156\":\"v-05c85d75\",\"1157\":\"v-05c85d75#1\",\"1158\":\"v-05c85d75#1/0\",\"1159\":\"v-05c85d75#1/1\",\"1160\":\"v-05c85d75#1/2\",\"1161\":\"v-05c85d75#1/3\",\"1162\":\"v-05c85d75#1/4\",\"1163\":\"v-05c85d75#1/5\",\"1164\":\"v-05c85d75#1/6\",\"1165\":\"v-05c85d75#1/7\",\"1166\":\"v-05c85d75#1/8\",\"1167\":\"v-05c85d75#1/9\",\"1168\":\"v-05c85d75#2\",\"1169\":\"v-05c85d75#3\",\"1170\":\"v-05c85d75#3/0\",\"1171\":\"v-05c85d75#3/1\",\"1172\":\"v-05c85d75#3/2\",\"1173\":\"v-05c85d75#3/3\",\"1174\":\"v-05c85d75#3/4\",\"1175\":\"v-05c85d75#3/5\",\"1176\":\"v-05c85d75#3/6\",\"1177\":\"v-05c85d75#3/7\",\"1178\":\"v-05c85d75#3/8\",\"1179\":\"v-05c85d75#3/9\",\"1180\":\"v-05c85d75#3/10\",\"1181\":\"v-05c85d75#3/11\",\"1182\":\"v-05c85d75#3/12\",\"1183\":\"v-05c85d75#3/13\",\"1184\":\"v-05c85d75#3/14\",\"1185\":\"v-05c85d75#3/15\",\"1186\":\"v-05c85d75#3/16\",\"1187\":\"v-05c85d75#3/17\",\"1188\":\"v-05c85d75#3/18\",\"1189\":\"v-05c85d75#4\",\"1190\":\"v-05c85d75#4/0\",\"1191\":\"v-05c85d75#4/1\",\"1192\":\"v-05c85d75#4/2\",\"1193\":\"v-05c85d75#4/3\",\"1194\":\"v-05c85d75#4/4\",\"1195\":\"v-05c85d75#4/5\",\"1196\":\"v-05c85d75#4/6\",\"1197\":\"v-05c85d75#4/7\",\"1198\":\"v-05c85d75#4/8\",\"1199\":\"v-05c85d75#4/9\",\"1200\":\"v-05c85d75#4/10\",\"1201\":\"v-05c85d75#4/11\",\"1202\":\"v-05c85d75#4/12\",\"1203\":\"v-05c85d75#4/13\",\"1204\":\"v-05c85d75#4/14\",\"1205\":\"v-05c85d75#4/15\",\"1206\":\"v-05c85d75#4/16\",\"1207\":\"v-05c85d75#5\",\"1208\":\"v-05c85d75#5/0\",\"1209\":\"v-05c85d75#5/1\",\"1210\":\"v-05c85d75#5/2\",\"1211\":\"v-05c85d75#5/3\",\"1212\":\"v-05c85d75#5/4\",\"1213\":\"v-05c85d75#5/5\",\"1214\":\"v-05c85d75#5/6\",\"1215\":\"v-05c85d75#5/7\",\"1216\":\"v-05c85d75#6\",\"1217\":\"v-05c85d75#7\",\"1218\":\"v-05c85d75#7/0\",\"1219\":\"v-05c85d75#7/1\",\"1220\":\"v-05c85d75#7/2\",\"1221\":\"v-05c85d75#7/3\",\"1222\":\"v-05c85d75#7/4\",\"1223\":\"v-05c85d75#7/5\",\"1224\":\"v-05c85d75#7/6\",\"1225\":\"v-05c85d75#7/7\",\"1226\":\"v-05c85d75#7/8\",\"1227\":\"v-05c85d75#7/9\",\"1228\":\"v-05c85d75#7/10\",\"1229\":\"v-05c85d75#7/11\",\"1230\":\"v-05c85d75#7/12\",\"1231\":\"v-05c85d75#7/13\",\"1232\":\"v-05c85d75#7/14\",\"1233\":\"v-05c85d75#7/15\",\"1234\":\"v-05c85d75#7/16\",\"1235\":\"v-05c85d75#8\",\"1236\":\"v-05c85d75#8/0\",\"1237\":\"v-05c85d75#8/1\",\"1238\":\"v-05c85d75#8/2\",\"1239\":\"v-05c85d75#8/3\",\"1240\":\"v-05c85d75#8/4\",\"1241\":\"v-05c85d75#8/5\",\"1242\":\"v-05c85d75#8/6\",\"1243\":\"v-05c85d75#8/7\",\"1244\":\"v-05c85d75#8/8\",\"1245\":\"v-05c85d75#8/9\",\"1246\":\"v-05c85d75#8/10\",\"1247\":\"v-05c85d75#8/11\",\"1248\":\"v-05c85d75#8/12\",\"1249\":\"v-05c85d75#8/13\",\"1250\":\"v-05c85d75#8/14\",\"1251\":\"v-05c85d75#8/15\",\"1252\":\"v-05c85d75#9\",\"1253\":\"v-05c85d75#9/0\",\"1254\":\"v-05c85d75#9/1\",\"1255\":\"v-05c85d75#9/2\",\"1256\":\"v-05c85d75#9/3\",\"1257\":\"v-05c85d75#9/4\",\"1258\":\"v-05c85d75#9/5\",\"1259\":\"v-05c85d75#9/6\",\"1260\":\"v-05c85d75#9/7\",\"1261\":\"v-05c85d75#9/8\",\"1262\":\"v-05c85d75#9/9\",\"1263\":\"v-05c85d75#9/10\",\"1264\":\"v-05c85d75#9/11\",\"1265\":\"v-05c85d75#9/12\",\"1266\":\"v-05c85d75#9/13\",\"1267\":\"v-05c85d75#9/14\",\"1268\":\"v-05c85d75#9/15\",\"1269\":\"v-05c85d75#9/16\",\"1270\":\"v-05c85d75#9/17\",\"1271\":\"v-05c85d75#9/18\",\"1272\":\"v-05c85d75#9/19\",\"1273\":\"v-05c85d75#9/20\",\"1274\":\"v-05c85d75#9/21\",\"1275\":\"v-05c85d75#10\",\"1276\":\"v-05c85d75#11\",\"1277\":\"v-05c85d75#11/0\",\"1278\":\"v-05c85d75#11/1\",\"1279\":\"v-05c85d75#11/2\",\"1280\":\"v-05c85d75#11/3\",\"1281\":\"v-05c85d75#11/4\",\"1282\":\"v-05c85d75#11/5\",\"1283\":\"v-05c85d75#11/6\",\"1284\":\"v-05c85d75#11/7\",\"1285\":\"v-05c85d75#11/8\",\"1286\":\"v-05c85d75#11/9\",\"1287\":\"v-05c85d75#11/10\",\"1288\":\"v-05c85d75#11/11\",\"1289\":\"v-05c85d75#11/12\",\"1290\":\"v-05c85d75#11/13\",\"1291\":\"v-05c85d75#11/14\",\"1292\":\"v-05c85d75#11/15\",\"1293\":\"v-05c85d75#11/16\",\"1294\":\"v-05c85d75#11/17\",\"1295\":\"v-05c85d75#11/18\",\"1296\":\"v-05c85d75#11/19\",\"1297\":\"v-05c85d75#12\",\"1298\":\"v-05c85d75#12/0\",\"1299\":\"v-05c85d75#12/1\",\"1300\":\"v-05c85d75#12/2\",\"1301\":\"v-05c85d75#12/3\",\"1302\":\"v-05c85d75#12/4\",\"1303\":\"v-05c85d75#12/5\",\"1304\":\"v-05c85d75#12/6\",\"1305\":\"v-05c85d75#12/7\",\"1306\":\"v-05c85d75#12/8\",\"1307\":\"v-05c85d75#12/9\",\"1308\":\"v-05c85d75#12/10\",\"1309\":\"v-05c85d75#12/11\",\"1310\":\"v-05c85d75#12/12\",\"1311\":\"v-05c85d75#13\",\"1312\":\"v-05c85d75#13/13\",\"1313\":\"v-05c85d75#13/14\",\"1314\":\"v-05c85d75#13/15\",\"1315\":\"v-05c85d75#13/16\",\"1316\":\"v-05c85d75#14\",\"1317\":\"v-05c85d75#14/17\",\"1318\":\"v-05c85d75#14/18\",\"1319\":\"v-05c85d75#14/19\",\"1320\":\"v-05c85d75#14/20\",\"1321\":\"v-05c85d75#14/21\",\"1322\":\"v-05c85d75#14/22\",\"1323\":\"v-05c85d75#15\",\"1324\":\"v-05c85d75#15/0\",\"1325\":\"v-05c85d75#15/1\",\"1326\":\"v-05c85d75#16\",\"1327\":\"v-05c85d75#16/0\",\"1328\":\"v-05c85d75#16/1\",\"1329\":\"v-05c85d75#16/2\",\"1330\":\"v-05c85d75#17\",\"1331\":\"v-05c85d75#17/0\",\"1332\":\"v-05c85d75#17/1\",\"1333\":\"v-05c85d75#17/2\",\"1334\":\"v-05c85d75#17/3\",\"1335\":\"v-05c85d75#17/4\",\"1336\":\"v-05c85d75#17/5\",\"1337\":\"v-05c85d75#17/6\",\"1338\":\"v-05c85d75#17/7\",\"1339\":\"v-05c85d75#17/8\",\"1340\":\"v-05c85d75#17/9\",\"1341\":\"v-05c85d75#17/10\",\"1342\":\"v-05c85d75#17/11\",\"1343\":\"v-05c85d75#17/12\",\"1344\":\"v-05c85d75#17/13\",\"1345\":\"v-05c85d75#17/14\",\"1346\":\"v-05c85d75#18\",\"1347\":\"v-05c85d75#18/0\",\"1348\":\"v-05c85d75#19\",\"1349\":\"v-05c85d75#19/0\",\"1350\":\"v-05c85d75#19/1\",\"1351\":\"v-05c85d75#19/2\",\"1352\":\"v-05c85d75#19/3\",\"1353\":\"v-05c85d75#19/4\",\"1354\":\"v-05c85d75#20\",\"1355\":\"v-05c85d75#20/5\",\"1356\":\"v-05c85d75#20/6\",\"1357\":\"v-05c85d75#20/7\",\"1358\":\"v-05c85d75#21\",\"1359\":\"v-05c85d75#21/0\",\"1360\":\"v-05c85d75#21/1\",\"1361\":\"v-05c85d75#22\",\"1362\":\"v-05c85d75#22/2\",\"1363\":\"v-05c85d75#22/3\",\"1364\":\"v-05c85d75#22/4\",\"1365\":\"v-05c85d75#22/5\",\"1366\":\"v-05c85d75#22/6\",\"1367\":\"v-05c85d75#22/7\",\"1368\":\"v-05c85d75#22/8\",\"1369\":\"v-05c85d75#22/9\",\"1370\":\"v-5a65fcf4\",\"1371\":\"v-5a65fcf4#1\",\"1372\":\"v-5a65fcf4#1/0\",\"1373\":\"v-5a65fcf4#1/1\",\"1374\":\"v-5a65fcf4#1/2\",\"1375\":\"v-5a65fcf4#1/3\",\"1376\":\"v-5a65fcf4#1/4\",\"1377\":\"v-5a65fcf4#1/5\",\"1378\":\"v-5a65fcf4#1/6\",\"1379\":\"v-5a65fcf4#1/7\",\"1380\":\"v-5a65fcf4#1/8\",\"1381\":\"v-5a65fcf4#1/9\",\"1382\":\"v-5a65fcf4#1/10\",\"1383\":\"v-5a65fcf4#2\",\"1384\":\"v-5a65fcf4#3\",\"1385\":\"v-5a65fcf4#3/0\",\"1386\":\"v-5a65fcf4#3/1\",\"1387\":\"v-5a65fcf4#3/2\",\"1388\":\"v-5a65fcf4#3/3\",\"1389\":\"v-5a65fcf4#3/4\",\"1390\":\"v-5a65fcf4#3/5\",\"1391\":\"v-5a65fcf4#4\",\"1392\":\"v-5a65fcf4#4/0\",\"1393\":\"v-5a65fcf4#4/1\",\"1394\":\"v-5a65fcf4#4/2\",\"1395\":\"v-5a65fcf4#4/3\",\"1396\":\"v-5a65fcf4#4/4\",\"1397\":\"v-5a65fcf4#4/5\",\"1398\":\"v-5a65fcf4#4/6\",\"1399\":\"v-5a65fcf4#4/7\",\"1400\":\"v-5a65fcf4#4/8\",\"1401\":\"v-5a65fcf4#4/9\",\"1402\":\"v-5a65fcf4#4/10\",\"1403\":\"v-5a65fcf4#4/11\",\"1404\":\"v-5a65fcf4#4/12\",\"1405\":\"v-5a65fcf4#4/13\",\"1406\":\"v-5a65fcf4#4/14\",\"1407\":\"v-5a65fcf4#5\",\"1408\":\"v-5a65fcf4#5/15\",\"1409\":\"v-5a65fcf4#5/16\",\"1410\":\"v-5a65fcf4#5/17\",\"1411\":\"v-5a65fcf4#5/18\",\"1412\":\"v-5a65fcf4#6\",\"1413\":\"v-5a65fcf4#6/0\",\"1414\":\"v-5a65fcf4#6/1\",\"1415\":\"v-5a65fcf4#7\",\"1416\":\"v-5a65fcf4#7/0\",\"1417\":\"v-5a65fcf4#7/1\",\"1418\":\"v-5a65fcf4#7/2\",\"1419\":\"v-5a65fcf4#7/3\",\"1420\":\"v-5a65fcf4#8\",\"1421\":\"v-5a65fcf4#8/0\",\"1422\":\"v-5a65fcf4#8/1\",\"1423\":\"v-5a65fcf4#8/2\",\"1424\":\"v-5a65fcf4#8/3\",\"1425\":\"v-5a65fcf4#8/4\",\"1426\":\"v-5a65fcf4#8/5\",\"1427\":\"v-5a65fcf4#8/6\",\"1428\":\"v-5a65fcf4#8/7\",\"1429\":\"v-5a65fcf4#8/8\",\"1430\":\"v-5a65fcf4#8/9\",\"1431\":\"v-5a65fcf4#8/10\",\"1432\":\"v-5a65fcf4#9\",\"1433\":\"v-5a65fcf4#9/11\",\"1434\":\"v-5a65fcf4#9/12\",\"1435\":\"v-5a65fcf4#9/13\",\"1436\":\"v-5a65fcf4#9/14\",\"1437\":\"v-5a65fcf4#10\",\"1438\":\"v-5a65fcf4#10/15\",\"1439\":\"v-5a65fcf4#10/16\",\"1440\":\"v-5a65fcf4#10/17\",\"1441\":\"v-5a65fcf4#10/18\",\"1442\":\"v-5a65fcf4#10/19\",\"1443\":\"v-5a65fcf4#10/20\",\"1444\":\"v-5a65fcf4#10/21\",\"1445\":\"v-5a65fcf4#11\",\"1446\":\"v-5a65fcf4#11/0\",\"1447\":\"v-5a65fcf4#11/1\",\"1448\":\"v-5a65fcf4#11/2\",\"1449\":\"v-5a65fcf4#11/3\",\"1450\":\"v-5a65fcf4#11/4\",\"1451\":\"v-5a65fcf4#11/5\",\"1452\":\"v-26071b05\",\"1453\":\"v-26071b05#1\",\"1454\":\"v-26071b05#1/0\",\"1455\":\"v-26071b05#1/1\",\"1456\":\"v-26071b05#1/2\",\"1457\":\"v-26071b05#1/3\",\"1458\":\"v-26071b05#1/4\",\"1459\":\"v-26071b05#1/5\",\"1460\":\"v-26071b05#1/6\",\"1461\":\"v-26071b05#1/7\",\"1462\":\"v-26071b05#1/8\",\"1463\":\"v-26071b05#1/9\",\"1464\":\"v-26071b05#1/10\",\"1465\":\"v-26071b05#2\",\"1466\":\"v-26071b05#2/0\",\"1467\":\"v-26071b05#2/1\",\"1468\":\"v-26071b05#2/2\",\"1469\":\"v-26071b05#2/3\",\"1470\":\"v-26071b05#2/4\",\"1471\":\"v-26071b05#2/5\",\"1472\":\"v-26071b05#2/6\",\"1473\":\"v-26071b05#2/7\",\"1474\":\"v-26071b05#2/8\",\"1475\":\"v-26071b05#2/9\",\"1476\":\"v-26071b05#2/10\",\"1477\":\"v-26071b05#3\",\"1478\":\"v-26071b05#3/11\",\"1479\":\"v-26071b05#3/12\",\"1480\":\"v-26071b05#3/13\",\"1481\":\"v-26071b05#3/14\",\"1482\":\"v-26071b05#4\",\"1483\":\"v-26071b05#4/0\",\"1484\":\"v-26071b05#4/1\",\"1485\":\"v-26071b05#4/2\",\"1486\":\"v-26071b05#4/3\",\"1487\":\"v-26071b05#4/4\",\"1488\":\"v-26071b05#4/5\",\"1489\":\"v-26071b05#4/6\",\"1490\":\"v-26071b05#4/7\",\"1491\":\"v-26071b05#4/8\",\"1492\":\"v-26071b05#5\",\"1493\":\"v-26071b05#5/9\",\"1494\":\"v-26071b05#5/10\",\"1495\":\"v-26071b05#6\",\"1496\":\"v-26071b05#6/0\",\"1497\":\"v-26071b05#6/1\",\"1498\":\"v-26071b05#6/2\",\"1499\":\"v-26071b05#6/3\",\"1500\":\"v-26071b05#6/4\",\"1501\":\"v-660b0285\",\"1502\":\"v-660b0285#1\",\"1503\":\"v-660b0285#1/0\",\"1504\":\"v-660b0285#1/1\",\"1505\":\"v-660b0285#1/2\",\"1506\":\"v-660b0285#1/3\",\"1507\":\"v-660b0285#1/4\",\"1508\":\"v-660b0285#1/5\",\"1509\":\"v-660b0285#1/6\",\"1510\":\"v-660b0285#1/7\",\"1511\":\"v-660b0285#1/8\",\"1512\":\"v-660b0285#1/9\",\"1513\":\"v-660b0285#1/10\",\"1514\":\"v-660b0285#1/11\",\"1515\":\"v-660b0285#2\",\"1516\":\"v-660b0285#2/0\",\"1517\":\"v-660b0285#2/1\",\"1518\":\"v-660b0285#2/2\",\"1519\":\"v-660b0285#2/3\",\"1520\":\"v-660b0285#2/4\",\"1521\":\"v-660b0285#2/5\",\"1522\":\"v-660b0285#2/6\",\"1523\":\"v-660b0285#2/7\",\"1524\":\"v-660b0285#2/8\",\"1525\":\"v-660b0285#2/9\",\"1526\":\"v-660b0285#3\",\"1527\":\"v-660b0285#3/10\",\"1528\":\"v-660b0285#3/11\",\"1529\":\"v-660b0285#3/12\",\"1530\":\"v-660b0285#3/13\",\"1531\":\"v-660b0285#3/14\",\"1532\":\"v-660b0285#3/15\",\"1533\":\"v-660b0285#3/16\",\"1534\":\"v-660b0285#3/17\",\"1535\":\"v-660b0285#3/18\",\"1536\":\"v-660b0285#3/19\",\"1537\":\"v-660b0285#3/20\",\"1538\":\"v-660b0285#3/21\",\"1539\":\"v-660b0285#3/22\",\"1540\":\"v-660b0285#3/23\",\"1541\":\"v-660b0285#3/24\",\"1542\":\"v-660b0285#4\",\"1543\":\"v-660b0285#4/25\",\"1544\":\"v-660b0285#4/26\",\"1545\":\"v-660b0285#4/27\",\"1546\":\"v-660b0285#4/28\",\"1547\":\"v-660b0285#4/29\",\"1548\":\"v-660b0285#4/30\",\"1549\":\"v-660b0285#4/31\",\"1550\":\"v-660b0285#4/32\",\"1551\":\"v-660b0285#4/33\",\"1552\":\"v-660b0285#4/34\",\"1553\":\"v-660b0285#5\",\"1554\":\"v-660b0285#5/0\",\"1555\":\"v-660b0285#5/1\",\"1556\":\"v-660b0285#5/2\",\"1557\":\"v-660b0285#5/3\",\"1558\":\"v-660b0285#6\",\"1559\":\"v-660b0285#6/0\",\"1560\":\"v-660b0285#6/1\",\"1561\":\"v-660b0285#6/2\",\"1562\":\"v-660b0285#6/3\",\"1563\":\"v-660b0285#6/4\",\"1564\":\"v-fd9681c0\",\"1565\":\"v-fd9681c0#1\",\"1566\":\"v-fd9681c0#1/0\",\"1567\":\"v-fd9681c0#1/1\",\"1568\":\"v-fd9681c0#1/2\",\"1569\":\"v-fd9681c0#1/3\",\"1570\":\"v-fd9681c0#1/4\",\"1571\":\"v-fd9681c0#1/5\",\"1572\":\"v-fd9681c0#1/6\",\"1573\":\"v-fd9681c0#1/7\",\"1574\":\"v-fd9681c0#1/8\",\"1575\":\"v-fd9681c0#1/9\",\"1576\":\"v-fd9681c0#1/10\",\"1577\":\"v-fd9681c0#2\",\"1578\":\"v-fd9681c0#2/0\",\"1579\":\"v-fd9681c0#2/1\",\"1580\":\"v-fd9681c0#2/2\",\"1581\":\"v-fd9681c0#2/3\",\"1582\":\"v-fd9681c0#2/4\",\"1583\":\"v-fd9681c0#2/5\",\"1584\":\"v-fd9681c0#2/6\",\"1585\":\"v-fd9681c0#2/7\",\"1586\":\"v-fd9681c0#2/8\",\"1587\":\"v-fd9681c0#3\",\"1588\":\"v-fd9681c0#3/9\",\"1589\":\"v-fd9681c0#3/10\",\"1590\":\"v-fd9681c0#4\",\"1591\":\"v-fd9681c0#4/0\",\"1592\":\"v-fd9681c0#4/1\",\"1593\":\"v-fd9681c0#4/2\",\"1594\":\"v-fd9681c0#4/3\",\"1595\":\"v-fd9681c0#4/4\",\"1596\":\"v-fd9681c0#5\",\"1597\":\"v-fd9681c0#5/0\",\"1598\":\"v-fd9681c0#5/1\",\"1599\":\"v-fd9681c0#5/2\",\"1600\":\"v-fd9681c0#5/3\",\"1601\":\"v-fd9681c0#5/4\",\"1602\":\"v-fd9681c0#5/5\",\"1603\":\"v-fd9681c0#5/6\",\"1604\":\"v-fd9681c0#5/7\",\"1605\":\"v-fd9681c0#5/8\",\"1606\":\"v-fd9681c0#6\",\"1607\":\"v-fd9681c0#6/9\",\"1608\":\"v-fd9681c0#6/10\",\"1609\":\"v-fd9681c0#6/11\",\"1610\":\"v-fd9681c0#6/12\",\"1611\":\"v-fd9681c0#7\",\"1612\":\"v-fd9681c0#7/0\",\"1613\":\"v-fd9681c0#7/1\",\"1614\":\"v-fd9681c0#7/2\",\"1615\":\"v-5aed6ba6\",\"1616\":\"v-5aed6ba6#1\",\"1617\":\"v-5aed6ba6#1/0\",\"1618\":\"v-5aed6ba6#1/1\",\"1619\":\"v-5aed6ba6#1/2\",\"1620\":\"v-5aed6ba6#1/3\",\"1621\":\"v-5aed6ba6#1/4\",\"1622\":\"v-5aed6ba6#1/5\",\"1623\":\"v-5aed6ba6#1/6\",\"1624\":\"v-5aed6ba6#1/7\",\"1625\":\"v-5aed6ba6#1/8\",\"1626\":\"v-5aed6ba6#1/9\",\"1627\":\"v-5aed6ba6#2\",\"1628\":\"v-5aed6ba6#2/0\",\"1629\":\"v-5aed6ba6#2/1\",\"1630\":\"v-5aed6ba6#2/2\",\"1631\":\"v-5aed6ba6#2/3\",\"1632\":\"v-5aed6ba6#2/4\",\"1633\":\"v-5aed6ba6#2/5\",\"1634\":\"v-5aed6ba6#2/6\",\"1635\":\"v-5aed6ba6#2/7\",\"1636\":\"v-5aed6ba6#2/8\",\"1637\":\"v-5aed6ba6#3\",\"1638\":\"v-5aed6ba6#3/9\",\"1639\":\"v-5aed6ba6#4\",\"1640\":\"v-5aed6ba6#4/0\",\"1641\":\"v-5aed6ba6#4/1\",\"1642\":\"v-5aed6ba6#4/2\",\"1643\":\"v-5aed6ba6#4/3\",\"1644\":\"v-5aed6ba6#5\",\"1645\":\"v-5aed6ba6#5/0\",\"1646\":\"v-5aed6ba6#5/1\",\"1647\":\"v-5aed6ba6#5/2\",\"1648\":\"v-5aed6ba6#5/3\",\"1649\":\"v-5aed6ba6#5/4\",\"1650\":\"v-5aed6ba6#5/5\",\"1651\":\"v-5aed6ba6#5/6\",\"1652\":\"v-5aed6ba6#5/7\",\"1653\":\"v-5aed6ba6#5/8\",\"1654\":\"v-5aed6ba6#5/9\",\"1655\":\"v-5aed6ba6#5/10\",\"1656\":\"v-5aed6ba6#6\",\"1657\":\"v-5aed6ba6#6/11\",\"1658\":\"v-5aed6ba6#6/12\",\"1659\":\"v-5aed6ba6#6/13\",\"1660\":\"v-5aed6ba6#6/14\",\"1661\":\"v-5aed6ba6#7\",\"1662\":\"v-5aed6ba6#7/0\",\"1663\":\"v-5aed6ba6#7/1\",\"1664\":\"v-5aed6ba6#7/2\",\"1665\":\"v-72940dc6\",\"1666\":\"v-72940dc6#1\",\"1667\":\"v-72940dc6#1/0\",\"1668\":\"v-72940dc6#1/1\",\"1669\":\"v-72940dc6#1/2\",\"1670\":\"v-72940dc6#1/3\",\"1671\":\"v-72940dc6#1/4\",\"1672\":\"v-72940dc6#1/5\",\"1673\":\"v-72940dc6#1/6\",\"1674\":\"v-72940dc6#1/7\",\"1675\":\"v-72940dc6#1/8\",\"1676\":\"v-72940dc6#2\",\"1677\":\"v-72940dc6#2/0\",\"1678\":\"v-72940dc6#2/1\",\"1679\":\"v-72940dc6#2/2\",\"1680\":\"v-72940dc6#2/3\",\"1681\":\"v-72940dc6#2/4\",\"1682\":\"v-72940dc6#2/5\",\"1683\":\"v-72940dc6#2/6\",\"1684\":\"v-72940dc6#2/7\",\"1685\":\"v-72940dc6#2/8\",\"1686\":\"v-72940dc6#2/9\",\"1687\":\"v-72940dc6#3\",\"1688\":\"v-72940dc6#3/10\",\"1689\":\"v-72940dc6#3/11\",\"1690\":\"v-72940dc6#3/12\",\"1691\":\"v-72940dc6#3/13\",\"1692\":\"v-72940dc6#4\",\"1693\":\"v-72940dc6#5\",\"1694\":\"v-72940dc6#5/0\",\"1695\":\"v-72940dc6#5/1\",\"1696\":\"v-72940dc6#5/2\",\"1697\":\"v-72940dc6#5/3\",\"1698\":\"v-72940dc6#5/4\",\"1699\":\"v-72940dc6#5/5\",\"1700\":\"v-72940dc6#5/6\",\"1701\":\"v-72940dc6#6\",\"1702\":\"v-72940dc6#6/0\",\"1703\":\"v-72940dc6#6/1\",\"1704\":\"v-72940dc6#6/2\",\"1705\":\"v-72940dc6#7\",\"1706\":\"v-72940dc6#7/3\",\"1707\":\"v-72940dc6#7/4\",\"1708\":\"v-72940dc6#7/5\",\"1709\":\"v-72940dc6#7/6\",\"1710\":\"v-72940dc6#7/7\",\"1711\":\"v-72940dc6#8\",\"1712\":\"v-72940dc6#8/0\",\"1713\":\"v-72940dc6#8/1\",\"1714\":\"v-72940dc6#8/2\",\"1715\":\"v-72940dc6#8/3\",\"1716\":\"v-72940dc6#8/4\",\"1717\":\"v-72940dc6#8/5\",\"1718\":\"v-72940dc6#8/6\",\"1719\":\"v-72940dc6#8/7\",\"1720\":\"v-72940dc6#8/8\",\"1721\":\"v-72940dc6#8/9\",\"1722\":\"v-72940dc6#9\",\"1723\":\"v-72940dc6#9/0\",\"1724\":\"v-72940dc6#9/1\",\"1725\":\"v-72940dc6#9/2\",\"1726\":\"v-72940dc6#9/3\",\"1727\":\"v-72940dc6#9/4\",\"1728\":\"v-72940dc6#9/5\",\"1729\":\"v-72940dc6#10\",\"1730\":\"v-72940dc6#10/0\",\"1731\":\"v-72940dc6#10/1\",\"1732\":\"v-72940dc6#10/2\",\"1733\":\"v-72940dc6#10/3\",\"1734\":\"v-72940dc6#10/4\",\"1735\":\"v-72940dc6#10/5\",\"1736\":\"v-7dc0f6dd\",\"1737\":\"v-7dc0f6dd#1\",\"1738\":\"v-7dc0f6dd#1/0\",\"1739\":\"v-7dc0f6dd#1/1\",\"1740\":\"v-7dc0f6dd#1/2\",\"1741\":\"v-7dc0f6dd#1/3\",\"1742\":\"v-7dc0f6dd#1/4\",\"1743\":\"v-7dc0f6dd#1/5\",\"1744\":\"v-7dc0f6dd#1/6\",\"1745\":\"v-7dc0f6dd#1/7\",\"1746\":\"v-7dc0f6dd#1/8\",\"1747\":\"v-7dc0f6dd#1/9\",\"1748\":\"v-7dc0f6dd#1/10\",\"1749\":\"v-7dc0f6dd#2\",\"1750\":\"v-7dc0f6dd#2/0\",\"1751\":\"v-7dc0f6dd#2/1\",\"1752\":\"v-7dc0f6dd#2/2\",\"1753\":\"v-7dc0f6dd#2/3\",\"1754\":\"v-7dc0f6dd#2/4\",\"1755\":\"v-7dc0f6dd#3\",\"1756\":\"v-7dc0f6dd#3/0\",\"1757\":\"v-7dc0f6dd#4\",\"1758\":\"v-7dc0f6dd#4/0\",\"1759\":\"v-7dc0f6dd#4/1\",\"1760\":\"v-7dc0f6dd#4/2\",\"1761\":\"v-7dc0f6dd#4/3\",\"1762\":\"v-7dc0f6dd#4/4\",\"1763\":\"v-7dc0f6dd#4/5\",\"1764\":\"v-7dc0f6dd#5\",\"1765\":\"v-7dc0f6dd#5/6\",\"1766\":\"v-7dc0f6dd#5/7\",\"1767\":\"v-7dc0f6dd#5/8\",\"1768\":\"v-7dc0f6dd#5/9\",\"1769\":\"v-7dc0f6dd#6\",\"1770\":\"v-7dc0f6dd#6/0\",\"1771\":\"v-7dc0f6dd#6/1\",\"1772\":\"v-7dc0f6dd#6/2\",\"1773\":\"v-7dc0f6dd#6/3\",\"1774\":\"v-7dc0f6dd#6/4\",\"1775\":\"v-7dc0f6dd#7\",\"1776\":\"v-7dc0f6dd#7/5\",\"1777\":\"v-7dc0f6dd#7/6\",\"1778\":\"v-7dc0f6dd#8\",\"1779\":\"v-7dc0f6dd#8/0\",\"1780\":\"v-7dc0f6dd#8/1\",\"1781\":\"v-7dc0f6dd#8/2\",\"1782\":\"v-7dc0f6dd#8/3\",\"1783\":\"v-7dc0f6dd#8/4\",\"1784\":\"v-7dc0f6dd#8/5\",\"1785\":\"v-7dc0f6dd#8/6\",\"1786\":\"v-7dc0f6dd#8/7\",\"1787\":\"v-7dc0f6dd#8/8\",\"1788\":\"v-7dc0f6dd#8/9\",\"1789\":\"v-7dc0f6dd#8/10\",\"1790\":\"v-7dc0f6dd#8/11\",\"1791\":\"v-7dc0f6dd#8/12\",\"1792\":\"v-7dc0f6dd#8/13\",\"1793\":\"v-7dc0f6dd#8/14\",\"1794\":\"v-7dc0f6dd#8/15\",\"1795\":\"v-7dc0f6dd#8/16\",\"1796\":\"v-7dc0f6dd#8/17\",\"1797\":\"v-7dc0f6dd#8/18\",\"1798\":\"v-7dc0f6dd#8/19\",\"1799\":\"v-7dc0f6dd#8/20\",\"1800\":\"v-7dc0f6dd#8/21\",\"1801\":\"v-7dc0f6dd#9\",\"1802\":\"v-7dc0f6dd#9/0\",\"1803\":\"v-7dc0f6dd#9/1\",\"1804\":\"v-7dc0f6dd#9/2\",\"1805\":\"v-7dc0f6dd#9/3\",\"1806\":\"v-7dc0f6dd#9/4\",\"1807\":\"v-1902a411\",\"1808\":\"v-1902a411#1\",\"1809\":\"v-1902a411#1/0\",\"1810\":\"v-1902a411#1/1\",\"1811\":\"v-1902a411#1/2\",\"1812\":\"v-1902a411#1/3\",\"1813\":\"v-1902a411#1/4\",\"1814\":\"v-1902a411#1/5\",\"1815\":\"v-1902a411#1/6\",\"1816\":\"v-1902a411#1/7\",\"1817\":\"v-1902a411#1/8\",\"1818\":\"v-1902a411#1/9\",\"1819\":\"v-1902a411#1/10\",\"1820\":\"v-1902a411#1/11\",\"1821\":\"v-1902a411#1/12\",\"1822\":\"v-1902a411#1/13\",\"1823\":\"v-1902a411#1/14\",\"1824\":\"v-1902a411#2\",\"1825\":\"v-1902a411#3\",\"1826\":\"v-1902a411#3/0\",\"1827\":\"v-1902a411#3/1\",\"1828\":\"v-1902a411#3/2\",\"1829\":\"v-1902a411#3/3\",\"1830\":\"v-1902a411#3/4\",\"1831\":\"v-1902a411#3/5\",\"1832\":\"v-1902a411#3/6\",\"1833\":\"v-1902a411#4\",\"1834\":\"v-1902a411#4/0\",\"1835\":\"v-1902a411#4/1\",\"1836\":\"v-1902a411#4/2\",\"1837\":\"v-1902a411#4/3\",\"1838\":\"v-1902a411#4/4\",\"1839\":\"v-1902a411#4/5\",\"1840\":\"v-1902a411#4/6\",\"1841\":\"v-1902a411#4/7\",\"1842\":\"v-1902a411#4/8\",\"1843\":\"v-1902a411#4/9\",\"1844\":\"v-1902a411#4/10\",\"1845\":\"v-1902a411#5\",\"1846\":\"v-1902a411#5/11\",\"1847\":\"v-1902a411#5/12\",\"1848\":\"v-1902a411#6\",\"1849\":\"v-1902a411#7\",\"1850\":\"v-1902a411#7/0\",\"1851\":\"v-1902a411#7/1\",\"1852\":\"v-1902a411#7/2\",\"1853\":\"v-1902a411#8\",\"1854\":\"v-1902a411#8/0\",\"1855\":\"v-1902a411#8/1\",\"1856\":\"v-1902a411#8/2\",\"1857\":\"v-1902a411#8/3\",\"1858\":\"v-1902a411#8/4\",\"1859\":\"v-1902a411#8/5\",\"1860\":\"v-1902a411#8/6\",\"1861\":\"v-1902a411#8/7\",\"1862\":\"v-1902a411#8/8\",\"1863\":\"v-1902a411#8/9\",\"1864\":\"v-1902a411#9\",\"1865\":\"v-1902a411#9/0\",\"1866\":\"v-1902a411#9/1\",\"1867\":\"v-1902a411#9/2\",\"1868\":\"v-1902a411#9/3\",\"1869\":\"v-1902a411#9/4\",\"1870\":\"v-1902a411#9/5\",\"1871\":\"v-1902a411#9/6\",\"1872\":\"v-1902a411#9/7\",\"1873\":\"v-1902a411#9/8\",\"1874\":\"v-1902a411#10\",\"1875\":\"v-1902a411#11\",\"1876\":\"v-1902a411#11/9\",\"1877\":\"v-1902a411#11/10\",\"1878\":\"v-1902a411#11/11\",\"1879\":\"v-1902a411#11/12\",\"1880\":\"v-1902a411#11/13\",\"1881\":\"v-1902a411#11/14\",\"1882\":\"v-1902a411#11/15\",\"1883\":\"v-1902a411#11/16\",\"1884\":\"v-1902a411#11/17\",\"1885\":\"v-1902a411#11/18\",\"1886\":\"v-1902a411#11/19\",\"1887\":\"v-1902a411#11/20\",\"1888\":\"v-1902a411#11/21\",\"1889\":\"v-1902a411#11/22\",\"1890\":\"v-1902a411#11/23\",\"1891\":\"v-1902a411#11/24\",\"1892\":\"v-1902a411#11/25\",\"1893\":\"v-1902a411#11/26\",\"1894\":\"v-1902a411#11/27\",\"1895\":\"v-1902a411#11/28\",\"1896\":\"v-1902a411#11/29\",\"1897\":\"v-1902a411#12\",\"1898\":\"v-1902a411#12/0\",\"1899\":\"v-1902a411#12/1\",\"1900\":\"v-1902a411#12/2\",\"1901\":\"v-1902a411#12/3\",\"1902\":\"v-1902a411#12/4\",\"1903\":\"v-1902a411#12/5\",\"1904\":\"v-1902a411#12/6\",\"1905\":\"v-1902a411#12/7\",\"1906\":\"v-1902a411#12/8\",\"1907\":\"v-1902a411#12/9\",\"1908\":\"v-1902a411#13\",\"1909\":\"v-1902a411#13/0\",\"1910\":\"v-1902a411#13/1\",\"1911\":\"v-1902a411#13/2\",\"1912\":\"v-1902a411#13/3\",\"1913\":\"v-1902a411#13/4\",\"1914\":\"v-1902a411#13/5\",\"1915\":\"v-1902a411#13/6\",\"1916\":\"v-1902a411#13/7\",\"1917\":\"v-1902a411#14\",\"1918\":\"v-1902a411#14/0\",\"1919\":\"v-1902a411#14/1\",\"1920\":\"v-1902a411#14/2\",\"1921\":\"v-1902a411#14/3\",\"1922\":\"v-1902a411#14/4\",\"1923\":\"v-1902a411#14/5\",\"1924\":\"v-1902a411#14/6\",\"1925\":\"v-d8e95536\",\"1926\":\"v-d8e95536#1\",\"1927\":\"v-d8e95536#1/0\",\"1928\":\"v-d8e95536#1/1\",\"1929\":\"v-d8e95536#1/2\",\"1930\":\"v-d8e95536#1/3\",\"1931\":\"v-d8e95536#1/4\",\"1932\":\"v-d8e95536#1/5\",\"1933\":\"v-d8e95536#1/6\",\"1934\":\"v-d8e95536#1/7\",\"1935\":\"v-d8e95536#1/8\",\"1936\":\"v-d8e95536#1/9\",\"1937\":\"v-d8e95536#1/10\",\"1938\":\"v-d8e95536#1/11\",\"1939\":\"v-d8e95536#1/12\",\"1940\":\"v-d8e95536#1/13\",\"1941\":\"v-d8e95536#1/14\",\"1942\":\"v-d8e95536#2\",\"1943\":\"v-d8e95536#2/0\",\"1944\":\"v-d8e95536#2/1\",\"1945\":\"v-d8e95536#2/2\",\"1946\":\"v-d8e95536#2/3\",\"1947\":\"v-d8e95536#2/4\",\"1948\":\"v-d8e95536#2/5\",\"1949\":\"v-d8e95536#2/6\",\"1950\":\"v-d8e95536#2/7\",\"1951\":\"v-d8e95536#2/8\",\"1952\":\"v-d8e95536#2/9\",\"1953\":\"v-d8e95536#2/10\",\"1954\":\"v-d8e95536#3\",\"1955\":\"v-d8e95536#3/11\",\"1956\":\"v-d8e95536#3/12\",\"1957\":\"v-d8e95536#3/13\",\"1958\":\"v-d8e95536#3/14\",\"1959\":\"v-d8e95536#3/15\",\"1960\":\"v-d8e95536#3/16\",\"1961\":\"v-d8e95536#3/17\",\"1962\":\"v-d8e95536#3/18\",\"1963\":\"v-d8e95536#3/19\",\"1964\":\"v-d8e95536#3/20\",\"1965\":\"v-d8e95536#3/21\",\"1966\":\"v-d8e95536#3/22\",\"1967\":\"v-d8e95536#4\",\"1968\":\"v-d8e95536#4/0\",\"1969\":\"v-d8e95536#4/1\",\"1970\":\"v-d8e95536#4/2\",\"1971\":\"v-d8e95536#4/3\",\"1972\":\"v-d8e95536#4/4\",\"1973\":\"v-d8e95536#4/5\",\"1974\":\"v-d8e95536#4/6\",\"1975\":\"v-d8e95536#4/7\",\"1976\":\"v-d8e95536#4/8\",\"1977\":\"v-d8e95536#4/9\",\"1978\":\"v-d8e95536#5\",\"1979\":\"v-d8e95536#5/0\",\"1980\":\"v-d8e95536#5/1\",\"1981\":\"v-d8e95536#5/2\",\"1982\":\"v-d8e95536#5/3\",\"1983\":\"v-d8e95536#6\",\"1984\":\"v-d8e95536#6/0\",\"1985\":\"v-d8e95536#6/1\",\"1986\":\"v-d8e95536#6/2\",\"1987\":\"v-d8e95536#6/3\",\"1988\":\"v-72c7365c\",\"1989\":\"v-72c7365c#1\",\"1990\":\"v-72c7365c#1/0\",\"1991\":\"v-72c7365c#1/1\",\"1992\":\"v-72c7365c#1/2\",\"1993\":\"v-72c7365c#1/3\",\"1994\":\"v-72c7365c#1/4\",\"1995\":\"v-72c7365c#1/5\",\"1996\":\"v-72c7365c#1/6\",\"1997\":\"v-72c7365c#1/7\",\"1998\":\"v-72c7365c#1/8\",\"1999\":\"v-72c7365c#2\",\"2000\":\"v-72c7365c#3\",\"2001\":\"v-72c7365c#3/0\",\"2002\":\"v-72c7365c#3/1\",\"2003\":\"v-72c7365c#3/2\",\"2004\":\"v-72c7365c#3/3\",\"2005\":\"v-72c7365c#3/4\",\"2006\":\"v-72c7365c#3/5\",\"2007\":\"v-72c7365c#4\",\"2008\":\"v-72c7365c#4/0\",\"2009\":\"v-72c7365c#4/1\",\"2010\":\"v-72c7365c#4/2\",\"2011\":\"v-72c7365c#4/3\",\"2012\":\"v-72c7365c#4/4\",\"2013\":\"v-72c7365c#5\",\"2014\":\"v-72c7365c#5/0\",\"2015\":\"v-72c7365c#5/1\",\"2016\":\"v-72c7365c#5/2\",\"2017\":\"v-72c7365c#5/3\",\"2018\":\"v-72c7365c#5/4\",\"2019\":\"v-72c7365c#5/5\",\"2020\":\"v-72c7365c#5/6\",\"2021\":\"v-72c7365c#5/7\",\"2022\":\"v-72c7365c#5/8\",\"2023\":\"v-72c7365c#5/9\",\"2024\":\"v-72c7365c#5/10\",\"2025\":\"v-72c7365c#5/11\",\"2026\":\"v-72c7365c#6\",\"2027\":\"v-72c7365c#6/12\",\"2028\":\"v-72c7365c#6/13\",\"2029\":\"v-72c7365c#6/14\",\"2030\":\"v-72c7365c#6/15\",\"2031\":\"v-72c7365c#7\",\"2032\":\"v-72c7365c#8\",\"2033\":\"v-72c7365c#8/0\",\"2034\":\"v-72c7365c#8/1\",\"2035\":\"v-72c7365c#8/2\",\"2036\":\"v-72c7365c#8/3\",\"2037\":\"v-72c7365c#8/4\",\"2038\":\"v-72c7365c#8/5\",\"2039\":\"v-72c7365c#8/6\",\"2040\":\"v-72c7365c#8/7\",\"2041\":\"v-72c7365c#8/8\",\"2042\":\"v-72c7365c#9\",\"2043\":\"v-72c7365c#9/0\",\"2044\":\"v-72c7365c#9/1\",\"2045\":\"v-72c7365c#9/2\",\"2046\":\"v-72c7365c#9/3\",\"2047\":\"v-72c7365c#9/4\",\"2048\":\"v-72c7365c#9/5\",\"2049\":\"v-72c7365c#10\",\"2050\":\"v-72c7365c#10/0\",\"2051\":\"v-72c7365c#10/1\",\"2052\":\"v-72c7365c#10/2\",\"2053\":\"v-72c7365c#10/3\",\"2054\":\"v-72c7365c#10/4\",\"2055\":\"v-72c7365c#10/5\",\"2056\":\"v-72c7365c#10/6\",\"2057\":\"v-72c7365c#10/7\",\"2058\":\"v-72c7365c#10/8\",\"2059\":\"v-72c7365c#11\",\"2060\":\"v-72c7365c#12\",\"2061\":\"v-72c7365c#12/9\",\"2062\":\"v-72c7365c#12/10\",\"2063\":\"v-72c7365c#12/11\",\"2064\":\"v-72c7365c#12/12\",\"2065\":\"v-72c7365c#12/13\",\"2066\":\"v-72c7365c#12/14\",\"2067\":\"v-72c7365c#12/15\",\"2068\":\"v-72c7365c#13\",\"2069\":\"v-72c7365c#13/0\",\"2070\":\"v-72c7365c#13/1\",\"2071\":\"v-72c7365c#13/2\",\"2072\":\"v-72c7365c#13/3\",\"2073\":\"v-72c7365c#13/4\",\"2074\":\"v-72c7365c#14\",\"2075\":\"v-72c7365c#14/0\",\"2076\":\"v-72c7365c#14/1\",\"2077\":\"v-72c7365c#14/2\",\"2078\":\"v-72c7365c#14/3\",\"2079\":\"v-72c7365c#14/4\",\"2080\":\"v-72c7365c#14/5\",\"2081\":\"v-72c7365c#14/6\",\"2082\":\"v-72c7365c#14/7\",\"2083\":\"v-72c7365c#14/8\",\"2084\":\"v-72c7365c#15\",\"2085\":\"v-72c7365c#15/0\",\"2086\":\"v-72c7365c#15/1\",\"2087\":\"v-72c7365c#15/2\",\"2088\":\"v-72c7365c#15/3\",\"2089\":\"v-72c7365c#15/4\",\"2090\":\"v-72c7365c#15/5\",\"2091\":\"v-72c7365c#15/6\",\"2092\":\"v-72c7365c#16\",\"2093\":\"v-72c7365c#16/7\",\"2094\":\"v-72c7365c#16/8\",\"2095\":\"v-72c7365c#16/9\",\"2096\":\"v-72c7365c#17\",\"2097\":\"v-72c7365c#18\",\"2098\":\"v-72c7365c#18/0\",\"2099\":\"v-72c7365c#18/1\",\"2100\":\"v-72c7365c#18/2\",\"2101\":\"v-72c7365c#18/3\",\"2102\":\"v-72c7365c#19\",\"2103\":\"v-72c7365c#19/0\",\"2104\":\"v-72c7365c#19/1\",\"2105\":\"v-72c7365c#19/2\",\"2106\":\"v-72c7365c#19/3\",\"2107\":\"v-72c7365c#19/4\",\"2108\":\"v-72c7365c#19/5\",\"2109\":\"v-72c7365c#19/6\",\"2110\":\"v-72c7365c#20\",\"2111\":\"v-72c7365c#20/0\",\"2112\":\"v-72c7365c#20/1\",\"2113\":\"v-72c7365c#20/2\",\"2114\":\"v-72c7365c#20/3\",\"2115\":\"v-72c7365c#20/4\",\"2116\":\"v-72c7365c#21\",\"2117\":\"v-72c7365c#21/0\",\"2118\":\"v-72c7365c#21/1\",\"2119\":\"v-72c7365c#21/2\",\"2120\":\"v-72c7365c#21/3\",\"2121\":\"v-72c7365c#21/4\",\"2122\":\"v-72c7365c#21/5\",\"2123\":\"v-72c7365c#21/6\",\"2124\":\"v-72c7365c#21/7\",\"2125\":\"v-72c7365c#22\",\"2126\":\"v-72c7365c#23\",\"2127\":\"v-72c7365c#23/8\",\"2128\":\"v-72c7365c#23/9\",\"2129\":\"v-72c7365c#23/10\",\"2130\":\"v-72c7365c#23/11\",\"2131\":\"v-72c7365c#23/12\",\"2132\":\"v-72c7365c#24\",\"2133\":\"v-72c7365c#24/0\",\"2134\":\"v-72c7365c#24/1\",\"2135\":\"v-72c7365c#24/2\",\"2136\":\"v-72c7365c#24/3\",\"2137\":\"v-72c7365c#24/4\",\"2138\":\"v-72c7365c#24/5\",\"2139\":\"v-72c7365c#24/6\",\"2140\":\"v-72c7365c#25\",\"2141\":\"v-72c7365c#25/0\",\"2142\":\"v-72c7365c#25/1\",\"2143\":\"v-72c7365c#25/2\",\"2144\":\"v-72c7365c#25/3\",\"2145\":\"v-72c7365c#25/4\",\"2146\":\"v-72c7365c#25/5\",\"2147\":\"v-72c7365c#25/6\",\"2148\":\"v-72c7365c#25/7\",\"2149\":\"v-72c7365c#25/8\",\"2150\":\"v-72c7365c#26\",\"2151\":\"v-72c7365c#26/9\",\"2152\":\"v-72c7365c#26/10\",\"2153\":\"v-72c7365c#26/11\",\"2154\":\"v-72c7365c#27\",\"2155\":\"v-72c7365c#28\",\"2156\":\"v-72c7365c#28/0\",\"2157\":\"v-72c7365c#28/1\",\"2158\":\"v-72c7365c#28/2\",\"2159\":\"v-72c7365c#28/3\",\"2160\":\"v-72c7365c#28/4\",\"2161\":\"v-72c7365c#28/5\",\"2162\":\"v-72c7365c#28/6\",\"2163\":\"v-72c7365c#28/7\",\"2164\":\"v-72c7365c#28/8\",\"2165\":\"v-72c7365c#28/9\",\"2166\":\"v-72c7365c#28/10\",\"2167\":\"v-72c7365c#28/11\",\"2168\":\"v-72c7365c#28/12\",\"2169\":\"v-72c7365c#28/13\",\"2170\":\"v-72c7365c#28/14\",\"2171\":\"v-72c7365c#28/15\",\"2172\":\"v-72c7365c#28/16\",\"2173\":\"v-72c7365c#28/17\",\"2174\":\"v-72c7365c#28/18\",\"2175\":\"v-72c7365c#28/19\",\"2176\":\"v-72c7365c#28/20\",\"2177\":\"v-72c7365c#28/21\",\"2178\":\"v-72c7365c#28/22\",\"2179\":\"v-72c7365c#28/23\",\"2180\":\"v-72c7365c#28/24\",\"2181\":\"v-72c7365c#28/25\",\"2182\":\"v-72c7365c#28/26\",\"2183\":\"v-72c7365c#28/27\",\"2184\":\"v-72c7365c#28/28\",\"2185\":\"v-72c7365c#29\",\"2186\":\"v-72c7365c#29/0\",\"2187\":\"v-72c7365c#29/1\",\"2188\":\"v-72c7365c#29/2\",\"2189\":\"v-72c7365c#29/3\",\"2190\":\"v-72c7365c#30\",\"2191\":\"v-72c7365c#30/0\",\"2192\":\"v-72c7365c#30/1\",\"2193\":\"v-72c7365c#30/2\",\"2194\":\"v-72c7365c#30/3\",\"2195\":\"v-72c7365c#31\",\"2196\":\"v-72c7365c#31/4\",\"2197\":\"v-72c7365c#31/5\",\"2198\":\"v-72c7365c#32\",\"2199\":\"v-72c7365c#32/0\",\"2200\":\"v-72c7365c#32/1\",\"2201\":\"v-72c7365c#32/2\",\"2202\":\"v-72c7365c#32/3\",\"2203\":\"v-72c7365c#32/4\",\"2204\":\"v-72c7365c#32/5\",\"2205\":\"v-72c7365c#32/6\",\"2206\":\"v-72c7365c#32/7\",\"2207\":\"v-72c7365c#32/8\",\"2208\":\"v-72c7365c#32/9\",\"2209\":\"v-72c7365c#32/10\",\"2210\":\"v-72c7365c#33\",\"2211\":\"v-72c7365c#33/0\",\"2212\":\"v-72c7365c#33/1\",\"2213\":\"v-72c7365c#33/2\",\"2214\":\"v-72c7365c#34\",\"2215\":\"v-72c7365c#34/0\",\"2216\":\"v-72c7365c#34/1\",\"2217\":\"v-72c7365c#34/2\",\"2218\":\"v-72c7365c#34/3\",\"2219\":\"v-72c7365c#34/4\",\"2220\":\"v-72c7365c#34/5\",\"2221\":\"v-72c7365c#34/6\",\"2222\":\"v-72c7365c#34/7\",\"2223\":\"v-72c7365c#35\",\"2224\":\"v-72c7365c#35/0\",\"2225\":\"v-72c7365c#35/1\",\"2226\":\"v-72c7365c#35/2\",\"2227\":\"v-72c7365c#35/3\",\"2228\":\"v-72c7365c#35/4\",\"2229\":\"v-72c7365c#35/5\",\"2230\":\"v-72c7365c#35/6\",\"2231\":\"v-72c7365c#35/7\",\"2232\":\"v-72c7365c#35/8\",\"2233\":\"v-72c7365c#35/9\",\"2234\":\"v-72c7365c#35/10\",\"2235\":\"v-72c7365c#35/11\",\"2236\":\"v-72c7365c#35/12\",\"2237\":\"v-72c7365c#35/13\",\"2238\":\"v-72c7365c#35/14\",\"2239\":\"v-72c7365c#35/15\",\"2240\":\"v-72c7365c#35/16\",\"2241\":\"v-72c7365c#35/17\",\"2242\":\"v-72c7365c#35/18\",\"2243\":\"v-72c7365c#35/19\",\"2244\":\"v-72c7365c#35/20\",\"2245\":\"v-72c7365c#35/21\",\"2246\":\"v-72c7365c#35/22\",\"2247\":\"v-72c7365c#35/23\",\"2248\":\"v-72c7365c#35/24\",\"2249\":\"v-72c7365c#35/25\",\"2250\":\"v-72c7365c#35/26\",\"2251\":\"v-72c7365c#35/27\",\"2252\":\"v-72c7365c#35/28\",\"2253\":\"v-72c7365c#35/29\",\"2254\":\"v-72c7365c#35/30\",\"2255\":\"v-72c7365c#35/31\",\"2256\":\"v-60256d6b\",\"2257\":\"v-60256d6b#1\",\"2258\":\"v-60256d6b#1/0\",\"2259\":\"v-60256d6b#1/1\",\"2260\":\"v-60256d6b#1/2\",\"2261\":\"v-60256d6b#1/3\",\"2262\":\"v-60256d6b#1/4\",\"2263\":\"v-60256d6b#1/5\",\"2264\":\"v-60256d6b#1/6\",\"2265\":\"v-60256d6b#1/7\",\"2266\":\"v-60256d6b#1/8\",\"2267\":\"v-60256d6b#1/9\",\"2268\":\"v-60256d6b#1/10\",\"2269\":\"v-60256d6b#1/11\",\"2270\":\"v-60256d6b#2\",\"2271\":\"v-60256d6b#2/0\",\"2272\":\"v-60256d6b#2/1\",\"2273\":\"v-60256d6b#2/2\",\"2274\":\"v-60256d6b#2/3\",\"2275\":\"v-60256d6b#2/4\",\"2276\":\"v-60256d6b#2/5\",\"2277\":\"v-60256d6b#2/6\",\"2278\":\"v-60256d6b#2/7\",\"2279\":\"v-60256d6b#2/8\",\"2280\":\"v-60256d6b#3\",\"2281\":\"v-60256d6b#3/0\",\"2282\":\"v-60256d6b#3/1\",\"2283\":\"v-60256d6b#3/2\",\"2284\":\"v-60256d6b#3/3\",\"2285\":\"v-60256d6b#3/4\",\"2286\":\"v-60256d6b#3/5\",\"2287\":\"v-60256d6b#3/6\",\"2288\":\"v-60256d6b#3/7\",\"2289\":\"v-60256d6b#3/8\",\"2290\":\"v-60256d6b#3/9\",\"2291\":\"v-60256d6b#3/10\",\"2292\":\"v-60256d6b#4\",\"2293\":\"v-60256d6b#4/0\",\"2294\":\"v-60256d6b#4/1\",\"2295\":\"v-60256d6b#4/2\",\"2296\":\"v-60256d6b#4/3\",\"2297\":\"v-60256d6b#5\",\"2298\":\"v-60256d6b#5/0\",\"2299\":\"v-60256d6b#5/1\",\"2300\":\"v-60256d6b#5/2\",\"2301\":\"v-60256d6b#5/3\",\"2302\":\"v-60256d6b#5/4\",\"2303\":\"v-60256d6b#6\",\"2304\":\"v-60256d6b#6/0\",\"2305\":\"v-60256d6b#6/1\",\"2306\":\"v-60256d6b#6/2\",\"2307\":\"v-60256d6b#6/3\",\"2308\":\"v-60256d6b#6/4\",\"2309\":\"v-60256d6b#7\",\"2310\":\"v-60256d6b#7/0\",\"2311\":\"v-60256d6b#7/1\",\"2312\":\"v-60256d6b#8\",\"2313\":\"v-60256d6b#8/0\",\"2314\":\"v-60256d6b#8/1\",\"2315\":\"v-60256d6b#8/2\",\"2316\":\"v-60256d6b#8/3\",\"2317\":\"v-60256d6b#8/4\",\"2318\":\"v-60256d6b#8/5\",\"2319\":\"v-60256d6b#9\",\"2320\":\"v-60256d6b#9/0\",\"2321\":\"v-60256d6b#9/1\",\"2322\":\"v-60256d6b#9/2\",\"2323\":\"v-60256d6b#9/3\",\"2324\":\"v-60256d6b#9/4\",\"2325\":\"v-60256d6b#9/5\",\"2326\":\"v-60256d6b#9/6\",\"2327\":\"v-60256d6b#10\",\"2328\":\"v-60256d6b#10/0\",\"2329\":\"v-60256d6b#10/1\",\"2330\":\"v-60256d6b#10/2\",\"2331\":\"v-60256d6b#10/3\",\"2332\":\"v-60256d6b#10/4\",\"2333\":\"v-60256d6b#11\",\"2334\":\"v-60256d6b#11/0\",\"2335\":\"v-60256d6b#11/1\",\"2336\":\"v-60256d6b#12\",\"2337\":\"v-60256d6b#12/2\",\"2338\":\"v-60256d6b#12/3\",\"2339\":\"v-60256d6b#12/4\",\"2340\":\"v-60256d6b#13\",\"2341\":\"v-60256d6b#13/0\",\"2342\":\"v-60256d6b#13/1\",\"2343\":\"v-60256d6b#13/2\",\"2344\":\"v-60256d6b#13/3\",\"2345\":\"v-60256d6b#13/4\",\"2346\":\"v-60256d6b#13/5\",\"2347\":\"v-60256d6b#13/6\",\"2348\":\"v-60256d6b#13/7\",\"2349\":\"v-60256d6b#14\",\"2350\":\"v-60256d6b#14/0\",\"2351\":\"v-60256d6b#15\",\"2352\":\"v-60256d6b#15/0\",\"2353\":\"v-60256d6b#15/1\",\"2354\":\"v-60256d6b#15/2\",\"2355\":\"v-60256d6b#15/3\",\"2356\":\"v-60256d6b#15/4\",\"2357\":\"v-60256d6b#16\",\"2358\":\"v-60256d6b#16/0\",\"2359\":\"v-60256d6b#17\",\"2360\":\"v-60256d6b#17/0\",\"2361\":\"v-60256d6b#17/1\",\"2362\":\"v-60256d6b#17/2\",\"2363\":\"v-60256d6b#17/3\",\"2364\":\"v-60256d6b#18\",\"2365\":\"v-60256d6b#18/0\",\"2366\":\"v-60256d6b#18/1\",\"2367\":\"v-60256d6b#19\",\"2368\":\"v-60256d6b#19/0\",\"2369\":\"v-60256d6b#19/1\",\"2370\":\"v-60256d6b#19/2\",\"2371\":\"v-60256d6b#19/3\",\"2372\":\"v-60256d6b#19/4\",\"2373\":\"v-60256d6b#19/5\",\"2374\":\"v-60256d6b#19/6\",\"2375\":\"v-60256d6b#19/7\",\"2376\":\"v-60256d6b#19/8\",\"2377\":\"v-60256d6b#20\",\"2378\":\"v-60256d6b#20/9\",\"2379\":\"v-60256d6b#20/10\",\"2380\":\"v-60256d6b#20/11\",\"2381\":\"v-60256d6b#20/12\",\"2382\":\"v-60256d6b#20/13\",\"2383\":\"v-60256d6b#20/14\",\"2384\":\"v-60256d6b#20/15\",\"2385\":\"v-60256d6b#21\",\"2386\":\"v-60256d6b#21/0\",\"2387\":\"v-60256d6b#21/1\",\"2388\":\"v-60256d6b#21/2\",\"2389\":\"v-60256d6b#21/3\",\"2390\":\"v-60256d6b#21/4\",\"2391\":\"v-60256d6b#22\",\"2392\":\"v-60256d6b#22/0\",\"2393\":\"v-60256d6b#22/1\",\"2394\":\"v-60256d6b#22/2\",\"2395\":\"v-60256d6b#22/3\",\"2396\":\"v-60256d6b#22/4\",\"2397\":\"v-60256d6b#22/5\",\"2398\":\"v-60256d6b#23\",\"2399\":\"v-60256d6b#23/6\",\"2400\":\"v-60256d6b#23/7\",\"2401\":\"v-60256d6b#23/8\",\"2402\":\"v-60256d6b#23/9\",\"2403\":\"v-60256d6b#23/10\",\"2404\":\"v-60256d6b#23/11\",\"2405\":\"v-60256d6b#23/12\",\"2406\":\"v-60256d6b#23/13\",\"2407\":\"v-60256d6b#24\",\"2408\":\"v-60256d6b#24/14\",\"2409\":\"v-60256d6b#24/15\",\"2410\":\"v-60256d6b#24/16\",\"2411\":\"v-60256d6b#24/17\",\"2412\":\"v-60256d6b#24/18\",\"2413\":\"v-7a5d87ce\",\"2414\":\"v-7a5d87ce#1\",\"2415\":\"v-7a5d87ce#1/0\",\"2416\":\"v-7a5d87ce#1/1\",\"2417\":\"v-7a5d87ce#1/2\",\"2418\":\"v-7a5d87ce#1/3\",\"2419\":\"v-7a5d87ce#1/4\",\"2420\":\"v-7a5d87ce#1/5\",\"2421\":\"v-7a5d87ce#1/6\",\"2422\":\"v-7a5d87ce#1/7\",\"2423\":\"v-7a5d87ce#1/8\",\"2424\":\"v-7a5d87ce#1/9\",\"2425\":\"v-7a5d87ce#1/10\",\"2426\":\"v-7a5d87ce#1/11\",\"2427\":\"v-7a5d87ce#1/12\",\"2428\":\"v-7a5d87ce#1/13\",\"2429\":\"v-7a5d87ce#2\",\"2430\":\"v-7a5d87ce#2/0\",\"2431\":\"v-7a5d87ce#2/1\",\"2432\":\"v-7a5d87ce#2/2\",\"2433\":\"v-7a5d87ce#2/3\",\"2434\":\"v-7a5d87ce#2/4\",\"2435\":\"v-7a5d87ce#2/5\",\"2436\":\"v-7a5d87ce#2/6\",\"2437\":\"v-7a5d87ce#2/7\",\"2438\":\"v-7a5d87ce#2/8\",\"2439\":\"v-7a5d87ce#3\",\"2440\":\"v-7a5d87ce#3/9\",\"2441\":\"v-7a5d87ce#3/10\",\"2442\":\"v-7a5d87ce#3/11\",\"2443\":\"v-7a5d87ce#3/12\",\"2444\":\"v-7a5d87ce#3/13\",\"2445\":\"v-7a5d87ce#3/14\",\"2446\":\"v-7a5d87ce#4\",\"2447\":\"v-7a5d87ce#4/0\",\"2448\":\"v-7a5d87ce#4/1\",\"2449\":\"v-7a5d87ce#4/2\",\"2450\":\"v-7a5d87ce#4/3\",\"2451\":\"v-7a5d87ce#4/4\",\"2452\":\"v-7a5d87ce#4/5\",\"2453\":\"v-7a5d87ce#4/6\",\"2454\":\"v-7a5d87ce#4/7\",\"2455\":\"v-7a5d87ce#4/8\",\"2456\":\"v-7a5d87ce#4/9\",\"2457\":\"v-7a5d87ce#5\",\"2458\":\"v-7a5d87ce#5/10\",\"2459\":\"v-7a5d87ce#5/11\",\"2460\":\"v-7a5d87ce#5/12\",\"2461\":\"v-7a5d87ce#5/13\",\"2462\":\"v-7a5d87ce#5/14\",\"2463\":\"v-7a5d87ce#5/15\",\"2464\":\"v-7a5d87ce#5/16\",\"2465\":\"v-7a5d87ce#5/17\",\"2466\":\"v-7a5d87ce#5/18\",\"2467\":\"v-7a5d87ce#5/19\",\"2468\":\"v-7a5d87ce#5/20\",\"2469\":\"v-7a5d87ce#5/21\",\"2470\":\"v-7a5d87ce#5/22\",\"2471\":\"v-7a5d87ce#5/23\",\"2472\":\"v-7a5d87ce#5/24\",\"2473\":\"v-7a5d87ce#5/25\",\"2474\":\"v-7a5d87ce#6\",\"2475\":\"v-7a5d87ce#6/26\",\"2476\":\"v-7a5d87ce#6/27\",\"2477\":\"v-7a5d87ce#6/28\",\"2478\":\"v-7a5d87ce#6/29\",\"2479\":\"v-7a5d87ce#7\",\"2480\":\"v-7a5d87ce#7/0\",\"2481\":\"v-7a5d87ce#7/1\",\"2482\":\"v-7a5d87ce#7/2\",\"2483\":\"v-5d8882a0\",\"2484\":\"v-5d8882a0#1\",\"2485\":\"v-5d8882a0#1/0\",\"2486\":\"v-5d8882a0#1/1\",\"2487\":\"v-5d8882a0#1/2\",\"2488\":\"v-5d8882a0#1/3\",\"2489\":\"v-5d8882a0#1/4\",\"2490\":\"v-5d8882a0#1/5\",\"2491\":\"v-5d8882a0#1/6\",\"2492\":\"v-5d8882a0#1/7\",\"2493\":\"v-5d8882a0#1/8\",\"2494\":\"v-5d8882a0#1/9\",\"2495\":\"v-5d8882a0#1/10\",\"2496\":\"v-5d8882a0#1/11\",\"2497\":\"v-5d8882a0#1/12\",\"2498\":\"v-5d8882a0#1/13\",\"2499\":\"v-5d8882a0#1/14\",\"2500\":\"v-5d8882a0#1/15\",\"2501\":\"v-5d8882a0#1/16\",\"2502\":\"v-5d8882a0#1/17\",\"2503\":\"v-5d8882a0#2\",\"2504\":\"v-5d8882a0#2/0\",\"2505\":\"v-5d8882a0#2/1\",\"2506\":\"v-5d8882a0#2/2\",\"2507\":\"v-5d8882a0#2/3\",\"2508\":\"v-5d8882a0#2/4\",\"2509\":\"v-5d8882a0#2/5\",\"2510\":\"v-5d8882a0#2/6\",\"2511\":\"v-5d8882a0#2/7\",\"2512\":\"v-5d8882a0#2/8\",\"2513\":\"v-5d8882a0#3\",\"2514\":\"v-5d8882a0#3/9\",\"2515\":\"v-5d8882a0#3/10\",\"2516\":\"v-5d8882a0#3/11\",\"2517\":\"v-5d8882a0#4\",\"2518\":\"v-5d8882a0#4/0\",\"2519\":\"v-5d8882a0#4/1\",\"2520\":\"v-5d8882a0#5\",\"2521\":\"v-5d8882a0#5/0\",\"2522\":\"v-5d8882a0#6\",\"2523\":\"v-5d8882a0#6/1\",\"2524\":\"v-5d8882a0#6/2\",\"2525\":\"v-5d8882a0#6/3\",\"2526\":\"v-5d8882a0#6/4\",\"2527\":\"v-5d8882a0#6/5\",\"2528\":\"v-5d8882a0#7\",\"2529\":\"v-5d8882a0#7/0\",\"2530\":\"v-5d8882a0#7/1\",\"2531\":\"v-5d8882a0#7/2\",\"2532\":\"v-5d8882a0#7/3\",\"2533\":\"v-5d8882a0#7/4\",\"2534\":\"v-5d8882a0#7/5\",\"2535\":\"v-5d8882a0#7/6\",\"2536\":\"v-5d8882a0#7/7\",\"2537\":\"v-5d8882a0#7/8\",\"2538\":\"v-5d8882a0#7/9\",\"2539\":\"v-5d8882a0#7/10\",\"2540\":\"v-5d8882a0#7/11\",\"2541\":\"v-5d8882a0#7/12\",\"2542\":\"v-5d8882a0#8\",\"2543\":\"v-5d8882a0#8/13\",\"2544\":\"v-5d8882a0#8/14\",\"2545\":\"v-5d8882a0#8/15\",\"2546\":\"v-5d8882a0#8/16\",\"2547\":\"v-5d8882a0#9\",\"2548\":\"v-5d8882a0#9/17\",\"2549\":\"v-5d8882a0#9/18\",\"2550\":\"v-5d8882a0#9/19\",\"2551\":\"v-5d8882a0#9/20\",\"2552\":\"v-5d8882a0#9/21\",\"2553\":\"v-5d8882a0#10\",\"2554\":\"v-5d8882a0#10/0\",\"2555\":\"v-5d8882a0#10/1\",\"2556\":\"v-5d8882a0#10/2\",\"2557\":\"v-5d8882a0#10/3\",\"2558\":\"v-5d8882a0#10/4\",\"2559\":\"v-5d8882a0#10/5\",\"2560\":\"v-5d8882a0#10/6\",\"2561\":\"v-4b4aaf4e\",\"2562\":\"v-4b4aaf4e#1\",\"2563\":\"v-4b4aaf4e#1/0\",\"2564\":\"v-4b4aaf4e#1/1\",\"2565\":\"v-4b4aaf4e#1/2\",\"2566\":\"v-4b4aaf4e#1/3\",\"2567\":\"v-4b4aaf4e#1/4\",\"2568\":\"v-4b4aaf4e#2\",\"2569\":\"v-4b4aaf4e#2/0\",\"2570\":\"v-4b4aaf4e#2/1\",\"2571\":\"v-4b4aaf4e#2/2\",\"2572\":\"v-4b4aaf4e#2/3\",\"2573\":\"v-4b4aaf4e#3\",\"2574\":\"v-4b4aaf4e#3/0\",\"2575\":\"v-4b4aaf4e#3/1\",\"2576\":\"v-4b4aaf4e#3/2\",\"2577\":\"v-4b4aaf4e#3/3\",\"2578\":\"v-4b4aaf4e#3/4\",\"2579\":\"v-4b4aaf4e#3/5\",\"2580\":\"v-4b4aaf4e#4\",\"2581\":\"v-4b4aaf4e#4/0\",\"2582\":\"v-4b4aaf4e#4/1\",\"2583\":\"v-4b4aaf4e#4/2\",\"2584\":\"v-4b4aaf4e#4/3\",\"2585\":\"v-4b4aaf4e#4/4\",\"2586\":\"v-4b4aaf4e#4/5\",\"2587\":\"v-4b4aaf4e#4/6\",\"2588\":\"v-4b4aaf4e#4/7\",\"2589\":\"v-4b4aaf4e#4/8\",\"2590\":\"v-4b4aaf4e#4/9\",\"2591\":\"v-4b4aaf4e#4/10\",\"2592\":\"v-4b4aaf4e#4/11\",\"2593\":\"v-4b4aaf4e#4/12\",\"2594\":\"v-4b4aaf4e#4/13\",\"2595\":\"v-4b4aaf4e#4/14\",\"2596\":\"v-4b4aaf4e#4/15\",\"2597\":\"v-4b4aaf4e#4/16\",\"2598\":\"v-4b4aaf4e#5\",\"2599\":\"v-4b4aaf4e#5/0\",\"2600\":\"v-4b4aaf4e#5/1\",\"2601\":\"v-4b4aaf4e#5/2\",\"2602\":\"v-4b4aaf4e#5/3\",\"2603\":\"v-4b4aaf4e#5/4\",\"2604\":\"v-4b4aaf4e#5/5\",\"2605\":\"v-4b4aaf4e#5/6\",\"2606\":\"v-4b4aaf4e#5/7\",\"2607\":\"v-4b4aaf4e#5/8\",\"2608\":\"v-4b4aaf4e#5/9\",\"2609\":\"v-4b4aaf4e#5/10\",\"2610\":\"v-4b4aaf4e#5/11\",\"2611\":\"v-4b4aaf4e#5/12\",\"2612\":\"v-4b4aaf4e#5/13\",\"2613\":\"v-4b4aaf4e#5/14\",\"2614\":\"v-4b4aaf4e#5/15\",\"2615\":\"v-4b4aaf4e#5/16\",\"2616\":\"v-4b4aaf4e#5/17\",\"2617\":\"v-4b4aaf4e#5/18\",\"2618\":\"v-4b4aaf4e#5/19\",\"2619\":\"v-4b4aaf4e#5/20\",\"2620\":\"v-4b4aaf4e#5/21\",\"2621\":\"v-4b4aaf4e#5/22\",\"2622\":\"v-4b4aaf4e#5/23\",\"2623\":\"v-4b4aaf4e#5/24\",\"2624\":\"v-4b4aaf4e#5/25\",\"2625\":\"v-4b4aaf4e#5/26\",\"2626\":\"v-4b4aaf4e#5/27\",\"2627\":\"v-4b4aaf4e#5/28\",\"2628\":\"v-4b4aaf4e#5/29\",\"2629\":\"v-4b4aaf4e#5/30\",\"2630\":\"v-4b4aaf4e#5/31\",\"2631\":\"v-4b4aaf4e#5/32\",\"2632\":\"v-4b4aaf4e#5/33\",\"2633\":\"v-4a6785aa\",\"2634\":\"v-4a6785aa#1\",\"2635\":\"v-4a6785aa#1/0\",\"2636\":\"v-4a6785aa#1/1\",\"2637\":\"v-4a6785aa#1/2\",\"2638\":\"v-4a6785aa#1/3\",\"2639\":\"v-4a6785aa#1/4\",\"2640\":\"v-4a6785aa#1/5\",\"2641\":\"v-4a6785aa#1/6\",\"2642\":\"v-4a6785aa#1/7\",\"2643\":\"v-4a6785aa#1/8\",\"2644\":\"v-4a6785aa#1/9\",\"2645\":\"v-4a6785aa#1/10\",\"2646\":\"v-4a6785aa#1/11\",\"2647\":\"v-4a6785aa#1/12\",\"2648\":\"v-4a6785aa#1/13\",\"2649\":\"v-4a6785aa#2\",\"2650\":\"v-4a6785aa#2/0\",\"2651\":\"v-4a6785aa#2/1\",\"2652\":\"v-4a6785aa#2/2\",\"2653\":\"v-4a6785aa#2/3\",\"2654\":\"v-4a6785aa#2/4\",\"2655\":\"v-4a6785aa#2/5\",\"2656\":\"v-4a6785aa#2/6\",\"2657\":\"v-4a6785aa#2/7\",\"2658\":\"v-4a6785aa#2/8\",\"2659\":\"v-4a6785aa#2/9\",\"2660\":\"v-4a6785aa#2/10\",\"2661\":\"v-4a6785aa#2/11\",\"2662\":\"v-4a6785aa#2/12\",\"2663\":\"v-4a6785aa#2/13\",\"2664\":\"v-4a6785aa#3\",\"2665\":\"v-4a6785aa#3/14\",\"2666\":\"v-4a6785aa#3/15\",\"2667\":\"v-4a6785aa#3/16\",\"2668\":\"v-4a6785aa#3/17\",\"2669\":\"v-4a6785aa#3/18\",\"2670\":\"v-4a6785aa#3/19\",\"2671\":\"v-4a6785aa#3/20\",\"2672\":\"v-4a6785aa#4\",\"2673\":\"v-4a6785aa#4/0\",\"2674\":\"v-4a6785aa#4/1\",\"2675\":\"v-4a6785aa#4/2\",\"2676\":\"v-4a6785aa#4/3\",\"2677\":\"v-4a6785aa#4/4\",\"2678\":\"v-4a6785aa#4/5\",\"2679\":\"v-4a6785aa#4/6\",\"2680\":\"v-4a6785aa#5\",\"2681\":\"v-4a6785aa#5/7\",\"2682\":\"v-4a6785aa#5/8\",\"2683\":\"v-4a6785aa#5/9\",\"2684\":\"v-4a6785aa#6\",\"2685\":\"v-4a6785aa#6/0\",\"2686\":\"v-4a6785aa#6/1\",\"2687\":\"v-4a6785aa#6/2\",\"2688\":\"v-4a6785aa#6/3\",\"2689\":\"v-32e615c6\",\"2690\":\"v-32e615c6#1\",\"2691\":\"v-32e615c6#1/0\",\"2692\":\"v-32e615c6#2\",\"2693\":\"v-32e615c6#2/0\",\"2694\":\"v-32e615c6#2/1\",\"2695\":\"v-32e615c6#2/2\",\"2696\":\"v-32e615c6#2/3\",\"2697\":\"v-32e615c6#3\",\"2698\":\"v-32e615c6#3/0\",\"2699\":\"v-32e615c6#3/1\",\"2700\":\"v-32e615c6#3/2\",\"2701\":\"v-32e615c6#3/3\",\"2702\":\"v-32e615c6#3/4\",\"2703\":\"v-32e615c6#3/5\",\"2704\":\"v-32e615c6#3/6\",\"2705\":\"v-32e615c6#3/7\",\"2706\":\"v-32e615c6#3/8\",\"2707\":\"v-32e615c6#3/9\",\"2708\":\"v-32e615c6#3/10\",\"2709\":\"v-32e615c6#3/11\",\"2710\":\"v-32e615c6#3/12\",\"2711\":\"v-32e615c6#3/13\",\"2712\":\"v-32e615c6#3/14\",\"2713\":\"v-32e615c6#3/15\",\"2714\":\"v-32e615c6#4\",\"2715\":\"v-32e615c6#4/0\",\"2716\":\"v-32e615c6#4/1\",\"2717\":\"v-32e615c6#4/2\",\"2718\":\"v-32e615c6#4/3\",\"2719\":\"v-32e615c6#4/4\",\"2720\":\"v-32e615c6#5\",\"2721\":\"v-32e615c6#5/0\",\"2722\":\"v-32e615c6#6\",\"2723\":\"v-32e615c6#6/0\",\"2724\":\"v-32e615c6#6/1\",\"2725\":\"v-32e615c6#6/2\",\"2726\":\"v-32e615c6#6/3\",\"2727\":\"v-32e615c6#6/4\",\"2728\":\"v-32e615c6#6/5\",\"2729\":\"v-32e615c6#6/6\",\"2730\":\"v-32e615c6#6/7\",\"2731\":\"v-32e615c6#6/8\",\"2732\":\"v-32e615c6#6/9\",\"2733\":\"v-32e615c6#7\",\"2734\":\"v-32e615c6#7/0\",\"2735\":\"v-32e615c6#7/1\",\"2736\":\"v-32e615c6#7/2\",\"2737\":\"v-32e615c6#7/3\",\"2738\":\"v-32e615c6#7/4\",\"2739\":\"v-32e615c6#7/5\",\"2740\":\"v-32e615c6#7/6\",\"2741\":\"v-32e615c6#8\",\"2742\":\"v-32e615c6#8/0\",\"2743\":\"v-32e615c6#8/1\",\"2744\":\"v-32e615c6#8/2\",\"2745\":\"v-32e615c6#8/3\",\"2746\":\"v-32e615c6#8/4\",\"2747\":\"v-32e615c6#8/5\",\"2748\":\"v-32e615c6#8/6\",\"2749\":\"v-32e615c6#8/7\",\"2750\":\"v-32e615c6#9\",\"2751\":\"v-32e615c6#10\",\"2752\":\"v-32e615c6#10/0\",\"2753\":\"v-32e615c6#10/1\",\"2754\":\"v-32e615c6#10/2\",\"2755\":\"v-32e615c6#10/3\",\"2756\":\"v-32e615c6#11\",\"2757\":\"v-32e615c6#11/0\",\"2758\":\"v-32e615c6#11/1\",\"2759\":\"v-32e615c6#11/2\",\"2760\":\"v-32e615c6#12\",\"2761\":\"v-32e615c6#12/0\",\"2762\":\"v-32e615c6#12/1\",\"2763\":\"v-32e615c6#12/2\",\"2764\":\"v-32e615c6#12/3\",\"2765\":\"v-32e615c6#12/4\",\"2766\":\"v-32e615c6#12/5\",\"2767\":\"v-32e615c6#12/6\",\"2768\":\"v-32e615c6#12/7\",\"2769\":\"v-32e615c6#12/8\",\"2770\":\"v-32e615c6#12/9\",\"2771\":\"v-32e615c6#12/10\",\"2772\":\"v-32e615c6#12/11\",\"2773\":\"v-32e615c6#12/12\",\"2774\":\"v-32e615c6#12/13\",\"2775\":\"v-32e615c6#12/14\",\"2776\":\"v-32e615c6#12/15\",\"2777\":\"v-32e615c6#12/16\",\"2778\":\"v-32e615c6#12/17\",\"2779\":\"v-32e615c6#12/18\",\"2780\":\"v-32e615c6#12/19\",\"2781\":\"v-32e615c6#12/20\",\"2782\":\"v-32e615c6#12/21\",\"2783\":\"v-32e615c6#12/22\",\"2784\":\"v-32e615c6#12/23\",\"2785\":\"v-32e615c6#12/24\",\"2786\":\"v-32e615c6#13\",\"2787\":\"v-32e615c6#13/0\",\"2788\":\"v-32e615c6#13/1\",\"2789\":\"v-32e615c6#13/2\",\"2790\":\"v-32e615c6#13/3\",\"2791\":\"v-32e615c6#13/4\",\"2792\":\"v-32e615c6#13/5\",\"2793\":\"v-32e615c6#13/6\",\"2794\":\"v-32e615c6#13/7\",\"2795\":\"v-32e615c6#14\",\"2796\":\"v-32e615c6#14/0\",\"2797\":\"v-32e615c6#14/1\",\"2798\":\"v-32e615c6#14/2\",\"2799\":\"v-32e615c6#14/3\",\"2800\":\"v-32e615c6#14/4\",\"2801\":\"v-32e615c6#14/5\",\"2802\":\"v-32e615c6#14/6\",\"2803\":\"v-32e615c6#14/7\",\"2804\":\"v-32e615c6#14/8\",\"2805\":\"v-379fc8cc\",\"2806\":\"v-379fc8cc#1\",\"2807\":\"v-379fc8cc#1/0\",\"2808\":\"v-379fc8cc#1/1\",\"2809\":\"v-379fc8cc#1/2\",\"2810\":\"v-379fc8cc#1/3\",\"2811\":\"v-379fc8cc#1/4\",\"2812\":\"v-379fc8cc#1/5\",\"2813\":\"v-379fc8cc#1/6\",\"2814\":\"v-379fc8cc#1/7\",\"2815\":\"v-379fc8cc#2\",\"2816\":\"v-379fc8cc#2/0\",\"2817\":\"v-379fc8cc#2/1\",\"2818\":\"v-379fc8cc#2/2\",\"2819\":\"v-379fc8cc#2/3\",\"2820\":\"v-379fc8cc#2/4\",\"2821\":\"v-379fc8cc#3\",\"2822\":\"v-379fc8cc#3/0\",\"2823\":\"v-379fc8cc#3/1\",\"2824\":\"v-379fc8cc#4\",\"2825\":\"v-379fc8cc#4/0\",\"2826\":\"v-379fc8cc#4/1\",\"2827\":\"v-379fc8cc#4/2\",\"2828\":\"v-379fc8cc#4/3\",\"2829\":\"v-379fc8cc#4/4\",\"2830\":\"v-379fc8cc#5\",\"2831\":\"v-379fc8cc#5/0\",\"2832\":\"v-379fc8cc#5/1\",\"2833\":\"v-379fc8cc#5/2\",\"2834\":\"v-379fc8cc#5/3\",\"2835\":\"v-379fc8cc#5/4\",\"2836\":\"v-379fc8cc#5/5\",\"2837\":\"v-379fc8cc#5/6\",\"2838\":\"v-379fc8cc#5/7\",\"2839\":\"v-379fc8cc#5/8\",\"2840\":\"v-379fc8cc#5/9\",\"2841\":\"v-379fc8cc#5/10\",\"2842\":\"v-379fc8cc#5/11\",\"2843\":\"v-379fc8cc#5/12\",\"2844\":\"v-379fc8cc#5/13\",\"2845\":\"v-379fc8cc#5/14\",\"2846\":\"v-379fc8cc#5/15\",\"2847\":\"v-379fc8cc#6\",\"2848\":\"v-379fc8cc#6/0\",\"2849\":\"v-379fc8cc#7\",\"2850\":\"v-379fc8cc#7/0\",\"2851\":\"v-379fc8cc#7/1\",\"2852\":\"v-379fc8cc#7/2\",\"2853\":\"v-379fc8cc#7/3\",\"2854\":\"v-379fc8cc#7/4\",\"2855\":\"v-379fc8cc#7/5\",\"2856\":\"v-379fc8cc#8\",\"2857\":\"v-379fc8cc#8/0\",\"2858\":\"v-379fc8cc#8/1\",\"2859\":\"v-379fc8cc#8/2\",\"2860\":\"v-379fc8cc#8/3\",\"2861\":\"v-379fc8cc#8/4\",\"2862\":\"v-379fc8cc#8/5\",\"2863\":\"v-379fc8cc#9\",\"2864\":\"v-379fc8cc#9/0\",\"2865\":\"v-379fc8cc#9/1\",\"2866\":\"v-379fc8cc#9/2\",\"2867\":\"v-379fc8cc#9/3\",\"2868\":\"v-379fc8cc#9/4\",\"2869\":\"v-379fc8cc#9/5\",\"2870\":\"v-379fc8cc#9/6\",\"2871\":\"v-379fc8cc#10\",\"2872\":\"v-379fc8cc#10/0\",\"2873\":\"v-379fc8cc#10/1\",\"2874\":\"v-379fc8cc#10/2\",\"2875\":\"v-379fc8cc#10/3\",\"2876\":\"v-379fc8cc#10/4\",\"2877\":\"v-379fc8cc#11\",\"2878\":\"v-379fc8cc#11/0\",\"2879\":\"v-379fc8cc#11/1\",\"2880\":\"v-379fc8cc#11/2\",\"2881\":\"v-379fc8cc#11/3\",\"2882\":\"v-379fc8cc#11/4\",\"2883\":\"v-379fc8cc#11/5\",\"2884\":\"v-379fc8cc#11/6\",\"2885\":\"v-379fc8cc#11/7\",\"2886\":\"v-379fc8cc#11/8\",\"2887\":\"v-379fc8cc#11/9\",\"2888\":\"v-379fc8cc#11/10\",\"2889\":\"v-379fc8cc#11/11\",\"2890\":\"v-379fc8cc#11/12\",\"2891\":\"v-379fc8cc#11/13\",\"2892\":\"v-379fc8cc#12\",\"2893\":\"v-379fc8cc#12/0\",\"2894\":\"v-379fc8cc#12/1\",\"2895\":\"v-379fc8cc#12/2\",\"2896\":\"v-379fc8cc#12/3\",\"2897\":\"v-379fc8cc#12/4\",\"2898\":\"v-379fc8cc#13\",\"2899\":\"v-379fc8cc#13/0\",\"2900\":\"v-379fc8cc#13/1\",\"2901\":\"v-379fc8cc#13/2\",\"2902\":\"v-379fc8cc#13/3\",\"2903\":\"v-379fc8cc#13/4\",\"2904\":\"v-379fc8cc#13/5\",\"2905\":\"v-379fc8cc#14\",\"2906\":\"v-379fc8cc#14/0\",\"2907\":\"v-379fc8cc#14/1\",\"2908\":\"v-379fc8cc#14/2\",\"2909\":\"v-379fc8cc#14/3\",\"2910\":\"v-379fc8cc#14/4\",\"2911\":\"v-379fc8cc#14/5\",\"2912\":\"v-379fc8cc#14/6\",\"2913\":\"v-379fc8cc#14/7\",\"2914\":\"v-379fc8cc#14/8\",\"2915\":\"v-379fc8cc#14/9\",\"2916\":\"v-379fc8cc#14/10\",\"2917\":\"v-379fc8cc#14/11\",\"2918\":\"v-379fc8cc#14/12\",\"2919\":\"v-379fc8cc#14/13\",\"2920\":\"v-379fc8cc#14/14\",\"2921\":\"v-379fc8cc#14/15\",\"2922\":\"v-379fc8cc#14/16\",\"2923\":\"v-379fc8cc#14/17\",\"2924\":\"v-379fc8cc#14/18\",\"2925\":\"v-379fc8cc#14/19\",\"2926\":\"v-6a6fd891\",\"2927\":\"v-6a6fd891#1\",\"2928\":\"v-6a6fd891#1/0\",\"2929\":\"v-6a6fd891#1/1\",\"2930\":\"v-6a6fd891#1/2\",\"2931\":\"v-6a6fd891#1/3\",\"2932\":\"v-6a6fd891#1/4\",\"2933\":\"v-6a6fd891#1/5\",\"2934\":\"v-6a6fd891#1/6\",\"2935\":\"v-6a6fd891#1/7\",\"2936\":\"v-6a6fd891#1/8\",\"2937\":\"v-6a6fd891#1/9\",\"2938\":\"v-6a6fd891#1/10\",\"2939\":\"v-6a6fd891#1/11\",\"2940\":\"v-6a6fd891#1/12\",\"2941\":\"v-6a6fd891#1/13\",\"2942\":\"v-6a6fd891#1/14\",\"2943\":\"v-6a6fd891#2\",\"2944\":\"v-6a6fd891#2/0\",\"2945\":\"v-6a6fd891#2/1\",\"2946\":\"v-6a6fd891#2/2\",\"2947\":\"v-6a6fd891#2/3\",\"2948\":\"v-6a6fd891#2/4\",\"2949\":\"v-6a6fd891#2/5\",\"2950\":\"v-6a6fd891#2/6\",\"2951\":\"v-6a6fd891#2/7\",\"2952\":\"v-6a6fd891#2/8\",\"2953\":\"v-6a6fd891#2/9\",\"2954\":\"v-6a6fd891#3\",\"2955\":\"v-6a6fd891#3/10\",\"2956\":\"v-6a6fd891#3/11\",\"2957\":\"v-6a6fd891#3/12\",\"2958\":\"v-6a6fd891#3/13\",\"2959\":\"v-6a6fd891#3/14\",\"2960\":\"v-6a6fd891#3/15\",\"2961\":\"v-6a6fd891#3/16\",\"2962\":\"v-6a6fd891#3/17\",\"2963\":\"v-6a6fd891#3/18\",\"2964\":\"v-6a6fd891#3/19\",\"2965\":\"v-6a6fd891#3/20\",\"2966\":\"v-6a6fd891#3/21\",\"2967\":\"v-6a6fd891#3/22\",\"2968\":\"v-6a6fd891#3/23\",\"2969\":\"v-6a6fd891#4\",\"2970\":\"v-6a6fd891#4/0\",\"2971\":\"v-6a6fd891#4/1\",\"2972\":\"v-6a6fd891#4/2\",\"2973\":\"v-6a6fd891#5\",\"2974\":\"v-6a6fd891#5/0\",\"2975\":\"v-6a6fd891#5/1\",\"2976\":\"v-6a6fd891#5/2\",\"2977\":\"v-6a6fd891#5/3\",\"2978\":\"v-6a6fd891#5/4\",\"2979\":\"v-6a6fd891#5/5\",\"2980\":\"v-72edcc3e\",\"2981\":\"v-72edcc3e#1\",\"2982\":\"v-72edcc3e#1/0\",\"2983\":\"v-72edcc3e#1/1\",\"2984\":\"v-72edcc3e#2\",\"2985\":\"v-72edcc3e#3\",\"2986\":\"v-72edcc3e#3/0\",\"2987\":\"v-72edcc3e#3/1\",\"2988\":\"v-72edcc3e#3/2\",\"2989\":\"v-72edcc3e#3/3\",\"2990\":\"v-72edcc3e#3/4\",\"2991\":\"v-72edcc3e#3/5\",\"2992\":\"v-72edcc3e#3/6\",\"2993\":\"v-72edcc3e#3/7\",\"2994\":\"v-72edcc3e#3/8\",\"2995\":\"v-72edcc3e#3/9\",\"2996\":\"v-72edcc3e#3/10\",\"2997\":\"v-72edcc3e#3/11\",\"2998\":\"v-72edcc3e#3/12\",\"2999\":\"v-72edcc3e#3/13\",\"3000\":\"v-72edcc3e#3/14\",\"3001\":\"v-72edcc3e#3/15\",\"3002\":\"v-72edcc3e#3/16\",\"3003\":\"v-72edcc3e#3/17\",\"3004\":\"v-72edcc3e#3/18\",\"3005\":\"v-72edcc3e#3/19\",\"3006\":\"v-72edcc3e#3/20\",\"3007\":\"v-72edcc3e#4\",\"3008\":\"v-72edcc3e#4/0\",\"3009\":\"v-72edcc3e#4/1\",\"3010\":\"v-72edcc3e#4/2\",\"3011\":\"v-72edcc3e#4/3\",\"3012\":\"v-72edcc3e#4/4\",\"3013\":\"v-72edcc3e#4/5\",\"3014\":\"v-72edcc3e#4/6\",\"3015\":\"v-72edcc3e#4/7\",\"3016\":\"v-72edcc3e#4/8\",\"3017\":\"v-72edcc3e#4/9\",\"3018\":\"v-72edcc3e#4/10\",\"3019\":\"v-72edcc3e#5\",\"3020\":\"v-72edcc3e#5/11\",\"3021\":\"v-72edcc3e#5/12\",\"3022\":\"v-72edcc3e#5/13\",\"3023\":\"v-72edcc3e#5/14\",\"3024\":\"v-72edcc3e#5/15\",\"3025\":\"v-72edcc3e#5/16\",\"3026\":\"v-72edcc3e#5/17\",\"3027\":\"v-72edcc3e#5/18\",\"3028\":\"v-72edcc3e#5/19\",\"3029\":\"v-72edcc3e#5/20\",\"3030\":\"v-72edcc3e#5/21\",\"3031\":\"v-72edcc3e#5/22\",\"3032\":\"v-72edcc3e#5/23\",\"3033\":\"v-72edcc3e#5/24\",\"3034\":\"v-72edcc3e#5/25\",\"3035\":\"v-72edcc3e#5/26\",\"3036\":\"v-72edcc3e#5/27\",\"3037\":\"v-72edcc3e#5/28\",\"3038\":\"v-72edcc3e#5/29\",\"3039\":\"v-72edcc3e#6\",\"3040\":\"v-72edcc3e#6/0\",\"3041\":\"v-72edcc3e#6/1\",\"3042\":\"v-72edcc3e#6/2\",\"3043\":\"v-72edcc3e#6/3\",\"3044\":\"v-72edcc3e#6/4\",\"3045\":\"v-72edcc3e#6/5\",\"3046\":\"v-72edcc3e#6/6\",\"3047\":\"v-72edcc3e#6/7\",\"3048\":\"v-72edcc3e#6/8\",\"3049\":\"v-72edcc3e#6/9\",\"3050\":\"v-72edcc3e#6/10\",\"3051\":\"v-72edcc3e#6/11\",\"3052\":\"v-72edcc3e#6/12\",\"3053\":\"v-72edcc3e#6/13\",\"3054\":\"v-72edcc3e#6/14\",\"3055\":\"v-72edcc3e#6/15\",\"3056\":\"v-72edcc3e#6/16\",\"3057\":\"v-72edcc3e#6/17\",\"3058\":\"v-72edcc3e#6/18\",\"3059\":\"v-72edcc3e#6/19\",\"3060\":\"v-72edcc3e#6/20\",\"3061\":\"v-72edcc3e#6/21\",\"3062\":\"v-72edcc3e#6/22\",\"3063\":\"v-72edcc3e#6/23\",\"3064\":\"v-72edcc3e#6/24\",\"3065\":\"v-72edcc3e#6/25\",\"3066\":\"v-72edcc3e#6/26\",\"3067\":\"v-72edcc3e#6/27\",\"3068\":\"v-72edcc3e#6/28\",\"3069\":\"v-72edcc3e#6/29\",\"3070\":\"v-72edcc3e#6/30\",\"3071\":\"v-72edcc3e#6/31\",\"3072\":\"v-72edcc3e#6/32\",\"3073\":\"v-72edcc3e#6/33\",\"3074\":\"v-72edcc3e#6/34\",\"3075\":\"v-72edcc3e#6/35\",\"3076\":\"v-72edcc3e#6/36\",\"3077\":\"v-72edcc3e#7\",\"3078\":\"v-72edcc3e#7/0\",\"3079\":\"v-72edcc3e#7/1\",\"3080\":\"v-72edcc3e#7/2\",\"3081\":\"v-72edcc3e#7/3\",\"3082\":\"v-72edcc3e#7/4\",\"3083\":\"v-72edcc3e#7/5\",\"3084\":\"v-72edcc3e#7/6\",\"3085\":\"v-72edcc3e#7/7\",\"3086\":\"v-72edcc3e#7/8\",\"3087\":\"v-72edcc3e#7/9\",\"3088\":\"v-72edcc3e#8\",\"3089\":\"v-72edcc3e#8/0\",\"3090\":\"v-72edcc3e#8/1\",\"3091\":\"v-72edcc3e#8/2\",\"3092\":\"v-72edcc3e#8/3\",\"3093\":\"v-72edcc3e#8/4\",\"3094\":\"v-72edcc3e#8/5\",\"3095\":\"v-72edcc3e#8/6\",\"3096\":\"v-72edcc3e#8/7\",\"3097\":\"v-72edcc3e#8/8\",\"3098\":\"v-72edcc3e#8/9\",\"3099\":\"v-72edcc3e#8/10\",\"3100\":\"v-72edcc3e#8/11\",\"3101\":\"v-72edcc3e#8/12\",\"3102\":\"v-72edcc3e#8/13\",\"3103\":\"v-72edcc3e#8/14\",\"3104\":\"v-72edcc3e#8/15\",\"3105\":\"v-72edcc3e#8/16\",\"3106\":\"v-72edcc3e#8/17\",\"3107\":\"v-72edcc3e#8/18\",\"3108\":\"v-72edcc3e#8/19\",\"3109\":\"v-72edcc3e#8/20\",\"3110\":\"v-72edcc3e#8/21\",\"3111\":\"v-72edcc3e#8/22\",\"3112\":\"v-72edcc3e#8/23\",\"3113\":\"v-72edcc3e#8/24\",\"3114\":\"v-72edcc3e#8/25\",\"3115\":\"v-72edcc3e#8/26\",\"3116\":\"v-72edcc3e#8/27\",\"3117\":\"v-72edcc3e#8/28\",\"3118\":\"v-72edcc3e#8/29\",\"3119\":\"v-72edcc3e#8/30\",\"3120\":\"v-72edcc3e#8/31\",\"3121\":\"v-72edcc3e#8/32\",\"3122\":\"v-72edcc3e#8/33\",\"3123\":\"v-72edcc3e#8/34\",\"3124\":\"v-72edcc3e#8/35\",\"3125\":\"v-72edcc3e#8/36\",\"3126\":\"v-72edcc3e#8/37\",\"3127\":\"v-72edcc3e#8/38\",\"3128\":\"v-72edcc3e#8/39\",\"3129\":\"v-72edcc3e#8/40\",\"3130\":\"v-72edcc3e#8/41\",\"3131\":\"v-72edcc3e#8/42\",\"3132\":\"v-72edcc3e#8/43\",\"3133\":\"v-72edcc3e#8/44\",\"3134\":\"v-72edcc3e#8/45\",\"3135\":\"v-72edcc3e#8/46\",\"3136\":\"v-72edcc3e#8/47\",\"3137\":\"v-72edcc3e#8/48\",\"3138\":\"v-72edcc3e#8/49\",\"3139\":\"v-72edcc3e#8/50\",\"3140\":\"v-72edcc3e#8/51\",\"3141\":\"v-72edcc3e#8/52\",\"3142\":\"v-72edcc3e#8/53\",\"3143\":\"v-72edcc3e#8/54\",\"3144\":\"v-72edcc3e#8/55\",\"3145\":\"v-72edcc3e#8/56\",\"3146\":\"v-72edcc3e#8/57\",\"3147\":\"v-72edcc3e#8/58\",\"3148\":\"v-72edcc3e#8/59\",\"3149\":\"v-72edcc3e#8/60\",\"3150\":\"v-72edcc3e#8/61\",\"3151\":\"v-72edcc3e#8/62\",\"3152\":\"v-72edcc3e#8/63\",\"3153\":\"v-72edcc3e#8/64\",\"3154\":\"v-72edcc3e#9\",\"3155\":\"v-72edcc3e#9/0\",\"3156\":\"v-72edcc3e#9/1\",\"3157\":\"v-72edcc3e#9/2\",\"3158\":\"v-72edcc3e#9/3\",\"3159\":\"v-72edcc3e#9/4\",\"3160\":\"v-72edcc3e#9/5\",\"3161\":\"v-72edcc3e#9/6\",\"3162\":\"v-72edcc3e#9/7\",\"3163\":\"v-72edcc3e#9/8\",\"3164\":\"v-72edcc3e#9/9\",\"3165\":\"v-72edcc3e#9/10\",\"3166\":\"v-72edcc3e#9/11\",\"3167\":\"v-72edcc3e#9/12\",\"3168\":\"v-72edcc3e#9/13\",\"3169\":\"v-72edcc3e#9/14\",\"3170\":\"v-72edcc3e#9/15\",\"3171\":\"v-72edcc3e#9/16\",\"3172\":\"v-72edcc3e#9/17\",\"3173\":\"v-72edcc3e#9/18\",\"3174\":\"v-72edcc3e#9/19\",\"3175\":\"v-72edcc3e#9/20\",\"3176\":\"v-72edcc3e#9/21\",\"3177\":\"v-72edcc3e#9/22\",\"3178\":\"v-72edcc3e#9/23\",\"3179\":\"v-72edcc3e#9/24\",\"3180\":\"v-72edcc3e#9/25\",\"3181\":\"v-72edcc3e#9/26\",\"3182\":\"v-72edcc3e#9/27\",\"3183\":\"v-72edcc3e#10\",\"3184\":\"v-72edcc3e#10/0\",\"3185\":\"v-72edcc3e#10/1\",\"3186\":\"v-72edcc3e#10/2\",\"3187\":\"v-72edcc3e#10/3\",\"3188\":\"v-72edcc3e#10/4\",\"3189\":\"v-72edcc3e#10/5\",\"3190\":\"v-72edcc3e#10/6\",\"3191\":\"v-72edcc3e#10/7\",\"3192\":\"v-72edcc3e#10/8\",\"3193\":\"v-72edcc3e#10/9\",\"3194\":\"v-72edcc3e#10/10\",\"3195\":\"v-72edcc3e#10/11\",\"3196\":\"v-72edcc3e#10/12\",\"3197\":\"v-72edcc3e#10/13\",\"3198\":\"v-72edcc3e#10/14\",\"3199\":\"v-72edcc3e#10/15\",\"3200\":\"v-72edcc3e#10/16\",\"3201\":\"v-72edcc3e#10/17\",\"3202\":\"v-72edcc3e#10/18\",\"3203\":\"v-72edcc3e#10/19\",\"3204\":\"v-72edcc3e#10/20\",\"3205\":\"v-72edcc3e#10/21\",\"3206\":\"v-72edcc3e#10/22\",\"3207\":\"v-72edcc3e#11\",\"3208\":\"v-72edcc3e#11/0\",\"3209\":\"v-72edcc3e#11/1\",\"3210\":\"v-72edcc3e#11/2\",\"3211\":\"v-72edcc3e#11/3\",\"3212\":\"v-72edcc3e#11/4\",\"3213\":\"v-72edcc3e#11/5\",\"3214\":\"v-72edcc3e#11/6\",\"3215\":\"v-72edcc3e#11/7\",\"3216\":\"v-72edcc3e#11/8\",\"3217\":\"v-72edcc3e#11/9\",\"3218\":\"v-72edcc3e#11/10\",\"3219\":\"v-72edcc3e#11/11\",\"3220\":\"v-72edcc3e#11/12\",\"3221\":\"v-72edcc3e#11/13\",\"3222\":\"v-72edcc3e#11/14\",\"3223\":\"v-72edcc3e#12\",\"3224\":\"v-72edcc3e#12/0\",\"3225\":\"v-72edcc3e#12/1\",\"3226\":\"v-72edcc3e#12/2\",\"3227\":\"v-72edcc3e#12/3\",\"3228\":\"v-72edcc3e#12/4\",\"3229\":\"v-72edcc3e#12/5\",\"3230\":\"v-72edcc3e#12/6\",\"3231\":\"v-72edcc3e#12/7\",\"3232\":\"v-72edcc3e#12/8\",\"3233\":\"v-72edcc3e#12/9\",\"3234\":\"v-72edcc3e#12/10\",\"3235\":\"v-72edcc3e#12/11\",\"3236\":\"v-72edcc3e#12/12\",\"3237\":\"v-72edcc3e#12/13\",\"3238\":\"v-72edcc3e#13\",\"3239\":\"v-72edcc3e#13/0\",\"3240\":\"v-72edcc3e#13/1\",\"3241\":\"v-72edcc3e#13/2\",\"3242\":\"v-72edcc3e#13/3\",\"3243\":\"v-72edcc3e#13/4\",\"3244\":\"v-72edcc3e#13/5\",\"3245\":\"v-72edcc3e#13/6\",\"3246\":\"v-72edcc3e#13/7\",\"3247\":\"v-72edcc3e#13/8\",\"3248\":\"v-72edcc3e#13/9\",\"3249\":\"v-72edcc3e#14\",\"3250\":\"v-72edcc3e#15\",\"3251\":\"v-72edcc3e#15/10\",\"3252\":\"v-72edcc3e#15/11\",\"3253\":\"v-72edcc3e#15/12\",\"3254\":\"v-72edcc3e#15/13\",\"3255\":\"v-72edcc3e#15/14\",\"3256\":\"v-72edcc3e#15/15\",\"3257\":\"v-72edcc3e#15/16\",\"3258\":\"v-72edcc3e#15/17\",\"3259\":\"v-72edcc3e#15/18\",\"3260\":\"v-72edcc3e#15/19\",\"3261\":\"v-72edcc3e#15/20\",\"3262\":\"v-72edcc3e#15/21\",\"3263\":\"v-72edcc3e#15/22\",\"3264\":\"v-72edcc3e#16\",\"3265\":\"v-72edcc3e#16/0\",\"3266\":\"v-72edcc3e#16/1\",\"3267\":\"v-72edcc3e#16/2\",\"3268\":\"v-72edcc3e#16/3\",\"3269\":\"v-72edcc3e#16/4\",\"3270\":\"v-72edcc3e#16/5\",\"3271\":\"v-72edcc3e#16/6\",\"3272\":\"v-72edcc3e#16/7\",\"3273\":\"v-72edcc3e#16/8\",\"3274\":\"v-72edcc3e#16/9\",\"3275\":\"v-72edcc3e#16/10\",\"3276\":\"v-72edcc3e#16/11\",\"3277\":\"v-72edcc3e#16/12\",\"3278\":\"v-72edcc3e#16/13\",\"3279\":\"v-72edcc3e#17\",\"3280\":\"v-72edcc3e#17/0\",\"3281\":\"v-72edcc3e#17/1\",\"3282\":\"v-72edcc3e#17/2\",\"3283\":\"v-72edcc3e#17/3\",\"3284\":\"v-72edcc3e#17/4\",\"3285\":\"v-72edcc3e#17/5\",\"3286\":\"v-72edcc3e#17/6\",\"3287\":\"v-72edcc3e#17/7\",\"3288\":\"v-72edcc3e#17/8\",\"3289\":\"v-72edcc3e#17/9\",\"3290\":\"v-72edcc3e#17/10\",\"3291\":\"v-72edcc3e#17/11\",\"3292\":\"v-72edcc3e#17/12\",\"3293\":\"v-72edcc3e#17/13\",\"3294\":\"v-72edcc3e#17/14\",\"3295\":\"v-72edcc3e#17/15\",\"3296\":\"v-72edcc3e#17/16\",\"3297\":\"v-72edcc3e#17/17\",\"3298\":\"v-72edcc3e#18\",\"3299\":\"v-72edcc3e#18/0\",\"3300\":\"v-72edcc3e#18/1\",\"3301\":\"v-72edcc3e#18/2\",\"3302\":\"v-72edcc3e#18/3\",\"3303\":\"v-72edcc3e#18/4\",\"3304\":\"v-72edcc3e#18/5\",\"3305\":\"v-72edcc3e#18/6\",\"3306\":\"v-72edcc3e#18/7\",\"3307\":\"v-72edcc3e#18/8\",\"3308\":\"v-72edcc3e#18/9\",\"3309\":\"v-72edcc3e#18/10\",\"3310\":\"v-72edcc3e#18/11\",\"3311\":\"v-72edcc3e#18/12\",\"3312\":\"v-72edcc3e#18/13\",\"3313\":\"v-72edcc3e#18/14\",\"3314\":\"v-72edcc3e#18/15\",\"3315\":\"v-72edcc3e#18/16\",\"3316\":\"v-72edcc3e#18/17\",\"3317\":\"v-72edcc3e#18/18\",\"3318\":\"v-72edcc3e#18/19\",\"3319\":\"v-72edcc3e#18/20\",\"3320\":\"v-72edcc3e#18/21\",\"3321\":\"v-72edcc3e#18/22\",\"3322\":\"v-72edcc3e#18/23\",\"3323\":\"v-72edcc3e#18/24\",\"3324\":\"v-72edcc3e#18/25\",\"3325\":\"v-72edcc3e#18/26\",\"3326\":\"v-72edcc3e#18/27\",\"3327\":\"v-72edcc3e#18/28\",\"3328\":\"v-72edcc3e#18/29\",\"3329\":\"v-72edcc3e#18/30\",\"3330\":\"v-72edcc3e#19\",\"3331\":\"v-72edcc3e#19/0\",\"3332\":\"v-72edcc3e#19/1\",\"3333\":\"v-72edcc3e#19/2\",\"3334\":\"v-72edcc3e#19/3\",\"3335\":\"v-72edcc3e#19/4\",\"3336\":\"v-72edcc3e#19/5\",\"3337\":\"v-72edcc3e#19/6\",\"3338\":\"v-72edcc3e#19/7\",\"3339\":\"v-72edcc3e#19/8\",\"3340\":\"v-72edcc3e#19/9\",\"3341\":\"v-72edcc3e#19/10\",\"3342\":\"v-72edcc3e#19/11\",\"3343\":\"v-72edcc3e#19/12\",\"3344\":\"v-72edcc3e#19/13\",\"3345\":\"v-72edcc3e#19/14\",\"3346\":\"v-72edcc3e#19/15\",\"3347\":\"v-72edcc3e#19/16\",\"3348\":\"v-72edcc3e#19/17\",\"3349\":\"v-72edcc3e#20\",\"3350\":\"v-72edcc3e#21\",\"3351\":\"v-72edcc3e#21/0\",\"3352\":\"v-72edcc3e#21/1\",\"3353\":\"v-72edcc3e#21/2\",\"3354\":\"v-72edcc3e#21/3\",\"3355\":\"v-72edcc3e#21/4\",\"3356\":\"v-72edcc3e#21/5\",\"3357\":\"v-72edcc3e#21/6\",\"3358\":\"v-72edcc3e#21/7\",\"3359\":\"v-72edcc3e#21/8\",\"3360\":\"v-72edcc3e#21/9\",\"3361\":\"v-72edcc3e#21/10\",\"3362\":\"v-72edcc3e#21/11\",\"3363\":\"v-72edcc3e#21/12\",\"3364\":\"v-72edcc3e#21/13\",\"3365\":\"v-72edcc3e#21/14\",\"3366\":\"v-72edcc3e#21/15\",\"3367\":\"v-72edcc3e#22\",\"3368\":\"v-72edcc3e#22/0\",\"3369\":\"v-72edcc3e#22/1\",\"3370\":\"v-72edcc3e#22/2\",\"3371\":\"v-72edcc3e#22/3\",\"3372\":\"v-72edcc3e#22/4\",\"3373\":\"v-72edcc3e#22/5\",\"3374\":\"v-72edcc3e#22/6\",\"3375\":\"v-72edcc3e#22/7\",\"3376\":\"v-72edcc3e#22/8\",\"3377\":\"v-72edcc3e#22/9\",\"3378\":\"v-72edcc3e#22/10\",\"3379\":\"v-72edcc3e#23\",\"3380\":\"v-72edcc3e#23/0\",\"3381\":\"v-72edcc3e#23/1\",\"3382\":\"v-72edcc3e#23/2\",\"3383\":\"v-72edcc3e#23/3\",\"3384\":\"v-72edcc3e#23/4\",\"3385\":\"v-72edcc3e#23/5\",\"3386\":\"v-72edcc3e#23/6\",\"3387\":\"v-72edcc3e#23/7\",\"3388\":\"v-72edcc3e#23/8\",\"3389\":\"v-72edcc3e#23/9\",\"3390\":\"v-72edcc3e#23/10\",\"3391\":\"v-72edcc3e#23/11\",\"3392\":\"v-72edcc3e#23/12\",\"3393\":\"v-72edcc3e#24\",\"3394\":\"v-72edcc3e#24/0\",\"3395\":\"v-72edcc3e#24/1\",\"3396\":\"v-72edcc3e#24/2\",\"3397\":\"v-72edcc3e#24/3\",\"3398\":\"v-72edcc3e#24/4\",\"3399\":\"v-72edcc3e#24/5\",\"3400\":\"v-72edcc3e#24/6\",\"3401\":\"v-72edcc3e#24/7\",\"3402\":\"v-72edcc3e#24/8\",\"3403\":\"v-72edcc3e#24/9\",\"3404\":\"v-72edcc3e#24/10\",\"3405\":\"v-72edcc3e#24/11\",\"3406\":\"v-72edcc3e#24/12\",\"3407\":\"v-72edcc3e#25\",\"3408\":\"v-72edcc3e#26\",\"3409\":\"v-72edcc3e#26/0\",\"3410\":\"v-72edcc3e#26/1\",\"3411\":\"v-72edcc3e#26/2\",\"3412\":\"v-72edcc3e#26/3\",\"3413\":\"v-72edcc3e#26/4\",\"3414\":\"v-72edcc3e#26/5\",\"3415\":\"v-72edcc3e#26/6\",\"3416\":\"v-72edcc3e#26/7\",\"3417\":\"v-72edcc3e#26/8\",\"3418\":\"v-72edcc3e#26/9\",\"3419\":\"v-72edcc3e#26/10\",\"3420\":\"v-72edcc3e#26/11\",\"3421\":\"v-72edcc3e#26/12\",\"3422\":\"v-72edcc3e#26/13\",\"3423\":\"v-72edcc3e#26/14\",\"3424\":\"v-72edcc3e#26/15\",\"3425\":\"v-72edcc3e#27\",\"3426\":\"v-72edcc3e#27/0\",\"3427\":\"v-72edcc3e#27/1\",\"3428\":\"v-72edcc3e#27/2\",\"3429\":\"v-72edcc3e#27/3\",\"3430\":\"v-72edcc3e#27/4\",\"3431\":\"v-72edcc3e#27/5\",\"3432\":\"v-72edcc3e#27/6\",\"3433\":\"v-72edcc3e#27/7\",\"3434\":\"v-72edcc3e#27/8\",\"3435\":\"v-72edcc3e#27/9\",\"3436\":\"v-72edcc3e#27/10\",\"3437\":\"v-72edcc3e#27/11\",\"3438\":\"v-72edcc3e#27/12\",\"3439\":\"v-72edcc3e#27/13\",\"3440\":\"v-72edcc3e#28\",\"3441\":\"v-72edcc3e#28/0\",\"3442\":\"v-72edcc3e#28/1\",\"3443\":\"v-72edcc3e#28/2\",\"3444\":\"v-72edcc3e#28/3\",\"3445\":\"v-72edcc3e#28/4\",\"3446\":\"v-72edcc3e#28/5\",\"3447\":\"v-72edcc3e#28/6\",\"3448\":\"v-72edcc3e#28/7\",\"3449\":\"v-72edcc3e#29\",\"3450\":\"v-72edcc3e#29/0\",\"3451\":\"v-72edcc3e#29/1\",\"3452\":\"v-72edcc3e#29/2\",\"3453\":\"v-72edcc3e#29/3\",\"3454\":\"v-72edcc3e#29/4\",\"3455\":\"v-72edcc3e#29/5\",\"3456\":\"v-72edcc3e#29/6\",\"3457\":\"v-72edcc3e#29/7\",\"3458\":\"v-72edcc3e#29/8\",\"3459\":\"v-72edcc3e#29/9\",\"3460\":\"v-72edcc3e#29/10\",\"3461\":\"v-72edcc3e#29/11\",\"3462\":\"v-72edcc3e#29/12\",\"3463\":\"v-72edcc3e#29/13\",\"3464\":\"v-72edcc3e#29/14\",\"3465\":\"v-72edcc3e#29/15\",\"3466\":\"v-72edcc3e#29/16\",\"3467\":\"v-72edcc3e#29/17\",\"3468\":\"v-72edcc3e#29/18\",\"3469\":\"v-72edcc3e#29/19\",\"3470\":\"v-72edcc3e#29/20\",\"3471\":\"v-72edcc3e#29/21\",\"3472\":\"v-72edcc3e#29/22\",\"3473\":\"v-72edcc3e#29/23\",\"3474\":\"v-72edcc3e#29/24\",\"3475\":\"v-72edcc3e#29/25\",\"3476\":\"v-72edcc3e#29/26\",\"3477\":\"v-72edcc3e#29/27\",\"3478\":\"v-72edcc3e#30\",\"3479\":\"v-72edcc3e#30/0\",\"3480\":\"v-72edcc3e#30/1\",\"3481\":\"v-72edcc3e#30/2\",\"3482\":\"v-72edcc3e#30/3\",\"3483\":\"v-72edcc3e#30/4\",\"3484\":\"v-72edcc3e#30/5\",\"3485\":\"v-72edcc3e#30/6\",\"3486\":\"v-72edcc3e#30/7\",\"3487\":\"v-72edcc3e#30/8\",\"3488\":\"v-72edcc3e#30/9\",\"3489\":\"v-72edcc3e#30/10\",\"3490\":\"v-72edcc3e#30/11\",\"3491\":\"v-72edcc3e#30/12\",\"3492\":\"v-72edcc3e#30/13\",\"3493\":\"v-72edcc3e#30/14\",\"3494\":\"v-72edcc3e#30/15\",\"3495\":\"v-72edcc3e#30/16\",\"3496\":\"v-72edcc3e#30/17\",\"3497\":\"v-72edcc3e#30/18\",\"3498\":\"v-72edcc3e#30/19\",\"3499\":\"v-72edcc3e#30/20\",\"3500\":\"v-72edcc3e#30/21\",\"3501\":\"v-72edcc3e#30/22\",\"3502\":\"v-72edcc3e#30/23\",\"3503\":\"v-72edcc3e#30/24\",\"3504\":\"v-72edcc3e#30/25\",\"3505\":\"v-72edcc3e#30/26\",\"3506\":\"v-72edcc3e#30/27\",\"3507\":\"v-72edcc3e#30/28\",\"3508\":\"v-72edcc3e#30/29\",\"3509\":\"v-72edcc3e#30/30\",\"3510\":\"v-72edcc3e#30/31\",\"3511\":\"v-72edcc3e#30/32\",\"3512\":\"v-72edcc3e#30/33\",\"3513\":\"v-72edcc3e#30/34\",\"3514\":\"v-72edcc3e#30/35\",\"3515\":\"v-72edcc3e#30/36\",\"3516\":\"v-72edcc3e#30/37\",\"3517\":\"v-72edcc3e#30/38\",\"3518\":\"v-72edcc3e#30/39\",\"3519\":\"v-72edcc3e#30/40\",\"3520\":\"v-72edcc3e#30/41\",\"3521\":\"v-72edcc3e#30/42\",\"3522\":\"v-72edcc3e#30/43\",\"3523\":\"v-72edcc3e#30/44\",\"3524\":\"v-72edcc3e#30/45\",\"3525\":\"v-72edcc3e#30/46\",\"3526\":\"v-72edcc3e#30/47\",\"3527\":\"v-72edcc3e#30/48\",\"3528\":\"v-72edcc3e#30/49\",\"3529\":\"v-72edcc3e#30/50\",\"3530\":\"v-72edcc3e#30/51\",\"3531\":\"v-72edcc3e#30/52\",\"3532\":\"v-72edcc3e#30/53\",\"3533\":\"v-72edcc3e#31\",\"3534\":\"v-72edcc3e#31/0\",\"3535\":\"v-72edcc3e#31/1\",\"3536\":\"v-72edcc3e#31/2\",\"3537\":\"v-72edcc3e#31/3\",\"3538\":\"v-72edcc3e#31/4\",\"3539\":\"v-72edcc3e#31/5\",\"3540\":\"v-72edcc3e#31/6\",\"3541\":\"v-72edcc3e#31/7\",\"3542\":\"v-72edcc3e#31/8\",\"3543\":\"v-72edcc3e#31/9\",\"3544\":\"v-72edcc3e#31/10\",\"3545\":\"v-72edcc3e#31/11\",\"3546\":\"v-72edcc3e#31/12\",\"3547\":\"v-72edcc3e#31/13\",\"3548\":\"v-72edcc3e#31/14\",\"3549\":\"v-72edcc3e#31/15\",\"3550\":\"v-72edcc3e#31/16\",\"3551\":\"v-72edcc3e#31/17\",\"3552\":\"v-72edcc3e#32\",\"3553\":\"v-72edcc3e#32/0\",\"3554\":\"v-72edcc3e#32/1\",\"3555\":\"v-72edcc3e#32/2\",\"3556\":\"v-72edcc3e#32/3\",\"3557\":\"v-72edcc3e#32/4\",\"3558\":\"v-72edcc3e#32/5\",\"3559\":\"v-72edcc3e#32/6\",\"3560\":\"v-72edcc3e#32/7\",\"3561\":\"v-72edcc3e#32/8\",\"3562\":\"v-72edcc3e#32/9\",\"3563\":\"v-72edcc3e#32/10\",\"3564\":\"v-72edcc3e#32/11\",\"3565\":\"v-72edcc3e#32/12\",\"3566\":\"v-72edcc3e#32/13\",\"3567\":\"v-72edcc3e#32/14\",\"3568\":\"v-72edcc3e#32/15\",\"3569\":\"v-72edcc3e#32/16\",\"3570\":\"v-72edcc3e#32/17\",\"3571\":\"v-72edcc3e#32/18\",\"3572\":\"v-72edcc3e#32/19\",\"3573\":\"v-72edcc3e#32/20\",\"3574\":\"v-72edcc3e#32/21\",\"3575\":\"v-72edcc3e#32/22\",\"3576\":\"v-72edcc3e#32/23\",\"3577\":\"v-72edcc3e#32/24\",\"3578\":\"v-72edcc3e#32/25\",\"3579\":\"v-72edcc3e#32/26\",\"3580\":\"v-72edcc3e#32/27\",\"3581\":\"v-72edcc3e#32/28\",\"3582\":\"v-72edcc3e#32/29\",\"3583\":\"v-72edcc3e#32/30\",\"3584\":\"v-72edcc3e#32/31\",\"3585\":\"v-72edcc3e#32/32\",\"3586\":\"v-72edcc3e#32/33\",\"3587\":\"v-72edcc3e#32/34\",\"3588\":\"v-72edcc3e#32/35\",\"3589\":\"v-72edcc3e#32/36\",\"3590\":\"v-72edcc3e#32/37\",\"3591\":\"v-72edcc3e#32/38\",\"3592\":\"v-72edcc3e#32/39\",\"3593\":\"v-72edcc3e#32/40\",\"3594\":\"v-72edcc3e#32/41\",\"3595\":\"v-72edcc3e#32/42\",\"3596\":\"v-72edcc3e#32/43\",\"3597\":\"v-72edcc3e#32/44\",\"3598\":\"v-72edcc3e#32/45\",\"3599\":\"v-72edcc3e#32/46\",\"3600\":\"v-72edcc3e#32/47\",\"3601\":\"v-72edcc3e#32/48\",\"3602\":\"v-72edcc3e#32/49\",\"3603\":\"v-72edcc3e#32/50\",\"3604\":\"v-72edcc3e#32/51\",\"3605\":\"v-72edcc3e#32/52\",\"3606\":\"v-72edcc3e#32/53\",\"3607\":\"v-72edcc3e#32/54\",\"3608\":\"v-72edcc3e#32/55\",\"3609\":\"v-72edcc3e#32/56\",\"3610\":\"v-72edcc3e#32/57\",\"3611\":\"v-72edcc3e#32/58\",\"3612\":\"v-72edcc3e#32/59\",\"3613\":\"v-72edcc3e#32/60\",\"3614\":\"v-72edcc3e#32/61\",\"3615\":\"v-72edcc3e#32/62\",\"3616\":\"v-72edcc3e#32/63\",\"3617\":\"v-72edcc3e#32/64\",\"3618\":\"v-72edcc3e#32/65\",\"3619\":\"v-72edcc3e#32/66\",\"3620\":\"v-72edcc3e#32/67\",\"3621\":\"v-72edcc3e#32/68\",\"3622\":\"v-72edcc3e#32/69\",\"3623\":\"v-72edcc3e#32/70\",\"3624\":\"v-72edcc3e#32/71\",\"3625\":\"v-72edcc3e#32/72\",\"3626\":\"v-72edcc3e#32/73\",\"3627\":\"v-72edcc3e#32/74\",\"3628\":\"v-72edcc3e#32/75\",\"3629\":\"v-72edcc3e#32/76\",\"3630\":\"v-72edcc3e#32/77\",\"3631\":\"v-72edcc3e#32/78\",\"3632\":\"v-72edcc3e#32/79\",\"3633\":\"v-72edcc3e#32/80\",\"3634\":\"v-72edcc3e#32/81\",\"3635\":\"v-72edcc3e#32/82\",\"3636\":\"v-72edcc3e#32/83\",\"3637\":\"v-72edcc3e#32/84\",\"3638\":\"v-72edcc3e#32/85\",\"3639\":\"v-72edcc3e#32/86\",\"3640\":\"v-72edcc3e#32/87\",\"3641\":\"v-72edcc3e#32/88\",\"3642\":\"v-72edcc3e#32/89\",\"3643\":\"v-72edcc3e#32/90\",\"3644\":\"v-72edcc3e#32/91\",\"3645\":\"v-72edcc3e#32/92\",\"3646\":\"v-72edcc3e#32/93\",\"3647\":\"v-72edcc3e#32/94\",\"3648\":\"v-72edcc3e#32/95\",\"3649\":\"v-72edcc3e#32/96\",\"3650\":\"v-72edcc3e#32/97\",\"3651\":\"v-72edcc3e#32/98\",\"3652\":\"v-72edcc3e#32/99\",\"3653\":\"v-72edcc3e#32/100\",\"3654\":\"v-72edcc3e#32/101\",\"3655\":\"v-72edcc3e#32/102\",\"3656\":\"v-72edcc3e#32/103\",\"3657\":\"v-72edcc3e#32/104\",\"3658\":\"v-72edcc3e#32/105\",\"3659\":\"v-72edcc3e#32/106\",\"3660\":\"v-72edcc3e#32/107\",\"3661\":\"v-72edcc3e#32/108\",\"3662\":\"v-72edcc3e#32/109\",\"3663\":\"v-72edcc3e#32/110\",\"3664\":\"v-72edcc3e#32/111\",\"3665\":\"v-72edcc3e#32/112\",\"3666\":\"v-72edcc3e#32/113\",\"3667\":\"v-72edcc3e#32/114\",\"3668\":\"v-72edcc3e#32/115\",\"3669\":\"v-72edcc3e#32/116\",\"3670\":\"v-72edcc3e#32/117\",\"3671\":\"v-72edcc3e#32/118\",\"3672\":\"v-72edcc3e#32/119\",\"3673\":\"v-72edcc3e#32/120\",\"3674\":\"v-72edcc3e#32/121\",\"3675\":\"v-72edcc3e#32/122\",\"3676\":\"v-72edcc3e#32/123\",\"3677\":\"v-72edcc3e#32/124\",\"3678\":\"v-72edcc3e#32/125\",\"3679\":\"v-72edcc3e#32/126\",\"3680\":\"v-72edcc3e#32/127\",\"3681\":\"v-72edcc3e#32/128\",\"3682\":\"v-72edcc3e#32/129\",\"3683\":\"v-72edcc3e#32/130\",\"3684\":\"v-72edcc3e#32/131\",\"3685\":\"v-72edcc3e#32/132\",\"3686\":\"v-72edcc3e#32/133\",\"3687\":\"v-72edcc3e#32/134\",\"3688\":\"v-72edcc3e#32/135\",\"3689\":\"v-72edcc3e#32/136\",\"3690\":\"v-72edcc3e#32/137\",\"3691\":\"v-72edcc3e#32/138\",\"3692\":\"v-72edcc3e#32/139\",\"3693\":\"v-72edcc3e#32/140\",\"3694\":\"v-72edcc3e#32/141\",\"3695\":\"v-72edcc3e#32/142\",\"3696\":\"v-72edcc3e#32/143\",\"3697\":\"v-72edcc3e#32/144\",\"3698\":\"v-72edcc3e#32/145\",\"3699\":\"v-72edcc3e#32/146\",\"3700\":\"v-72edcc3e#32/147\",\"3701\":\"v-72edcc3e#32/148\",\"3702\":\"v-72edcc3e#32/149\",\"3703\":\"v-72edcc3e#32/150\",\"3704\":\"v-72edcc3e#32/151\",\"3705\":\"v-72edcc3e#32/152\",\"3706\":\"v-72edcc3e#32/153\",\"3707\":\"v-72edcc3e#32/154\",\"3708\":\"v-72edcc3e#32/155\",\"3709\":\"v-72edcc3e#32/156\",\"3710\":\"v-72edcc3e#32/157\",\"3711\":\"v-72edcc3e#32/158\",\"3712\":\"v-72edcc3e#32/159\",\"3713\":\"v-72edcc3e#32/160\",\"3714\":\"v-72edcc3e#32/161\",\"3715\":\"v-72edcc3e#32/162\",\"3716\":\"v-72edcc3e#32/163\",\"3717\":\"v-72edcc3e#32/164\",\"3718\":\"v-72edcc3e#32/165\",\"3719\":\"v-72edcc3e#32/166\",\"3720\":\"v-72edcc3e#32/167\",\"3721\":\"v-72edcc3e#32/168\",\"3722\":\"v-72edcc3e#32/169\",\"3723\":\"v-72edcc3e#32/170\",\"3724\":\"v-72edcc3e#32/171\",\"3725\":\"v-72edcc3e#32/172\",\"3726\":\"v-72edcc3e#32/173\",\"3727\":\"v-72edcc3e#32/174\",\"3728\":\"v-72edcc3e#32/175\",\"3729\":\"v-72edcc3e#32/176\",\"3730\":\"v-72edcc3e#32/177\",\"3731\":\"v-72edcc3e#32/178\",\"3732\":\"v-72edcc3e#32/179\",\"3733\":\"v-72edcc3e#32/180\",\"3734\":\"v-72edcc3e#32/181\",\"3735\":\"v-72edcc3e#32/182\",\"3736\":\"v-72edcc3e#32/183\",\"3737\":\"v-72edcc3e#32/184\",\"3738\":\"v-72edcc3e#32/185\",\"3739\":\"v-72edcc3e#32/186\",\"3740\":\"v-72edcc3e#32/187\",\"3741\":\"v-72edcc3e#32/188\",\"3742\":\"v-72edcc3e#32/189\",\"3743\":\"v-72edcc3e#32/190\",\"3744\":\"v-72edcc3e#32/191\",\"3745\":\"v-72edcc3e#32/192\",\"3746\":\"v-72edcc3e#32/193\",\"3747\":\"v-72edcc3e#32/194\",\"3748\":\"v-72edcc3e#32/195\",\"3749\":\"v-72edcc3e#32/196\",\"3750\":\"v-72edcc3e#32/197\",\"3751\":\"v-72edcc3e#32/198\",\"3752\":\"v-72edcc3e#32/199\",\"3753\":\"v-72edcc3e#32/200\",\"3754\":\"v-72edcc3e#32/201\",\"3755\":\"v-72edcc3e#32/202\",\"3756\":\"v-72edcc3e#32/203\",\"3757\":\"v-72edcc3e#32/204\",\"3758\":\"v-72edcc3e#32/205\",\"3759\":\"v-72edcc3e#32/206\",\"3760\":\"v-72edcc3e#32/207\",\"3761\":\"v-72edcc3e#32/208\",\"3762\":\"v-72edcc3e#32/209\",\"3763\":\"v-72edcc3e#32/210\",\"3764\":\"v-72edcc3e#32/211\",\"3765\":\"v-72edcc3e#32/212\",\"3766\":\"v-72edcc3e#32/213\",\"3767\":\"v-72edcc3e#32/214\",\"3768\":\"v-72edcc3e#32/215\",\"3769\":\"v-72edcc3e#32/216\",\"3770\":\"v-72edcc3e#32/217\",\"3771\":\"v-72edcc3e#32/218\",\"3772\":\"v-72edcc3e#32/219\",\"3773\":\"v-72edcc3e#32/220\",\"3774\":\"v-72edcc3e#32/221\",\"3775\":\"v-72edcc3e#32/222\",\"3776\":\"v-72edcc3e#32/223\",\"3777\":\"v-72edcc3e#32/224\",\"3778\":\"v-72edcc3e#32/225\",\"3779\":\"v-72edcc3e#32/226\",\"3780\":\"v-72edcc3e#32/227\",\"3781\":\"v-72edcc3e#32/228\",\"3782\":\"v-72edcc3e#32/229\",\"3783\":\"v-72edcc3e#32/230\",\"3784\":\"v-72edcc3e#32/231\",\"3785\":\"v-72edcc3e#32/232\",\"3786\":\"v-72edcc3e#32/233\",\"3787\":\"v-72edcc3e#32/234\",\"3788\":\"v-72edcc3e#32/235\",\"3789\":\"v-72edcc3e#32/236\",\"3790\":\"v-72edcc3e#32/237\",\"3791\":\"v-72edcc3e#32/238\",\"3792\":\"v-72edcc3e#32/239\",\"3793\":\"v-72edcc3e#32/240\",\"3794\":\"v-72edcc3e#32/241\",\"3795\":\"v-72edcc3e#32/242\",\"3796\":\"v-72edcc3e#32/243\",\"3797\":\"v-72edcc3e#32/244\",\"3798\":\"v-72edcc3e#32/245\",\"3799\":\"v-72edcc3e#32/246\",\"3800\":\"v-72edcc3e#32/247\",\"3801\":\"v-72edcc3e#32/248\",\"3802\":\"v-72edcc3e#32/249\",\"3803\":\"v-72edcc3e#32/250\",\"3804\":\"v-72edcc3e#32/251\",\"3805\":\"v-72edcc3e#32/252\",\"3806\":\"v-72edcc3e#32/253\",\"3807\":\"v-72edcc3e#32/254\",\"3808\":\"v-72edcc3e#32/255\",\"3809\":\"v-72edcc3e#32/256\",\"3810\":\"v-72edcc3e#32/257\",\"3811\":\"v-72edcc3e#32/258\",\"3812\":\"v-72edcc3e#32/259\",\"3813\":\"v-72edcc3e#32/260\",\"3814\":\"v-72edcc3e#32/261\",\"3815\":\"v-72edcc3e#32/262\",\"3816\":\"v-72edcc3e#32/263\",\"3817\":\"v-72edcc3e#32/264\",\"3818\":\"v-72edcc3e#32/265\",\"3819\":\"v-72edcc3e#32/266\",\"3820\":\"v-72edcc3e#32/267\",\"3821\":\"v-72edcc3e#32/268\",\"3822\":\"v-72edcc3e#32/269\",\"3823\":\"v-72edcc3e#32/270\",\"3824\":\"v-72edcc3e#32/271\",\"3825\":\"v-72edcc3e#32/272\",\"3826\":\"v-72edcc3e#32/273\",\"3827\":\"v-72edcc3e#32/274\",\"3828\":\"v-72edcc3e#32/275\",\"3829\":\"v-72edcc3e#32/276\",\"3830\":\"v-72edcc3e#32/277\",\"3831\":\"v-72edcc3e#32/278\",\"3832\":\"v-72edcc3e#32/279\",\"3833\":\"v-72edcc3e#32/280\",\"3834\":\"v-72edcc3e#32/281\",\"3835\":\"v-72edcc3e#32/282\",\"3836\":\"v-72edcc3e#32/283\",\"3837\":\"v-72edcc3e#32/284\",\"3838\":\"v-72edcc3e#32/285\",\"3839\":\"v-72edcc3e#32/286\",\"3840\":\"v-72edcc3e#32/287\",\"3841\":\"v-72edcc3e#32/288\",\"3842\":\"v-72edcc3e#32/289\",\"3843\":\"v-72edcc3e#32/290\",\"3844\":\"v-72edcc3e#32/291\",\"3845\":\"v-72edcc3e#32/292\",\"3846\":\"v-72edcc3e#32/293\",\"3847\":\"v-72edcc3e#32/294\",\"3848\":\"v-72edcc3e#32/295\",\"3849\":\"v-72edcc3e#32/296\",\"3850\":\"v-72edcc3e#32/297\",\"3851\":\"v-72edcc3e#32/298\",\"3852\":\"v-72edcc3e#32/299\",\"3853\":\"v-72edcc3e#32/300\",\"3854\":\"v-72edcc3e#32/301\",\"3855\":\"v-72edcc3e#32/302\",\"3856\":\"v-72edcc3e#32/303\",\"3857\":\"v-72edcc3e#32/304\",\"3858\":\"v-72edcc3e#32/305\",\"3859\":\"v-72edcc3e#32/306\",\"3860\":\"v-72edcc3e#32/307\",\"3861\":\"v-72edcc3e#32/308\",\"3862\":\"v-72edcc3e#32/309\",\"3863\":\"v-72edcc3e#32/310\",\"3864\":\"v-72edcc3e#32/311\",\"3865\":\"v-72edcc3e#32/312\",\"3866\":\"v-72edcc3e#32/313\",\"3867\":\"v-72edcc3e#32/314\",\"3868\":\"v-72edcc3e#32/315\",\"3869\":\"v-72edcc3e#32/316\",\"3870\":\"v-72edcc3e#32/317\",\"3871\":\"v-72edcc3e#32/318\",\"3872\":\"v-72edcc3e#32/319\",\"3873\":\"v-72edcc3e#32/320\",\"3874\":\"v-72edcc3e#32/321\",\"3875\":\"v-72edcc3e#32/322\",\"3876\":\"v-72edcc3e#32/323\",\"3877\":\"v-72edcc3e#32/324\",\"3878\":\"v-72edcc3e#32/325\",\"3879\":\"v-72edcc3e#32/326\",\"3880\":\"v-72edcc3e#32/327\",\"3881\":\"v-72edcc3e#32/328\",\"3882\":\"v-72edcc3e#32/329\",\"3883\":\"v-72edcc3e#32/330\",\"3884\":\"v-72edcc3e#32/331\",\"3885\":\"v-72edcc3e#32/332\",\"3886\":\"v-72edcc3e#32/333\",\"3887\":\"v-72edcc3e#32/334\",\"3888\":\"v-72edcc3e#32/335\",\"3889\":\"v-72edcc3e#32/336\",\"3890\":\"v-72edcc3e#32/337\",\"3891\":\"v-72edcc3e#32/338\",\"3892\":\"v-72edcc3e#32/339\",\"3893\":\"v-72edcc3e#32/340\",\"3894\":\"v-72edcc3e#32/341\",\"3895\":\"v-72edcc3e#32/342\",\"3896\":\"v-72edcc3e#32/343\",\"3897\":\"v-72edcc3e#32/344\",\"3898\":\"v-72edcc3e#32/345\",\"3899\":\"v-72edcc3e#32/346\",\"3900\":\"v-72edcc3e#32/347\",\"3901\":\"v-72edcc3e#32/348\",\"3902\":\"v-72edcc3e#32/349\",\"3903\":\"v-72edcc3e#32/350\",\"3904\":\"v-72edcc3e#32/351\",\"3905\":\"v-72edcc3e#32/352\",\"3906\":\"v-72edcc3e#32/353\",\"3907\":\"v-72edcc3e#32/354\",\"3908\":\"v-72edcc3e#32/355\",\"3909\":\"v-72edcc3e#32/356\",\"3910\":\"v-72edcc3e#32/357\",\"3911\":\"v-72edcc3e#32/358\",\"3912\":\"v-72edcc3e#32/359\",\"3913\":\"v-72edcc3e#32/360\",\"3914\":\"v-72edcc3e#32/361\",\"3915\":\"v-72edcc3e#32/362\",\"3916\":\"v-72edcc3e#32/363\",\"3917\":\"v-72edcc3e#32/364\",\"3918\":\"v-72edcc3e#32/365\",\"3919\":\"v-72edcc3e#32/366\",\"3920\":\"v-72edcc3e#32/367\",\"3921\":\"v-72edcc3e#32/368\",\"3922\":\"v-72edcc3e#32/369\",\"3923\":\"v-72edcc3e#32/370\",\"3924\":\"v-72edcc3e#32/371\",\"3925\":\"v-72edcc3e#32/372\",\"3926\":\"v-72edcc3e#32/373\",\"3927\":\"v-72edcc3e#32/374\",\"3928\":\"v-56af3e42\",\"3929\":\"v-56af3e42#0/0\",\"3930\":\"v-56af3e42#1\",\"3931\":\"v-56af3e42#1/0\",\"3932\":\"v-56af3e42#1/1\",\"3933\":\"v-56af3e42#2\",\"3934\":\"v-56af3e42#2/0\",\"3935\":\"v-56af3e42#2/1\",\"3936\":\"v-56af3e42#2/2\",\"3937\":\"v-56af3e42#2/3\",\"3938\":\"v-56af3e42#2/4\",\"3939\":\"v-56af3e42#3\",\"3940\":\"v-56af3e42#3/0\",\"3941\":\"v-56af3e42#4\",\"3942\":\"v-56af3e42#5\",\"3943\":\"v-56af3e42#5/1\",\"3944\":\"v-56af3e42#6\",\"3945\":\"v-56af3e42#6/0\",\"3946\":\"v-56af3e42#7\",\"3947\":\"v-56af3e42#8\",\"3948\":\"v-56af3e42#8/0\",\"3949\":\"v-56af3e42#8/1\",\"3950\":\"v-56af3e42#8/2\",\"3951\":\"v-56af3e42#9\",\"3952\":\"v-56af3e42#9/0\",\"3953\":\"v-56af3e42#10\",\"3954\":\"v-56af3e42#10/0\",\"3955\":\"v-56af3e42#10/1\",\"3956\":\"v-56af3e42#10/2\",\"3957\":\"v-56af3e42#10/3\",\"3958\":\"v-56af3e42#10/4\",\"3959\":\"v-56af3e42#10/5\",\"3960\":\"v-56af3e42#10/6\",\"3961\":\"v-56af3e42#10/7\",\"3962\":\"v-56af3e42#10/8\",\"3963\":\"v-56af3e42#10/9\",\"3964\":\"v-56af3e42#10/10\",\"3965\":\"v-56af3e42#10/11\",\"3966\":\"v-56af3e42#10/12\",\"3967\":\"v-56af3e42#10/13\",\"3968\":\"v-56af3e42#10/14\",\"3969\":\"v-56af3e42#10/15\",\"3970\":\"v-56af3e42#11\",\"3971\":\"v-56af3e42#11/16\",\"3972\":\"v-56af3e42#11/17\",\"3973\":\"v-56af3e42#11/18\",\"3974\":\"v-56af3e42#11/19\",\"3975\":\"v-56af3e42#11/20\",\"3976\":\"v-56af3e42#11/21\",\"3977\":\"v-56af3e42#12\",\"3978\":\"v-56af3e42#12/0\",\"3979\":\"v-56af3e42#13\",\"3980\":\"v-56af3e42#13/0\",\"3981\":\"v-56af3e42#14\",\"3982\":\"v-56af3e42#15\",\"3983\":\"v-56af3e42#15/0\",\"3984\":\"v-56af3e42#16\",\"3985\":\"v-56af3e42#16/0\",\"3986\":\"v-56af3e42#17\",\"3987\":\"v-56af3e42#17/0\",\"3988\":\"v-56af3e42#17/1\",\"3989\":\"v-56af3e42#17/2\",\"3990\":\"v-56af3e42#17/3\",\"3991\":\"v-56af3e42#17/4\",\"3992\":\"v-56af3e42#18\",\"3993\":\"v-56af3e42#18/0\",\"3994\":\"v-56af3e42#19\",\"3995\":\"v-56af3e42#20\",\"3996\":\"v-56af3e42#20/0\",\"3997\":\"v-56af3e42#21\",\"3998\":\"v-56af3e42#21/0\",\"3999\":\"v-56af3e42#21/1\",\"4000\":\"v-56af3e42#22\",\"4001\":\"v-56af3e42#22/0\",\"4002\":\"v-56af3e42#23\",\"4003\":\"v-56af3e42#23/1\",\"4004\":\"v-56af3e42#24\",\"4005\":\"v-56af3e42#25\",\"4006\":\"v-56af3e42#25/0\",\"4007\":\"v-56af3e42#25/1\",\"4008\":\"v-56af3e42#26\",\"4009\":\"v-56af3e42#26/0\",\"4010\":\"v-56af3e42#26/1\",\"4011\":\"v-56af3e42#26/2\",\"4012\":\"v-56af3e42#26/3\",\"4013\":\"v-56af3e42#26/4\",\"4014\":\"v-56af3e42#26/5\",\"4015\":\"v-56af3e42#26/6\",\"4016\":\"v-56af3e42#26/7\",\"4017\":\"v-56af3e42#26/8\",\"4018\":\"v-56af3e42#27\",\"4019\":\"v-56af3e42#27/0\",\"4020\":\"v-56af3e42#27/1\",\"4021\":\"v-56af3e42#27/2\",\"4022\":\"v-56af3e42#27/3\",\"4023\":\"v-56af3e42#28\",\"4024\":\"v-56af3e42#28/4\",\"4025\":\"v-56af3e42#29\",\"4026\":\"v-56af3e42#29/0\",\"4027\":\"v-56af3e42#30\",\"4028\":\"v-56af3e42#30/0\",\"4029\":\"v-56af3e42#30/1\",\"4030\":\"v-56af3e42#30/2\",\"4031\":\"v-56af3e42#30/3\",\"4032\":\"v-56af3e42#30/4\",\"4033\":\"v-56af3e42#30/5\",\"4034\":\"v-56af3e42#30/6\",\"4035\":\"v-56af3e42#31\",\"4036\":\"v-56af3e42#31/0\",\"4037\":\"v-56af3e42#31/1\",\"4038\":\"v-56af3e42#31/2\",\"4039\":\"v-56af3e42#31/3\",\"4040\":\"v-56af3e42#32\",\"4041\":\"v-56af3e42#32/0\",\"4042\":\"v-56af3e42#32/1\",\"4043\":\"v-56af3e42#32/2\",\"4044\":\"v-56af3e42#32/3\",\"4045\":\"v-56af3e42#32/4\",\"4046\":\"v-56af3e42#32/5\",\"4047\":\"v-56af3e42#32/6\",\"4048\":\"v-56af3e42#32/7\",\"4049\":\"v-56af3e42#32/8\",\"4050\":\"v-56af3e42#32/9\",\"4051\":\"v-56af3e42#32/10\",\"4052\":\"v-56af3e42#32/11\",\"4053\":\"v-56af3e42#32/12\",\"4054\":\"v-56af3e42#32/13\",\"4055\":\"v-56af3e42#33\",\"4056\":\"v-56af3e42#33/0\",\"4057\":\"v-56af3e42#33/1\",\"4058\":\"v-56af3e42#33/2\",\"4059\":\"v-56af3e42#34\",\"4060\":\"v-56af3e42#35\",\"4061\":\"v-56af3e42#35/0\",\"4062\":\"v-56af3e42#35/1\",\"4063\":\"v-56af3e42#35/2\",\"4064\":\"v-56af3e42#35/3\",\"4065\":\"v-56af3e42#35/4\",\"4066\":\"v-56af3e42#35/5\",\"4067\":\"v-56af3e42#35/6\",\"4068\":\"v-56af3e42#36\",\"4069\":\"v-56af3e42#36/0\",\"4070\":\"v-56af3e42#36/1\",\"4071\":\"v-56af3e42#36/2\",\"4072\":\"v-56af3e42#36/3\",\"4073\":\"v-56af3e42#36/4\",\"4074\":\"v-56af3e42#36/5\",\"4075\":\"v-56af3e42#36/6\",\"4076\":\"v-56af3e42#36/7\",\"4077\":\"v-56af3e42#36/8\",\"4078\":\"v-56af3e42#36/9\",\"4079\":\"v-56af3e42#36/10\",\"4080\":\"v-56af3e42#36/11\",\"4081\":\"v-56af3e42#36/12\",\"4082\":\"v-56af3e42#36/13\",\"4083\":\"v-56af3e42#36/14\",\"4084\":\"v-56af3e42#36/15\",\"4085\":\"v-56af3e42#36/16\",\"4086\":\"v-56af3e42#36/17\",\"4087\":\"v-56af3e42#36/18\",\"4088\":\"v-56af3e42#36/19\",\"4089\":\"v-56af3e42#36/20\",\"4090\":\"v-56af3e42#36/21\",\"4091\":\"v-56af3e42#37\",\"4092\":\"v-56af3e42#37/0\",\"4093\":\"v-56af3e42#37/1\",\"4094\":\"v-56af3e42#37/2\",\"4095\":\"v-56af3e42#37/3\",\"4096\":\"v-56af3e42#37/4\",\"4097\":\"v-56af3e42#38\",\"4098\":\"v-56af3e42#38/0\",\"4099\":\"v-56af3e42#39\",\"4100\":\"v-56af3e42#40\",\"4101\":\"v-56af3e42#40/0\",\"4102\":\"v-56af3e42#40/1\",\"4103\":\"v-56af3e42#40/2\",\"4104\":\"v-56af3e42#40/3\",\"4105\":\"v-56af3e42#40/4\",\"4106\":\"v-56af3e42#41\",\"4107\":\"v-56af3e42#42\",\"4108\":\"v-56af3e42#42/0\",\"4109\":\"v-56af3e42#42/1\",\"4110\":\"v-56af3e42#43\",\"4111\":\"v-56af3e42#43/0\",\"4112\":\"v-56af3e42#44\",\"4113\":\"v-56af3e42#45\",\"4114\":\"v-56af3e42#45/0\",\"4115\":\"v-56af3e42#45/1\",\"4116\":\"v-56af3e42#46\",\"4117\":\"v-56af3e42#46/2\",\"4118\":\"v-56af3e42#47\",\"4119\":\"v-56af3e42#47/0\",\"4120\":\"v-56af3e42#48\",\"4121\":\"v-56af3e42#48/0\",\"4122\":\"v-56af3e42#48/1\",\"4123\":\"v-56af3e42#49\",\"4124\":\"v-56af3e42#49/0\",\"4125\":\"v-56af3e42#49/1\",\"4126\":\"v-56af3e42#49/2\",\"4127\":\"v-56af3e42#50\",\"4128\":\"v-56af3e42#50/0\",\"4129\":\"v-56af3e42#50/1\",\"4130\":\"v-56af3e42#51\",\"4131\":\"v-56af3e42#52\",\"4132\":\"v-56af3e42#52/0\",\"4133\":\"v-56af3e42#52/1\",\"4134\":\"v-56af3e42#53\",\"4135\":\"v-56af3e42#53/2\",\"4136\":\"v-56af3e42#53/3\",\"4137\":\"v-56af3e42#54\",\"4138\":\"v-56af3e42#54/4\",\"4139\":\"v-56af3e42#54/5\",\"4140\":\"v-56af3e42#54/6\",\"4141\":\"v-56af3e42#54/7\",\"4142\":\"v-56af3e42#55\",\"4143\":\"v-56af3e42#55/8\",\"4144\":\"v-56af3e42#55/9\",\"4145\":\"v-56af3e42#56\",\"4146\":\"v-56af3e42#56/10\",\"4147\":\"v-56af3e42#57\",\"4148\":\"v-56af3e42#57/0\",\"4149\":\"v-56af3e42#57/1\",\"4150\":\"v-56af3e42#58\",\"4151\":\"v-56af3e42#58/0\",\"4152\":\"v-56af3e42#58/1\",\"4153\":\"v-56af3e42#58/2\",\"4154\":\"v-56af3e42#58/3\",\"4155\":\"v-56af3e42#59\",\"4156\":\"v-56af3e42#59/0\",\"4157\":\"v-56af3e42#59/1\",\"4158\":\"v-56af3e42#60\",\"4159\":\"v-56af3e42#60/0\",\"4160\":\"v-56af3e42#61\",\"4161\":\"v-56af3e42#62\",\"4162\":\"v-56af3e42#62/1\",\"4163\":\"v-56af3e42#62/2\",\"4164\":\"v-56af3e42#63\",\"4165\":\"v-56af3e42#64\",\"4166\":\"v-56af3e42#64/0\",\"4167\":\"v-56af3e42#65\",\"4168\":\"v-56af3e42#65/0\",\"4169\":\"v-56af3e42#65/1\",\"4170\":\"v-56af3e42#65/2\",\"4171\":\"v-56af3e42#65/3\",\"4172\":\"v-56af3e42#66\",\"4173\":\"v-56af3e42#66/0\",\"4174\":\"v-56af3e42#66/1\",\"4175\":\"v-56af3e42#66/2\",\"4176\":\"v-56af3e42#67\",\"4177\":\"v-56af3e42#67/0\",\"4178\":\"v-56af3e42#67/1\",\"4179\":\"v-56af3e42#67/2\",\"4180\":\"v-56af3e42#67/3\",\"4181\":\"v-56af3e42#68\",\"4182\":\"v-56af3e42#68/0\",\"4183\":\"v-56af3e42#68/1\",\"4184\":\"v-56af3e42#69\",\"4185\":\"v-56af3e42#69/0\",\"4186\":\"v-56af3e42#69/1\",\"4187\":\"v-56af3e42#70\",\"4188\":\"v-56af3e42#70/0\",\"4189\":\"v-56af3e42#70/1\",\"4190\":\"v-56af3e42#71\",\"4191\":\"v-56af3e42#71/0\",\"4192\":\"v-56af3e42#71/1\",\"4193\":\"v-56af3e42#71/2\",\"4194\":\"v-56af3e42#72\",\"4195\":\"v-56af3e42#72/0\",\"4196\":\"v-56af3e42#72/1\",\"4197\":\"v-56af3e42#72/2\",\"4198\":\"v-56af3e42#72/3\",\"4199\":\"v-56af3e42#72/4\",\"4200\":\"v-56af3e42#72/5\",\"4201\":\"v-56af3e42#72/6\",\"4202\":\"v-56af3e42#72/7\",\"4203\":\"v-56af3e42#72/8\",\"4204\":\"v-56af3e42#72/9\",\"4205\":\"v-56af3e42#72/10\",\"4206\":\"v-56af3e42#72/11\",\"4207\":\"v-56af3e42#72/12\",\"4208\":\"v-56af3e42#72/13\",\"4209\":\"v-56af3e42#72/14\",\"4210\":\"v-56af3e42#72/15\",\"4211\":\"v-56af3e42#72/16\",\"4212\":\"v-56af3e42#72/17\",\"4213\":\"v-56af3e42#72/18\",\"4214\":\"v-56af3e42#72/19\",\"4215\":\"v-56af3e42#72/20\",\"4216\":\"v-56af3e42#72/21\",\"4217\":\"v-56af3e42#72/22\",\"4218\":\"v-56af3e42#72/23\",\"4219\":\"v-56af3e42#72/24\",\"4220\":\"v-56af3e42#72/25\",\"4221\":\"v-56af3e42#72/26\",\"4222\":\"v-56af3e42#72/27\",\"4223\":\"v-56af3e42#72/28\",\"4224\":\"v-56af3e42#73\",\"4225\":\"v-56af3e42#74\",\"4226\":\"v-56af3e42#74/29\",\"4227\":\"v-56af3e42#74/30\",\"4228\":\"v-56af3e42#75\",\"4229\":\"v-56af3e42#75/0\",\"4230\":\"v-56af3e42#75/1\",\"4231\":\"v-56af3e42#75/2\",\"4232\":\"v-56af3e42#75/3\",\"4233\":\"v-56af3e42#75/4\",\"4234\":\"v-56af3e42#76\",\"4235\":\"v-56af3e42#76/5\",\"4236\":\"v-56af3e42#76/6\",\"4237\":\"v-56af3e42#77\",\"4238\":\"v-56af3e42#77/7\",\"4239\":\"v-56af3e42#77/8\",\"4240\":\"v-56af3e42#78\",\"4241\":\"v-56af3e42#79\",\"4242\":\"v-56af3e42#80\",\"4243\":\"v-56af3e42#80/9\",\"4244\":\"v-56af3e42#80/10\",\"4245\":\"v-56af3e42#80/11\",\"4246\":\"v-56af3e42#80/12\",\"4247\":\"v-56af3e42#80/13\",\"4248\":\"v-56af3e42#81\",\"4249\":\"v-56af3e42#81/0\",\"4250\":\"v-56af3e42#82\",\"4251\":\"v-56af3e42#82/0\",\"4252\":\"v-56af3e42#83\",\"4253\":\"v-56af3e42#83/0\",\"4254\":\"v-56af3e42#83/1\",\"4255\":\"v-56af3e42#83/2\",\"4256\":\"v-56af3e42#84\",\"4257\":\"v-56af3e42#84/0\",\"4258\":\"v-56af3e42#84/1\",\"4259\":\"v-56af3e42#85\",\"4260\":\"v-56af3e42#85/0\",\"4261\":\"v-56af3e42#85/1\",\"4262\":\"v-56af3e42#86\",\"4263\":\"v-56af3e42#86/0\",\"4264\":\"v-56af3e42#87\",\"4265\":\"v-56af3e42#87/0\",\"4266\":\"v-56af3e42#87/1\",\"4267\":\"v-56af3e42#87/2\",\"4268\":\"v-7c15438d\",\"4269\":\"v-1d64c9ca\",\"4270\":\"v-2c847d26\",\"4271\":\"v-ba136d28\",\"4272\":\"v-51157dd4\",\"4273\":\"v-ea902450\",\"4274\":\"v-ea902450#0/0\",\"4275\":\"v-ea902450#1\",\"4276\":\"v-ea902450#1/0\",\"4277\":\"v-ea902450#2\",\"4278\":\"v-ea902450#2/0\",\"4279\":\"v-ea902450#2/1\",\"4280\":\"v-ea902450#2/2\",\"4281\":\"v-ea902450#2/3\",\"4282\":\"v-ea902450#2/4\",\"4283\":\"v-ea902450#2/5\",\"4284\":\"v-ea902450#2/6\",\"4285\":\"v-ea902450#2/7\",\"4286\":\"v-ea902450#3\",\"4287\":\"v-ea902450#3/0\",\"4288\":\"v-ea902450#3/1\",\"4289\":\"v-ea902450#3/2\",\"4290\":\"v-ea902450#3/3\",\"4291\":\"v-ea902450#4\",\"4292\":\"v-ea902450#4/0\",\"4293\":\"v-ea902450#4/1\",\"4294\":\"v-ea902450#4/2\",\"4295\":\"v-ea902450#4/3\",\"4296\":\"v-ea902450#4/4\",\"4297\":\"v-ea902450#4/5\",\"4298\":\"v-ea902450#4/6\",\"4299\":\"v-ea902450#4/7\",\"4300\":\"v-ea902450#4/8\",\"4301\":\"v-ea902450#4/9\",\"4302\":\"v-ea902450#4/10\",\"4303\":\"v-ea902450#4/11\",\"4304\":\"v-ea902450#4/12\",\"4305\":\"v-ea902450#4/13\",\"4306\":\"v-ea902450#4/14\",\"4307\":\"v-ea902450#4/15\",\"4308\":\"v-ea902450#4/16\",\"4309\":\"v-ea902450#4/17\",\"4310\":\"v-ea902450#4/18\",\"4311\":\"v-ea902450#4/19\",\"4312\":\"v-ea902450#4/20\",\"4313\":\"v-ea902450#4/21\",\"4314\":\"v-ea902450#4/22\",\"4315\":\"v-ea902450#4/23\",\"4316\":\"v-ea902450#4/24\",\"4317\":\"v-ea902450#4/25\",\"4318\":\"v-ea902450#4/26\",\"4319\":\"v-ea902450#4/27\",\"4320\":\"v-ea902450#4/28\",\"4321\":\"v-ea902450#5\",\"4322\":\"v-ea902450#5/0\",\"4323\":\"v-ea902450#6\",\"4324\":\"v-ea902450#6/0\",\"4325\":\"v-ea902450#7\",\"4326\":\"v-ea902450#7/1\",\"4327\":\"v-ea902450#7/2\",\"4328\":\"v-ea902450#8\",\"4329\":\"v-ea902450#8/0\",\"4330\":\"v-ea902450#8/1\",\"4331\":\"v-ea902450#8/2\",\"4332\":\"v-ea902450#8/3\",\"4333\":\"v-ea902450#8/4\",\"4334\":\"v-ea902450#8/5\",\"4335\":\"v-ea902450#9\",\"4336\":\"v-ea902450#9/0\",\"4337\":\"v-ea902450#9/1\",\"4338\":\"v-ea902450#9/2\",\"4339\":\"v-ea902450#10\",\"4340\":\"v-ea902450#10/0\",\"4341\":\"v-ea902450#10/1\",\"4342\":\"v-ea902450#10/2\",\"4343\":\"v-ea902450#10/3\",\"4344\":\"v-ea902450#10/4\",\"4345\":\"v-ea902450#10/5\",\"4346\":\"v-ea902450#10/6\",\"4347\":\"v-ea902450#10/7\",\"4348\":\"v-ea902450#10/8\",\"4349\":\"v-ea902450#10/9\",\"4350\":\"v-ea902450#10/10\",\"4351\":\"v-ea902450#10/11\",\"4352\":\"v-ea902450#10/12\",\"4353\":\"v-ea902450#10/13\",\"4354\":\"v-ea902450#10/14\",\"4355\":\"v-ea902450#10/15\",\"4356\":\"v-ea902450#10/16\",\"4357\":\"v-ea902450#10/17\",\"4358\":\"v-ea902450#10/18\",\"4359\":\"v-ea902450#10/19\",\"4360\":\"v-ea902450#10/20\",\"4361\":\"v-ea902450#10/21\",\"4362\":\"v-ea902450#10/22\",\"4363\":\"v-ea902450#10/23\",\"4364\":\"v-ea902450#10/24\",\"4365\":\"v-ea902450#10/25\",\"4366\":\"v-ea902450#10/26\",\"4367\":\"v-ea902450#10/27\",\"4368\":\"v-ea902450#10/28\",\"4369\":\"v-ea902450#10/29\",\"4370\":\"v-ea902450#11\",\"4371\":\"v-ea902450#11/0\",\"4372\":\"v-ea902450#11/1\",\"4373\":\"v-ea902450#11/2\",\"4374\":\"v-ea902450#11/3\",\"4375\":\"v-ea902450#12\",\"4376\":\"v-ea902450#12/4\",\"4377\":\"v-ea902450#12/5\",\"4378\":\"v-ea902450#12/6\",\"4379\":\"v-ea902450#12/7\",\"4380\":\"v-ea902450#12/8\",\"4381\":\"v-ea902450#12/9\",\"4382\":\"v-ea902450#12/10\",\"4383\":\"v-ea902450#12/11\",\"4384\":\"v-ea902450#12/12\",\"4385\":\"v-ea902450#13\",\"4386\":\"v-ea902450#13/0\",\"4387\":\"v-ea902450#13/1\",\"4388\":\"v-ea902450#13/2\",\"4389\":\"v-ea902450#13/3\",\"4390\":\"v-ea902450#13/4\",\"4391\":\"v-ea902450#13/5\",\"4392\":\"v-ea902450#13/6\",\"4393\":\"v-ea902450#13/7\",\"4394\":\"v-ea902450#13/8\",\"4395\":\"v-ea902450#13/9\",\"4396\":\"v-ea902450#13/10\",\"4397\":\"v-ea902450#13/11\",\"4398\":\"v-ea902450#13/12\",\"4399\":\"v-ea902450#13/13\",\"4400\":\"v-ea902450#13/14\",\"4401\":\"v-ea902450#13/15\",\"4402\":\"v-ea902450#13/16\",\"4403\":\"v-ea902450#13/17\",\"4404\":\"v-ea902450#13/18\",\"4405\":\"v-ea902450#13/19\",\"4406\":\"v-ea902450#13/20\",\"4407\":\"v-ea902450#13/21\",\"4408\":\"v-ea902450#13/22\",\"4409\":\"v-ea902450#14\",\"4410\":\"v-ea902450#14/0\",\"4411\":\"v-ea902450#14/1\",\"4412\":\"v-ea902450#14/2\",\"4413\":\"v-ea902450#14/3\",\"4414\":\"v-ea902450#14/4\",\"4415\":\"v-ea902450#14/5\",\"4416\":\"v-ea902450#14/6\",\"4417\":\"v-ea902450#15\",\"4418\":\"v-ea902450#15/0\",\"4419\":\"v-ea902450#15/1\",\"4420\":\"v-ea902450#15/2\",\"4421\":\"v-ea902450#16\",\"4422\":\"v-ea902450#16/0\",\"4423\":\"v-ea902450#16/1\",\"4424\":\"v-ea902450#16/2\",\"4425\":\"v-ea902450#16/3\",\"4426\":\"v-55fde6b6\",\"4427\":\"v-07ea442c\",\"4428\":\"v-0995ea93\",\"4429\":\"v-595dbbce\",\"4430\":\"v-595dbbce#0/0\",\"4431\":\"v-595dbbce#1\",\"4432\":\"v-595dbbce#1/0\",\"4433\":\"v-595dbbce#1/1\",\"4434\":\"v-595dbbce#2\",\"4435\":\"v-595dbbce#2/0\",\"4436\":\"v-595dbbce#2/1\",\"4437\":\"v-595dbbce#2/2\",\"4438\":\"v-595dbbce#2/3\",\"4439\":\"v-595dbbce#2/4\",\"4440\":\"v-595dbbce#2/5\",\"4441\":\"v-595dbbce#2/6\",\"4442\":\"v-595dbbce#2/7\",\"4443\":\"v-595dbbce#2/8\",\"4444\":\"v-595dbbce#3\",\"4445\":\"v-595dbbce#3/0\",\"4446\":\"v-595dbbce#3/1\",\"4447\":\"v-595dbbce#3/2\",\"4448\":\"v-595dbbce#3/3\",\"4449\":\"v-595dbbce#3/4\",\"4450\":\"v-595dbbce#4\",\"4451\":\"v-595dbbce#4/0\",\"4452\":\"v-595dbbce#4/1\",\"4453\":\"v-595dbbce#4/2\",\"4454\":\"v-595dbbce#4/3\",\"4455\":\"v-595dbbce#4/4\",\"4456\":\"v-595dbbce#4/5\",\"4457\":\"v-595dbbce#5\",\"4458\":\"v-595dbbce#5/0\",\"4459\":\"v-595dbbce#6\",\"4460\":\"v-595dbbce#6/0\",\"4461\":\"v-595dbbce#7\",\"4462\":\"v-595dbbce#7/0\",\"4463\":\"v-595dbbce#8\",\"4464\":\"v-595dbbce#8/0\",\"4465\":\"v-595dbbce#8/1\",\"4466\":\"v-595dbbce#8/2\",\"4467\":\"v-595dbbce#8/3\",\"4468\":\"v-595dbbce#8/4\",\"4469\":\"v-595dbbce#8/5\",\"4470\":\"v-595dbbce#8/6\",\"4471\":\"v-595dbbce#8/7\",\"4472\":\"v-595dbbce#8/8\",\"4473\":\"v-595dbbce#8/9\",\"4474\":\"v-595dbbce#8/10\",\"4475\":\"v-595dbbce#8/11\",\"4476\":\"v-595dbbce#8/12\",\"4477\":\"v-595dbbce#8/13\",\"4478\":\"v-595dbbce#8/14\",\"4479\":\"v-595dbbce#8/15\",\"4480\":\"v-595dbbce#9\",\"4481\":\"v-595dbbce#9/0\",\"4482\":\"v-595dbbce#9/1\",\"4483\":\"v-595dbbce#9/2\",\"4484\":\"v-595dbbce#10\",\"4485\":\"v-595dbbce#10/0\",\"4486\":\"v-595dbbce#11\",\"4487\":\"v-595dbbce#11/0\",\"4488\":\"v-595dbbce#12\",\"4489\":\"v-595dbbce#12/0\",\"4490\":\"v-595dbbce#12/1\",\"4491\":\"v-595dbbce#12/2\",\"4492\":\"v-0e43f4b5\",\"4493\":\"v-0e43f4b5#0/0\",\"4494\":\"v-0e43f4b5#1\",\"4495\":\"v-0e43f4b5#1/0\",\"4496\":\"v-0e43f4b5#1/1\",\"4497\":\"v-0e43f4b5#1/2\",\"4498\":\"v-0e43f4b5#1/3\",\"4499\":\"v-0e43f4b5#1/4\",\"4500\":\"v-0e43f4b5#1/5\",\"4501\":\"v-0e43f4b5#1/6\",\"4502\":\"v-0e43f4b5#1/7\",\"4503\":\"v-0e43f4b5#1/8\",\"4504\":\"v-0e43f4b5#1/9\",\"4505\":\"v-0e43f4b5#2\",\"4506\":\"v-0e43f4b5#2/0\",\"4507\":\"v-0e43f4b5#2/1\",\"4508\":\"v-0e43f4b5#2/2\",\"4509\":\"v-0e43f4b5#2/3\",\"4510\":\"v-0e43f4b5#2/4\",\"4511\":\"v-0e43f4b5#2/5\",\"4512\":\"v-0e43f4b5#2/6\",\"4513\":\"v-0e43f4b5#3\",\"4514\":\"v-0e43f4b5#3/0\",\"4515\":\"v-0e43f4b5#3/1\",\"4516\":\"v-0e43f4b5#3/2\",\"4517\":\"v-0e43f4b5#4\",\"4518\":\"v-0e43f4b5#4/0\",\"4519\":\"v-0e43f4b5#4/1\",\"4520\":\"v-0e43f4b5#4/2\",\"4521\":\"v-0e43f4b5#5\",\"4522\":\"v-0e43f4b5#5/0\",\"4523\":\"v-0e43f4b5#5/1\",\"4524\":\"v-0e43f4b5#5/2\",\"4525\":\"v-0e43f4b5#5/3\",\"4526\":\"v-0e43f4b5#5/4\",\"4527\":\"v-0e43f4b5#5/5\",\"4528\":\"v-0e43f4b5#5/6\",\"4529\":\"v-0e43f4b5#5/7\",\"4530\":\"v-0e43f4b5#5/8\",\"4531\":\"v-0e43f4b5#5/9\",\"4532\":\"v-0e43f4b5#5/10\",\"4533\":\"v-0e43f4b5#5/11\",\"4534\":\"v-0e43f4b5#5/12\",\"4535\":\"v-0e43f4b5#5/13\",\"4536\":\"v-0e43f4b5#5/14\",\"4537\":\"v-0e43f4b5#5/15\",\"4538\":\"v-0e43f4b5#5/16\",\"4539\":\"v-0e43f4b5#5/17\",\"4540\":\"v-0e43f4b5#5/18\",\"4541\":\"v-0e43f4b5#5/19\",\"4542\":\"v-0e43f4b5#5/20\",\"4543\":\"v-0e43f4b5#5/21\",\"4544\":\"v-0e43f4b5#5/22\",\"4545\":\"v-0e43f4b5#5/23\",\"4546\":\"v-0e43f4b5#5/24\",\"4547\":\"v-0e43f4b5#5/25\",\"4548\":\"v-0e43f4b5#5/26\",\"4549\":\"v-0e43f4b5#5/27\",\"4550\":\"v-0e43f4b5#5/28\",\"4551\":\"v-0e43f4b5#5/29\",\"4552\":\"v-0e43f4b5#5/30\",\"4553\":\"v-0e43f4b5#5/31\",\"4554\":\"v-0e43f4b5#5/32\",\"4555\":\"v-0e43f4b5#5/33\",\"4556\":\"v-0e43f4b5#5/34\",\"4557\":\"v-0e43f4b5#5/35\",\"4558\":\"v-0e43f4b5#5/36\",\"4559\":\"v-0e43f4b5#5/37\",\"4560\":\"v-0e43f4b5#5/38\",\"4561\":\"v-0e43f4b5#5/39\",\"4562\":\"v-0e43f4b5#5/40\",\"4563\":\"v-0e43f4b5#5/41\",\"4564\":\"v-0e43f4b5#5/42\",\"4565\":\"v-0e43f4b5#5/43\",\"4566\":\"v-0e43f4b5#5/44\",\"4567\":\"v-0e43f4b5#5/45\",\"4568\":\"v-0e43f4b5#5/46\",\"4569\":\"v-0e43f4b5#5/47\",\"4570\":\"v-0e43f4b5#5/48\",\"4571\":\"v-0e43f4b5#5/49\",\"4572\":\"v-0e43f4b5#5/50\",\"4573\":\"v-0e43f4b5#5/51\",\"4574\":\"v-0e43f4b5#5/52\",\"4575\":\"v-0e43f4b5#5/53\",\"4576\":\"v-0e43f4b5#5/54\",\"4577\":\"v-0e43f4b5#5/55\",\"4578\":\"v-0e43f4b5#5/56\",\"4579\":\"v-0e43f4b5#5/57\",\"4580\":\"v-0e43f4b5#5/58\",\"4581\":\"v-0e43f4b5#5/59\",\"4582\":\"v-0e43f4b5#5/60\",\"4583\":\"v-0e43f4b5#5/61\",\"4584\":\"v-0e43f4b5#5/62\",\"4585\":\"v-0e43f4b5#6\",\"4586\":\"v-0e43f4b5#6/0\",\"4587\":\"v-0e43f4b5#7\",\"4588\":\"v-0e43f4b5#7/0\",\"4589\":\"v-0e43f4b5#7/1\",\"4590\":\"v-0e43f4b5#7/2\",\"4591\":\"v-0e43f4b5#8\",\"4592\":\"v-0e43f4b5#8/3\",\"4593\":\"v-0e43f4b5#8/4\",\"4594\":\"v-0e43f4b5#8/5\",\"4595\":\"v-0e43f4b5#8/6\",\"4596\":\"v-0e43f4b5#8/7\",\"4597\":\"v-0e43f4b5#8/8\",\"4598\":\"v-0e43f4b5#8/9\",\"4599\":\"v-0e43f4b5#8/10\",\"4600\":\"v-0e43f4b5#8/11\",\"4601\":\"v-0e43f4b5#8/12\",\"4602\":\"v-0e43f4b5#8/13\",\"4603\":\"v-0e43f4b5#8/14\",\"4604\":\"v-0e43f4b5#9\",\"4605\":\"v-0e43f4b5#9/0\",\"4606\":\"v-0e43f4b5#9/1\",\"4607\":\"v-0e43f4b5#9/2\",\"4608\":\"v-0e43f4b5#10\",\"4609\":\"v-0e43f4b5#10/3\",\"4610\":\"v-0e43f4b5#10/4\",\"4611\":\"v-0e43f4b5#10/5\",\"4612\":\"v-0e43f4b5#10/6\",\"4613\":\"v-0e43f4b5#10/7\",\"4614\":\"v-0e43f4b5#10/8\",\"4615\":\"v-0e43f4b5#10/9\",\"4616\":\"v-0e43f4b5#10/10\",\"4617\":\"v-0e43f4b5#10/11\",\"4618\":\"v-0e43f4b5#11\",\"4619\":\"v-0e43f4b5#11/0\",\"4620\":\"v-0e43f4b5#12\",\"4621\":\"v-0e43f4b5#12/0\",\"4622\":\"v-0e43f4b5#13\",\"4623\":\"v-0e43f4b5#13/0\",\"4624\":\"v-0e43f4b5#13/1\",\"4625\":\"v-0e43f4b5#13/2\",\"4626\":\"v-0e43f4b5#13/3\",\"4627\":\"v-0e43f4b5#13/4\",\"4628\":\"v-0e43f4b5#13/5\",\"4629\":\"v-0e43f4b5#13/6\",\"4630\":\"v-0e43f4b5#13/7\",\"4631\":\"v-0e43f4b5#13/8\",\"4632\":\"v-0e43f4b5#13/9\",\"4633\":\"v-0e43f4b5#13/10\",\"4634\":\"v-0e43f4b5#13/11\",\"4635\":\"v-0e43f4b5#13/12\",\"4636\":\"v-0e43f4b5#13/13\",\"4637\":\"v-0e43f4b5#13/14\",\"4638\":\"v-0e43f4b5#13/15\",\"4639\":\"v-0e43f4b5#14\",\"4640\":\"v-0e43f4b5#14/0\",\"4641\":\"v-0e43f4b5#14/1\",\"4642\":\"v-0e43f4b5#14/2\",\"4643\":\"v-0e43f4b5#14/3\",\"4644\":\"v-0e43f4b5#14/4\",\"4645\":\"v-0e43f4b5#14/5\",\"4646\":\"v-0e43f4b5#14/6\",\"4647\":\"v-0e43f4b5#14/7\",\"4648\":\"v-0e43f4b5#14/8\",\"4649\":\"v-0e43f4b5#14/9\",\"4650\":\"v-0e43f4b5#15\",\"4651\":\"v-0e43f4b5#15/10\",\"4652\":\"v-0e43f4b5#15/11\",\"4653\":\"v-0e43f4b5#16\",\"4654\":\"v-0e43f4b5#16/0\",\"4655\":\"v-0e43f4b5#16/1\",\"4656\":\"v-0e43f4b5#16/2\",\"4657\":\"v-0e43f4b5#16/3\",\"4658\":\"v-0e43f4b5#16/4\",\"4659\":\"v-0e43f4b5#16/5\",\"4660\":\"v-0e43f4b5#16/6\",\"4661\":\"v-0e43f4b5#17\",\"4662\":\"v-0e43f4b5#17/7\",\"4663\":\"v-0e43f4b5#17/8\",\"4664\":\"v-0e43f4b5#17/9\",\"4665\":\"v-0e43f4b5#17/10\",\"4666\":\"v-0e43f4b5#18\",\"4667\":\"v-0e43f4b5#18/0\",\"4668\":\"v-0e43f4b5#18/1\",\"4669\":\"v-0e43f4b5#18/2\",\"4670\":\"v-0e43f4b5#18/3\",\"4671\":\"v-0e43f4b5#19\",\"4672\":\"v-0e43f4b5#19/0\",\"4673\":\"v-0e43f4b5#19/1\",\"4674\":\"v-0e43f4b5#20\",\"4675\":\"v-0e43f4b5#20/0\",\"4676\":\"v-0e43f4b5#21\",\"4677\":\"v-0e43f4b5#21/0\",\"4678\":\"v-0e43f4b5#21/1\",\"4679\":\"v-0e43f4b5#21/2\",\"4680\":\"v-0e43f4b5#21/3\",\"4681\":\"v-0e43f4b5#21/4\",\"4682\":\"v-0e43f4b5#21/5\",\"4683\":\"v-0e43f4b5#21/6\",\"4684\":\"v-0e43f4b5#21/7\",\"4685\":\"v-0e43f4b5#21/8\",\"4686\":\"v-0e43f4b5#21/9\",\"4687\":\"v-0e43f4b5#22\",\"4688\":\"v-0e43f4b5#22/0\",\"4689\":\"v-0e43f4b5#22/1\",\"4690\":\"v-0e43f4b5#22/2\",\"4691\":\"v-0e43f4b5#22/3\",\"4692\":\"v-0e43f4b5#22/4\",\"4693\":\"v-0e43f4b5#22/5\",\"4694\":\"v-0e43f4b5#22/6\",\"4695\":\"v-0e43f4b5#22/7\",\"4696\":\"v-0e43f4b5#22/8\",\"4697\":\"v-0e43f4b5#22/9\",\"4698\":\"v-0e43f4b5#23\",\"4699\":\"v-0e43f4b5#23/0\",\"4700\":\"v-0e43f4b5#23/1\",\"4701\":\"v-0e43f4b5#23/2\",\"4702\":\"v-0e43f4b5#23/3\",\"4703\":\"v-0e43f4b5#23/4\",\"4704\":\"v-0e43f4b5#23/5\",\"4705\":\"v-a57a2242\",\"4706\":\"v-a57a2242#0/0\",\"4707\":\"v-a57a2242#1\",\"4708\":\"v-a57a2242#1/0\",\"4709\":\"v-a57a2242#1/1\",\"4710\":\"v-a57a2242#1/2\",\"4711\":\"v-a57a2242#2\",\"4712\":\"v-a57a2242#2/0\",\"4713\":\"v-a57a2242#2/1\",\"4714\":\"v-a57a2242#2/2\",\"4715\":\"v-a57a2242#3\",\"4716\":\"v-a57a2242#3/0\",\"4717\":\"v-a57a2242#3/1\",\"4718\":\"v-a57a2242#3/2\",\"4719\":\"v-a57a2242#4\",\"4720\":\"v-a57a2242#4/0\",\"4721\":\"v-a57a2242#4/1\",\"4722\":\"v-a57a2242#4/2\",\"4723\":\"v-a57a2242#4/3\",\"4724\":\"v-a57a2242#4/4\",\"4725\":\"v-a57a2242#4/5\",\"4726\":\"v-a57a2242#5\",\"4727\":\"v-a57a2242#5/0\",\"4728\":\"v-a57a2242#5/1\",\"4729\":\"v-a57a2242#5/2\",\"4730\":\"v-a57a2242#5/3\",\"4731\":\"v-a57a2242#5/4\",\"4732\":\"v-a57a2242#6\",\"4733\":\"v-a57a2242#6/0\",\"4734\":\"v-a57a2242#6/1\",\"4735\":\"v-a57a2242#7\",\"4736\":\"v-a57a2242#7/0\",\"4737\":\"v-a57a2242#7/1\",\"4738\":\"v-a57a2242#7/2\",\"4739\":\"v-a57a2242#7/3\",\"4740\":\"v-a57a2242#7/4\",\"4741\":\"v-a57a2242#8\",\"4742\":\"v-a57a2242#8/0\",\"4743\":\"v-a57a2242#8/1\",\"4744\":\"v-a57a2242#8/2\",\"4745\":\"v-a57a2242#8/3\",\"4746\":\"v-a57a2242#8/4\",\"4747\":\"v-a57a2242#8/5\",\"4748\":\"v-a57a2242#8/6\",\"4749\":\"v-a57a2242#8/7\",\"4750\":\"v-a57a2242#8/8\",\"4751\":\"v-a57a2242#8/9\",\"4752\":\"v-a57a2242#9\",\"4753\":\"v-a57a2242#9/0\",\"4754\":\"v-a57a2242#9/1\",\"4755\":\"v-a57a2242#9/2\",\"4756\":\"v-a57a2242#9/3\",\"4757\":\"v-a57a2242#9/4\",\"4758\":\"v-a57a2242#10\",\"4759\":\"v-a57a2242#10/5\",\"4760\":\"v-a57a2242#10/6\",\"4761\":\"v-a57a2242#11\",\"4762\":\"v-a57a2242#11/7\",\"4763\":\"v-a57a2242#11/8\",\"4764\":\"v-a57a2242#11/9\",\"4765\":\"v-a57a2242#11/10\",\"4766\":\"v-a57a2242#11/11\",\"4767\":\"v-a57a2242#12\",\"4768\":\"v-a57a2242#12/0\",\"4769\":\"v-a57a2242#12/1\",\"4770\":\"v-a57a2242#12/2\",\"4771\":\"v-a57a2242#12/3\",\"4772\":\"v-a57a2242#13\",\"4773\":\"v-a57a2242#13/4\",\"4774\":\"v-a57a2242#13/5\",\"4775\":\"v-a57a2242#13/6\",\"4776\":\"v-a57a2242#13/7\",\"4777\":\"v-a57a2242#13/8\",\"4778\":\"v-a57a2242#13/9\",\"4779\":\"v-a57a2242#13/10\",\"4780\":\"v-a57a2242#13/11\",\"4781\":\"v-a57a2242#13/12\",\"4782\":\"v-a57a2242#14\",\"4783\":\"v-a57a2242#14/13\",\"4784\":\"v-a57a2242#14/14\",\"4785\":\"v-a57a2242#14/15\",\"4786\":\"v-a57a2242#14/16\",\"4787\":\"v-a57a2242#14/17\",\"4788\":\"v-a57a2242#14/18\",\"4789\":\"v-a57a2242#14/19\",\"4790\":\"v-a57a2242#14/20\",\"4791\":\"v-a57a2242#14/21\",\"4792\":\"v-a57a2242#15\",\"4793\":\"v-a57a2242#15/0\",\"4794\":\"v-a57a2242#15/1\",\"4795\":\"v-a57a2242#15/2\",\"4796\":\"v-a57a2242#15/3\",\"4797\":\"v-a57a2242#15/4\",\"4798\":\"v-a57a2242#15/5\",\"4799\":\"v-a57a2242#15/6\",\"4800\":\"v-a57a2242#16\",\"4801\":\"v-a57a2242#16/0\",\"4802\":\"v-a57a2242#16/1\",\"4803\":\"v-a57a2242#16/2\",\"4804\":\"v-a57a2242#16/3\",\"4805\":\"v-a57a2242#16/4\",\"4806\":\"v-a57a2242#16/5\",\"4807\":\"v-a57a2242#16/6\",\"4808\":\"v-a57a2242#16/7\",\"4809\":\"v-a57a2242#16/8\",\"4810\":\"v-a57a2242#16/9\",\"4811\":\"v-a57a2242#16/10\",\"4812\":\"v-a57a2242#16/11\",\"4813\":\"v-a57a2242#16/12\",\"4814\":\"v-a57a2242#16/13\",\"4815\":\"v-a57a2242#16/14\",\"4816\":\"v-a57a2242#17\",\"4817\":\"v-a57a2242#17/0\",\"4818\":\"v-a57a2242#17/1\",\"4819\":\"v-a57a2242#17/2\",\"4820\":\"v-a57a2242#17/3\",\"4821\":\"v-a57a2242#17/4\",\"4822\":\"v-a57a2242#17/5\",\"4823\":\"v-a57a2242#17/6\",\"4824\":\"v-a57a2242#17/7\",\"4825\":\"v-a57a2242#17/8\",\"4826\":\"v-a57a2242#17/9\",\"4827\":\"v-a57a2242#17/10\",\"4828\":\"v-a57a2242#17/11\",\"4829\":\"v-a57a2242#17/12\",\"4830\":\"v-a57a2242#17/13\",\"4831\":\"v-a57a2242#17/14\",\"4832\":\"v-a57a2242#17/15\",\"4833\":\"v-a57a2242#17/16\",\"4834\":\"v-a57a2242#17/17\",\"4835\":\"v-a57a2242#17/18\",\"4836\":\"v-a57a2242#17/19\",\"4837\":\"v-a57a2242#17/20\",\"4838\":\"v-a57a2242#17/21\",\"4839\":\"v-a57a2242#17/22\",\"4840\":\"v-a57a2242#17/23\",\"4841\":\"v-a57a2242#18\",\"4842\":\"v-a57a2242#18/0\",\"4843\":\"v-a57a2242#18/1\",\"4844\":\"v-a57a2242#18/2\",\"4845\":\"v-a57a2242#18/3\",\"4846\":\"v-a57a2242#18/4\",\"4847\":\"v-a57a2242#19\",\"4848\":\"v-a57a2242#19/0\",\"4849\":\"v-a57a2242#19/1\",\"4850\":\"v-a57a2242#19/2\",\"4851\":\"v-a57a2242#19/3\",\"4852\":\"v-a57a2242#19/4\",\"4853\":\"v-a57a2242#19/5\",\"4854\":\"v-a57a2242#19/6\",\"4855\":\"v-a57a2242#19/7\",\"4856\":\"v-a57a2242#19/8\",\"4857\":\"v-a57a2242#19/9\",\"4858\":\"v-a57a2242#20\",\"4859\":\"v-a57a2242#20/0\",\"4860\":\"v-a57a2242#20/1\",\"4861\":\"v-a57a2242#20/2\",\"4862\":\"v-a57a2242#20/3\",\"4863\":\"v-a57a2242#20/4\",\"4864\":\"v-a57a2242#20/5\",\"4865\":\"v-a57a2242#20/6\",\"4866\":\"v-a57a2242#20/7\",\"4867\":\"v-a57a2242#20/8\",\"4868\":\"v-a57a2242#20/9\",\"4869\":\"v-a57a2242#20/10\",\"4870\":\"v-a57a2242#21\",\"4871\":\"v-a57a2242#21/11\",\"4872\":\"v-a57a2242#21/12\",\"4873\":\"v-a57a2242#21/13\",\"4874\":\"v-a57a2242#21/14\",\"4875\":\"v-a57a2242#21/15\",\"4876\":\"v-a57a2242#21/16\",\"4877\":\"v-a57a2242#21/17\",\"4878\":\"v-a57a2242#21/18\",\"4879\":\"v-a57a2242#21/19\",\"4880\":\"v-a57a2242#21/20\",\"4881\":\"v-a57a2242#21/21\",\"4882\":\"v-a57a2242#21/22\",\"4883\":\"v-a57a2242#21/23\",\"4884\":\"v-a57a2242#21/24\",\"4885\":\"v-a57a2242#21/25\",\"4886\":\"v-a57a2242#21/26\",\"4887\":\"v-a57a2242#21/27\",\"4888\":\"v-a57a2242#21/28\",\"4889\":\"v-a57a2242#21/29\",\"4890\":\"v-a57a2242#21/30\",\"4891\":\"v-a57a2242#21/31\",\"4892\":\"v-a57a2242#21/32\",\"4893\":\"v-a57a2242#22\",\"4894\":\"v-a57a2242#22/0\",\"4895\":\"v-a57a2242#22/1\",\"4896\":\"v-a57a2242#22/2\",\"4897\":\"v-a57a2242#22/3\",\"4898\":\"v-a57a2242#23\",\"4899\":\"v-a57a2242#23/0\",\"4900\":\"v-a57a2242#23/1\",\"4901\":\"v-a57a2242#23/2\",\"4902\":\"v-a57a2242#23/3\",\"4903\":\"v-a57a2242#23/4\",\"4904\":\"v-a57a2242#24\",\"4905\":\"v-a57a2242#24/5\",\"4906\":\"v-a57a2242#24/6\",\"4907\":\"v-a57a2242#24/7\",\"4908\":\"v-a57a2242#24/8\",\"4909\":\"v-a57a2242#25\",\"4910\":\"v-a57a2242#25/9\",\"4911\":\"v-a57a2242#25/10\",\"4912\":\"v-a57a2242#25/11\",\"4913\":\"v-a57a2242#25/12\",\"4914\":\"v-a57a2242#25/13\",\"4915\":\"v-a57a2242#26\",\"4916\":\"v-a57a2242#26/14\",\"4917\":\"v-a57a2242#26/15\",\"4918\":\"v-a57a2242#26/16\",\"4919\":\"v-a57a2242#26/17\",\"4920\":\"v-a57a2242#26/18\",\"4921\":\"v-a57a2242#26/19\",\"4922\":\"v-a57a2242#26/20\",\"4923\":\"v-a57a2242#26/21\",\"4924\":\"v-a57a2242#27\",\"4925\":\"v-a57a2242#27/0\",\"4926\":\"v-a57a2242#27/1\",\"4927\":\"v-a57a2242#28\",\"4928\":\"v-a57a2242#28/2\",\"4929\":\"v-a57a2242#29\",\"4930\":\"v-a57a2242#29/0\",\"4931\":\"v-a57a2242#29/1\",\"4932\":\"v-a57a2242#29/2\",\"4933\":\"v-a57a2242#30\",\"4934\":\"v-a57a2242#30/3\",\"4935\":\"v-a57a2242#30/4\",\"4936\":\"v-a57a2242#31\",\"4937\":\"v-a57a2242#31/0\",\"4938\":\"v-a57a2242#31/1\",\"4939\":\"v-a57a2242#31/2\",\"4940\":\"v-a57a2242#31/3\",\"4941\":\"v-a57a2242#31/4\",\"4942\":\"v-a57a2242#31/5\",\"4943\":\"v-a57a2242#31/6\",\"4944\":\"v-a57a2242#31/7\",\"4945\":\"v-a57a2242#31/8\",\"4946\":\"v-a57a2242#31/9\",\"4947\":\"v-a57a2242#31/10\",\"4948\":\"v-a57a2242#31/11\",\"4949\":\"v-a57a2242#31/12\",\"4950\":\"v-a57a2242#31/13\",\"4951\":\"v-a57a2242#31/14\",\"4952\":\"v-a57a2242#31/15\",\"4953\":\"v-a57a2242#31/16\",\"4954\":\"v-a57a2242#31/17\",\"4955\":\"v-a57a2242#31/18\",\"4956\":\"v-a57a2242#31/19\",\"4957\":\"v-a57a2242#31/20\",\"4958\":\"v-a57a2242#31/21\",\"4959\":\"v-a57a2242#31/22\",\"4960\":\"v-a57a2242#31/23\",\"4961\":\"v-a57a2242#31/24\",\"4962\":\"v-a57a2242#31/25\",\"4963\":\"v-a57a2242#31/26\",\"4964\":\"v-a57a2242#31/27\",\"4965\":\"v-a57a2242#31/28\",\"4966\":\"v-a57a2242#31/29\",\"4967\":\"v-a57a2242#31/30\",\"4968\":\"v-a57a2242#31/31\",\"4969\":\"v-a57a2242#31/32\",\"4970\":\"v-a57a2242#31/33\",\"4971\":\"v-a57a2242#31/34\",\"4972\":\"v-a57a2242#31/35\",\"4973\":\"v-a57a2242#31/36\",\"4974\":\"v-a57a2242#31/37\",\"4975\":\"v-a57a2242#31/38\",\"4976\":\"v-a57a2242#31/39\",\"4977\":\"v-a57a2242#31/40\",\"4978\":\"v-a57a2242#31/41\",\"4979\":\"v-a57a2242#32\",\"4980\":\"v-a57a2242#32/42\",\"4981\":\"v-a57a2242#32/43\",\"4982\":\"v-a57a2242#32/44\",\"4983\":\"v-a57a2242#32/45\",\"4984\":\"v-a57a2242#32/46\",\"4985\":\"v-a57a2242#32/47\",\"4986\":\"v-a57a2242#32/48\",\"4987\":\"v-a57a2242#33\",\"4988\":\"v-a57a2242#33/0\",\"4989\":\"v-a57a2242#33/1\",\"4990\":\"v-a57a2242#33/2\",\"4991\":\"v-a57a2242#33/3\",\"4992\":\"v-a57a2242#33/4\",\"4993\":\"v-a57a2242#33/5\",\"4994\":\"v-44a72397\",\"4995\":\"v-44a72397#0/0\",\"4996\":\"v-44a72397#1\",\"4997\":\"v-44a72397#1/0\",\"4998\":\"v-44a72397#1/1\",\"4999\":\"v-44a72397#1/2\",\"5000\":\"v-44a72397#1/3\",\"5001\":\"v-44a72397#1/4\",\"5002\":\"v-44a72397#1/5\",\"5003\":\"v-44a72397#1/6\",\"5004\":\"v-44a72397#1/7\",\"5005\":\"v-44a72397#1/8\",\"5006\":\"v-44a72397#1/9\",\"5007\":\"v-44a72397#1/10\",\"5008\":\"v-44a72397#1/11\",\"5009\":\"v-44a72397#1/12\",\"5010\":\"v-44a72397#2\",\"5011\":\"v-44a72397#2/13\",\"5012\":\"v-44a72397#2/14\",\"5013\":\"v-44a72397#3\",\"5014\":\"v-44a72397#3/0\",\"5015\":\"v-44a72397#3/1\",\"5016\":\"v-44a72397#3/2\",\"5017\":\"v-44a72397#3/3\",\"5018\":\"v-44a72397#4\",\"5019\":\"v-44a72397#4/4\",\"5020\":\"v-44a72397#4/5\",\"5021\":\"v-44a72397#5\",\"5022\":\"v-44a72397#5/6\",\"5023\":\"v-44a72397#5/7\",\"5024\":\"v-44a72397#5/8\",\"5025\":\"v-44a72397#5/9\",\"5026\":\"v-44a72397#5/10\",\"5027\":\"v-44a72397#5/11\",\"5028\":\"v-44a72397#5/12\",\"5029\":\"v-44a72397#5/13\",\"5030\":\"v-44a72397#5/14\",\"5031\":\"v-44a72397#5/15\",\"5032\":\"v-44a72397#5/16\",\"5033\":\"v-44a72397#6\",\"5034\":\"v-44a72397#6/0\",\"5035\":\"v-44a72397#6/1\",\"5036\":\"v-44a72397#6/2\",\"5037\":\"v-44a72397#6/3\",\"5038\":\"v-44a72397#6/4\",\"5039\":\"v-44a72397#6/5\",\"5040\":\"v-44a72397#6/6\",\"5041\":\"v-44a72397#6/7\",\"5042\":\"v-44a72397#6/8\",\"5043\":\"v-44a72397#6/9\",\"5044\":\"v-44a72397#6/10\",\"5045\":\"v-44a72397#6/11\",\"5046\":\"v-44a72397#6/12\",\"5047\":\"v-44a72397#6/13\",\"5048\":\"v-44a72397#6/14\",\"5049\":\"v-44a72397#6/15\",\"5050\":\"v-44a72397#6/16\",\"5051\":\"v-44a72397#6/17\",\"5052\":\"v-44a72397#6/18\",\"5053\":\"v-44a72397#6/19\",\"5054\":\"v-44a72397#6/20\",\"5055\":\"v-44a72397#6/21\",\"5056\":\"v-44a72397#7\",\"5057\":\"v-44a72397#7/22\",\"5058\":\"v-44a72397#7/23\",\"5059\":\"v-44a72397#7/24\",\"5060\":\"v-44a72397#7/25\",\"5061\":\"v-44a72397#7/26\",\"5062\":\"v-44a72397#7/27\",\"5063\":\"v-44a72397#7/28\",\"5064\":\"v-44a72397#7/29\",\"5065\":\"v-44a72397#7/30\",\"5066\":\"v-44a72397#8\",\"5067\":\"v-44a72397#8/0\",\"5068\":\"v-44a72397#8/1\",\"5069\":\"v-44a72397#9\",\"5070\":\"v-44a72397#9/0\",\"5071\":\"v-44a72397#9/1\",\"5072\":\"v-44a72397#9/2\",\"5073\":\"v-44a72397#9/3\",\"5074\":\"v-44a72397#9/4\",\"5075\":\"v-44a72397#9/5\",\"5076\":\"v-44a72397#9/6\",\"5077\":\"v-44a72397#9/7\",\"5078\":\"v-44a72397#9/8\",\"5079\":\"v-44a72397#9/9\",\"5080\":\"v-44a72397#9/10\",\"5081\":\"v-44a72397#9/11\",\"5082\":\"v-44a72397#9/12\",\"5083\":\"v-44a72397#9/13\",\"5084\":\"v-44a72397#9/14\",\"5085\":\"v-44a72397#9/15\",\"5086\":\"v-44a72397#9/16\",\"5087\":\"v-44a72397#10\",\"5088\":\"v-44a72397#10/0\",\"5089\":\"v-44a72397#10/1\",\"5090\":\"v-44a72397#10/2\",\"5091\":\"v-44a72397#10/3\",\"5092\":\"v-44a72397#10/4\",\"5093\":\"v-44a72397#10/5\",\"5094\":\"v-44a72397#10/6\",\"5095\":\"v-44a72397#11\",\"5096\":\"v-44a72397#11/0\",\"5097\":\"v-44a72397#11/1\",\"5098\":\"v-44a72397#11/2\",\"5099\":\"v-44a72397#11/3\",\"5100\":\"v-44a72397#11/4\",\"5101\":\"v-44a72397#11/5\",\"5102\":\"v-44a72397#11/6\",\"5103\":\"v-44a72397#11/7\",\"5104\":\"v-44a72397#11/8\",\"5105\":\"v-44a72397#11/9\",\"5106\":\"v-44a72397#11/10\",\"5107\":\"v-44a72397#11/11\",\"5108\":\"v-44a72397#11/12\",\"5109\":\"v-44a72397#11/13\",\"5110\":\"v-44a72397#11/14\",\"5111\":\"v-44a72397#11/15\",\"5112\":\"v-44a72397#11/16\",\"5113\":\"v-44a72397#11/17\",\"5114\":\"v-44a72397#11/18\",\"5115\":\"v-44a72397#11/19\",\"5116\":\"v-44a72397#12\",\"5117\":\"v-44a72397#12/20\",\"5118\":\"v-44a72397#12/21\",\"5119\":\"v-44a72397#12/22\",\"5120\":\"v-44a72397#12/23\",\"5121\":\"v-44a72397#12/24\",\"5122\":\"v-44a72397#12/25\",\"5123\":\"v-44a72397#12/26\",\"5124\":\"v-44a72397#12/27\",\"5125\":\"v-44a72397#12/28\",\"5126\":\"v-44a72397#12/29\",\"5127\":\"v-44a72397#12/30\",\"5128\":\"v-44a72397#12/31\",\"5129\":\"v-44a72397#12/32\",\"5130\":\"v-44a72397#12/33\",\"5131\":\"v-44a72397#12/34\",\"5132\":\"v-44a72397#12/35\",\"5133\":\"v-44a72397#12/36\",\"5134\":\"v-44a72397#12/37\",\"5135\":\"v-44a72397#12/38\",\"5136\":\"v-44a72397#12/39\",\"5137\":\"v-44a72397#12/40\",\"5138\":\"v-44a72397#12/41\",\"5139\":\"v-44a72397#12/42\",\"5140\":\"v-44a72397#12/43\",\"5141\":\"v-44a72397#12/44\",\"5142\":\"v-44a72397#12/45\",\"5143\":\"v-44a72397#12/46\",\"5144\":\"v-44a72397#12/47\",\"5145\":\"v-44a72397#12/48\",\"5146\":\"v-44a72397#13\",\"5147\":\"v-44a72397#13/0\",\"5148\":\"v-44a72397#13/1\",\"5149\":\"v-44a72397#13/2\",\"5150\":\"v-44a72397#13/3\",\"5151\":\"v-44a72397#13/4\",\"5152\":\"v-44a72397#13/5\",\"5153\":\"v-44a72397#13/6\",\"5154\":\"v-44a72397#13/7\",\"5155\":\"v-44a72397#13/8\",\"5156\":\"v-44a72397#13/9\",\"5157\":\"v-44a72397#13/10\",\"5158\":\"v-44a72397#13/11\",\"5159\":\"v-44a72397#13/12\",\"5160\":\"v-44a72397#13/13\",\"5161\":\"v-44a72397#13/14\",\"5162\":\"v-44a72397#13/15\",\"5163\":\"v-44a72397#13/16\",\"5164\":\"v-44a72397#13/17\",\"5165\":\"v-44a72397#13/18\",\"5166\":\"v-44a72397#13/19\",\"5167\":\"v-44a72397#13/20\",\"5168\":\"v-44a72397#13/21\",\"5169\":\"v-44a72397#13/22\",\"5170\":\"v-44a72397#13/23\",\"5171\":\"v-44a72397#13/24\",\"5172\":\"v-44a72397#13/25\",\"5173\":\"v-44a72397#13/26\",\"5174\":\"v-44a72397#13/27\",\"5175\":\"v-44a72397#13/28\",\"5176\":\"v-44a72397#13/29\",\"5177\":\"v-44a72397#13/30\",\"5178\":\"v-44a72397#13/31\",\"5179\":\"v-44a72397#13/32\",\"5180\":\"v-44a72397#13/33\",\"5181\":\"v-44a72397#14\",\"5182\":\"v-44a72397#14/0\",\"5183\":\"v-44a72397#14/1\",\"5184\":\"v-44a72397#14/2\",\"5185\":\"v-44a72397#15\",\"5186\":\"v-44a72397#15/0\",\"5187\":\"v-44a72397#15/1\",\"5188\":\"v-44a72397#15/2\",\"5189\":\"v-44a72397#15/3\",\"5190\":\"v-44a72397#15/4\",\"5191\":\"v-44a72397#16\",\"5192\":\"v-44a72397#16/5\",\"5193\":\"v-44a72397#16/6\",\"5194\":\"v-44a72397#16/7\",\"5195\":\"v-44a72397#16/8\",\"5196\":\"v-44a72397#16/9\",\"5197\":\"v-44a72397#16/10\",\"5198\":\"v-44a72397#16/11\",\"5199\":\"v-44a72397#16/12\",\"5200\":\"v-44a72397#16/13\",\"5201\":\"v-44a72397#16/14\",\"5202\":\"v-44a72397#17\",\"5203\":\"v-44a72397#17/0\",\"5204\":\"v-44a72397#17/1\",\"5205\":\"v-44a72397#17/2\",\"5206\":\"v-44a72397#17/3\",\"5207\":\"v-44a72397#18\",\"5208\":\"v-44a72397#18/0\",\"5209\":\"v-44a72397#18/1\",\"5210\":\"v-44a72397#18/2\",\"5211\":\"v-44a72397#18/3\",\"5212\":\"v-44a72397#18/4\",\"5213\":\"v-44a72397#18/5\",\"5214\":\"v-44a72397#18/6\",\"5215\":\"v-44a72397#19\",\"5216\":\"v-44a72397#19/0\",\"5217\":\"v-44a72397#19/1\",\"5218\":\"v-44a72397#19/2\",\"5219\":\"v-44a72397#19/3\",\"5220\":\"v-44a72397#19/4\",\"5221\":\"v-44a72397#19/5\",\"5222\":\"v-44a72397#19/6\",\"5223\":\"v-44a72397#19/7\",\"5224\":\"v-44a72397#19/8\",\"5225\":\"v-44a72397#19/9\",\"5226\":\"v-44a72397#19/10\",\"5227\":\"v-44a72397#19/11\",\"5228\":\"v-44a72397#19/12\",\"5229\":\"v-44a72397#19/13\",\"5230\":\"v-44a72397#19/14\",\"5231\":\"v-44a72397#20\",\"5232\":\"v-44a72397#20/0\",\"5233\":\"v-44a72397#20/1\",\"5234\":\"v-44a72397#20/2\",\"5235\":\"v-44a72397#20/3\",\"5236\":\"v-44a72397#20/4\",\"5237\":\"v-44a72397#21\",\"5238\":\"v-44a72397#21/5\",\"5239\":\"v-44a72397#21/6\",\"5240\":\"v-44a72397#21/7\",\"5241\":\"v-44a72397#21/8\",\"5242\":\"v-44a72397#21/9\",\"5243\":\"v-44a72397#21/10\",\"5244\":\"v-44a72397#21/11\",\"5245\":\"v-44a72397#21/12\",\"5246\":\"v-44a72397#21/13\",\"5247\":\"v-44a72397#21/14\",\"5248\":\"v-de9d01d8\",\"5249\":\"v-de9d01d8#0/0\",\"5250\":\"v-de9d01d8#1\",\"5251\":\"v-de9d01d8#2\",\"5252\":\"v-de9d01d8#2/0\",\"5253\":\"v-de9d01d8#2/1\",\"5254\":\"v-de9d01d8#2/2\",\"5255\":\"v-de9d01d8#2/3\",\"5256\":\"v-de9d01d8#2/4\",\"5257\":\"v-de9d01d8#2/5\",\"5258\":\"v-de9d01d8#2/6\",\"5259\":\"v-de9d01d8#2/7\",\"5260\":\"v-de9d01d8#2/8\",\"5261\":\"v-de9d01d8#2/9\",\"5262\":\"v-de9d01d8#2/10\",\"5263\":\"v-de9d01d8#3\",\"5264\":\"v-de9d01d8#3/11\",\"5265\":\"v-de9d01d8#3/12\",\"5266\":\"v-de9d01d8#3/13\",\"5267\":\"v-de9d01d8#3/14\",\"5268\":\"v-de9d01d8#3/15\",\"5269\":\"v-de9d01d8#3/16\",\"5270\":\"v-de9d01d8#3/17\",\"5271\":\"v-de9d01d8#3/18\",\"5272\":\"v-de9d01d8#3/19\",\"5273\":\"v-de9d01d8#3/20\",\"5274\":\"v-de9d01d8#3/21\",\"5275\":\"v-de9d01d8#3/22\",\"5276\":\"v-de9d01d8#3/23\",\"5277\":\"v-de9d01d8#3/24\",\"5278\":\"v-de9d01d8#3/25\",\"5279\":\"v-de9d01d8#3/26\",\"5280\":\"v-de9d01d8#3/27\",\"5281\":\"v-de9d01d8#3/28\",\"5282\":\"v-de9d01d8#3/29\",\"5283\":\"v-de9d01d8#4\",\"5284\":\"v-de9d01d8#5\",\"5285\":\"v-de9d01d8#5/30\",\"5286\":\"v-de9d01d8#5/31\",\"5287\":\"v-de9d01d8#5/32\",\"5288\":\"v-de9d01d8#6\",\"5289\":\"v-de9d01d8#6/33\",\"5290\":\"v-de9d01d8#6/34\",\"5291\":\"v-de9d01d8#6/35\",\"5292\":\"v-de9d01d8#6/36\",\"5293\":\"v-de9d01d8#6/37\",\"5294\":\"v-de9d01d8#6/38\",\"5295\":\"v-de9d01d8#6/39\",\"5296\":\"v-de9d01d8#6/40\",\"5297\":\"v-de9d01d8#6/41\",\"5298\":\"v-de9d01d8#6/42\",\"5299\":\"v-de9d01d8#7\",\"5300\":\"v-de9d01d8#7/0\",\"5301\":\"v-de9d01d8#7/1\",\"5302\":\"v-de9d01d8#7/2\",\"5303\":\"v-de9d01d8#7/3\",\"5304\":\"v-de9d01d8#7/4\",\"5305\":\"v-de9d01d8#7/5\",\"5306\":\"v-de9d01d8#7/6\",\"5307\":\"v-de9d01d8#7/7\",\"5308\":\"v-de9d01d8#8\",\"5309\":\"v-de9d01d8#8/0\",\"5310\":\"v-de9d01d8#8/1\",\"5311\":\"v-de9d01d8#8/2\",\"5312\":\"v-de9d01d8#8/3\",\"5313\":\"v-de9d01d8#8/4\",\"5314\":\"v-de9d01d8#8/5\",\"5315\":\"v-de9d01d8#8/6\",\"5316\":\"v-de9d01d8#8/7\",\"5317\":\"v-de9d01d8#8/8\",\"5318\":\"v-de9d01d8#8/9\",\"5319\":\"v-de9d01d8#8/10\",\"5320\":\"v-de9d01d8#8/11\",\"5321\":\"v-de9d01d8#8/12\",\"5322\":\"v-de9d01d8#8/13\",\"5323\":\"v-de9d01d8#8/14\",\"5324\":\"v-de9d01d8#8/15\",\"5325\":\"v-de9d01d8#8/16\",\"5326\":\"v-de9d01d8#8/17\",\"5327\":\"v-de9d01d8#8/18\",\"5328\":\"v-de9d01d8#8/19\",\"5329\":\"v-de9d01d8#8/20\",\"5330\":\"v-de9d01d8#9\",\"5331\":\"v-de9d01d8#10\",\"5332\":\"v-de9d01d8#10/0\",\"5333\":\"v-de9d01d8#10/1\",\"5334\":\"v-de9d01d8#10/2\",\"5335\":\"v-de9d01d8#10/3\",\"5336\":\"v-de9d01d8#10/4\",\"5337\":\"v-de9d01d8#10/5\",\"5338\":\"v-de9d01d8#11\",\"5339\":\"v-de9d01d8#11/0\",\"5340\":\"v-de9d01d8#11/1\",\"5341\":\"v-de9d01d8#11/2\",\"5342\":\"v-de9d01d8#11/3\",\"5343\":\"v-de9d01d8#12\",\"5344\":\"v-de9d01d8#12/4\",\"5345\":\"v-de9d01d8#12/5\",\"5346\":\"v-de9d01d8#12/6\",\"5347\":\"v-de9d01d8#12/7\",\"5348\":\"v-de9d01d8#12/8\",\"5349\":\"v-de9d01d8#12/9\",\"5350\":\"v-de9d01d8#12/10\",\"5351\":\"v-de9d01d8#13\",\"5352\":\"v-de9d01d8#13/0\",\"5353\":\"v-de9d01d8#13/1\",\"5354\":\"v-de9d01d8#13/2\",\"5355\":\"v-de9d01d8#13/3\",\"5356\":\"v-de9d01d8#13/4\",\"5357\":\"v-de9d01d8#14\",\"5358\":\"v-de9d01d8#15\",\"5359\":\"v-de9d01d8#15/0\",\"5360\":\"v-de9d01d8#15/1\",\"5361\":\"v-de9d01d8#15/2\",\"5362\":\"v-de9d01d8#15/3\",\"5363\":\"v-de9d01d8#15/4\",\"5364\":\"v-de9d01d8#15/5\",\"5365\":\"v-de9d01d8#15/6\",\"5366\":\"v-de9d01d8#15/7\",\"5367\":\"v-de9d01d8#15/8\",\"5368\":\"v-de9d01d8#15/9\",\"5369\":\"v-de9d01d8#15/10\",\"5370\":\"v-de9d01d8#15/11\",\"5371\":\"v-de9d01d8#15/12\",\"5372\":\"v-de9d01d8#16\",\"5373\":\"v-de9d01d8#16/13\",\"5374\":\"v-de9d01d8#16/14\",\"5375\":\"v-de9d01d8#16/15\",\"5376\":\"v-de9d01d8#16/16\",\"5377\":\"v-de9d01d8#16/17\",\"5378\":\"v-de9d01d8#16/18\",\"5379\":\"v-de9d01d8#16/19\",\"5380\":\"v-de9d01d8#16/20\",\"5381\":\"v-de9d01d8#16/21\",\"5382\":\"v-de9d01d8#16/22\",\"5383\":\"v-de9d01d8#16/23\",\"5384\":\"v-de9d01d8#16/24\",\"5385\":\"v-de9d01d8#16/25\",\"5386\":\"v-de9d01d8#16/26\",\"5387\":\"v-de9d01d8#16/27\",\"5388\":\"v-de9d01d8#16/28\",\"5389\":\"v-de9d01d8#16/29\",\"5390\":\"v-de9d01d8#16/30\",\"5391\":\"v-de9d01d8#16/31\",\"5392\":\"v-de9d01d8#16/32\",\"5393\":\"v-de9d01d8#16/33\",\"5394\":\"v-de9d01d8#16/34\",\"5395\":\"v-de9d01d8#16/35\",\"5396\":\"v-de9d01d8#16/36\",\"5397\":\"v-de9d01d8#16/37\",\"5398\":\"v-de9d01d8#16/38\",\"5399\":\"v-de9d01d8#17\",\"5400\":\"v-de9d01d8#17/0\",\"5401\":\"v-de9d01d8#17/1\",\"5402\":\"v-de9d01d8#17/2\",\"5403\":\"v-de9d01d8#17/3\",\"5404\":\"v-de9d01d8#18\",\"5405\":\"v-de9d01d8#18/0\",\"5406\":\"v-de9d01d8#18/1\",\"5407\":\"v-de9d01d8#18/2\",\"5408\":\"v-de9d01d8#18/3\",\"5409\":\"v-de9d01d8#18/4\",\"5410\":\"v-de9d01d8#18/5\",\"5411\":\"v-de9d01d8#18/6\",\"5412\":\"v-de9d01d8#18/7\",\"5413\":\"v-de9d01d8#18/8\",\"5414\":\"v-de9d01d8#19\",\"5415\":\"v-de9d01d8#20\",\"5416\":\"v-de9d01d8#20/0\",\"5417\":\"v-de9d01d8#21\",\"5418\":\"v-de9d01d8#21/1\",\"5419\":\"v-de9d01d8#21/2\",\"5420\":\"v-de9d01d8#21/3\",\"5421\":\"v-de9d01d8#21/4\",\"5422\":\"v-de9d01d8#21/5\",\"5423\":\"v-de9d01d8#21/6\",\"5424\":\"v-de9d01d8#21/7\",\"5425\":\"v-de9d01d8#21/8\",\"5426\":\"v-de9d01d8#21/9\",\"5427\":\"v-de9d01d8#21/10\",\"5428\":\"v-de9d01d8#21/11\",\"5429\":\"v-de9d01d8#21/12\",\"5430\":\"v-de9d01d8#21/13\",\"5431\":\"v-de9d01d8#21/14\",\"5432\":\"v-de9d01d8#21/15\",\"5433\":\"v-de9d01d8#21/16\",\"5434\":\"v-de9d01d8#21/17\",\"5435\":\"v-de9d01d8#21/18\",\"5436\":\"v-de9d01d8#21/19\",\"5437\":\"v-de9d01d8#21/20\",\"5438\":\"v-de9d01d8#21/21\",\"5439\":\"v-de9d01d8#21/22\",\"5440\":\"v-de9d01d8#21/23\",\"5441\":\"v-de9d01d8#22\",\"5442\":\"v-de9d01d8#22/24\",\"5443\":\"v-de9d01d8#22/25\",\"5444\":\"v-de9d01d8#22/26\",\"5445\":\"v-de9d01d8#22/27\",\"5446\":\"v-de9d01d8#22/28\",\"5447\":\"v-de9d01d8#22/29\",\"5448\":\"v-de9d01d8#22/30\",\"5449\":\"v-de9d01d8#23\",\"5450\":\"v-de9d01d8#23/31\",\"5451\":\"v-de9d01d8#23/32\",\"5452\":\"v-de9d01d8#24\",\"5453\":\"v-de9d01d8#24/33\",\"5454\":\"v-de9d01d8#24/34\",\"5455\":\"v-de9d01d8#24/35\",\"5456\":\"v-de9d01d8#24/36\",\"5457\":\"v-de9d01d8#24/37\",\"5458\":\"v-de9d01d8#24/38\",\"5459\":\"v-de9d01d8#24/39\",\"5460\":\"v-de9d01d8#24/40\",\"5461\":\"v-de9d01d8#24/41\",\"5462\":\"v-de9d01d8#24/42\",\"5463\":\"v-de9d01d8#24/43\",\"5464\":\"v-de9d01d8#24/44\",\"5465\":\"v-de9d01d8#24/45\",\"5466\":\"v-de9d01d8#24/46\",\"5467\":\"v-de9d01d8#24/47\",\"5468\":\"v-de9d01d8#24/48\",\"5469\":\"v-de9d01d8#24/49\",\"5470\":\"v-de9d01d8#25\",\"5471\":\"v-de9d01d8#26\",\"5472\":\"v-de9d01d8#26/50\",\"5473\":\"v-de9d01d8#26/51\",\"5474\":\"v-de9d01d8#26/52\",\"5475\":\"v-de9d01d8#26/53\",\"5476\":\"v-de9d01d8#26/54\",\"5477\":\"v-de9d01d8#26/55\",\"5478\":\"v-de9d01d8#26/56\",\"5479\":\"v-de9d01d8#26/57\",\"5480\":\"v-de9d01d8#26/58\",\"5481\":\"v-de9d01d8#26/59\",\"5482\":\"v-de9d01d8#27\",\"5483\":\"v-de9d01d8#27/0\",\"5484\":\"v-de9d01d8#27/1\",\"5485\":\"v-de9d01d8#27/2\",\"5486\":\"v-de9d01d8#27/3\",\"5487\":\"v-de9d01d8#27/4\",\"5488\":\"v-de9d01d8#27/5\",\"5489\":\"v-de9d01d8#27/6\",\"5490\":\"v-de9d01d8#27/7\",\"5491\":\"v-de9d01d8#27/8\",\"5492\":\"v-de9d01d8#27/9\",\"5493\":\"v-de9d01d8#27/10\",\"5494\":\"v-de9d01d8#27/11\",\"5495\":\"v-de9d01d8#27/12\",\"5496\":\"v-de9d01d8#27/13\",\"5497\":\"v-de9d01d8#27/14\",\"5498\":\"v-de9d01d8#27/15\",\"5499\":\"v-de9d01d8#27/16\",\"5500\":\"v-de9d01d8#27/17\",\"5501\":\"v-de9d01d8#27/18\",\"5502\":\"v-de9d01d8#27/19\",\"5503\":\"v-de9d01d8#27/20\",\"5504\":\"v-de9d01d8#27/21\",\"5505\":\"v-de9d01d8#27/22\",\"5506\":\"v-de9d01d8#27/23\",\"5507\":\"v-de9d01d8#27/24\",\"5508\":\"v-de9d01d8#27/25\",\"5509\":\"v-de9d01d8#27/26\",\"5510\":\"v-de9d01d8#27/27\",\"5511\":\"v-de9d01d8#27/28\",\"5512\":\"v-de9d01d8#27/29\",\"5513\":\"v-de9d01d8#27/30\",\"5514\":\"v-de9d01d8#28\",\"5515\":\"v-de9d01d8#28/0\",\"5516\":\"v-de9d01d8#28/1\",\"5517\":\"v-de9d01d8#28/2\",\"5518\":\"v-de9d01d8#28/3\",\"5519\":\"v-de9d01d8#28/4\",\"5520\":\"v-de9d01d8#28/5\",\"5521\":\"v-de9d01d8#28/6\",\"5522\":\"v-de9d01d8#28/7\",\"5523\":\"v-de9d01d8#28/8\",\"5524\":\"v-de9d01d8#28/9\",\"5525\":\"v-de9d01d8#28/10\",\"5526\":\"v-de9d01d8#28/11\",\"5527\":\"v-de9d01d8#28/12\",\"5528\":\"v-de9d01d8#28/13\",\"5529\":\"v-de9d01d8#28/14\",\"5530\":\"v-de9d01d8#28/15\",\"5531\":\"v-de9d01d8#28/16\",\"5532\":\"v-de9d01d8#29\",\"5533\":\"v-de9d01d8#29/0\",\"5534\":\"v-de9d01d8#29/1\",\"5535\":\"v-de9d01d8#29/2\",\"5536\":\"v-de9d01d8#29/3\",\"5537\":\"v-de9d01d8#29/4\",\"5538\":\"v-de9d01d8#30\",\"5539\":\"v-de9d01d8#30/0\",\"5540\":\"v-de9d01d8#30/1\",\"5541\":\"v-de9d01d8#31\",\"5542\":\"v-de9d01d8#31/0\",\"5543\":\"v-de9d01d8#31/1\",\"5544\":\"v-de9d01d8#32\",\"5545\":\"v-de9d01d8#33\",\"5546\":\"v-de9d01d8#33/0\",\"5547\":\"v-de9d01d8#33/1\",\"5548\":\"v-de9d01d8#33/2\",\"5549\":\"v-de9d01d8#33/3\",\"5550\":\"v-de9d01d8#33/4\",\"5551\":\"v-de9d01d8#33/5\",\"5552\":\"v-de9d01d8#33/6\",\"5553\":\"v-de9d01d8#33/7\",\"5554\":\"v-de9d01d8#33/8\",\"5555\":\"v-de9d01d8#33/9\",\"5556\":\"v-de9d01d8#33/10\",\"5557\":\"v-de9d01d8#33/11\",\"5558\":\"v-de9d01d8#33/12\",\"5559\":\"v-de9d01d8#33/13\",\"5560\":\"v-de9d01d8#33/14\",\"5561\":\"v-de9d01d8#33/15\",\"5562\":\"v-de9d01d8#33/16\",\"5563\":\"v-de9d01d8#33/17\",\"5564\":\"v-de9d01d8#33/18\",\"5565\":\"v-de9d01d8#33/19\",\"5566\":\"v-de9d01d8#33/20\",\"5567\":\"v-de9d01d8#34\",\"5568\":\"v-de9d01d8#34/0\",\"5569\":\"v-de9d01d8#34/1\",\"5570\":\"v-de9d01d8#34/2\",\"5571\":\"v-de9d01d8#34/3\",\"5572\":\"v-de9d01d8#34/4\",\"5573\":\"v-de9d01d8#34/5\",\"5574\":\"v-de9d01d8#34/6\",\"5575\":\"v-de9d01d8#34/7\",\"5576\":\"v-de9d01d8#34/8\",\"5577\":\"v-de9d01d8#35\",\"5578\":\"v-de9d01d8#35/0\",\"5579\":\"v-de9d01d8#35/1\",\"5580\":\"v-de9d01d8#36\",\"5581\":\"v-de9d01d8#36/0\",\"5582\":\"v-de9d01d8#36/1\",\"5583\":\"v-c75e9552\",\"5584\":\"v-c75e9552#0/0\",\"5585\":\"v-c75e9552#1\",\"5586\":\"v-c75e9552#1/0\",\"5587\":\"v-c75e9552#1/1\",\"5588\":\"v-c75e9552#1/2\",\"5589\":\"v-c75e9552#2\",\"5590\":\"v-c75e9552#2/0\",\"5591\":\"v-c75e9552#3\",\"5592\":\"v-c75e9552#4\",\"5593\":\"v-c75e9552#4/0\",\"5594\":\"v-c75e9552#5\",\"5595\":\"v-c75e9552#5/0\",\"5596\":\"v-c75e9552#6\",\"5597\":\"v-c75e9552#6/0\",\"5598\":\"v-c75e9552#7\",\"5599\":\"v-c75e9552#7/0\",\"5600\":\"v-c75e9552#8\",\"5601\":\"v-c75e9552#8/0\",\"5602\":\"v-c75e9552#9\",\"5603\":\"v-c75e9552#9/0\",\"5604\":\"v-c75e9552#10\",\"5605\":\"v-c75e9552#10/0\",\"5606\":\"v-c75e9552#11\",\"5607\":\"v-c75e9552#11/0\",\"5608\":\"v-c75e9552#11/1\",\"5609\":\"v-c75e9552#11/2\",\"5610\":\"v-c75e9552#12\",\"5611\":\"v-c75e9552#12/0\",\"5612\":\"v-c75e9552#13\",\"5613\":\"v-c75e9552#13/0\",\"5614\":\"v-c75e9552#14\",\"5615\":\"v-c75e9552#14/0\",\"5616\":\"v-c75e9552#15\",\"5617\":\"v-c75e9552#15/0\",\"5618\":\"v-c75e9552#16\",\"5619\":\"v-c75e9552#16/0\",\"5620\":\"v-c75e9552#17\",\"5621\":\"v-c75e9552#17/0\",\"5622\":\"v-c75e9552#18\",\"5623\":\"v-c75e9552#18/0\",\"5624\":\"v-c75e9552#19\",\"5625\":\"v-c75e9552#19/0\",\"5626\":\"v-c75e9552#19/1\",\"5627\":\"v-c75e9552#19/2\",\"5628\":\"v-c75e9552#19/3\",\"5629\":\"v-c75e9552#19/4\",\"5630\":\"v-c75e9552#19/5\",\"5631\":\"v-c75e9552#19/6\",\"5632\":\"v-c75e9552#19/7\",\"5633\":\"v-c75e9552#20\",\"5634\":\"v-c75e9552#20/0\",\"5635\":\"v-c75e9552#21\",\"5636\":\"v-c75e9552#21/0\",\"5637\":\"v-c75e9552#22\",\"5638\":\"v-c75e9552#22/0\",\"5639\":\"v-c75e9552#23\",\"5640\":\"v-c75e9552#23/0\",\"5641\":\"v-c75e9552#24\",\"5642\":\"v-c75e9552#24/0\",\"5643\":\"v-c75e9552#25\",\"5644\":\"v-c75e9552#25/0\",\"5645\":\"v-c75e9552#26\",\"5646\":\"v-c75e9552#26/0\",\"5647\":\"v-c75e9552#27\",\"5648\":\"v-c75e9552#27/0\",\"5649\":\"v-c75e9552#27/1\",\"5650\":\"v-c75e9552#27/2\",\"5651\":\"v-c75e9552#27/3\",\"5652\":\"v-c75e9552#27/4\",\"5653\":\"v-c75e9552#27/5\",\"5654\":\"v-c75e9552#27/6\",\"5655\":\"v-c75e9552#27/7\",\"5656\":\"v-c75e9552#27/8\",\"5657\":\"v-c75e9552#27/9\",\"5658\":\"v-c75e9552#27/10\",\"5659\":\"v-c75e9552#28\",\"5660\":\"v-c75e9552#28/0\",\"5661\":\"v-c75e9552#28/1\",\"5662\":\"v-c75e9552#28/2\",\"5663\":\"v-c75e9552#29\",\"5664\":\"v-c75e9552#29/0\",\"5665\":\"v-c75e9552#30\",\"5666\":\"v-c75e9552#30/0\",\"5667\":\"v-c75e9552#31\",\"5668\":\"v-c75e9552#31/0\",\"5669\":\"v-c75e9552#32\",\"5670\":\"v-c75e9552#32/0\",\"5671\":\"v-c75e9552#33\",\"5672\":\"v-c75e9552#33/0\",\"5673\":\"v-c75e9552#33/1\",\"5674\":\"v-c75e9552#34\",\"5675\":\"v-c75e9552#34/0\",\"5676\":\"v-c75e9552#35\",\"5677\":\"v-c75e9552#35/0\",\"5678\":\"v-c75e9552#36\",\"5679\":\"v-c75e9552#36/0\",\"5680\":\"v-c75e9552#36/1\",\"5681\":\"v-c75e9552#37\",\"5682\":\"v-c75e9552#37/0\",\"5683\":\"v-c75e9552#37/1\",\"5684\":\"v-c75e9552#37/2\",\"5685\":\"v-c75e9552#37/3\",\"5686\":\"v-c75e9552#38\",\"5687\":\"v-c75e9552#38/0\",\"5688\":\"v-c75e9552#38/1\",\"5689\":\"v-c75e9552#39\",\"5690\":\"v-c75e9552#39/0\",\"5691\":\"v-c75e9552#40\",\"5692\":\"v-c75e9552#40/0\",\"5693\":\"v-c75e9552#40/1\",\"5694\":\"v-c75e9552#40/2\",\"5695\":\"v-c75e9552#40/3\",\"5696\":\"v-c75e9552#40/4\",\"5697\":\"v-c75e9552#40/5\",\"5698\":\"v-c75e9552#40/6\",\"5699\":\"v-c75e9552#41\",\"5700\":\"v-c75e9552#41/0\",\"5701\":\"v-c75e9552#41/1\",\"5702\":\"v-c75e9552#42\",\"5703\":\"v-c75e9552#42/0\",\"5704\":\"v-c75e9552#42/1\",\"5705\":\"v-c75e9552#42/2\",\"5706\":\"v-c75e9552#42/3\",\"5707\":\"v-c75e9552#43\",\"5708\":\"v-c75e9552#43/0\",\"5709\":\"v-c75e9552#43/1\",\"5710\":\"v-c75e9552#43/2\",\"5711\":\"v-c75e9552#43/3\",\"5712\":\"v-c75e9552#43/4\",\"5713\":\"v-c75e9552#43/5\",\"5714\":\"v-c75e9552#44\",\"5715\":\"v-c75e9552#44/0\",\"5716\":\"v-c75e9552#44/1\",\"5717\":\"v-c75e9552#44/2\",\"5718\":\"v-c75e9552#44/3\",\"5719\":\"v-c75e9552#44/4\",\"5720\":\"v-c75e9552#45\",\"5721\":\"v-c75e9552#45/0\",\"5722\":\"v-c75e9552#45/1\",\"5723\":\"v-c75e9552#45/2\",\"5724\":\"v-c75e9552#45/3\",\"5725\":\"v-c75e9552#46\",\"5726\":\"v-c75e9552#46/0\",\"5727\":\"v-c75e9552#46/1\",\"5728\":\"v-c75e9552#46/2\",\"5729\":\"v-c75e9552#46/3\",\"5730\":\"v-c75e9552#46/4\",\"5731\":\"v-c75e9552#46/5\",\"5732\":\"v-c75e9552#47\",\"5733\":\"v-c75e9552#47/0\",\"5734\":\"v-c75e9552#47/1\",\"5735\":\"v-c75e9552#48\",\"5736\":\"v-c75e9552#48/0\",\"5737\":\"v-c75e9552#49\",\"5738\":\"v-c75e9552#49/0\",\"5739\":\"v-c75e9552#49/1\",\"5740\":\"v-c75e9552#49/2\",\"5741\":\"v-c75e9552#49/3\",\"5742\":\"v-c75e9552#50\",\"5743\":\"v-c75e9552#50/0\",\"5744\":\"v-c75e9552#51\",\"5745\":\"v-c75e9552#51/0\",\"5746\":\"v-c75e9552#52\",\"5747\":\"v-c75e9552#52/0\",\"5748\":\"v-a0822604\",\"5749\":\"v-a0822604#0/0\",\"5750\":\"v-a0822604#1\",\"5751\":\"v-a0822604#2\",\"5752\":\"v-a0822604#2/0\",\"5753\":\"v-a0822604#2/1\",\"5754\":\"v-a0822604#2/2\",\"5755\":\"v-a0822604#2/3\",\"5756\":\"v-a0822604#2/4\",\"5757\":\"v-a0822604#2/5\",\"5758\":\"v-a0822604#2/6\",\"5759\":\"v-a0822604#2/7\",\"5760\":\"v-a0822604#2/8\",\"5761\":\"v-a0822604#2/9\",\"5762\":\"v-a0822604#3\",\"5763\":\"v-a0822604#3/10\",\"5764\":\"v-a0822604#3/11\",\"5765\":\"v-a0822604#3/12\",\"5766\":\"v-a0822604#3/13\",\"5767\":\"v-a0822604#4\",\"5768\":\"v-a0822604#4/14\",\"5769\":\"v-a0822604#4/15\",\"5770\":\"v-a0822604#4/16\",\"5771\":\"v-a0822604#4/17\",\"5772\":\"v-a0822604#4/18\",\"5773\":\"v-a0822604#4/19\",\"5774\":\"v-a0822604#4/20\",\"5775\":\"v-a0822604#4/21\",\"5776\":\"v-a0822604#4/22\",\"5777\":\"v-a0822604#5\",\"5778\":\"v-a0822604#5/23\",\"5779\":\"v-a0822604#6\",\"5780\":\"v-a0822604#6/0\",\"5781\":\"v-a0822604#6/1\",\"5782\":\"v-a0822604#6/2\",\"5783\":\"v-a0822604#7\",\"5784\":\"v-a0822604#7/3\",\"5785\":\"v-a0822604#7/4\",\"5786\":\"v-a0822604#7/5\",\"5787\":\"v-a0822604#8\",\"5788\":\"v-a0822604#8/6\",\"5789\":\"v-a0822604#8/7\",\"5790\":\"v-a0822604#8/8\",\"5791\":\"v-a0822604#9\",\"5792\":\"v-a0822604#9/9\",\"5793\":\"v-a0822604#9/10\",\"5794\":\"v-a0822604#9/11\",\"5795\":\"v-a0822604#10\",\"5796\":\"v-a0822604#10/12\",\"5797\":\"v-a0822604#10/13\",\"5798\":\"v-a0822604#10/14\",\"5799\":\"v-a0822604#11\",\"5800\":\"v-a0822604#11/15\",\"5801\":\"v-a0822604#11/16\",\"5802\":\"v-a0822604#11/17\",\"5803\":\"v-a0822604#11/18\",\"5804\":\"v-a0822604#11/19\",\"5805\":\"v-a0822604#11/20\",\"5806\":\"v-a0822604#12\",\"5807\":\"v-a0822604#12/21\",\"5808\":\"v-a0822604#12/22\",\"5809\":\"v-a0822604#12/23\",\"5810\":\"v-a0822604#12/24\",\"5811\":\"v-a0822604#12/25\",\"5812\":\"v-a0822604#12/26\",\"5813\":\"v-a0822604#12/27\",\"5814\":\"v-a0822604#12/28\",\"5815\":\"v-a0822604#12/29\",\"5816\":\"v-8ded9d8e\",\"5817\":\"v-8ded9d8e#0/0\",\"5818\":\"v-8ded9d8e#1\",\"5819\":\"v-8ded9d8e#1/0\",\"5820\":\"v-8ded9d8e#1/1\",\"5821\":\"v-8ded9d8e#1/2\",\"5822\":\"v-8ded9d8e#1/3\",\"5823\":\"v-8ded9d8e#2\",\"5824\":\"v-8ded9d8e#2/0\",\"5825\":\"v-8ded9d8e#2/1\",\"5826\":\"v-8ded9d8e#2/2\",\"5827\":\"v-8ded9d8e#2/3\",\"5828\":\"v-8ded9d8e#2/4\",\"5829\":\"v-8ded9d8e#2/5\",\"5830\":\"v-8ded9d8e#2/6\",\"5831\":\"v-8ded9d8e#2/7\",\"5832\":\"v-8ded9d8e#3\",\"5833\":\"v-8ded9d8e#3/0\",\"5834\":\"v-8ded9d8e#3/1\",\"5835\":\"v-8ded9d8e#3/2\",\"5836\":\"v-8ded9d8e#3/3\",\"5837\":\"v-8ded9d8e#3/4\",\"5838\":\"v-8ded9d8e#3/5\",\"5839\":\"v-8ded9d8e#3/6\",\"5840\":\"v-8ded9d8e#3/7\",\"5841\":\"v-8ded9d8e#3/8\",\"5842\":\"v-8ded9d8e#3/9\",\"5843\":\"v-8ded9d8e#4\",\"5844\":\"v-8ded9d8e#4/0\",\"5845\":\"v-8ded9d8e#4/1\",\"5846\":\"v-8ded9d8e#4/2\",\"5847\":\"v-8ded9d8e#5\",\"5848\":\"v-8ded9d8e#5/0\",\"5849\":\"v-8ded9d8e#5/1\",\"5850\":\"v-8ded9d8e#5/2\",\"5851\":\"v-8ded9d8e#5/3\",\"5852\":\"v-8ded9d8e#5/4\",\"5853\":\"v-8ded9d8e#5/5\",\"5854\":\"v-8ded9d8e#5/6\",\"5855\":\"v-8ded9d8e#5/7\",\"5856\":\"v-8ded9d8e#5/8\",\"5857\":\"v-8ded9d8e#5/9\",\"5858\":\"v-8ded9d8e#5/10\",\"5859\":\"v-8ded9d8e#5/11\",\"5860\":\"v-8ded9d8e#5/12\",\"5861\":\"v-8ded9d8e#5/13\",\"5862\":\"v-8ded9d8e#5/14\",\"5863\":\"v-8ded9d8e#5/15\",\"5864\":\"v-8ded9d8e#5/16\",\"5865\":\"v-8ded9d8e#5/17\",\"5866\":\"v-8ded9d8e#5/18\",\"5867\":\"v-8ded9d8e#5/19\",\"5868\":\"v-8ded9d8e#5/20\",\"5869\":\"v-8ded9d8e#5/21\",\"5870\":\"v-8ded9d8e#5/22\",\"5871\":\"v-8ded9d8e#5/23\",\"5872\":\"v-8ded9d8e#5/24\",\"5873\":\"v-8ded9d8e#5/25\",\"5874\":\"v-8ded9d8e#5/26\",\"5875\":\"v-8ded9d8e#5/27\",\"5876\":\"v-8ded9d8e#5/28\",\"5877\":\"v-8ded9d8e#5/29\",\"5878\":\"v-8ded9d8e#5/30\",\"5879\":\"v-8ded9d8e#5/31\",\"5880\":\"v-8ded9d8e#5/32\",\"5881\":\"v-8ded9d8e#5/33\",\"5882\":\"v-8ded9d8e#5/34\",\"5883\":\"v-8ded9d8e#5/35\",\"5884\":\"v-8ded9d8e#5/36\",\"5885\":\"v-8ded9d8e#5/37\",\"5886\":\"v-8ded9d8e#5/38\",\"5887\":\"v-8ded9d8e#5/39\",\"5888\":\"v-8ded9d8e#5/40\",\"5889\":\"v-8ded9d8e#6\",\"5890\":\"v-8ded9d8e#6/41\",\"5891\":\"v-8ded9d8e#6/42\",\"5892\":\"v-8ded9d8e#6/43\",\"5893\":\"v-8ded9d8e#6/44\",\"5894\":\"v-8ded9d8e#6/45\",\"5895\":\"v-8ded9d8e#6/46\",\"5896\":\"v-8ded9d8e#6/47\",\"5897\":\"v-8ded9d8e#6/48\",\"5898\":\"v-8ded9d8e#6/49\",\"5899\":\"v-8ded9d8e#6/50\",\"5900\":\"v-8ded9d8e#6/51\",\"5901\":\"v-8ded9d8e#6/52\",\"5902\":\"v-8ded9d8e#6/53\",\"5903\":\"v-8ded9d8e#6/54\",\"5904\":\"v-8ded9d8e#6/55\",\"5905\":\"v-8ded9d8e#6/56\",\"5906\":\"v-8ded9d8e#6/57\",\"5907\":\"v-8ded9d8e#6/58\",\"5908\":\"v-8ded9d8e#6/59\",\"5909\":\"v-8ded9d8e#6/60\",\"5910\":\"v-8ded9d8e#6/61\",\"5911\":\"v-8ded9d8e#6/62\",\"5912\":\"v-8ded9d8e#6/63\",\"5913\":\"v-8ded9d8e#6/64\",\"5914\":\"v-8ded9d8e#6/65\",\"5915\":\"v-8ded9d8e#6/66\",\"5916\":\"v-8ded9d8e#6/67\",\"5917\":\"v-8ded9d8e#6/68\",\"5918\":\"v-8ded9d8e#6/69\",\"5919\":\"v-8ded9d8e#6/70\",\"5920\":\"v-8ded9d8e#6/71\",\"5921\":\"v-8ded9d8e#6/72\",\"5922\":\"v-8ded9d8e#6/73\",\"5923\":\"v-8ded9d8e#6/74\",\"5924\":\"v-8ded9d8e#6/75\",\"5925\":\"v-8ded9d8e#6/76\",\"5926\":\"v-8ded9d8e#6/77\",\"5927\":\"v-8ded9d8e#6/78\",\"5928\":\"v-8ded9d8e#6/79\",\"5929\":\"v-8ded9d8e#6/80\",\"5930\":\"v-8ded9d8e#6/81\",\"5931\":\"v-8ded9d8e#6/82\",\"5932\":\"v-8ded9d8e#6/83\",\"5933\":\"v-8ded9d8e#6/84\",\"5934\":\"v-8ded9d8e#6/85\",\"5935\":\"v-8ded9d8e#6/86\",\"5936\":\"v-8ded9d8e#6/87\",\"5937\":\"v-8ded9d8e#6/88\",\"5938\":\"v-8ded9d8e#6/89\",\"5939\":\"v-8ded9d8e#6/90\",\"5940\":\"v-8ded9d8e#6/91\",\"5941\":\"v-8ded9d8e#6/92\",\"5942\":\"v-8ded9d8e#6/93\",\"5943\":\"v-8ded9d8e#7\",\"5944\":\"v-8ded9d8e#7/94\",\"5945\":\"v-8ded9d8e#7/95\",\"5946\":\"v-8ded9d8e#7/96\",\"5947\":\"v-8ded9d8e#7/97\",\"5948\":\"v-8ded9d8e#7/98\",\"5949\":\"v-8ded9d8e#7/99\",\"5950\":\"v-8ded9d8e#7/100\",\"5951\":\"v-8ded9d8e#7/101\",\"5952\":\"v-8ded9d8e#7/102\",\"5953\":\"v-8ded9d8e#7/103\",\"5954\":\"v-8ded9d8e#7/104\",\"5955\":\"v-8ded9d8e#7/105\",\"5956\":\"v-8ded9d8e#7/106\",\"5957\":\"v-8ded9d8e#7/107\",\"5958\":\"v-8ded9d8e#7/108\",\"5959\":\"v-8ded9d8e#7/109\",\"5960\":\"v-8ded9d8e#7/110\",\"5961\":\"v-8ded9d8e#7/111\",\"5962\":\"v-8ded9d8e#7/112\",\"5963\":\"v-8ded9d8e#7/113\",\"5964\":\"v-8ded9d8e#7/114\",\"5965\":\"v-8ded9d8e#7/115\",\"5966\":\"v-8ded9d8e#7/116\",\"5967\":\"v-8ded9d8e#7/117\",\"5968\":\"v-8ded9d8e#7/118\",\"5969\":\"v-8ded9d8e#7/119\",\"5970\":\"v-8ded9d8e#7/120\",\"5971\":\"v-8ded9d8e#7/121\",\"5972\":\"v-8ded9d8e#7/122\",\"5973\":\"v-8ded9d8e#7/123\",\"5974\":\"v-8ded9d8e#7/124\",\"5975\":\"v-8ded9d8e#7/125\",\"5976\":\"v-8ded9d8e#7/126\",\"5977\":\"v-8ded9d8e#7/127\",\"5978\":\"v-8ded9d8e#7/128\",\"5979\":\"v-8ded9d8e#7/129\",\"5980\":\"v-8ded9d8e#7/130\",\"5981\":\"v-8ded9d8e#7/131\",\"5982\":\"v-8ded9d8e#7/132\",\"5983\":\"v-8ded9d8e#7/133\",\"5984\":\"v-8ded9d8e#7/134\",\"5985\":\"v-8ded9d8e#7/135\",\"5986\":\"v-8ded9d8e#7/136\",\"5987\":\"v-8ded9d8e#7/137\",\"5988\":\"v-8ded9d8e#7/138\",\"5989\":\"v-8ded9d8e#7/139\",\"5990\":\"v-8ded9d8e#7/140\",\"5991\":\"v-8ded9d8e#7/141\",\"5992\":\"v-8ded9d8e#7/142\",\"5993\":\"v-8ded9d8e#7/143\",\"5994\":\"v-8ded9d8e#8\",\"5995\":\"v-8ded9d8e#8/0\",\"5996\":\"v-8ded9d8e#8/1\",\"5997\":\"v-8ded9d8e#8/2\",\"5998\":\"v-8ded9d8e#8/3\",\"5999\":\"v-8ded9d8e#8/4\",\"6000\":\"v-8ded9d8e#8/5\",\"6001\":\"v-8ded9d8e#8/6\",\"6002\":\"v-8ded9d8e#8/7\",\"6003\":\"v-8ded9d8e#8/8\",\"6004\":\"v-8ded9d8e#8/9\",\"6005\":\"v-8ded9d8e#8/10\",\"6006\":\"v-8ded9d8e#8/11\",\"6007\":\"v-8ded9d8e#8/12\",\"6008\":\"v-8ded9d8e#8/13\",\"6009\":\"v-8ded9d8e#8/14\",\"6010\":\"v-8ded9d8e#8/15\",\"6011\":\"v-8ded9d8e#8/16\",\"6012\":\"v-8ded9d8e#8/17\",\"6013\":\"v-8ded9d8e#8/18\",\"6014\":\"v-8ded9d8e#8/19\",\"6015\":\"v-8ded9d8e#8/20\",\"6016\":\"v-8ded9d8e#8/21\",\"6017\":\"v-8ded9d8e#8/22\",\"6018\":\"v-8ded9d8e#8/23\",\"6019\":\"v-8ded9d8e#8/24\",\"6020\":\"v-8ded9d8e#8/25\",\"6021\":\"v-8ded9d8e#8/26\",\"6022\":\"v-8ded9d8e#8/27\",\"6023\":\"v-8ded9d8e#8/28\",\"6024\":\"v-8ded9d8e#8/29\",\"6025\":\"v-8ded9d8e#8/30\",\"6026\":\"v-8ded9d8e#8/31\",\"6027\":\"v-8ded9d8e#8/32\",\"6028\":\"v-8ded9d8e#8/33\",\"6029\":\"v-8ded9d8e#8/34\",\"6030\":\"v-8ded9d8e#8/35\",\"6031\":\"v-8ded9d8e#8/36\",\"6032\":\"v-8ded9d8e#8/37\",\"6033\":\"v-8ded9d8e#8/38\",\"6034\":\"v-8ded9d8e#8/39\",\"6035\":\"v-8ded9d8e#8/40\",\"6036\":\"v-8ded9d8e#8/41\",\"6037\":\"v-8ded9d8e#8/42\",\"6038\":\"v-8ded9d8e#8/43\",\"6039\":\"v-8ded9d8e#8/44\",\"6040\":\"v-8ded9d8e#8/45\",\"6041\":\"v-8ded9d8e#8/46\",\"6042\":\"v-8ded9d8e#8/47\",\"6043\":\"v-8ded9d8e#8/48\",\"6044\":\"v-8ded9d8e#8/49\",\"6045\":\"v-8ded9d8e#8/50\",\"6046\":\"v-8ded9d8e#8/51\",\"6047\":\"v-8ded9d8e#8/52\",\"6048\":\"v-8ded9d8e#8/53\",\"6049\":\"v-8ded9d8e#8/54\",\"6050\":\"v-8ded9d8e#8/55\",\"6051\":\"v-8ded9d8e#9\",\"6052\":\"v-8ded9d8e#9/0\",\"6053\":\"v-8ded9d8e#9/1\",\"6054\":\"v-8ded9d8e#9/2\",\"6055\":\"v-8ded9d8e#9/3\",\"6056\":\"v-8ded9d8e#9/4\",\"6057\":\"v-8ded9d8e#10\",\"6058\":\"v-8ded9d8e#10/0\",\"6059\":\"v-8ded9d8e#10/1\",\"6060\":\"v-8ded9d8e#10/2\",\"6061\":\"v-8ded9d8e#10/3\",\"6062\":\"v-8ded9d8e#10/4\",\"6063\":\"v-8ded9d8e#10/5\",\"6064\":\"v-8ded9d8e#10/6\",\"6065\":\"v-8ded9d8e#10/7\",\"6066\":\"v-8ded9d8e#10/8\",\"6067\":\"v-8ded9d8e#10/9\",\"6068\":\"v-8ded9d8e#10/10\",\"6069\":\"v-8ded9d8e#10/11\",\"6070\":\"v-8ded9d8e#10/12\",\"6071\":\"v-8ded9d8e#10/13\",\"6072\":\"v-8ded9d8e#10/14\",\"6073\":\"v-8ded9d8e#10/15\",\"6074\":\"v-8ded9d8e#10/16\",\"6075\":\"v-8ded9d8e#10/17\",\"6076\":\"v-8ded9d8e#10/18\",\"6077\":\"v-8ded9d8e#10/19\",\"6078\":\"v-8ded9d8e#10/20\",\"6079\":\"v-8ded9d8e#10/21\",\"6080\":\"v-8ded9d8e#10/22\",\"6081\":\"v-8ded9d8e#10/23\",\"6082\":\"v-8ded9d8e#10/24\",\"6083\":\"v-8ded9d8e#10/25\",\"6084\":\"v-8ded9d8e#10/26\",\"6085\":\"v-8ded9d8e#10/27\",\"6086\":\"v-8ded9d8e#10/28\",\"6087\":\"v-8ded9d8e#10/29\",\"6088\":\"v-8ded9d8e#11\",\"6089\":\"v-8ded9d8e#11/0\",\"6090\":\"v-8ded9d8e#11/1\",\"6091\":\"v-8ded9d8e#11/2\",\"6092\":\"v-8ded9d8e#11/3\",\"6093\":\"v-8ded9d8e#11/4\",\"6094\":\"v-8ded9d8e#11/5\",\"6095\":\"v-8ded9d8e#11/6\",\"6096\":\"v-8ded9d8e#11/7\",\"6097\":\"v-8ded9d8e#11/8\",\"6098\":\"v-8ded9d8e#11/9\",\"6099\":\"v-8ded9d8e#11/10\",\"6100\":\"v-8ded9d8e#11/11\",\"6101\":\"v-8ded9d8e#11/12\",\"6102\":\"v-8ded9d8e#11/13\",\"6103\":\"v-8ded9d8e#11/14\",\"6104\":\"v-8ded9d8e#11/15\",\"6105\":\"v-8ded9d8e#11/16\",\"6106\":\"v-8ded9d8e#12\",\"6107\":\"v-8ded9d8e#12/0\",\"6108\":\"v-8ded9d8e#12/1\",\"6109\":\"v-8ded9d8e#12/2\",\"6110\":\"v-8ded9d8e#12/3\",\"6111\":\"v-8ded9d8e#12/4\",\"6112\":\"v-8ded9d8e#12/5\",\"6113\":\"v-8ded9d8e#12/6\",\"6114\":\"v-8ded9d8e#12/7\",\"6115\":\"v-8ded9d8e#12/8\",\"6116\":\"v-8ded9d8e#12/9\",\"6117\":\"v-8ded9d8e#12/10\",\"6118\":\"v-8ded9d8e#12/11\",\"6119\":\"v-8ded9d8e#12/12\",\"6120\":\"v-8ded9d8e#12/13\",\"6121\":\"v-8ded9d8e#12/14\",\"6122\":\"v-8ded9d8e#13\",\"6123\":\"v-8ded9d8e#13/0\",\"6124\":\"v-8ded9d8e#13/1\",\"6125\":\"v-8ded9d8e#13/2\",\"6126\":\"v-8ded9d8e#13/3\",\"6127\":\"v-8ded9d8e#13/4\",\"6128\":\"v-8ded9d8e#13/5\",\"6129\":\"v-8ded9d8e#13/6\",\"6130\":\"v-8ded9d8e#13/7\",\"6131\":\"v-8ded9d8e#14\",\"6132\":\"v-8ded9d8e#14/0\",\"6133\":\"v-8ded9d8e#14/1\",\"6134\":\"v-8ded9d8e#14/2\",\"6135\":\"v-8ded9d8e#14/3\",\"6136\":\"v-8ded9d8e#14/4\",\"6137\":\"v-8ded9d8e#14/5\",\"6138\":\"v-8ded9d8e#14/6\",\"6139\":\"v-7837ef62\",\"6140\":\"v-7837ef62#0/0\",\"6141\":\"v-7837ef62#0/1\",\"6142\":\"v-7837ef62#0/2\",\"6143\":\"v-7837ef62#0/3\",\"6144\":\"v-7837ef62#0/4\",\"6145\":\"v-7837ef62#1\",\"6146\":\"v-7837ef62#1/0\",\"6147\":\"v-7837ef62#1/1\",\"6148\":\"v-7837ef62#1/2\",\"6149\":\"v-7837ef62#1/3\",\"6150\":\"v-7837ef62#1/4\",\"6151\":\"v-7837ef62#1/5\",\"6152\":\"v-7837ef62#1/6\",\"6153\":\"v-7837ef62#1/7\",\"6154\":\"v-7837ef62#1/8\",\"6155\":\"v-7837ef62#1/9\",\"6156\":\"v-7837ef62#1/10\",\"6157\":\"v-7837ef62#1/11\",\"6158\":\"v-7837ef62#1/12\",\"6159\":\"v-7837ef62#1/13\",\"6160\":\"v-7837ef62#1/14\",\"6161\":\"v-7837ef62#1/15\",\"6162\":\"v-7837ef62#2\",\"6163\":\"v-7837ef62#3\",\"6164\":\"v-7837ef62#3/0\",\"6165\":\"v-7837ef62#4\",\"6166\":\"v-7837ef62#4/0\",\"6167\":\"v-7837ef62#5\",\"6168\":\"v-7837ef62#5/0\",\"6169\":\"v-7837ef62#6\",\"6170\":\"v-7837ef62#6/0\",\"6171\":\"v-7837ef62#7\",\"6172\":\"v-7837ef62#7/0\",\"6173\":\"v-7837ef62#7/1\",\"6174\":\"v-7837ef62#7/2\",\"6175\":\"v-7837ef62#8\",\"6176\":\"v-7837ef62#8/0\",\"6177\":\"v-7837ef62#8/1\",\"6178\":\"v-7837ef62#8/2\",\"6179\":\"v-7837ef62#8/3\",\"6180\":\"v-7837ef62#8/4\",\"6181\":\"v-7837ef62#8/5\",\"6182\":\"v-7837ef62#8/6\",\"6183\":\"v-7837ef62#8/7\",\"6184\":\"v-7837ef62#8/8\",\"6185\":\"v-7837ef62#8/9\",\"6186\":\"v-7837ef62#8/10\",\"6187\":\"v-7837ef62#8/11\",\"6188\":\"v-7837ef62#8/12\",\"6189\":\"v-7837ef62#8/13\",\"6190\":\"v-7837ef62#8/14\",\"6191\":\"v-7837ef62#8/15\",\"6192\":\"v-7837ef62#8/16\",\"6193\":\"v-7837ef62#8/17\",\"6194\":\"v-7837ef62#8/18\",\"6195\":\"v-7837ef62#8/19\",\"6196\":\"v-7837ef62#9\",\"6197\":\"v-7837ef62#9/0\",\"6198\":\"v-7837ef62#9/1\",\"6199\":\"v-7837ef62#9/2\",\"6200\":\"v-7837ef62#9/3\",\"6201\":\"v-7837ef62#9/4\",\"6202\":\"v-7837ef62#9/5\",\"6203\":\"v-7837ef62#9/6\",\"6204\":\"v-7837ef62#9/7\",\"6205\":\"v-7837ef62#9/8\",\"6206\":\"v-7837ef62#9/9\",\"6207\":\"v-7837ef62#9/10\",\"6208\":\"v-7837ef62#10\",\"6209\":\"v-7837ef62#10/0\",\"6210\":\"v-7837ef62#10/1\",\"6211\":\"v-7837ef62#10/2\",\"6212\":\"v-7837ef62#10/3\",\"6213\":\"v-7837ef62#10/4\",\"6214\":\"v-7837ef62#10/5\",\"6215\":\"v-7837ef62#10/6\",\"6216\":\"v-7837ef62#10/7\",\"6217\":\"v-7837ef62#11\",\"6218\":\"v-7837ef62#11/0\",\"6219\":\"v-7837ef62#11/1\",\"6220\":\"v-7837ef62#12\",\"6221\":\"v-7837ef62#12/2\",\"6222\":\"v-7837ef62#12/3\",\"6223\":\"v-7837ef62#13\",\"6224\":\"v-7837ef62#13/0\",\"6225\":\"v-7837ef62#13/1\",\"6226\":\"v-7837ef62#13/2\",\"6227\":\"v-7837ef62#13/3\",\"6228\":\"v-7837ef62#14\",\"6229\":\"v-7837ef62#14/0\",\"6230\":\"v-7837ef62#15\",\"6231\":\"v-7837ef62#15/0\",\"6232\":\"v-7837ef62#15/1\",\"6233\":\"v-7837ef62#15/2\",\"6234\":\"v-7837ef62#16\",\"6235\":\"v-7837ef62#16/0\",\"6236\":\"v-7837ef62#16/1\",\"6237\":\"v-7837ef62#17\",\"6238\":\"v-7837ef62#17/2\",\"6239\":\"v-7837ef62#17/3\",\"6240\":\"v-7837ef62#18\",\"6241\":\"v-7837ef62#18/0\",\"6242\":\"v-7837ef62#18/1\",\"6243\":\"v-7837ef62#18/2\",\"6244\":\"v-7837ef62#18/3\",\"6245\":\"v-7837ef62#18/4\",\"6246\":\"v-7837ef62#18/5\",\"6247\":\"v-7837ef62#18/6\",\"6248\":\"v-7837ef62#18/7\",\"6249\":\"v-7837ef62#18/8\",\"6250\":\"v-7837ef62#18/9\",\"6251\":\"v-7837ef62#18/10\",\"6252\":\"v-7837ef62#18/11\",\"6253\":\"v-7837ef62#18/12\",\"6254\":\"v-7837ef62#18/13\",\"6255\":\"v-7837ef62#18/14\",\"6256\":\"v-7837ef62#19\",\"6257\":\"v-7837ef62#19/0\",\"6258\":\"v-7837ef62#19/1\",\"6259\":\"v-7837ef62#19/2\",\"6260\":\"v-7837ef62#19/3\",\"6261\":\"v-7837ef62#19/4\",\"6262\":\"v-7837ef62#19/5\",\"6263\":\"v-7837ef62#19/6\",\"6264\":\"v-7837ef62#20\",\"6265\":\"v-7837ef62#20/0\",\"6266\":\"v-7837ef62#20/1\",\"6267\":\"v-7837ef62#20/2\",\"6268\":\"v-7837ef62#20/3\",\"6269\":\"v-7837ef62#21\",\"6270\":\"v-7837ef62#21/0\",\"6271\":\"v-7837ef62#21/1\",\"6272\":\"v-7837ef62#21/2\",\"6273\":\"v-7837ef62#21/3\",\"6274\":\"v-7837ef62#21/4\",\"6275\":\"v-7837ef62#21/5\",\"6276\":\"v-7837ef62#21/6\",\"6277\":\"v-5253f255\",\"6278\":\"v-5253f255#0/0\",\"6279\":\"v-5253f255#1\",\"6280\":\"v-5253f255#1/0\",\"6281\":\"v-5253f255#1/1\",\"6282\":\"v-5253f255#1/2\",\"6283\":\"v-5253f255#1/3\",\"6284\":\"v-5253f255#1/4\",\"6285\":\"v-5253f255#1/5\",\"6286\":\"v-5253f255#1/6\",\"6287\":\"v-5253f255#1/7\",\"6288\":\"v-5253f255#2\",\"6289\":\"v-5253f255#2/0\",\"6290\":\"v-5253f255#2/1\",\"6291\":\"v-5253f255#2/2\",\"6292\":\"v-5253f255#2/3\",\"6293\":\"v-5253f255#2/4\",\"6294\":\"v-5253f255#3\",\"6295\":\"v-5253f255#3/0\",\"6296\":\"v-5253f255#3/1\",\"6297\":\"v-5253f255#3/2\",\"6298\":\"v-5253f255#3/3\",\"6299\":\"v-5253f255#3/4\",\"6300\":\"v-5253f255#4\",\"6301\":\"v-5253f255#4/0\",\"6302\":\"v-5253f255#4/1\",\"6303\":\"v-5253f255#4/2\",\"6304\":\"v-5253f255#5\",\"6305\":\"v-5253f255#5/0\",\"6306\":\"v-5253f255#5/1\",\"6307\":\"v-5253f255#5/2\",\"6308\":\"v-5253f255#5/3\",\"6309\":\"v-5253f255#5/4\",\"6310\":\"v-5253f255#5/5\",\"6311\":\"v-5253f255#5/6\",\"6312\":\"v-5253f255#6\",\"6313\":\"v-5253f255#6/0\",\"6314\":\"v-5253f255#6/1\",\"6315\":\"v-5253f255#6/2\",\"6316\":\"v-5253f255#7\",\"6317\":\"v-5253f255#7/0\",\"6318\":\"v-5253f255#7/1\",\"6319\":\"v-5253f255#7/2\",\"6320\":\"v-5253f255#8\",\"6321\":\"v-5253f255#8/0\",\"6322\":\"v-5253f255#8/1\",\"6323\":\"v-5253f255#8/2\",\"6324\":\"v-5253f255#8/3\",\"6325\":\"v-5253f255#8/4\",\"6326\":\"v-5253f255#9\",\"6327\":\"v-5253f255#9/0\",\"6328\":\"v-5253f255#9/1\",\"6329\":\"v-5253f255#9/2\",\"6330\":\"v-5253f255#9/3\",\"6331\":\"v-5253f255#9/4\",\"6332\":\"v-5253f255#9/5\",\"6333\":\"v-5253f255#9/6\",\"6334\":\"v-5253f255#9/7\",\"6335\":\"v-5253f255#9/8\",\"6336\":\"v-5253f255#10\",\"6337\":\"v-5253f255#10/0\",\"6338\":\"v-5253f255#10/1\",\"6339\":\"v-5253f255#11\",\"6340\":\"v-5253f255#11/0\",\"6341\":\"v-5253f255#11/1\",\"6342\":\"v-5253f255#11/2\",\"6343\":\"v-5253f255#11/3\",\"6344\":\"v-5253f255#11/4\",\"6345\":\"v-5253f255#11/5\",\"6346\":\"v-5253f255#11/6\",\"6347\":\"v-5253f255#11/7\",\"6348\":\"v-5253f255#11/8\",\"6349\":\"v-5253f255#11/9\",\"6350\":\"v-5253f255#11/10\",\"6351\":\"v-5253f255#12\",\"6352\":\"v-5253f255#12/0\",\"6353\":\"v-5253f255#12/1\",\"6354\":\"v-5253f255#12/2\",\"6355\":\"v-5253f255#12/3\",\"6356\":\"v-5253f255#13\",\"6357\":\"v-5253f255#13/0\",\"6358\":\"v-5253f255#13/1\",\"6359\":\"v-5253f255#13/2\",\"6360\":\"v-5253f255#13/3\",\"6361\":\"v-5253f255#14\",\"6362\":\"v-5253f255#14/0\",\"6363\":\"v-5253f255#14/1\",\"6364\":\"v-5253f255#14/2\",\"6365\":\"v-5253f255#14/3\",\"6366\":\"v-5253f255#14/4\",\"6367\":\"v-5253f255#15\",\"6368\":\"v-5253f255#15/0\",\"6369\":\"v-5253f255#15/1\",\"6370\":\"v-5253f255#15/2\",\"6371\":\"v-5253f255#15/3\",\"6372\":\"v-5253f255#15/4\",\"6373\":\"v-5253f255#15/5\",\"6374\":\"v-5253f255#15/6\",\"6375\":\"v-5253f255#15/7\",\"6376\":\"v-5253f255#15/8\",\"6377\":\"v-5253f255#15/9\",\"6378\":\"v-5253f255#15/10\",\"6379\":\"v-5253f255#15/11\",\"6380\":\"v-5253f255#16\",\"6381\":\"v-5253f255#16/0\",\"6382\":\"v-5253f255#16/1\",\"6383\":\"v-5253f255#16/2\",\"6384\":\"v-5253f255#16/3\",\"6385\":\"v-5253f255#16/4\",\"6386\":\"v-5253f255#16/5\",\"6387\":\"v-5253f255#16/6\",\"6388\":\"v-5253f255#16/7\",\"6389\":\"v-5253f255#16/8\",\"6390\":\"v-5253f255#17\",\"6391\":\"v-5253f255#17/0\",\"6392\":\"v-5253f255#17/1\",\"6393\":\"v-5253f255#17/2\",\"6394\":\"v-5253f255#17/3\",\"6395\":\"v-5253f255#17/4\",\"6396\":\"v-5253f255#17/5\",\"6397\":\"v-5253f255#18\",\"6398\":\"v-5253f255#18/0\",\"6399\":\"v-5253f255#18/1\",\"6400\":\"v-5253f255#18/2\",\"6401\":\"v-5253f255#18/3\",\"6402\":\"v-5253f255#18/4\",\"6403\":\"v-5253f255#18/5\",\"6404\":\"v-5253f255#18/6\",\"6405\":\"v-5253f255#18/7\",\"6406\":\"v-5253f255#19\",\"6407\":\"v-5253f255#19/0\",\"6408\":\"v-5253f255#19/1\",\"6409\":\"v-5253f255#19/2\",\"6410\":\"v-5253f255#19/3\",\"6411\":\"v-5253f255#20\",\"6412\":\"v-5253f255#20/0\",\"6413\":\"v-5253f255#20/1\",\"6414\":\"v-5253f255#20/2\",\"6415\":\"v-5253f255#20/3\",\"6416\":\"v-5253f255#20/4\",\"6417\":\"v-5253f255#20/5\",\"6418\":\"v-5253f255#21\",\"6419\":\"v-5253f255#21/0\",\"6420\":\"v-5253f255#21/1\",\"6421\":\"v-5253f255#21/2\",\"6422\":\"v-5253f255#21/3\",\"6423\":\"v-5253f255#21/4\",\"6424\":\"v-5253f255#22\",\"6425\":\"v-5253f255#22/0\",\"6426\":\"v-5253f255#22/1\",\"6427\":\"v-5253f255#22/2\",\"6428\":\"v-5253f255#23\",\"6429\":\"v-5253f255#23/0\",\"6430\":\"v-5253f255#23/1\",\"6431\":\"v-5253f255#23/2\",\"6432\":\"v-5253f255#23/3\",\"6433\":\"v-5253f255#23/4\",\"6434\":\"v-5253f255#23/5\",\"6435\":\"v-5253f255#23/6\",\"6436\":\"v-5253f255#23/7\",\"6437\":\"v-5253f255#23/8\",\"6438\":\"v-5253f255#23/9\",\"6439\":\"v-5253f255#23/10\",\"6440\":\"v-5253f255#24\",\"6441\":\"v-5253f255#24/0\",\"6442\":\"v-5253f255#24/1\",\"6443\":\"v-5253f255#24/2\",\"6444\":\"v-5253f255#24/3\",\"6445\":\"v-5253f255#24/4\",\"6446\":\"v-5253f255#24/5\",\"6447\":\"v-5253f255#25\",\"6448\":\"v-5253f255#25/0\",\"6449\":\"v-5253f255#25/1\",\"6450\":\"v-5253f255#25/2\",\"6451\":\"v-5253f255#25/3\",\"6452\":\"v-5253f255#25/4\",\"6453\":\"v-5253f255#25/5\",\"6454\":\"v-5253f255#25/6\",\"6455\":\"v-5253f255#26\",\"6456\":\"v-5253f255#26/0\",\"6457\":\"v-5253f255#26/1\",\"6458\":\"v-5253f255#26/2\",\"6459\":\"v-5253f255#26/3\",\"6460\":\"v-5253f255#26/4\",\"6461\":\"v-5253f255#26/5\",\"6462\":\"v-5253f255#26/6\",\"6463\":\"v-5253f255#27\",\"6464\":\"v-5253f255#27/0\",\"6465\":\"v-5253f255#27/1\",\"6466\":\"v-5253f255#27/2\",\"6467\":\"v-5253f255#28\",\"6468\":\"v-5253f255#28/0\",\"6469\":\"v-5253f255#28/1\",\"6470\":\"v-5253f255#28/2\",\"6471\":\"v-5253f255#28/3\",\"6472\":\"v-5253f255#28/4\",\"6473\":\"v-5253f255#28/5\",\"6474\":\"v-5253f255#28/6\",\"6475\":\"v-5253f255#29\",\"6476\":\"v-5253f255#29/0\",\"6477\":\"v-5253f255#29/1\",\"6478\":\"v-5253f255#29/2\",\"6479\":\"v-5253f255#29/3\",\"6480\":\"v-5253f255#29/4\",\"6481\":\"v-5253f255#29/5\",\"6482\":\"v-5253f255#29/6\",\"6483\":\"v-5253f255#30\",\"6484\":\"v-5253f255#30/0\",\"6485\":\"v-5253f255#30/1\",\"6486\":\"v-5253f255#30/2\",\"6487\":\"v-5253f255#30/3\",\"6488\":\"v-5253f255#30/4\",\"6489\":\"v-5253f255#30/5\",\"6490\":\"v-5253f255#30/6\",\"6491\":\"v-5253f255#30/7\",\"6492\":\"v-5253f255#30/8\",\"6493\":\"v-5253f255#30/9\",\"6494\":\"v-5253f255#31\",\"6495\":\"v-5253f255#31/0\",\"6496\":\"v-5253f255#31/1\",\"6497\":\"v-5253f255#31/2\",\"6498\":\"v-5253f255#31/3\",\"6499\":\"v-5253f255#31/4\",\"6500\":\"v-5253f255#31/5\",\"6501\":\"v-5253f255#31/6\",\"6502\":\"v-5253f255#31/7\",\"6503\":\"v-5253f255#31/8\",\"6504\":\"v-5253f255#31/9\",\"6505\":\"v-5253f255#31/10\",\"6506\":\"v-5253f255#31/11\",\"6507\":\"v-5253f255#31/12\",\"6508\":\"v-5253f255#32\",\"6509\":\"v-5253f255#32/0\",\"6510\":\"v-5253f255#32/1\",\"6511\":\"v-5253f255#32/2\",\"6512\":\"v-5253f255#32/3\",\"6513\":\"v-5253f255#32/4\",\"6514\":\"v-5253f255#32/5\",\"6515\":\"v-5253f255#32/6\",\"6516\":\"v-5253f255#32/7\",\"6517\":\"v-5253f255#33\",\"6518\":\"v-5253f255#33/0\",\"6519\":\"v-5253f255#33/1\",\"6520\":\"v-5253f255#33/2\",\"6521\":\"v-5253f255#33/3\",\"6522\":\"v-5253f255#33/4\",\"6523\":\"v-5253f255#33/5\",\"6524\":\"v-5253f255#33/6\",\"6525\":\"v-5253f255#34\",\"6526\":\"v-5253f255#34/0\",\"6527\":\"v-5253f255#34/1\",\"6528\":\"v-5253f255#35\",\"6529\":\"v-5253f255#35/0\",\"6530\":\"v-5253f255#35/1\",\"6531\":\"v-5253f255#35/2\",\"6532\":\"v-5253f255#35/3\",\"6533\":\"v-5253f255#35/4\",\"6534\":\"v-5253f255#36\",\"6535\":\"v-5253f255#36/0\",\"6536\":\"v-5253f255#36/1\",\"6537\":\"v-5253f255#36/2\",\"6538\":\"v-5253f255#36/3\",\"6539\":\"v-5253f255#36/4\",\"6540\":\"v-5253f255#36/5\",\"6541\":\"v-5253f255#36/6\",\"6542\":\"v-5253f255#36/7\",\"6543\":\"v-5253f255#37\",\"6544\":\"v-5253f255#37/0\",\"6545\":\"v-5253f255#37/1\",\"6546\":\"v-5253f255#37/2\",\"6547\":\"v-5253f255#37/3\",\"6548\":\"v-5253f255#37/4\",\"6549\":\"v-5253f255#37/5\",\"6550\":\"v-5253f255#37/6\",\"6551\":\"v-5253f255#37/7\",\"6552\":\"v-5253f255#37/8\",\"6553\":\"v-5253f255#38\",\"6554\":\"v-5253f255#38/0\",\"6555\":\"v-5253f255#38/1\",\"6556\":\"v-5253f255#38/2\",\"6557\":\"v-5253f255#38/3\",\"6558\":\"v-5253f255#38/4\",\"6559\":\"v-5253f255#38/5\",\"6560\":\"v-5253f255#38/6\",\"6561\":\"v-5253f255#39\",\"6562\":\"v-5253f255#39/0\",\"6563\":\"v-5253f255#39/1\",\"6564\":\"v-5253f255#39/2\",\"6565\":\"v-5253f255#39/3\",\"6566\":\"v-5253f255#39/4\",\"6567\":\"v-5253f255#39/5\",\"6568\":\"v-5253f255#39/6\",\"6569\":\"v-5253f255#40\",\"6570\":\"v-5253f255#40/0\",\"6571\":\"v-5253f255#40/1\",\"6572\":\"v-5253f255#40/2\",\"6573\":\"v-5253f255#40/3\",\"6574\":\"v-5253f255#41\",\"6575\":\"v-5253f255#41/0\",\"6576\":\"v-5253f255#41/1\",\"6577\":\"v-5253f255#41/2\",\"6578\":\"v-5253f255#41/3\",\"6579\":\"v-5253f255#41/4\",\"6580\":\"v-5253f255#41/5\",\"6581\":\"v-5253f255#41/6\",\"6582\":\"v-5253f255#41/7\",\"6583\":\"v-5253f255#41/8\",\"6584\":\"v-5253f255#41/9\",\"6585\":\"v-5253f255#41/10\",\"6586\":\"v-5253f255#42\",\"6587\":\"v-5253f255#42/0\",\"6588\":\"v-5253f255#42/1\",\"6589\":\"v-5253f255#42/2\",\"6590\":\"v-5253f255#42/3\",\"6591\":\"v-5253f255#43\",\"6592\":\"v-5253f255#43/0\",\"6593\":\"v-5253f255#43/1\",\"6594\":\"v-5253f255#43/2\",\"6595\":\"v-5253f255#43/3\",\"6596\":\"v-5253f255#44\",\"6597\":\"v-5253f255#44/0\",\"6598\":\"v-5253f255#44/1\",\"6599\":\"v-5253f255#44/2\",\"6600\":\"v-5253f255#44/3\",\"6601\":\"v-5253f255#44/4\",\"6602\":\"v-5253f255#44/5\",\"6603\":\"v-5253f255#44/6\",\"6604\":\"v-5253f255#45\",\"6605\":\"v-5253f255#45/0\",\"6606\":\"v-5253f255#45/1\",\"6607\":\"v-5253f255#45/2\",\"6608\":\"v-5253f255#45/3\",\"6609\":\"v-5253f255#45/4\",\"6610\":\"v-5253f255#46\",\"6611\":\"v-5253f255#46/0\",\"6612\":\"v-5253f255#46/1\",\"6613\":\"v-5253f255#46/2\",\"6614\":\"v-5253f255#46/3\",\"6615\":\"v-5253f255#46/4\",\"6616\":\"v-5253f255#46/5\",\"6617\":\"v-5253f255#47\",\"6618\":\"v-5253f255#47/0\",\"6619\":\"v-5253f255#47/1\",\"6620\":\"v-5253f255#47/2\",\"6621\":\"v-5253f255#47/3\",\"6622\":\"v-5253f255#47/4\",\"6623\":\"v-5253f255#47/5\",\"6624\":\"v-5253f255#48\",\"6625\":\"v-5253f255#48/0\",\"6626\":\"v-5253f255#48/1\",\"6627\":\"v-5253f255#48/2\",\"6628\":\"v-5253f255#48/3\",\"6629\":\"v-5253f255#48/4\",\"6630\":\"v-5253f255#48/5\",\"6631\":\"v-5253f255#48/6\",\"6632\":\"v-5253f255#48/7\",\"6633\":\"v-5253f255#48/8\",\"6634\":\"v-5253f255#48/9\",\"6635\":\"v-5253f255#48/10\",\"6636\":\"v-5253f255#48/11\",\"6637\":\"v-5253f255#48/12\",\"6638\":\"v-5253f255#48/13\",\"6639\":\"v-5253f255#48/14\",\"6640\":\"v-5253f255#48/15\",\"6641\":\"v-5253f255#48/16\",\"6642\":\"v-5253f255#48/17\",\"6643\":\"v-5253f255#48/18\",\"6644\":\"v-5253f255#48/19\",\"6645\":\"v-5253f255#49\",\"6646\":\"v-5253f255#49/0\",\"6647\":\"v-5253f255#49/1\",\"6648\":\"v-5253f255#49/2\",\"6649\":\"v-5253f255#49/3\",\"6650\":\"v-5253f255#49/4\",\"6651\":\"v-5253f255#49/5\",\"6652\":\"v-5253f255#49/6\",\"6653\":\"v-5253f255#49/7\",\"6654\":\"v-5253f255#49/8\",\"6655\":\"v-5253f255#49/9\",\"6656\":\"v-5253f255#49/10\",\"6657\":\"v-5253f255#50\",\"6658\":\"v-5253f255#50/0\",\"6659\":\"v-5253f255#50/1\",\"6660\":\"v-5253f255#50/2\",\"6661\":\"v-5253f255#50/3\",\"6662\":\"v-5253f255#50/4\",\"6663\":\"v-5253f255#51\",\"6664\":\"v-5253f255#51/0\",\"6665\":\"v-5253f255#51/1\",\"6666\":\"v-5253f255#51/2\",\"6667\":\"v-5253f255#51/3\",\"6668\":\"v-5253f255#51/4\",\"6669\":\"v-5253f255#51/5\",\"6670\":\"v-5253f255#51/6\",\"6671\":\"v-5253f255#51/7\",\"6672\":\"v-5253f255#51/8\",\"6673\":\"v-5253f255#51/9\",\"6674\":\"v-5253f255#51/10\",\"6675\":\"v-5253f255#51/11\",\"6676\":\"v-5253f255#51/12\",\"6677\":\"v-5253f255#51/13\",\"6678\":\"v-5253f255#52\",\"6679\":\"v-5253f255#52/0\",\"6680\":\"v-5253f255#52/1\",\"6681\":\"v-5253f255#52/2\",\"6682\":\"v-5253f255#53\",\"6683\":\"v-5253f255#54\",\"6684\":\"v-5253f255#54/0\",\"6685\":\"v-5253f255#54/1\",\"6686\":\"v-5253f255#54/2\",\"6687\":\"v-5253f255#54/3\",\"6688\":\"v-5253f255#55\",\"6689\":\"v-5253f255#55/0\",\"6690\":\"v-5253f255#55/1\",\"6691\":\"v-5253f255#55/2\",\"6692\":\"v-5253f255#55/3\",\"6693\":\"v-5253f255#55/4\",\"6694\":\"v-5253f255#55/5\",\"6695\":\"v-5253f255#56\",\"6696\":\"v-5253f255#56/0\",\"6697\":\"v-5253f255#56/1\",\"6698\":\"v-5253f255#56/2\",\"6699\":\"v-5253f255#57\",\"6700\":\"v-5253f255#57/0\",\"6701\":\"v-5253f255#57/1\",\"6702\":\"v-5253f255#57/2\",\"6703\":\"v-5253f255#57/3\",\"6704\":\"v-5253f255#57/4\",\"6705\":\"v-5253f255#57/5\",\"6706\":\"v-5253f255#57/6\",\"6707\":\"v-5253f255#57/7\",\"6708\":\"v-5253f255#57/8\",\"6709\":\"v-5253f255#57/9\",\"6710\":\"v-5253f255#57/10\",\"6711\":\"v-5253f255#57/11\",\"6712\":\"v-5253f255#57/12\",\"6713\":\"v-5253f255#57/13\",\"6714\":\"v-5253f255#57/14\",\"6715\":\"v-5253f255#57/15\",\"6716\":\"v-5253f255#57/16\",\"6717\":\"v-5253f255#57/17\",\"6718\":\"v-5253f255#57/18\",\"6719\":\"v-5253f255#57/19\",\"6720\":\"v-5253f255#57/20\",\"6721\":\"v-5253f255#57/21\",\"6722\":\"v-5253f255#58\",\"6723\":\"v-5253f255#58/0\",\"6724\":\"v-5253f255#59\",\"6725\":\"v-5253f255#59/0\",\"6726\":\"v-5253f255#59/1\",\"6727\":\"v-5253f255#59/2\",\"6728\":\"v-5253f255#59/3\",\"6729\":\"v-5253f255#59/4\",\"6730\":\"v-5253f255#59/5\",\"6731\":\"v-5253f255#59/6\",\"6732\":\"v-5253f255#59/7\",\"6733\":\"v-5253f255#59/8\",\"6734\":\"v-5253f255#59/9\",\"6735\":\"v-5253f255#59/10\",\"6736\":\"v-5253f255#59/11\",\"6737\":\"v-5253f255#59/12\",\"6738\":\"v-5253f255#59/13\",\"6739\":\"v-5253f255#59/14\",\"6740\":\"v-5253f255#59/15\",\"6741\":\"v-5253f255#59/16\",\"6742\":\"v-5253f255#59/17\",\"6743\":\"v-a489f7dc\",\"6744\":\"v-a489f7dc#0/0\",\"6745\":\"v-a489f7dc#0/1\",\"6746\":\"v-a489f7dc#0/2\",\"6747\":\"v-a489f7dc#1\",\"6748\":\"v-a489f7dc#1/0\",\"6749\":\"v-a489f7dc#1/1\",\"6750\":\"v-a489f7dc#1/2\",\"6751\":\"v-a489f7dc#1/3\",\"6752\":\"v-a489f7dc#1/4\",\"6753\":\"v-a489f7dc#1/5\",\"6754\":\"v-a489f7dc#1/6\",\"6755\":\"v-a489f7dc#1/7\",\"6756\":\"v-a489f7dc#1/8\",\"6757\":\"v-a489f7dc#1/9\",\"6758\":\"v-a489f7dc#1/10\",\"6759\":\"v-a489f7dc#1/11\",\"6760\":\"v-a489f7dc#1/12\",\"6761\":\"v-a489f7dc#1/13\",\"6762\":\"v-a489f7dc#1/14\",\"6763\":\"v-a489f7dc#1/15\",\"6764\":\"v-a489f7dc#1/16\",\"6765\":\"v-a489f7dc#1/17\",\"6766\":\"v-a489f7dc#1/18\",\"6767\":\"v-a489f7dc#1/19\",\"6768\":\"v-a489f7dc#1/20\",\"6769\":\"v-a489f7dc#1/21\",\"6770\":\"v-a489f7dc#1/22\",\"6771\":\"v-a489f7dc#1/23\",\"6772\":\"v-a489f7dc#1/24\",\"6773\":\"v-a489f7dc#1/25\",\"6774\":\"v-a489f7dc#1/26\",\"6775\":\"v-a489f7dc#1/27\",\"6776\":\"v-a489f7dc#1/28\",\"6777\":\"v-a489f7dc#1/29\",\"6778\":\"v-a489f7dc#1/30\",\"6779\":\"v-a489f7dc#1/31\",\"6780\":\"v-a489f7dc#1/32\",\"6781\":\"v-a489f7dc#1/33\",\"6782\":\"v-a489f7dc#1/34\",\"6783\":\"v-a489f7dc#1/35\",\"6784\":\"v-a489f7dc#1/36\",\"6785\":\"v-a489f7dc#1/37\",\"6786\":\"v-a489f7dc#1/38\",\"6787\":\"v-a489f7dc#1/39\",\"6788\":\"v-a489f7dc#1/40\",\"6789\":\"v-a489f7dc#1/41\",\"6790\":\"v-a489f7dc#1/42\",\"6791\":\"v-a489f7dc#1/43\",\"6792\":\"v-a489f7dc#1/44\",\"6793\":\"v-a489f7dc#1/45\",\"6794\":\"v-a489f7dc#2\",\"6795\":\"v-a489f7dc#2/0\",\"6796\":\"v-a489f7dc#3\",\"6797\":\"v-a489f7dc#3/0\",\"6798\":\"v-a489f7dc#3/1\",\"6799\":\"v-a489f7dc#3/2\",\"6800\":\"v-a489f7dc#3/3\",\"6801\":\"v-a489f7dc#3/4\",\"6802\":\"v-a489f7dc#3/5\",\"6803\":\"v-a489f7dc#3/6\",\"6804\":\"v-a489f7dc#4\",\"6805\":\"v-a489f7dc#4/0\",\"6806\":\"v-a489f7dc#4/1\",\"6807\":\"v-a489f7dc#4/2\",\"6808\":\"v-a489f7dc#4/3\",\"6809\":\"v-a489f7dc#4/4\",\"6810\":\"v-a489f7dc#4/5\",\"6811\":\"v-a489f7dc#4/6\",\"6812\":\"v-a489f7dc#4/7\",\"6813\":\"v-a489f7dc#5\",\"6814\":\"v-a489f7dc#5/0\",\"6815\":\"v-a489f7dc#5/1\",\"6816\":\"v-a489f7dc#6\",\"6817\":\"v-a489f7dc#6/0\",\"6818\":\"v-a489f7dc#6/1\",\"6819\":\"v-a489f7dc#7\",\"6820\":\"v-a489f7dc#7/0\",\"6821\":\"v-a489f7dc#7/1\",\"6822\":\"v-a489f7dc#7/2\",\"6823\":\"v-a489f7dc#8\",\"6824\":\"v-a489f7dc#8/0\",\"6825\":\"v-a489f7dc#8/1\",\"6826\":\"v-a489f7dc#8/2\",\"6827\":\"v-a489f7dc#8/3\",\"6828\":\"v-a489f7dc#8/4\",\"6829\":\"v-a489f7dc#8/5\",\"6830\":\"v-a489f7dc#8/6\",\"6831\":\"v-a489f7dc#9\",\"6832\":\"v-a489f7dc#9/0\",\"6833\":\"v-a489f7dc#9/1\",\"6834\":\"v-a489f7dc#9/2\",\"6835\":\"v-a489f7dc#9/3\",\"6836\":\"v-a489f7dc#9/4\",\"6837\":\"v-a489f7dc#9/5\",\"6838\":\"v-a489f7dc#10\",\"6839\":\"v-a489f7dc#10/0\",\"6840\":\"v-a489f7dc#10/1\",\"6841\":\"v-a489f7dc#10/2\",\"6842\":\"v-a489f7dc#10/3\",\"6843\":\"v-a489f7dc#11\",\"6844\":\"v-a489f7dc#11/0\",\"6845\":\"v-a489f7dc#11/1\",\"6846\":\"v-a489f7dc#12\",\"6847\":\"v-a489f7dc#12/0\",\"6848\":\"v-a489f7dc#12/1\",\"6849\":\"v-a489f7dc#13\",\"6850\":\"v-a489f7dc#13/0\",\"6851\":\"v-a489f7dc#13/1\",\"6852\":\"v-a489f7dc#13/2\",\"6853\":\"v-a489f7dc#13/3\",\"6854\":\"v-a489f7dc#13/4\",\"6855\":\"v-a489f7dc#14\",\"6856\":\"v-a489f7dc#14/0\",\"6857\":\"v-a489f7dc#15\",\"6858\":\"v-a489f7dc#15/0\",\"6859\":\"v-a489f7dc#15/1\",\"6860\":\"v-a489f7dc#15/2\",\"6861\":\"v-a489f7dc#16\",\"6862\":\"v-a489f7dc#16/0\",\"6863\":\"v-a489f7dc#16/1\",\"6864\":\"v-a489f7dc#16/2\",\"6865\":\"v-a489f7dc#16/3\",\"6866\":\"v-a489f7dc#16/4\",\"6867\":\"v-a489f7dc#16/5\",\"6868\":\"v-a489f7dc#16/6\",\"6869\":\"v-a489f7dc#17\",\"6870\":\"v-a489f7dc#17/0\",\"6871\":\"v-a489f7dc#17/1\",\"6872\":\"v-a489f7dc#17/2\",\"6873\":\"v-a489f7dc#17/3\",\"6874\":\"v-a489f7dc#17/4\",\"6875\":\"v-a489f7dc#17/5\",\"6876\":\"v-a489f7dc#17/6\",\"6877\":\"v-a489f7dc#17/7\",\"6878\":\"v-a489f7dc#18\",\"6879\":\"v-a489f7dc#18/0\",\"6880\":\"v-a489f7dc#18/1\",\"6881\":\"v-a489f7dc#18/2\",\"6882\":\"v-a489f7dc#19\",\"6883\":\"v-a489f7dc#19/0\",\"6884\":\"v-a489f7dc#19/1\",\"6885\":\"v-a489f7dc#19/2\",\"6886\":\"v-a489f7dc#20\",\"6887\":\"v-a489f7dc#20/0\",\"6888\":\"v-a489f7dc#20/1\",\"6889\":\"v-a489f7dc#20/2\",\"6890\":\"v-a489f7dc#21\",\"6891\":\"v-a489f7dc#21/0\",\"6892\":\"v-a489f7dc#22\",\"6893\":\"v-a489f7dc#22/0\",\"6894\":\"v-a489f7dc#23\",\"6895\":\"v-a489f7dc#23/0\",\"6896\":\"v-a489f7dc#23/1\",\"6897\":\"v-a489f7dc#23/2\",\"6898\":\"v-a489f7dc#23/3\",\"6899\":\"v-a489f7dc#24\",\"6900\":\"v-a489f7dc#24/0\",\"6901\":\"v-a489f7dc#24/1\",\"6902\":\"v-a489f7dc#24/2\",\"6903\":\"v-a489f7dc#24/3\",\"6904\":\"v-a489f7dc#24/4\",\"6905\":\"v-a489f7dc#24/5\",\"6906\":\"v-a489f7dc#24/6\",\"6907\":\"v-a489f7dc#24/7\",\"6908\":\"v-a489f7dc#25\",\"6909\":\"v-a489f7dc#25/0\",\"6910\":\"v-a489f7dc#25/1\",\"6911\":\"v-a489f7dc#25/2\",\"6912\":\"v-a489f7dc#26\",\"6913\":\"v-a489f7dc#26/0\",\"6914\":\"v-a489f7dc#26/1\",\"6915\":\"v-a489f7dc#26/2\",\"6916\":\"v-a489f7dc#27\",\"6917\":\"v-a489f7dc#27/3\",\"6918\":\"v-a489f7dc#27/4\",\"6919\":\"v-a489f7dc#27/5\",\"6920\":\"v-a489f7dc#27/6\",\"6921\":\"v-a489f7dc#27/7\",\"6922\":\"v-a489f7dc#27/8\",\"6923\":\"v-a489f7dc#27/9\",\"6924\":\"v-a489f7dc#27/10\",\"6925\":\"v-a489f7dc#27/11\",\"6926\":\"v-a489f7dc#27/12\",\"6927\":\"v-a489f7dc#27/13\",\"6928\":\"v-a489f7dc#28\",\"6929\":\"v-a489f7dc#28/14\",\"6930\":\"v-a489f7dc#28/15\",\"6931\":\"v-a489f7dc#29\",\"6932\":\"v-a489f7dc#29/0\",\"6933\":\"v-a489f7dc#29/1\",\"6934\":\"v-a489f7dc#29/2\",\"6935\":\"v-a489f7dc#29/3\",\"6936\":\"v-a489f7dc#29/4\",\"6937\":\"v-a489f7dc#29/5\",\"6938\":\"v-a489f7dc#30\",\"6939\":\"v-a489f7dc#30/0\",\"6940\":\"v-a489f7dc#30/1\",\"6941\":\"v-a489f7dc#30/2\",\"6942\":\"v-a489f7dc#30/3\",\"6943\":\"v-a489f7dc#30/4\",\"6944\":\"v-a489f7dc#30/5\",\"6945\":\"v-a489f7dc#31\",\"6946\":\"v-a489f7dc#31/0\",\"6947\":\"v-a489f7dc#31/1\",\"6948\":\"v-a489f7dc#32\",\"6949\":\"v-a489f7dc#32/0\",\"6950\":\"v-a489f7dc#32/1\",\"6951\":\"v-a489f7dc#32/2\",\"6952\":\"v-a489f7dc#32/3\",\"6953\":\"v-a489f7dc#33\",\"6954\":\"v-a489f7dc#33/0\",\"6955\":\"v-a489f7dc#34\",\"6956\":\"v-a489f7dc#34/0\",\"6957\":\"v-a489f7dc#34/1\",\"6958\":\"v-a489f7dc#34/2\",\"6959\":\"v-a489f7dc#35\",\"6960\":\"v-a489f7dc#35/0\",\"6961\":\"v-a489f7dc#35/1\",\"6962\":\"v-a489f7dc#35/2\",\"6963\":\"v-a489f7dc#35/3\",\"6964\":\"v-a489f7dc#35/4\",\"6965\":\"v-a489f7dc#36\",\"6966\":\"v-a489f7dc#36/0\",\"6967\":\"v-a489f7dc#36/1\",\"6968\":\"v-a489f7dc#36/2\",\"6969\":\"v-a489f7dc#36/3\",\"6970\":\"v-a489f7dc#36/4\",\"6971\":\"v-a489f7dc#37\",\"6972\":\"v-a489f7dc#38\",\"6973\":\"v-a489f7dc#38/0\",\"6974\":\"v-a489f7dc#38/1\",\"6975\":\"v-a489f7dc#38/2\",\"6976\":\"v-a489f7dc#39\",\"6977\":\"v-a489f7dc#39/0\",\"6978\":\"v-a489f7dc#39/1\",\"6979\":\"v-a489f7dc#40\",\"6980\":\"v-a489f7dc#40/0\",\"6981\":\"v-a489f7dc#40/1\",\"6982\":\"v-a489f7dc#40/2\",\"6983\":\"v-a489f7dc#41\",\"6984\":\"v-a489f7dc#41/0\",\"6985\":\"v-a489f7dc#41/1\",\"6986\":\"v-a489f7dc#42\",\"6987\":\"v-a489f7dc#42/0\",\"6988\":\"v-a489f7dc#42/1\",\"6989\":\"v-a489f7dc#42/2\",\"6990\":\"v-a489f7dc#42/3\",\"6991\":\"v-a489f7dc#42/4\",\"6992\":\"v-a489f7dc#42/5\",\"6993\":\"v-a489f7dc#43\",\"6994\":\"v-a489f7dc#43/0\",\"6995\":\"v-a489f7dc#43/1\",\"6996\":\"v-a489f7dc#43/2\",\"6997\":\"v-a489f7dc#43/3\",\"6998\":\"v-a489f7dc#44\",\"6999\":\"v-a489f7dc#44/0\",\"7000\":\"v-a489f7dc#45\",\"7001\":\"v-a489f7dc#45/0\",\"7002\":\"v-a489f7dc#45/1\",\"7003\":\"v-a489f7dc#45/2\",\"7004\":\"v-a489f7dc#46\",\"7005\":\"v-a489f7dc#46/0\",\"7006\":\"v-a489f7dc#46/1\",\"7007\":\"v-a489f7dc#46/2\",\"7008\":\"v-a489f7dc#46/3\",\"7009\":\"v-a489f7dc#46/4\",\"7010\":\"v-a489f7dc#46/5\",\"7011\":\"v-a489f7dc#47\",\"7012\":\"v-a489f7dc#47/0\",\"7013\":\"v-a489f7dc#47/1\",\"7014\":\"v-a489f7dc#47/2\",\"7015\":\"v-7ec73772\",\"7016\":\"v-7ec73772#0/0\",\"7017\":\"v-2d0aa3fe\",\"7018\":\"v-5bb56591\",\"7019\":\"v-1891b76b\",\"7020\":\"v-114ea066\",\"7021\":\"v-e867e24a\",\"7022\":\"v-ffb97496\",\"7023\":\"v-14c69af4\",\"7024\":\"v-53c5f3b8\",\"7025\":\"v-211a2a4e\",\"7026\":\"v-27762a11\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,3],\"2\":[null,8],\"3\":[null,3],\"4\":[null,17],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[1],\"9\":[1],\"10\":[null,2],\"11\":[null,1],\"12\":[null,1],\"13\":[null,1],\"14\":[1],\"15\":[null,4],\"16\":[null,3],\"17\":[null,1],\"18\":[null,1],\"19\":[null,1],\"20\":[null,1],\"21\":[null,1],\"22\":[null,1],\"23\":[null,1],\"24\":[null,3],\"25\":[null,1],\"26\":[null,1],\"27\":[null,1],\"28\":[1],\"29\":[null,2],\"30\":[null,5],\"31\":[null,5],\"32\":[2],\"33\":[null,7],\"34\":[null,7],\"35\":[2],\"36\":[null,8],\"37\":[2],\"38\":[null,7],\"39\":[null,1],\"40\":[null,8],\"41\":[2],\"42\":[null,11],\"43\":[2],\"44\":[null,6],\"45\":[null,7],\"46\":[1],\"47\":[null,10],\"48\":[null,1],\"49\":[null,10],\"50\":[1],\"51\":[null,5],\"52\":[null,1],\"53\":[null,6],\"54\":[null,5],\"55\":[null,1],\"56\":[null,1],\"57\":[null,1],\"58\":[null,1],\"59\":[null,1],\"60\":[null,1],\"61\":[null,1],\"62\":[null,1],\"63\":[null,1],\"64\":[null,18],\"65\":[null,1],\"66\":[1],\"67\":[null,1],\"68\":[1],\"69\":[null,1],\"70\":[null,1],\"71\":[null,1],\"72\":[1],\"73\":[null,2],\"74\":[null,1],\"75\":[1],\"76\":[null,3],\"77\":[null,1],\"78\":[1],\"79\":[null,3],\"80\":[null,1],\"81\":[1],\"82\":[null,3],\"83\":[null,3],\"84\":[null,1],\"85\":[1],\"86\":[null,1],\"87\":[null,1],\"88\":[1],\"89\":[null,1],\"90\":[1],\"91\":[null,1],\"92\":[1],\"93\":[null,1],\"94\":[1],\"95\":[null,1],\"96\":[2],\"97\":[null,1],\"98\":[1],\"99\":[null,1],\"100\":[1],\"101\":[null,1],\"102\":[1],\"103\":[null,2],\"104\":[null,1],\"105\":[1],\"106\":[null,1],\"107\":[null,2],\"108\":[1],\"109\":[null,3],\"110\":[1],\"111\":[null,6],\"112\":[null,4],\"113\":[null,6],\"114\":[null,3],\"115\":[null,5],\"116\":[1],\"117\":[null,3],\"118\":[null,1],\"119\":[null,6],\"120\":[null,7],\"121\":[null,2],\"122\":[null,4],\"123\":[1],\"124\":[null,2],\"125\":[null,1],\"126\":[null,1],\"127\":[null,3],\"128\":[null,2],\"129\":[null,1],\"130\":[null,1],\"131\":[null,1],\"132\":[null,1],\"133\":[null,1],\"134\":[null,4],\"135\":[1],\"136\":[1],\"137\":[null,2],\"138\":[null,13],\"139\":[null,1],\"140\":[null,12],\"141\":[null,2],\"142\":[null,11],\"143\":[null,1],\"144\":[null,11],\"145\":[null,1],\"146\":[null,11],\"147\":[null,2],\"148\":[null,9],\"149\":[null,1],\"150\":[null,8],\"151\":[null,2],\"152\":[null,14],\"153\":[null,2],\"154\":[null,13],\"155\":[1],\"156\":[1],\"157\":[1],\"158\":[1],\"159\":[1],\"160\":[null,4],\"161\":[1],\"162\":[null,10],\"163\":[1],\"164\":[null,8],\"165\":[null,14],\"166\":[null,12],\"167\":[2],\"168\":[null,5],\"169\":[null,4],\"170\":[null,7],\"171\":[null,4],\"172\":[null,4],\"173\":[null,4],\"174\":[2],\"175\":[5],\"176\":[4],\"177\":[null,10],\"178\":[null,6],\"179\":[6],\"180\":[null,10],\"181\":[null,6],\"182\":[6],\"183\":[null,5],\"184\":[null,1],\"185\":[8],\"186\":[null,10],\"187\":[null,6],\"188\":[6],\"189\":[null,9],\"190\":[null,6],\"191\":[null,18],\"192\":[4],\"193\":[null,10],\"194\":[null,6],\"195\":[3],\"196\":[null,10],\"197\":[null,6],\"198\":[1],\"199\":[null,10],\"200\":[null,6],\"201\":[2],\"202\":[null,10],\"203\":[null,6],\"204\":[1],\"205\":[null,5],\"206\":[null,1],\"207\":[2],\"208\":[null,6],\"209\":[null,2],\"210\":[2],\"211\":[null,10],\"212\":[null,6],\"213\":[3],\"214\":[null,22],\"215\":[5],\"216\":[null,5],\"217\":[null,1],\"218\":[3],\"219\":[null,5],\"220\":[null,1],\"221\":[3],\"222\":[null,9],\"223\":[null,5],\"224\":[null,1],\"225\":[null,8],\"226\":[null,4],\"227\":[7],\"228\":[null,5],\"229\":[null,1],\"230\":[null,1],\"231\":[null,6],\"232\":[null,1],\"233\":[2],\"234\":[null,5],\"235\":[null,1],\"236\":[4],\"237\":[null,7],\"238\":[null,1],\"239\":[2],\"240\":[null,6],\"241\":[null,1],\"242\":[4],\"243\":[null,8],\"244\":[null,1],\"245\":[3],\"246\":[null,14],\"247\":[null,9],\"248\":[null,1],\"249\":[null,17],\"250\":[null,8],\"251\":[null,1],\"252\":[null,16],\"253\":[null,8],\"254\":[null,1],\"255\":[null,52],\"256\":[null,8],\"257\":[3],\"258\":[null,11],\"259\":[null,8],\"260\":[null,1],\"261\":[3],\"262\":[null,9],\"263\":[null,11],\"264\":[null,1],\"265\":[5],\"266\":[null,51],\"267\":[null,26],\"268\":[null,17],\"269\":[null,3],\"270\":[null,21],\"271\":[null,25],\"272\":[null,17],\"273\":[null,3],\"274\":[null,20],\"275\":[null,1],\"276\":[null,1],\"277\":[null,1],\"278\":[null,1],\"279\":[null,1],\"280\":[null,1],\"281\":[null,1],\"282\":[null,1],\"283\":[null,3],\"284\":[null,2],\"285\":[null,2],\"286\":[null,2],\"287\":[null,1],\"288\":[null,1],\"289\":[null,1],\"290\":[null,1],\"291\":[null,3],\"292\":[null,1],\"293\":[null,1],\"294\":[null,1],\"295\":[null,1],\"296\":[null,1],\"297\":[null,1],\"298\":[null,1],\"299\":[null,3],\"300\":[null,2],\"301\":[null,2],\"302\":[null,2],\"303\":[5],\"304\":[null,19],\"305\":[null,10],\"306\":[null,6],\"307\":[5],\"308\":[null,12],\"309\":[null,11],\"310\":[null,6],\"311\":[null,21],\"312\":[1],\"313\":[null,6],\"314\":[null,4],\"315\":[null,14],\"316\":[null,1],\"317\":[null,11],\"318\":[null,10],\"319\":[null,1],\"320\":[1],\"321\":[null,18],\"322\":[null,16],\"323\":[null,1],\"324\":[3],\"325\":[null,20],\"326\":[null,19],\"327\":[null,1],\"328\":[1],\"329\":[null,37],\"330\":[null,5],\"331\":[null,6],\"332\":[null,21],\"333\":[null,6],\"334\":[null,12],\"335\":[null,17],\"336\":[null,24],\"337\":[null,1],\"338\":[null,18],\"339\":[null,25],\"340\":[null,30],\"341\":[null,24],\"342\":[null,1],\"343\":[null,12],\"344\":[null,49],\"345\":[1],\"346\":[null,40],\"347\":[null,14],\"348\":[3],\"349\":[2],\"350\":[null,58],\"351\":[null,9],\"352\":[3],\"353\":[null,18],\"354\":[null,22],\"355\":[null,1],\"356\":[1],\"357\":[null,25],\"358\":[null,9],\"359\":[null,9],\"360\":[null,12],\"361\":[null,4],\"362\":[null,15],\"363\":[null,5],\"364\":[null,19],\"365\":[null,10],\"366\":[null,1],\"367\":[2],\"368\":[null,22],\"369\":[null,2],\"370\":[null,13],\"371\":[null,2],\"372\":[null,11],\"373\":[null,1],\"374\":[2],\"375\":[null,17],\"376\":[null,9],\"377\":[4],\"378\":[null,9],\"379\":[null,12],\"380\":[null,19],\"381\":[null,5],\"382\":[null,22],\"383\":[10],\"384\":[null,31],\"385\":[null,39],\"386\":[null,15],\"387\":[null,20],\"388\":[null,6],\"389\":[2],\"390\":[null,11],\"391\":[null,31],\"392\":[1],\"393\":[null,5],\"394\":[null,4],\"395\":[null,3],\"396\":[null,2],\"397\":[null,4],\"398\":[null,1],\"399\":[2],\"400\":[null,5],\"401\":[null,13],\"402\":[null,4],\"403\":[null,3],\"404\":[null,3],\"405\":[null,10],\"406\":[null,12],\"407\":[null,7],\"408\":[null,17],\"409\":[null,4],\"410\":[null,5],\"411\":[null,1],\"412\":[null,5],\"413\":[null,17],\"414\":[null,4],\"415\":[null,1],\"416\":[2],\"417\":[null,5],\"418\":[null,10],\"419\":[null,5],\"420\":[null,10],\"421\":[null,4],\"422\":[null,7],\"423\":[null,2],\"424\":[null,3],\"425\":[null,2],\"426\":[null,6],\"427\":[null,6],\"428\":[null,5],\"429\":[null,11],\"430\":[null,6],\"431\":[null,1],\"432\":[2],\"433\":[null,7],\"434\":[null,4],\"435\":[null,19],\"436\":[null,5],\"437\":[null,3],\"438\":[null,27],\"439\":[null,3],\"440\":[null,3],\"441\":[null,9],\"442\":[null,7],\"443\":[null,10],\"444\":[null,5],\"445\":[null,6],\"446\":[null,1],\"447\":[2],\"448\":[null,4],\"449\":[null,5],\"450\":[null,16],\"451\":[null,5],\"452\":[null,9],\"453\":[null,26],\"454\":[null,2],\"455\":[null,4],\"456\":[null,4],\"457\":[null,10],\"458\":[null,6],\"459\":[null,6],\"460\":[null,1],\"461\":[2],\"462\":[null,7],\"463\":[null,7],\"464\":[null,13],\"465\":[null,9],\"466\":[null,19],\"467\":[null,5],\"468\":[null,4],\"469\":[null,17],\"470\":[null,6],\"471\":[null,2],\"472\":[null,3],\"473\":[null,28],\"474\":[null,5],\"475\":[null,3],\"476\":[null,3],\"477\":[null,2],\"478\":[null,5],\"479\":[null,1],\"480\":[1],\"481\":[null,6],\"482\":[null,6],\"483\":[1],\"484\":[1],\"485\":[null,10],\"486\":[null,6],\"487\":[null,9],\"488\":[null,6],\"489\":[null,1],\"490\":[null,1],\"491\":[null,2],\"492\":[null,2],\"493\":[null,1],\"494\":[null,1],\"495\":[null,2],\"496\":[null,3],\"497\":[1],\"498\":[null,4],\"499\":[null,5],\"500\":[null,4],\"501\":[null,7],\"502\":[1],\"503\":[null,3],\"504\":[null,2],\"505\":[null,2],\"506\":[null,3],\"507\":[null,2],\"508\":[1],\"509\":[null,6],\"510\":[null,2],\"511\":[1],\"512\":[1],\"513\":[null,9],\"514\":[null,2],\"515\":[1],\"516\":[null,12],\"517\":[null,3],\"518\":[null,2],\"519\":[null,1],\"520\":[null,43],\"521\":[null,1],\"522\":[null,34],\"523\":[1],\"524\":[null,11],\"525\":[null,5],\"526\":[null,8],\"527\":[1],\"528\":[1],\"529\":[null,19],\"530\":[null,8],\"531\":[null,2],\"532\":[null,2],\"533\":[1],\"534\":[null,1],\"535\":[null,15],\"536\":[null,3],\"537\":[null,3],\"538\":[null,2],\"539\":[null,1],\"540\":[null,55],\"541\":[null,1],\"542\":[null,35],\"543\":[1],\"544\":[null,10],\"545\":[null,2],\"546\":[1],\"547\":[1],\"548\":[null,6],\"549\":[null,6],\"550\":[null,1],\"551\":[1],\"552\":[null,10],\"553\":[null,20],\"554\":[null,8],\"555\":[null,19],\"556\":[null,9],\"557\":[null,19],\"558\":[null,3],\"559\":[null,12],\"560\":[null,3],\"561\":[null,11],\"562\":[null,1],\"563\":[null,2],\"564\":[null,17],\"565\":[null,2],\"566\":[null,22],\"567\":[2],\"568\":[null,4],\"569\":[null,2],\"570\":[null,4],\"571\":[null,16],\"572\":[null,2],\"573\":[1],\"574\":[null,8],\"575\":[null,10],\"576\":[null,9],\"577\":[null,9],\"578\":[null,2],\"579\":[null,2],\"580\":[1],\"581\":[null,4],\"582\":[null,2],\"583\":[null,2],\"584\":[1],\"585\":[1],\"586\":[null,18],\"587\":[null,8],\"588\":[null,8],\"589\":[null,11],\"590\":[null,1],\"591\":[null,2],\"592\":[null,1],\"593\":[null,1],\"594\":[null,1],\"595\":[null,1],\"596\":[null,5],\"597\":[1],\"598\":[null,4],\"599\":[null,5],\"600\":[null,7],\"601\":[null,5],\"602\":[null,5],\"603\":[null,2],\"604\":[null,2],\"605\":[null,38],\"606\":[1],\"607\":[null,8],\"608\":[null,2],\"609\":[1],\"610\":[null,2],\"611\":[null,2],\"612\":[1],\"613\":[null,8],\"614\":[null,5],\"615\":[null,3],\"616\":[1],\"617\":[null,4],\"618\":[null,2],\"619\":[null,2],\"620\":[null,2],\"621\":[null,1],\"622\":[null,23],\"623\":[null,1],\"624\":[null,29],\"625\":[null,1],\"626\":[null,32],\"627\":[2],\"628\":[null,11],\"629\":[null,2],\"630\":[null,4],\"631\":[null,2],\"632\":[1],\"633\":[null,5],\"634\":[null,3],\"635\":[null,3],\"636\":[null,3],\"637\":[null,5],\"638\":[1],\"639\":[null,4],\"640\":[null,3],\"641\":[null,2],\"642\":[null,2],\"643\":[null,1],\"644\":[null,1],\"645\":[null,14],\"646\":[null,13],\"647\":[null,10],\"648\":[1],\"649\":[null,2],\"650\":[null,2],\"651\":[null,5],\"652\":[null,4],\"653\":[null,2],\"654\":[null,3],\"655\":[null,5],\"656\":[1],\"657\":[null,10],\"658\":[null,2],\"659\":[1],\"660\":[1],\"661\":[null,18],\"662\":[null,19],\"663\":[null,6],\"664\":[null,13],\"665\":[null,5],\"666\":[null,1],\"667\":[null,2],\"668\":[null,3],\"669\":[null,4],\"670\":[null,1],\"671\":[null,2],\"672\":[null,4],\"673\":[null,10],\"674\":[1],\"675\":[null,3],\"676\":[null,6],\"677\":[null,4],\"678\":[null,11],\"679\":[1],\"680\":[null,4],\"681\":[null,4],\"682\":[null,6],\"683\":[null,6],\"684\":[null,4],\"685\":[null,2],\"686\":[1],\"687\":[null,4],\"688\":[null,6],\"689\":[1],\"690\":[null,3],\"691\":[null,2],\"692\":[null,3],\"693\":[null,13],\"694\":[null,2],\"695\":[null,17],\"696\":[null,2],\"697\":[null,14],\"698\":[1],\"699\":[null,3],\"700\":[null,14],\"701\":[null,4],\"702\":[1],\"703\":[null,10],\"704\":[null,3],\"705\":[null,2],\"706\":[null,3],\"707\":[null,19],\"708\":[null,2],\"709\":[null,40],\"710\":[null,2],\"711\":[null,24],\"712\":[null,2],\"713\":[null,33],\"714\":[3],\"715\":[null,4],\"716\":[null,2],\"717\":[null,2],\"718\":[null,8],\"719\":[null,7],\"720\":[null,8],\"721\":[1],\"722\":[null,5],\"723\":[null,4],\"724\":[null,4],\"725\":[null,5],\"726\":[null,5],\"727\":[null,5],\"728\":[null,3],\"729\":[null,8],\"730\":[1],\"731\":[null,7],\"732\":[null,7],\"733\":[null,2],\"734\":[null,3],\"735\":[null,3],\"736\":[null,2],\"737\":[null,3],\"738\":[1],\"739\":[1],\"740\":[null,17],\"741\":[null,11],\"742\":[null,5],\"743\":[null,6],\"744\":[null,11],\"745\":[null,12],\"746\":[null,9],\"747\":[null,1],\"748\":[null,3],\"749\":[null,6],\"750\":[null,6],\"751\":[null,9],\"752\":[null,4],\"753\":[null,1],\"754\":[null,3],\"755\":[null,9],\"756\":[1],\"757\":[null,3],\"758\":[null,2],\"759\":[null,7],\"760\":[null,7],\"761\":[null,6],\"762\":[null,8],\"763\":[null,2],\"764\":[null,2],\"765\":[null,2],\"766\":[null,40],\"767\":[1],\"768\":[null,8],\"769\":[null,6],\"770\":[null,8],\"771\":[null,6],\"772\":[null,5],\"773\":[null,2],\"774\":[null,2],\"775\":[null,2],\"776\":[null,1],\"777\":[null,40],\"778\":[null,1],\"779\":[null,17],\"780\":[null,1],\"781\":[null,40],\"782\":[null,1],\"783\":[null,46],\"784\":[2],\"785\":[null,5],\"786\":[null,2],\"787\":[null,5],\"788\":[null,8],\"789\":[null,14],\"790\":[null,7],\"791\":[null,2],\"792\":[1],\"793\":[null,15],\"794\":[null,5],\"795\":[null,5],\"796\":[null,8],\"797\":[1],\"798\":[null,11],\"799\":[null,2],\"800\":[null,2],\"801\":[null,3],\"802\":[null,2],\"803\":[null,7],\"804\":[1],\"805\":[1],\"806\":[null,17],\"807\":[null,12],\"808\":[null,3],\"809\":[null,4],\"810\":[null,1],\"811\":[null,4],\"812\":[null,5],\"813\":[null,1],\"814\":[null,3],\"815\":[null,1],\"816\":[null,1],\"817\":[1],\"818\":[null,13],\"819\":[null,6],\"820\":[null,13],\"821\":[null,2],\"822\":[1],\"823\":[null,16],\"824\":[null,2],\"825\":[1],\"826\":[null,9],\"827\":[null,2],\"828\":[1],\"829\":[null,8],\"830\":[null,2],\"831\":[null,1],\"832\":[null,51],\"833\":[null,1],\"834\":[null,51],\"835\":[1],\"836\":[null,7],\"837\":[null,2],\"838\":[1],\"839\":[null,2],\"840\":[null,2],\"841\":[null,2],\"842\":[null,3],\"843\":[null,10],\"844\":[null,9],\"845\":[1],\"846\":[null,3],\"847\":[null,2],\"848\":[null,1],\"849\":[null,1],\"850\":[null,33],\"851\":[null,1],\"852\":[null,36],\"853\":[null,1],\"854\":[null,47],\"855\":[null,1],\"856\":[null,25],\"857\":[null,1],\"858\":[null,41],\"859\":[2],\"860\":[null,5],\"861\":[null,2],\"862\":[null,2],\"863\":[1],\"864\":[null,3],\"865\":[null,5],\"866\":[null,5],\"867\":[null,6],\"868\":[null,6],\"869\":[1],\"870\":[null,3],\"871\":[null,1],\"872\":[null,2],\"873\":[1],\"874\":[1],\"875\":[null,16],\"876\":[null,7],\"877\":[null,13],\"878\":[null,1],\"879\":[null,5],\"880\":[null,2],\"881\":[null,1],\"882\":[null,1],\"883\":[null,3],\"884\":[1],\"885\":[null,14],\"886\":[null,2],\"887\":[null,4],\"888\":[null,5],\"889\":[null,6],\"890\":[null,5],\"891\":[null,2],\"892\":[null,2],\"893\":[null,2],\"894\":[null,36],\"895\":[1],\"896\":[null,10],\"897\":[null,5],\"898\":[null,4],\"899\":[null,7],\"900\":[4],\"901\":[null,1],\"902\":[null,2],\"903\":[null,3],\"904\":[null,3],\"905\":[null,4],\"906\":[null,7],\"907\":[null,7],\"908\":[null,9],\"909\":[4],\"910\":[null,12],\"911\":[null,2],\"912\":[null,7],\"913\":[null,4],\"914\":[null,2],\"915\":[null,5],\"916\":[null,2],\"917\":[1],\"918\":[null,2],\"919\":[null,2],\"920\":[null,2],\"921\":[null,1],\"922\":[null,24],\"923\":[null,2],\"924\":[null,27],\"925\":[null,1],\"926\":[null,37],\"927\":[null,1],\"928\":[null,42],\"929\":[3],\"930\":[null,7],\"931\":[null,2],\"932\":[null,4],\"933\":[null,7],\"934\":[null,7],\"935\":[null,9],\"936\":[null,7],\"937\":[null,7],\"938\":[1],\"939\":[null,2],\"940\":[null,4],\"941\":[null,3],\"942\":[null,2],\"943\":[null,24],\"944\":[1],\"945\":[1],\"946\":[null,3],\"947\":[1],\"948\":[null,1],\"949\":[null,1],\"950\":[null,1],\"951\":[null,1],\"952\":[null,1],\"953\":[null,1],\"954\":[null,1],\"955\":[null,4],\"956\":[null,1],\"957\":[null,1],\"958\":[null,2],\"959\":[null,1],\"960\":[null,1],\"961\":[null,4],\"962\":[null,2],\"963\":[null,1],\"964\":[null,1],\"965\":[null,1],\"966\":[null,4],\"967\":[null,1],\"968\":[null,2],\"969\":[null,1],\"970\":[null,1],\"971\":[null,4],\"972\":[null,1],\"973\":[null,2],\"974\":[null,1],\"975\":[null,1],\"976\":[1],\"977\":[null,1],\"978\":[null,1],\"979\":[null,1],\"980\":[null,1],\"981\":[null,1],\"982\":[null,1],\"983\":[null,1],\"984\":[null,4],\"985\":[null,1],\"986\":[null,2],\"987\":[null,2],\"988\":[null,1],\"989\":[null,1],\"990\":[null,4],\"991\":[null,1],\"992\":[null,2],\"993\":[null,1],\"994\":[null,1],\"995\":[null,4],\"996\":[null,1],\"997\":[null,1],\"998\":[null,2],\"999\":[null,1],\"1000\":[null,4],\"1001\":[null,1],\"1002\":[null,2],\"1003\":[null,1],\"1004\":[null,1],\"1005\":[null,4],\"1006\":[null,4],\"1007\":[null,2],\"1008\":[null,1],\"1009\":[null,1],\"1010\":[null,4],\"1011\":[null,1],\"1012\":[null,1],\"1013\":[null,1],\"1014\":[null,1],\"1015\":[null,4],\"1016\":[null,1],\"1017\":[null,1],\"1018\":[null,1],\"1019\":[null,1],\"1020\":[1],\"1021\":[null,1],\"1022\":[null,1],\"1023\":[null,1],\"1024\":[null,1],\"1025\":[null,1],\"1026\":[null,1],\"1027\":[null,1],\"1028\":[null,4],\"1029\":[null,2],\"1030\":[null,2],\"1031\":[null,2],\"1032\":[null,1],\"1033\":[null,1],\"1034\":[null,4],\"1035\":[null,2],\"1036\":[null,2],\"1037\":[null,1],\"1038\":[null,1],\"1039\":[null,6],\"1040\":[null,6],\"1041\":[null,2],\"1042\":[null,1],\"1043\":[null,1],\"1044\":[null,4],\"1045\":[null,1],\"1046\":[null,2],\"1047\":[null,1],\"1048\":[null,1],\"1049\":[null,4],\"1050\":[null,3],\"1051\":[null,2],\"1052\":[null,1],\"1053\":[null,1],\"1054\":[null,4],\"1055\":[null,1],\"1056\":[null,2],\"1057\":[null,1],\"1058\":[null,1],\"1059\":[null,4],\"1060\":[null,2],\"1061\":[null,2],\"1062\":[null,2],\"1063\":[null,1],\"1064\":[null,4],\"1065\":[null,2],\"1066\":[null,2],\"1067\":[null,1],\"1068\":[null,1],\"1069\":[null,4],\"1070\":[null,4],\"1071\":[null,3],\"1072\":[null,1],\"1073\":[null,1],\"1074\":[null,4],\"1075\":[null,2],\"1076\":[null,1],\"1077\":[null,1],\"1078\":[null,1],\"1079\":[null,4],\"1080\":[null,2],\"1081\":[null,2],\"1082\":[null,1],\"1083\":[null,1],\"1084\":[null,4],\"1085\":[null,2],\"1086\":[null,2],\"1087\":[null,2],\"1088\":[null,1],\"1089\":[null,1],\"1090\":[null,9],\"1091\":[1],\"1092\":[1],\"1093\":[null,6],\"1094\":[null,14],\"1095\":[null,13],\"1096\":[null,11],\"1097\":[null,6],\"1098\":[null,1],\"1099\":[null,2],\"1100\":[null,3],\"1101\":[null,4],\"1102\":[null,1],\"1103\":[null,2],\"1104\":[null,3],\"1105\":[1],\"1106\":[null,8],\"1107\":[1],\"1108\":[null,4],\"1109\":[null,4],\"1110\":[null,6],\"1111\":[null,4],\"1112\":[null,2],\"1113\":[1],\"1114\":[null,34],\"1115\":[1],\"1116\":[null,9],\"1117\":[null,13],\"1118\":[1],\"1119\":[1],\"1120\":[null,2],\"1121\":[1],\"1122\":[null,14],\"1123\":[null,10],\"1124\":[null,8],\"1125\":[1],\"1126\":[null,12],\"1127\":[null,3],\"1128\":[null,2],\"1129\":[null,2],\"1130\":[null,2],\"1131\":[null,2],\"1132\":[null,2],\"1133\":[null,8],\"1134\":[null,46],\"1135\":[null,1],\"1136\":[null,39],\"1137\":[null,2],\"1138\":[null,16],\"1139\":[2],\"1140\":[null,7],\"1141\":[null,2],\"1142\":[null,1],\"1143\":[null,2],\"1144\":[1],\"1145\":[null,3],\"1146\":[null,3],\"1147\":[null,3],\"1148\":[null,4],\"1149\":[null,9],\"1150\":[null,5],\"1151\":[1],\"1152\":[null,2],\"1153\":[null,2],\"1154\":[null,2],\"1155\":[null,3],\"1156\":[1],\"1157\":[1],\"1158\":[null,4],\"1159\":[null,18],\"1160\":[null,7],\"1161\":[null,10],\"1162\":[null,1],\"1163\":[null,4],\"1164\":[null,1],\"1165\":[null,3],\"1166\":[null,1],\"1167\":[null,2],\"1168\":[4],\"1169\":[1],\"1170\":[null,8],\"1171\":[null,5],\"1172\":[null,13],\"1173\":[null,5],\"1174\":[null,1],\"1175\":[null,5],\"1176\":[null,2],\"1177\":[null,2],\"1178\":[null,1],\"1179\":[null,7],\"1180\":[null,3],\"1181\":[null,4],\"1182\":[null,4],\"1183\":[null,1],\"1184\":[null,6],\"1185\":[null,4],\"1186\":[null,3],\"1187\":[null,1],\"1188\":[null,2],\"1189\":[1],\"1190\":[null,3],\"1191\":[null,6],\"1192\":[null,5],\"1193\":[null,1],\"1194\":[null,3],\"1195\":[null,2],\"1196\":[null,3],\"1197\":[null,28],\"1198\":[null,4],\"1199\":[null,19],\"1200\":[null,4],\"1201\":[null,1],\"1202\":[null,2],\"1203\":[null,4],\"1204\":[null,1],\"1205\":[null,10],\"1206\":[null,12],\"1207\":[1],\"1208\":[null,6],\"1209\":[null,2],\"1210\":[null,4],\"1211\":[null,2],\"1212\":[null,47],\"1213\":[null,5],\"1214\":[null,22],\"1215\":[null,6],\"1216\":[4],\"1217\":[1],\"1218\":[null,5],\"1219\":[null,1],\"1220\":[null,2],\"1221\":[null,3],\"1222\":[null,5],\"1223\":[null,1],\"1224\":[null,2],\"1225\":[null,1],\"1226\":[null,4],\"1227\":[null,7],\"1228\":[null,1],\"1229\":[null,7],\"1230\":[null,4],\"1231\":[null,4],\"1232\":[null,5],\"1233\":[null,2],\"1234\":[null,2],\"1235\":[1],\"1236\":[null,9],\"1237\":[null,2],\"1238\":[null,12],\"1239\":[null,2],\"1240\":[null,2],\"1241\":[null,4],\"1242\":[null,1],\"1243\":[null,2],\"1244\":[null,1],\"1245\":[null,2],\"1246\":[null,35],\"1247\":[null,2],\"1248\":[null,18],\"1249\":[null,2],\"1250\":[null,44],\"1251\":[null,15],\"1252\":[3],\"1253\":[null,11],\"1254\":[null,14],\"1255\":[null,15],\"1256\":[null,5],\"1257\":[null,1],\"1258\":[null,1],\"1259\":[null,1],\"1260\":[null,1],\"1261\":[null,1],\"1262\":[null,1],\"1263\":[null,1],\"1264\":[null,1],\"1265\":[null,1],\"1266\":[null,1],\"1267\":[null,1],\"1268\":[null,1],\"1269\":[null,1],\"1270\":[null,1],\"1271\":[null,2],\"1272\":[null,6],\"1273\":[null,2],\"1274\":[null,2],\"1275\":[4],\"1276\":[1],\"1277\":[null,5],\"1278\":[null,4],\"1279\":[null,4],\"1280\":[null,8],\"1281\":[null,1],\"1282\":[null,3],\"1283\":[null,3],\"1284\":[null,3],\"1285\":[null,5],\"1286\":[null,1],\"1287\":[null,4],\"1288\":[null,1],\"1289\":[null,7],\"1290\":[null,5],\"1291\":[null,5],\"1292\":[null,5],\"1293\":[null,2],\"1294\":[null,2],\"1295\":[null,2],\"1296\":[null,2],\"1297\":[1],\"1298\":[null,6],\"1299\":[null,2],\"1300\":[null,5],\"1301\":[null,4],\"1302\":[null,14],\"1303\":[null,4],\"1304\":[null,26],\"1305\":[null,4],\"1306\":[null,26],\"1307\":[null,6],\"1308\":[null,22],\"1309\":[null,2],\"1310\":[null,34],\"1311\":[4],\"1312\":[null,6],\"1313\":[null,38],\"1314\":[null,2],\"1315\":[null,89],\"1316\":[1],\"1317\":[null,4],\"1318\":[null,5],\"1319\":[null,2],\"1320\":[null,9],\"1321\":[null,5],\"1322\":[null,1],\"1323\":[2],\"1324\":[null,16],\"1325\":[null,16],\"1326\":[3],\"1327\":[null,15],\"1328\":[null,10],\"1329\":[null,11],\"1330\":[2],\"1331\":[null,7],\"1332\":[null,3],\"1333\":[null,13],\"1334\":[null,7],\"1335\":[null,10],\"1336\":[null,20],\"1337\":[null,4],\"1338\":[null,25],\"1339\":[null,3],\"1340\":[null,11],\"1341\":[null,21],\"1342\":[null,3],\"1343\":[null,17],\"1344\":[null,14],\"1345\":[null,20],\"1346\":[4],\"1347\":[null,11],\"1348\":[1],\"1349\":[null,16],\"1350\":[null,3],\"1351\":[null,30],\"1352\":[null,5],\"1353\":[null,20],\"1354\":[1],\"1355\":[null,15],\"1356\":[null,53],\"1357\":[null,22],\"1358\":[1],\"1359\":[null,20],\"1360\":[null,49],\"1361\":[1],\"1362\":[null,10],\"1363\":[null,17],\"1364\":[null,23],\"1365\":[null,5],\"1366\":[null,83],\"1367\":[null,2],\"1368\":[null,14],\"1369\":[null,3],\"1370\":[1],\"1371\":[1],\"1372\":[null,5],\"1373\":[null,11],\"1374\":[null,7],\"1375\":[null,9],\"1376\":[null,8],\"1377\":[null,7],\"1378\":[null,1],\"1379\":[null,4],\"1380\":[null,1],\"1381\":[null,4],\"1382\":[null,1],\"1383\":[1],\"1384\":[1],\"1385\":[null,13],\"1386\":[null,7],\"1387\":[null,3],\"1388\":[null,16],\"1389\":[null,11],\"1390\":[null,3],\"1391\":[1],\"1392\":[null,2],\"1393\":[null,5],\"1394\":[null,5],\"1395\":[null,6],\"1396\":[null,10],\"1397\":[null,2],\"1398\":[null,3],\"1399\":[null,4],\"1400\":[null,7],\"1401\":[null,5],\"1402\":[null,5],\"1403\":[null,2],\"1404\":[null,2],\"1405\":[null,2],\"1406\":[null,69],\"1407\":[1],\"1408\":[null,9],\"1409\":[null,1],\"1410\":[null,1],\"1411\":[null,1],\"1412\":[1],\"1413\":[null,2],\"1414\":[null,2],\"1415\":[1],\"1416\":[null,6],\"1417\":[null,10],\"1418\":[null,4],\"1419\":[null,3],\"1420\":[1],\"1421\":[null,2],\"1422\":[null,2],\"1423\":[null,2],\"1424\":[null,3],\"1425\":[null,14],\"1426\":[null,1],\"1427\":[null,32],\"1428\":[null,2],\"1429\":[null,36],\"1430\":[null,2],\"1431\":[null,36],\"1432\":[3],\"1433\":[null,5],\"1434\":[null,2],\"1435\":[null,2],\"1436\":[null,61],\"1437\":[1],\"1438\":[null,5],\"1439\":[null,4],\"1440\":[null,7],\"1441\":[null,3],\"1442\":[null,5],\"1443\":[null,3],\"1444\":[null,5],\"1445\":[1],\"1446\":[null,8],\"1447\":[null,7],\"1448\":[null,5],\"1449\":[null,2],\"1450\":[null,3],\"1451\":[null,2],\"1452\":[1],\"1453\":[1],\"1454\":[null,6],\"1455\":[null,11],\"1456\":[null,12],\"1457\":[null,2],\"1458\":[null,1],\"1459\":[null,3],\"1460\":[null,3],\"1461\":[null,1],\"1462\":[null,5],\"1463\":[null,5],\"1464\":[null,4],\"1465\":[1],\"1466\":[null,7],\"1467\":[null,2],\"1468\":[null,9],\"1469\":[null,7],\"1470\":[null,7],\"1471\":[null,6],\"1472\":[null,5],\"1473\":[null,2],\"1474\":[null,2],\"1475\":[null,2],\"1476\":[null,27],\"1477\":[1],\"1478\":[null,13],\"1479\":[null,16],\"1480\":[null,1],\"1481\":[null,2],\"1482\":[1],\"1483\":[null,2],\"1484\":[null,2],\"1485\":[null,2],\"1486\":[null,1],\"1487\":[null,72],\"1488\":[null,1],\"1489\":[null,80],\"1490\":[null,1],\"1491\":[null,52],\"1492\":[1],\"1493\":[null,5],\"1494\":[null,6],\"1495\":[1],\"1496\":[null,3],\"1497\":[null,2],\"1498\":[null,2],\"1499\":[null,5],\"1500\":[null,13],\"1501\":[1],\"1502\":[1],\"1503\":[null,14],\"1504\":[null,6],\"1505\":[null,10],\"1506\":[null,7],\"1507\":[null,1],\"1508\":[null,1],\"1509\":[null,2],\"1510\":[null,2],\"1511\":[null,2],\"1512\":[null,2],\"1513\":[null,1],\"1514\":[null,3],\"1515\":[1],\"1516\":[null,6],\"1517\":[null,2],\"1518\":[null,6],\"1519\":[null,5],\"1520\":[null,9],\"1521\":[null,6],\"1522\":[null,2],\"1523\":[null,2],\"1524\":[null,2],\"1525\":[null,65],\"1526\":[1],\"1527\":[null,2],\"1528\":[null,4],\"1529\":[null,2],\"1530\":[null,2],\"1531\":[null,2],\"1532\":[null,1],\"1533\":[null,17],\"1534\":[null,1],\"1535\":[null,47],\"1536\":[null,1],\"1537\":[null,55],\"1538\":[null,1],\"1539\":[null,45],\"1540\":[null,1],\"1541\":[null,23],\"1542\":[3],\"1543\":[null,5],\"1544\":[null,2],\"1545\":[null,2],\"1546\":[null,2],\"1547\":[null,1],\"1548\":[null,7],\"1549\":[null,6],\"1550\":[null,7],\"1551\":[null,2],\"1552\":[null,4],\"1553\":[1],\"1554\":[null,4],\"1555\":[null,4],\"1556\":[null,16],\"1557\":[null,6],\"1558\":[1],\"1559\":[null,4],\"1560\":[null,1],\"1561\":[null,1],\"1562\":[null,1],\"1563\":[null,4],\"1564\":[1],\"1565\":[1],\"1566\":[null,13],\"1567\":[null,3],\"1568\":[null,17],\"1569\":[null,26],\"1570\":[null,28],\"1571\":[null,1],\"1572\":[null,2],\"1573\":[null,2],\"1574\":[null,3],\"1575\":[null,1],\"1576\":[null,5],\"1577\":[1],\"1578\":[null,2],\"1579\":[null,5],\"1580\":[null,10],\"1581\":[null,7],\"1582\":[null,7],\"1583\":[null,2],\"1584\":[null,2],\"1585\":[null,2],\"1586\":[null,54],\"1587\":[1],\"1588\":[null,6],\"1589\":[null,11],\"1590\":[1],\"1591\":[null,2],\"1592\":[null,3],\"1593\":[null,5],\"1594\":[null,4],\"1595\":[null,7],\"1596\":[1],\"1597\":[null,2],\"1598\":[null,2],\"1599\":[null,2],\"1600\":[null,1],\"1601\":[null,62],\"1602\":[null,1],\"1603\":[null,66],\"1604\":[null,1],\"1605\":[null,37],\"1606\":[1],\"1607\":[null,4],\"1608\":[null,3],\"1609\":[null,3],\"1610\":[null,4],\"1611\":[1],\"1612\":[null,3],\"1613\":[null,1],\"1614\":[null,2],\"1615\":[1],\"1616\":[1],\"1617\":[null,13],\"1618\":[null,2],\"1619\":[null,11],\"1620\":[null,18],\"1621\":[null,1],\"1622\":[null,2],\"1623\":[null,3],\"1624\":[null,5],\"1625\":[null,1],\"1626\":[null,4],\"1627\":[1],\"1628\":[null,2],\"1629\":[null,2],\"1630\":[null,7],\"1631\":[null,6],\"1632\":[null,6],\"1633\":[null,2],\"1634\":[null,2],\"1635\":[null,2],\"1636\":[null,41],\"1637\":[1],\"1638\":[null,9],\"1639\":[1],\"1640\":[null,2],\"1641\":[null,6],\"1642\":[null,5],\"1643\":[null,3],\"1644\":[1],\"1645\":[null,2],\"1646\":[null,2],\"1647\":[null,2],\"1648\":[null,1],\"1649\":[null,19],\"1650\":[null,1],\"1651\":[null,16],\"1652\":[null,1],\"1653\":[null,34],\"1654\":[null,1],\"1655\":[null,34],\"1656\":[1],\"1657\":[null,2],\"1658\":[null,2],\"1659\":[null,4],\"1660\":[null,2],\"1661\":[1],\"1662\":[null,4],\"1663\":[null,2],\"1664\":[null,10],\"1665\":[1],\"1666\":[1],\"1667\":[null,16],\"1668\":[null,13],\"1669\":[null,2],\"1670\":[null,1],\"1671\":[null,3],\"1672\":[null,1],\"1673\":[null,1],\"1674\":[null,2],\"1675\":[null,3],\"1676\":[1],\"1677\":[null,4],\"1678\":[null,2],\"1679\":[null,7],\"1680\":[null,8],\"1681\":[null,6],\"1682\":[null,6],\"1683\":[null,2],\"1684\":[null,2],\"1685\":[null,2],\"1686\":[null,51],\"1687\":[1],\"1688\":[null,5],\"1689\":[null,3],\"1690\":[null,2],\"1691\":[null,2],\"1692\":[1],\"1693\":[1],\"1694\":[null,4],\"1695\":[null,2],\"1696\":[null,2],\"1697\":[null,5],\"1698\":[null,7],\"1699\":[null,2],\"1700\":[null,3],\"1701\":[1],\"1702\":[null,46],\"1703\":[null,1],\"1704\":[null,32],\"1705\":[1],\"1706\":[null,1],\"1707\":[null,3],\"1708\":[null,3],\"1709\":[null,9],\"1710\":[null,3],\"1711\":[1],\"1712\":[null,2],\"1713\":[null,2],\"1714\":[null,2],\"1715\":[null,1],\"1716\":[null,41],\"1717\":[null,1],\"1718\":[null,72],\"1719\":[null,1],\"1720\":[null,33],\"1721\":[null,15],\"1722\":[2],\"1723\":[null,5],\"1724\":[null,2],\"1725\":[null,3],\"1726\":[null,10],\"1727\":[null,4],\"1728\":[null,7],\"1729\":[1],\"1730\":[null,6],\"1731\":[null,2],\"1732\":[null,2],\"1733\":[null,3],\"1734\":[null,4],\"1735\":[null,5],\"1736\":[1],\"1737\":[1],\"1738\":[null,7],\"1739\":[null,8],\"1740\":[null,4],\"1741\":[null,7],\"1742\":[null,1],\"1743\":[null,5],\"1744\":[null,7],\"1745\":[null,1],\"1746\":[null,3],\"1747\":[null,5],\"1748\":[null,9],\"1749\":[1],\"1750\":[null,2],\"1751\":[null,5],\"1752\":[null,4],\"1753\":[null,6],\"1754\":[null,2],\"1755\":[1],\"1756\":[null,12],\"1757\":[1],\"1758\":[null,3],\"1759\":[null,2],\"1760\":[null,3],\"1761\":[null,27],\"1762\":[null,3],\"1763\":[null,27],\"1764\":[1],\"1765\":[null,2],\"1766\":[null,4],\"1767\":[null,3],\"1768\":[null,18],\"1769\":[1],\"1770\":[null,3],\"1771\":[null,3],\"1772\":[null,51],\"1773\":[null,3],\"1774\":[null,33],\"1775\":[2],\"1776\":[null,6],\"1777\":[null,2],\"1778\":[2],\"1779\":[null,1],\"1780\":[null,3],\"1781\":[null,10],\"1782\":[null,1],\"1783\":[null,8],\"1784\":[null,1],\"1785\":[null,1],\"1786\":[null,8],\"1787\":[null,5],\"1788\":[null,7],\"1789\":[null,1],\"1790\":[null,4],\"1791\":[null,1],\"1792\":[null,2],\"1793\":[null,31],\"1794\":[null,2],\"1795\":[null,70],\"1796\":[null,2],\"1797\":[null,35],\"1798\":[null,7],\"1799\":[null,13],\"1800\":[null,3],\"1801\":[1],\"1802\":[null,3],\"1803\":[null,2],\"1804\":[null,4],\"1805\":[null,1],\"1806\":[null,8],\"1807\":[1],\"1808\":[1],\"1809\":[null,13],\"1810\":[null,9],\"1811\":[null,11],\"1812\":[null,3],\"1813\":[null,13],\"1814\":[null,1],\"1815\":[null,1],\"1816\":[null,1],\"1817\":[null,3],\"1818\":[null,1],\"1819\":[null,1],\"1820\":[null,2],\"1821\":[null,1],\"1822\":[null,2],\"1823\":[null,2],\"1824\":[1],\"1825\":[1],\"1826\":[null,6],\"1827\":[null,2],\"1828\":[null,4],\"1829\":[null,7],\"1830\":[null,7],\"1831\":[null,2],\"1832\":[null,5],\"1833\":[1],\"1834\":[null,2],\"1835\":[null,4],\"1836\":[null,5],\"1837\":[null,1],\"1838\":[null,4],\"1839\":[null,3],\"1840\":[null,2],\"1841\":[null,1],\"1842\":[null,34],\"1843\":[null,1],\"1844\":[null,25],\"1845\":[1],\"1846\":[null,3],\"1847\":[null,5],\"1848\":[1],\"1849\":[1],\"1850\":[null,5],\"1851\":[null,7],\"1852\":[null,5],\"1853\":[3],\"1854\":[null,6],\"1855\":[null,7],\"1856\":[null,10],\"1857\":[null,1],\"1858\":[null,5],\"1859\":[null,5],\"1860\":[null,7],\"1861\":[null,6],\"1862\":[null,4],\"1863\":[null,2],\"1864\":[1],\"1865\":[null,5],\"1866\":[null,1],\"1867\":[null,2],\"1868\":[null,1],\"1869\":[null,21],\"1870\":[null,1],\"1871\":[null,65],\"1872\":[null,1],\"1873\":[null,38],\"1874\":[2],\"1875\":[2],\"1876\":[null,12],\"1877\":[null,6],\"1878\":[null,13],\"1879\":[null,4],\"1880\":[null,4],\"1881\":[null,4],\"1882\":[null,5],\"1883\":[null,2],\"1884\":[null,1],\"1885\":[null,1],\"1886\":[null,3],\"1887\":[null,1],\"1888\":[null,2],\"1889\":[null,1],\"1890\":[null,1],\"1891\":[null,1],\"1892\":[null,4],\"1893\":[null,5],\"1894\":[null,7],\"1895\":[null,6],\"1896\":[null,6],\"1897\":[2],\"1898\":[null,4],\"1899\":[null,2],\"1900\":[null,1],\"1901\":[null,16],\"1902\":[null,2],\"1903\":[null,66],\"1904\":[null,1],\"1905\":[null,31],\"1906\":[null,8],\"1907\":[null,6],\"1908\":[1],\"1909\":[null,1],\"1910\":[null,3],\"1911\":[null,1],\"1912\":[null,9],\"1913\":[null,1],\"1914\":[null,4],\"1915\":[null,1],\"1916\":[null,3],\"1917\":[1],\"1918\":[null,6],\"1919\":[null,3],\"1920\":[null,7],\"1921\":[null,7],\"1922\":[null,2],\"1923\":[null,7],\"1924\":[null,6],\"1925\":[1],\"1926\":[1],\"1927\":[null,15],\"1928\":[null,16],\"1929\":[null,14],\"1930\":[null,10],\"1931\":[null,2],\"1932\":[null,1],\"1933\":[null,3],\"1934\":[null,3],\"1935\":[null,4],\"1936\":[null,8],\"1937\":[null,5],\"1938\":[null,1],\"1939\":[null,4],\"1940\":[null,3],\"1941\":[null,4],\"1942\":[1],\"1943\":[null,2],\"1944\":[null,5],\"1945\":[null,8],\"1946\":[null,6],\"1947\":[null,9],\"1948\":[null,2],\"1949\":[null,2],\"1950\":[null,2],\"1951\":[null,2],\"1952\":[null,1],\"1953\":[null,45],\"1954\":[3],\"1955\":[null,1],\"1956\":[null,7],\"1957\":[null,8],\"1958\":[null,8],\"1959\":[null,7],\"1960\":[null,1],\"1961\":[null,6],\"1962\":[null,7],\"1963\":[null,2],\"1964\":[null,1],\"1965\":[null,5],\"1966\":[null,3],\"1967\":[1],\"1968\":[null,2],\"1969\":[null,2],\"1970\":[null,2],\"1971\":[null,1],\"1972\":[null,54],\"1973\":[null,1],\"1974\":[null,22],\"1975\":[null,1],\"1976\":[null,33],\"1977\":[null,5],\"1978\":[1],\"1979\":[null,3],\"1980\":[null,2],\"1981\":[null,11],\"1982\":[null,3],\"1983\":[1],\"1984\":[null,2],\"1985\":[null,2],\"1986\":[null,2],\"1987\":[null,2],\"1988\":[1],\"1989\":[1],\"1990\":[null,8],\"1991\":[null,2],\"1992\":[null,1],\"1993\":[null,1],\"1994\":[null,3],\"1995\":[null,1],\"1996\":[null,1],\"1997\":[null,1],\"1998\":[null,1],\"1999\":[3],\"2000\":[1],\"2001\":[null,33],\"2002\":[null,18],\"2003\":[null,5],\"2004\":[null,4],\"2005\":[null,1],\"2006\":[null,3],\"2007\":[1],\"2008\":[null,5],\"2009\":[null,3],\"2010\":[null,3],\"2011\":[null,3],\"2012\":[null,5],\"2013\":[1],\"2014\":[null,2],\"2015\":[null,9],\"2016\":[null,22],\"2017\":[null,6],\"2018\":[null,2],\"2019\":[null,9],\"2020\":[null,28],\"2021\":[null,6],\"2022\":[null,2],\"2023\":[null,3],\"2024\":[null,4],\"2025\":[null,28],\"2026\":[1],\"2027\":[null,2],\"2028\":[null,2],\"2029\":[null,1],\"2030\":[null,6],\"2031\":[3],\"2032\":[1],\"2033\":[null,8],\"2034\":[null,4],\"2035\":[null,3],\"2036\":[null,2],\"2037\":[null,15],\"2038\":[null,14],\"2039\":[null,5],\"2040\":[null,2],\"2041\":[null,4],\"2042\":[1],\"2043\":[null,6],\"2044\":[null,3],\"2045\":[null,3],\"2046\":[null,10],\"2047\":[null,3],\"2048\":[null,4],\"2049\":[1],\"2050\":[null,10],\"2051\":[null,1],\"2052\":[null,43],\"2053\":[null,15],\"2054\":[null,1],\"2055\":[null,10],\"2056\":[null,5],\"2057\":[null,2],\"2058\":[null,52],\"2059\":[3],\"2060\":[1],\"2061\":[null,6],\"2062\":[null,2],\"2063\":[null,2],\"2064\":[null,4],\"2065\":[null,9],\"2066\":[null,6],\"2067\":[null,5],\"2068\":[1],\"2069\":[null,2],\"2070\":[null,1],\"2071\":[null,1],\"2072\":[null,1],\"2073\":[null,1],\"2074\":[1],\"2075\":[null,4],\"2076\":[null,2],\"2077\":[null,12],\"2078\":[null,24],\"2079\":[null,8],\"2080\":[null,16],\"2081\":[null,1],\"2082\":[null,36],\"2083\":[null,7],\"2084\":[1],\"2085\":[null,3],\"2086\":[null,1],\"2087\":[null,1],\"2088\":[null,2],\"2089\":[null,64],\"2090\":[null,2],\"2091\":[null,5],\"2092\":[1],\"2093\":[null,3],\"2094\":[null,6],\"2095\":[null,2],\"2096\":[3],\"2097\":[2],\"2098\":[null,7],\"2099\":[null,12],\"2100\":[null,4],\"2101\":[null,2],\"2102\":[1],\"2103\":[null,34],\"2104\":[null,21],\"2105\":[null,5],\"2106\":[null,11],\"2107\":[null,5],\"2108\":[null,1],\"2109\":[null,15],\"2110\":[1],\"2111\":[null,2],\"2112\":[null,1],\"2113\":[null,1],\"2114\":[null,3],\"2115\":[null,5],\"2116\":[1],\"2117\":[null,2],\"2118\":[null,47],\"2119\":[null,1],\"2120\":[null,11],\"2121\":[null,8],\"2122\":[null,2],\"2123\":[null,2],\"2124\":[null,69],\"2125\":[3],\"2126\":[1],\"2127\":[null,32],\"2128\":[null,9],\"2129\":[null,10],\"2130\":[null,8],\"2131\":[null,4],\"2132\":[1],\"2133\":[null,5],\"2134\":[null,1],\"2135\":[null,4],\"2136\":[null,1],\"2137\":[null,5],\"2138\":[null,1],\"2139\":[null,4],\"2140\":[1],\"2141\":[null,3],\"2142\":[null,2],\"2143\":[null,1],\"2144\":[null,45],\"2145\":[null,1],\"2146\":[null,2],\"2147\":[null,10],\"2148\":[null,5],\"2149\":[null,50],\"2150\":[1],\"2151\":[null,15],\"2152\":[null,51],\"2153\":[null,5],\"2154\":[3],\"2155\":[1],\"2156\":[null,3],\"2157\":[null,16],\"2158\":[null,1],\"2159\":[null,2],\"2160\":[null,2],\"2161\":[null,3],\"2162\":[null,16],\"2163\":[null,1],\"2164\":[null,5],\"2165\":[null,14],\"2166\":[null,2],\"2167\":[null,11],\"2168\":[null,4],\"2169\":[null,4],\"2170\":[null,10],\"2171\":[null,4],\"2172\":[null,12],\"2173\":[null,6],\"2174\":[null,14],\"2175\":[null,13],\"2176\":[null,13],\"2177\":[null,7],\"2178\":[null,5],\"2179\":[null,4],\"2180\":[null,2],\"2181\":[null,2],\"2182\":[null,2],\"2183\":[null,7],\"2184\":[null,3],\"2185\":[1],\"2186\":[null,8],\"2187\":[null,9],\"2188\":[null,83],\"2189\":[null,3],\"2190\":[1],\"2191\":[null,8],\"2192\":[null,3],\"2193\":[null,7],\"2194\":[null,75],\"2195\":[1],\"2196\":[null,4],\"2197\":[null,6],\"2198\":[3],\"2199\":[null,17],\"2200\":[null,3],\"2201\":[null,1],\"2202\":[null,4],\"2203\":[null,2],\"2204\":[null,1],\"2205\":[null,11],\"2206\":[null,2],\"2207\":[null,1],\"2208\":[null,9],\"2209\":[null,2],\"2210\":[1],\"2211\":[null,3],\"2212\":[null,2],\"2213\":[null,1],\"2214\":[1],\"2215\":[null,4],\"2216\":[null,6],\"2217\":[null,3],\"2218\":[null,4],\"2219\":[null,6],\"2220\":[null,5],\"2221\":[null,3],\"2222\":[null,3],\"2223\":[1],\"2224\":[null,2],\"2225\":[null,2],\"2226\":[null,5],\"2227\":[null,6],\"2228\":[null,6],\"2229\":[null,6],\"2230\":[null,4],\"2231\":[null,1],\"2232\":[null,1],\"2233\":[null,1],\"2234\":[null,1],\"2235\":[null,2],\"2236\":[null,1],\"2237\":[null,1],\"2238\":[null,2],\"2239\":[null,1],\"2240\":[null,1],\"2241\":[null,2],\"2242\":[null,2],\"2243\":[null,1],\"2244\":[null,2],\"2245\":[null,3],\"2246\":[null,1],\"2247\":[null,3],\"2248\":[null,3],\"2249\":[null,1],\"2250\":[null,3],\"2251\":[null,1],\"2252\":[null,1],\"2253\":[null,2],\"2254\":[null,1],\"2255\":[null,6],\"2256\":[1],\"2257\":[1],\"2258\":[null,16],\"2259\":[null,8],\"2260\":[null,14],\"2261\":[null,15],\"2262\":[null,1],\"2263\":[null,2],\"2264\":[null,1],\"2265\":[null,2],\"2266\":[null,1],\"2267\":[null,6],\"2268\":[null,5],\"2269\":[null,3],\"2270\":[1],\"2271\":[null,2],\"2272\":[null,3],\"2273\":[null,3],\"2274\":[null,3],\"2275\":[null,4],\"2276\":[null,4],\"2277\":[null,1],\"2278\":[null,1],\"2279\":[null,1],\"2280\":[3],\"2281\":[null,4],\"2282\":[null,4],\"2283\":[null,1],\"2284\":[null,4],\"2285\":[null,1],\"2286\":[null,38],\"2287\":[null,1],\"2288\":[null,4],\"2289\":[null,9],\"2290\":[null,18],\"2291\":[null,6],\"2292\":[3],\"2293\":[null,38],\"2294\":[null,1],\"2295\":[null,8],\"2296\":[null,4],\"2297\":[3],\"2298\":[null,35],\"2299\":[null,1],\"2300\":[null,5],\"2301\":[null,11],\"2302\":[null,5],\"2303\":[4],\"2304\":[null,37],\"2305\":[null,1],\"2306\":[null,3],\"2307\":[null,12],\"2308\":[null,5],\"2309\":[4],\"2310\":[null,37],\"2311\":[null,6],\"2312\":[1],\"2313\":[null,39],\"2314\":[null,1],\"2315\":[null,11],\"2316\":[null,12],\"2317\":[null,3],\"2318\":[null,4],\"2319\":[1],\"2320\":[null,38],\"2321\":[null,1],\"2322\":[null,1],\"2323\":[null,12],\"2324\":[null,6],\"2325\":[null,5],\"2326\":[null,3],\"2327\":[1],\"2328\":[null,28],\"2329\":[null,1],\"2330\":[null,6],\"2331\":[null,7],\"2332\":[null,3],\"2333\":[1],\"2334\":[null,10],\"2335\":[null,14],\"2336\":[1],\"2337\":[null,6],\"2338\":[null,5],\"2339\":[null,15],\"2340\":[1],\"2341\":[null,8],\"2342\":[null,4],\"2343\":[null,3],\"2344\":[null,3],\"2345\":[null,4],\"2346\":[null,1],\"2347\":[null,4],\"2348\":[null,8],\"2349\":[1],\"2350\":[null,31],\"2351\":[3],\"2352\":[null,13],\"2353\":[null,13],\"2354\":[null,19],\"2355\":[null,18],\"2356\":[null,20],\"2357\":[1],\"2358\":[null,18],\"2359\":[1],\"2360\":[null,9],\"2361\":[null,3],\"2362\":[null,27],\"2363\":[null,12],\"2364\":[1],\"2365\":[null,11],\"2366\":[null,16],\"2367\":[1],\"2368\":[null,6],\"2369\":[null,14],\"2370\":[null,33],\"2371\":[null,6],\"2372\":[null,23],\"2373\":[null,23],\"2374\":[null,10],\"2375\":[null,14],\"2376\":[null,26],\"2377\":[1],\"2378\":[null,17],\"2379\":[null,17],\"2380\":[null,12],\"2381\":[null,19],\"2382\":[null,13],\"2383\":[null,24],\"2384\":[null,4],\"2385\":[1],\"2386\":[null,7],\"2387\":[null,10],\"2388\":[null,14],\"2389\":[null,30],\"2390\":[null,8],\"2391\":[1],\"2392\":[null,3],\"2393\":[null,7],\"2394\":[null,16],\"2395\":[null,17],\"2396\":[null,24],\"2397\":[null,27],\"2398\":[2],\"2399\":[null,8],\"2400\":[null,5],\"2401\":[null,15],\"2402\":[null,5],\"2403\":[null,8],\"2404\":[null,8],\"2405\":[null,3],\"2406\":[null,40],\"2407\":[2],\"2408\":[null,16],\"2409\":[null,42],\"2410\":[null,19],\"2411\":[null,28],\"2412\":[null,14],\"2413\":[1],\"2414\":[1],\"2415\":[null,11],\"2416\":[null,22],\"2417\":[null,21],\"2418\":[null,13],\"2419\":[null,4],\"2420\":[null,2],\"2421\":[null,1],\"2422\":[null,6],\"2423\":[null,4],\"2424\":[null,3],\"2425\":[null,1],\"2426\":[null,1],\"2427\":[null,2],\"2428\":[null,5],\"2429\":[1],\"2430\":[null,5],\"2431\":[null,2],\"2432\":[null,7],\"2433\":[null,6],\"2434\":[null,6],\"2435\":[null,2],\"2436\":[null,2],\"2437\":[null,2],\"2438\":[null,41],\"2439\":[2],\"2440\":[null,2],\"2441\":[null,6],\"2442\":[null,2],\"2443\":[null,4],\"2444\":[null,2],\"2445\":[null,2],\"2446\":[1],\"2447\":[null,2],\"2448\":[null,2],\"2449\":[null,3],\"2450\":[null,2],\"2451\":[null,2],\"2452\":[null,53],\"2453\":[null,1],\"2454\":[null,91],\"2455\":[null,1],\"2456\":[null,39],\"2457\":[1],\"2458\":[null,8],\"2459\":[null,7],\"2460\":[null,9],\"2461\":[null,1],\"2462\":[null,13],\"2463\":[null,1],\"2464\":[null,1],\"2465\":[null,26],\"2466\":[null,1],\"2467\":[null,65],\"2468\":[null,1],\"2469\":[null,34],\"2470\":[null,1],\"2471\":[null,36],\"2472\":[null,1],\"2473\":[null,34],\"2474\":[1],\"2475\":[null,2],\"2476\":[null,10],\"2477\":[null,3],\"2478\":[null,4],\"2479\":[1],\"2480\":[null,2],\"2481\":[null,3],\"2482\":[null,2],\"2483\":[1],\"2484\":[1],\"2485\":[null,9],\"2486\":[null,8],\"2487\":[null,9],\"2488\":[null,8],\"2489\":[null,14],\"2490\":[null,2],\"2491\":[null,1],\"2492\":[null,3],\"2493\":[null,5],\"2494\":[null,1],\"2495\":[null,8],\"2496\":[null,3],\"2497\":[null,2],\"2498\":[null,3],\"2499\":[null,3],\"2500\":[null,1],\"2501\":[null,2],\"2502\":[null,2],\"2503\":[1],\"2504\":[null,9],\"2505\":[null,2],\"2506\":[null,7],\"2507\":[null,6],\"2508\":[null,5],\"2509\":[null,2],\"2510\":[null,2],\"2511\":[null,2],\"2512\":[null,37],\"2513\":[1],\"2514\":[null,2],\"2515\":[null,8],\"2516\":[null,1],\"2517\":[1],\"2518\":[null,3],\"2519\":[null,2],\"2520\":[1],\"2521\":[null,26],\"2522\":[1],\"2523\":[null,13],\"2524\":[null,7],\"2525\":[null,14],\"2526\":[null,20],\"2527\":[null,6],\"2528\":[1],\"2529\":[null,2],\"2530\":[null,11],\"2531\":[null,2],\"2532\":[null,2],\"2533\":[null,2],\"2534\":[null,1],\"2535\":[null,20],\"2536\":[null,6],\"2537\":[null,7],\"2538\":[null,2],\"2539\":[null,52],\"2540\":[null,1],\"2541\":[null,27],\"2542\":[3],\"2543\":[null,6],\"2544\":[null,2],\"2545\":[null,2],\"2546\":[null,88],\"2547\":[1],\"2548\":[null,2],\"2549\":[null,7],\"2550\":[null,12],\"2551\":[null,10],\"2552\":[null,3],\"2553\":[1],\"2554\":[null,7],\"2555\":[null,3],\"2556\":[null,2],\"2557\":[null,3],\"2558\":[null,2],\"2559\":[null,2],\"2560\":[null,3],\"2561\":[1],\"2562\":[1],\"2563\":[null,5],\"2564\":[null,7],\"2565\":[null,6],\"2566\":[null,7],\"2567\":[null,6],\"2568\":[1],\"2569\":[null,10],\"2570\":[null,5],\"2571\":[null,17],\"2572\":[null,6],\"2573\":[1],\"2574\":[null,18],\"2575\":[null,9],\"2576\":[null,7],\"2577\":[null,10],\"2578\":[null,14],\"2579\":[null,3],\"2580\":[1],\"2581\":[null,12],\"2582\":[null,5],\"2583\":[null,5],\"2584\":[null,6],\"2585\":[null,5],\"2586\":[null,5],\"2587\":[null,5],\"2588\":[null,2],\"2589\":[null,4],\"2590\":[null,5],\"2591\":[null,9],\"2592\":[null,9],\"2593\":[null,3],\"2594\":[null,9],\"2595\":[null,2],\"2596\":[null,7],\"2597\":[null,8],\"2598\":[1],\"2599\":[null,6],\"2600\":[null,6],\"2601\":[null,2],\"2602\":[null,3],\"2603\":[null,4],\"2604\":[null,4],\"2605\":[null,6],\"2606\":[null,5],\"2607\":[null,5],\"2608\":[null,5],\"2609\":[null,6],\"2610\":[null,6],\"2611\":[null,4],\"2612\":[null,5],\"2613\":[null,7],\"2614\":[null,5],\"2615\":[null,5],\"2616\":[null,5],\"2617\":[null,4],\"2618\":[null,7],\"2619\":[null,6],\"2620\":[null,4],\"2621\":[null,8],\"2622\":[null,5],\"2623\":[null,6],\"2624\":[null,5],\"2625\":[null,7],\"2626\":[null,6],\"2627\":[null,6],\"2628\":[null,6],\"2629\":[null,4],\"2630\":[null,7],\"2631\":[null,8],\"2632\":[null,6],\"2633\":[1],\"2634\":[1],\"2635\":[null,7],\"2636\":[null,14],\"2637\":[null,15],\"2638\":[null,10],\"2639\":[null,6],\"2640\":[null,2],\"2641\":[null,1],\"2642\":[null,5],\"2643\":[null,2],\"2644\":[null,3],\"2645\":[null,1],\"2646\":[null,5],\"2647\":[null,4],\"2648\":[null,3],\"2649\":[1],\"2650\":[null,2],\"2651\":[null,5],\"2652\":[null,5],\"2653\":[null,3],\"2654\":[null,4],\"2655\":[null,3],\"2656\":[null,3],\"2657\":[null,3],\"2658\":[null,5],\"2659\":[null,4],\"2660\":[null,2],\"2661\":[null,2],\"2662\":[null,2],\"2663\":[null,33],\"2664\":[1],\"2665\":[null,3],\"2666\":[null,5],\"2667\":[null,2],\"2668\":[null,5],\"2669\":[null,3],\"2670\":[null,2],\"2671\":[null,2],\"2672\":[1],\"2673\":[null,7],\"2674\":[null,4],\"2675\":[null,2],\"2676\":[null,1],\"2677\":[null,52],\"2678\":[null,1],\"2679\":[null,25],\"2680\":[1],\"2681\":[null,8],\"2682\":[null,7],\"2683\":[null,9],\"2684\":[1],\"2685\":[null,2],\"2686\":[null,5],\"2687\":[null,7],\"2688\":[null,3],\"2689\":[1],\"2690\":[1],\"2691\":[null,4],\"2692\":[3],\"2693\":[null,29],\"2694\":[null,26],\"2695\":[null,15],\"2696\":[null,22],\"2697\":[1],\"2698\":[null,10],\"2699\":[null,49],\"2700\":[null,17],\"2701\":[null,9],\"2702\":[null,18],\"2703\":[null,15],\"2704\":[null,23],\"2705\":[null,25],\"2706\":[null,11],\"2707\":[null,11],\"2708\":[null,10],\"2709\":[null,5],\"2710\":[null,4],\"2711\":[null,59],\"2712\":[null,22],\"2713\":[null,16],\"2714\":[1],\"2715\":[null,7],\"2716\":[null,17],\"2717\":[null,11],\"2718\":[null,7],\"2719\":[null,10],\"2720\":[1],\"2721\":[null,12],\"2722\":[1],\"2723\":[null,19],\"2724\":[null,12],\"2725\":[null,28],\"2726\":[null,16],\"2727\":[null,22],\"2728\":[null,16],\"2729\":[null,8],\"2730\":[null,14],\"2731\":[null,23],\"2732\":[null,10],\"2733\":[1],\"2734\":[null,9],\"2735\":[null,18],\"2736\":[null,19],\"2737\":[null,12],\"2738\":[null,15],\"2739\":[null,27],\"2740\":[null,23],\"2741\":[1],\"2742\":[null,12],\"2743\":[null,12],\"2744\":[null,14],\"2745\":[null,39],\"2746\":[null,13],\"2747\":[null,16],\"2748\":[null,23],\"2749\":[null,20],\"2750\":[4],\"2751\":[1],\"2752\":[null,13],\"2753\":[null,12],\"2754\":[null,21],\"2755\":[null,17],\"2756\":[1],\"2757\":[null,9],\"2758\":[null,10],\"2759\":[null,11],\"2760\":[1],\"2761\":[null,1],\"2762\":[null,12],\"2763\":[null,1],\"2764\":[null,17],\"2765\":[null,15],\"2766\":[null,4],\"2767\":[null,2],\"2768\":[null,2],\"2769\":[null,3],\"2770\":[null,5],\"2771\":[null,1],\"2772\":[null,15],\"2773\":[null,1],\"2774\":[null,11],\"2775\":[null,1],\"2776\":[null,9],\"2777\":[null,1],\"2778\":[null,13],\"2779\":[null,1],\"2780\":[null,7],\"2781\":[null,1],\"2782\":[null,14],\"2783\":[null,1],\"2784\":[null,14],\"2785\":[null,2],\"2786\":[1],\"2787\":[null,6],\"2788\":[null,7],\"2789\":[null,7],\"2790\":[null,4],\"2791\":[null,10],\"2792\":[null,22],\"2793\":[null,8],\"2794\":[null,4],\"2795\":[1],\"2796\":[null,3],\"2797\":[null,7],\"2798\":[null,4],\"2799\":[null,3],\"2800\":[null,3],\"2801\":[null,7],\"2802\":[null,10],\"2803\":[null,11],\"2804\":[null,6],\"2805\":[1],\"2806\":[2],\"2807\":[null,12],\"2808\":[null,8],\"2809\":[null,14],\"2810\":[null,7],\"2811\":[null,4],\"2812\":[null,6],\"2813\":[null,5],\"2814\":[null,6],\"2815\":[1],\"2816\":[null,8],\"2817\":[null,12],\"2818\":[null,8],\"2819\":[null,5],\"2820\":[null,21],\"2821\":[1],\"2822\":[null,14],\"2823\":[null,2],\"2824\":[2],\"2825\":[null,13],\"2826\":[null,4],\"2827\":[null,2],\"2828\":[null,4],\"2829\":[null,2],\"2830\":[2],\"2831\":[null,10],\"2832\":[null,9],\"2833\":[null,5],\"2834\":[null,7],\"2835\":[null,1],\"2836\":[null,15],\"2837\":[null,1],\"2838\":[null,2],\"2839\":[null,2],\"2840\":[null,10],\"2841\":[null,7],\"2842\":[null,3],\"2843\":[null,1],\"2844\":[null,3],\"2845\":[null,1],\"2846\":[null,1],\"2847\":[1],\"2848\":[null,15],\"2849\":[4],\"2850\":[null,11],\"2851\":[null,5],\"2852\":[null,5],\"2853\":[null,24],\"2854\":[null,2],\"2855\":[null,2],\"2856\":[1],\"2857\":[null,2],\"2858\":[null,1],\"2859\":[null,1],\"2860\":[null,1],\"2861\":[null,1],\"2862\":[null,1],\"2863\":[4],\"2864\":[null,11],\"2865\":[null,4],\"2866\":[null,15],\"2867\":[null,14],\"2868\":[null,1],\"2869\":[null,14],\"2870\":[null,2],\"2871\":[4],\"2872\":[null,15],\"2873\":[null,9],\"2874\":[null,9],\"2875\":[null,14],\"2876\":[null,2],\"2877\":[4],\"2878\":[null,10],\"2879\":[null,10],\"2880\":[null,8],\"2881\":[null,14],\"2882\":[null,13],\"2883\":[null,2],\"2884\":[null,10],\"2885\":[null,4],\"2886\":[null,2],\"2887\":[null,2],\"2888\":[null,18],\"2889\":[null,2],\"2890\":[null,6],\"2891\":[null,5],\"2892\":[4],\"2893\":[null,11],\"2894\":[null,10],\"2895\":[null,13],\"2896\":[null,6],\"2897\":[null,2],\"2898\":[4],\"2899\":[null,7],\"2900\":[null,8],\"2901\":[null,7],\"2902\":[null,11],\"2903\":[null,6],\"2904\":[null,2],\"2905\":[1],\"2906\":[null,4],\"2907\":[null,1],\"2908\":[null,1],\"2909\":[null,1],\"2910\":[null,1],\"2911\":[null,1],\"2912\":[null,4],\"2913\":[null,2],\"2914\":[null,2],\"2915\":[null,6],\"2916\":[null,4],\"2917\":[null,2],\"2918\":[null,2],\"2919\":[null,7],\"2920\":[null,5],\"2921\":[null,2],\"2922\":[null,4],\"2923\":[null,14],\"2924\":[null,13],\"2925\":[null,11],\"2926\":[1],\"2927\":[1],\"2928\":[null,12],\"2929\":[null,10],\"2930\":[null,9],\"2931\":[null,9],\"2932\":[null,6],\"2933\":[null,8],\"2934\":[null,1],\"2935\":[null,3],\"2936\":[null,3],\"2937\":[null,3],\"2938\":[null,4],\"2939\":[null,1],\"2940\":[null,7],\"2941\":[null,3],\"2942\":[null,3],\"2943\":[1],\"2944\":[null,2],\"2945\":[null,7],\"2946\":[null,5],\"2947\":[null,8],\"2948\":[null,11],\"2949\":[null,11],\"2950\":[null,2],\"2951\":[null,2],\"2952\":[null,2],\"2953\":[null,58],\"2954\":[1],\"2955\":[null,8],\"2956\":[null,2],\"2957\":[null,2],\"2958\":[null,2],\"2959\":[null,1],\"2960\":[null,28],\"2961\":[null,1],\"2962\":[null,33],\"2963\":[null,1],\"2964\":[null,31],\"2965\":[null,1],\"2966\":[null,30],\"2967\":[null,8],\"2968\":[null,16],\"2969\":[1],\"2970\":[null,9],\"2971\":[null,8],\"2972\":[null,5],\"2973\":[1],\"2974\":[null,7],\"2975\":[null,6],\"2976\":[null,4],\"2977\":[null,2],\"2978\":[null,2],\"2979\":[null,3],\"2980\":[3],\"2981\":[1],\"2982\":[null,41],\"2983\":[null,60],\"2984\":[2],\"2985\":[3],\"2986\":[null,7],\"2987\":[null,30],\"2988\":[null,13],\"2989\":[null,24],\"2990\":[null,10],\"2991\":[null,14],\"2992\":[null,6],\"2993\":[null,11],\"2994\":[null,22],\"2995\":[null,16],\"2996\":[null,14],\"2997\":[null,33],\"2998\":[null,13],\"2999\":[null,12],\"3000\":[null,16],\"3001\":[null,11],\"3002\":[null,6],\"3003\":[null,26],\"3004\":[null,17],\"3005\":[null,13],\"3006\":[null,42],\"3007\":[3],\"3008\":[null,7],\"3009\":[null,11],\"3010\":[null,8],\"3011\":[null,10],\"3012\":[null,19],\"3013\":[null,4],\"3014\":[null,13],\"3015\":[null,14],\"3016\":[null,44],\"3017\":[null,8],\"3018\":[null,19],\"3019\":[3],\"3020\":[null,17],\"3021\":[null,14],\"3022\":[null,7],\"3023\":[null,9],\"3024\":[null,26],\"3025\":[null,36],\"3026\":[null,6],\"3027\":[null,6],\"3028\":[null,5],\"3029\":[null,10],\"3030\":[null,24],\"3031\":[null,16],\"3032\":[null,2],\"3033\":[null,18],\"3034\":[null,12],\"3035\":[null,8],\"3036\":[null,19],\"3037\":[null,25],\"3038\":[null,9],\"3039\":[3],\"3040\":[null,5],\"3041\":[null,17],\"3042\":[null,17],\"3043\":[null,8],\"3044\":[null,18],\"3045\":[null,16],\"3046\":[null,24],\"3047\":[null,4],\"3048\":[null,18],\"3049\":[null,22],\"3050\":[null,6],\"3051\":[null,21],\"3052\":[null,4],\"3053\":[null,21],\"3054\":[null,16],\"3055\":[null,13],\"3056\":[null,21],\"3057\":[null,9],\"3058\":[null,35],\"3059\":[null,13],\"3060\":[null,10],\"3061\":[null,5],\"3062\":[null,15],\"3063\":[null,10],\"3064\":[null,6],\"3065\":[null,16],\"3066\":[null,8],\"3067\":[null,11],\"3068\":[null,20],\"3069\":[null,10],\"3070\":[null,12],\"3071\":[null,6],\"3072\":[null,14],\"3073\":[null,7],\"3074\":[null,23],\"3075\":[null,6],\"3076\":[null,43],\"3077\":[3],\"3078\":[null,35],\"3079\":[null,16],\"3080\":[null,15],\"3081\":[null,32],\"3082\":[null,7],\"3083\":[null,12],\"3084\":[null,2],\"3085\":[null,30],\"3086\":[null,12],\"3087\":[null,25],\"3088\":[3],\"3089\":[null,17],\"3090\":[null,15],\"3091\":[null,17],\"3092\":[null,16],\"3093\":[null,31],\"3094\":[null,2],\"3095\":[null,19],\"3096\":[null,11],\"3097\":[null,10],\"3098\":[null,2],\"3099\":[null,30],\"3100\":[null,18],\"3101\":[null,8],\"3102\":[null,15],\"3103\":[null,12],\"3104\":[null,15],\"3105\":[null,14],\"3106\":[null,27],\"3107\":[null,15],\"3108\":[null,16],\"3109\":[null,12],\"3110\":[null,13],\"3111\":[null,21],\"3112\":[null,11],\"3113\":[null,19],\"3114\":[null,8],\"3115\":[null,19],\"3116\":[null,2],\"3117\":[null,9],\"3118\":[null,8],\"3119\":[null,29],\"3120\":[null,14],\"3121\":[null,10],\"3122\":[null,15],\"3123\":[null,38],\"3124\":[null,25],\"3125\":[null,5],\"3126\":[null,1],\"3127\":[null,1],\"3128\":[null,1],\"3129\":[null,1],\"3130\":[null,1],\"3131\":[null,1],\"3132\":[null,1],\"3133\":[null,1],\"3134\":[null,1],\"3135\":[null,1],\"3136\":[null,1],\"3137\":[null,1],\"3138\":[null,1],\"3139\":[null,1],\"3140\":[null,1],\"3141\":[null,1],\"3142\":[null,1],\"3143\":[null,1],\"3144\":[null,1],\"3145\":[null,4],\"3146\":[null,1],\"3147\":[null,1],\"3148\":[null,1],\"3149\":[null,1],\"3150\":[null,1],\"3151\":[null,6],\"3152\":[null,19],\"3153\":[null,6],\"3154\":[3],\"3155\":[null,8],\"3156\":[null,10],\"3157\":[null,42],\"3158\":[null,11],\"3159\":[null,22],\"3160\":[null,11],\"3161\":[null,17],\"3162\":[null,13],\"3163\":[null,10],\"3164\":[null,7],\"3165\":[null,13],\"3166\":[null,14],\"3167\":[null,23],\"3168\":[null,11],\"3169\":[null,2],\"3170\":[null,15],\"3171\":[null,13],\"3172\":[null,15],\"3173\":[null,16],\"3174\":[null,7],\"3175\":[null,13],\"3176\":[null,13],\"3177\":[null,17],\"3178\":[null,14],\"3179\":[null,21],\"3180\":[null,20],\"3181\":[null,5],\"3182\":[null,14],\"3183\":[3],\"3184\":[null,12],\"3185\":[null,6],\"3186\":[null,24],\"3187\":[null,14],\"3188\":[null,19],\"3189\":[null,16],\"3190\":[null,20],\"3191\":[null,10],\"3192\":[null,6],\"3193\":[null,6],\"3194\":[null,17],\"3195\":[null,19],\"3196\":[null,18],\"3197\":[null,13],\"3198\":[null,2],\"3199\":[null,14],\"3200\":[null,11],\"3201\":[null,23],\"3202\":[null,11],\"3203\":[null,14],\"3204\":[null,14],\"3205\":[null,22],\"3206\":[null,19],\"3207\":[3],\"3208\":[null,20],\"3209\":[null,13],\"3210\":[null,16],\"3211\":[null,7],\"3212\":[null,8],\"3213\":[null,4],\"3214\":[null,10],\"3215\":[null,13],\"3216\":[null,5],\"3217\":[null,18],\"3218\":[null,14],\"3219\":[null,11],\"3220\":[null,5],\"3221\":[null,5],\"3222\":[null,29],\"3223\":[3],\"3224\":[null,53],\"3225\":[null,9],\"3226\":[null,49],\"3227\":[null,20],\"3228\":[null,8],\"3229\":[null,42],\"3230\":[null,16],\"3231\":[null,11],\"3232\":[null,8],\"3233\":[null,7],\"3234\":[null,22],\"3235\":[null,20],\"3236\":[null,10],\"3237\":[null,9],\"3238\":[3],\"3239\":[null,12],\"3240\":[null,8],\"3241\":[null,13],\"3242\":[null,10],\"3243\":[null,18],\"3244\":[null,5],\"3245\":[null,7],\"3246\":[null,5],\"3247\":[null,14],\"3248\":[null,17],\"3249\":[2],\"3250\":[3],\"3251\":[null,22],\"3252\":[null,6],\"3253\":[null,5],\"3254\":[null,30],\"3255\":[null,7],\"3256\":[null,5],\"3257\":[null,17],\"3258\":[null,5],\"3259\":[null,6],\"3260\":[null,19],\"3261\":[null,3],\"3262\":[null,9],\"3263\":[null,19],\"3264\":[3],\"3265\":[null,21],\"3266\":[null,7],\"3267\":[null,19],\"3268\":[null,9],\"3269\":[null,6],\"3270\":[null,11],\"3271\":[null,11],\"3272\":[null,17],\"3273\":[null,9],\"3274\":[null,30],\"3275\":[null,13],\"3276\":[null,38],\"3277\":[null,12],\"3278\":[null,25],\"3279\":[3],\"3280\":[null,20],\"3281\":[null,14],\"3282\":[null,3],\"3283\":[null,16],\"3284\":[null,35],\"3285\":[null,8],\"3286\":[null,31],\"3287\":[null,19],\"3288\":[null,24],\"3289\":[null,14],\"3290\":[null,15],\"3291\":[null,12],\"3292\":[null,15],\"3293\":[null,10],\"3294\":[null,17],\"3295\":[null,12],\"3296\":[null,8],\"3297\":[null,8],\"3298\":[2],\"3299\":[null,14],\"3300\":[null,4],\"3301\":[null,4],\"3302\":[null,4],\"3303\":[null,10],\"3304\":[null,9],\"3305\":[null,23],\"3306\":[null,11],\"3307\":[null,9],\"3308\":[null,10],\"3309\":[null,10],\"3310\":[null,4],\"3311\":[null,8],\"3312\":[null,5],\"3313\":[null,5],\"3314\":[null,9],\"3315\":[null,14],\"3316\":[null,12],\"3317\":[null,4],\"3318\":[null,6],\"3319\":[null,5],\"3320\":[null,4],\"3321\":[null,2],\"3322\":[null,2],\"3323\":[null,2],\"3324\":[null,6],\"3325\":[null,3],\"3326\":[null,4],\"3327\":[null,3],\"3328\":[null,4],\"3329\":[null,3],\"3330\":[2],\"3331\":[null,8],\"3332\":[null,12],\"3333\":[null,12],\"3334\":[null,5],\"3335\":[null,2],\"3336\":[null,2],\"3337\":[null,1],\"3338\":[null,1],\"3339\":[null,1],\"3340\":[null,3],\"3341\":[null,7],\"3342\":[null,13],\"3343\":[null,16],\"3344\":[null,6],\"3345\":[null,18],\"3346\":[null,10],\"3347\":[null,3],\"3348\":[null,8],\"3349\":[2],\"3350\":[3],\"3351\":[null,29],\"3352\":[null,28],\"3353\":[null,8],\"3354\":[null,8],\"3355\":[null,14],\"3356\":[null,11],\"3357\":[null,4],\"3358\":[null,11],\"3359\":[null,17],\"3360\":[null,8],\"3361\":[null,14],\"3362\":[null,3],\"3363\":[null,4],\"3364\":[null,16],\"3365\":[null,9],\"3366\":[null,47],\"3367\":[3],\"3368\":[null,14],\"3369\":[null,10],\"3370\":[null,21],\"3371\":[null,9],\"3372\":[null,30],\"3373\":[null,21],\"3374\":[null,29],\"3375\":[null,26],\"3376\":[null,25],\"3377\":[null,4],\"3378\":[null,15],\"3379\":[3],\"3380\":[null,15],\"3381\":[null,13],\"3382\":[null,19],\"3383\":[null,36],\"3384\":[null,7],\"3385\":[null,21],\"3386\":[null,5],\"3387\":[null,8],\"3388\":[null,42],\"3389\":[null,28],\"3390\":[null,7],\"3391\":[null,17],\"3392\":[null,10],\"3393\":[3],\"3394\":[null,14],\"3395\":[null,11],\"3396\":[null,12],\"3397\":[null,8],\"3398\":[null,23],\"3399\":[null,11],\"3400\":[null,5],\"3401\":[null,6],\"3402\":[null,18],\"3403\":[null,5],\"3404\":[null,6],\"3405\":[null,5],\"3406\":[null,4],\"3407\":[2],\"3408\":[3],\"3409\":[null,12],\"3410\":[null,5],\"3411\":[null,7],\"3412\":[null,5],\"3413\":[null,3],\"3414\":[null,15],\"3415\":[null,7],\"3416\":[null,8],\"3417\":[null,6],\"3418\":[null,32],\"3419\":[null,3],\"3420\":[null,6],\"3421\":[null,7],\"3422\":[null,6],\"3423\":[null,8],\"3424\":[null,6],\"3425\":[3],\"3426\":[null,38],\"3427\":[null,30],\"3428\":[null,11],\"3429\":[null,15],\"3430\":[null,5],\"3431\":[null,18],\"3432\":[null,17],\"3433\":[null,11],\"3434\":[null,5],\"3435\":[null,4],\"3436\":[null,8],\"3437\":[null,4],\"3438\":[null,9],\"3439\":[null,24],\"3440\":[3],\"3441\":[null,7],\"3442\":[null,15],\"3443\":[null,26],\"3444\":[null,21],\"3445\":[null,10],\"3446\":[null,5],\"3447\":[null,6],\"3448\":[null,9],\"3449\":[2],\"3450\":[null,24],\"3451\":[null,7],\"3452\":[null,19],\"3453\":[null,9],\"3454\":[null,13],\"3455\":[null,11],\"3456\":[null,30],\"3457\":[null,3],\"3458\":[null,3],\"3459\":[null,3],\"3460\":[null,3],\"3461\":[null,5],\"3462\":[null,4],\"3463\":[null,8],\"3464\":[null,14],\"3465\":[null,9],\"3466\":[null,10],\"3467\":[null,28],\"3468\":[null,6],\"3469\":[null,17],\"3470\":[null,10],\"3471\":[null,10],\"3472\":[null,14],\"3473\":[null,10],\"3474\":[null,4],\"3475\":[null,3],\"3476\":[null,2],\"3477\":[null,12],\"3478\":[3],\"3479\":[null,1],\"3480\":[null,1],\"3481\":[null,1],\"3482\":[null,1],\"3483\":[null,3],\"3484\":[null,1],\"3485\":[null,2],\"3486\":[null,1],\"3487\":[null,3],\"3488\":[null,1],\"3489\":[null,2],\"3490\":[null,3],\"3491\":[null,11],\"3492\":[null,3],\"3493\":[null,3],\"3494\":[null,14],\"3495\":[null,2],\"3496\":[null,3],\"3497\":[null,10],\"3498\":[null,1],\"3499\":[null,3],\"3500\":[null,1],\"3501\":[null,3],\"3502\":[null,1],\"3503\":[null,3],\"3504\":[null,22],\"3505\":[null,3],\"3506\":[null,1],\"3507\":[null,3],\"3508\":[null,4],\"3509\":[null,2],\"3510\":[null,1],\"3511\":[null,3],\"3512\":[null,9],\"3513\":[null,3],\"3514\":[null,1],\"3515\":[null,3],\"3516\":[null,4],\"3517\":[null,3],\"3518\":[null,1],\"3519\":[null,3],\"3520\":[null,40],\"3521\":[null,3],\"3522\":[null,1],\"3523\":[null,3],\"3524\":[null,28],\"3525\":[null,3],\"3526\":[null,1],\"3527\":[null,3],\"3528\":[null,26],\"3529\":[null,2],\"3530\":[null,1],\"3531\":[null,3],\"3532\":[null,28],\"3533\":[3],\"3534\":[null,15],\"3535\":[null,9],\"3536\":[null,9],\"3537\":[null,7],\"3538\":[null,6],\"3539\":[null,8],\"3540\":[null,6],\"3541\":[null,14],\"3542\":[null,7],\"3543\":[null,7],\"3544\":[null,12],\"3545\":[null,10],\"3546\":[null,6],\"3547\":[null,10],\"3548\":[null,12],\"3549\":[null,4],\"3550\":[null,5],\"3551\":[null,4],\"3552\":[3],\"3553\":[null,1],\"3554\":[null,1],\"3555\":[null,1],\"3556\":[null,1],\"3557\":[null,2],\"3558\":[null,1],\"3559\":[null,1],\"3560\":[null,1],\"3561\":[null,1],\"3562\":[null,1],\"3563\":[null,1],\"3564\":[null,1],\"3565\":[null,1],\"3566\":[null,1],\"3567\":[null,1],\"3568\":[null,1],\"3569\":[null,1],\"3570\":[null,1],\"3571\":[null,1],\"3572\":[null,1],\"3573\":[null,1],\"3574\":[null,1],\"3575\":[null,1],\"3576\":[null,1],\"3577\":[null,1],\"3578\":[null,1],\"3579\":[null,1],\"3580\":[null,1],\"3581\":[null,1],\"3582\":[null,1],\"3583\":[null,1],\"3584\":[null,1],\"3585\":[null,1],\"3586\":[null,1],\"3587\":[null,1],\"3588\":[null,1],\"3589\":[null,1],\"3590\":[null,1],\"3591\":[null,1],\"3592\":[null,1],\"3593\":[null,1],\"3594\":[null,1],\"3595\":[null,1],\"3596\":[null,1],\"3597\":[null,1],\"3598\":[null,1],\"3599\":[null,1],\"3600\":[null,1],\"3601\":[null,1],\"3602\":[null,1],\"3603\":[null,1],\"3604\":[null,1],\"3605\":[null,1],\"3606\":[null,1],\"3607\":[null,1],\"3608\":[null,1],\"3609\":[null,1],\"3610\":[null,2],\"3611\":[null,1],\"3612\":[null,1],\"3613\":[null,1],\"3614\":[null,1],\"3615\":[null,1],\"3616\":[null,1],\"3617\":[null,1],\"3618\":[null,1],\"3619\":[null,1],\"3620\":[null,1],\"3621\":[null,1],\"3622\":[null,1],\"3623\":[null,1],\"3624\":[null,1],\"3625\":[null,1],\"3626\":[null,1],\"3627\":[null,1],\"3628\":[null,1],\"3629\":[null,1],\"3630\":[null,1],\"3631\":[null,1],\"3632\":[null,1],\"3633\":[null,1],\"3634\":[null,1],\"3635\":[null,1],\"3636\":[null,1],\"3637\":[null,1],\"3638\":[null,1],\"3639\":[null,1],\"3640\":[null,1],\"3641\":[null,1],\"3642\":[null,1],\"3643\":[null,1],\"3644\":[null,1],\"3645\":[null,1],\"3646\":[null,1],\"3647\":[null,1],\"3648\":[null,1],\"3649\":[null,2],\"3650\":[null,1],\"3651\":[null,1],\"3652\":[null,1],\"3653\":[null,1],\"3654\":[null,1],\"3655\":[null,1],\"3656\":[null,1],\"3657\":[null,3],\"3658\":[null,1],\"3659\":[null,1],\"3660\":[null,1],\"3661\":[null,1],\"3662\":[null,1],\"3663\":[null,1],\"3664\":[null,1],\"3665\":[null,1],\"3666\":[null,1],\"3667\":[null,2],\"3668\":[null,1],\"3669\":[null,1],\"3670\":[null,1],\"3671\":[null,1],\"3672\":[null,1],\"3673\":[null,1],\"3674\":[null,1],\"3675\":[null,1],\"3676\":[null,1],\"3677\":[null,1],\"3678\":[null,1],\"3679\":[null,1],\"3680\":[null,1],\"3681\":[null,1],\"3682\":[null,1],\"3683\":[null,1],\"3684\":[null,1],\"3685\":[null,1],\"3686\":[null,1],\"3687\":[null,1],\"3688\":[null,1],\"3689\":[null,1],\"3690\":[null,1],\"3691\":[null,1],\"3692\":[null,1],\"3693\":[null,1],\"3694\":[null,1],\"3695\":[null,1],\"3696\":[null,1],\"3697\":[null,1],\"3698\":[null,1],\"3699\":[null,1],\"3700\":[null,3],\"3701\":[null,1],\"3702\":[null,1],\"3703\":[null,1],\"3704\":[null,1],\"3705\":[null,1],\"3706\":[null,1],\"3707\":[null,1],\"3708\":[null,1],\"3709\":[null,1],\"3710\":[null,1],\"3711\":[null,1],\"3712\":[null,1],\"3713\":[null,1],\"3714\":[null,1],\"3715\":[null,1],\"3716\":[null,1],\"3717\":[null,1],\"3718\":[null,1],\"3719\":[null,1],\"3720\":[null,1],\"3721\":[null,1],\"3722\":[null,1],\"3723\":[null,1],\"3724\":[null,1],\"3725\":[null,1],\"3726\":[null,1],\"3727\":[null,2],\"3728\":[null,1],\"3729\":[null,2],\"3730\":[null,1],\"3731\":[null,1],\"3732\":[null,1],\"3733\":[null,1],\"3734\":[null,1],\"3735\":[null,1],\"3736\":[null,1],\"3737\":[null,1],\"3738\":[null,1],\"3739\":[null,1],\"3740\":[null,1],\"3741\":[null,1],\"3742\":[null,3],\"3743\":[null,1],\"3744\":[null,1],\"3745\":[null,1],\"3746\":[null,1],\"3747\":[null,1],\"3748\":[null,1],\"3749\":[null,1],\"3750\":[null,1],\"3751\":[null,1],\"3752\":[null,1],\"3753\":[null,1],\"3754\":[null,1],\"3755\":[null,1],\"3756\":[null,1],\"3757\":[null,1],\"3758\":[null,1],\"3759\":[null,1],\"3760\":[null,1],\"3761\":[null,1],\"3762\":[null,1],\"3763\":[null,1],\"3764\":[null,1],\"3765\":[null,1],\"3766\":[null,1],\"3767\":[null,1],\"3768\":[null,1],\"3769\":[null,1],\"3770\":[null,1],\"3771\":[null,3],\"3772\":[null,1],\"3773\":[null,3],\"3774\":[null,1],\"3775\":[null,3],\"3776\":[null,1],\"3777\":[null,1],\"3778\":[null,1],\"3779\":[null,1],\"3780\":[null,1],\"3781\":[null,1],\"3782\":[null,1],\"3783\":[null,1],\"3784\":[null,1],\"3785\":[null,1],\"3786\":[null,1],\"3787\":[null,1],\"3788\":[null,1],\"3789\":[null,1],\"3790\":[null,1],\"3791\":[null,1],\"3792\":[null,1],\"3793\":[null,1],\"3794\":[null,1],\"3795\":[null,1],\"3796\":[null,1],\"3797\":[null,1],\"3798\":[null,1],\"3799\":[null,1],\"3800\":[null,1],\"3801\":[null,1],\"3802\":[null,1],\"3803\":[null,1],\"3804\":[null,1],\"3805\":[null,3],\"3806\":[null,1],\"3807\":[null,1],\"3808\":[null,1],\"3809\":[null,1],\"3810\":[null,1],\"3811\":[null,1],\"3812\":[null,1],\"3813\":[null,1],\"3814\":[null,1],\"3815\":[null,1],\"3816\":[null,1],\"3817\":[null,1],\"3818\":[null,1],\"3819\":[null,1],\"3820\":[null,1],\"3821\":[null,1],\"3822\":[null,1],\"3823\":[null,1],\"3824\":[null,1],\"3825\":[null,1],\"3826\":[null,1],\"3827\":[null,1],\"3828\":[null,1],\"3829\":[null,1],\"3830\":[null,1],\"3831\":[null,1],\"3832\":[null,1],\"3833\":[null,1],\"3834\":[null,1],\"3835\":[null,1],\"3836\":[null,1],\"3837\":[null,1],\"3838\":[null,1],\"3839\":[null,1],\"3840\":[null,1],\"3841\":[null,1],\"3842\":[null,1],\"3843\":[null,1],\"3844\":[null,1],\"3845\":[null,1],\"3846\":[null,2],\"3847\":[null,1],\"3848\":[null,1],\"3849\":[null,2],\"3850\":[null,1],\"3851\":[null,2],\"3852\":[null,1],\"3853\":[null,1],\"3854\":[null,1],\"3855\":[null,1],\"3856\":[null,1],\"3857\":[null,1],\"3858\":[null,1],\"3859\":[null,1],\"3860\":[null,1],\"3861\":[null,1],\"3862\":[null,1],\"3863\":[null,1],\"3864\":[null,1],\"3865\":[null,1],\"3866\":[null,1],\"3867\":[null,2],\"3868\":[null,1],\"3869\":[null,2],\"3870\":[null,1],\"3871\":[null,1],\"3872\":[null,1],\"3873\":[null,1],\"3874\":[null,1],\"3875\":[null,1],\"3876\":[null,1],\"3877\":[null,1],\"3878\":[null,1],\"3879\":[null,1],\"3880\":[null,1],\"3881\":[null,1],\"3882\":[null,1],\"3883\":[null,1],\"3884\":[null,1],\"3885\":[null,1],\"3886\":[null,1],\"3887\":[null,1],\"3888\":[null,1],\"3889\":[null,1],\"3890\":[null,1],\"3891\":[null,1],\"3892\":[null,1],\"3893\":[null,1],\"3894\":[null,1],\"3895\":[null,1],\"3896\":[null,1],\"3897\":[null,1],\"3898\":[null,1],\"3899\":[null,1],\"3900\":[null,1],\"3901\":[null,1],\"3902\":[null,1],\"3903\":[null,1],\"3904\":[null,1],\"3905\":[null,1],\"3906\":[null,1],\"3907\":[null,1],\"3908\":[null,1],\"3909\":[null,1],\"3910\":[null,1],\"3911\":[null,1],\"3912\":[null,1],\"3913\":[null,1],\"3914\":[null,1],\"3915\":[null,1],\"3916\":[null,1],\"3917\":[null,1],\"3918\":[null,1],\"3919\":[null,1],\"3920\":[null,1],\"3921\":[null,1],\"3922\":[null,1],\"3923\":[null,1],\"3924\":[null,1],\"3925\":[null,1],\"3926\":[null,1],\"3927\":[null,1],\"3928\":[3],\"3929\":[null,11],\"3930\":[1],\"3931\":[null,11],\"3932\":[null,8],\"3933\":[1],\"3934\":[null,3],\"3935\":[null,12],\"3936\":[null,15],\"3937\":[null,15],\"3938\":[null,2],\"3939\":[1],\"3940\":[null,10],\"3941\":[1],\"3942\":[1],\"3943\":[null,8],\"3944\":[3],\"3945\":[null,5],\"3946\":[1],\"3947\":[1],\"3948\":[null,7],\"3949\":[null,2],\"3950\":[null,2],\"3951\":[1],\"3952\":[null,18],\"3953\":[3],\"3954\":[null,15],\"3955\":[null,8],\"3956\":[null,2],\"3957\":[null,1],\"3958\":[null,1],\"3959\":[null,5],\"3960\":[null,2],\"3961\":[null,6],\"3962\":[null,2],\"3963\":[null,9],\"3964\":[null,2],\"3965\":[null,5],\"3966\":[null,2],\"3967\":[null,7],\"3968\":[null,3],\"3969\":[null,11],\"3970\":[1],\"3971\":[null,4],\"3972\":[null,5],\"3973\":[null,2],\"3974\":[null,2],\"3975\":[null,2],\"3976\":[null,3],\"3977\":[4],\"3978\":[null,3],\"3979\":[2],\"3980\":[null,9],\"3981\":[2],\"3982\":[1],\"3983\":[null,4],\"3984\":[1],\"3985\":[null,10],\"3986\":[1],\"3987\":[null,3],\"3988\":[null,2],\"3989\":[null,2],\"3990\":[null,7],\"3991\":[null,13],\"3992\":[1],\"3993\":[null,3],\"3994\":[2],\"3995\":[1],\"3996\":[null,2],\"3997\":[1],\"3998\":[null,5],\"3999\":[null,9],\"4000\":[2],\"4001\":[null,13],\"4002\":[1],\"4003\":[null,12],\"4004\":[1],\"4005\":[1],\"4006\":[null,10],\"4007\":[null,6],\"4008\":[4],\"4009\":[null,8],\"4010\":[null,3],\"4011\":[null,2],\"4012\":[null,2],\"4013\":[null,8],\"4014\":[null,10],\"4015\":[null,2],\"4016\":[null,27],\"4017\":[null,5],\"4018\":[2],\"4019\":[null,24],\"4020\":[null,2],\"4021\":[null,8],\"4022\":[null,19],\"4023\":[3],\"4024\":[null,14],\"4025\":[1],\"4026\":[null,2],\"4027\":[2],\"4028\":[null,15],\"4029\":[null,11],\"4030\":[null,2],\"4031\":[null,9],\"4032\":[null,8],\"4033\":[null,4],\"4034\":[null,10],\"4035\":[1],\"4036\":[null,7],\"4037\":[null,5],\"4038\":[null,5],\"4039\":[null,3],\"4040\":[1],\"4041\":[null,6],\"4042\":[null,13],\"4043\":[null,4],\"4044\":[null,2],\"4045\":[null,2],\"4046\":[null,7],\"4047\":[null,8],\"4048\":[null,6],\"4049\":[null,6],\"4050\":[null,2],\"4051\":[null,3],\"4052\":[null,10],\"4053\":[null,16],\"4054\":[null,6],\"4055\":[3],\"4056\":[null,7],\"4057\":[null,8],\"4058\":[null,6],\"4059\":[1],\"4060\":[1],\"4061\":[null,2],\"4062\":[null,9],\"4063\":[null,10],\"4064\":[null,5],\"4065\":[null,8],\"4066\":[null,5],\"4067\":[null,4],\"4068\":[1],\"4069\":[null,11],\"4070\":[null,7],\"4071\":[null,6],\"4072\":[null,4],\"4073\":[null,5],\"4074\":[null,9],\"4075\":[null,5],\"4076\":[null,6],\"4077\":[null,8],\"4078\":[null,3],\"4079\":[null,7],\"4080\":[null,2],\"4081\":[null,4],\"4082\":[null,5],\"4083\":[null,4],\"4084\":[null,4],\"4085\":[null,4],\"4086\":[null,4],\"4087\":[null,3],\"4088\":[null,6],\"4089\":[null,4],\"4090\":[null,3],\"4091\":[2],\"4092\":[null,10],\"4093\":[null,6],\"4094\":[null,3],\"4095\":[null,18],\"4096\":[null,23],\"4097\":[2],\"4098\":[null,9],\"4099\":[1],\"4100\":[1],\"4101\":[null,5],\"4102\":[null,13],\"4103\":[null,5],\"4104\":[null,8],\"4105\":[null,3],\"4106\":[1],\"4107\":[1],\"4108\":[null,9],\"4109\":[null,5],\"4110\":[1],\"4111\":[null,10],\"4112\":[1],\"4113\":[2],\"4114\":[null,7],\"4115\":[null,7],\"4116\":[3],\"4117\":[null,6],\"4118\":[2],\"4119\":[null,16],\"4120\":[1],\"4121\":[null,6],\"4122\":[null,10],\"4123\":[3],\"4124\":[null,22],\"4125\":[null,14],\"4126\":[null,6],\"4127\":[3],\"4128\":[null,7],\"4129\":[null,13],\"4130\":[1],\"4131\":[1],\"4132\":[null,10],\"4133\":[null,8],\"4134\":[1],\"4135\":[null,10],\"4136\":[null,6],\"4137\":[1],\"4138\":[null,5],\"4139\":[null,6],\"4140\":[null,4],\"4141\":[null,5],\"4142\":[1],\"4143\":[null,7],\"4144\":[null,5],\"4145\":[1],\"4146\":[null,5],\"4147\":[1],\"4148\":[null,8],\"4149\":[null,3],\"4150\":[1],\"4151\":[null,9],\"4152\":[null,12],\"4153\":[null,2],\"4154\":[null,9],\"4155\":[1],\"4156\":[null,5],\"4157\":[null,12],\"4158\":[1],\"4159\":[null,14],\"4160\":[1],\"4161\":[1],\"4162\":[null,9],\"4163\":[null,14],\"4164\":[1],\"4165\":[1],\"4166\":[null,14],\"4167\":[1],\"4168\":[null,4],\"4169\":[null,10],\"4170\":[null,2],\"4171\":[null,9],\"4172\":[1],\"4173\":[null,4],\"4174\":[null,6],\"4175\":[null,12],\"4176\":[1],\"4177\":[null,9],\"4178\":[null,19],\"4179\":[null,58],\"4180\":[null,2],\"4181\":[1],\"4182\":[null,6],\"4183\":[null,6],\"4184\":[1],\"4185\":[null,4],\"4186\":[null,3],\"4187\":[1],\"4188\":[null,4],\"4189\":[null,6],\"4190\":[1],\"4191\":[null,2],\"4192\":[null,8],\"4193\":[null,10],\"4194\":[2],\"4195\":[null,13],\"4196\":[null,2],\"4197\":[null,11],\"4198\":[null,4],\"4199\":[null,15],\"4200\":[null,4],\"4201\":[null,4],\"4202\":[null,3],\"4203\":[null,3],\"4204\":[null,4],\"4205\":[null,2],\"4206\":[null,1],\"4207\":[null,1],\"4208\":[null,4],\"4209\":[null,1],\"4210\":[null,1],\"4211\":[null,4],\"4212\":[null,1],\"4213\":[null,1],\"4214\":[null,3],\"4215\":[null,1],\"4216\":[null,1],\"4217\":[null,5],\"4218\":[null,1],\"4219\":[null,1],\"4220\":[null,3],\"4221\":[null,2],\"4222\":[null,3],\"4223\":[null,13],\"4224\":[1],\"4225\":[3],\"4226\":[null,8],\"4227\":[null,7],\"4228\":[2],\"4229\":[null,10],\"4230\":[null,5],\"4231\":[null,22],\"4232\":[null,10],\"4233\":[null,8],\"4234\":[2],\"4235\":[null,4],\"4236\":[null,9],\"4237\":[2],\"4238\":[null,7],\"4239\":[null,13],\"4240\":[1],\"4241\":[1],\"4242\":[1],\"4243\":[null,3],\"4244\":[null,16],\"4245\":[null,2],\"4246\":[null,7],\"4247\":[null,11],\"4248\":[1],\"4249\":[null,21],\"4250\":[1],\"4251\":[null,14],\"4252\":[1],\"4253\":[null,9],\"4254\":[null,25],\"4255\":[null,11],\"4256\":[2],\"4257\":[null,11],\"4258\":[null,7],\"4259\":[2],\"4260\":[null,15],\"4261\":[null,16],\"4262\":[2],\"4263\":[null,3],\"4264\":[2],\"4265\":[null,3],\"4266\":[null,6],\"4267\":[null,12],\"4268\":[1],\"4269\":[1],\"4270\":[1],\"4271\":[1],\"4272\":[1],\"4273\":[2],\"4274\":[null,4],\"4275\":[2],\"4276\":[null,3],\"4277\":[2],\"4278\":[null,4],\"4279\":[null,2],\"4280\":[null,2],\"4281\":[null,4],\"4282\":[null,5],\"4283\":[null,3],\"4284\":[null,4],\"4285\":[null,5],\"4286\":[1],\"4287\":[null,3],\"4288\":[null,1],\"4289\":[null,1],\"4290\":[null,1],\"4291\":[1],\"4292\":[null,2],\"4293\":[null,8],\"4294\":[null,7],\"4295\":[null,2],\"4296\":[null,17],\"4297\":[null,2],\"4298\":[null,13],\"4299\":[null,10],\"4300\":[null,2],\"4301\":[null,8],\"4302\":[null,9],\"4303\":[null,2],\"4304\":[null,6],\"4305\":[null,8],\"4306\":[null,7],\"4307\":[null,4],\"4308\":[null,2],\"4309\":[null,6],\"4310\":[null,3],\"4311\":[null,3],\"4312\":[null,3],\"4313\":[null,4],\"4314\":[null,7],\"4315\":[null,7],\"4316\":[null,9],\"4317\":[null,5],\"4318\":[null,6],\"4319\":[null,6],\"4320\":[null,3],\"4321\":[1],\"4322\":[null,3],\"4323\":[1],\"4324\":[null,67],\"4325\":[3],\"4326\":[null,24],\"4327\":[null,12],\"4328\":[2],\"4329\":[null,11],\"4330\":[null,6],\"4331\":[null,5],\"4332\":[null,12],\"4333\":[null,33],\"4334\":[null,1],\"4335\":[2],\"4336\":[null,3],\"4337\":[null,20],\"4338\":[null,1],\"4339\":[2],\"4340\":[null,1],\"4341\":[null,1],\"4342\":[null,1],\"4343\":[null,8],\"4344\":[null,8],\"4345\":[null,7],\"4346\":[null,1],\"4347\":[null,7],\"4348\":[null,1],\"4349\":[null,9],\"4350\":[null,3],\"4351\":[null,9],\"4352\":[null,3],\"4353\":[null,10],\"4354\":[null,1],\"4355\":[null,10],\"4356\":[null,1],\"4357\":[null,7],\"4358\":[null,7],\"4359\":[null,1],\"4360\":[null,42],\"4361\":[null,3],\"4362\":[null,5],\"4363\":[null,5],\"4364\":[null,6],\"4365\":[null,5],\"4366\":[null,6],\"4367\":[null,9],\"4368\":[null,107],\"4369\":[null,1],\"4370\":[2],\"4371\":[null,9],\"4372\":[null,33],\"4373\":[null,3],\"4374\":[null,95],\"4375\":[2],\"4376\":[null,9],\"4377\":[null,1],\"4378\":[null,32],\"4379\":[null,3],\"4380\":[null,61],\"4381\":[null,1],\"4382\":[null,1],\"4383\":[null,51],\"4384\":[null,1],\"4385\":[2],\"4386\":[null,9],\"4387\":[null,6],\"4388\":[null,3],\"4389\":[null,3],\"4390\":[null,14],\"4391\":[null,3],\"4392\":[null,3],\"4393\":[null,6],\"4394\":[null,3],\"4395\":[null,4],\"4396\":[null,3],\"4397\":[null,4],\"4398\":[null,7],\"4399\":[null,7],\"4400\":[null,9],\"4401\":[null,5],\"4402\":[null,10],\"4403\":[null,1],\"4404\":[null,1],\"4405\":[null,26],\"4406\":[null,1],\"4407\":[null,82],\"4408\":[null,1],\"4409\":[2],\"4410\":[null,10],\"4411\":[null,19],\"4412\":[null,1],\"4413\":[null,19],\"4414\":[null,1],\"4415\":[null,22],\"4416\":[null,1],\"4417\":[2],\"4418\":[null,3],\"4419\":[null,28],\"4420\":[null,1],\"4421\":[1],\"4422\":[null,7],\"4423\":[null,9],\"4424\":[null,8],\"4425\":[null,7],\"4426\":[2],\"4427\":[2],\"4428\":[1],\"4429\":[1],\"4430\":[null,9],\"4431\":[2],\"4432\":[null,2],\"4433\":[null,15],\"4434\":[2],\"4435\":[null,4],\"4436\":[null,2],\"4437\":[null,3],\"4438\":[null,2],\"4439\":[null,4],\"4440\":[null,4],\"4441\":[null,3],\"4442\":[null,8],\"4443\":[null,9],\"4444\":[2],\"4445\":[null,2],\"4446\":[null,5],\"4447\":[null,9],\"4448\":[null,19],\"4449\":[null,6],\"4450\":[2],\"4451\":[null,4],\"4452\":[null,1],\"4453\":[null,1],\"4454\":[null,4],\"4455\":[null,4],\"4456\":[null,3],\"4457\":[2],\"4458\":[null,13],\"4459\":[1],\"4460\":[null,12],\"4461\":[3],\"4462\":[null,10],\"4463\":[4],\"4464\":[null,15],\"4465\":[null,2],\"4466\":[null,7],\"4467\":[null,17],\"4468\":[null,2],\"4469\":[null,11],\"4470\":[null,7],\"4471\":[null,2],\"4472\":[null,6],\"4473\":[null,19],\"4474\":[null,2],\"4475\":[null,15],\"4476\":[null,6],\"4477\":[null,2],\"4478\":[null,8],\"4479\":[null,12],\"4480\":[2],\"4481\":[null,37],\"4482\":[null,6],\"4483\":[null,12],\"4484\":[4],\"4485\":[null,17],\"4486\":[1],\"4487\":[null,19],\"4488\":[1],\"4489\":[null,6],\"4490\":[null,5],\"4491\":[null,8],\"4492\":[1],\"4493\":[null,11],\"4494\":[1],\"4495\":[null,11],\"4496\":[null,3],\"4497\":[null,3],\"4498\":[null,4],\"4499\":[null,4],\"4500\":[null,3],\"4501\":[null,10],\"4502\":[null,12],\"4503\":[null,4],\"4504\":[null,2],\"4505\":[1],\"4506\":[null,3],\"4507\":[null,23],\"4508\":[null,8],\"4509\":[null,3],\"4510\":[null,5],\"4511\":[null,3],\"4512\":[null,3],\"4513\":[2],\"4514\":[null,2],\"4515\":[null,10],\"4516\":[null,10],\"4517\":[2],\"4518\":[null,2],\"4519\":[null,18],\"4520\":[null,14],\"4521\":[2],\"4522\":[null,3],\"4523\":[null,17],\"4524\":[null,11],\"4525\":[null,1],\"4526\":[null,1],\"4527\":[null,1],\"4528\":[null,1],\"4529\":[null,1],\"4530\":[null,4],\"4531\":[null,1],\"4532\":[null,2],\"4533\":[null,7],\"4534\":[null,1],\"4535\":[null,1],\"4536\":[null,6],\"4537\":[null,2],\"4538\":[null,1],\"4539\":[null,6],\"4540\":[null,1],\"4541\":[null,1],\"4542\":[null,5],\"4543\":[null,1],\"4544\":[null,1],\"4545\":[null,9],\"4546\":[null,1],\"4547\":[null,1],\"4548\":[null,10],\"4549\":[null,1],\"4550\":[null,1],\"4551\":[null,9],\"4552\":[null,2],\"4553\":[null,1],\"4554\":[null,13],\"4555\":[null,1],\"4556\":[null,1],\"4557\":[null,8],\"4558\":[null,1],\"4559\":[null,1],\"4560\":[null,6],\"4561\":[null,1],\"4562\":[null,1],\"4563\":[null,9],\"4564\":[null,1],\"4565\":[null,1],\"4566\":[null,8],\"4567\":[null,1],\"4568\":[null,1],\"4569\":[null,11],\"4570\":[null,2],\"4571\":[null,1],\"4572\":[null,7],\"4573\":[null,2],\"4574\":[null,1],\"4575\":[null,9],\"4576\":[null,1],\"4577\":[null,1],\"4578\":[null,6],\"4579\":[null,3],\"4580\":[null,1],\"4581\":[null,7],\"4582\":[null,1],\"4583\":[null,1],\"4584\":[null,6],\"4585\":[1],\"4586\":[null,13],\"4587\":[2],\"4588\":[null,5],\"4589\":[null,22],\"4590\":[null,33],\"4591\":[3],\"4592\":[null,5],\"4593\":[null,5],\"4594\":[null,12],\"4595\":[null,3],\"4596\":[null,11],\"4597\":[null,2],\"4598\":[null,11],\"4599\":[null,8],\"4600\":[null,38],\"4601\":[null,4],\"4602\":[null,4],\"4603\":[null,9],\"4604\":[2],\"4605\":[null,5],\"4606\":[null,3],\"4607\":[null,19],\"4608\":[2],\"4609\":[null,6],\"4610\":[null,2],\"4611\":[null,3],\"4612\":[null,16],\"4613\":[null,1],\"4614\":[null,26],\"4615\":[null,1],\"4616\":[null,6],\"4617\":[null,8],\"4618\":[4],\"4619\":[null,4],\"4620\":[4],\"4621\":[null,8],\"4622\":[1],\"4623\":[null,10],\"4624\":[null,8],\"4625\":[null,7],\"4626\":[null,6],\"4627\":[null,8],\"4628\":[null,5],\"4629\":[null,3],\"4630\":[null,4],\"4631\":[null,8],\"4632\":[null,14],\"4633\":[null,8],\"4634\":[null,5],\"4635\":[null,8],\"4636\":[null,3],\"4637\":[null,3],\"4638\":[null,8],\"4639\":[1],\"4640\":[null,6],\"4641\":[null,1],\"4642\":[null,21],\"4643\":[null,1],\"4644\":[null,55],\"4645\":[null,1],\"4646\":[null,2],\"4647\":[null,49],\"4648\":[null,1],\"4649\":[null,33],\"4650\":[1],\"4651\":[null,1],\"4652\":[null,2],\"4653\":[2],\"4654\":[null,2],\"4655\":[null,3],\"4656\":[null,3],\"4657\":[null,3],\"4658\":[null,3],\"4659\":[null,14],\"4660\":[null,33],\"4661\":[2],\"4662\":[null,1],\"4663\":[null,8],\"4664\":[null,6],\"4665\":[null,7],\"4666\":[2],\"4667\":[null,2],\"4668\":[null,2],\"4669\":[null,9],\"4670\":[null,7],\"4671\":[1],\"4672\":[null,1],\"4673\":[null,2],\"4674\":[2],\"4675\":[null,4],\"4676\":[2],\"4677\":[null,6],\"4678\":[null,1],\"4679\":[null,18],\"4680\":[null,3],\"4681\":[null,5],\"4682\":[null,50],\"4683\":[null,3],\"4684\":[null,5],\"4685\":[null,43],\"4686\":[null,6],\"4687\":[2],\"4688\":[null,6],\"4689\":[null,1],\"4690\":[null,28],\"4691\":[null,2],\"4692\":[null,3],\"4693\":[null,159],\"4694\":[null,2],\"4695\":[null,6],\"4696\":[null,75],\"4697\":[null,7],\"4698\":[1],\"4699\":[null,8],\"4700\":[null,9],\"4701\":[null,6],\"4702\":[null,7],\"4703\":[null,8],\"4704\":[null,12],\"4705\":[1],\"4706\":[null,9],\"4707\":[1],\"4708\":[null,18],\"4709\":[null,2],\"4710\":[null,1],\"4711\":[1],\"4712\":[null,5],\"4713\":[null,9],\"4714\":[null,6],\"4715\":[3],\"4716\":[null,5],\"4717\":[null,18],\"4718\":[null,8],\"4719\":[3],\"4720\":[null,5],\"4721\":[null,1],\"4722\":[null,12],\"4723\":[null,8],\"4724\":[null,3],\"4725\":[null,9],\"4726\":[6],\"4727\":[null,3],\"4728\":[null,8],\"4729\":[null,10],\"4730\":[null,3],\"4731\":[null,5],\"4732\":[1],\"4733\":[null,1],\"4734\":[null,2],\"4735\":[1],\"4736\":[null,8],\"4737\":[null,4],\"4738\":[null,12],\"4739\":[null,3],\"4740\":[null,4],\"4741\":[3],\"4742\":[null,15],\"4743\":[null,10],\"4744\":[null,5],\"4745\":[null,7],\"4746\":[null,24],\"4747\":[null,2],\"4748\":[null,9],\"4749\":[null,8],\"4750\":[null,6],\"4751\":[null,5],\"4752\":[3],\"4753\":[null,5],\"4754\":[null,17],\"4755\":[null,5],\"4756\":[null,10],\"4757\":[null,22],\"4758\":[1],\"4759\":[null,10],\"4760\":[null,9],\"4761\":[1],\"4762\":[null,2],\"4763\":[null,2],\"4764\":[null,3],\"4765\":[null,2],\"4766\":[null,3],\"4767\":[2],\"4768\":[null,5],\"4769\":[null,14],\"4770\":[null,6],\"4771\":[null,17],\"4772\":[3],\"4773\":[null,1],\"4774\":[null,10],\"4775\":[null,2],\"4776\":[null,5],\"4777\":[null,8],\"4778\":[null,14],\"4779\":[null,1],\"4780\":[null,1],\"4781\":[null,39],\"4782\":[2],\"4783\":[null,4],\"4784\":[null,6],\"4785\":[null,10],\"4786\":[null,12],\"4787\":[null,1],\"4788\":[null,4],\"4789\":[null,2],\"4790\":[null,2],\"4791\":[null,2],\"4792\":[3],\"4793\":[null,6],\"4794\":[null,14],\"4795\":[null,1],\"4796\":[null,21],\"4797\":[null,1],\"4798\":[null,15],\"4799\":[null,22],\"4800\":[1],\"4801\":[null,7],\"4802\":[null,4],\"4803\":[null,3],\"4804\":[null,4],\"4805\":[null,4],\"4806\":[null,3],\"4807\":[null,3],\"4808\":[null,2],\"4809\":[null,3],\"4810\":[null,3],\"4811\":[null,3],\"4812\":[null,3],\"4813\":[null,2],\"4814\":[null,4],\"4815\":[null,2],\"4816\":[1],\"4817\":[null,6],\"4818\":[null,1],\"4819\":[null,6],\"4820\":[null,7],\"4821\":[null,11],\"4822\":[null,8],\"4823\":[null,4],\"4824\":[null,4],\"4825\":[null,4],\"4826\":[null,4],\"4827\":[null,1],\"4828\":[null,3],\"4829\":[null,2],\"4830\":[null,2],\"4831\":[null,1],\"4832\":[null,2],\"4833\":[null,2],\"4834\":[null,2],\"4835\":[null,2],\"4836\":[null,2],\"4837\":[null,2],\"4838\":[null,2],\"4839\":[null,2],\"4840\":[null,5],\"4841\":[1],\"4842\":[null,1],\"4843\":[null,9],\"4844\":[null,6],\"4845\":[null,9],\"4846\":[null,2],\"4847\":[1],\"4848\":[null,12],\"4849\":[null,5],\"4850\":[null,1],\"4851\":[null,5],\"4852\":[null,1],\"4853\":[null,7],\"4854\":[null,2],\"4855\":[null,6],\"4856\":[null,3],\"4857\":[null,3],\"4858\":[7],\"4859\":[null,3],\"4860\":[null,1],\"4861\":[null,29],\"4862\":[null,17],\"4863\":[null,10],\"4864\":[null,4],\"4865\":[null,12],\"4866\":[null,28],\"4867\":[null,8],\"4868\":[null,13],\"4869\":[null,24],\"4870\":[1],\"4871\":[null,4],\"4872\":[null,2],\"4873\":[null,3],\"4874\":[null,4],\"4875\":[null,4],\"4876\":[null,3],\"4877\":[null,1],\"4878\":[null,1],\"4879\":[null,1],\"4880\":[null,1],\"4881\":[null,1],\"4882\":[null,1],\"4883\":[null,1],\"4884\":[null,1],\"4885\":[null,1],\"4886\":[null,1],\"4887\":[null,1],\"4888\":[null,2],\"4889\":[null,1],\"4890\":[null,1],\"4891\":[null,14],\"4892\":[null,16],\"4893\":[1],\"4894\":[null,5],\"4895\":[null,7],\"4896\":[null,12],\"4897\":[null,9],\"4898\":[1],\"4899\":[null,6],\"4900\":[null,14],\"4901\":[null,5],\"4902\":[null,11],\"4903\":[null,14],\"4904\":[3],\"4905\":[null,7],\"4906\":[null,16],\"4907\":[null,5],\"4908\":[null,12],\"4909\":[1],\"4910\":[null,5],\"4911\":[null,14],\"4912\":[null,6],\"4913\":[null,2],\"4914\":[null,20],\"4915\":[1],\"4916\":[null,2],\"4917\":[null,4],\"4918\":[null,11],\"4919\":[null,4],\"4920\":[null,31],\"4921\":[null,5],\"4922\":[null,22],\"4923\":[null,4],\"4924\":[1],\"4925\":[null,18],\"4926\":[null,22],\"4927\":[1],\"4928\":[null,7],\"4929\":[2],\"4930\":[null,7],\"4931\":[null,2],\"4932\":[null,15],\"4933\":[1],\"4934\":[null,1],\"4935\":[null,3],\"4936\":[2],\"4937\":[null,9],\"4938\":[null,11],\"4939\":[null,3],\"4940\":[null,4],\"4941\":[null,5],\"4942\":[null,3],\"4943\":[null,35],\"4944\":[null,6],\"4945\":[null,5],\"4946\":[null,2],\"4947\":[null,2],\"4948\":[null,2],\"4949\":[null,2],\"4950\":[null,1],\"4951\":[null,2],\"4952\":[null,4],\"4953\":[null,6],\"4954\":[null,3],\"4955\":[null,7],\"4956\":[null,6],\"4957\":[null,5],\"4958\":[null,2],\"4959\":[null,3],\"4960\":[null,4],\"4961\":[null,16],\"4962\":[null,1],\"4963\":[null,60],\"4964\":[null,7],\"4965\":[null,4],\"4966\":[null,3],\"4967\":[null,5],\"4968\":[null,3],\"4969\":[null,69],\"4970\":[null,1],\"4971\":[null,4],\"4972\":[null,25],\"4973\":[null,4],\"4974\":[null,2],\"4975\":[null,5],\"4976\":[null,17],\"4977\":[null,4],\"4978\":[null,64],\"4979\":[3],\"4980\":[null,7],\"4981\":[null,42],\"4982\":[null,2],\"4983\":[null,8],\"4984\":[null,9],\"4985\":[null,7],\"4986\":[null,7],\"4987\":[1],\"4988\":[null,8],\"4989\":[null,8],\"4990\":[null,8],\"4991\":[null,8],\"4992\":[null,7],\"4993\":[null,12],\"4994\":[1],\"4995\":[null,22],\"4996\":[1],\"4997\":[null,11],\"4998\":[null,2],\"4999\":[null,3],\"5000\":[null,3],\"5001\":[null,15],\"5002\":[null,6],\"5003\":[null,18],\"5004\":[null,5],\"5005\":[null,2],\"5006\":[null,10],\"5007\":[null,8],\"5008\":[null,4],\"5009\":[null,8],\"5010\":[1],\"5011\":[null,1],\"5012\":[null,10],\"5013\":[1],\"5014\":[null,2],\"5015\":[null,36],\"5016\":[null,1],\"5017\":[null,44],\"5018\":[1],\"5019\":[null,1],\"5020\":[null,41],\"5021\":[1],\"5022\":[null,16],\"5023\":[null,1],\"5024\":[null,1],\"5025\":[null,1],\"5026\":[null,1],\"5027\":[null,7],\"5028\":[null,4],\"5029\":[null,8],\"5030\":[null,17],\"5031\":[null,4],\"5032\":[null,8],\"5033\":[1],\"5034\":[null,4],\"5035\":[null,35],\"5036\":[null,2],\"5037\":[null,15],\"5038\":[null,13],\"5039\":[null,1],\"5040\":[null,5],\"5041\":[null,1],\"5042\":[null,28],\"5043\":[null,1],\"5044\":[null,41],\"5045\":[null,1],\"5046\":[null,37],\"5047\":[null,2],\"5048\":[null,28],\"5049\":[null,9],\"5050\":[null,12],\"5051\":[null,9],\"5052\":[null,9],\"5053\":[null,1],\"5054\":[null,2],\"5055\":[null,28],\"5056\":[1],\"5057\":[null,2],\"5058\":[null,3],\"5059\":[null,21],\"5060\":[null,2],\"5061\":[null,1],\"5062\":[null,35],\"5063\":[null,1],\"5064\":[null,12],\"5065\":[null,2],\"5066\":[1],\"5067\":[null,1],\"5068\":[null,2],\"5069\":[2],\"5070\":[null,23],\"5071\":[null,2],\"5072\":[null,3],\"5073\":[null,5],\"5074\":[null,3],\"5075\":[null,5],\"5076\":[null,2],\"5077\":[null,14],\"5078\":[null,2],\"5079\":[null,5],\"5080\":[null,1],\"5081\":[null,2],\"5082\":[null,12],\"5083\":[null,1],\"5084\":[null,1],\"5085\":[null,3],\"5086\":[null,1],\"5087\":[2],\"5088\":[null,1],\"5089\":[null,1],\"5090\":[null,24],\"5091\":[null,13],\"5092\":[null,1],\"5093\":[null,37],\"5094\":[null,10],\"5095\":[2],\"5096\":[null,4],\"5097\":[null,10],\"5098\":[null,1],\"5099\":[null,13],\"5100\":[null,2],\"5101\":[null,13],\"5102\":[null,11],\"5103\":[null,5],\"5104\":[null,3],\"5105\":[null,2],\"5106\":[null,6],\"5107\":[null,2],\"5108\":[null,2],\"5109\":[null,4],\"5110\":[null,3],\"5111\":[null,2],\"5112\":[null,47],\"5113\":[null,8],\"5114\":[null,1],\"5115\":[null,15],\"5116\":[2],\"5117\":[null,9],\"5118\":[null,4],\"5119\":[null,2],\"5120\":[null,14],\"5121\":[null,13],\"5122\":[null,4],\"5123\":[null,4],\"5124\":[null,5],\"5125\":[null,2],\"5126\":[null,5],\"5127\":[null,4],\"5128\":[null,10],\"5129\":[null,3],\"5130\":[null,4],\"5131\":[null,12],\"5132\":[null,2],\"5133\":[null,29],\"5134\":[null,8],\"5135\":[null,2],\"5136\":[null,3],\"5137\":[null,8],\"5138\":[null,3],\"5139\":[null,10],\"5140\":[null,18],\"5141\":[null,3],\"5142\":[null,10],\"5143\":[null,10],\"5144\":[null,12],\"5145\":[null,4],\"5146\":[2],\"5147\":[null,3],\"5148\":[null,2],\"5149\":[null,13],\"5150\":[null,2],\"5151\":[null,14],\"5152\":[null,8],\"5153\":[null,10],\"5154\":[null,8],\"5155\":[null,6],\"5156\":[null,13],\"5157\":[null,2],\"5158\":[null,10],\"5159\":[null,9],\"5160\":[null,17],\"5161\":[null,10],\"5162\":[null,2],\"5163\":[null,5],\"5164\":[null,13],\"5165\":[null,3],\"5166\":[null,17],\"5167\":[null,4],\"5168\":[null,6],\"5169\":[null,47],\"5170\":[null,14],\"5171\":[null,4],\"5172\":[null,4],\"5173\":[null,2],\"5174\":[null,4],\"5175\":[null,2],\"5176\":[null,6],\"5177\":[null,2],\"5178\":[null,6],\"5179\":[null,3],\"5180\":[null,18],\"5181\":[2],\"5182\":[null,5],\"5183\":[null,5],\"5184\":[null,6],\"5185\":[2],\"5186\":[null,3],\"5187\":[null,2],\"5188\":[null,6],\"5189\":[null,17],\"5190\":[null,16],\"5191\":[3],\"5192\":[null,2],\"5193\":[null,33],\"5194\":[null,19],\"5195\":[null,2],\"5196\":[null,27],\"5197\":[null,12],\"5198\":[null,12],\"5199\":[null,3],\"5200\":[null,21],\"5201\":[null,5],\"5202\":[3],\"5203\":[null,8],\"5204\":[null,14],\"5205\":[null,27],\"5206\":[null,8],\"5207\":[2],\"5208\":[null,1],\"5209\":[null,2],\"5210\":[null,11],\"5211\":[null,6],\"5212\":[null,2],\"5213\":[null,13],\"5214\":[null,5],\"5215\":[2],\"5216\":[null,6],\"5217\":[null,6],\"5218\":[null,8],\"5219\":[null,7],\"5220\":[null,5],\"5221\":[null,6],\"5222\":[null,2],\"5223\":[null,1],\"5224\":[null,15],\"5225\":[null,6],\"5226\":[null,16],\"5227\":[null,11],\"5228\":[null,3],\"5229\":[null,16],\"5230\":[null,2],\"5231\":[2],\"5232\":[null,8],\"5233\":[null,19],\"5234\":[null,37],\"5235\":[null,3],\"5236\":[null,23],\"5237\":[1],\"5238\":[null,6],\"5239\":[null,8],\"5240\":[null,8],\"5241\":[null,10],\"5242\":[null,8],\"5243\":[null,11],\"5244\":[null,9],\"5245\":[null,6],\"5246\":[null,8],\"5247\":[null,12],\"5248\":[1],\"5249\":[null,2],\"5250\":[1],\"5251\":[1],\"5252\":[null,2],\"5253\":[null,2],\"5254\":[null,2],\"5255\":[null,2],\"5256\":[null,2],\"5257\":[null,2],\"5258\":[null,2],\"5259\":[null,2],\"5260\":[null,2],\"5261\":[null,3],\"5262\":[null,9],\"5263\":[1],\"5264\":[null,7],\"5265\":[null,4],\"5266\":[null,6],\"5267\":[null,16],\"5268\":[null,5],\"5269\":[null,17],\"5270\":[null,8],\"5271\":[null,71],\"5272\":[null,8],\"5273\":[null,11],\"5274\":[null,2],\"5275\":[null,5],\"5276\":[null,3],\"5277\":[null,6],\"5278\":[null,6],\"5279\":[null,7],\"5280\":[null,3],\"5281\":[null,2],\"5282\":[null,11],\"5283\":[1],\"5284\":[1],\"5285\":[null,5],\"5286\":[null,15],\"5287\":[null,20],\"5288\":[1],\"5289\":[null,4],\"5290\":[null,13],\"5291\":[null,4],\"5292\":[null,10],\"5293\":[null,1],\"5294\":[null,2],\"5295\":[null,11],\"5296\":[null,2],\"5297\":[null,4],\"5298\":[null,9],\"5299\":[4],\"5300\":[null,2],\"5301\":[null,2],\"5302\":[null,4],\"5303\":[null,2],\"5304\":[null,3],\"5305\":[null,2],\"5306\":[null,5],\"5307\":[null,5],\"5308\":[3],\"5309\":[null,5],\"5310\":[null,22],\"5311\":[null,15],\"5312\":[null,8],\"5313\":[null,11],\"5314\":[null,4],\"5315\":[null,14],\"5316\":[null,7],\"5317\":[null,7],\"5318\":[null,1],\"5319\":[null,3],\"5320\":[null,3],\"5321\":[null,2],\"5322\":[null,4],\"5323\":[null,2],\"5324\":[null,2],\"5325\":[null,7],\"5326\":[null,9],\"5327\":[null,2],\"5328\":[null,7],\"5329\":[null,9],\"5330\":[1],\"5331\":[1],\"5332\":[null,4],\"5333\":[null,12],\"5334\":[null,30],\"5335\":[null,3],\"5336\":[null,22],\"5337\":[null,9],\"5338\":[3],\"5339\":[null,13],\"5340\":[null,5],\"5341\":[null,6],\"5342\":[null,6],\"5343\":[1],\"5344\":[null,11],\"5345\":[null,6],\"5346\":[null,4],\"5347\":[null,4],\"5348\":[null,6],\"5349\":[null,6],\"5350\":[null,14],\"5351\":[1],\"5352\":[null,10],\"5353\":[null,14],\"5354\":[null,10],\"5355\":[null,28],\"5356\":[null,13],\"5357\":[1],\"5358\":[1],\"5359\":[null,9],\"5360\":[null,4],\"5361\":[null,2],\"5362\":[null,2],\"5363\":[null,5],\"5364\":[null,10],\"5365\":[null,5],\"5366\":[null,15],\"5367\":[null,6],\"5368\":[null,7],\"5369\":[null,17],\"5370\":[null,4],\"5371\":[null,14],\"5372\":[1],\"5373\":[null,2],\"5374\":[null,6],\"5375\":[null,4],\"5376\":[null,27],\"5377\":[null,2],\"5378\":[null,8],\"5379\":[null,11],\"5380\":[null,12],\"5381\":[null,6],\"5382\":[null,47],\"5383\":[null,2],\"5384\":[null,12],\"5385\":[null,4],\"5386\":[null,7],\"5387\":[null,5],\"5388\":[null,2],\"5389\":[null,2],\"5390\":[null,7],\"5391\":[null,2],\"5392\":[null,2],\"5393\":[null,2],\"5394\":[null,4],\"5395\":[null,2],\"5396\":[null,11],\"5397\":[null,5],\"5398\":[null,7],\"5399\":[1],\"5400\":[null,6],\"5401\":[null,6],\"5402\":[null,26],\"5403\":[null,4],\"5404\":[1],\"5405\":[null,4],\"5406\":[null,3],\"5407\":[null,3],\"5408\":[null,2],\"5409\":[null,2],\"5410\":[null,5],\"5411\":[null,4],\"5412\":[null,6],\"5413\":[null,4],\"5414\":[2],\"5415\":[1],\"5416\":[null,29],\"5417\":[2],\"5418\":[null,2],\"5419\":[null,3],\"5420\":[null,4],\"5421\":[null,3],\"5422\":[null,6],\"5423\":[null,3],\"5424\":[null,7],\"5425\":[null,3],\"5426\":[null,3],\"5427\":[null,6],\"5428\":[null,5],\"5429\":[null,8],\"5430\":[null,5],\"5431\":[null,4],\"5432\":[null,7],\"5433\":[null,7],\"5434\":[null,14],\"5435\":[null,2],\"5436\":[null,4],\"5437\":[null,5],\"5438\":[null,4],\"5439\":[null,2],\"5440\":[null,25],\"5441\":[2],\"5442\":[null,8],\"5443\":[null,7],\"5444\":[null,15],\"5445\":[null,18],\"5446\":[null,18],\"5447\":[null,8],\"5448\":[null,14],\"5449\":[2],\"5450\":[null,7],\"5451\":[null,17],\"5452\":[2],\"5453\":[null,2],\"5454\":[null,11],\"5455\":[null,20],\"5456\":[null,4],\"5457\":[null,25],\"5458\":[null,8],\"5459\":[null,16],\"5460\":[null,18],\"5461\":[null,2],\"5462\":[null,2],\"5463\":[null,42],\"5464\":[null,2],\"5465\":[null,2],\"5466\":[null,43],\"5467\":[null,3],\"5468\":[null,11],\"5469\":[null,30],\"5470\":[1],\"5471\":[1],\"5472\":[null,2],\"5473\":[null,4],\"5474\":[null,4],\"5475\":[null,6],\"5476\":[null,16],\"5477\":[null,2],\"5478\":[null,2],\"5479\":[null,8],\"5480\":[null,2],\"5481\":[null,2],\"5482\":[1],\"5483\":[null,2],\"5484\":[null,7],\"5485\":[null,4],\"5486\":[null,25],\"5487\":[null,2],\"5488\":[null,6],\"5489\":[null,14],\"5490\":[null,7],\"5491\":[null,22],\"5492\":[null,2],\"5493\":[null,2],\"5494\":[null,17],\"5495\":[null,2],\"5496\":[null,3],\"5497\":[null,23],\"5498\":[null,2],\"5499\":[null,2],\"5500\":[null,5],\"5501\":[null,6],\"5502\":[null,2],\"5503\":[null,3],\"5504\":[null,14],\"5505\":[null,2],\"5506\":[null,7],\"5507\":[null,3],\"5508\":[null,4],\"5509\":[null,4],\"5510\":[null,4],\"5511\":[null,3],\"5512\":[null,4],\"5513\":[null,3],\"5514\":[1],\"5515\":[null,10],\"5516\":[null,16],\"5517\":[null,6],\"5518\":[null,8],\"5519\":[null,8],\"5520\":[null,6],\"5521\":[null,4],\"5522\":[null,5],\"5523\":[null,23],\"5524\":[null,36],\"5525\":[null,36],\"5526\":[null,4],\"5527\":[null,33],\"5528\":[null,42],\"5529\":[null,34],\"5530\":[null,47],\"5531\":[null,4],\"5532\":[1],\"5533\":[null,11],\"5534\":[null,7],\"5535\":[null,9],\"5536\":[null,1],\"5537\":[null,4],\"5538\":[1],\"5539\":[null,16],\"5540\":[null,4],\"5541\":[1],\"5542\":[null,9],\"5543\":[null,4],\"5544\":[1],\"5545\":[2],\"5546\":[null,6],\"5547\":[null,2],\"5548\":[null,3],\"5549\":[null,4],\"5550\":[null,2],\"5551\":[null,2],\"5552\":[null,3],\"5553\":[null,2],\"5554\":[null,2],\"5555\":[null,3],\"5556\":[null,6],\"5557\":[null,4],\"5558\":[null,6],\"5559\":[null,3],\"5560\":[null,4],\"5561\":[null,3],\"5562\":[null,3],\"5563\":[null,5],\"5564\":[null,2],\"5565\":[null,8],\"5566\":[null,3],\"5567\":[4],\"5568\":[null,11],\"5569\":[null,6],\"5570\":[null,9],\"5571\":[null,6],\"5572\":[null,7],\"5573\":[null,11],\"5574\":[null,8],\"5575\":[null,8],\"5576\":[null,10],\"5577\":[3],\"5578\":[null,12],\"5579\":[null,20],\"5580\":[1],\"5581\":[null,8],\"5582\":[null,10],\"5583\":[3],\"5584\":[null,4],\"5585\":[1],\"5586\":[null,10],\"5587\":[null,11],\"5588\":[null,14],\"5589\":[1],\"5590\":[null,1],\"5591\":[2],\"5592\":[3],\"5593\":[null,6],\"5594\":[5],\"5595\":[null,10],\"5596\":[7],\"5597\":[null,3],\"5598\":[9],\"5599\":[null,22],\"5600\":[11],\"5601\":[null,5],\"5602\":[8],\"5603\":[null,17],\"5604\":[5],\"5605\":[null,11],\"5606\":[7],\"5607\":[null,12],\"5608\":[null,15],\"5609\":[null,13],\"5610\":[6],\"5611\":[null,11],\"5612\":[9],\"5613\":[null,3],\"5614\":[5],\"5615\":[null,9],\"5616\":[7],\"5617\":[null,8],\"5618\":[6],\"5619\":[null,14],\"5620\":[3],\"5621\":[null,5],\"5622\":[1],\"5623\":[null,3],\"5624\":[6],\"5625\":[null,7],\"5626\":[null,2],\"5627\":[null,3],\"5628\":[null,4],\"5629\":[null,3],\"5630\":[null,6],\"5631\":[null,5],\"5632\":[null,7],\"5633\":[2],\"5634\":[null,8],\"5635\":[3],\"5636\":[null,12],\"5637\":[5],\"5638\":[null,7],\"5639\":[4],\"5640\":[null,5],\"5641\":[7],\"5642\":[null,9],\"5643\":[6],\"5644\":[null,12],\"5645\":[7],\"5646\":[null,22],\"5647\":[8],\"5648\":[null,22],\"5649\":[null,2],\"5650\":[null,9],\"5651\":[null,2],\"5652\":[null,6],\"5653\":[null,2],\"5654\":[null,7],\"5655\":[null,4],\"5656\":[null,8],\"5657\":[null,4],\"5658\":[null,7],\"5659\":[6],\"5660\":[null,8],\"5661\":[null,8],\"5662\":[null,11],\"5663\":[4],\"5664\":[null,17],\"5665\":[2],\"5666\":[null,11],\"5667\":[7],\"5668\":[null,15],\"5669\":[6],\"5670\":[null,42],\"5671\":[8],\"5672\":[null,30],\"5673\":[null,20],\"5674\":[3],\"5675\":[null,21],\"5676\":[4],\"5677\":[null,11],\"5678\":[2],\"5679\":[null,11],\"5680\":[null,2],\"5681\":[1],\"5682\":[null,3],\"5683\":[null,2],\"5684\":[null,5],\"5685\":[null,6],\"5686\":[2],\"5687\":[null,10],\"5688\":[null,9],\"5689\":[1],\"5690\":[null,10],\"5691\":[1],\"5692\":[null,2],\"5693\":[null,2],\"5694\":[null,2],\"5695\":[null,7],\"5696\":[null,5],\"5697\":[null,6],\"5698\":[null,6],\"5699\":[1],\"5700\":[null,2],\"5701\":[null,4],\"5702\":[1],\"5703\":[null,6],\"5704\":[null,3],\"5705\":[null,2],\"5706\":[null,4],\"5707\":[1],\"5708\":[null,1],\"5709\":[null,3],\"5710\":[null,2],\"5711\":[null,7],\"5712\":[null,4],\"5713\":[null,5],\"5714\":[1],\"5715\":[null,12],\"5716\":[null,6],\"5717\":[null,7],\"5718\":[null,9],\"5719\":[null,9],\"5720\":[2],\"5721\":[null,4],\"5722\":[null,4],\"5723\":[null,2],\"5724\":[null,2],\"5725\":[3],\"5726\":[null,3],\"5727\":[null,2],\"5728\":[null,2],\"5729\":[null,2],\"5730\":[null,4],\"5731\":[null,2],\"5732\":[1],\"5733\":[null,17],\"5734\":[null,6],\"5735\":[1],\"5736\":[null,2],\"5737\":[1],\"5738\":[null,1],\"5739\":[null,7],\"5740\":[null,7],\"5741\":[null,4],\"5742\":[2],\"5743\":[null,22],\"5744\":[1],\"5745\":[null,12],\"5746\":[1],\"5747\":[null,13],\"5748\":[1],\"5749\":[null,4],\"5750\":[1],\"5751\":[1],\"5752\":[null,8],\"5753\":[null,2],\"5754\":[null,6],\"5755\":[null,3],\"5756\":[null,2],\"5757\":[null,1],\"5758\":[null,3],\"5759\":[null,19],\"5760\":[null,10],\"5761\":[null,36],\"5762\":[1],\"5763\":[null,16],\"5764\":[null,3],\"5765\":[null,10],\"5766\":[null,6],\"5767\":[1],\"5768\":[null,2],\"5769\":[null,1],\"5770\":[null,1],\"5771\":[null,2],\"5772\":[null,1],\"5773\":[null,3],\"5774\":[null,1],\"5775\":[null,22],\"5776\":[null,27],\"5777\":[1],\"5778\":[null,8],\"5779\":[3],\"5780\":[null,7],\"5781\":[null,1],\"5782\":[null,10],\"5783\":[3],\"5784\":[null,7],\"5785\":[null,1],\"5786\":[null,11],\"5787\":[3],\"5788\":[null,4],\"5789\":[null,1],\"5790\":[null,11],\"5791\":[3],\"5792\":[null,8],\"5793\":[null,1],\"5794\":[null,9],\"5795\":[3],\"5796\":[null,15],\"5797\":[null,1],\"5798\":[null,10],\"5799\":[3],\"5800\":[null,7],\"5801\":[null,7],\"5802\":[null,5],\"5803\":[null,7],\"5804\":[null,1],\"5805\":[null,14],\"5806\":[1],\"5807\":[null,2],\"5808\":[null,3],\"5809\":[null,3],\"5810\":[null,3],\"5811\":[null,6],\"5812\":[null,4],\"5813\":[null,10],\"5814\":[null,10],\"5815\":[null,11],\"5816\":[1],\"5817\":[null,13],\"5818\":[1],\"5819\":[null,21],\"5820\":[null,1],\"5821\":[null,9],\"5822\":[null,7],\"5823\":[1],\"5824\":[null,33],\"5825\":[null,64],\"5826\":[null,2],\"5827\":[null,3],\"5828\":[null,6],\"5829\":[null,5],\"5830\":[null,2],\"5831\":[null,4],\"5832\":[1],\"5833\":[null,2],\"5834\":[null,3],\"5835\":[null,2],\"5836\":[null,4],\"5837\":[null,2],\"5838\":[null,3],\"5839\":[null,1],\"5840\":[null,1],\"5841\":[null,1],\"5842\":[null,1],\"5843\":[1],\"5844\":[null,1],\"5845\":[null,3],\"5846\":[null,15],\"5847\":[1],\"5848\":[null,2],\"5849\":[null,2],\"5850\":[null,3],\"5851\":[null,4],\"5852\":[null,5],\"5853\":[null,49],\"5854\":[null,2],\"5855\":[null,13],\"5856\":[null,2],\"5857\":[null,1],\"5858\":[null,1],\"5859\":[null,2],\"5860\":[null,6],\"5861\":[null,5],\"5862\":[null,3],\"5863\":[null,3],\"5864\":[null,2],\"5865\":[null,4],\"5866\":[null,2],\"5867\":[null,3],\"5868\":[null,2],\"5869\":[null,3],\"5870\":[null,2],\"5871\":[null,1],\"5872\":[null,2],\"5873\":[null,3],\"5874\":[null,2],\"5875\":[null,4],\"5876\":[null,2],\"5877\":[null,7],\"5878\":[null,2],\"5879\":[null,6],\"5880\":[null,1],\"5881\":[null,6],\"5882\":[null,10],\"5883\":[null,76],\"5884\":[null,3],\"5885\":[null,2],\"5886\":[null,7],\"5887\":[null,9],\"5888\":[null,35],\"5889\":[1],\"5890\":[null,8],\"5891\":[null,3],\"5892\":[null,1],\"5893\":[null,1],\"5894\":[null,1],\"5895\":[null,3],\"5896\":[null,4],\"5897\":[null,4],\"5898\":[null,1],\"5899\":[null,5],\"5900\":[null,2],\"5901\":[null,3],\"5902\":[null,2],\"5903\":[null,1],\"5904\":[null,1],\"5905\":[null,5],\"5906\":[null,4],\"5907\":[null,3],\"5908\":[null,2],\"5909\":[null,3],\"5910\":[null,1],\"5911\":[null,2],\"5912\":[null,4],\"5913\":[null,2],\"5914\":[null,104],\"5915\":[null,1],\"5916\":[null,26],\"5917\":[null,4],\"5918\":[null,1],\"5919\":[null,1],\"5920\":[null,1],\"5921\":[null,1],\"5922\":[null,2],\"5923\":[null,9],\"5924\":[null,2],\"5925\":[null,2],\"5926\":[null,6],\"5927\":[null,1],\"5928\":[null,2],\"5929\":[null,2],\"5930\":[null,3],\"5931\":[null,2],\"5932\":[null,5],\"5933\":[null,1],\"5934\":[null,4],\"5935\":[null,2],\"5936\":[null,1],\"5937\":[null,2],\"5938\":[null,5],\"5939\":[null,2],\"5940\":[null,44],\"5941\":[null,1],\"5942\":[null,19],\"5943\":[1],\"5944\":[null,7],\"5945\":[null,4],\"5946\":[null,1],\"5947\":[null,1],\"5948\":[null,1],\"5949\":[null,1],\"5950\":[null,4],\"5951\":[null,4],\"5952\":[null,2],\"5953\":[null,2],\"5954\":[null,4],\"5955\":[null,1],\"5956\":[null,4],\"5957\":[null,3],\"5958\":[null,2],\"5959\":[null,2],\"5960\":[null,2],\"5961\":[null,1],\"5962\":[null,62],\"5963\":[null,12],\"5964\":[null,49],\"5965\":[null,10],\"5966\":[null,1],\"5967\":[null,1],\"5968\":[null,1],\"5969\":[null,1],\"5970\":[null,5],\"5971\":[null,4],\"5972\":[null,1],\"5973\":[null,4],\"5974\":[null,3],\"5975\":[null,2],\"5976\":[null,2],\"5977\":[null,6],\"5978\":[null,1],\"5979\":[null,2],\"5980\":[null,4],\"5981\":[null,1],\"5982\":[null,2],\"5983\":[null,4],\"5984\":[null,1],\"5985\":[null,2],\"5986\":[null,3],\"5987\":[null,2],\"5988\":[null,2],\"5989\":[null,6],\"5990\":[null,1],\"5991\":[null,4],\"5992\":[null,4],\"5993\":[null,16],\"5994\":[1],\"5995\":[null,7],\"5996\":[null,2],\"5997\":[null,1],\"5998\":[null,1],\"5999\":[null,1],\"6000\":[null,1],\"6001\":[null,7],\"6002\":[null,5],\"6003\":[null,2],\"6004\":[null,2],\"6005\":[null,13],\"6006\":[null,1],\"6007\":[null,7],\"6008\":[null,7],\"6009\":[null,2],\"6010\":[null,2],\"6011\":[null,11],\"6012\":[null,2],\"6013\":[null,62],\"6014\":[null,2],\"6015\":[null,34],\"6016\":[null,9],\"6017\":[null,43],\"6018\":[null,1],\"6019\":[null,7],\"6020\":[null,9],\"6021\":[null,1],\"6022\":[null,1],\"6023\":[null,1],\"6024\":[null,1],\"6025\":[null,5],\"6026\":[null,4],\"6027\":[null,2],\"6028\":[null,2],\"6029\":[null,7],\"6030\":[null,1],\"6031\":[null,2],\"6032\":[null,7],\"6033\":[null,3],\"6034\":[null,2],\"6035\":[null,7],\"6036\":[null,2],\"6037\":[null,2],\"6038\":[null,7],\"6039\":[null,1],\"6040\":[null,2],\"6041\":[null,6],\"6042\":[null,1],\"6043\":[null,2],\"6044\":[null,8],\"6045\":[null,1],\"6046\":[null,2],\"6047\":[null,5],\"6048\":[null,7],\"6049\":[null,11],\"6050\":[null,5],\"6051\":[1],\"6052\":[null,8],\"6053\":[null,1],\"6054\":[null,50],\"6055\":[null,1],\"6056\":[null,1],\"6057\":[1],\"6058\":[null,7],\"6059\":[null,25],\"6060\":[null,5],\"6061\":[null,10],\"6062\":[null,5],\"6063\":[null,112],\"6064\":[null,4],\"6065\":[null,120],\"6066\":[null,3],\"6067\":[null,3],\"6068\":[null,3],\"6069\":[null,3],\"6070\":[null,2],\"6071\":[null,32],\"6072\":[null,4],\"6073\":[null,3],\"6074\":[null,5],\"6075\":[null,3],\"6076\":[null,110],\"6077\":[null,4],\"6078\":[null,2],\"6079\":[null,6],\"6080\":[null,7],\"6081\":[null,50],\"6082\":[null,6],\"6083\":[null,112],\"6084\":[null,5],\"6085\":[null,4],\"6086\":[null,100],\"6087\":[null,4],\"6088\":[1],\"6089\":[null,4],\"6090\":[null,36],\"6091\":[null,3],\"6092\":[null,2],\"6093\":[null,3],\"6094\":[null,4],\"6095\":[null,3],\"6096\":[null,51],\"6097\":[null,6],\"6098\":[null,7],\"6099\":[null,53],\"6100\":[null,3],\"6101\":[null,37],\"6102\":[null,5],\"6103\":[null,5],\"6104\":[null,3],\"6105\":[null,6],\"6106\":[3],\"6107\":[null,32],\"6108\":[null,10],\"6109\":[null,68],\"6110\":[null,2],\"6111\":[null,73],\"6112\":[null,9],\"6113\":[null,5],\"6114\":[null,63],\"6115\":[null,4],\"6116\":[null,24],\"6117\":[null,3],\"6118\":[null,265],\"6119\":[null,8],\"6120\":[null,10],\"6121\":[null,5],\"6122\":[1],\"6123\":[null,3],\"6124\":[null,4],\"6125\":[null,4],\"6126\":[null,3],\"6127\":[null,3],\"6128\":[null,4],\"6129\":[null,5],\"6130\":[null,4],\"6131\":[1],\"6132\":[null,7],\"6133\":[null,9],\"6134\":[null,9],\"6135\":[null,8],\"6136\":[null,5],\"6137\":[null,9],\"6138\":[null,12],\"6139\":[1],\"6140\":[null,9],\"6141\":[null,19],\"6142\":[null,2],\"6143\":[null,1],\"6144\":[null,19],\"6145\":[1],\"6146\":[null,2],\"6147\":[null,4],\"6148\":[null,1],\"6149\":[null,8],\"6150\":[null,1],\"6151\":[null,18],\"6152\":[null,1],\"6153\":[null,18],\"6154\":[null,13],\"6155\":[null,7],\"6156\":[null,1],\"6157\":[null,24],\"6158\":[null,4],\"6159\":[null,8],\"6160\":[null,10],\"6161\":[null,7],\"6162\":[1],\"6163\":[3],\"6164\":[null,17],\"6165\":[1],\"6166\":[null,6],\"6167\":[1],\"6168\":[null,19],\"6169\":[1],\"6170\":[null,12],\"6171\":[1],\"6172\":[null,12],\"6173\":[null,12],\"6174\":[null,3],\"6175\":[1],\"6176\":[null,11],\"6177\":[null,10],\"6178\":[null,7],\"6179\":[null,3],\"6180\":[null,66],\"6181\":[null,2],\"6182\":[null,2],\"6183\":[null,2],\"6184\":[null,3],\"6185\":[null,2],\"6186\":[null,7],\"6187\":[null,8],\"6188\":[null,7],\"6189\":[null,5],\"6190\":[null,11],\"6191\":[null,13],\"6192\":[null,6],\"6193\":[null,12],\"6194\":[null,1],\"6195\":[null,3],\"6196\":[3],\"6197\":[null,11],\"6198\":[null,5],\"6199\":[null,11],\"6200\":[null,6],\"6201\":[null,357],\"6202\":[null,3],\"6203\":[null,5],\"6204\":[null,6],\"6205\":[null,6],\"6206\":[null,7],\"6207\":[null,13],\"6208\":[2],\"6209\":[null,5],\"6210\":[null,4],\"6211\":[null,3],\"6212\":[null,8],\"6213\":[null,6],\"6214\":[null,4],\"6215\":[null,7],\"6216\":[null,10],\"6217\":[2],\"6218\":[null,15],\"6219\":[null,62],\"6220\":[1],\"6221\":[null,1],\"6222\":[null,2],\"6223\":[1],\"6224\":[null,3],\"6225\":[null,2],\"6226\":[null,2],\"6227\":[null,2],\"6228\":[1],\"6229\":[null,5],\"6230\":[1],\"6231\":[null,2],\"6232\":[null,11],\"6233\":[null,6],\"6234\":[1],\"6235\":[null,2],\"6236\":[null,17],\"6237\":[1],\"6238\":[null,2],\"6239\":[null,1],\"6240\":[1],\"6241\":[null,5],\"6242\":[null,7],\"6243\":[null,2],\"6244\":[null,2],\"6245\":[null,2],\"6246\":[null,3],\"6247\":[null,7],\"6248\":[null,2],\"6249\":[null,2],\"6250\":[null,2],\"6251\":[null,2],\"6252\":[null,5],\"6253\":[null,5],\"6254\":[null,1],\"6255\":[null,1],\"6256\":[1],\"6257\":[null,2],\"6258\":[null,227],\"6259\":[null,7],\"6260\":[null,10],\"6261\":[null,10],\"6262\":[null,8],\"6263\":[null,4],\"6264\":[1],\"6265\":[null,4],\"6266\":[null,9],\"6267\":[null,6],\"6268\":[null,4],\"6269\":[1],\"6270\":[null,8],\"6271\":[null,13],\"6272\":[null,6],\"6273\":[null,8],\"6274\":[null,11],\"6275\":[null,8],\"6276\":[null,6],\"6277\":[1],\"6278\":[null,7],\"6279\":[1],\"6280\":[null,3],\"6281\":[null,4],\"6282\":[null,3],\"6283\":[null,5],\"6284\":[null,4],\"6285\":[null,5],\"6286\":[null,4],\"6287\":[null,4],\"6288\":[1],\"6289\":[null,2],\"6290\":[null,9],\"6291\":[null,5],\"6292\":[null,6],\"6293\":[null,3],\"6294\":[1],\"6295\":[null,2],\"6296\":[null,3],\"6297\":[null,4],\"6298\":[null,5],\"6299\":[null,3],\"6300\":[1],\"6301\":[null,2],\"6302\":[null,7],\"6303\":[null,8],\"6304\":[1],\"6305\":[null,2],\"6306\":[null,3],\"6307\":[null,4],\"6308\":[null,3],\"6309\":[null,3],\"6310\":[null,3],\"6311\":[null,4],\"6312\":[1],\"6313\":[null,3],\"6314\":[null,3],\"6315\":[null,4],\"6316\":[1],\"6317\":[null,2],\"6318\":[null,3],\"6319\":[null,3],\"6320\":[1],\"6321\":[null,2],\"6322\":[null,4],\"6323\":[null,4],\"6324\":[null,3],\"6325\":[null,3],\"6326\":[1],\"6327\":[null,6],\"6328\":[null,4],\"6329\":[null,4],\"6330\":[null,3],\"6331\":[null,3],\"6332\":[null,3],\"6333\":[null,4],\"6334\":[null,3],\"6335\":[null,6],\"6336\":[1],\"6337\":[null,1],\"6338\":[null,5],\"6339\":[1],\"6340\":[null,2],\"6341\":[null,4],\"6342\":[null,7],\"6343\":[null,3],\"6344\":[null,4],\"6345\":[null,3],\"6346\":[null,3],\"6347\":[null,4],\"6348\":[null,3],\"6349\":[null,3],\"6350\":[null,3],\"6351\":[1],\"6352\":[null,7],\"6353\":[null,3],\"6354\":[null,4],\"6355\":[null,3],\"6356\":[1],\"6357\":[null,2],\"6358\":[null,6],\"6359\":[null,3],\"6360\":[null,5],\"6361\":[1],\"6362\":[null,2],\"6363\":[null,4],\"6364\":[null,4],\"6365\":[null,3],\"6366\":[null,3],\"6367\":[1],\"6368\":[null,2],\"6369\":[null,4],\"6370\":[null,5],\"6371\":[null,3],\"6372\":[null,3],\"6373\":[null,3],\"6374\":[null,3],\"6375\":[null,4],\"6376\":[null,4],\"6377\":[null,3],\"6378\":[null,4],\"6379\":[null,4],\"6380\":[1],\"6381\":[null,2],\"6382\":[null,3],\"6383\":[null,4],\"6384\":[null,6],\"6385\":[null,3],\"6386\":[null,3],\"6387\":[null,3],\"6388\":[null,5],\"6389\":[null,3],\"6390\":[1],\"6391\":[null,3],\"6392\":[null,5],\"6393\":[null,4],\"6394\":[null,4],\"6395\":[null,3],\"6396\":[null,4],\"6397\":[1],\"6398\":[null,2],\"6399\":[null,5],\"6400\":[null,9],\"6401\":[null,5],\"6402\":[null,6],\"6403\":[null,3],\"6404\":[null,3],\"6405\":[null,7],\"6406\":[1],\"6407\":[null,2],\"6408\":[null,11],\"6409\":[null,5],\"6410\":[null,4],\"6411\":[1],\"6412\":[null,2],\"6413\":[null,9],\"6414\":[null,3],\"6415\":[null,8],\"6416\":[null,4],\"6417\":[null,6],\"6418\":[1],\"6419\":[null,2],\"6420\":[null,3],\"6421\":[null,3],\"6422\":[null,5],\"6423\":[null,4],\"6424\":[1],\"6425\":[null,2],\"6426\":[null,3],\"6427\":[null,4],\"6428\":[1],\"6429\":[null,2],\"6430\":[null,3],\"6431\":[null,3],\"6432\":[null,4],\"6433\":[null,4],\"6434\":[null,3],\"6435\":[null,3],\"6436\":[null,3],\"6437\":[null,5],\"6438\":[null,3],\"6439\":[null,6],\"6440\":[1],\"6441\":[null,2],\"6442\":[null,4],\"6443\":[null,6],\"6444\":[null,9],\"6445\":[null,4],\"6446\":[null,6],\"6447\":[1],\"6448\":[null,3],\"6449\":[null,7],\"6450\":[null,3],\"6451\":[null,3],\"6452\":[null,4],\"6453\":[null,4],\"6454\":[null,11],\"6455\":[1],\"6456\":[null,2],\"6457\":[null,3],\"6458\":[null,5],\"6459\":[null,4],\"6460\":[null,5],\"6461\":[null,3],\"6462\":[null,5],\"6463\":[1],\"6464\":[null,2],\"6465\":[null,4],\"6466\":[null,3],\"6467\":[1],\"6468\":[null,3],\"6469\":[null,3],\"6470\":[null,8],\"6471\":[null,3],\"6472\":[null,3],\"6473\":[null,4],\"6474\":[null,5],\"6475\":[1],\"6476\":[null,2],\"6477\":[null,5],\"6478\":[null,3],\"6479\":[null,4],\"6480\":[null,3],\"6481\":[null,4],\"6482\":[null,4],\"6483\":[1],\"6484\":[null,3],\"6485\":[null,5],\"6486\":[null,4],\"6487\":[null,5],\"6488\":[null,4],\"6489\":[null,3],\"6490\":[null,3],\"6491\":[null,3],\"6492\":[null,4],\"6493\":[null,4],\"6494\":[1],\"6495\":[null,3],\"6496\":[null,4],\"6497\":[null,6],\"6498\":[null,9],\"6499\":[null,4],\"6500\":[null,4],\"6501\":[null,6],\"6502\":[null,7],\"6503\":[null,3],\"6504\":[null,3],\"6505\":[null,7],\"6506\":[null,7],\"6507\":[null,9],\"6508\":[1],\"6509\":[null,2],\"6510\":[null,4],\"6511\":[null,3],\"6512\":[null,3],\"6513\":[null,5],\"6514\":[null,7],\"6515\":[null,3],\"6516\":[null,3],\"6517\":[1],\"6518\":[null,2],\"6519\":[null,3],\"6520\":[null,3],\"6521\":[null,3],\"6522\":[null,4],\"6523\":[null,3],\"6524\":[null,4],\"6525\":[1],\"6526\":[null,2],\"6527\":[null,5],\"6528\":[1],\"6529\":[null,2],\"6530\":[null,4],\"6531\":[null,5],\"6532\":[null,5],\"6533\":[null,6],\"6534\":[1],\"6535\":[null,2],\"6536\":[null,5],\"6537\":[null,4],\"6538\":[null,3],\"6539\":[null,3],\"6540\":[null,4],\"6541\":[null,26],\"6542\":[null,9],\"6543\":[1],\"6544\":[null,2],\"6545\":[null,3],\"6546\":[null,6],\"6547\":[null,5],\"6548\":[null,5],\"6549\":[null,4],\"6550\":[null,5],\"6551\":[null,7],\"6552\":[null,12],\"6553\":[1],\"6554\":[null,2],\"6555\":[null,5],\"6556\":[null,4],\"6557\":[null,3],\"6558\":[null,6],\"6559\":[null,6],\"6560\":[null,3],\"6561\":[1],\"6562\":[null,3],\"6563\":[null,3],\"6564\":[null,3],\"6565\":[null,3],\"6566\":[null,3],\"6567\":[null,3],\"6568\":[null,5],\"6569\":[1],\"6570\":[null,2],\"6571\":[null,6],\"6572\":[null,6],\"6573\":[null,6],\"6574\":[1],\"6575\":[null,3],\"6576\":[null,7],\"6577\":[null,7],\"6578\":[null,4],\"6579\":[null,4],\"6580\":[null,3],\"6581\":[null,3],\"6582\":[null,3],\"6583\":[null,4],\"6584\":[null,8],\"6585\":[null,5],\"6586\":[1],\"6587\":[null,2],\"6588\":[null,4],\"6589\":[null,3],\"6590\":[null,3],\"6591\":[1],\"6592\":[null,3],\"6593\":[null,5],\"6594\":[null,8],\"6595\":[null,7],\"6596\":[1],\"6597\":[null,4],\"6598\":[null,6],\"6599\":[null,10],\"6600\":[null,3],\"6601\":[null,7],\"6602\":[null,5],\"6603\":[null,15],\"6604\":[1],\"6605\":[null,2],\"6606\":[null,4],\"6607\":[null,4],\"6608\":[null,3],\"6609\":[null,3],\"6610\":[1],\"6611\":[null,2],\"6612\":[null,5],\"6613\":[null,5],\"6614\":[null,5],\"6615\":[null,6],\"6616\":[null,7],\"6617\":[1],\"6618\":[null,2],\"6619\":[null,5],\"6620\":[null,4],\"6621\":[null,8],\"6622\":[null,4],\"6623\":[null,7],\"6624\":[1],\"6625\":[null,3],\"6626\":[null,4],\"6627\":[null,5],\"6628\":[null,3],\"6629\":[null,3],\"6630\":[null,3],\"6631\":[null,4],\"6632\":[null,5],\"6633\":[null,4],\"6634\":[null,3],\"6635\":[null,4],\"6636\":[null,6],\"6637\":[null,6],\"6638\":[null,4],\"6639\":[null,3],\"6640\":[null,14],\"6641\":[null,3],\"6642\":[null,5],\"6643\":[null,4],\"6644\":[null,6],\"6645\":[1],\"6646\":[null,2],\"6647\":[null,8],\"6648\":[null,3],\"6649\":[null,3],\"6650\":[null,3],\"6651\":[null,10],\"6652\":[null,4],\"6653\":[null,5],\"6654\":[null,3],\"6655\":[null,5],\"6656\":[null,19],\"6657\":[1],\"6658\":[null,2],\"6659\":[null,5],\"6660\":[null,3],\"6661\":[null,5],\"6662\":[null,4],\"6663\":[1],\"6664\":[null,2],\"6665\":[null,7],\"6666\":[null,5],\"6667\":[null,11],\"6668\":[null,7],\"6669\":[null,5],\"6670\":[null,4],\"6671\":[null,4],\"6672\":[null,5],\"6673\":[null,6],\"6674\":[null,5],\"6675\":[null,5],\"6676\":[null,5],\"6677\":[null,5],\"6678\":[1],\"6679\":[null,2],\"6680\":[null,4],\"6681\":[null,3],\"6682\":[1],\"6683\":[1],\"6684\":[null,4],\"6685\":[null,3],\"6686\":[null,3],\"6687\":[null,3],\"6688\":[1],\"6689\":[null,2],\"6690\":[null,5],\"6691\":[null,4],\"6692\":[null,6],\"6693\":[null,5],\"6694\":[null,4],\"6695\":[1],\"6696\":[null,2],\"6697\":[null,3],\"6698\":[null,8],\"6699\":[1],\"6700\":[null,9],\"6701\":[null,14],\"6702\":[null,11],\"6703\":[null,6],\"6704\":[null,4],\"6705\":[null,4],\"6706\":[null,7],\"6707\":[null,4],\"6708\":[null,4],\"6709\":[null,4],\"6710\":[null,3],\"6711\":[null,4],\"6712\":[null,7],\"6713\":[null,6],\"6714\":[null,5],\"6715\":[null,11],\"6716\":[null,3],\"6717\":[null,10],\"6718\":[null,9],\"6719\":[null,6],\"6720\":[null,5],\"6721\":[null,6],\"6722\":[1],\"6723\":[null,2],\"6724\":[1],\"6725\":[null,2],\"6726\":[null,4],\"6727\":[null,2],\"6728\":[null,3],\"6729\":[null,4],\"6730\":[null,2],\"6731\":[null,1],\"6732\":[null,2],\"6733\":[null,2],\"6734\":[null,1],\"6735\":[null,5],\"6736\":[null,3],\"6737\":[null,7],\"6738\":[null,3],\"6739\":[null,2],\"6740\":[null,4],\"6741\":[null,1],\"6742\":[null,7],\"6743\":[2],\"6744\":[null,18],\"6745\":[null,3],\"6746\":[null,3],\"6747\":[1],\"6748\":[null,3],\"6749\":[null,3],\"6750\":[null,5],\"6751\":[null,5],\"6752\":[null,3],\"6753\":[null,4],\"6754\":[null,4],\"6755\":[null,5],\"6756\":[null,7],\"6757\":[null,3],\"6758\":[null,1],\"6759\":[null,3],\"6760\":[null,3],\"6761\":[null,3],\"6762\":[null,1],\"6763\":[null,4],\"6764\":[null,4],\"6765\":[null,4],\"6766\":[null,4],\"6767\":[null,3],\"6768\":[null,4],\"6769\":[null,2],\"6770\":[null,1],\"6771\":[null,1],\"6772\":[null,4],\"6773\":[null,1],\"6774\":[null,2],\"6775\":[null,1],\"6776\":[null,4],\"6777\":[null,1],\"6778\":[null,1],\"6779\":[null,3],\"6780\":[null,2],\"6781\":[null,1],\"6782\":[null,1],\"6783\":[null,3],\"6784\":[null,2],\"6785\":[null,1],\"6786\":[null,1],\"6787\":[null,5],\"6788\":[null,4],\"6789\":[null,5],\"6790\":[null,3],\"6791\":[null,3],\"6792\":[null,3],\"6793\":[null,3],\"6794\":[1],\"6795\":[null,7],\"6796\":[1],\"6797\":[null,6],\"6798\":[null,13],\"6799\":[null,8],\"6800\":[null,5],\"6801\":[null,9],\"6802\":[null,7],\"6803\":[null,10],\"6804\":[3],\"6805\":[null,3],\"6806\":[null,8],\"6807\":[null,4],\"6808\":[null,24],\"6809\":[null,2],\"6810\":[null,13],\"6811\":[null,5],\"6812\":[null,3],\"6813\":[3],\"6814\":[null,13],\"6815\":[null,10],\"6816\":[1],\"6817\":[null,13],\"6818\":[null,5],\"6819\":[2],\"6820\":[null,11],\"6821\":[null,17],\"6822\":[null,17],\"6823\":[2],\"6824\":[null,14],\"6825\":[null,3],\"6826\":[null,10],\"6827\":[null,16],\"6828\":[null,16],\"6829\":[null,15],\"6830\":[null,9],\"6831\":[3],\"6832\":[null,4],\"6833\":[null,4],\"6834\":[null,28],\"6835\":[null,16],\"6836\":[null,16],\"6837\":[null,10],\"6838\":[5],\"6839\":[null,3],\"6840\":[null,16],\"6841\":[null,5],\"6842\":[null,10],\"6843\":[1],\"6844\":[null,7],\"6845\":[null,12],\"6846\":[1],\"6847\":[null,5],\"6848\":[null,7],\"6849\":[1],\"6850\":[null,9],\"6851\":[null,16],\"6852\":[null,2],\"6853\":[null,16],\"6854\":[null,3],\"6855\":[1],\"6856\":[null,5],\"6857\":[1],\"6858\":[null,13],\"6859\":[null,12],\"6860\":[null,5],\"6861\":[1],\"6862\":[null,3],\"6863\":[null,13],\"6864\":[null,18],\"6865\":[null,6],\"6866\":[null,11],\"6867\":[null,13],\"6868\":[null,7],\"6869\":[2],\"6870\":[null,10],\"6871\":[null,7],\"6872\":[null,11],\"6873\":[null,2],\"6874\":[null,6],\"6875\":[null,5],\"6876\":[null,8],\"6877\":[null,8],\"6878\":[2],\"6879\":[null,5],\"6880\":[null,6],\"6881\":[null,15],\"6882\":[2],\"6883\":[null,9],\"6884\":[null,8],\"6885\":[null,9],\"6886\":[2],\"6887\":[null,9],\"6888\":[null,12],\"6889\":[null,3],\"6890\":[1],\"6891\":[null,6],\"6892\":[2],\"6893\":[null,5],\"6894\":[2],\"6895\":[null,5],\"6896\":[null,10],\"6897\":[null,5],\"6898\":[null,11],\"6899\":[1],\"6900\":[null,7],\"6901\":[null,13],\"6902\":[null,10],\"6903\":[null,4],\"6904\":[null,15],\"6905\":[null,7],\"6906\":[null,20],\"6907\":[null,7],\"6908\":[1],\"6909\":[null,7],\"6910\":[null,14],\"6911\":[null,6],\"6912\":[2],\"6913\":[null,7],\"6914\":[null,3],\"6915\":[null,12],\"6916\":[1],\"6917\":[null,8],\"6918\":[null,1],\"6919\":[null,1],\"6920\":[null,1],\"6921\":[null,1],\"6922\":[null,1],\"6923\":[null,5],\"6924\":[null,3],\"6925\":[null,15],\"6926\":[null,6],\"6927\":[null,42],\"6928\":[2],\"6929\":[null,8],\"6930\":[null,8],\"6931\":[1],\"6932\":[null,6],\"6933\":[null,7],\"6934\":[null,9],\"6935\":[null,2],\"6936\":[null,8],\"6937\":[null,5],\"6938\":[2],\"6939\":[null,4],\"6940\":[null,11],\"6941\":[null,9],\"6942\":[null,16],\"6943\":[null,9],\"6944\":[null,13],\"6945\":[1],\"6946\":[null,17],\"6947\":[null,4],\"6948\":[1],\"6949\":[null,12],\"6950\":[null,5],\"6951\":[null,32],\"6952\":[null,6],\"6953\":[1],\"6954\":[null,3],\"6955\":[2],\"6956\":[null,3],\"6957\":[null,6],\"6958\":[null,11],\"6959\":[1],\"6960\":[null,11],\"6961\":[null,7],\"6962\":[null,33],\"6963\":[null,14],\"6964\":[null,10],\"6965\":[1],\"6966\":[null,4],\"6967\":[null,18],\"6968\":[null,5],\"6969\":[null,14],\"6970\":[null,3],\"6971\":[1],\"6972\":[2],\"6973\":[null,4],\"6974\":[null,13],\"6975\":[null,8],\"6976\":[1],\"6977\":[null,10],\"6978\":[null,8],\"6979\":[1],\"6980\":[null,2],\"6981\":[null,3],\"6982\":[null,11],\"6983\":[3],\"6984\":[null,9],\"6985\":[null,6],\"6986\":[2],\"6987\":[null,15],\"6988\":[null,9],\"6989\":[null,9],\"6990\":[null,10],\"6991\":[null,14],\"6992\":[null,9],\"6993\":[3],\"6994\":[null,12],\"6995\":[null,7],\"6996\":[null,35],\"6997\":[null,6],\"6998\":[1],\"6999\":[null,4],\"7000\":[1],\"7001\":[null,2],\"7002\":[null,4],\"7003\":[null,2],\"7004\":[1],\"7005\":[null,5],\"7006\":[null,1],\"7007\":[null,5],\"7008\":[null,3],\"7009\":[null,3],\"7010\":[null,3],\"7011\":[1],\"7012\":[null,7],\"7013\":[null,6],\"7014\":[null,1],\"7015\":[1],\"7016\":[null,1],\"7017\":[1],\"7018\":[2],\"7019\":[1],\"7020\":[1],\"7021\":[2],\"7022\":[1],\"7023\":[1],\"7024\":[1],\"7025\":[1],\"7026\":[1]},\"averageFieldLength\":[1.483700089413197,7.706792825500802],\"storedFields\":{\"0\":{\"h\":\"项目主页\"},\"1\":{\"t\":\"这是项目主页的案例。你可以在这里放置你的主体内容。\"},\"2\":{\"t\":\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\"},\"3\":{\"t\":\"配置项的相关说明详见 项目主页配置。\"},\"4\":{\"t\":\"\\\"@anyfork/vuepress-plugin-cursor-effects-next\\\": \\\"^0.1.0-beta.0\\\", // \\\"@vuepress-denaro/vuepress-plugin-dynamic-title\\\": \\\"^1.0.2-alpha.0\\\",\"},\"5\":{\"h\":\"幻灯片页\"},\"6\":{\"h\":\"数据库\"},\"7\":{\"h\":\"数据库\"},\"8\":{\"h\":\"主要功能与配置演示\"},\"9\":{\"h\":\"目录\",\"a\":\"目录\"},\"10\":{\"t\":\"Markdown 展示\"},\"11\":{\"t\":\"页面展示\"},\"12\":{\"t\":\"禁用展示\"},\"13\":{\"t\":\"加密展示\"},\"14\":{\"h\":\"布局与功能禁用\"},\"15\":{\"t\":\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\"},\"16\":{\"t\":\"本页面就是一个示例，禁用了如下功能:\"},\"17\":{\"t\":\"导航栏\"},\"18\":{\"t\":\"侧边栏\"},\"19\":{\"t\":\"路径导航\"},\"20\":{\"t\":\"页面信息\"},\"21\":{\"t\":\"贡献者\"},\"22\":{\"t\":\"编辑此页链接\"},\"23\":{\"t\":\"更新时间\"},\"24\":{\"t\":\"上一篇/下一篇 链接\"},\"25\":{\"t\":\"评论\"},\"26\":{\"t\":\"页脚\"},\"27\":{\"t\":\"返回顶部按钮\"},\"28\":{\"h\":\"密码加密的文章\"},\"29\":{\"t\":\"实际的文章内容。\"},\"30\":{\"t\":\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\"},\"31\":{\"t\":\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"},\"32\":{\"h\":\"Markdown 展示\"},\"33\":{\"t\":\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\"},\"34\":{\"t\":\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"},\"35\":{\"h\":\"Markdown 介绍\",\"a\":\"markdown-介绍\"},\"36\":{\"t\":\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"},\"37\":{\"h\":\"Markdown 配置\",\"a\":\"markdown-配置\"},\"38\":{\"t\":\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\"},\"39\":{\"t\":\"相关信息\"},\"40\":{\"t\":\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"},\"41\":{\"h\":\"Markdown 扩展\",\"a\":\"markdown-扩展\"},\"42\":{\"t\":\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"},\"43\":{\"h\":\"VuePress 扩展\",\"a\":\"vuepress-扩展\"},\"44\":{\"t\":\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\"},\"45\":{\"t\":\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"},\"46\":{\"h\":\"主题扩展\",\"a\":\"主题扩展\"},\"47\":{\"t\":\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"},\"48\":{\"t\":\"一键启用\"},\"49\":{\"t\":\"你可以设置在主题选项中设置 plugins.mdEnhance.enableAll: true 启用 md-enhance 插件的所有功能。\"},\"50\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"51\":{\"t\":\"安全的在 Markdown 中使用 {{ variable }}。\"},\"52\":{\"t\":\"自定义标题\"},\"53\":{\"t\":\"信息容器，包含 代码 与 链接。\"},\"54\":{\"t\":\"const a = 1; \"},\"55\":{\"t\":\"自定义标题\"},\"56\":{\"t\":\"提示容器\"},\"57\":{\"t\":\"自定义标题\"},\"58\":{\"t\":\"警告容器\"},\"59\":{\"t\":\"自定义标题\"},\"60\":{\"t\":\"危险容器\"},\"61\":{\"t\":\"自定义标题\"},\"62\":{\"t\":\"详情容器\"},\"63\":{\"t\":\"代码\"},\"64\":{\"t\":\"::: v-pre 安全的在 Markdown 中使用 {{ variable }}。 ::: ::: info 自定义标题 信息容器 ::: ::: tip 自定义标题 提示容器 ::: ::: warning 自定义标题 警告容器 ::: ::: danger 自定义标题 危险容器 ::: ::: details 自定义标题 详情容器 ::: \"},\"65\":{\"t\":\"查看详情\"},\"66\":{\"h\":\"代码块\",\"a\":\"代码块\"},\"67\":{\"t\":\"查看详情\"},\"68\":{\"h\":\"自定义对齐\",\"a\":\"自定义对齐\"},\"69\":{\"t\":\"我是居中的\"},\"70\":{\"t\":\"我在右对齐\"},\"71\":{\"t\":\"查看详情\"},\"72\":{\"h\":\"上下角标\",\"a\":\"上下角标\"},\"73\":{\"t\":\"19th H2O\"},\"74\":{\"t\":\"查看详情\"},\"75\":{\"h\":\"脚注\",\"a\":\"脚注\"},\"76\":{\"t\":\"此文字有脚注[1].\"},\"77\":{\"t\":\"查看详情\"},\"78\":{\"h\":\"标记\",\"a\":\"标记\"},\"79\":{\"t\":\"你可以标记 重要的内容 。\"},\"80\":{\"t\":\"查看详情\"},\"81\":{\"h\":\"任务列表\",\"a\":\"任务列表\"},\"82\":{\"t\":\" 计划 1\"},\"83\":{\"t\":\" 计划 2\"},\"84\":{\"t\":\"查看详情\"},\"85\":{\"h\":\"图片增强\",\"a\":\"图片增强\"},\"86\":{\"t\":\"支持为图片设置颜色模式和大小\"},\"87\":{\"t\":\"查看详情\"},\"88\":{\"h\":\"图表\",\"a\":\"图表\"},\"89\":{\"t\":\"查看详情\"},\"90\":{\"h\":\"Echarts\",\"a\":\"echarts\"},\"91\":{\"t\":\"查看详情\"},\"92\":{\"h\":\"流程图\",\"a\":\"流程图\"},\"93\":{\"t\":\"查看详情\"},\"94\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"95\":{\"t\":\"查看详情\"},\"96\":{\"h\":\"Tex 语法\",\"a\":\"tex-语法\"},\"97\":{\"t\":\"查看详情\"},\"98\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"99\":{\"t\":\"查看详情\"},\"100\":{\"h\":\"代码演示\",\"a\":\"代码演示\"},\"101\":{\"t\":\"查看详情\"},\"102\":{\"h\":\"样式化\",\"a\":\"样式化\"},\"103\":{\"t\":\"设置它没有任何效果，请不要这样使用\"},\"104\":{\"t\":\"查看详情\"},\"105\":{\"h\":\"幻灯片\",\"a\":\"幻灯片\"},\"106\":{\"t\":\"查看详情\"},\"107\":{\"t\":\"这是脚注内容 ↩︎\"},\"108\":{\"h\":\"页面配置\"},\"109\":{\"t\":\"more 注释之前的内容被视为文章摘要。\"},\"110\":{\"h\":\"页面信息\",\"a\":\"页面信息\"},\"111\":{\"t\":\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\"},\"112\":{\"t\":\"作者设置为 Ms.Hope。\"},\"113\":{\"t\":\"写作日期为 2020 年 1 月 1 日\"},\"114\":{\"t\":\"分类为 “使用指南”\"},\"115\":{\"t\":\"标签为 “页面配置” 和 “使用指南”\"},\"116\":{\"h\":\"页面内容\",\"a\":\"页面内容\"},\"117\":{\"t\":\"你可以自由在这里书写你的 Markdown。\"},\"118\":{\"t\":\"提示\"},\"119\":{\"t\":\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\"},\"120\":{\"t\":\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"},\"121\":{\"t\":\"主题包含了一个自定义徽章章可以使用:\"},\"122\":{\"t\":\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"},\"123\":{\"h\":\"页面结构\",\"a\":\"页面结构\"},\"124\":{\"t\":\"此页面应当包含:\"},\"125\":{\"t\":\"路径导航\"},\"126\":{\"t\":\"标题和页面信息\"},\"127\":{\"t\":\"TOC (文章标题列表)\"},\"128\":{\"t\":\"贡献者、更新时间等页面元信息\"},\"129\":{\"t\":\"评论\"},\"130\":{\"t\":\"导航栏\"},\"131\":{\"t\":\"侧边栏\"},\"132\":{\"t\":\"页脚\"},\"133\":{\"t\":\"返回顶部按钮\"},\"134\":{\"t\":\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"},\"135\":{\"h\":\"\"},\"136\":{\"h\":\"自我提升九大招\",\"a\":\"自我提升九大招\"},\"137\":{\"t\":\"早睡半小时，早起10分钟\"},\"138\":{\"t\":\"许多人晚睡的原因，其实都是在刷手机。从今天开始，不把手机带上床，早睡半小时，第二天就会精神饱满。把第二天的闹钟往前调10分钟，早起10分钟做些你想做的事，读书、锻炼、做早餐，都会给你带来意想不到的提升。\"},\"139\":{\"t\":\"坚持运动\"},\"140\":{\"t\":\"运动是治愈一切的良药。那些长期坚持运动的人，都在不同程度地变好看、变自律、变优秀、变健康。开始运动吧，从多散步十分钟或者每天做10个俯卧撑开始，循序渐进，踏踏实实地完成运动任务，你一定会越来越好。\"},\"141\":{\"t\":\"欣赏别人的优点，警醒自己的缺点\"},\"142\":{\"t\":\"老话说，取他人之长，补己之短。学会用欣赏的眼光看他人，汲取他人身上的闪光点。当你看到别人的缺点时，也要警醒自己身上是否有和他相似的缺点。要记得，我们所做的所有事都是为了提升自我，而不是贬低他人。\"},\"143\":{\"t\":\"坚持读书\"},\"144\":{\"t\":\"阅读是自我提升最便捷的方式。如果你经常迷茫、时常焦虑，尝试静下心来读书吧，由内而外，让书籍的知识慢慢渗透，久而久之，看问题的角度变广了，做事情的方法更灵活了，你会爱上自己的改变。\"},\"145\":{\"t\":\"在失败中总结经验\"},\"146\":{\"t\":\"人生就是起起伏伏，想要成功，必会经历失败。不要因为一次、两次失败就郁郁寡欢，相比成功而言，失败反而能给我们更多启发和教训。在失败中总结经验，不断调整自己的思维和行为，前方的路才会越走越顺。\"},\"147\":{\"t\":\"注意仪容仪表，干净清爽最重要\"},\"148\":{\"t\":\"每个人都是先从外表认识他人的，你的内在再丰富，邋遢的外表也会让人望而却步。可以不精致，但不能不干净。每天都要认真清洁自己，穿合适的衣服，干净清爽的形象会为你加分许多。\"},\"149\":{\"t\":\"练习专注力\"},\"150\":{\"t\":\"练习在一段时间内专注于一件事，会让你做事更有效率。开始时，不妨先试着定下10-15分钟的闹钟，在这段时间里专注于一件事，慢慢提升专注力。\"},\"151\":{\"t\":\"遇到困难，想办法解决而不是抱怨\"},\"152\":{\"t\":\"遇到困难时，不要只想着抱怨。越是艰难，越是要勇于攀爬，因为每一步不好走的路，都是上坡路。当你开始着手想办法的时候，就会发现，很多事没你想象的那么难。再难的事，也总有解决办法。最难的，是你不敢踏出第一步的心。\"},\"153\":{\"t\":\"每晚复盘、反思\"},\"154\":{\"t\":\"睡前15分钟，回忆一下当天发生的事、见过的人，反思自己的行为是否妥当，是否有浪费时间，是否相对昨天有所进步。不断地复盘自己，像医生一样，先检查出自己身上的缺点、弱点，再一个个拔除治疗。复盘会成为你自我提升路上最好的帮手。\"},\"155\":{\"h\":\"资源导航\"},\"156\":{\"h\":\"常用搜索\",\"a\":\"常用搜索\"},\"157\":{\"h\":\"主页\"},\"158\":{\"h\":\"流程图\"},\"159\":{\"h\":\"默认节点\",\"a\":\"默认节点\"},\"160\":{\"t\":\"注意 id 是框中显示的内容。\"},\"161\":{\"h\":\"文本框节点\",\"a\":\"文本框节点\"},\"162\":{\"t\":\"也可以在不同于 id 的框中设置文本。 如果多次这样做，它将是为将使用的节点找到的最后一个文本。 此外，如果您稍后为节点定义边，则可以省略文本定义。 渲染框时将使用先前定义的那个。\"},\"163\":{\"h\":\"图形\",\"a\":\"图形\"},\"164\":{\"t\":\"This statement declares the direction of the Flowchart.\"},\"165\":{\"t\":\"This declares the flowchart is oriented from top to bottom (TD or TB).\"},\"166\":{\"t\":\"This declares the flowchart is oriented from left to right (LR).\"},\"167\":{\"h\":\"Flowchart Orientation\",\"a\":\"flowchart-orientation\"},\"168\":{\"t\":\"Possible FlowChart orientations are:\"},\"169\":{\"t\":\"TB - top to bottom\"},\"170\":{\"t\":\"TD - top-down/ same as top to bottom\"},\"171\":{\"t\":\"BT - bottom to top\"},\"172\":{\"t\":\"RL - right to left\"},\"173\":{\"t\":\"LR - left to right\"},\"174\":{\"h\":\"Node shapes\",\"a\":\"node-shapes\"},\"175\":{\"h\":\"A node with round edges\",\"a\":\"a-node-with-round-edges\"},\"176\":{\"h\":\"A stadium-shaped node\",\"a\":\"a-stadium-shaped-node\"},\"177\":{\"t\":\"flowchart LR id1([This is the text in the box]) \"},\"178\":{\"t\":\"This is the text in the box\"},\"179\":{\"h\":\"A node in a subroutine shape\",\"a\":\"a-node-in-a-subroutine-shape\"},\"180\":{\"t\":\"flowchart LR id1[[This is the text in the box]] \"},\"181\":{\"t\":\"This is the text in the box\"},\"182\":{\"h\":\"A node in a cylindrical shape\",\"a\":\"a-node-in-a-cylindrical-shape\"},\"183\":{\"t\":\"flowchart LR id1[(Database)] \"},\"184\":{\"t\":\"Database\"},\"185\":{\"h\":\"A node in the form of a circle\",\"a\":\"a-node-in-the-form-of-a-circle\"},\"186\":{\"t\":\"flowchart LR id1((This is the text in the circle)) \"},\"187\":{\"t\":\"This is the text in the circle\"},\"188\":{\"h\":\"A node in an asymmetric shape\",\"a\":\"a-node-in-an-asymmetric-shape\"},\"189\":{\"t\":\"flowchart LR id1>This is the text in the box] \"},\"190\":{\"t\":\"This is the text in the box\"},\"191\":{\"t\":\"Currently only the shape above is possible and not its mirror. This might change with future releases.\"},\"192\":{\"h\":\"A node (rhombus)\",\"a\":\"a-node-rhombus\"},\"193\":{\"t\":\"flowchart LR id1{This is the text in the box} \"},\"194\":{\"t\":\"This is the text in the box\"},\"195\":{\"h\":\"A hexagon node\",\"a\":\"a-hexagon-node\"},\"196\":{\"t\":\"flowchart LR id1{{This is the text in the box}} \"},\"197\":{\"t\":\"This is the text in the box\"},\"198\":{\"h\":\"Parallelogram\",\"a\":\"parallelogram\"},\"199\":{\"t\":\"flowchart TD id1[/This is the text in the box/] \"},\"200\":{\"t\":\"This is the text in the box\"},\"201\":{\"h\":\"Parallelogram alt\",\"a\":\"parallelogram-alt\"},\"202\":{\"t\":\"flowchart TD id1[\\\\This is the text in the box\\\\] \"},\"203\":{\"t\":\"This is the text in the box\"},\"204\":{\"h\":\"Trapezoid\",\"a\":\"trapezoid\"},\"205\":{\"t\":\"flowchart TD A[/Christmas\\\\] \"},\"206\":{\"t\":\"Christmas\"},\"207\":{\"h\":\"Trapezoid alt\",\"a\":\"trapezoid-alt\"},\"208\":{\"t\":\"flowchart TD B[\\\\Go shopping/] \"},\"209\":{\"t\":\"Go shopping\"},\"210\":{\"h\":\"Double circle\",\"a\":\"double-circle\"},\"211\":{\"t\":\"flowchart TD id1(((This is the text in the circle))) \"},\"212\":{\"t\":\"This is the text in the circle\"},\"213\":{\"h\":\"Links between nodes\",\"a\":\"links-between-nodes\"},\"214\":{\"t\":\"Nodes can be connected with links/edges. It is possible to have different types of links or attach a text string to a link.\"},\"215\":{\"h\":\"A link with arrow head\",\"a\":\"a-link-with-arrow-head\"},\"216\":{\"t\":\"flowchart LR A-->B \"},\"217\":{\"t\":\"AB\"},\"218\":{\"h\":\"An open link\",\"a\":\"an-open-link\"},\"219\":{\"t\":\"flowchart LR A --- B \"},\"220\":{\"t\":\"AB\"},\"221\":{\"h\":\"Text on links\",\"a\":\"text-on-links\"},\"222\":{\"t\":\"flowchart LR A-- This is the text! ---B \"},\"223\":{\"t\":\"This is the text!AB\"},\"224\":{\"t\":\"or\"},\"225\":{\"t\":\"flowchart LR A---|This is the text|B \"},\"226\":{\"t\":\"This is the textAB\"},\"227\":{\"h\":\"A link with arrow head and text\",\"a\":\"a-link-with-arrow-head-and-text\"},\"228\":{\"t\":\"flowchart LR A-->|text|B \"},\"229\":{\"t\":\"textAB\"},\"230\":{\"t\":\"or\"},\"231\":{\"t\":\"flowchart LR A-- text -->B \"},\"232\":{\"t\":\"textAB\"},\"233\":{\"h\":\"Dotted link\",\"a\":\"dotted-link\"},\"234\":{\"t\":\"flowchart LR; A-.->B; \"},\"235\":{\"t\":\"AB\"},\"236\":{\"h\":\"Dotted link with text\",\"a\":\"dotted-link-with-text\"},\"237\":{\"t\":\"flowchart LR A-. text .-> B \"},\"238\":{\"t\":\"textAB\"},\"239\":{\"h\":\"Thick link\",\"a\":\"thick-link\"},\"240\":{\"t\":\"flowchart LR A ==> B \"},\"241\":{\"t\":\"AB\"},\"242\":{\"h\":\"Thick link with text\",\"a\":\"thick-link-with-text\"},\"243\":{\"t\":\"flowchart LR A == text ==> B \"},\"244\":{\"t\":\"textAB\"},\"245\":{\"h\":\"Chaining of links\",\"a\":\"chaining-of-links\"},\"246\":{\"t\":\"It is possible declare many links in the same line as per below:\"},\"247\":{\"t\":\"flowchart LR A -- text --> B -- text2 --> C \"},\"248\":{\"t\":\"texttext2ABC\"},\"249\":{\"t\":\"It is also possible to declare multiple nodes links in the same line as per below:\"},\"250\":{\"t\":\"flowchart LR a --> b & c--> d \"},\"251\":{\"t\":\"abcd\"},\"252\":{\"t\":\"You can then describe dependencies in a very expressive way. Like the one-liner below:\"},\"253\":{\"t\":\"flowchart TB A & B--> C & D \"},\"254\":{\"t\":\"ABCD\"},\"255\":{\"t\":\"If you describe the same diagram using the the basic syntax, it will take four lines. A word of warning, one could go overboard with this making the flowchart harder to read in markdown form. The Swedish word lagom comes to mind. It means, not too much and not too little. This goes for expressive syntaxes as well.\"},\"256\":{\"t\":\"flowchart TB A --> C A --> D B --> C B --> D \"},\"257\":{\"h\":\"New arrow types\",\"a\":\"new-arrow-types\"},\"258\":{\"t\":\"There are new types of arrows supported as per below:\"},\"259\":{\"t\":\"flowchart LR A --o B B --x C \"},\"260\":{\"t\":\"ABC\"},\"261\":{\"h\":\"Multi directional arrows\",\"a\":\"multi-directional-arrows\"},\"262\":{\"t\":\"There is the possibility to use multidirectional arrows.\"},\"263\":{\"t\":\"flowchart LR A o--o B B <--> C C x--x D \"},\"264\":{\"t\":\"ABCD\"},\"265\":{\"h\":\"Minimum length of a link\",\"a\":\"minimum-length-of-a-link\"},\"266\":{\"t\":\"Each node in the flowchart is ultimately assigned to a rank in the rendered graph, i.e. to a vertical or horizontal level (depending on the flowchart orientation), based on the nodes to which it is linked. By default, links can span any number of ranks, but you can ask for any link to be longer than the others by adding extra dashes in the link definition.\"},\"267\":{\"t\":\"In the following example, two extra dashes are added in the link from node B to node E, so that it spans two more ranks than regular links:\"},\"268\":{\"t\":\"flowchart TD A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B ---->|No| E[End] \"},\"269\":{\"t\":\"YesNoStartIs it?OKRethinkEnd\"},\"270\":{\"t\":\"Note Links may still be made longer than the requested number of ranks by the rendering engine to accommodate other requests.\"},\"271\":{\"t\":\"When the link label is written in the middle of the link, the extra dashes must be added on the right side of the link. The following example is equivalent to the previous one:\"},\"272\":{\"t\":\"flowchart TD A[Start] --> B{Is it?} B -- Yes --> C[OK] C --> D[Rethink] D --> B B -- No ----> E[End] \"},\"273\":{\"t\":\"YesNoStartIs it?OKRethinkEnd\"},\"274\":{\"t\":\"For dotted or thick links, the characters to add are equals signs or dots, as summed up in the following table:\"},\"275\":{\"t\":\"Length\"},\"276\":{\"t\":\"1\"},\"277\":{\"t\":\"2\"},\"278\":{\"t\":\"3\"},\"279\":{\"t\":\"Normal\"},\"280\":{\"t\":\"---\"},\"281\":{\"t\":\"----\"},\"282\":{\"t\":\"-----\"},\"283\":{\"t\":\"Normal with arrow\"},\"284\":{\"t\":\"-->\"},\"285\":{\"t\":\"--->\"},\"286\":{\"t\":\"---->\"},\"287\":{\"t\":\"Thick\"},\"288\":{\"t\":\"===\"},\"289\":{\"t\":\"====\"},\"290\":{\"t\":\"=====\"},\"291\":{\"t\":\"Thick with arrow\"},\"292\":{\"t\":\"==>\"},\"293\":{\"t\":\"===>\"},\"294\":{\"t\":\"====>\"},\"295\":{\"t\":\"Dotted\"},\"296\":{\"t\":\"-.-\"},\"297\":{\"t\":\"-..-\"},\"298\":{\"t\":\"-...-\"},\"299\":{\"t\":\"Dotted with arrow\"},\"300\":{\"t\":\"-.->\"},\"301\":{\"t\":\"-..->\"},\"302\":{\"t\":\"-...->\"},\"303\":{\"h\":\"Special characters that break syntax\",\"a\":\"special-characters-that-break-syntax\"},\"304\":{\"t\":\"It is possible to put text within quotes in order to render more troublesome characters. As in the example below:\"},\"305\":{\"t\":\"flowchart LR id1[\\\"This is the (text) in the box\\\"] \"},\"306\":{\"t\":\"This is the (text) in the box\"},\"307\":{\"h\":\"Entity codes to escape characters\",\"a\":\"entity-codes-to-escape-characters\"},\"308\":{\"t\":\"It is possible to escape characters using the syntax exemplified here.\"},\"309\":{\"t\":\" flowchart LR A[\\\"A double quote:#quot;\\\"] -->B[\\\"A dec char:#9829;\\\"] \"},\"310\":{\"t\":\"A double quote:\\\"A dec char:♥\"},\"311\":{\"t\":\"Numbers given are base 10, so # can be encoded as #35;. It is also supported to use HTML character names.\"},\"312\":{\"h\":\"Subgraphs\",\"a\":\"subgraphs\"},\"313\":{\"t\":\"subgraph title graph definition end \"},\"314\":{\"t\":\"An example below:\"},\"315\":{\"t\":\"flowchart TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end \"},\"316\":{\"t\":\"threeonec2c1twob2b1a2a1\"},\"317\":{\"t\":\"You can also set an explicit id for the subgraph.\"},\"318\":{\"t\":\"flowchart TB c1-->a2 subgraph ide1 [one] a1-->a2 end \"},\"319\":{\"t\":\"onea2a1c1\"},\"320\":{\"h\":\"flowcharts\",\"a\":\"flowcharts\"},\"321\":{\"t\":\"With the graphtype flowchart it is also possible to set edges to and from subgraphs as in the flowchart below.\"},\"322\":{\"t\":\"flowchart TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end one --> two three --> two two --> c2 \"},\"323\":{\"t\":\"threeonec2c1twob2b1a2a1\"},\"324\":{\"h\":\"Direction in subgraphs\",\"a\":\"direction-in-subgraphs\"},\"325\":{\"t\":\"With the graphtype flowcharts you can use the direction statement to set the direction which the subgraph will render like in this example.\"},\"326\":{\"t\":\"flowchart LR subgraph TOP direction TB subgraph B1 direction RL i1 -->f1 end subgraph B2 direction BT i2 -->f2 end end A --> TOP --> B B1 --> B2 \"},\"327\":{\"t\":\"TOPB1f1i1B2f2i2AB\"},\"328\":{\"h\":\"Interaction\",\"a\":\"interaction\"},\"329\":{\"t\":\"It is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab. Note: This functionality is disabled when using securityLevel='strict' and enabled when using securityLevel='loose'.\"},\"330\":{\"t\":\"click nodeId callback click nodeId call callback() \"},\"331\":{\"t\":\"nodeId is the id of the node\"},\"332\":{\"t\":\"callback is the name of a javascript function defined on the page displaying the graph, the function will be called with the nodeId as parameter.\"},\"333\":{\"t\":\"Examples of tooltip usage below:\"},\"334\":{\"t\":\"<script> var callback = function () { alert('A callback was triggered'); }; </script> \"},\"335\":{\"t\":\"The tooltip text is surrounded in double quotes. The styles of the tooltip are set by the class .mermaidTooltip.\"},\"336\":{\"t\":\"flowchart LR A-->B B-->C C-->D click A callback \\\"Tooltip for a callback\\\" click B \\\"https://www.github.com\\\" \\\"This is a tooltip for a link\\\" click A call callback() \\\"Tooltip for a callback\\\" click B href \\\"https://www.github.com\\\" \\\"This is a tooltip for a link\\\" \"},\"337\":{\"t\":\"ABCD\"},\"338\":{\"t\":\"Success The tooltip functionality and the ability to link to urls are available from version 0.5.2.\"},\"339\":{\"t\":\"Due to limitations with how Docsify handles JavaScript callback functions, an alternate working demo for the above code can be viewed at this jsfiddle.\"},\"340\":{\"t\":\"Links are opened in the same browser tab/window by default. It is possible to change this by adding a link target to the click definition (_self, _blank, _parent and _top are supported):\"},\"341\":{\"t\":\"flowchart LR A-->B B-->C C-->D D-->E click A \\\"https://www.github.com\\\" _blank click B \\\"https://www.github.com\\\" \\\"Open this in a new tab\\\" _blank click C href \\\"https://www.github.com\\\" _blank click D href \\\"https://www.github.com\\\" \\\"Open this in a new tab\\\" _blank \"},\"342\":{\"t\":\"ABCDE\"},\"343\":{\"t\":\"Beginners tip, a full example using interactive links in a html context:\"},\"344\":{\"t\":\"<body> <div class=\\\"mermaid\\\"> flowchart LR A-->B B-->C C-->D click A callback \\\"Tooltip\\\" click B \\\"https://www.github.com\\\" \\\"This is a link\\\" click C call callback() \\\"Tooltip\\\" click D href \\\"https://www.github.com\\\" \\\"This is a link\\\" </div> <script> var callback = function () { alert('A callback was triggered'); }; var config = { startOnLoad: true, flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' }, securityLevel:'loose' }; mermaid.initialize(config); </script> </body> \"},\"345\":{\"h\":\"Comments\",\"a\":\"comments\"},\"346\":{\"t\":\"Comments can be entered within a flow diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with %% (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any flow syntax\"},\"347\":{\"t\":\"flowchart LR %% this is a comment A -- text --> B{node} A -- text --> B -- text2 --> C \"},\"348\":{\"h\":\"Styling and classes\",\"a\":\"styling-and-classes\"},\"349\":{\"h\":\"Styling links\",\"a\":\"styling-links\"},\"350\":{\"t\":\"It is possible to style links. For instance you might want to style a link that is going backwards in the flow. As links have no ids in the same way as nodes, some other way of deciding what style the links should be attached to is required. Instead of ids, the order number of when the link was defined in the graph is used, or use default to apply to all links. In the example below the style defined in the linkStyle statement will belong to the fourth link in the graph:\"},\"351\":{\"t\":\"linkStyle 3 stroke:#ff3,stroke-width:4px,color:red; \"},\"352\":{\"h\":\"Styling a node\",\"a\":\"styling-a-node\"},\"353\":{\"t\":\"It is possible to apply specific styles such as a thicker border or a different background color to a node.\"},\"354\":{\"t\":\"flowchart LR id1(Start)-->id2(Stop) style id1 fill:#f9f,stroke:#333,stroke-width:4px style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5 \"},\"355\":{\"t\":\"StartStop\"},\"356\":{\"h\":\"Classes\",\"a\":\"classes\"},\"357\":{\"t\":\"More convenient than defining the style every time is to define a class of styles and attach this class to the nodes that should have a different look.\"},\"358\":{\"t\":\"a class definition looks like the example below:\"},\"359\":{\"t\":\" classDef className fill:#f9f,stroke:#333,stroke-width:4px; \"},\"360\":{\"t\":\"Attachment of a class to a node is done as per below:\"},\"361\":{\"t\":\" class nodeId1 className; \"},\"362\":{\"t\":\"It is also possible to attach a class to a list of nodes in one statement:\"},\"363\":{\"t\":\" class nodeId1,nodeId2 className; \"},\"364\":{\"t\":\"A shorter form of adding a class is to attach the classname to the node using the :::operator as per below:\"},\"365\":{\"t\":\"flowchart LR A:::someclass --> B classDef someclass fill:#f96; \"},\"366\":{\"t\":\"AB\"},\"367\":{\"h\":\"Css classes\",\"a\":\"css-classes\"},\"368\":{\"t\":\"It is also possible to predefine classes in css styles that can be applied from the graph definition as in the example below:\"},\"369\":{\"t\":\"Example style\"},\"370\":{\"t\":\"<style> .cssClass > rect{ fill:#FF0000; stroke:#FFFF00; stroke-width:4px; } </style> \"},\"371\":{\"t\":\"Example definition\"},\"372\":{\"t\":\"flowchart LR; A-->B[AAA<span>BBB</span>] B-->D class A cssClass \"},\"373\":{\"t\":\"AAAABBBD\"},\"374\":{\"h\":\"Default class\",\"a\":\"default-class\"},\"375\":{\"t\":\"If a class is named default it will be assigned to all classes without specific class definitions.\"},\"376\":{\"t\":\" classDef default fill:#f9f,stroke:#333,stroke-width:4px; \"},\"377\":{\"h\":\"Basic support for fontawesome\",\"a\":\"basic-support-for-fontawesome\"},\"378\":{\"t\":\"It is possible to add icons from fontawesome.\"},\"379\":{\"t\":\"The icons are accessed via the syntax fa:#icon class name#.\"},\"380\":{\"t\":\"flowchart TD B[\\\"fab:fa-twitter for peace\\\"] B-->C[fa:fa-ban forbidden] B-->D(fa:fa-spinner); B-->E(A fa:fa-camera-retro perhaps?) \"},\"381\":{\"t\":\"for peace forbiddenA perhaps?\"},\"382\":{\"t\":\"Mermaid is now only compatible with Font Awesome versions 4 and 5. Check that you are using the correct version of Font Awesome.\"},\"383\":{\"h\":\"Graph declarations with spaces between vertices and link and without semicolon\",\"a\":\"graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon\"},\"384\":{\"t\":\"In graph declarations, the statements also can now end without a semicolon. After release 0.2.16, ending a graph statement with semicolon is just optional. So the below graph declaration is also valid along with the old declarations of the graph.\"},\"385\":{\"t\":\"A single space is allowed between vertices and the link. However there should not be any space between a vertex and its text and a link and its text. The old syntax of graph declaration will also work and hence this new feature is optional and is introduced to improve readability.\"},\"386\":{\"t\":\"Below is the new declaration of the graph edges which is also valid along with the old declaration of the graph edges.\"},\"387\":{\"t\":\"flowchart LR A[Hard edge] -->|Link text| B(Round edge) B --> C{Decision} C -->|One| D[Result one] C -->|Two| E[Result two] \"},\"388\":{\"t\":\"Link textOneTwoHard edgeRound edgeDecisionResult oneResult two\"},\"389\":{\"h\":\"Configuration...\",\"a\":\"configuration\"},\"390\":{\"t\":\"Is it possible to adjust the width of the rendered flowchart.\"},\"391\":{\"t\":\"This is done by defining mermaid.flowchartConfig or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the mermaidCLI page. mermaid.flowchartConfig can be set to a JSON string with config parameters or the corresponding object.\"},\"392\":{\"h\":\"\"},\"393\":{\"t\":\"今天给大家分享一波 Java 中的代码作死小技巧，熟练掌握这些小技巧后，保证能让你写出同事看不懂的代码~\"},\"394\":{\"t\":\"至于为啥要写出同事看不懂的代码，我发现好处还是挺多的，简单举几个例子：\"},\"395\":{\"t\":\"同事无法轻易修改你的代码，避免团队协作不当引入 bug\"},\"396\":{\"t\":\"塑造个人能力的不可替代性，规避被辞退的风险\"},\"397\":{\"t\":\"代码 review 时，帮助同事治疗好多年的低血压\"},\"398\":{\"t\":\"图片\"},\"399\":{\"h\":\"壹、瞒天过海\",\"a\":\"壹、瞒天过海\"},\"400\":{\"t\":\"我打赌你肯定想不到，有人居然会在注释里下了毒。看看下面的代码，简单到main方法中只有一行注释。\"},\"401\":{\"t\":\"public static void main(String[] args) { // \\\\u000d System.out.println(\\\"coder Hydra\\\"); } \"},\"402\":{\"t\":\"猜猜看，这段程序运行结果如何？执行后它居然会在控制台打印：\"},\"403\":{\"t\":\"coder Hydra \"},\"404\":{\"t\":\"看到这你是不是一脸懵逼，为什么注释中的代码会被执行？\"},\"405\":{\"t\":\"其实原理就在于大家熟悉的unicode编码，上面的\\\\u000d就是一个unicode转义字符，它所表示的是一个换行符。而java中的编译器，不仅会编译代码，还会解析unicode编码将它替换成对应的字符。所以说，上面的代码解析完后实际是这样的：\"},\"406\":{\"t\":\"public static void main(String[] args) { // System.out.println(\\\"coder Hydra\\\"); } \"},\"407\":{\"t\":\"这样，就能解释为什么能够执行注释中的语句了。当然，如果你觉得上面的代码不够绝，想要再绝一点，那么就可以把代码写成下面这个样子。\"},\"408\":{\"t\":\"public static void main(String[] args) { int a=1; // \\\\u000d \\\\u0061\\\\u002b\\\\u002b\\\\u003b System.out.println(a); } \"},\"409\":{\"t\":\"执行结果会打印2，同理，因为后面的unicode编码的转义后表示的是a++;。\"},\"410\":{\"t\":\"至于这么写有什么好处，当然是用在某些不想让别人看懂的地方，用来掩人耳目了，估计大家都看过下面这个笑话。\"},\"411\":{\"t\":\"图片\"},\"412\":{\"t\":\"你这么写的话客户如果懂点代码，看一下就穿帮了啊，但是你如果写成下面这样，大部分估计都以为这是一段乱码：\"},\"413\":{\"t\":\"//\\\\u000d\\\\u0054\\\\u0068\\\\u0072\\\\u0065\\\\u0061\\\\u0064\\\\u002e\\\\u0073\\\\u006c\\\\u0065\\\\u0065\\\\u0070\\\\u0028\\\\u0032\\\\u0030\\\\u0030\\\\u0030\\\\u0029\\\\u003b \"},\"414\":{\"t\":\"恕我直言，没个几十年的功力真看不出来这里执行的是sleep，简直完美。\"},\"415\":{\"t\":\"图片\"},\"416\":{\"h\":\"贰、舍近求远\",\"a\":\"贰、舍近求远\"},\"417\":{\"t\":\"要想写出别人看不懂的代码，很重要的一个小技巧就是把简单的东西复杂化。例如，判断一个int型数字的正负时明明可以写成这样：\"},\"418\":{\"t\":\"public void judge(int x){ if (x>0){ //... }else if (x<0){ //... } } \"},\"419\":{\"t\":\"但是我偏不，放着简单的代码不用，我就是玩，非要写成下面这样：\"},\"420\":{\"t\":\"public void judge2(int x){ if (x>>>31==0){ //... }else if (x>>>31==1){ //... } } \"},\"421\":{\"t\":\"怎么样，这么写的话是不是逼格一下子就支棱起来了！别人看到这多少得琢磨一会这块到底写了个啥玩意。\"},\"422\":{\"t\":\"其实原理也很简单，这里用到的>>>是无符号右移操作。举个简单的例子，以-3为例，移位前先转化为它的补码：\"},\"423\":{\"t\":\"11111111111111111111111111111101 \"},\"424\":{\"t\":\"无符号右移一位后变成下面的形式，这个数转化为十进制后是2147483646。\"},\"425\":{\"t\":\"01111111111111111111111111111110 \"},\"426\":{\"t\":\"所以，当一个int类型的数字在无符号右移31位后，其实在前面的31位高位全部是0，剩下的最低位是原来的符号位，因此可以用来判断数字的正负。\"},\"427\":{\"t\":\"基于这个小知识，我们还能整出不少活来。例如，放着好好的0不用，我们可以通过下面的方式定义一个0：\"},\"428\":{\"t\":\"int ZERO=Integer.MAX_VALUE>>31>>1; \"},\"429\":{\"t\":\"通过上面的知识，相信大家可以轻易理解，因为在将一个数字无符号右移32位后，二进制的所有位上全部是0，所以最终会得到0。那么问题来了，我为什么不直接用Integer.MAX_VALUE>>32，一次性右移32位呢？\"},\"430\":{\"t\":\"这是因为在对int型的数字进行移位操作时，会对操作符右边的参数进行模32的取余运算，因此如果直接写32的话，那么相当于什么都不做，得到的还是原数值。\"},\"431\":{\"t\":\"图片\"},\"432\":{\"h\":\"叁、颠倒黑白\",\"a\":\"叁、颠倒黑白\"},\"433\":{\"t\":\"古有赵高指鹿为马，今有码农颠倒真假。阻碍同事阅读你代码的有力武器之一，就是让他在遇到条件判断时失去基本判断能力，陷入云里雾里，不知道接下来要走的是哪一个分支。\"},\"434\":{\"t\":\"下面的代码，我说会打印fasle，是不是没有人会信？\"},\"435\":{\"t\":\"public class TrueTest { public static void main(String[] args) { Boolean reality = true; if(reality) { System.out.println(\\\"true\\\"); } else { System.out.println(\\\"false\\\"); } } } \"},\"436\":{\"t\":\"没错，只要大家了解布尔类型就知道这不符合逻辑，但是，经过下面的改造就可以让它变为现实。\"},\"437\":{\"t\":\"首先，在类中找个隐蔽的位置插入下面这段代码：\"},\"438\":{\"t\":\"static { try { Field trueField = Boolean.class.getDeclaredField(\\\"TRUE\\\"); trueField.setAccessible(true); Field modifiersField = Field.class.getDeclaredField(\\\"modifiers\\\"); modifiersField.setAccessible(true); modifiersField.setInt(trueField, trueField.getModifiers() & ~Modifier.FINAL); trueField.set(null, false); } catch(IllegalAccessException | NoSuchFieldException e) { e.printStackTrace(); } } \"},\"439\":{\"t\":\"然后再运行上面的程序，你就会发现神奇地打印了false。\"},\"440\":{\"t\":\"其实原理也很简单，首先通过反射拿到Boolean类中定义的TRUE这个变量：\"},\"441\":{\"t\":\"public static final Boolean TRUE = new Boolean(true); \"},\"442\":{\"t\":\"接着使用反射，去掉它的final修饰符，最后再将它的值设为false。而在之后再使用true进行定义Boolean类型的变量过程中，会进行自动装箱，调用下面的方法：\"},\"443\":{\"t\":\"public static Boolean valueOf(boolean b) { return (b ? TRUE : FALSE); } \"},\"444\":{\"t\":\"这时的b为true，而TRUE实际上是false，因此不满足第一个表达式，最终会返回false。\"},\"445\":{\"t\":\"这样一来就能解释上面的打印结果了，不过切记，这么写的时候一定要找一个代码中隐蔽的角落，不要被人发现，否则容易被打的很惨…\"},\"446\":{\"t\":\"图片\"},\"447\":{\"h\":\"肆、化整为零\",\"a\":\"肆、化整为零\"},\"448\":{\"t\":\"接下来要介绍的这个技巧就有点厉害了，可以将原有的一段串行逻辑改写成判断逻辑中的不同分支，并且保证最后能够正常执行。\"},\"449\":{\"t\":\"在开始前先提一个问题，有没有一种方法，可以让if和else中的语句都能执行，就像下面的这个例子中：\"},\"450\":{\"t\":\"public static void judge(String param){ if (/*判断条件*/){ System.out.println(\\\"step one\\\"); }else { System.out.println(\\\"step two\\\"); } } \"},\"451\":{\"t\":\"如果我说只调用一次这个方法，就能同时输出if和else中的打印语句，你肯定会说不可能，因为这违背了java中判断逻辑的基本常识。\"},\"452\":{\"t\":\"没错，在限定了上面的修饰语只调用『一次』方法的条件下，谁都无法做到。但是如果在判断条件中动一点点手脚，就能够实现上面提到的功能。看一下改造后的代码：\"},\"453\":{\"t\":\"public class IfTest { public static void main(String[] args) { judge(\\\"Hydra\\\"); } public static void judge(String param){ if (param==null || new IfTest(){{ IfTest.check(null); }}.equals(\\\"Hydra\\\")){ System.out.println(\\\"step one\\\"); }else { System.out.println(\\\"step two\\\"); } } } \"},\"454\":{\"t\":\"运行后控制台打印了：\"},\"455\":{\"t\":\"step one step two \"},\"456\":{\"t\":\"惊不惊喜、意不意外？其实它能够执行的秘密就在if的判断条件中。\"},\"457\":{\"t\":\"当第一次调用judge()方法时，不满足或运算中的第一个条件，因此执行第二个条件，会执行匿名内部类内的实例化初始块代码，再次执行judge()方法，此时满足if条件，因此执行第一句打印语句。\"},\"458\":{\"t\":\"而实例化的新对象不满足后面的equals()方法中的条件，所以不满足if中的任意一个条件，因此会执行else中的语句，执行第二句打印语句。\"},\"459\":{\"t\":\"这样就实现了表面上调用一次方法，同时执行if和else中的语句块的功能。怎么样，用这种方式把一段整体的逻辑拆成两块，让你的同事迷惑去吧。\"},\"460\":{\"t\":\"图片\"},\"461\":{\"h\":\"伍、釜底抽薪\",\"a\":\"伍、釜底抽薪\"},\"462\":{\"t\":\"在程序员的世界里，不同语言之间一直存在鄙视链，例如写c的就看不起写java的，因为直接操作内存啥的看上去就很高大上不是么？那么我们今天就假装自己是一个c语言程序员，来在java中操作一把内存。\"},\"463\":{\"t\":\"具体要怎么做呢，还是要使用java中的魔法类Unsafe。看这个名字也可以明白，这玩意如果使用不当的话不是非常安全，所以获取Unsafe实例也比较麻烦，需要通过反射获取：\"},\"464\":{\"t\":\"Field unsafeField = Unsafe.class.getDeclaredField(\\\"theUnsafe\\\"); unsafeField.setAccessible(true); Unsafe unsafe =(Unsafe) unsafeField.get(null); \"},\"465\":{\"t\":\"在拿到这个对象后，我们就可以对内存为所欲为了。例如，我们在实现int a=1;这样的简单赋值时，就可以搞复杂点，像下面这样绕一个弯子：\"},\"466\":{\"t\":\"void test(){ long addr = unsafe.allocateMemory(4); unsafe.putInt(addr,1); int a=unsafe.getInt(addr); System.out.println(a); unsafe.freeMemory(addr); } \"},\"467\":{\"t\":\"首先通过allocateMemory方法申请4字节的内存空间后，然后通过putInt方法写入一个1，再从这个地址读取一个int类型长度的变量，最终实现了把1赋值给a的操作。\"},\"468\":{\"t\":\"当然了，还有很多高级一点的用法，这里简单举两个例子。\"},\"469\":{\"t\":\"void test(){ long addr = unsafe.allocateMemory(4); unsafe.setMemory(addr,4, (byte) 1); System.out.println(unsafe.getInt(addr)); unsafe.freeMemory(addr); } \"},\"470\":{\"t\":\"上面的代码中，通过setMemory方法向每个字节写入byte类型的1，最后调用getInt方法一次性读取4个字节作为一个int型变量的值。这段代码最终打印结果为16843009，对应的二进制如下：\"},\"471\":{\"t\":\"00000001 00000001 00000001 00000001 \"},\"472\":{\"t\":\"至于c语言中的内存复制，用Unsafe搞起来也是信手拈来：\"},\"473\":{\"t\":\"void test2(){ long addr = unsafe.allocateMemory(4); long addr2 = unsafe.reallocateMemory(addr, 4 * 2); unsafe.putInt(addr, 1); for (int i = 0; i < 2; i++) { unsafe.copyMemory(addr,addr2+4*i,4); } System.out.println(unsafe.getInt(addr)); System.out.println(unsafe.getLong(addr2)); unsafe.freeMemory(addr); unsafe.freeMemory(addr2); } \"},\"474\":{\"t\":\"上面的代码中，通过reallocateMemory方法重新分配了一块8字节长度的内存空间，并把addr开头的4字节内存空间分两次进复制到addr2的内存空间中，上面的代码会打印：\"},\"475\":{\"t\":\"1 4294967297 \"},\"476\":{\"t\":\"这是因为新的8字节内存空间addr2中存储的二进制数字是下面这样，转化为十进制的long类型后正好对应4294967297。\"},\"477\":{\"t\":\"100000000000000000000000000000001 \"},\"478\":{\"t\":\"Unsafe除了能直接操作内存空间外，还有线程调度、对象操作、CAS操作等实用的功能。\"},\"479\":{\"t\":\"图片\"},\"480\":{\"h\":\"最后\",\"a\":\"最后\"},\"481\":{\"t\":\"好了，没用的知识介绍环节就此结束，相信大家在掌握了这些技巧后，都能自带代码混淆光环，写出不一样的拉轰代码。\"},\"482\":{\"t\":\"最后建议大家，在项目中这样写代码的时候，搭配红花油、跌打损伤酒一起使用，可能效果更佳。\"},\"483\":{\"h\":\"结构型适配器模式\"},\"484\":{\"h\":\"基本介绍\",\"a\":\"基本介绍\"},\"485\":{\"t\":\"在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。\"},\"486\":{\"t\":\"在软件设计中也可能出现：需要开发的具有某种业务功能的组件在现有的组件库中已经存在，但它们与当前系统的接口规范不兼容，如果重新开发这些组件成本又很高，这时用适配器模式能很好地解决这些问题。\"},\"487\":{\"t\":\"适配器模式（Adapter Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器（Wrapper）。\"},\"488\":{\"t\":\"适配器模式属于结构型模式，主要分为三类：类适配器模式、对象适配器模式、接口适配器模式。\"},\"489\":{\"t\":\"主要优点\"},\"490\":{\"t\":\"客户端通过适配器可以透明地调用目标接口\"},\"491\":{\"t\":\"复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类\"},\"492\":{\"t\":\"将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题\"},\"493\":{\"t\":\"在很多业务场景中符合开闭原则\"},\"494\":{\"t\":\"主要缺点\"},\"495\":{\"t\":\"适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性\"},\"496\":{\"t\":\"增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱\"},\"497\":{\"h\":\"模式的结构\",\"a\":\"模式的结构\"},\"498\":{\"t\":\"适配器模式（Adapter）包含以下主要角色：\"},\"499\":{\"t\":\"目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口\"},\"500\":{\"t\":\"适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口\"},\"501\":{\"t\":\"适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者\"},\"502\":{\"h\":\"工作原理\",\"a\":\"工作原理\"},\"503\":{\"t\":\"适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容\"},\"504\":{\"t\":\"从用户的角度看不到被适配者，是解耦的\"},\"505\":{\"t\":\"用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法\"},\"506\":{\"t\":\"用户收到反馈结果，感觉只是和目标接口交互，如图\"},\"507\":{\"t\":\"image-20220307113733499\"},\"508\":{\"h\":\"现实生活中的适配器例子\",\"a\":\"现实生活中的适配器例子\"},\"509\":{\"t\":\"泰国插座用的是两孔的（欧标），可以买个多功能转换插头 (适配器) ，这样就可以使用了。\"},\"510\":{\"t\":\"image-20220307113604066\"},\"511\":{\"h\":\"类适配器模式\",\"a\":\"类适配器模式\"},\"512\":{\"h\":\"类适配器模式介绍\",\"a\":\"类适配器模式介绍\"},\"513\":{\"t\":\"基本介绍：Adapter 类，通过继承 被适配类，实现 适配接口，完成被适配类到适配接口的适配。\"},\"514\":{\"t\":\"image-20220314150218744\"},\"515\":{\"h\":\"类适配器模式应用实例\",\"a\":\"类适配器模式应用实例\"},\"516\":{\"t\":\"应用实例说明：以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src（即被适配者），我们的目标是 5V 直流电。\"},\"517\":{\"t\":\"思路分析（类图）：\"},\"518\":{\"t\":\"image-20220307113851301\"},\"519\":{\"t\":\"代码实现\"},\"520\":{\"t\":\"// dst 适配接口（充电器需要 5V） public interface IVoltage5V { public int output5V(); } // 被适配的类（插排的 220V） public class Voltage220V { // 输出 220V 的电压 public int output220V() { int src = 220; System.out.println(\\\"电压=\\\" + src + \\\"伏\\\"); return src; } } // 适配器类（充电器）需要将插排的 220V 转为实际需要的 5V public class VoltageAdapter extends Voltage220V implements IVoltage5V { @Override public int output5V() { // 获取到 220V 电压 int srcV = output220V(); int dstV = srcV / 44 ; // 转成 5v return dstV; } } \"},\"521\":{\"t\":\"手机类和测试类\"},\"522\":{\"t\":\"public class Phone { // 充电 public void charging(IVoltage5V iVoltage5V) { if(iVoltage5V.output5V() == 5) { System.out.println(\\\"电压为5V, 可以充电~~\\\"); } else if (iVoltage5V.output5V() > 5) { System.out.println(\\\"电压大于5V, 不能充电~~\\\"); } } } public class Client { public static void main(String[] args) { System.out.println(\\\" === 类适配器模式 ====\\\"); Phone phone = new Phone(); phone.charging(new VoltageAdapter()); } } \"},\"523\":{\"h\":\"类适配器模式注意事项和细节\",\"a\":\"类适配器模式注意事项和细节\"},\"524\":{\"t\":\"Java 是单继承机制，所以类适配器需要继承 src（被适配类）类这一点算是一个缺点，因为这要求 dst（适配接口） 必须是接口，有一定局限性\"},\"525\":{\"t\":\"src 类的方法在 Adapter 中都会暴露出来，也增加了使用的成本\"},\"526\":{\"t\":\"由于其继承了 src 类，所以它可以根据需求重写 src 类的方法，使得 Adapter 的灵活性增强了\"},\"527\":{\"h\":\"对象适配器模式\",\"a\":\"对象适配器模式\"},\"528\":{\"h\":\"对象适配器模式介绍\",\"a\":\"对象适配器模式介绍\"},\"529\":{\"t\":\"基本思路和类的适配器模式相同，只是将 Adapter 类作修改，不是继承 src 类，而是持有 src 类的实例，以解决兼容性的问题。即：持有 src 类，实现 dst 类接口，完成 src 到 dst 的适配。\"},\"530\":{\"t\":\"根据「合成复用原则」，在系统中尽量使用 关联关系（聚合）来替代继承 关系。\"},\"531\":{\"t\":\"对象适配器模式是适配器模式常用的一种。\"},\"532\":{\"t\":\"image-20220314150231277\"},\"533\":{\"h\":\"对象适配器模式应用实例\",\"a\":\"对象适配器模式应用实例\"},\"534\":{\"t\":\"应用实例说明\"},\"535\":{\"t\":\"以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的 dst（即目标）是 5V 直流电，使用对象适配器模式完成。\"},\"536\":{\"t\":\"思路分析（类图）\"},\"537\":{\"t\":\"只需修改适配器即可，如下：\"},\"538\":{\"t\":\"image-20220307153329627\"},\"539\":{\"t\":\"代码实现\"},\"540\":{\"t\":\"// 适配接口（充电器需要 5V） public interface IVoltage5V { public int output5V(); } // 被适配的类（插排的 220V） public class Voltage220V { // 输出 220V 的电压，不变 public int output220V() { int src = 220; System.out.println(\\\"电压=\\\" + src + \\\"伏\\\"); return src; } } // 适配器类（充电器）需要将插排的 220V 转为实际需要的 5V public class VoltageAdapter implements IVoltage5V { private Voltage220V voltage220V; // 关联关系-聚合 // 通过构造器，传入一个 Voltage220V 实例 public VoltageAdapter(Voltage220V voltage220v) { this.voltage220V = voltage220v; } @Override public int output5V() { int dst = 0; if(null != voltage220V) { int src = voltage220V.output220V(); //获取 220V 电压 System.out.println(\\\"使用对象适配器，进行适配~~\\\"); dst = src / 44; System.out.println(\\\"适配完成，输出的电压为=\\\" + dst); } return dst; } } \"},\"541\":{\"t\":\"手机类和测试类\"},\"542\":{\"t\":\"public class Phone { // 充电 public void charging(IVoltage5V iVoltage5V) { if(iVoltage5V.output5V() == 5) { System.out.println(\\\"电压为5V, 可以充电~~\\\"); } else if (iVoltage5V.output5V() > 5) { System.out.println(\\\"电压大于5V, 不能充电~~\\\"); } } } public class Client { public static void main(String[] args) { System.out.println(\\\" === 对象适配器模式 ====\\\"); Phone phone = new Phone(); phone.charging(new VoltageAdapter(new Voltage220V())); } } \"},\"543\":{\"h\":\"对象适配器模式注意事项和细节\",\"a\":\"对象适配器模式注意事项和细节\"},\"544\":{\"t\":\"对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承，所以它解决了类适配器必须继承 src 的局限性问题，也不再要求 dst 必须是接口\"},\"545\":{\"t\":\"使用成本更低，更灵活\"},\"546\":{\"h\":\"接口适配器模式\",\"a\":\"接口适配器模式\"},\"547\":{\"h\":\"接口适配器模式介绍\",\"a\":\"接口适配器模式介绍\"},\"548\":{\"t\":\"一些书籍称为：适配器模式（Default Adapter Pattern）或缺省适配器模式\"},\"549\":{\"t\":\"核心思路：当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求\"},\"550\":{\"t\":\"适用于一个接口不想使用其所有的方法的情况\"},\"551\":{\"h\":\"接口适配器模式应用实例\",\"a\":\"接口适配器模式应用实例\"},\"552\":{\"t\":\"Android 中的属性动画 ValueAnimator 类可以通过 addListener(AnimatorListener listener) 方法添加监听器，那么常规写法如下：\"},\"553\":{\"t\":\"ValueAnimator valueAnimator = ValueAnimator.oflnt(0, 100); valueAnimator.addListener(new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) {} @Override public void onAnimationEnd(Animator animation) {} @Override public void onAnimationCancel(Animator animation) {} @Override public void onAnimationRepeat(Animator animation) {} }); valueAnimator.start(); \"},\"554\":{\"t\":\"有时候我们不想实现 Animator.AnimatorListener 接口的全部方法，我们只想监听 onAnimationStart，我们会如下写：\"},\"555\":{\"t\":\"ValueAnimator valueAnimator = ValueAnimator.oflnt(0,100); valueAnimator.addListener(new AnimatorListenerAdapter(){ @Override public void onAnimationStart(Animator animation) { // xxxx 具体实现 } }); valueAnimator.start(; \"},\"556\":{\"t\":\"AnimatorListenerAdapter 类，就是一个接口适配器，代码如下：它空实现了 Animator.AnimatorListener 类(src)的所有方法\"},\"557\":{\"t\":\"public abstract class AnimatorListenerAdapter implements Animator.Animator extends Animator.AnimatorPauseListener { @Override // 默认实现 public void onAnimationCancel(Animator animation) {} @Override public void onAnimationEnd(Animator animation) {} @Override public void onAnimationRepeat(Animator animation) {} @Override public void onAnimationStart(Animator animation) {} @Override public void onAnimationPause(Animator animation) {} @Override public void onAnimationResume(Animator animation) {} } \"},\"558\":{\"t\":\"AnimatorListener 是一个接口：\"},\"559\":{\"t\":\"public static interface AnimatorListener { void onAnimationStart(Animator animation); void onAnimationEnd(Animator animation); void onAnimationCancel(Animator animation); void onAnimationRepeat(Animator animation); } \"},\"560\":{\"t\":\"程序里的匿名内部类就是 Listener 具体实现类\"},\"561\":{\"t\":\"new AnimatorListenerAdapter(){ @Override public void onAnimationStart(Animator animation) { // xxxx 具体实现 } } \"},\"562\":{\"t\":\"案例说明\"},\"563\":{\"t\":\"image-20220307154814117\"},\"564\":{\"t\":\"public interface Interface4 { public void m1(); public void m2(); public void m3(); public void m4(); } // 在 AbsAdapter 我们将 Interface4 的方法进行默认实现 public abstract class AbsAdapter implements Interface4 { // 默认实现 public void m1() { } public void m2() { } public void m3() { } public void m4() { } } \"},\"565\":{\"t\":\"测试类：\"},\"566\":{\"t\":\"public class Client { public static void main(String[] args) { AbsAdapter absAdapter = new AbsAdapter() { // 只需要去覆盖我们 需要使用 接口方法 @Override public void m1() { System.out.println(\\\"使用了m1的方法\\\"); } }; absAdapter.m1(); } } \"},\"567\":{\"h\":\"SpringMVC 的适配器模式剖析\",\"a\":\"springmvc-的适配器模式剖析\"},\"568\":{\"t\":\"SpringMVC 中的 HandlerAdapter, 就使用了适配器模式\"},\"569\":{\"t\":\"SpringMVC 处理请求的流程回顾\"},\"570\":{\"t\":\"使用 HandlerAdapter 的原因分析：\"},\"571\":{\"t\":\"可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的，如果需要直接调用 Controller 方法，需要调用的时候就得不断是使用 if-else 来进行判断是哪一种子类然后执行。那么如果后面要扩展 Controller，就得修改原来的代码，这样违背了 OCP 原则。\"},\"572\":{\"t\":\"image-20220307155052736\"},\"573\":{\"h\":\"适配器模式的注意事项和细节\",\"a\":\"适配器模式的注意事项和细节\"},\"574\":{\"t\":\"三种命名方式，是根据 src 是以怎样的形式给到 Adapter（在 Adapter 里的形式）来命名的\"},\"575\":{\"t\":\"类适配器：以类给到，在 Adapter 里，就是将 src 当做类，继承 \"},\"576\":{\"t\":\"对象适配器：以对象给到，在 Adapter 里，将 src 作为一个对象，持有\"},\"577\":{\"t\":\"接口适配器：以接口给到，在 Adapter 里，将 src 作为一个接口，实现\"},\"578\":{\"t\":\"Adapter 模式最大的作用还是将原本不兼容的接口融合在一起工作\"},\"579\":{\"t\":\"实际开发中，实现起来不拘泥于我们讲解的三种经典形式\"},\"580\":{\"h\":\"适配器模式的应用场景\",\"a\":\"适配器模式的应用场景\"},\"581\":{\"t\":\"适配器模式（Adapter）通常适用于以下场景：\"},\"582\":{\"t\":\"以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致\"},\"583\":{\"t\":\"使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同\"},\"584\":{\"h\":\"结构型桥接模式\"},\"585\":{\"h\":\"桥接模式基本介绍\",\"a\":\"桥接模式基本介绍\"},\"586\":{\"t\":\"在现实生活中，某些类具有两个或多个维度的变化，如图形既可按形状分，又可按颜色分。如何设计类似于 Photoshop 这样的软件，能画不同形状和不同颜色的图形呢？如果用继承方式，m 种形状和 n 种颜色的图形就有 m×n 种，不但对应的子类很多，而且扩展困难。\"},\"587\":{\"t\":\"当然，这样的例子还有很多，如不同颜色和字体的文字、不同品牌和功率的汽车、不同性别和职业的男女、支持不同平台和不同文件格式的媒体播放器等。如果用桥接模式就能很好地解决这些问题。\"},\"588\":{\"t\":\"桥接模式（Bridge Pattern）是指：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变，是一种结构型设计模式。\"},\"589\":{\"t\":\"桥接模式 基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象（Abstraction）与行为实现（Implementation）分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展。\"},\"590\":{\"t\":\"主要优点\"},\"591\":{\"t\":\"抽象与实现分离，扩展能力强\"},\"592\":{\"t\":\"符合开闭原则\"},\"593\":{\"t\":\"符合合成复用原则\"},\"594\":{\"t\":\"其实现细节对客户透明\"},\"595\":{\"t\":\"主要缺点\"},\"596\":{\"t\":\"由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确地识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。\"},\"597\":{\"h\":\"桥接模式的结构与实现\",\"a\":\"桥接模式的结构与实现\"},\"598\":{\"t\":\"桥接（Bridge）模式包含以下主要角色：\"},\"599\":{\"t\":\"抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用\"},\"600\":{\"t\":\"扩展抽象化（Refined Abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法\"},\"601\":{\"t\":\"实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用\"},\"602\":{\"t\":\"具体实现化（Concrete Implementor）角色：给出实现化角色接口的具体实现\"},\"603\":{\"t\":\"image-20220314154132216\"},\"604\":{\"t\":\"上面图片桥接模式的代码如下：\"},\"605\":{\"t\":\"// 实现化角色 interface Implementor { public void OperationImpl(); } // 具体实现化角色 class ConcreteImplementorA implements Implementor { public void OperationImpl() { System.out.println(\\\"具体实现化(Concrete Implementor)角色被访问\\\"); } } // 抽象化角色 abstract class Abstraction { protected Implementor imple; protected Abstraction(Implementor imple) { this.imple = imple; } public abstract void Operation(); } // 扩展抽象化角色 class RefinedAbstraction extends Abstraction { protected RefinedAbstraction(Implementor imple) { super(imple); } public void Operation() { System.out.println(\\\"扩展抽象化(Refined Abstraction)角色被访问\\\"); imple.OperationImpl(); } } public class BridgeTest { public static void main(String[] args) { Implementor imple = new ConcreteImplementorA(); Abstraction abs = new RefinedAbstraction(imple); abs.Operation(); } } \"},\"606\":{\"h\":\"手机操作问题\",\"a\":\"手机操作问题\"},\"607\":{\"t\":\"现在对不同手机类型的不同品牌实现操作编程（比如:开机、关机、上网，打电话等），如图：\"},\"608\":{\"t\":\"image-20220314153744545\"},\"609\":{\"h\":\"传统方案解决手机操作问题\",\"a\":\"传统方案解决手机操作问题\"},\"610\":{\"t\":\"传统方法对应的类图：\"},\"611\":{\"t\":\"image-20220314153823688\"},\"612\":{\"h\":\"传统方案解决手机操作问题分析\",\"a\":\"传统方案解决手机操作问题分析\"},\"613\":{\"t\":\"扩展性问题（类爆炸），如果我们再增加手机的样式（旋转式），就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。\"},\"614\":{\"t\":\"违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本。\"},\"615\":{\"t\":\"解决方案：使用桥接模式。\"},\"616\":{\"h\":\"桥接模式解决手机操作问题\",\"a\":\"桥接模式解决手机操作问题\"},\"617\":{\"t\":\"使用桥接模式改进传统方式，让程序具有搞好的扩展性，利用程序维护。\"},\"618\":{\"t\":\"使用桥接模式对应的类图：\"},\"619\":{\"t\":\"image-20220314154311971\"},\"620\":{\"t\":\"代码示例：\"},\"621\":{\"t\":\"手机品牌代码\"},\"622\":{\"t\":\"// 接口 public interface Brand { void open(); void close(); void call(); } public class Vivo implements Brand { @Override public void open() { System.out.println(\\\" Vivo手机开机 \\\"); } @Override public void close() { System.out.println(\\\" Vivo手机关机 \\\"); } @Override public void call() { System.out.println(\\\" Vivo手机打电话 \\\"); } } public class XiaoMi implements Brand { @Override public void open() { System.out.println(\\\" 小米手机开机 \\\"); } @Override public void close() { System.out.println(\\\" 小米手机关机 \\\"); } @Override public void call() { System.out.println(\\\" 小米手机打电话 \\\"); } } \"},\"623\":{\"t\":\"手机代码\"},\"624\":{\"t\":\"public abstract class Phone { // 组合品牌 private Brand brand; // 构造器 public Phone(Brand brand) { super(); this.brand = brand; } protected void open() { this.brand.open(); } protected void close() { brand.close(); } protected void call() { brand.call(); } } // 折叠式手机类，继承 抽象类 Phone public class FoldedPhone extends Phone { // 构造器 public FoldedPhone(Brand brand) { super(brand); } public void open() { super.open(); System.out.println(\\\" 折叠样式手机 \\\"); } public void close() { super.close(); System.out.println(\\\" 折叠样式手机 \\\"); } public void call() { super.call(); System.out.println(\\\" 折叠样式手机 \\\"); } } // 直立样式手机 public class UpRightPhone extends Phone { // 构造器 public UpRightPhone(Brand brand) { super(brand); } public void open() { super.open(); System.out.println(\\\" 直立样式手机 \\\"); } public void close() { super.close(); System.out.println(\\\" 直立样式手机 \\\"); } public void call() { super.call(); System.out.println(\\\" 直立样式手机 \\\"); } } \"},\"625\":{\"t\":\"测试代码\"},\"626\":{\"t\":\"public class Client { public static void main(String[] args) { // 获取折叠式手机（样式 + 品牌） Phone phone1 = new FoldedPhone(new XiaoMi()); phone1.open(); phone1.call(); phone1.close(); System.out.println(\\\"=======================\\\"); Phone phone2 = new FoldedPhone(new Vivo()); phone2.open(); phone2.call(); phone2.close(); System.out.println(\\\"==============\\\"); UpRightPhone phone3 = new UpRightPhone(new XiaoMi()); phone3.open(); phone3.call(); phone3.close(); System.out.println(\\\"==============\\\"); UpRightPhone phone4 = new UpRightPhone(new Vivo()); phone4.open(); phone4.call(); phone4.close(); } } \"},\"627\":{\"h\":\"JDBC 的桥接模式剖析\",\"a\":\"jdbc-的桥接模式剖析\"},\"628\":{\"t\":\"JDBC 的 Driver 接口，如果从桥接模式来看，Driver 就是一个接口，下面可以有 MySQL 的 Driver，Oracle 的 Driver，这些就可以当做实现接口类。\"},\"629\":{\"t\":\"image-20220314154935717\"},\"630\":{\"t\":\"对 jdbc 源码分析的类图：\"},\"631\":{\"t\":\"image-20220314154956046\"},\"632\":{\"h\":\"桥接模式的注意事项和细节\",\"a\":\"桥接模式的注意事项和细节\"},\"633\":{\"t\":\"实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统\"},\"634\":{\"t\":\"对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成\"},\"635\":{\"t\":\"桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本\"},\"636\":{\"t\":\"桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程\"},\"637\":{\"t\":\"桥接模式要求正确识别出系统中两个独立变化的维度（抽象、和实现），因此其使用范围有一定的局限性，即需要有这样的应用场景\"},\"638\":{\"h\":\"桥接模式的应用场景\",\"a\":\"桥接模式的应用场景\"},\"639\":{\"t\":\"当一个类内部具备两种或多种变化维度时，使用桥接模式可以解耦这些变化的维度，使高层代码架构稳定。\"},\"640\":{\"t\":\"对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。\"},\"641\":{\"t\":\"桥接模式通常适用于以下场景：\"},\"642\":{\"t\":\"当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时\"},\"643\":{\"t\":\"当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时\"},\"644\":{\"t\":\"当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时\"},\"645\":{\"t\":\"桥接模式的一个常见使用场景就是 替换掉继承。我们知道，继承拥有很多优点，比如，抽象、封装、多态等，父类封装共性，子类实现特性。继承可以很好的实现代码复用（封装）的功能，但这也是继承的一大缺点。\"},\"646\":{\"t\":\"因为父类拥有的方法，子类也会继承得到，无论子类需不需要，这说明 继承具备强侵入性（父类代码侵入子类），同时会导致子类臃肿。因此，在设计模式中，有一个原则为优先使用组合/聚合，而不是继承。\"},\"647\":{\"t\":\"很多时候，我们分不清该使用继承还是组合/聚合或其他方式等，其实可以从现实语义进行思考。因为软件最终还是提供给现实生活中的人使用的，是服务于人类社会的，软件是具备现实场景的。当我们从纯代码角度无法看清问题时，现实角度可能会提供更加开阔的思路。\"},\"648\":{\"h\":\"常见的应用场景\",\"a\":\"常见的应用场景\"},\"649\":{\"t\":\"JDBC 驱动程序\"},\"650\":{\"t\":\"银行转账系统 \"},\"651\":{\"t\":\"转账分类: 网上转账，柜台转账，AMT 转账\"},\"652\":{\"t\":\"转账用户类型：普通用户，银卡用户，金卡用户\"},\"653\":{\"t\":\"消息管理 \"},\"654\":{\"t\":\"消息类型：即时消息，延时消息\"},\"655\":{\"t\":\"消息分类：手机短信，邮件消息，QQ 消息\"},\"656\":{\"h\":\"桥接模式模式的扩展\",\"a\":\"桥接模式模式的扩展\"},\"657\":{\"t\":\"在软件开发中，有时桥接（Bridge）模式可与 适配器模式 联合使用。当桥接（Bridge）模式的实现化角色的接口与现有类的接口不一致时，可以在二者中间定义一个适配器将二者连接起来，其具体结构图如下图所示\"},\"658\":{\"t\":\"image-20220314155454968\"},\"659\":{\"h\":\"创建型建造者模式\"},\"660\":{\"h\":\"建造者模式基本介绍\",\"a\":\"建造者模式基本介绍\"},\"661\":{\"t\":\"在软件开发过程中有时需要创建一个复杂的对象，这个复杂对象通常由多个子部件按一定的步骤组合而成。例如，计算机是由 CPU、主板、内存、硬盘、显卡、机箱、显示器、键盘、鼠标等部件组装而成的，采购员不可能自己去组装计算机，而是将计算机的配置要求告诉计算机销售公司，计算机销售公司安排技术人员去组装计算机，然后再交给要买计算机的采购员。\"},\"662\":{\"t\":\"生活中这样的例子很多，如游戏中的不同角色，其性别、个性、能力、脸型、体型、服装、发型等特性都有所差异；还有汽车中的方向盘、发动机、车架、轮胎等部件也多种多样；每封电子邮件的发件人、收件人、主题、内容、附件等内容也各不相同。\"},\"663\":{\"t\":\"以上所有这些产品都是由多个部件构成的，各个部件可以灵活选择，但其创建步骤都大同小异。这类产品的创建无法用前面介绍的工厂模式描述，只有建造者模式可以很好地描述该类产品的创建。\"},\"664\":{\"t\":\"建造者模式（Builder Pattern）又叫 生成器模式，是一种对象 构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。\"},\"665\":{\"t\":\"建造者模式 是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们， 用户不需要知道内部的具体构建细节。\"},\"666\":{\"t\":\"主要优点\"},\"667\":{\"t\":\"封装性好，构建和表示分离\"},\"668\":{\"t\":\"扩展性好，各个具体的建造者相互独立，有利于系统的解耦\"},\"669\":{\"t\":\"客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其它模块产生任何影响，便于控制细节风险\"},\"670\":{\"t\":\"主要缺点\"},\"671\":{\"t\":\"产品的组成部分必须相同，这限制了其使用范围\"},\"672\":{\"t\":\"如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大\"},\"673\":{\"t\":\"建造者（Builder Pattern）模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而 工厂方法模式 更注重零部件的创建过程，但两者可以结合使用。\"},\"674\":{\"h\":\"建造者模式的四个角色\",\"a\":\"建造者模式的四个角色\"},\"675\":{\"t\":\"Product（产品角色）：一个具体的产品对象\"},\"676\":{\"t\":\"Builder（抽象建造者）：创建一个 Product 对象的各个部件指定的接口 / 抽象类\"},\"677\":{\"t\":\"ConcreteBuilder（具体建造者）：实现接口，构建和装配各个部件\"},\"678\":{\"t\":\"Director（指挥者）：构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程\"},\"679\":{\"h\":\"建造者模式结构图\",\"a\":\"建造者模式结构图\"},\"680\":{\"t\":\"建造者（Builder）模式的主要角色如下：\"},\"681\":{\"t\":\"产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件\"},\"682\":{\"t\":\"抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()\"},\"683\":{\"t\":\"具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法\"},\"684\":{\"t\":\"指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息\"},\"685\":{\"t\":\"image-20220316221946018\"},\"686\":{\"h\":\"盖房案例\",\"a\":\"盖房案例\"},\"687\":{\"t\":\"需要建房子：这一过程为打桩、砌墙、封顶\"},\"688\":{\"t\":\"房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的\"},\"689\":{\"h\":\"传统方式解决盖房案例\",\"a\":\"传统方式解决盖房案例\"},\"690\":{\"t\":\"思路分析（图解）\"},\"691\":{\"t\":\"image-20220301194218699\"},\"692\":{\"t\":\"AbstractHouse 类：\"},\"693\":{\"t\":\"public abstract class AbstractHouse { // 打地基 public abstract void buildBasic(); // 砌墙 public abstract void buildWalls(); // 封顶 public abstract void roofed(); public void build() { buildBasic(); buildWalls(); roofed(); } } \"},\"694\":{\"t\":\"CommonHouse 类\"},\"695\":{\"t\":\"public class CommonHouse extends AbstractHouse { @Override public void buildBasic() { System.out.println(\\\" 普通房子打地基 \\\"); } @Override public void buildWalls() { System.out.println(\\\" 普通房子砌墙 \\\"); } @Override public void roofed() { System.out.println(\\\" 普通房子封顶 \\\"); } } \"},\"696\":{\"t\":\"Client 类\"},\"697\":{\"t\":\"public class Client { public static void main(String[] args) { CommonHouse commonHouse = new CommonHouse(); commonHouse.build(); } } \"},\"698\":{\"h\":\"传统方式的问题分析\",\"a\":\"传统方式的问题分析\"},\"699\":{\"t\":\"优点是比较好理解，简单易操作。\"},\"700\":{\"t\":\"设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好. 也就是说，这种设计方案，把产品（即：房子）和创建产品的过程（即：建房子流程）封装在一起，耦合性增强了。\"},\"701\":{\"t\":\"解决方案：将产品和产品建造的过程解耦：建造者模式。\"},\"702\":{\"h\":\"建造者模式解决盖房案例\",\"a\":\"建造者模式解决盖房案例\"},\"703\":{\"t\":\"需要建房子：这一过程为打桩、砌墙、封顶。不管是普通房子也好，别墅也好都需要经历这些过程，下面我们使用建造者模式（Builder Pattern）来完成\"},\"704\":{\"t\":\"思路分析图解（类图）\"},\"705\":{\"t\":\"image-20220301195650273\"},\"706\":{\"t\":\"房子 House 类\"},\"707\":{\"t\":\"public class House { private String baise; private String wall; private String roofed; public String getBaise() { return baise; } public void setBaise(String baise) { this.baise = baise; } public String getWall() { return wall; } public void setWall(String wall) { this.wall = wall; } public String getRoofed() { return roofed; } public void setRoofed(String roofed) { this.roofed = roofed; } } \"},\"708\":{\"t\":\"建造者类以及子类：\"},\"709\":{\"t\":\"public abstract class HouseBuilder { protected House house = new House(); // 将建造的流程写好，抽象的方法 public abstract void buildBasic(); public abstract void buildWalls(); public abstract void roofed(); // 建造房子好， 将产品（房子）返回 public House buildHouse() { return house; } } public class CommonHouse extends HouseBuilder { @Override public void buildBasic() { System.out.println(\\\" 普通房子打地基 5 米 \\\"); } @Override public void buildWalls() { System.out.println(\\\" 普通房子砌墙 10cm \\\"); } @Override public void roofed() { System.out.println(\\\" 普通房子屋顶 \\\"); } } public class HighBuilding extends HouseBuilder { @Override public void buildBasic() { System.out.println(\\\" 高楼的打地基 100 米 \\\"); } @Override public void buildWalls() { System.out.println(\\\" 高楼的砌墙 20cm \\\"); } @Override public void roofed() { System.out.println(\\\" 高楼的透明屋顶 \\\"); } } \"},\"710\":{\"t\":\"HouseDirector 类\"},\"711\":{\"t\":\"public class HouseDirector { HouseBuilder houseBuilder = null; // 构造器传入 houseBuilder public HouseDirector(HouseBuilder houseBuilder) { this.houseBuilder = houseBuilder; } // 通过 setter 传入 houseBuilder public void setHouseBuilder(HouseBuilder houseBuilder) { this.houseBuilder = houseBuilder; } // 如何处理建造房子的流程，交给指挥者 public House constructHouse() { houseBuilder.buildBasic(); houseBuilder.buildWalls(); houseBuilder.roofed(); return houseBuilder.buildHouse(); } } \"},\"712\":{\"t\":\"Client 测试类\"},\"713\":{\"t\":\"public class Client { public static void main(String[] args) { // 盖普通房子 CommonHouse commonHouse = new CommonHouse(); // 准备创建房子的指挥者 HouseDirector houseDirector = new HouseDirector(commonHouse); // 完成盖房子，返回产品(普通房子) House house = houseDirector.constructHouse(); // System.out.println(\\\"输出流程\\\"); System.out.println(\\\"--------------------------\\\"); // 盖高楼 HighBuilding highBuilding = new HighBuilding(); // 重置建造者 houseDirector.setHouseBuilder(highBuilding); // 完成盖房子，返回产品(高楼) houseDirector.constructHouse(); } } \"},\"714\":{\"h\":\"建造者模式的 JDK 应用\",\"a\":\"建造者模式的-jdk-应用\"},\"715\":{\"t\":\"java.lang.StringBuilder 使用了建造者模式\"},\"716\":{\"t\":\"image-20220301201855363\"},\"717\":{\"t\":\"源码中建造者模式角色分析：\"},\"718\":{\"t\":\"Appendable 接口定义了多个 append 方法（抽象方法），即 Appendable 为抽象建造者，定义了抽象方法\"},\"719\":{\"t\":\"AbstractStringBuilder 实现了 Appendable 接口方法，这里的 AbstractStringBuilder 已经是建造者，只是不能实例化\"},\"720\":{\"t\":\"StringBuilder 即充当了指挥者角色，同时充当了具体的建造者，建造方法的实现是由 AbstractStringBuilder 完成, 而 StringBuilder 继承了 AbstractStringBuilder\"},\"721\":{\"h\":\"建造者模式的注意事项和细节\",\"a\":\"建造者模式的注意事项和细节\"},\"722\":{\"t\":\"客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象\"},\"723\":{\"t\":\"每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象\"},\"724\":{\"t\":\"可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程\"},\"725\":{\"t\":\"增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合 开闭原则\"},\"726\":{\"t\":\"建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制\"},\"727\":{\"t\":\"如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式\"},\"728\":{\"t\":\"抽象工厂模式 VS 建造者\"},\"729\":{\"t\":\"抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。\"},\"730\":{\"h\":\"建造者模式的应用场景\",\"a\":\"建造者模式的应用场景\"},\"731\":{\"t\":\"建造者模式唯一区别于工厂模式的是针对复杂对象的创建。也就是说，如果创建简单对象，通常都是使用工厂模式进行创建，而如果创建复杂对象，就可以考虑使用建造者模式。\"},\"732\":{\"t\":\"当需要创建的产品具备复杂创建过程时，可以抽取出共性创建过程，然后交由具体实现类自定义创建流程，使得同样的创建行为可以生产出不同的产品，分离了创建与表示，使创建产品的灵活性大大增加。\"},\"733\":{\"t\":\"建造者模式主要适用于以下应用场景：\"},\"734\":{\"t\":\"相同的方法，不同的执行顺序，产生不同的结果\"},\"735\":{\"t\":\"多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同\"},\"736\":{\"t\":\"产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用\"},\"737\":{\"t\":\"初始化一个对象特别复杂，参数多，而且很多参数都具有默认值\"},\"738\":{\"h\":\"行为型命令模式\"},\"739\":{\"h\":\"命令模式基本介绍\",\"a\":\"命令模式基本介绍\"},\"740\":{\"t\":\"在软件开发系统中，「方法的请求者」与「方法的实现者」之间经常存在紧密的耦合关系，这不利于软件功能的扩展与维护。例如，想对方法进行「撤销、重做、记录」等处理都很不方便，因此「如何将方法的请求者与实现者解耦？」变得很重要，命令模式就能很好地解决这个问题。\"},\"741\":{\"t\":\"命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计。\"},\"742\":{\"t\":\"命名模式使得 请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。\"},\"743\":{\"t\":\"在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名），同时命令模式也支持可撤销的操作。\"},\"744\":{\"t\":\"通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：将军（命令发布者）、士兵（命令的具体执行者）、命令（连接将军和士兵）\"},\"745\":{\"t\":\"Invoker 是调用者（将军），Receiver 是被调用者（士兵），MyCommand 是命令，实现了 Command 接口，持有接收对象\"},\"746\":{\"t\":\"再比如，我们去餐厅吃饭，菜单不是等到客人来了之后才定制的，而是已经预先配置好的。这样，客人来了就只需要点菜，而不是任由客人临时定制。餐厅提供的菜单就相当于把请求和处理进行了解耦，这就是命令模式的体现\"},\"747\":{\"t\":\"主要优点\"},\"748\":{\"t\":\"通过引入中间件（抽象接口）降低系统的耦合度\"},\"749\":{\"t\":\"扩展性良好，增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，且满足「开闭原则」\"},\"750\":{\"t\":\"可以实现宏命令。命令模式可以与 组合模式 结合，将多个命令装配成一个组合命令，即宏命令\"},\"751\":{\"t\":\"方便实现 Undo 和 Redo 操作。命令模式可以与 备忘录模式 结合，实现命令的撤销与恢复\"},\"752\":{\"t\":\"可以在现有命令的基础上，增加额外功能。比如日志记录，结合装饰器模式会更加灵活\"},\"753\":{\"t\":\"主要缺点\"},\"754\":{\"t\":\"可能产生大量具体的命令类。因为每一个具体操作都需要设计一个具体命令类，这会增加系统的复杂性\"},\"755\":{\"t\":\"命令模式的结果其实就是接收方的执行结果，但是为了以命令的形式进行架构、解耦请求与实现，引入了额外类型结构（引入了请求方与抽象命令接口），增加了理解上的困难。不过这也是设计模式的通病，抽象必然会额外增加类的数量，代码抽离肯定比代码聚合更加难理解\"},\"756\":{\"h\":\"命令模式的结构与实现\",\"a\":\"命令模式的结构与实现\"},\"757\":{\"t\":\"可以将系统中的相关操作抽象成命令，使调用者与实现者相关分离。\"},\"758\":{\"t\":\"命令模式包含以下主要角色：\"},\"759\":{\"t\":\"抽象命令类（Command）角色：声明执行命令的接口，拥有执行命令的抽象方法 execute()\"},\"760\":{\"t\":\"具体命令类（Concrete Command）角色：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作\"},\"761\":{\"t\":\"实现者/接收者（Receiver）角色：执行命令功能的相关操作，是具体命令对象业务的真正实现者\"},\"762\":{\"t\":\"调用者/请求者（Invoker）角色：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者\"},\"763\":{\"t\":\"结构图如下：\"},\"764\":{\"t\":\"image-20220326120837468\"},\"765\":{\"t\":\"代码实现：\"},\"766\":{\"t\":\"// 抽象命令 interface Command { public abstract void execute(); } // 接收者 class Receiver { public void action() { System.out.println(\\\"接收者的action()方法被调用...\\\"); } } // 具体命令 class ConcreteCommand implements Command { private Receiver receiver; ConcreteCommand() { receiver = new Receiver(); } public void execute() { receiver.action(); } } // 调用者 class Invoker { private Command command; public Invoker(Command command) { this.command = command; } public void setCommand(Command command) { this.command = command; } public void call() { System.out.println(\\\"调用者执行命令command...\\\"); command.execute(); } } public class CommandPattern { public static void main(String[] args) { Command cmd = new ConcreteCommand(); Invoker ir = new Invoker(cmd); System.out.println(\\\"客户访问调用者的call()方法...\\\"); ir.call(); } } \"},\"767\":{\"h\":\"命令模式解决智能生活项目\",\"a\":\"命令模式解决智能生活项目\"},\"768\":{\"t\":\"我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装 APP 就可以控制对这些家电工作\"},\"769\":{\"t\":\"这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个 APP，分别控制，我们希望只要一个 APP 就可以控制全部智能家电\"},\"770\":{\"t\":\"要实现一个 APP 控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给 APP 调用，这时就可以考虑使用 命令模式。\"},\"771\":{\"t\":\"命令模式可将 动作的请求者 从 动作的执行者 对象中解耦出来。\"},\"772\":{\"t\":\"在我们的例子中，动作的请求者是手机 APP，动作的执行者是每个厂商的一个家电产品。\"},\"773\":{\"t\":\"思路分析和类图：\"},\"774\":{\"t\":\"image-20220326121345564\"},\"775\":{\"t\":\"代码实现：\"},\"776\":{\"t\":\"命令类\"},\"777\":{\"t\":\"// 创建命令接口 public interface Command { // 执行动作(操作) public void execute(); // 撤销动作(操作) public void undo(); } // 灯的开启类 public class LightOnCommand implements Command { LightReceiver lightReceiver; public LightOnCommand() { lightReceiver = new LightReceiver(); } @Override public void execute() { lightReceiver.on(); } @Override public void undo() { lightReceiver.off(); } } // 灯的关闭类 public class LightOffCommand implements Command { private LightReceiver lightReceiver; public LightOffCommand() { lightReceiver = new LightReceiver(); } @Override public void execute() { lightReceiver.off(); } @Override public void undo() { lightReceiver.on(); } } // 电视的开机类 public class TVOnCommand implements Command { TVReceiver tvReceiver; public TVOnCommand() { tvReceiver = new TVReceiver(); } @Override public void execute() { tvReceiver.on(); } @Override public void undo() { tvReceiver.off(); } } // 电视的关机类 public class TVOffCommand implements Command { private TVReceiver tvReceiver; public TVOffCommand() { tvReceiver = new TVReceiver(); } @Override public void execute() { tvReceiver.off(); } @Override public void undo() { tvReceiver.on(); } } /** * 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做 * 其实，这样是一种设计模式, 可以省掉对空判断 * */ public class NoCommand implements Command { @Override public void execute() { } @Override public void undo() { } } \"},\"778\":{\"t\":\"控制器类\"},\"779\":{\"t\":\"// 灯的遥控器 public class LightReceiver { public void on() { System.out.println(\\\" 电灯打开了.. \\\"); } public void off() { System.out.println(\\\" 电灯关闭了.. \\\"); } } // 电视的遥控器 public class TVReceiver { public void on() { System.out.println(\\\" 电视机打开了.. \\\"); } public void off() { System.out.println(\\\" 电视机关闭了.. \\\"); } } \"},\"780\":{\"t\":\"调用者类\"},\"781\":{\"t\":\"public class RemoteController { // 开按钮的命令数组 Command[] onCommands; Command[] offCommands; // 执行撤销的命令 Command undoCommand; // 构造器，完成对按钮初始化 public RemoteController() { onCommands = new Command[5]; offCommands = new Command[5]; for (int i = 0; i < 5; i++) { onCommands[i] = new NoCommand(); offCommands[i] = new NoCommand(); } } // 给我们的按钮设置你需要的命令 public void setCommand(int no, Command onCommand, Command offCommand) { onCommands[no] = onCommand; offCommands[no] = offCommand; } // 按下开按钮 public void onButtonWasPushed(int no) { // no 0 // 找到你按下的开的按钮， 并调用对应方法 onCommands[no].execute(); // 记录这次的操作，用于撤销 undoCommand = onCommands[no]; } // 按下开按钮 public void offButtonWasPushed(int no) { // no 0 // 找到你按下的关的按钮，并调用对应方法 offCommands[no].execute(); // 记录这次的操作，用于撤销 undoCommand = offCommands[no]; } // 按下撤销按钮 public void undoButtonWasPushed() { undoCommand.undo(); } } \"},\"782\":{\"t\":\"测试类\"},\"783\":{\"t\":\"public class Client { public static void main(String[] args) { // 使用命令设计模式，完成通过遥控器，对电灯的操作 // 创建电灯相关的开关命令 LightOnCommand lightOnCommand = new LightOnCommand(); LightOffCommand lightOffCommand = new LightOffCommand(); // 需要一个遥控器 RemoteController remoteController = new RemoteController(); // 给我们的遥控器设置命令, 比如 no = 0 是电灯的开和关的操作 remoteController.setCommand(0, lightOnCommand, lightOffCommand); System.out.println(\\\"--------按下灯的开按钮-----------\\\"); remoteController.onButtonWasPushed(0); System.out.println(\\\"--------按下灯的关按钮-----------\\\"); remoteController.offButtonWasPushed(0); System.out.println(\\\"--------按下撤销按钮-----------\\\"); remoteController.undoButtonWasPushed(); System.out.println(\\\"=========使用遥控器操作电视机==========\\\"); TVOffCommand tvOffCommand = new TVOffCommand(); TVOnCommand tvOnCommand = new TVOnCommand(); // 给我们的遥控器设置命令, 比如 no = 1 是电视机的开和关的操作 remoteController.setCommand(1, tvOnCommand, tvOffCommand); System.out.println(\\\"--------按下电视机的开按钮-----------\\\"); remoteController.onButtonWasPushed(1); System.out.println(\\\"--------按下电视机的关按钮-----------\\\"); remoteController.offButtonWasPushed(1); System.out.println(\\\"--------按下撤销按钮-----------\\\"); remoteController.undoButtonWasPushed(); } } \"},\"784\":{\"h\":\"JdbcTemplate 的命令模式分析\",\"a\":\"jdbctemplate-的命令模式分析\"},\"785\":{\"t\":\"Spring 框架的 JdbcTemplate 就使用到了命令模式。\"},\"786\":{\"t\":\"image-20220326122114890\"},\"787\":{\"t\":\"StatementCallback 接口，类似命令接口（Command）\"},\"788\":{\"t\":\"class QueryStatementCallback implements StatementCallback, SqlProvider，是个匿名内部类，实现了命令接口，同时也充当命令接收者\"},\"789\":{\"t\":\"命令调用者是 JdbcTemplate，其中 execute(StatementCallback action) 方法中，调用 action.doInStatement() 方法，不同的实现 StatementCallback 接口的对象，对应不同的 doInStatemnt\"},\"790\":{\"t\":\"另外实现 StatementCallback 命令接口的子类还有 QueryStatementCallback 等，如下图：\"},\"791\":{\"t\":\"image-20220326122132691\"},\"792\":{\"h\":\"命令模式的注意事项和细节\",\"a\":\"命令模式的注意事项和细节\"},\"793\":{\"t\":\"将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的 execute() 方法就可以让接收者工作，而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：「请求发起者」和「请求执行者」之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用。\"},\"794\":{\"t\":\"容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令，容易实现对请求的撤销和重做。\"},\"795\":{\"t\":\"命令模式不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在在使用的时候要注意。\"},\"796\":{\"t\":\"空命令 也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没有用空命令，我们每按下一个按键都要判空，这给我们编码带来一定的麻烦。\"},\"797\":{\"h\":\"命令模式的应用场景\",\"a\":\"命令模式的应用场景\"},\"798\":{\"t\":\"当系统的某项操作具备命令语义，且命令实现不稳定（变化）时，可以通过命令模式解耦请求与实现。使用抽象命令接口使请求方的代码架构稳定，封装接收方具体命令的实现细节。接收方与抽象命令呈现弱耦合（内部方法无需一致），具备良好的扩展性。\"},\"799\":{\"t\":\"命令模式通常适用于以下场景：\"},\"800\":{\"t\":\"请求调用者需要与请求接收者解耦时，命令模式可以使调用者和接收者不直接交互\"},\"801\":{\"t\":\"系统随机请求命令或经常增加、删除命令时，命令模式可以方便地实现这些功能\"},\"802\":{\"t\":\"当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能\"},\"803\":{\"t\":\"当系统需要支持命令的撤销（Undo）操作和恢复（Redo）操作时，可以将命令对象存储起来，采用备忘录模式来实现\"},\"804\":{\"h\":\"结构型组合模式\"},\"805\":{\"h\":\"组合模式基本介绍\",\"a\":\"组合模式基本介绍\"},\"806\":{\"t\":\"在现实生活中，存在很多「部分-整体」的关系，例如，大学中的部门与学院、总公司中的部门与分公司、学习用品中的书与书包、生活用品中的衣服与衣柜、以及厨房中的锅碗瓢盆等。在软件开发中也是这样，例如，文件系统中的文件与文件夹、窗体程序中的简单控件与容器控件等。对这些简单对象与复合对象的处理，如果用组合模式来实现会很方便。\"},\"807\":{\"t\":\"组合模式（Composite Pattern），又叫 部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示「整体-部分」的层次关系，属于结构型模式。\"},\"808\":{\"t\":\"组合模式依据树形结构来组合对象，用来表示部分以及整体层次。\"},\"809\":{\"t\":\"组合模式使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象。\"},\"810\":{\"t\":\"主要优点\"},\"811\":{\"t\":\"组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码\"},\"812\":{\"t\":\"更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足「开闭原则」\"},\"813\":{\"t\":\"主要缺点\"},\"814\":{\"t\":\"设计较复杂，客户端需要花更多时间理清类之间的层次关系；\"},\"815\":{\"t\":\"不容易限制容器中的构件\"},\"816\":{\"t\":\"不容易用继承的方法来增加构件的新功能\"},\"817\":{\"h\":\"组合模式结构与实现\",\"a\":\"组合模式结构与实现\"},\"818\":{\"t\":\"抽象构件（Component）角色：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为。在透明式的组合模式中抽象构件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。（总的抽象类或接口，定义一些通用的方法，比如新增、删除）\"},\"819\":{\"t\":\"树叶构件（Leaf）角色：是组合中的叶节点对象，它没有子节点，用于继承或实现抽象构件\"},\"820\":{\"t\":\"树枝构件（Composite）角色 / 中间构件：是组合中的分支节点对象，它有子节点，用于继承和实现抽象构件。它的主要作用是存储和管理子部件，通常包含 Add()、Remove()、GetChild() 等方法\"},\"821\":{\"t\":\"组合模式分为透明式的组合模式和安全式的组合模式。\"},\"822\":{\"h\":\"透明方式\",\"a\":\"透明方式\"},\"823\":{\"t\":\"在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。但其缺点是：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。其结构图如图所示。\"},\"824\":{\"t\":\"image-20220314164535175\"},\"825\":{\"h\":\"安全方式\",\"a\":\"安全方式\"},\"826\":{\"t\":\"在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。其结构图如图所示。\"},\"827\":{\"t\":\"image-20220314170025485\"},\"828\":{\"h\":\"模式的实现\",\"a\":\"模式的实现\"},\"829\":{\"t\":\"假如要访问集合 c0={leaf1,{leaf2,leaf3}} 中的元素，其对应的树状图如图所示。\"},\"830\":{\"t\":\"image-20220314170106903\"},\"831\":{\"t\":\"下面为透明式的组合模式的实现代码\"},\"832\":{\"t\":\"// 抽象构件 interface Component { public void add(Component c); public void remove(Component c); public Component getChild(int i); public void operation(); } // 树叶构件 class Leaf implements Component { private String name; public Leaf(String name) { this.name = name; } public void add(Component c) { } public void remove(Component c) { } public Component getChild(int i) { return null; } public void operation() { System.out.println(\\\"树叶\\\" + name + \\\"：被访问！\\\"); } } // 树枝构件 class Composite implements Component { private ArrayList<Component> children = new ArrayList<Component>(); public void add(Component c) { children.add(c); } public void remove(Component c) { children.remove(c); } public Component getChild(int i) { return children.get(i); } public void operation() { for (Object obj : children) { ((Component) obj).operation(); } } } public class CompositePattern { public static void main(String[] args) { Component c0 = new Composite(); Component c1 = new Composite(); Component leaf1 = new Leaf(\\\"1\\\"); Component leaf2 = new Leaf(\\\"2\\\"); Component leaf3 = new Leaf(\\\"3\\\"); c0.add(leaf1); c0.add(c1); c1.add(leaf2); c1.add(leaf3); c0.operation(); } } \"},\"833\":{\"t\":\"下面为安全的组合模式的实现代码\"},\"834\":{\"t\":\"// 抽象构件 interface Component { public void operation(); } // 树叶构件 class Leaf implements Component { private String name; public Leaf(String name) { this.name = name; } public void add(Component c) { } public void remove(Component c) { } public Component getChild(int i) { return null; } public void operation() { System.out.println(\\\"树叶\\\" + name + \\\"：被访问！\\\"); } } // 树枝构件 class Composite implements Component { private ArrayList<Component> children = new ArrayList<Component>(); public void add(Component c) { children.add(c); } public void remove(Component c) { children.remove(c); } public Component getChild(int i) { return children.get(i); } public void operation() { for (Object obj : children) { ((Component) obj).operation(); } } } public class CompositePattern { public static void main(String[] args) { Composite c0 = new Composite(); Composite c1 = new Composite(); Component leaf1 = new Leaf(\\\"1\\\"); Component leaf2 = new Leaf(\\\"2\\\"); Component leaf3 = new Leaf(\\\"3\\\"); c0.add(leaf1); c0.add(c1); c1.add(leaf2); c1.add(leaf3); c0.operation(); } } \"},\"835\":{\"h\":\"学校院系展示需求\",\"a\":\"学校院系展示需求\"},\"836\":{\"t\":\"编写程序展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如图：\"},\"837\":{\"t\":\"image-20220314163409100\"},\"838\":{\"h\":\"传统方案解决学校院系展示\",\"a\":\"传统方案解决学校院系展示\"},\"839\":{\"t\":\"类图：\"},\"840\":{\"t\":\"image-20220314163646797\"},\"841\":{\"t\":\"分析：\"},\"842\":{\"t\":\"将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的\"},\"843\":{\"t\":\"实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系， 因此这种方案，不能很好实现的管理的操作，比如对学院、系的添加，删除，遍历等\"},\"844\":{\"t\":\"解决方案：把学校、院、系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作，即使用 组合模式\"},\"845\":{\"h\":\"组合模式解决学校院系展示\",\"a\":\"组合模式解决学校院系展示\"},\"846\":{\"t\":\"思路分析和图解（类图）\"},\"847\":{\"t\":\"image-20220314164610345\"},\"848\":{\"t\":\"代码示例\"},\"849\":{\"t\":\"公共抽象组件\"},\"850\":{\"t\":\"public abstract class OrganizationComponent { private String name; // 名字 private String des; // 说明 protected void add(OrganizationComponent organizationComponent) { // 默认实现 throw new UnsupportedOperationException(); } protected void remove(OrganizationComponent organizationComponent) { // 默认实现 throw new UnsupportedOperationException(); } // 构造器 public OrganizationComponent(String name, String des) { super(); this.name = name; this.des = des; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDes() { return des; } public void setDes(String des) { this.des = des; } // 方法 print，做成抽象的，子类都需要实现 protected abstract void print(); } \"},\"851\":{\"t\":\"大学类\"},\"852\":{\"t\":\"public class University extends OrganizationComponent { List<OrganizationComponent> organizationComponents = new ArrayList<OrganizationComponent>(); // 构造器 public University(String name, String des) { super(name, des); } // 重写 add @Override protected void add(OrganizationComponent organizationComponent) { organizationComponents.add(organizationComponent); } // 重写 remove @Override protected void remove(OrganizationComponent organizationComponent) { organizationComponents.remove(organizationComponent); } @Override public String getName() { return super.getName(); } @Override public String getDes() { return super.getDes(); } // print 方法，就是输出 University 包含的学院 @Override protected void print() { System.out.println(\\\"--------------\\\" + getName() + \\\"--------------\\\"); // 遍历 organizationComponents for (OrganizationComponent organizationComponent : organizationComponents) { organizationComponent.print(); } } } \"},\"853\":{\"t\":\"学院类\"},\"854\":{\"t\":\"public class College extends OrganizationComponent { // List 中 存放的 Department List<OrganizationComponent> organizationComponents = new ArrayList<OrganizationComponent>(); // 构造器 public College(String name, String des) { super(name, des); } // 重写 add @Override protected void add(OrganizationComponent organizationComponent) { // 将来实际业务中，Colleage 的 add 和 University add 不一定完全一样 organizationComponents.add(organizationComponent); } // 重写remove @Override protected void remove(OrganizationComponent organizationComponent) { organizationComponents.remove(organizationComponent); } @Override public String getName() { return super.getName(); } @Override public String getDes() { return super.getDes(); } // print 方法，就是输出 University 包含的学院 @Override protected void print() { System.out.println(\\\"--------------\\\" + getName() + \\\"--------------\\\"); // 遍历 organizationComponents for (OrganizationComponent organizationComponent : organizationComponents) { organizationComponent.print(); } } } \"},\"855\":{\"t\":\"专业类\"},\"856\":{\"t\":\"public class Department extends OrganizationComponent { //没有集合 public Department(String name, String des) { super(name, des); } //add , remove 就不用写了，因为他是叶子节点 @Override public String getName() { return super.getName(); } @Override public String getDes() { return super.getDes(); } @Override protected void print() { System.out.println(getName()); } } \"},\"857\":{\"t\":\"测试代码\"},\"858\":{\"t\":\"public class Client { public static void main(String[] args) { //从大到小创建对象 学校 OrganizationComponent university = new University(\\\"清华大学\\\", \\\" 中国顶级大学 \\\"); //创建 学院 OrganizationComponent computerCollege = new College(\\\"计算机学院\\\", \\\" 计算机学院 \\\"); OrganizationComponent infoEngineercollege = new College(\\\"信息工程学院\\\", \\\" 信息工程学院 \\\"); //创建各个学院下面的系(专业) computerCollege.add(new Department(\\\"软件工程\\\", \\\" 软件工程不错 \\\")); computerCollege.add(new Department(\\\"网络工程\\\", \\\" 网络工程不错 \\\")); computerCollege.add(new Department(\\\"计算机科学与技术\\\", \\\" 计算机科学与技术是老牌的专业 \\\")); // infoEngineercollege.add(new Department(\\\"通信工程\\\", \\\" 通信工程不好学 \\\")); infoEngineercollege.add(new Department(\\\"信息工程\\\", \\\" 信息工程好学 \\\")); //将学院加入到 学校 university.add(computerCollege); university.add(infoEngineercollege); //university.print(); infoEngineercollege.print(); } } \"},\"859\":{\"h\":\"JDK 集合的组合模式剖析\",\"a\":\"jdk-集合的组合模式剖析\"},\"860\":{\"t\":\"Java 的集合类 HashMap 就使用了组合模式。\"},\"861\":{\"t\":\"类图：\"},\"862\":{\"t\":\"image-20220314165737331\"},\"863\":{\"h\":\"组合模式的注意事项和细节\",\"a\":\"组合模式的注意事项和细节\"},\"864\":{\"t\":\"简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题。\"},\"865\":{\"t\":\"具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动。\"},\"866\":{\"t\":\"方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的 树形结构。\"},\"867\":{\"t\":\"需要 遍历组织机构，或者处理的对象具有树形结构时, 非常 适合使用组合模式。\"},\"868\":{\"t\":\"要求较高的抽象性，如果 节点和叶子有很多差异性的话，比如很多方法和属性都不一样，不适合使用组合模式。\"},\"869\":{\"h\":\"组合模式的应用场景\",\"a\":\"组合模式的应用场景\"},\"870\":{\"t\":\"前面分析了组合模式的结构与特点，下面分析它适用的以下应用场景。\"},\"871\":{\"t\":\"在需要表示一个对象整体与部分的层次结构的场合\"},\"872\":{\"t\":\"要求对用户隐藏组合对象与单个对象的不同，用户可以用统一的接口使用组合结构中的所有对象的场合\"},\"873\":{\"h\":\"结构型装饰者模式\"},\"874\":{\"h\":\"装饰器模式的定义与特点\",\"a\":\"装饰器模式的定义与特点\"},\"875\":{\"t\":\"上班族大多都有睡懒觉的习惯，每天早上上班时间都很紧张，于是很多人为了多睡一会，就会用方便的方式解决早餐问题。有些人早餐可能会吃煎饼，煎饼中可以加鸡蛋，也可以加香肠，但是不管怎么「加码」，都还是一个煎饼。在现实生活中，常常需要对现有产品增加新的功能或美化其外观，如房子装修、相片加相框等，都是装饰器模式。\"},\"876\":{\"t\":\"在软件开发过程中，有时想用一些现存的组件。这些组件可能只是完成了一些核心功能。但在不改变其结构的情况下，可以动态地扩展其功能。所有这些都可以釆用装饰器模式来实现。\"},\"877\":{\"t\":\"装饰器模式（Decorator Pattern）的定义：指 在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式，也体现了开闭原则（OCP）。\"},\"878\":{\"t\":\"主要优点\"},\"879\":{\"t\":\"装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用\"},\"880\":{\"t\":\"通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果\"},\"881\":{\"t\":\"装饰器模式完全遵守开闭原则\"},\"882\":{\"t\":\"主要缺点\"},\"883\":{\"t\":\"装饰器模式会增加许多子类，过度使用会增加程序得复杂性。\"},\"884\":{\"h\":\"装饰器模式的结构与实现\",\"a\":\"装饰器模式的结构与实现\"},\"885\":{\"t\":\"通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会很膨胀。如果使用组合关系来创建一个包装对象（即装饰对象）来包裹真实对象，并在保持真实对象的类结构不变的前提下，为其提供额外的功能，这就是装饰器模式的目标。下面来分析其基本结构和实现方法。\"},\"886\":{\"t\":\"装饰器模式主要包含以下角色：\"},\"887\":{\"t\":\"抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象\"},\"888\":{\"t\":\"具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责\"},\"889\":{\"t\":\"抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能\"},\"890\":{\"t\":\"具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任\"},\"891\":{\"t\":\"装饰器模式的结构图如图所示：\"},\"892\":{\"t\":\"image-20220314162328427\"},\"893\":{\"t\":\"代码实现：\"},\"894\":{\"t\":\"// 抽象构件角色 interface Component { public void operation(); } // 具体构件角色 class ConcreteComponent implements Component { public ConcreteComponent() { System.out.println(\\\"创建具体构件角色\\\"); } public void operation() { System.out.println(\\\"调用具体构件角色的方法 operation()\\\"); } } // 抽象装饰角色 class Decorator implements Component { private Component component; public Decorator(Component component) { this.component = component; } public void operation() { component.operation(); } } // 具体装饰角色 class ConcreteDecorator extends Decorator { public ConcreteDecorator(Component component) { super(component); } public void operation() { super.operation(); addedFunction(); } public void addedFunction() { System.out.println(\\\"为具体构件角色增加额外的功能addedFunction()\\\"); } } public class DecoratorPattern { public static void main(String[] args) { Component p = new ConcreteComponent(); p.operation(); System.out.println(\\\"---------------------------------\\\"); Component d = new ConcreteDecorator(p); d.operation(); } } \"},\"895\":{\"h\":\"星巴克咖啡订单项目\",\"a\":\"星巴克咖啡订单项目\"},\"896\":{\"t\":\"咖啡种类/单品咖啡：Espresso（意大利浓咖啡）、ShortBlack、LongBlack（美式咖啡）、Decaf（无因咖啡）\"},\"897\":{\"t\":\"调料：Milk、Soy（豆浆）、Chocolate\"},\"898\":{\"t\":\"要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便\"},\"899\":{\"t\":\"使用 OO 的来计算不同种类咖啡的费用: 客户可以点单品咖啡，也可以单品咖啡 + 调料组合\"},\"900\":{\"h\":\"方案 1（较差）\",\"a\":\"方案-1-较差\"},\"901\":{\"t\":\"类图\"},\"902\":{\"t\":\"image-20220314160422590\"},\"903\":{\"t\":\"Drink 是一个抽象类，表示饮料\"},\"904\":{\"t\":\"des 就是对咖啡的描述，比如咖啡的名字\"},\"905\":{\"t\":\"cost() 方法就是计算费用，Drink 类中做成一个抽象方法\"},\"906\":{\"t\":\"Decaf 就是单品咖啡，继承 Drink, 并实现 cost 方法\"},\"907\":{\"t\":\"Espress 和 Milk 就是单品咖啡 + 调料，这个组合很多\"},\"908\":{\"t\":\"问题：这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现 类爆炸。\"},\"909\":{\"h\":\"方案 2（较好）\",\"a\":\"方案-2-较好\"},\"910\":{\"t\":\"前面分析到方案 1 因为咖啡单品 + 调料组合会造成类的倍增，因此可以做改进，将调料内置到 Drink 类，这样就不会造成类数量过多。从而提高项目的维护性，如图\"},\"911\":{\"t\":\"image-20220314160744377\"},\"912\":{\"t\":\"milk、soy、chocolate 可以设计为 Boolean，表示是否要添加相应的调料。\"},\"913\":{\"t\":\"方案 2 可以控制类的数量，不至于造成很多的类\"},\"914\":{\"t\":\"在增加或者删除调料种类时，代码的维护量很大\"},\"915\":{\"t\":\"考虑到用户可以添加多份调料时，可以将 hasMilk 返回一个对应 int\"},\"916\":{\"t\":\"考虑使用 装饰者模式\"},\"917\":{\"h\":\"装饰者模式解决订单项目\",\"a\":\"装饰者模式解决订单项目\"},\"918\":{\"t\":\"image-20220314161222580\"},\"919\":{\"t\":\"订单分析图：\"},\"920\":{\"t\":\"image-20220314161323609\"},\"921\":{\"t\":\"代码示例\"},\"922\":{\"t\":\"public abstract class Drink { public String des; // 描述 private float price = 0.0f; public String getDes() { return des; } public void setDes(String des) { this.des = des; } public float getPrice() { return price; } public void setPrice(float price) { this.price = price; } // 计算费用的抽象方法 // 子类来实现 public abstract float cost(); } \"},\"923\":{\"t\":\"咖啡代码：\"},\"924\":{\"t\":\"public class Coffee extends Drink { @Override public float cost() { return super.getPrice(); } } public class DeCaf extends Coffee { public DeCaf() { setDes(\\\" 无因咖啡 \\\"); setPrice(1.0f); } } public class Espresso extends Coffee { public Espresso() { setDes(\\\" 意大利咖啡 \\\"); setPrice(6.0f); } } public class LongBlack extends Coffee { public LongBlack() { setDes(\\\" longblack \\\"); setPrice(5.0f); } } public class ShortBlack extends Coffee{ public ShortBlack() { setDes(\\\" shortblack \\\"); setPrice(4.0f); } } \"},\"925\":{\"t\":\"装饰者代码\"},\"926\":{\"t\":\"public class Decorator extends Drink { private Drink obj; public Decorator(Drink obj) { // 组合 this.obj = obj; } @Override public float cost() { // getPrice 自己价格 return super.getPrice() + obj.cost(); } @Override public String getDes() { // obj.getDes() 输出被装饰者的信息 return des + \\\" \\\" + getPrice() + \\\" && \\\" + obj.getDes(); } } public class Chocolate extends Decorator { public Chocolate(Drink obj) { super(obj); setDes(\\\" 巧克力 \\\"); setPrice(3.0f); // 调味品的价格 } } public class Soy extends Decorator{ public Soy(Drink obj) { super(obj); setDes(\\\" 豆浆 \\\"); setPrice(1.5f); } } public class Milk extends Decorator { public Milk(Drink obj) { super(obj); setDes(\\\" 牛奶 \\\"); setPrice(2.0f); } } \"},\"927\":{\"t\":\"测试代码\"},\"928\":{\"t\":\"public class CoffeeBar { public static void main(String[] args) { // 装饰者模式下的订单：2 份巧克力 + 一份牛奶的 LongBlack // 1. 点一份 LongBlack Drink order = new LongBlack(); System.out.println(\\\"费用1=\\\" + order.cost()); System.out.println(\\\"描述=\\\" + order.getDes()); // 2. order 加入一份牛奶 order = new Milk(order); System.out.println(\\\"order 加入一份牛奶 费用 =\\\" + order.cost()); System.out.println(\\\"order 加入一份牛奶 描述 = \\\" + order.getDes()); // 3. order 加入一份巧克力 order = new Chocolate(order); System.out.println(\\\"order 加入一份牛奶 加入一份巧克力 费用 =\\\" + order.cost()); System.out.println(\\\"order 加入一份牛奶 加入一份巧克力 描述 = \\\" + order.getDes()); // 4. order 加入两份巧克力 order = new Chocolate(order); System.out.println(\\\"order 加入一份牛奶 加入2份巧克力 费用 =\\\" + order.cost()); System.out.println(\\\"order 加入一份牛奶 加入2份巧克力 描述 = \\\" + order.getDes()); System.out.println(\\\"===========================\\\"); Drink order2 = new DeCaf(); System.out.println(\\\"order2 无因咖啡 费用 =\\\" + order2.cost()); System.out.println(\\\"order2 无因咖啡 描述 = \\\" + order2.getDes()); order2 = new Milk(order2); System.out.println(\\\"order2 无因咖啡 加入一份牛奶 费用 =\\\" + order2.cost()); System.out.println(\\\"order2 无因咖啡 加入一份牛奶 描述 = \\\" + order2.getDes()); } } \"},\"929\":{\"h\":\"JDK IO 的装饰者模式剖析\",\"a\":\"jdk-io-的装饰者模式剖析\"},\"930\":{\"t\":\"Java 的 IO 结构，FilterInputStream 就是一个装饰者。\"},\"931\":{\"t\":\"image-20220314162102077\"},\"932\":{\"t\":\"InputStream 是抽象类, 类似我们前面讲的 Drink\"},\"933\":{\"t\":\"FileInputStream 是 InputStream 子类，类似我们前面的 DeCaf、LongBlack\"},\"934\":{\"t\":\"FilterInputStream 是 InputStream 子类：类似我们前面的 Decorator 修饰者\"},\"935\":{\"t\":\"DataInputStream 是 FilterInputStream 子类，具体的修饰者，类似前面的 Milk、Soy 等\"},\"936\":{\"t\":\"FilterInputStream 类有 protected volatile InputStream in; 即含被装饰者\"},\"937\":{\"t\":\"分析得出在 JDK 的 IO 体系中，就是使用装饰者模式。\"},\"938\":{\"h\":\"装饰器模式的应用场景\",\"a\":\"装饰器模式的应用场景\"},\"939\":{\"t\":\"装饰器模式通常在以下几种情况使用。\"},\"940\":{\"t\":\"当需要给一个现有类添加附加职责，而又不能采用生成子类的方法进行扩充时。例如，该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类\"},\"941\":{\"t\":\"当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时，采用继承关系很难实现，而采用装饰器模式却很好实现\"},\"942\":{\"t\":\"当对象的功能要求可以动态地添加，也可以再动态地撤销时\"},\"943\":{\"t\":\"装饰器模式最著名的应用莫过于 Java I/O 标准库的设计了（上面已经介绍）。例如，InputStream 的子类 FilterInputStream，OutputStream 的子类 FilterOutputStream，Reader 的子类 BufferedReader 以及 FilterReader，还有 Writer 的子类 BufferedWriter、FilterWriter 以及 PrintWriter 等，它们都是抽象装饰类。\"},\"944\":{\"h\":\"设计模式总结\"},\"945\":{\"h\":\"总结\",\"a\":\"总结\"},\"946\":{\"t\":\"23 种设计模式表格总结：\"},\"947\":{\"h\":\"创建型设计模式\",\"a\":\"创建型设计模式\"},\"948\":{\"t\":\"简单来说就是用来创建对象的\"},\"949\":{\"t\":\"设计模式\"},\"950\":{\"t\":\"分类\"},\"951\":{\"t\":\"简述\"},\"952\":{\"t\":\"一句话归纳\"},\"953\":{\"t\":\"目的\"},\"954\":{\"t\":\"生活案例\"},\"955\":{\"t\":\"工厂模式（Factory Pattern）\"},\"956\":{\"t\":\"不同条件下创建不同实例\"},\"957\":{\"t\":\"工厂生产物品\"},\"958\":{\"t\":\"产品标准化，生产更高效\"},\"959\":{\"t\":\"封装创建细节\"},\"960\":{\"t\":\"实体工厂\"},\"961\":{\"t\":\"单例模式（Singleton Pattern）\"},\"962\":{\"t\":\"保证一个类仅有一个实例，并且提供一个全局访问点\"},\"963\":{\"t\":\"世上只有一个我\"},\"964\":{\"t\":\"保证独一无二\"},\"965\":{\"t\":\"CEO\"},\"966\":{\"t\":\"原型模式（Prototype Pattern）\"},\"967\":{\"t\":\"通过拷贝原型创建新的对象\"},\"968\":{\"t\":\"拔一根猴毛，吹出千万个\"},\"969\":{\"t\":\"高效创建对象\"},\"970\":{\"t\":\"克隆\"},\"971\":{\"t\":\"建造者模式（Builder Pattern）\"},\"972\":{\"t\":\"用来创建复杂的复合对象\"},\"973\":{\"t\":\"高配中配和低配，想选哪配就哪配\"},\"974\":{\"t\":\"开放个性配置步骤\"},\"975\":{\"t\":\"选配\"},\"976\":{\"h\":\"结构型设计模式\",\"a\":\"结构型设计模式\"},\"977\":{\"t\":\"关注类和对象的组合\"},\"978\":{\"t\":\"设计模式\"},\"979\":{\"t\":\"分类\"},\"980\":{\"t\":\"简述\"},\"981\":{\"t\":\"一句话归纳\"},\"982\":{\"t\":\"目的\"},\"983\":{\"t\":\"生活案例\"},\"984\":{\"t\":\"代理模式（Proxy Pattern）\"},\"985\":{\"t\":\"为其他对象提供一种代理以控制对这个对象的访问\"},\"986\":{\"t\":\"没有资源没时间，得找别人来帮忙\"},\"987\":{\"t\":\"没有资源没时间，得找别人来帮忙\"},\"988\":{\"t\":\"增强职责\"},\"989\":{\"t\":\"媒婆\"},\"990\":{\"t\":\"外观模式（Facade Pattern）\"},\"991\":{\"t\":\"对外提供一个统一的接口用来访问子系统\"},\"992\":{\"t\":\"打开一扇门，通向全世界\"},\"993\":{\"t\":\"统一访问入口\"},\"994\":{\"t\":\"前台\"},\"995\":{\"t\":\"装饰器模式（Decorator Pattern）\"},\"996\":{\"t\":\"为对象添加新功能\"},\"997\":{\"t\":\"他大舅他二舅都是他舅\"},\"998\":{\"t\":\"灵活扩展、同宗同源\"},\"999\":{\"t\":\"煎饼\"},\"1000\":{\"t\":\"享元模式（Flyweight Pattern）\"},\"1001\":{\"t\":\"使用对象池来减少重复对象的创建\"},\"1002\":{\"t\":\"优化资源配置，减少重复浪费\"},\"1003\":{\"t\":\"共享资源池\"},\"1004\":{\"t\":\"全国社保联网\"},\"1005\":{\"t\":\"组合模式（Composite Pattern）\"},\"1006\":{\"t\":\"将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理\"},\"1007\":{\"t\":\"人在一起叫团伙，心在一起叫团队\"},\"1008\":{\"t\":\"统一整体和个体\"},\"1009\":{\"t\":\"组织架构树\"},\"1010\":{\"t\":\"适配器模式（Adapter Pattern）\"},\"1011\":{\"t\":\"将原来不兼容的两个类融合在一起\"},\"1012\":{\"t\":\"万能充电器\"},\"1013\":{\"t\":\"兼容转换\"},\"1014\":{\"t\":\"电源适配\"},\"1015\":{\"t\":\"桥接模式（Bridge Pattern）\"},\"1016\":{\"t\":\"将两个能够独立变化的部分分离开来\"},\"1017\":{\"t\":\"约定优于配置\"},\"1018\":{\"t\":\"不允许用继承\"},\"1019\":{\"t\":\"桥\"},\"1020\":{\"h\":\"行为型设计模式\",\"a\":\"行为型设计模式\"},\"1021\":{\"t\":\"关注对象之间的通信\"},\"1022\":{\"t\":\"设计模式\"},\"1023\":{\"t\":\"分类\"},\"1024\":{\"t\":\"简述\"},\"1025\":{\"t\":\"一句话归纳\"},\"1026\":{\"t\":\"目的\"},\"1027\":{\"t\":\"生活案例\"},\"1028\":{\"t\":\"模板模式（Template Pattern）\"},\"1029\":{\"t\":\"定义一套流程模板，根据需要实现模板中的操作\"},\"1030\":{\"t\":\"流程全部标准化，需要微调请覆盖\"},\"1031\":{\"t\":\"流程全部标准化，需要微调请覆盖\"},\"1032\":{\"t\":\"逻辑复用\"},\"1033\":{\"t\":\"把大象装进冰箱\"},\"1034\":{\"t\":\"策略模式（Strategy Pattern）\"},\"1035\":{\"t\":\"封装不同的算法，算法之间能互相替换\"},\"1036\":{\"t\":\"条条大道通罗马，具体哪条你来定\"},\"1037\":{\"t\":\"把选择权交给用户\"},\"1038\":{\"t\":\"选择支付方式\"},\"1039\":{\"t\":\"责任链模式（Chain of Responsibility Pattern）\"},\"1040\":{\"t\":\"拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。\"},\"1041\":{\"t\":\"各人自扫门前雪，莫管他们瓦上霜\"},\"1042\":{\"t\":\"解耦处理逻辑\"},\"1043\":{\"t\":\"踢皮球\"},\"1044\":{\"t\":\"迭代器模式（Iterator Pattern）\"},\"1045\":{\"t\":\"提供一种方法顺序访问一个聚合对象中的各个元素\"},\"1046\":{\"t\":\"流水线上坐一天，每个包裹扫一遍\"},\"1047\":{\"t\":\"统一对集合的访问方式\"},\"1048\":{\"t\":\"逐个检票进站\"},\"1049\":{\"t\":\"命令模式（Command Pattern）\"},\"1050\":{\"t\":\"将请求封装成命令，并记录下来，能够撤销与重做\"},\"1051\":{\"t\":\"运筹帷幄之中，决胜千里之外\"},\"1052\":{\"t\":\"解耦请求和处理\"},\"1053\":{\"t\":\"遥控器\"},\"1054\":{\"t\":\"状态模式（State Pattern）\"},\"1055\":{\"t\":\"根据不同的状态做出不同的行为\"},\"1056\":{\"t\":\"状态驱动行为，行为决定状态\"},\"1057\":{\"t\":\"绑定状态和行为\"},\"1058\":{\"t\":\"订单状态跟踪\"},\"1059\":{\"t\":\"备忘录模式（Memento Pattern）\"},\"1060\":{\"t\":\"保存对象的状态，在需要时进行恢复\"},\"1061\":{\"t\":\"失足不成千古恨，想重来时就重来\"},\"1062\":{\"t\":\"备份、后悔机制\"},\"1063\":{\"t\":\"草稿箱\"},\"1064\":{\"t\":\"中介者模式（Mediator Pattern）\"},\"1065\":{\"t\":\"将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散\"},\"1066\":{\"t\":\"联系方式我给你，怎么搞定我不管\"},\"1067\":{\"t\":\"统一管理网状资源\"},\"1068\":{\"t\":\"朋友圈\"},\"1069\":{\"t\":\"解释器模式（Interpreter Pattern）\"},\"1070\":{\"t\":\"给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子\"},\"1071\":{\"t\":\"我想说「方言」，一切解释权都归我\"},\"1072\":{\"t\":\"实现特定语法解析\"},\"1073\":{\"t\":\"摩斯密码\"},\"1074\":{\"t\":\"观察者模式（Observer Pattern）\"},\"1075\":{\"t\":\"状态发生改变时通知观察者，一对多的关系\"},\"1076\":{\"t\":\"到点就通知我\"},\"1077\":{\"t\":\"解耦观察者与被观察者\"},\"1078\":{\"t\":\"闹钟\"},\"1079\":{\"t\":\"访问者模式（Visitor Pattern）\"},\"1080\":{\"t\":\"稳定数据结构，定义新的操作行为\"},\"1081\":{\"t\":\"横看成岭侧成峰，远近高低各不同\"},\"1082\":{\"t\":\"解耦数据结构和数据操作\"},\"1083\":{\"t\":\"KPI考核\"},\"1084\":{\"t\":\"委派模式（Delegate Pattern）\"},\"1085\":{\"t\":\"允许对象组合实现与继承相同的代码重用，负责任务的调用和分配\"},\"1086\":{\"t\":\"允许对象组合实现与继承相同的代码重用，负责任务的调用和分配\"},\"1087\":{\"t\":\"这个需求很简单，怎么实现我不管\"},\"1088\":{\"t\":\"只对结果负责\"},\"1089\":{\"t\":\"授权委托书\"},\"1090\":{\"t\":\"来自：http://c.biancheng.net/view/8462.html。\"},\"1091\":{\"h\":\"结构型外观模式\"},\"1092\":{\"h\":\"外观模式基本介绍\",\"a\":\"外观模式基本介绍\"},\"1093\":{\"t\":\"现实生活中，常常存在办事较复杂的例子，如办房产证或注册一家公司，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。\"},\"1094\":{\"t\":\"软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了「开闭原则」，也违背了「迪米特法则」，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。\"},\"1095\":{\"t\":\"外观模式（Facade Pattern），也叫 过程模式、门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。\"},\"1096\":{\"t\":\"在日常编码工作中，我们都在有意无意的大量使用外观模式。只要是高层模块需要调度多个子系统（2个以上的类对象），我们都会自觉地创建一个新的类封装这些子系统，提供精简的接口，让高层模块可以更加容易地间接调用这些子系统的功能。尤其是现阶段各种第三方SDK、开源类库，很大概率都会使用外观模式。\"},\"1097\":{\"t\":\"外观（Facade）模式是 迪米特法则 的典型应用。\"},\"1098\":{\"t\":\"主要优点\"},\"1099\":{\"t\":\"降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类\"},\"1100\":{\"t\":\"对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易\"},\"1101\":{\"t\":\"降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象\"},\"1102\":{\"t\":\"主要缺点\"},\"1103\":{\"t\":\"不能很好地限制客户使用子系统类，很容易带来未知风险\"},\"1104\":{\"t\":\"增加新的子系统可能需要修改外观类或客户端的源代码，违背了 开闭原则\"},\"1105\":{\"h\":\"外观模式的结构与实现\",\"a\":\"外观模式的结构与实现\"},\"1106\":{\"t\":\"外观（Facade）模式的结构比较简单，主要是定义了一个高层接口。它包含了对各个子系统的引用，客户端可以通过它访问各个子系统的功能。现在来分析其基本结构和实现方法。\"},\"1107\":{\"h\":\"模式的结构\",\"a\":\"模式的结构\"},\"1108\":{\"t\":\"外观（Facade）模式包含以下主要角色：\"},\"1109\":{\"t\":\"外观（Facade）角色：为多个子系统对外提供一个共同的接口\"},\"1110\":{\"t\":\"子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它\"},\"1111\":{\"t\":\"客户（Client）角色：通过一个外观角色访问各个子系统的功能\"},\"1112\":{\"t\":\"image-20220314175538719\"},\"1113\":{\"h\":\"模式的实现\",\"a\":\"模式的实现\"},\"1114\":{\"t\":\"// 子系统角色 class SubSystem01 { public void method1() { System.out.println(\\\"子系统01的method1()被调用！\\\"); } } // 子系统角色 class SubSystem02 { public void method2() { System.out.println(\\\"子系统02的method2()被调用！\\\"); } } // 子系统角色 class SubSystem03 { public void method3() { System.out.println(\\\"子系统03的method3()被调用！\\\"); } } // 外观角色 class Facade { private SubSystem01 obj1 = new SubSystem01(); private SubSystem02 obj2 = new SubSystem02(); private SubSystem03 obj3 = new SubSystem03(); public void method() { obj1.method1(); obj2.method2(); obj3.method3(); } } // 客户角色 public class FacadePattern { public static void main(String[] args) { Facade f = new Facade(); f.method(); } } \"},\"1115\":{\"h\":\"影院管理项目\",\"a\":\"影院管理项目\"},\"1116\":{\"t\":\"组建一个家庭影院：DVD 播放器、投影仪、自动屏幕、环绕立体声、爆米花机，灯光。\"},\"1117\":{\"t\":\"过程：开爆米花机、开爆米花机、开投影仪、开音响、开 DVD、选 DVD、去拿爆米花、调暗灯光、播放、观影结束后，关闭各种设备。\"},\"1118\":{\"h\":\"传统方式解决影院管理\",\"a\":\"传统方式解决影院管理\"},\"1119\":{\"h\":\"传统方式解决问题图\",\"a\":\"传统方式解决问题图\"},\"1120\":{\"t\":\"image-20220314175108493\"},\"1121\":{\"h\":\"传统方式解决问题分析\",\"a\":\"传统方式解决问题分析\"},\"1122\":{\"t\":\"在 ClientTest 的 main 方法中，创建各个子系统的对象，并直接去调用子系统(对象)相关方法，会造成调用过程混乱，没有清晰的过程，不利于在 ClientTest 中，去维护对子系统的操作\"},\"1123\":{\"t\":\"解决思路：定义一个高层接口，给子系统中的一组接口提供一个一致的界面（比如在高层接口提供四个方法 ready, play, pause, end），用来访问子系统中的一群接口。\"},\"1124\":{\"t\":\"也就是说就是通过定义一个一致的接口（界面类），用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节，即使用 外观模式。\"},\"1125\":{\"h\":\"外观模式解决影院管理\",\"a\":\"外观模式解决影院管理\"},\"1126\":{\"t\":\"外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的。比如：在 PC 上安装软件的时候经常有一键安装选项（省去选择安装目录、安装的组件等等），还有就是手机的重启功能（把关机和启动合为一个操作）。\"},\"1127\":{\"t\":\"外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。\"},\"1128\":{\"t\":\"示意图：\"},\"1129\":{\"t\":\"image-20220314175728964\"},\"1130\":{\"t\":\"影院管理项目类图：\"},\"1131\":{\"t\":\"image-20220314175754422\"},\"1132\":{\"t\":\"代码示例：\"},\"1133\":{\"t\":\"影院的 DVD 播放器、投影仪、自动屏幕、环绕立体声、爆米花机、灯光类\"},\"1134\":{\"t\":\"// DVD 播放器 public class DVDPlayer { // 使用单例模式, 使用饿汉式 private static DVDPlayer instance = new DVDPlayer(); public static DVDPlayer getInstanc() { return instance; } public void on() { System.out.println(\\\" dvd on \\\"); } public void off() { System.out.println(\\\" dvd off \\\"); } public void play() { System.out.println(\\\" dvd is playing \\\"); } // .... public void pause() { System.out.println(\\\" dvd pause ..\\\"); } } // 投影仪 public class Projector { private static Projector instance = new Projector(); public static Projector getInstance() { return instance; } public void on() { System.out.println(\\\" Projector on \\\"); } public void off() { System.out.println(\\\" Projector ff \\\"); } public void focus() { System.out.println(\\\" Projector is Projector \\\"); } //... } // 自动屏幕 public class Screen { private static Screen instance = new Screen(); public static Screen getInstance() { return instance; } public void up() { System.out.println(\\\" Screen up \\\"); } public void down() { System.out.println(\\\" Screen down \\\"); } } // 爆米花机 public class Popcorn { private static Popcorn instance = new Popcorn(); public static Popcorn getInstance() { return instance; } public void on() { System.out.println(\\\" popcorn on \\\"); } public void off() { System.out.println(\\\" popcorn ff \\\"); } public void pop() { System.out.println(\\\" popcorn is poping \\\"); } } // 环绕立体声 public class Stereo { private static Stereo instance = new Stereo(); public static Stereo getInstance() { return instance; } public void on() { System.out.println(\\\" Stereo on \\\"); } public void off() { System.out.println(\\\" Screen off \\\"); } public void up() { System.out.println(\\\" Screen up.. \\\"); } //... } // 灯光 public class TheaterLight { private static TheaterLight instance = new TheaterLight(); public static TheaterLight getInstance() { return instance; } public void on() { System.out.println(\\\" TheaterLight on \\\"); } public void off() { System.out.println(\\\" TheaterLight off \\\"); } public void dim() { System.out.println(\\\" TheaterLight dim.. \\\"); } public void bright() { System.out.println(\\\" TheaterLight bright.. \\\"); } } \"},\"1135\":{\"t\":\"每一步的过程类\"},\"1136\":{\"t\":\"public class HomeTheaterFacade { // 定义各个子系统对象 private TheaterLight theaterLight; private Popcorn popcorn; private Stereo stereo; private Projector projector; private Screen screen; private DVDPlayer dVDPlayer; // 构造器 public HomeTheaterFacade() { super(); this.theaterLight = TheaterLight.getInstance(); this.popcorn = Popcorn.getInstance(); this.stereo = Stereo.getInstance(); this.projector = Projector.getInstance(); this.screen = Screen.getInstance(); this.dVDPlayer = DVDPlayer.getInstanc(); } // 操作分成 4 步 public void ready() { popcorn.on(); popcorn.pop(); screen.down(); projector.on(); stereo.on(); dVDPlayer.on(); theaterLight.dim(); } public void play() { dVDPlayer.play(); } public void pause() { dVDPlayer.pause(); } public void end() { popcorn.off(); theaterLight.bright(); screen.up(); projector.off(); stereo.off(); dVDPlayer.off(); } } \"},\"1137\":{\"t\":\"测试类：\"},\"1138\":{\"t\":\"public class Client { public static void main(String[] args) { HomeTheaterFacade homeTheaterFacade = new HomeTheaterFacade(); homeTheaterFacade.ready(); homeTheaterFacade.play(); homeTheaterFacade.end(); } } \"},\"1139\":{\"h\":\"MyBatis 框架的外观模式剖析\",\"a\":\"mybatis-框架的外观模式剖析\"},\"1140\":{\"t\":\"MyBatis 中的 Configuration 去创建 MetaObject 对象使用到外观模式。\"},\"1141\":{\"t\":\"image-20220314180358602\"},\"1142\":{\"t\":\"对源码中使用到的外观模式的角色类图\"},\"1143\":{\"t\":\"image-20220314180442486\"},\"1144\":{\"h\":\"外观模式的注意事项和细节\",\"a\":\"外观模式的注意事项和细节\"},\"1145\":{\"t\":\"外观模式 对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性\"},\"1146\":{\"t\":\"外观模式对客户端与子系统的耦合关系：解耦，让子系统内部的模块更易维护和扩展\"},\"1147\":{\"t\":\"通过合理的使用外观模式，可以帮我们更好的 划分访问的层次\"},\"1148\":{\"t\":\"当系统需要进行分层设计时，可以考虑使用 Facade 模式\"},\"1149\":{\"t\":\"在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个 Facade 类，来提供遗留系统的比较清晰简单的接口，让新系统与 Facade 类交互，提高复用性\"},\"1150\":{\"t\":\"不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的\"},\"1151\":{\"h\":\"外观模式的应用场景\",\"a\":\"外观模式的应用场景\"},\"1152\":{\"t\":\"通常在以下情况下可以考虑使用外观模式：\"},\"1153\":{\"t\":\"对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系\"},\"1154\":{\"t\":\"当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问\"},\"1155\":{\"t\":\"当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性\"},\"1156\":{\"h\":\"创建型工厂模式\"},\"1157\":{\"h\":\"工厂模式概述\",\"a\":\"工厂模式概述\"},\"1158\":{\"t\":\"工厂模式很重要，后面的很多架构设计，都是工厂模式联合着其它设计模式使用。\"},\"1159\":{\"t\":\"一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GOF 的《设计模式》一书中，它将简单工厂模式看作是工厂方法模式的一种特例，所以工厂模式只被分成了工厂方法和抽象工厂两类。实际上，前面一种分类方法更加常见，所以，在今天的讲解中，我们沿用第一种分类方法。\"},\"1160\":{\"t\":\"在这三种细分的工厂模式中，简单工厂、工厂方法原理比较简单，在实际的项目中也比较常用。而抽象工厂的原理稍微复杂点，在实际的项目中相对也不常用。\"},\"1161\":{\"t\":\"除此之外，本内容讲解的重点也不是原理和实现，因为这些都很简单，重点还是要搞清楚应用场景：什么时候该用工厂模式？相对于直接 new 来创建对象，用工厂模式来创建究竟有什么好处呢？\"},\"1162\":{\"t\":\"简单工厂模式\"},\"1163\":{\"t\":\"用来生产同一等级结构中的任意产品（对于增加新的产品，需要覆盖已有代码）\"},\"1164\":{\"t\":\"工厂方法模式\"},\"1165\":{\"t\":\"用来生产同一等级结构中的固定产品（支持增加任意产品）\"},\"1166\":{\"t\":\"抽象工厂模式\"},\"1167\":{\"t\":\"围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂\"},\"1168\":{\"h\":\"简单工厂（Simple Factory）\",\"a\":\"简单工厂-simple-factory\"},\"1169\":{\"h\":\"简单工厂模式基本介绍\",\"a\":\"简单工厂模式基本介绍\"},\"1170\":{\"t\":\"简单工厂模式是属于 创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是 工厂模式家族 中最简单实用的模式。\"},\"1171\":{\"t\":\"简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）。\"},\"1172\":{\"t\":\"在简单工厂模式中创建实例的方法通常为静态（static）方法，因此 简单工厂模式（Simple Factory Pattern）又叫作 静态工厂方法模式（Static Factory Method Pattern）。\"},\"1173\":{\"t\":\"在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式。\"},\"1174\":{\"t\":\"主要优点\"},\"1175\":{\"t\":\"工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责，很方便的创建出相应的产品。工厂和产品的职责区分明确\"},\"1176\":{\"t\":\"客户端无需知道所创建具体产品的类名，只需知道参数即可\"},\"1177\":{\"t\":\"也可以引入配置文件，在不修改客户端代码的情况下更换和添加新的具体产品类\"},\"1178\":{\"t\":\"主要缺点\"},\"1179\":{\"t\":\"简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受影响。且工厂类代码会非常臃肿，违背高聚合原则\"},\"1180\":{\"t\":\"使用简单工厂模式会增加系统中类的个数（引入新的工厂类），增加系统的复杂度和理解难度\"},\"1181\":{\"t\":\"系统扩展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂\"},\"1182\":{\"t\":\"简单工厂模式使用了 static 工厂方法，造成工厂角色无法形成基于继承的等级结构\"},\"1183\":{\"t\":\"主要角色\"},\"1184\":{\"t\":\"简单工厂（SimpleFactory）：是简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象\"},\"1185\":{\"t\":\"抽象产品（Product）：是简单工厂创建的所有对象的父类，负责描述所有实例共有的公共接口\"},\"1186\":{\"t\":\"具体产品（ConcreteProduct）：是简单工厂模式的创建目标\"},\"1187\":{\"t\":\"结构图\"},\"1188\":{\"t\":\"image-20220326223625612\"},\"1189\":{\"h\":\"传统方式完成披萨案例\",\"a\":\"传统方式完成披萨案例\"},\"1190\":{\"t\":\"看一个披萨的项目：要便于披萨种类的扩展，要便于维护\"},\"1191\":{\"t\":\"披萨的种类很多（比如 GreekPizz、CheesePizz 等）\"},\"1192\":{\"t\":\"披萨的制作有 prepare，bake, cut, box\"},\"1193\":{\"t\":\"完成披萨店订购功能\"},\"1194\":{\"t\":\"思路分析（类图）\"},\"1195\":{\"t\":\"image-20220227134528102\"},\"1196\":{\"t\":\"编写制作披萨的过程类 Pizza.java\"},\"1197\":{\"t\":\"public abstract class Pizza { protected String name; // 名字 // 准备原材料, 不同的披萨不一样，因此，我们做成抽象方法 public abstract void prepare(); // 省略 setter、getter 方法 } class CheesePizza extends Pizza { @Override public void prepare() { System.out.println(\\\" 给制作奶酪披萨 准备原材料 \\\"); } } class GreekPizza extends Pizza { @Override public void prepare() { System.out.println(\\\" 给希腊披萨 准备原材料 \\\"); } } \"},\"1198\":{\"t\":\"编写 OrderPizza.java 去订购需要的各种披萨\"},\"1199\":{\"t\":\"public class OrderPizza { public static void main(String[] args) { CheesePizza cheesePizza = new CheesePizza(); GreekPizza greekPizza = new GreekPizza(); System.out.println(cheesePizza.getName); System.out.println(greekPizza.getName); } } \"},\"1200\":{\"t\":\"需要什么类型的披萨，new 出该对象。\"},\"1201\":{\"t\":\"传统的方式的优缺点\"},\"1202\":{\"t\":\"优点是比较好理解，简单易操作\"},\"1203\":{\"t\":\"缺点是依赖性太强，不应该直接去 new 一个类\"},\"1204\":{\"t\":\"改进的思路分析\"},\"1205\":{\"t\":\"分析：修改代码可以接受，但是如果我们在其它的地方也有创建 Pizza 的代码，就意味着，也需要修改，而创建 Pizza 的代码，往往有多处。\"},\"1206\":{\"t\":\"思路：把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可，其它有创建到 Pizza 对象的代码就不需要修改了，即 简单工厂模式。\"},\"1207\":{\"h\":\"简单工厂模式完成案例\",\"a\":\"简单工厂模式完成案例\"},\"1208\":{\"t\":\"简单工厂模式的设计方案: 定义一个可以实例化 Pizaa 对象的类，封装创建对象的代码。\"},\"1209\":{\"t\":\"image-20220227140036784\"},\"1210\":{\"t\":\"Pizza 类代码保持不变（上面有）。\"},\"1211\":{\"t\":\"简单工厂模式代码：\"},\"1212\":{\"t\":\"public class SimpleFactory { // 方法一：if-else，缺点，违反了 OCP 原则 public Pizza createPizza(String orderType) { Pizza pizza = null; System.out.println(\\\"使用简单工厂模式\\\"); if (orderType.equals(\\\"greek\\\")) { pizza = new GreekPizza(); pizza.setName(\\\" 希腊披萨 \\\"); } else if (orderType.equals(\\\"cheese\\\")) { pizza = new CheesePizza(); pizza.setName(\\\" 奶酪披萨 \\\"); } return pizza; } // 方法二：利用方法代替 if-else，虽然也违反了 OCP 原则，但是为了迎合 OCP 原则，会花费大量的代价 public Pizza getGreekPizza() { Pizza pizza = new GreekPizza(); pizza.setName(\\\" 希腊披萨 \\\"); return pizza; } public Pizza getCheesePizza() { Pizza pizza = new CheesePizza(); pizza.setName(\\\" 奶酪披萨 \\\"); return pizza; } // 简单工厂模式 也叫 静态工厂模式（全部替换成 static 即可） public static Pizza createPizza2(String orderType) { Pizza pizza = null; System.out.println(\\\"使用简单工厂模式2\\\"); if (orderType.equals(\\\"greek\\\")) { pizza = new GreekPizza(); pizza.setName(\\\" 希腊披萨 \\\"); } else if (orderType.equals(\\\"cheese\\\")) { pizza = new CheesePizza(); pizza.setName(\\\" 奶酪披萨 \\\"); } return pizza; } } \"},\"1213\":{\"t\":\"此时的 OrderPizza.java 文件也要修改：\"},\"1214\":{\"t\":\"public class OrderPizza { public static void main(String[] args) { SimpleFactory simpleFactory = new SimpleFactory(); Pizza pizza = simpleFactory.createPizza(\\\"greek\\\"); // Pizza pizza = SimpleFactory.createPizza(\\\"greek\\\"); // 静态工厂模式 System.out.println(pizza.getName); } } \"},\"1215\":{\"t\":\"简单工厂模式虽然违反了 OCP 原则，但是花费的代价非常小，所以经常被使用。\"},\"1216\":{\"h\":\"工厂方法（Factory Method）\",\"a\":\"工厂方法-factory-method\"},\"1217\":{\"h\":\"工厂方法模式介绍\",\"a\":\"工厂方法模式介绍\"},\"1218\":{\"t\":\"工厂方法模式 是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。\"},\"1219\":{\"t\":\"主要优点\"},\"1220\":{\"t\":\"用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程\"},\"1221\":{\"t\":\"灵活性增强，对于新产品的创建，只需多写一个相应的工厂类\"},\"1222\":{\"t\":\"典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则\"},\"1223\":{\"t\":\"主要缺点\"},\"1224\":{\"t\":\"类的个数容易过多，增加复杂度\"},\"1225\":{\"t\":\"增加了系统的抽象性和理解难度\"},\"1226\":{\"t\":\"抽象产品只能生产一种产品，此弊端可使用 抽象工厂模式 解决\"},\"1227\":{\"t\":\"工厂方法模式：定义了一个创建对象的抽象方法，由 子类决定要实例化的类。工厂方法模式将 对象的实例化推迟到子类。\"},\"1228\":{\"t\":\"主要角色\"},\"1229\":{\"t\":\"抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品\"},\"1230\":{\"t\":\"具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建\"},\"1231\":{\"t\":\"抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能\"},\"1232\":{\"t\":\"具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应\"},\"1233\":{\"t\":\"其结构图如下所示：\"},\"1234\":{\"t\":\"image-20220326222947461\"},\"1235\":{\"h\":\"工厂方法模式完成案例\",\"a\":\"工厂方法模式完成案例\"},\"1236\":{\"t\":\"披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如北京的奶酪 pizza、北京的胡椒 pizza 或者是伦敦的奶酪 pizza、伦敦的胡椒 pizza。\"},\"1237\":{\"t\":\"思路 1\"},\"1238\":{\"t\":\"使用简单工厂模式，创建不同的简单工厂类，比如 BJPizzaSimpleFactory、LDPizzaSimpleFactory 等等。从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可扩展性并不是特别好。\"},\"1239\":{\"t\":\"思路 2\"},\"1240\":{\"t\":\"使用工厂模式。\"},\"1241\":{\"t\":\"工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。\"},\"1242\":{\"t\":\"思路分析图解\"},\"1243\":{\"t\":\"image-20220227140635359\"},\"1244\":{\"t\":\"代码实现\"},\"1245\":{\"t\":\"披萨类代码：\"},\"1246\":{\"t\":\"// 将 Pizza 类做成抽象 public abstract class Pizza { protected String name; //名字 // 准备原材料, 不同的披萨不一样，因此，我们做成抽象方法 public abstract void prepare(); // 省略 setter、getter 方法 } class BJCheesePizza extends Pizza { @Override public void prepare() { setName(\\\"北京的奶酪 pizza\\\"); System.out.println(\\\" 北京的奶酪 pizza 准备原材料\\\"); } } class BJPepperPizza extends Pizza { @Override public void prepare() { setName(\\\"北京的胡椒 pizza\\\"); System.out.println(\\\" 北京的胡椒 pizza 准备原材料\\\"); } } class LDCheesePizza extends Pizza{ @Override public void prepare() { setName(\\\"伦敦的奶酪 pizza\\\"); System.out.println(\\\" 伦敦的奶酪 pizza 准备原材料\\\"); } } class LDPepperPizza extends Pizza{ @Override public void prepare() { setName(\\\"伦敦的奶酪 pizza\\\"); System.out.println(\\\" 伦敦的奶酪 pizza 准备原材料\\\"); } } \"},\"1247\":{\"t\":\"工厂方法模式代码：\"},\"1248\":{\"t\":\"public abstract class OrderPizzaFactory { // 定义一个抽象方法，createPizza，让各个工厂子类自己实现 abstract Pizza createPizza(String orderType); // 构造器 public OrderPizza(String orderType) { Pizza pizza = null; pizza = createPizza(orderType); // 抽象方法，由工厂子类完成 } } \"},\"1249\":{\"t\":\"由工厂方法模式创建的子类：\"},\"1250\":{\"t\":\"public class PizzaStore { public static void main(String[] args) { // 创建北京口味的各种 Pizza BJOrderPizzaFactory bJOrderPizzaFactory = new BJOrderPizzaFactory(); Pizza pizza1 = bJOrderPizzaFactory.createPizza(\\\"cheese\\\"); Pizza pizza2= bJOrderPizzaFactory.createPizza(\\\"pepper\\\"); System.out.print(pizza1.getName()); System.out.print(pizza2.getName()); // 创建伦敦口味的各种 Pizza LDOrderPizzaFactory lDOrderPizzaFactory = new LDOrderPizzaFactory(); Pizza pizza3 = lDOrderPizzaFactory.createPizza(\\\"cheese\\\"); Pizza pizza4 = lDOrderPizzaFactory.createPizza(\\\"pepper\\\"); System.out.print(pizza3.getName()); System.out.print(pizza4.getName()); } } class BJOrderPizzaFactory extends OrderPizzaFactory { @Override Pizza createPizza(String orderType) { Pizza pizza = null; if(orderType.equals(\\\"cheese\\\")) { pizza = new BJCheesePizza(); } else if (orderType.equals(\\\"pepper\\\")) { pizza = new BJPepperPizza(); } return pizza; } } class LDOrderPizzaFactory extends OrderPizzaFactory { @Override Pizza createPizza(String orderType) { Pizza pizza = null; if(orderType.equals(\\\"cheese\\\")) { pizza = new LDCheesePizza(); } else if (orderType.equals(\\\"pepper\\\")) { pizza = new LDPepperPizza(); } return pizza; } } \"},\"1251\":{\"t\":\"如果新增一个新的类如希腊披萨，则只需要新增两个类：希腊披萨类（继承 Pizza 类）、希腊披萨工厂类（继承 OrderPizzaFactory）。不会修改其他的代码，满足了 OCP 开闭原则，但是相比较简单工厂模式，花费的代码比较高。\"},\"1252\":{\"h\":\"什么时候该用工厂方法模式，而非简单工厂模式呢？\",\"a\":\"什么时候该用工厂方法模式-而非简单工厂模式呢\"},\"1253\":{\"t\":\"之所以将某个代码块剥离出来，独立为函数或者类，原因是这个代码块的逻辑过于复杂，剥离之后能让代码更加清晰，更加可读、可维护。但是，如果代码块本身并不复杂，就几行代码而已，我们完全没必要将它拆分成单独的函数或者类。\"},\"1254\":{\"t\":\"基于这个设计思想，当对象的创建逻辑比较复杂，不只是简单的 new 一下就可以，而是要组合其他类对象，做各种初始化操作的时候，我们推荐使用工厂方法模式，将复杂的创建逻辑拆分到多个工厂类中，让每个工厂类都不至于过于复杂。而使用简单工厂模式，将所有的创建逻辑都放到一个工厂类中，会导致这个工厂类变得很复杂。\"},\"1255\":{\"t\":\"除此之外，在某些场景下，如果对象不可复用，那工厂类 每次都要返回不同的对象。如果我们使用简单工厂模式来实现，就只能选择第一种包含 if 分支逻辑的实现方式。如果我们还想避免烦人的 if-else 分支逻辑，这个时候，我们就推荐使用工厂方法模式。\"},\"1256\":{\"t\":\"工厂方法模式可以理解为在多个简单工厂模式（子工厂）的基础上再创建一个大的工厂，统一管理多个子工厂。\"},\"1257\":{\"t\":\"复杂度\"},\"1258\":{\"t\":\"优势模式\"},\"1259\":{\"t\":\"结构复杂度\"},\"1260\":{\"t\":\"简单工厂模式\"},\"1261\":{\"t\":\"代码复杂度\"},\"1262\":{\"t\":\"简单工厂模式\"},\"1263\":{\"t\":\"编程复杂度\"},\"1264\":{\"t\":\"简单工厂模式\"},\"1265\":{\"t\":\"管理复杂度\"},\"1266\":{\"t\":\"简单工厂模式\"},\"1267\":{\"t\":\"根据实际业务\"},\"1268\":{\"t\":\"简单工厂模式\"},\"1269\":{\"t\":\"根据设计原则\"},\"1270\":{\"t\":\"工厂方法模式\"},\"1271\":{\"t\":\"应用场景：\"},\"1272\":{\"t\":\"客户只知道创建产品的工厂名，而不知道具体的产品名。如 TCL 电视工厂、海信电视工厂等\"},\"1273\":{\"t\":\"创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口\"},\"1274\":{\"t\":\"客户不关心创建产品的细节，只关心产品的品牌\"},\"1275\":{\"h\":\"抽象工厂（Abstract Factory）\",\"a\":\"抽象工厂-abstract-factory\"},\"1276\":{\"h\":\"基本介绍\",\"a\":\"基本介绍\"},\"1277\":{\"t\":\"抽象工厂模式：定义了一个 interface 用于创建相关或有依赖关系的对象簇，而无需指明具体的类\"},\"1278\":{\"t\":\"抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合，是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品\"},\"1279\":{\"t\":\"从设计层面看，抽象工厂模式就是对简单工厂模式的改进（或者称为进一步的抽象）\"},\"1280\":{\"t\":\"将工厂抽象成两层，AbsFactory（抽象工厂）和具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了 工厂簇，更利于代码的维护和扩展\"},\"1281\":{\"t\":\"优点\"},\"1282\":{\"t\":\"除了具有工厂方法模式的优点外，还有：\"},\"1283\":{\"t\":\"可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。\"},\"1284\":{\"t\":\"当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品组。\"},\"1285\":{\"t\":\"抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。\"},\"1286\":{\"t\":\"主要缺点\"},\"1287\":{\"t\":\"当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。\"},\"1288\":{\"t\":\"主要角色\"},\"1289\":{\"t\":\"抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品\"},\"1290\":{\"t\":\"具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建\"},\"1291\":{\"t\":\"抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品\"},\"1292\":{\"t\":\"具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系\"},\"1293\":{\"t\":\"抽象工厂结构图：\"},\"1294\":{\"t\":\"image-20220326223223254\"},\"1295\":{\"t\":\"上面的披萨案例抽象工厂类图：\"},\"1296\":{\"t\":\"image-20220227141801967\"},\"1297\":{\"h\":\"抽象工厂模式应用实例\",\"a\":\"抽象工厂模式应用实例\"},\"1298\":{\"t\":\"换个案例：生产小米手机、小米路由器；华为手机、华为路由器。\"},\"1299\":{\"t\":\"image-20220301171914376\"},\"1300\":{\"t\":\"小米手机和华为手机称为 产品线，小米手机和小米路由器称为 产品簇。\"},\"1301\":{\"t\":\"首先创建手机和路由器的接口类：（为了方便，放在一个代码块里）\"},\"1302\":{\"t\":\"// 手机接口 public interface IPhoneProduct { void start(); void shutdown(); void sendMes(); void call(); } // 路由器接口 public interface IRouterProduct { void start(); void shutdown(); void setting(); void link(); } \"},\"1303\":{\"t\":\"创建小米和华为的手机：（为了方便，放在一个代码块里）\"},\"1304\":{\"t\":\"// 小米手机 public class XiaoMiPhone implements IPhoneProduct { @Override public void start() { System.out.println(\\\"打开小米手机\\\"); } @Override public void shutdown() { System.out.println(\\\"关闭小米手机\\\"); } @Override public void sendMes() { System.out.println(\\\"小米手机发送消息\\\"); } @Override public void call() { System.out.println(\\\"小米手机打电话\\\"); } } // 华为手机 public class HuaWeiPhone implements IPhoneProduct{ @Override public void start() { System.out.println(\\\"打开华为手机\\\"); } @Override public void shutdown() { System.out.println(\\\"关闭华为手机\\\"); } @Override public void sendMes() { System.out.println(\\\"华为手机发送消息\\\"); } @Override public void call() { System.out.println(\\\"华为手机打电话\\\"); } } \"},\"1305\":{\"t\":\"创建小米和华为的路由器：（为了方便，放在一个代码块里）\"},\"1306\":{\"t\":\"// 小米路由器 public class XiaoMiRouter implements IRouterProduct{ @Override public void start() { System.out.println(\\\"打开小米路由器\\\"); } @Override public void shutdown() { System.out.println(\\\"关闭小米路由器\\\"); } @Override public void setting() { System.out.println(\\\"设置小米路由器\\\"); } @Override public void link() { System.out.println(\\\"连接小米路由器\\\"); } } // 华为路由器 public class HuaWeiMiRouter implements IRouterProduct{ @Override public void start() { System.out.println(\\\"打开华为路由器\\\"); } @Override public void shutdown() { System.out.println(\\\"关闭华为路由器\\\"); } @Override public void setting() { System.out.println(\\\"设置华为路由器\\\"); } @Override public void link() { System.out.println(\\\"连接华为路由器\\\"); } } \"},\"1307\":{\"t\":\"创建抽象工厂和子工厂（小米工厂、华为工厂）（为了方便，放在一个代码块里）\"},\"1308\":{\"t\":\"// 抽象工厂 public interface IProductFactory { IPhoneProduct phoneProduct(); IRouterProduct routerProduct(); } // 小米工厂 public class XiaoMiFactory implements IProductFactory{ @Override public IPhoneProduct phoneProduct() { return new XiaoMiPhone(); } @Override public IRouterProduct routerProduct() { return new XiaoMiRouter(); } } // 华为工厂 public class HuaWeiFactory implements IProductFactory{ @Override public IPhoneProduct phoneProduct() { return new HuaWeiPhone(); } @Override public IRouterProduct routerProduct() { return new HuaWeiMiRouter(); } } \"},\"1309\":{\"t\":\"测试抽象工厂模式：\"},\"1310\":{\"t\":\"public class Client { public static void main(String[] args) { System.out.println(\\\"-------------- 小米系列工厂 --------------\\\"); XiaoMiFactory xiaoMiFactory = new XiaoMiFactory(); IPhoneProduct iPhoneProduct = xiaoMiFactory.phoneProduct(); iPhoneProduct.start(); iPhoneProduct.call(); iPhoneProduct.sendMes(); iPhoneProduct.shutdown(); IRouterProduct iRouterProduct = xiaoMiFactory.routerProduct(); iRouterProduct.start(); iRouterProduct.link(); iRouterProduct.shutdown(); iRouterProduct.setting(); System.out.println(\\\"-------------- 华为系列工厂 --------------\\\"); HuaWeiFactory huaWeiFactory = new HuaWeiFactory(); IPhoneProduct iPhoneProduct1 = huaWeiFactory.phoneProduct(); iPhoneProduct1.start(); iPhoneProduct1.call(); iPhoneProduct1.sendMes(); iPhoneProduct1.shutdown(); IRouterProduct iRouterProduct1 = huaWeiFactory.routerProduct(); iRouterProduct1.start(); iRouterProduct1.link(); iRouterProduct1.shutdown(); iRouterProduct1.setting(); } } \"},\"1311\":{\"h\":\"工厂模式在 JDK-Calendar 应用的源码分析\",\"a\":\"工厂模式在-jdk-calendar-应用的源码分析\"},\"1312\":{\"t\":\"JDK 中的 Calendar 类中，就使用了简单工厂模式。\"},\"1313\":{\"t\":\"public class Factory { public static void main(String[] args) { // getInstance 是 Calendar 静态方法 Calendar cal = Calendar.getInstance(); // 注意月份下标从 0 开始，所以取月份要+1 System.out.println(\\\"年:\\\" + cal.get(Calendar.YEAR)); System.out.println(\\\"月:\\\" + (cal.get(Calendar.MONTH) + 1)); System.out.println(\\\"日:\\\" + cal.get(Calendar.DAY_OF_MONTH)); System.out.println(\\\"时:\\\" + cal.get(Calendar.HOUR_OF_DAY)); System.out.println(\\\"分:\\\" + cal.get(Calendar.MINUTE)); System.out.println(\\\"秒:\\\" + cal.get(Calendar.SECOND)); } } \"},\"1314\":{\"t\":\"Calendar.java\"},\"1315\":{\"t\":\"public class Calendar { public static Calendar getInstance() { return createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT)); } private static Calendar createCalendar(TimeZone zone,Locale aLocale) { // 根据 TimeZone zone, locale 创建对应的实例 CalendarProvider provider = LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale) .getCalendarProvider(); if (provider != null) { try { return provider.getInstance(zone, aLocale); } catch (IllegalArgumentException iae) { // fall back to the default instantiation } } Calendar cal = null; if (aLocale.hasExtensions()) { String caltype = aLocale.getUnicodeLocaleType(\\\"ca\\\"); if (caltype != null) { switch (caltype) { case \\\"buddhist\\\": cal = new BuddhistCalendar(zone, aLocale); break; case \\\"japanese\\\": cal = new JapaneseImperialCalendar(zone, aLocale); break; case \\\"gregory\\\": cal = new GregorianCalendar(zone, aLocale); break; } } } if (cal == null) { // If no known calendar type is explicitly specified // perform the traditional way to create a Calendar: // create a BuddhistCalendar for th_TH locale // a JapaneseImperialCalendar for ja_JP_JP locale, or // a GregorianCalendar for any other locales // NOTE: The language, country and variant strings are interned. if (aLocale.getLanguage() == \\\"th\\\" && aLocale.getCountry() == \\\"TH\\\") { cal = new BuddhistCalendar(zone, aLocale); } else if (aLocale.getVariant() == \\\"JP\\\" && aLocale.getLanguage() == \\\"ja\\\" && aLocale.getCountry() == \\\"JP\\\") { cal = new JapaneseImperialCalendar(zone, aLocale); } else { cal = new GregorianCalendar(zone, aLocale); } } return cal; } } \"},\"1316\":{\"h\":\"工厂模式小结\",\"a\":\"工厂模式小结\"},\"1317\":{\"t\":\"工厂模式的意义将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性\"},\"1318\":{\"t\":\"三种工厂模式 (简单工厂模式、工厂方法模式、抽象工厂模式）\"},\"1319\":{\"t\":\"设计模式的依赖抽象原则 \"},\"1320\":{\"t\":\"创建对象实例时，不要直接 new 类, 而是把这个 new 类的动作放在一个工厂的方法中，并返回。有的书上说，变量不要直接持有具体类的引用\"},\"1321\":{\"t\":\"不要让类继承具体类，而是继承抽象类或者是实现 interface（接口）\"},\"1322\":{\"t\":\"不要覆盖基类中已经实现的方法\"},\"1323\":{\"h\":\"如何设计实现一个Dependency Injection框架\",\"a\":\"如何设计实现一个dependency-injection框架\"},\"1324\":{\"t\":\"当创建对象是一个「大工程」的时候，我们一般会选择使用工厂模式，来封装对象复杂的创建过程，将对象的创建和使用分离，让代码更加清晰。那何为「大工程」呢？上面我们讲了两种情况，一种是创建过程涉及复杂的 if-else 分支判断，另一种是对象创建需要组装多个其他类对象或者需要复杂的初始化过程。\"},\"1325\":{\"t\":\"我们来学习一个创建对象的「大工程」，依赖注入框架，或者叫依赖注入容器（Dependency Injection Container），简称 DI 容器。在今天的讲解中，我会带你一块搞清楚这样几个问题：DI 容器跟我们讲的工厂模式又有何区别和联系？DI 容器的核心功能有哪些，以及如何实现一个简单的 DI 容器？\"},\"1326\":{\"h\":\"工厂模式和 DI 容器有何区别\",\"a\":\"工厂模式和-di-容器有何区别\"},\"1327\":{\"t\":\"实际上，DI 容器底层最基本的设计思路就是基于工厂模式的。DI 容器相当于一个大的工厂类，负责在程序启动的时候，根据配置（要创建哪些类对象，每个类对象的创建需要依赖哪些其他类对象）事先创建好对象。当应用程序需要使用某个类对象的时候，直接从容器中获取即可。正是因为它持有一堆对象，所以这个框架才被称为「容器」。\"},\"1328\":{\"t\":\"DI 容器相对于我们上面讲的工厂模式的例子来说，它处理的是更大的对象创建工程。上面讲的工厂模式中，一个工厂类只负责某个类对象或者某一组相关类对象（继承自同一抽象类或者接口的子类）的创建，而 DI 容器负责的是整个应用中所有类对象的创建。\"},\"1329\":{\"t\":\"除此之外，DI 容器负责的事情要比单纯的工厂模式要多。比如，它还包括配置的解析、对象生命周期的管理。接下来，我们就详细讲讲，一个简单的 DI 容器应该包含哪些核心功能。\"},\"1330\":{\"h\":\"DI 容器的核心功能有哪些\",\"a\":\"di-容器的核心功能有哪些\"},\"1331\":{\"t\":\"总结一下，一个简单的 DI 容器的核心功能一般有三个：配置解析、对象创建和对象生命周期管理。\"},\"1332\":{\"t\":\"首先，我们来看配置解析。\"},\"1333\":{\"t\":\"在上面讲的工厂模式中，工厂类要创建哪个类对象是事先确定好的，并且是写死在工厂类代码中的。作为一个通用的框架来说，框架代码跟应用代码应该是高度解耦的，DI 容器事先并不知道应用会创建哪些对象，不可能把某个应用要创建的对象写死在框架代码中。所以，我们需要通过一种形式，让应用告知 DI 容器要创建哪些对象。这种形式就是我们要讲的配置\"},\"1334\":{\"t\":\"我们将需要由 DI 容器来创建的类对象和创建类对象的必要信息（使用哪个构造函数以及对应的构造函数参数都是什么等等），放到配置文件中。容器读取配置文件，根据配置文件提供的信息来创建对象\"},\"1335\":{\"t\":\"下面是一个典型的 Spring 容器的配置文件。Spring 容器读取这个配置文件，解析出要创建的两个对象：rateLimiter 和 redisCounter，并且得到两者的依赖关系：rateLimiter 依赖 redisCounter\"},\"1336\":{\"t\":\"public class RateLimiter { private RedisCounter redisCounter; public RateLimiter(RedisCounter redisCounter) { this.redisCounter = redisCounter; } public void test() { System.out.println(\\\"Hello World!\\\"); } // ... } public class RedisCounter { private String ipAddress; private int port; public RedisCounter(String ipAddress, int port) { this.ipAddress = ipAddress; this.port = port; } // ... } \"},\"1337\":{\"t\":\"配置文件 beans.xml：\"},\"1338\":{\"t\":\"<beans> <bean id=\\\"rateLimiter\\\" class=\\\"cn.gavin.RateLimiter\\\"> <constructor-arg ref=\\\"redisCounter\\\"/> </bean> <bean id=\\\"redisCounter\\\" class=\\\"cn.gavin.redisCounter\\\"> <constructor-arg type=\\\"String\\\" value=\\\"127.0.0.1\\\"/> <constructor-arg type=\\\"int\\\" value=1234/> </bean> </beans> \"},\"1339\":{\"t\":\"其次，我们再来看对象创建。\"},\"1340\":{\"t\":\"在 DI 容器中，如果我们给每个类都对应创建一个工厂类，那项目中类的个数会成倍增加，这会增加代码的维护成本。要解决这个问题并不难。我们只需要将所有类对象的创建都放到一个工厂类中完成就可以了，比如 BeansFactory。\"},\"1341\":{\"t\":\"你可能会说，如果要创建的类对象非常多，BeansFactory 中的代码会不会线性膨胀（代码量跟创建对象的个数成正比）呢？实际上并不会。待会讲到 DI 容器的具体实现的时候，我们会讲「反射」这种机制，它能在程序运行的过程中，动态地加载类、创建对象，不需要事先在代码中写死要创建哪些对象。所以，不管是创建一个对象还是十个对象，BeansFactory 工厂类代码都是一样的。\"},\"1342\":{\"t\":\"最后，我们来看对象的生命周期管理。\"},\"1343\":{\"t\":\"上面我们讲到，简单工厂模式有两种实现方式，一种是每次都返回新创建的对象，另一种是每次都返回同一个事先创建好的对象，也就是所谓的单例对象。在 Spring 框架中，我们可以通过配置 scope 属性，来区分这两种不同类型的对象。scope=prototype 表示返回新创建的对象，scope=singleton 表示返回单例对象。\"},\"1344\":{\"t\":\"除此之外，我们还可以配置对象是否支持懒加载。如果 lazy-init=true，对象在真正被使用到的时候（比如：BeansFactory.getBean(\\\"userService\\\")）才被被创建；如果 lazy-init=false，对象在应用启动的时候就事先创建好。\"},\"1345\":{\"t\":\"不仅如此，我们还可以配置对象的 init-method 和 destroy-method 方法，比如 init-method=loadProperties()，destroy-method=updateConfigFile()。DI 容器在创建好对象之后，会主动调用 init-method 属性指定的方法来初始化对象。在对象被最终销毁之前，DI 容器会主动调用 destroy-method 属性指定的方法来做一些清理工作，比如释放数据库连接池、关闭文件。\"},\"1346\":{\"h\":\"如何实现一个简单的 DI 容器？\",\"a\":\"如何实现一个简单的-di-容器\"},\"1347\":{\"t\":\"用 Java 语言来实现一个简单的 DI 容器，核心逻辑只需要包括这样两个部分：配置文件解析、根据配置文件通过「反射」语法来创建对象。\"},\"1348\":{\"h\":\"最小原型设计\",\"a\":\"最小原型设计\"},\"1349\":{\"t\":\"因为我们主要是讲解设计模式，所以，在今天的讲解中，我们只实现一个 DI 容器的最小原型。像 Spring 框架这样的 DI 容器，它支持的配置格式非常灵活和复杂。为了简化代码实现，重点讲解原理，在最小原型中，我们只支持下面配置文件中涉及的配置语法。\"},\"1350\":{\"t\":\"配置文件 beans.xml\"},\"1351\":{\"t\":\"<beans> <bean id=\\\"rateLimiter\\\" class=\\\"cn.gavin.RateLimiter\\\"> <constructor-arg ref=\\\"redisCounter\\\"/> </bean> <bean id=\\\"redisCounter\\\" class=\\\"cn.gavin.redisCounter\\\" scope=\\\"singleton\\\" lazy-init=\\\"true\\\"> <constructor-arg type=\\\"String\\\" value=\\\"127.0.0.1\\\"/> <constructor-arg type=\\\"int\\\" value=1234/> </bean> </beans> \"},\"1352\":{\"t\":\"最小原型的使用方式跟 Spring 框架非常类似，示例代码如下所示：\"},\"1353\":{\"t\":\"public class Demo { public static void main(String[] args) { ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"beans.xml\\\"); RateLimiter rateLimiter = (RateLimiter) applicationContext.getBean(\\\"rateLimiter\\\"); rateLimiter.test(); // ... } } \"},\"1354\":{\"h\":\"提供执行入口\",\"a\":\"提供执行入口\"},\"1355\":{\"t\":\"面向对象设计的最后一步是：组装类并提供执行入口。在这里，执行入口就是一组暴露给外部使用的接口和类。通过刚刚的最小原型使用示例代码，我们可以看出，执行入口主要包含两部分：ApplicationContext 和 ClassPathXmlApplicationContext。其中 ApplicationContext 是接口，ClassPathXmlApplicationContext 是接口的实现类。两个类具体实现如下所示：\"},\"1356\":{\"t\":\"public interface ApplicationContext { Object getBean(String beanId); } public class ClassPathXmlApplicationContext implements ApplicationContext { private BeansFactory beansFactory; private BeanConfigParser beanConfigParser; public ClassPathXmlApplicationContext(String configLocation) { this.beansFactory = new BeansFactory(); this.beanConfigParser = new XmlBeanConfigParser(); loadBeanDefinitions(configLocation); } private void loadBeanDefinitions(String configLocation) { InputStream in = null; try { in = this.getClass().getResourceAsStream(\\\"/\\\" + configLocation); if (in == null) { throw new RuntimeException(\\\"Can not find config file: \\\" + configLocation); } List<BeanDefinition> beanDefinitions = beanConfigParser.parse(in); beansFactory.addBeanDefinitions(beanDefinitions); } finally { if (in != null) { try { in.close(); } catch (IOException e) { // TODO: log error } } } } @Override public Object getBean(String beanId) { return beansFactory.getBean(beanId); } } \"},\"1357\":{\"t\":\"从上面的代码中，我们可以看出，ClassPathXmlApplicationContext 负责组装 BeansFactory 和 BeanConfigParser 两个类，串联执行流程：从 classpath 中加载 XML 格式的配置文件，通过 BeanConfigParser 解析为统一的 BeanDefinition 格式，然后，BeansFactory 根据 BeanDefinition 来创建对象。\"},\"1358\":{\"h\":\"配置文件解析\",\"a\":\"配置文件解析\"},\"1359\":{\"t\":\"配置文件解析主要包含 BeanConfigParser 接口和 XmlBeanConfigParser 实现类，负责将配置文件解析为 BeanDefinition 结构，以便 BeansFactory 根据这个结构来创建对象。配置文件的解析比较繁琐，不涉及我们要讲的理论知识，不是我们讲解的重点，所以这里我只给出两个类的大致设计思路，并未给出具体的实现代码。如果感兴趣的话，你可以自行补充完整。具体的代码框架如下所示：\"},\"1360\":{\"t\":\"public interface BeanConfigParser { List<BeanDefinition> parse(InputStream inputStream); List<BeanDefinition> parse(String configContent); } public class XmlBeanConfigParser implements BeanConfigParser { @Override public List<BeanDefinition> parse(InputStream inputStream) { String content = null; // TODO:... return parse(content); } @Override public List<BeanDefinition> parse(String configContent) { List<BeanDefinition> beanDefinitions = new ArrayList<>(); // TODO:... return beanDefinitions; } } public class BeanDefinition { private String id; private String className; private List<ConstructorArg> constructorArgs = new ArrayList<>(); private Scope scope = Scope.SINGLETON; private boolean lazyInit = false; // 省略必要的 getter/setter/constructors public boolean isSingleton() { return scope.equals(Scope.SINGLETON); } public static enum Scope { SINGLETON, PROTOTYPE } public static class ConstructorArg { private boolean isRef; private Class type; private Object arg; // 省略必要的 getter/setter/constructors } } \"},\"1361\":{\"h\":\"核心工厂类设计\",\"a\":\"核心工厂类设计\"},\"1362\":{\"t\":\"最后，我们来看，BeansFactory 是如何设计和实现的。这也是我们这个 DI 容器最核心的一个类了。它负责根据从配置文件解析得到的 BeanDefinition 来创建对象\"},\"1363\":{\"t\":\"如果对象的 scope 属性是 singleton，那对象创建之后会缓存在 singletonObjects 这样一个 map 中，下次再请求此对象的时候，直接从 map 中取出返回，不需要重新创建。如果对象的 scope 属性是 prototype，那每次请求对象，BeansFactory 都会创建一个新的对象返回\"},\"1364\":{\"t\":\"实际上，BeansFactory 创建对象用到的主要技术点就是 Java 中的反射语法：一种动态加载类和创建对象的机制。我们知道，JVM 在启动的时候会根据代码自动地加载类、创建对象。至于都要加载哪些类、创建哪些对象，这些都是在代码中写死的，或者说提前写好的。但是，如果某个对象的创建并不是写死在代码中，而是放到配置文件中，我们需要在程序运行期间，动态地根据配置文件来加载类、创建对象，那这部分工作就没法让 JVM 帮我们自动完成了，我们需要利用 Java 提供的反射语法自己去编写代码\"},\"1365\":{\"t\":\"搞清楚了反射的原理，BeansFactory 的代码就不难看懂了。具体代码实现如下所示：\"},\"1366\":{\"t\":\"public class BeansFactory { private ConcurrentHashMap<String, Object> singletonObjects = new ConcurrentHashMap<>(); private ConcurrentHashMap<String, BeanDefinition> beanDefinitions = new ConcurrentHashMap<>(); public void addBeanDefinitions(List<BeanDefinition> beanDefinitionList) { for (BeanDefinition beanDefinition : beanDefinitionList) { this.beanDefinitions.putIfAbsent(beanDefinition.getId(), beanDefinition); } for (BeanDefinition beanDefinition : beanDefinitionList) { if (beanDefinition.isLazyInit() == false && beanDefinition.isSingleton()) { createBean(beanDefinition); } } } public Object getBean(String beanId) { BeanDefinition beanDefinition = beanDefinitions.get(beanId); if (beanDefinition == null) { throw new NoSuchBeanDefinitionException(\\\"Bean is not defined: \\\" + beanId); } return createBean(beanDefinition); } @VisibleForTesting protected Object createBean(BeanDefinition beanDefinition) { if (beanDefinition.isSingleton() && singletonObjects.contains(beanDefinition.getId())) { return singletonObjects.get(beanDefinition.getId()); } Object bean = null; try { Class beanClass = Class.forName(beanDefinition.getClassName()); List<BeanDefinition.ConstructorArg> args = beanDefinition.getConstructorArgs(); if (args.isEmpty()) { bean = beanClass.newInstance(); } else { Class[] argClasses = new Class[args.size()]; Object[] argObjects = new Object[args.size()]; for (int i = 0; i < args.size(); ++i) { BeanDefinition.ConstructorArg arg = args.get(i); if (!arg.getIsRef()) { argClasses[i] = arg.getType(); argObjects[i] = arg.getArg(); } else { BeanDefinition refBeanDefinition = beanDefinitions.get(arg.getArg()); if (refBeanDefinition == null) { throw new NoSuchBeanDefinitionException(\\\"Bean is not defined: \\\" + arg.getArg()); } argClasses[i] = Class.forName(refBeanDefinition.getClassName()); argObjects[i] = createBean(refBeanDefinition); } } bean = beanClass.getConstructor(argClasses).newInstance(argObjects); } } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) { throw new BeanCreationFailureException(\\\"\\\", e); } if (bean != null && beanDefinition.isSingleton()) { singletonObjects.putIfAbsent(beanDefinition.getId(), bean); return singletonObjects.get(beanDefinition.getId()); } return bean; } } \"},\"1367\":{\"t\":\"执行入口那里调用 addBeanDefinitions\"},\"1368\":{\"t\":\"然后 addBeanDefinitions 再调用 createBean 利用反射创建对象，如果对象的 scope 属性是 singleton，那对象创建之后会缓存在 singletonObjects 这样一个 Map 中\"},\"1369\":{\"t\":\"最后最小原型设计那里再调用 getBean从singletonObjects 获取对象\"},\"1370\":{\"h\":\"结构型享元模式\"},\"1371\":{\"h\":\"享元模式基本介绍\",\"a\":\"享元模式基本介绍\"},\"1372\":{\"t\":\"在面向对象程序设计过程中，有时会面临要创建大量相同或相似对象实例的问题。创建那么多的对象将会耗费很多的系统资源，它是系统性能提高的一个瓶颈。\"},\"1373\":{\"t\":\"例如，围棋和五子棋中的黑白棋子，图像中的坐标点或颜色，局域网中的路由器、交换机和集线器，教室里的桌子和凳子等。这些对象有很多相似的地方，如果能把它们相同的部分提取出来共享，则能节省大量的系统资源，这就是享元模式的产生背景。\"},\"1374\":{\"t\":\"享元模式（Flyweight Pattern） 也叫 蝇量模式: 运用共享技术有效地支持大量细粒度的对象。\"},\"1375\":{\"t\":\"常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个。\"},\"1376\":{\"t\":\"享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时。不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率。\"},\"1377\":{\"t\":\"享元模式经典的应用场景就是池技术了，String 常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式。\"},\"1378\":{\"t\":\"主要优点\"},\"1379\":{\"t\":\"相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。\"},\"1380\":{\"t\":\"主要缺点\"},\"1381\":{\"t\":\"为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。\"},\"1382\":{\"t\":\"读取享元模式的外部状态会使得运行时间稍微变长\"},\"1383\":{\"h\":\"享元模式的结构与实现\",\"a\":\"享元模式的结构与实现\"},\"1384\":{\"h\":\"内部状态和外部状态\",\"a\":\"内部状态和外部状态\"},\"1385\":{\"t\":\"比如围棋、五子棋、跳棋，它们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点，所以棋子颜色就是棋子的内部状态；而各个棋子之间的差别就是位置的不同，当我们落子后，落子颜色是定的，但位置是变化的，所以棋子坐标就是棋子的外部状态。\"},\"1386\":{\"t\":\"享元模式的定义提出了两个要求，细粒度和共享对象。因为要求细粒度，所以不可避免地会使对象数量多且性质相近，此时我们就将这些对象的信息分为两个部分：内部状态和外部状态。\"},\"1387\":{\"t\":\"内部状态指对象共享出来的信息，存储在享元信息内部，并且不会随环境的改变而改变\"},\"1388\":{\"t\":\"外部状态指对象得以依赖的一个标记，随环境的改变而改变，不可共享 比如，连接池中的连接对象，保存在连接对象中的用户名、密码、连接 URL 等信息，在创建对象的时候就设置好了，不会随环境的改变而改变，这些为内部状态。而当每个连接要被回收利用时，我们需要将它标记为可用状态，这些为外部状态\"},\"1389\":{\"t\":\"举个例子：围棋理论上有 361 个空位可以放棋子，每盘棋都有可能有两三百个棋子对象产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解决了对象的开销问题。\"},\"1390\":{\"t\":\"享元模式的本质是缓存共享对象，降低内存消耗。\"},\"1391\":{\"h\":\"模式的结构\",\"a\":\"模式的结构\"},\"1392\":{\"t\":\"享元模式的主要角色有如下：\"},\"1393\":{\"t\":\"抽象享元角色（Flyweight）：是所有的具体享元类的基类，为具体享元规范需要实现的公共接口，非享元的外部状态以参数的形式通过方法传入\"},\"1394\":{\"t\":\"具体享元（Concrete Flyweight）角色：实现抽象享元角色中所规定的接口\"},\"1395\":{\"t\":\"非享元（Unsharable Flyweight)角色：是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中\"},\"1396\":{\"t\":\"享元工厂（Flyweight Factory）角色：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象\"},\"1397\":{\"t\":\"image-20220314190648003\"},\"1398\":{\"t\":\"下面享元模式的结构图，其中：\"},\"1399\":{\"t\":\"UnsharedConcreteFlyweight 是非享元角色，里面包含了非共享的外部状态信息 info\"},\"1400\":{\"t\":\"Flyweight 是抽象享元角色，里面包含了享元方法 operation(UnsharedConcreteFlyweight state)，非享元的外部状态以参数的形式通过该方法传入\"},\"1401\":{\"t\":\"ConcreteFlyweight 是具体享元角色，包含了关键字 key，它实现了抽象享元接口\"},\"1402\":{\"t\":\"FlyweightFactory 是享元工厂角色，它是关键字 key 来管理具体享元\"},\"1403\":{\"t\":\"客户角色通过享元工厂获取具体享元，并访问具体享元的相关方法\"},\"1404\":{\"t\":\"image-20220314190636066\"},\"1405\":{\"t\":\"代码实现：\"},\"1406\":{\"t\":\"// 抽象享元角色 interface Flyweight { public void operation(UnsharedConcreteFlyweight state); } // 具体享元角色 class ConcreteFlyweight implements Flyweight { private String key; ConcreteFlyweight(String key) { this.key = key; System.out.println(\\\"具体享元\\\" + key + \\\"被创建！\\\"); } public void operation(UnsharedConcreteFlyweight outState) { System.out.print(\\\"具体享元\\\" + key + \\\"被调用，\\\"); System.out.println(\\\"非享元信息是:\\\" + outState.getInfo()); } } // 非享元角色 class UnsharedConcreteFlyweight { private String info; UnsharedConcreteFlyweight(String info) { this.info = info; } public String getInfo() { return info; } public void setInfo(String info) { this.info = info; } } // 享元工厂角色 class FlyweightFactory { private HashMap<String, Flyweight> flyweights = new HashMap<String, Flyweight>(); public Flyweight getFlyweight(String key) { Flyweight flyweight = (Flyweight) flyweights.get(key); if (flyweight != null) { System.out.println(\\\"具体享元\\\" + key + \\\"已经存在，被成功获取！\\\"); } else { flyweight = new ConcreteFlyweight(key); flyweights.put(key, flyweight); } return flyweight; } } public class FlyweightPattern { public static void main(String[] args) { FlyweightFactory factory = new FlyweightFactory(); Flyweight f01 = factory.getFlyweight(\\\"a\\\"); // 初始 a 不存在，则创建 a Flyweight f02 = factory.getFlyweight(\\\"a\\\"); // 获取第一次创建的 a Flyweight f03 = factory.getFlyweight(\\\"a\\\"); // 获取第一次创建的 a Flyweight f11 = factory.getFlyweight(\\\"b\\\"); // 初始 b 不存在，则创建 b Flyweight f12 = factory.getFlyweight(\\\"b\\\"); // 获取第一次创建的 b f01.operation(new UnsharedConcreteFlyweight(\\\"第1次调用a。\\\")); f02.operation(new UnsharedConcreteFlyweight(\\\"第2次调用a。\\\")); f03.operation(new UnsharedConcreteFlyweight(\\\"第3次调用a。\\\")); f11.operation(new UnsharedConcreteFlyweight(\\\"第1次调用b。\\\")); f12.operation(new UnsharedConcreteFlyweight(\\\"第2次调用b。\\\")); } } \"},\"1407\":{\"h\":\"展示网站项目需求\",\"a\":\"展示网站项目需求\"},\"1408\":{\"t\":\"小型的外包项目，给客户 A 做一个产品展示网站，客户 A 的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同：\"},\"1409\":{\"t\":\"有客户要求以新闻的形式发布\"},\"1410\":{\"t\":\"有客户人要求以博客的形式发布\"},\"1411\":{\"t\":\"有客户希望以微信公众号的形式发布\"},\"1412\":{\"h\":\"传统方案解决网站展现项目\",\"a\":\"传统方案解决网站展现项目\"},\"1413\":{\"t\":\"给每个网站租用一个空间。\"},\"1414\":{\"t\":\"image-20220314190248901\"},\"1415\":{\"h\":\"问题分析\",\"a\":\"问题分析\"},\"1416\":{\"t\":\"需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同网站的实例对象很多，造成服务器的资源浪费。\"},\"1417\":{\"t\":\"解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源 都可以达成共享，减少服务器资源。\"},\"1418\":{\"t\":\"对于代码来说，由于是一份实例，维护和扩展都更加容易。\"},\"1419\":{\"t\":\"上面的解决思路就可以使用 享元模式。\"},\"1420\":{\"h\":\"享元模式解决网站展现项目\",\"a\":\"享元模式解决网站展现项目\"},\"1421\":{\"t\":\"类图：\"},\"1422\":{\"t\":\"image-20220314190856461\"},\"1423\":{\"t\":\"代码实现：\"},\"1424\":{\"t\":\"User 类：\"},\"1425\":{\"t\":\"public class User { private String name; public User(String name) { super(); this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } } \"},\"1426\":{\"t\":\"网站类和其子类\"},\"1427\":{\"t\":\"public abstract class WebSite { public abstract void use(User user); // 抽象方法 } // 具体网站 public class ConcreteWebSite extends WebSite { // 共享的部分，内部状态 private String type = \\\"\\\"; // 网站发布的形式（类型） // 构造器 public ConcreteWebSite(String type) { this.type = type; } @Override public void use(User user) { System.out.println(\\\"网站的发布形式为:\\\" + type + \\\" 在使用中 .. 使用者是\\\" + user.getName()); } } \"},\"1428\":{\"t\":\"网站工厂类：\"},\"1429\":{\"t\":\"// 网站工厂类，根据需要返回压一个网站 public class WebSiteFactory { // 集合，充当池的作用 private HashMap<String, ConcreteWebSite> pool = new HashMap<>(); // 根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回 public WebSite getWebSiteCategory(String type) { if(!pool.containsKey(type)) { // 就创建一个网站，并放入到池中 pool.put(type, new ConcreteWebSite(type)); } return (WebSite)pool.get(type); } // 获取网站分类的总数 (池中有多少个网站类型) public int getWebSiteCount() { return pool.size(); } } \"},\"1430\":{\"t\":\"测试类：\"},\"1431\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建一个工厂类 WebSiteFactory factory = new WebSiteFactory(); // 客户要一个以新闻形式发布的网站 WebSite webSite1 = factory.getWebSiteCategory(\\\"新闻\\\"); webSite1.use(new User(\\\"tom\\\")); // 客户要一个以博客形式发布的网站 WebSite webSite2 = factory.getWebSiteCategory(\\\"博客\\\"); webSite2.use(new User(\\\"jack\\\")); // 客户要一个以博客形式发布的网站 WebSite webSite3 = factory.getWebSiteCategory(\\\"博客\\\"); webSite3.use(new User(\\\"smith\\\")); // 客户要一个以博客形式发布的网站 WebSite webSite4 = factory.getWebSiteCategory(\\\"博客\\\"); webSite4.use(new User(\\\"king\\\")); System.out.println(\\\"网站的分类共=\\\" + factory.getWebSiteCount()); } } \"},\"1432\":{\"h\":\"JDK-Integer 的享元模式剖析\",\"a\":\"jdk-integer-的享元模式剖析\"},\"1433\":{\"t\":\"JDK 中 Integer 使用到了享元模式。\"},\"1434\":{\"t\":\"image-20220314191251956\"},\"1435\":{\"t\":\"代码说明：\"},\"1436\":{\"t\":\"public class FlyWeight { public static void main(String[] args) { // 如果 Integer.valueOf(x) x 在 -128 --- 127 直接，就是使用享元模式返回，如果不在 // 范围类，则仍然 new // 小结: // 1. 在 valueOf 方法中，先判断值是否在 IntegerCache 中，如果不在，就创建新的 Integer(new), 否则，就直接从缓存池返回 // 2. valueOf 方法，就使用到享元模式 // 3. 如果使用 valueOf 方法得到一个 Integer 实例，范围在 -128 - 127 ，执行速度比 new 快 Integer x = Integer.valueOf(127); // 得到 x 实例，类型 Integer Integer y = new Integer(127); // 得到 y 实例，类型 Integer Integer z = Integer.valueOf(127); // .. Integer w = new Integer(127); System.out.println(x.equals(y)); // 大小，true System.out.println(x == y ); // false System.out.println(x == z ); // true System.out.println(w == x ); // false System.out.println(w == y ); // false Integer x1 = Integer.valueOf(200); Integer x2 = Integer.valueOf(200); System.out.println(\\\"x1==x2\\\" + (x1 == x2)); // false，因为超出f } } \"},\"1437\":{\"h\":\"享元模式的注意事项和细节\",\"a\":\"享元模式的注意事项和细节\"},\"1438\":{\"t\":\"在享元模式这样理解，「享」就表示共享，「元」表示对象\"},\"1439\":{\"t\":\"系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式\"},\"1440\":{\"t\":\"用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用 HashMap/HashTable 存储\"},\"1441\":{\"t\":\"享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率\"},\"1442\":{\"t\":\"享元模式提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方\"},\"1443\":{\"t\":\"使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制\"},\"1444\":{\"t\":\"享元模式经典的应用场景是需要缓冲池的场景，比如 String 常量池、数据库连接池\"},\"1445\":{\"h\":\"享元模式的应用场景\",\"a\":\"享元模式的应用场景\"},\"1446\":{\"t\":\"当系统中多处需要同一组信息时，可以把这些信息封装到一个对象中，然后对该对象进行缓存，这样，一个对象就可以提供给多出需要使用的地方，避免大量同一对象的多次创建，降低大量内存空间的消耗。\"},\"1447\":{\"t\":\"享元模式其实是 工厂方法模式 的一个改进机制，享元模式同样要求创建一个或一组对象，并且就是通过工厂方法模式生成对象的，只不过享元模式为工厂方法模式增加了缓存这一功能。\"},\"1448\":{\"t\":\"前面分析了享元模式的结构与特点，下面分析它适用的应用场景。享元模式是通过减少内存中对象的数量来节省内存空间的，所以以下几种情形适合采用享元模式：\"},\"1449\":{\"t\":\"系统中存在大量相同或相似的对象，这些对象耗费大量的内存资源\"},\"1450\":{\"t\":\"大部分的对象可以按照内部状态进行分组，且可将不同部分外部化，这样每一个组只需保存一个内部状态\"},\"1451\":{\"t\":\"由于享元模式需要额外维护一个保存享元的数据结构，所以应当在有足够多的享元实例时才值得使用享元模式\"},\"1452\":{\"h\":\"行为型解释器模式\"},\"1453\":{\"h\":\"解释器模式基本介绍\",\"a\":\"解释器模式基本介绍\"},\"1454\":{\"t\":\"在编译原理中，一个算术表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器。\"},\"1455\":{\"t\":\"解释器模式（Interpreter Pattern）：是指给定一个语言（表达式），定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子（表达式）。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文。\"},\"1456\":{\"t\":\"这里提到的文法和句子的概念同编译原理中的描述相同，文法 指语言的语法规则，而 句子 是语言集中的元素。例如，汉语中的句子有很多，「我是中国人」是其中的一个句子，可以用一棵语法树来直观地描述语言中的句子。\"},\"1457\":{\"t\":\"解释器模式是一种类行为型模式。\"},\"1458\":{\"t\":\"主要优点\"},\"1459\":{\"t\":\"扩展性好。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法\"},\"1460\":{\"t\":\"容易实现。在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易\"},\"1461\":{\"t\":\"主要缺点\"},\"1462\":{\"t\":\"执行效率较低。解释器模式中通常使用大量的循环和递归调用，当要解释的句子较复杂时，其运行速度很慢，且代码的调试过程也比较麻烦\"},\"1463\":{\"t\":\"会引起类膨胀。解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理与维护\"},\"1464\":{\"t\":\"可应用的场景比较少。在软件开发中，需要定义语言文法的应用实例非常少，所以这种模式很少被使用到\"},\"1465\":{\"h\":\"解释器模式的结构与实现\",\"a\":\"解释器模式的结构与实现\"},\"1466\":{\"t\":\"解释器模式的结构与 组合模式 相似，不过其包含的组成元素比组合模式多，而且组合模式是对象结构型模式，而解释器模式是类行为型模式。\"},\"1467\":{\"t\":\"解释器模式包含以下主要角色：\"},\"1468\":{\"t\":\"抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()\"},\"1469\":{\"t\":\"终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应\"},\"1470\":{\"t\":\"非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式\"},\"1471\":{\"t\":\"环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值\"},\"1472\":{\"t\":\"客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法\"},\"1473\":{\"t\":\"解释器模式的结构图如下图所示：\"},\"1474\":{\"t\":\"image-20220326171643437\"},\"1475\":{\"t\":\"代码实现：\"},\"1476\":{\"t\":\"// 抽象表达式类 interface AbstractExpression { public void interpret(String info); // 解释方法 } // 终结符表达式类 class TerminalExpression implements AbstractExpression { public void interpret(String info) { // 对终结符表达式的处理 } } // 非终结符表达式类 class NonterminalExpression implements AbstractExpression { private AbstractExpression exp1; private AbstractExpression exp2; public void interpret(String info) { // 非对终结符表达式的处理 } } // 环境类 class Context { private AbstractExpression exp; public Context() { // 数据初始化 } public void operation(String info) { // 调用相关表达式类的解释方法 } } \"},\"1477\":{\"h\":\"四则运算问题\",\"a\":\"四则运算问题\"},\"1478\":{\"t\":\"先输入表达式的形式，分别输入 a、b、c、d、e 的值，比如 a + b + c - d + e，要求表达式的字母不能重复，最后求出结果：\"},\"1479\":{\"t\":\"请输入表达式：a+b+c-d+e 请输入a的值：10 请输入b的值：11 请输入c的值：1 请输入d的值：2 请输入e的值：3 运算结果：a+b+c-d+e=23 \"},\"1480\":{\"t\":\"如图\"},\"1481\":{\"t\":\"image-20220326170939660\"},\"1482\":{\"h\":\"解释器模式来实现四则\",\"a\":\"解释器模式来实现四则\"},\"1483\":{\"t\":\"思路分析和类图：\"},\"1484\":{\"t\":\"image-20220326171909429\"},\"1485\":{\"t\":\"代码实现：\"},\"1486\":{\"t\":\"解释器类\"},\"1487\":{\"t\":\"// 抽象类表达式，通过 HashMap 键值对, 可以获取到变量的值 public abstract class Expression { // a + b - c // 解释公式和数值, key 就是公式(表达式) 参数[a,b,c], value 就是就是具体值 // HashMap {a=10, b=20} public abstract int interpreter(HashMap<String, Integer> var); } // 抽象运算符号解析器 这里，每个运算符号，都只和自己左右两个数字有关系，但左右两个数字有可能也是一个解析的结果，无论何种类型，都是 Expression 类的实现类 public class SymbolExpression extends Expression { protected Expression left; protected Expression right; public SymbolExpression(Expression left, Expression right) { this.left = left; this.right = right; } // 因为 SymbolExpression 是让其子类来实现，因此 interpreter 是一个默认实现 @Override public int interpreter(HashMap<String, Integer> var) { return 0; } } // 变量的解释器 public class VarExpression extends Expression { private String key; // key=a,key=b,key=c public VarExpression(String key) { this.key = key; } // var 就是 {a=10, b=20} // interpreter 根据 变量名称，返回对应值 @Override public int interpreter(HashMap<String, Integer> var) { return var.get(this.key); } } // 加法解释器 public class AddExpression extends SymbolExpression { public AddExpression(Expression left, Expression right) { super(left, right); } // 处理相加 // var 仍然是 {a=10,b=20} public int interpreter(HashMap<String, Integer> var) { return super.left.interpreter(var) + super.right.interpreter(var); } } // 减法解释器 public class SubExpression extends SymbolExpression { public SubExpression(Expression left, Expression right) { super(left, right); } // 求出left 和 right 表达式相减后的结果 public int interpreter(HashMap<String, Integer> var) { return super.left.interpreter(var) - super.right.interpreter(var); } } \"},\"1488\":{\"t\":\"计算类\"},\"1489\":{\"t\":\"public class Calculator { // 定义表达式 private Expression expression; // 构造函数传参，并解析 public Calculator(String expStr) { // expStr = a+b // 安排运算先后顺序 Stack<Expression> stack = new Stack<>(); // 表达式拆分成字符数组 char[] charArray = expStr.toCharArray(); // [a, +, b] Expression left = null; Expression right = null; // 遍历我们的字符数组，即遍历 [a, +, b] for (int i = 0; i < charArray.length; i++) { switch (charArray[i]) { case '+': // 从 stack 取出 left => \\\"a\\\" left = stack.pop(); // 取出右表达式 \\\"b\\\" right = new VarExpression(String.valueOf(charArray[++i])); // 然后根据得到 left 和 right 构建 AddExpresson 加入 stack stack.push(new AddExpression(left, right)); break; case '-': left = stack.pop(); right = new VarExpression(String.valueOf(charArray[++i])); stack.push(new SubExpression(left, right)); break; default: // 如果是一个 Var 就创建要给 VarExpression 对象，并 push 到 stack stack.push(new VarExpression(String.valueOf(charArray[i]))); break; } } // 当遍历完整个 charArray 数组后，stack 就得到最后 Expression this.expression = stack.pop(); } public int run(HashMap<String, Integer> var) { // 最后将表达式 a+b 和 var = {a=10,b=20} // 然后传递给 expression 的 interpreter 进行解释执行 return this.expression.interpreter(var); } } \"},\"1490\":{\"t\":\"测试类\"},\"1491\":{\"t\":\"public class ClientTest { public static void main(String[] args) throws IOException { String expStr = getExpStr(); // a+b HashMap<String, Integer> var = getValue(expStr); // var {a=10, b=20} Calculator calculator = new Calculator(expStr); System.out.println(\\\"运算结果：\\\" + expStr + \\\"=\\\" + calculator.run(var)); } // 获得表达式 public static String getExpStr() throws IOException { System.out.print(\\\"请输入表达式：\\\"); return (new BufferedReader(new InputStreamReader(System.in))).readLine(); } // 获得值映射 public static HashMap<String, Integer> getValue(String expStr) throws IOException { HashMap<String, Integer> map = new HashMap<>(); for (char ch : expStr.toCharArray()) { if (ch != '+' && ch != '-') { if (!map.containsKey(String.valueOf(ch))) { System.out.print(\\\"请输入\\\" + String.valueOf(ch) + \\\"的值：\\\"); String in = (new BufferedReader(new InputStreamReader(System.in))).readLine(); map.put(String.valueOf(ch), Integer.valueOf(in)); } } } return map; } } \"},\"1492\":{\"h\":\"解释器模式的注意事项和细节\",\"a\":\"解释器模式的注意事项和细节\"},\"1493\":{\"t\":\"当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性。\"},\"1494\":{\"t\":\"使用解释器可能带来的问题：解释器模式会引起类膨胀、解释器模式采用递归调用方法，将会导致调试非常复杂、效率可能降低。\"},\"1495\":{\"h\":\"解释器模式的应用场景\",\"a\":\"解释器模式的应用场景\"},\"1496\":{\"t\":\"前面介绍了解释器模式的结构与特点，下面分析它的应用场景。\"},\"1497\":{\"t\":\"当语言的文法较为简单，且执行效率不是关键问题时\"},\"1498\":{\"t\":\"当问题重复出现，且可以用一种简单的语言来进行表达时\"},\"1499\":{\"t\":\"当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候，如 XML 文档解释\"},\"1500\":{\"t\":\"注意：解释器模式在实际的软件开发中使用比较少，因为它会引起效率、性能以及维护等问题。如果碰到对表达式的解释，在 Java 中可以用 Expression4J 或 Jep 等来设计。\"},\"1501\":{\"h\":\"行为型迭代器模式\"},\"1502\":{\"h\":\"迭代器模式基本介绍\",\"a\":\"迭代器模式基本介绍\"},\"1503\":{\"t\":\"迭代器模式在生活中应用的比较广泛，比如：物流系统中的传送带，不管传送的是什么物品，都会被打包成一个个箱子，并且有一个统一的二维码。这样我们不需要关心箱子里是什么，在分发时只需要一个个检查发送的目的地即可。再比如，我们平时乘坐交通工具，都是统一刷卡或者刷脸进站，而不需要关心是男性还是女性、是残疾人还是正常人等信息。\"},\"1504\":{\"t\":\"迭代器模式（Iterator Pattern）是常用的设计模式，属于行为型模式。\"},\"1505\":{\"t\":\"如果我们的集合元素是用不同的方式实现的，有数组，还有 Java 的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。\"},\"1506\":{\"t\":\"迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构。\"},\"1507\":{\"t\":\"主要优点\"},\"1508\":{\"t\":\"访问一个聚合对象的内容而无须暴露它的内部表示\"},\"1509\":{\"t\":\"遍历任务交由迭代器完成，这简化了聚合类\"},\"1510\":{\"t\":\"它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历\"},\"1511\":{\"t\":\"增加新的聚合类和迭代器类都很方便，无须修改原有代码\"},\"1512\":{\"t\":\"封装性良好，为遍历不同的聚合结构提供一个统一的接口\"},\"1513\":{\"t\":\"主要缺点\"},\"1514\":{\"t\":\"增加了类的个数，这在一定程度上增加了系统的复杂性。\"},\"1515\":{\"h\":\"迭代器模式的结构与实现\",\"a\":\"迭代器模式的结构与实现\"},\"1516\":{\"t\":\"迭代器模式是通过将聚合对象的遍历行为分离出来，抽象成迭代器类来实现的，其目的是在不暴露聚合对象的内部结构的情况下，让外部代码透明地访问聚合的内部数据。现在我们来分析其基本结构与实现方法。\"},\"1517\":{\"t\":\"迭代器模式主要包含以下角色：\"},\"1518\":{\"t\":\"抽象聚合（Aggregate）角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口\"},\"1519\":{\"t\":\"具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例\"},\"1520\":{\"t\":\"抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、first()、next() 等方法\"},\"1521\":{\"t\":\"具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置\"},\"1522\":{\"t\":\"结构图如下所示：\"},\"1523\":{\"t\":\"image-20220326154814205\"},\"1524\":{\"t\":\"代码实现：\"},\"1525\":{\"t\":\"// 抽象迭代器 interface Iterator { Object first(); Object next(); boolean hasNext(); } // 具体迭代器 class ConcreteIterator implements Iterator { private List<Object> list = null; private int index = -1; public ConcreteIterator(List<Object> list) { this.list = list; } public boolean hasNext() { if (index < list.size() - 1) { return true; } else { return false; } } public Object first() { index = 0; Object obj = list.get(index); return obj; } public Object next() { Object obj = null; if (this.hasNext()) { obj = list.get(++index); } return obj; } } // 抽象聚合 interface Aggregate { public void add(Object obj); public void remove(Object obj); public Iterator getIterator(); } // 具体聚合 class ConcreteAggregate implements Aggregate { private List<Object> list = new ArrayList<Object>(); public void add(Object obj) { list.add(obj); } public void remove(Object obj) { list.remove(obj); } public Iterator getIterator() { return (new ConcreteIterator(list)); } } public class IteratorPattern { public static void main(String[] args) { Aggregate ag = new ConcreteAggregate(); ag.add(\\\"中山大学\\\"); ag.add(\\\"华南理工\\\"); ag.add(\\\"韶关学院\\\"); System.out.print(\\\"聚合的内容有：\\\"); Iterator it = ag.getIterator(); while (it.hasNext()) { Object ob = it.next(); System.out.print(ob.toString() + \\\"\\\\t\\\"); } Object ob = it.first(); System.out.println(\\\"\\\\nFirst：\\\" + ob.toString()); } } \"},\"1526\":{\"h\":\"迭代器模式应用实例\",\"a\":\"迭代器模式应用实例\"},\"1527\":{\"t\":\"应用实例：\"},\"1528\":{\"t\":\"在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。\"},\"1529\":{\"t\":\"设计思路分析：\"},\"1530\":{\"t\":\"image-20220326155107325\"},\"1531\":{\"t\":\"代码实现：\"},\"1532\":{\"t\":\"专业系类\"},\"1533\":{\"t\":\"public class Department { private String name; private String desc; public Department(String name, String desc) { super(); this.name = name; this.desc = desc; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDesc() { return desc; } public void setDesc(String desc) { this.desc = desc; } } \"},\"1534\":{\"t\":\"大学接口及其实现类\"},\"1535\":{\"t\":\"public interface College { public String getName(); // 增加系的方法 public void addDepartment(String name, String desc); // 返回一个迭代器,遍历 public Iterator createIterator(); } public class ComputerCollege implements College { Department[] departments; int numOfDepartment = 0 ; // 保存当前数组的对象个数 public ComputerCollege() { departments = new Department[5]; addDepartment(\\\"Java专业\\\", \\\" Java专业 \\\"); addDepartment(\\\"PHP专业\\\", \\\" PHP专业 \\\"); addDepartment(\\\"大数据专业\\\", \\\" 大数据专业 \\\"); } @Override public String getName() { return \\\"计算机学院\\\"; } @Override public void addDepartment(String name, String desc) { Department department = new Department(name, desc); departments[numOfDepartment] = department; numOfDepartment += 1; } @Override public Iterator createIterator() { return new ComputerCollegeIterator(departments); } } public class InfoCollege implements College { List<Department> departmentList; public InfoCollege() { departmentList = new ArrayList<Department>(); addDepartment(\\\"信息安全专业\\\", \\\" 信息安全专业 \\\"); addDepartment(\\\"网络安全专业\\\", \\\" 网络安全专业 \\\"); addDepartment(\\\"服务器安全专业\\\", \\\" 服务器安全专业 \\\"); } @Override public String getName() { return \\\"信息工程学院\\\"; } @Override public void addDepartment(String name, String desc) { Department department = new Department(name, desc); departmentList.add(department); } @Override public Iterator createIterator() { return new InfoColleageIterator(departmentList); } } \"},\"1536\":{\"t\":\"两个院系的迭代器类\"},\"1537\":{\"t\":\"public class ComputerCollegeIterator implements Iterator { // 这里我们需要 Department 是以怎样的方式存放 => 数组 Department[] departments; int position = 0; //遍历的位置 public ComputerCollegeIterator(Department[] departments) { this.departments = departments; } // 判断是否还有下一个元素 @Override public boolean hasNext() { if(position >= departments.length || departments[position] == null) { return false; }else { return true; } } @Override public Object next() { Department department = departments[position]; position += 1; return department; } // 删除的方法，默认空实现 public void remove() { } } public class InfoColleageIterator implements Iterator { List<Department> departmentList; // 信息工程学院是以 List 方式存放系 int index = -1; // 索引 public InfoColleageIterator(List<Department> departmentList) { this.departmentList = departmentList; } // 判断 list 中还有没有下一个元素 @Override public boolean hasNext() { if(index >= departmentList.size() - 1) { return false; } else { index += 1; return true; } } @Override public Object next() { return departmentList.get(index); } // 空实现 remove public void remove() { } } \"},\"1538\":{\"t\":\"输出类\"},\"1539\":{\"t\":\"public class OutPutImpl { // 学院集合 List<College> collegeList; public OutPutImpl(List<College> collegeList) { this.collegeList = collegeList; } // 遍历所有学院,然后调用printDepartment 输出各个学院的系 public void printCollege() { // 从 collegeList 取出所有学院, Java 中的 List 已经实现 Iterator Iterator<College> iterator = collegeList.iterator(); while(iterator.hasNext()) { //取出一个学院 College college = iterator.next(); System.out.println(\\\"=== \\\"+college.getName() +\\\"=====\\\" ); printDepartment(college.createIterator()); // 得到对应迭代器 } } // 输出 学院输出 系 public void printDepartment(Iterator iterator) { while(iterator.hasNext()) { Department d = (Department)iterator.next(); System.out.println(d.getName()); } } } \"},\"1540\":{\"t\":\"测试类\"},\"1541\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建学院 List<College> collegeList = new ArrayList<College>(); ComputerCollege computerCollege = new ComputerCollege(); InfoCollege infoCollege = new InfoCollege(); collegeList.add(computerCollege); // collegeList.add(infoCollege); OutPutImpl outPutImpl = new OutPutImpl(collegeList); outPutImpl.printCollege(); } } \"},\"1542\":{\"h\":\"JDK-ArrayList 的迭代器模式剖析\",\"a\":\"jdk-arraylist-的迭代器模式剖析\"},\"1543\":{\"t\":\"JDK 的 ArrayList 集合中就使用了迭代器模式。\"},\"1544\":{\"t\":\"image-20220326155825142\"},\"1545\":{\"t\":\"类图：\"},\"1546\":{\"t\":\"image-20220326155841174\"},\"1547\":{\"t\":\"对类图的角色分析和说明\"},\"1548\":{\"t\":\"内部类 Itr 充当具体实现迭代器 Iterator 的类，作为 ArrayList 内部类\"},\"1549\":{\"t\":\"List 就是充当了聚合接口，含有一个 iterator() 方法，返回一个迭代器对象\"},\"1550\":{\"t\":\"ArrayList 是实现聚合接口 List 的子类，实现了 iterator()\"},\"1551\":{\"t\":\"Iterator 接口系统提供\"},\"1552\":{\"t\":\"迭代器模式解决了不同集合（ArrayList、LinkedList）统一遍历问题\"},\"1553\":{\"h\":\"迭代器模式的注意事项和细节\",\"a\":\"迭代器模式的注意事项和细节\"},\"1554\":{\"t\":\"迭代器模式提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了。\"},\"1555\":{\"t\":\"迭代器模式隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成。\"},\"1556\":{\"t\":\"迭代器模式提供了一种 设计思想，就是一个类应该只有一个引起变化的原因（叫做单一责任原则）。在聚合类中，我们把迭代器分开，就是要把 管理对象集合 和 遍历对象集合 的责任分开，这样一来集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到了迭代器。\"},\"1557\":{\"t\":\"当要展示一组相似对象，或者遍历一组相同对象时使用, 适合使用迭代器模式，但是每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类。\"},\"1558\":{\"h\":\"迭代器模式的应用场景\",\"a\":\"迭代器模式的应用场景\"},\"1559\":{\"t\":\"前面介绍了关于迭代器模式的结构与特点，下面介绍其应用场景，迭代器模式通常在以下几种情况使用。\"},\"1560\":{\"t\":\"当需要为聚合对象提供多种遍历方式时\"},\"1561\":{\"t\":\"当需要为遍历不同的聚合结构提供一个统一的接口时\"},\"1562\":{\"t\":\"当访问一个聚合对象的内容而无须暴露其内部细节的表示时\"},\"1563\":{\"t\":\"由于聚合与迭代器的关系非常密切，所以大多数语言在实现聚合类时都提供了迭代器类，因此大数情况下使用语言中已有的聚合类的迭代器就已经够了。\"},\"1564\":{\"h\":\"行为型中介模式\"},\"1565\":{\"h\":\"中介者模式基本介绍\",\"a\":\"中介者模式基本介绍\"},\"1566\":{\"t\":\"中介者模式（Mediator Pattern）又叫 调停模式，它是迪米特法则的典型应用。用一个 中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其 耦合松散，而且可以独立地改变它们之间的交互。\"},\"1567\":{\"t\":\"中介者模式属于行为型模式，使代码易于维护。\"},\"1568\":{\"t\":\"在现实生活中，常常会出现好多对象之间存在复杂的交互关系，这种交互关系常常是「网状结构」，它要求每个对象都必须知道它需要交互的对象。例如，每个人必须记住他（她）所有朋友的电话；而且，朋友中如果有人的电话修改了，他（她）必须让其他所有的朋友一起修改，这叫作「牵一发而动全身」，非常复杂。\"},\"1569\":{\"t\":\"如果把这种「网状结构」改为「星形结构」的话，将大大降低它们之间的「耦合性」，这时只要找一个「中介者」就可以了。如前面所说的「每个人必须记住所有朋友电话」的问题，只要在网上建立一个每个朋友都可以访问的「通信录」就解决了。这样的例子还有很多，例如，你刚刚参加工作想租房，可以找「房屋中介」；或者，自己刚刚到一个陌生城市找工作，可以找「人才交流中心」帮忙。\"},\"1570\":{\"t\":\"比如 MVC 模式，C（Controller 控制器）是 M（Model 模型）和 V（View 视图）的中介者，在前后端交互时起到了中间人的作用。还有大家常用的 QQ 聊天程序的「中介者」是 QQ 服务器。所有这些，都可以采用「中介者模式」来实现，它将大大降低对象之间的耦合性，提高系统的灵活性。\"},\"1571\":{\"t\":\"主要优点\"},\"1572\":{\"t\":\"类之间各司其职，符合迪米特法则\"},\"1573\":{\"t\":\"降低了对象之间的耦合性，使得对象易于独立地被复用\"},\"1574\":{\"t\":\"将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，使得系统易于维护和扩展\"},\"1575\":{\"t\":\"主要缺点\"},\"1576\":{\"t\":\"中介者模式将原本多个对象直接的相互依赖变成了中介者和多个同事类的依赖关系。当同事类越多时，中介者就会越臃肿，变得复杂且难以维护。\"},\"1577\":{\"h\":\"中介者模式的结构与实现\",\"a\":\"中介者模式的结构与实现\"},\"1578\":{\"t\":\"中介者模式包含以下主要角色：\"},\"1579\":{\"t\":\"抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法\"},\"1580\":{\"t\":\"具体中介者（Concrete Mediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色\"},\"1581\":{\"t\":\"抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能\"},\"1582\":{\"t\":\"具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互\"},\"1583\":{\"t\":\"中介者模式的结构图如下所示：\"},\"1584\":{\"t\":\"image-20220326163809453\"},\"1585\":{\"t\":\"代码实现：\"},\"1586\":{\"t\":\"// 抽象中介者 abstract class Mediator { public abstract void register(Colleague colleague); public abstract void relay(Colleague cl); //转发 } // 具体中介者 class ConcreteMediator extends Mediator { private List<Colleague> colleagues = new ArrayList<Colleague>(); public void register(Colleague colleague) { if (!colleagues.contains(colleague)) { colleagues.add(colleague); colleague.setMedium(this); } } public void relay(Colleague cl) { for (Colleague ob : colleagues) { if (!ob.equals(cl)) { ((Colleague) ob).receive(); } } } } // 抽象同事类 abstract class Colleague { protected Mediator mediator; public void setMedium(Mediator mediator) { this.mediator = mediator; } public abstract void receive(); public abstract void send(); } // 具体同事类 class ConcreteColleague1 extends Colleague { public void receive() { System.out.println(\\\"具体同事类1收到请求。\\\"); } public void send() { System.out.println(\\\"具体同事类1发出请求。\\\"); mediator.relay(this); //请中介者转发 } } // 具体同事类 class ConcreteColleague2 extends Colleague { public void receive() { System.out.println(\\\"具体同事类2收到请求。\\\"); } public void send() { System.out.println(\\\"具体同事类2发出请求。\\\"); mediator.relay(this); //请中介者转发 } } public class MediatorPattern { public static void main(String[] args) { Mediator md = new ConcreteMediator(); Colleague c1, c2; c1 = new ConcreteColleague1(); c2 = new ConcreteColleague2(); md.register(c1); md.register(c2); c1.send(); System.out.println(\\\"-------------\\\"); c2.send(); } } \"},\"1587\":{\"h\":\"智能家具项目\",\"a\":\"智能家具项目\"},\"1588\":{\"t\":\"智能家具包括各种设备：闹钟、咖啡机、电视机、窗帘等。\"},\"1589\":{\"t\":\"主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为：闹铃响起 -> 咖啡机开始 -> 做咖啡 -> 窗帘自动落下 -> 电视机开始播放。\"},\"1590\":{\"h\":\"传统方案解决智能家具项目\",\"a\":\"传统方案解决智能家具项目\"},\"1591\":{\"t\":\"image-20220326163154437\"},\"1592\":{\"t\":\"当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂。\"},\"1593\":{\"t\":\"各个电器对象彼此联系，你中有我，我中有你，不利于松耦合。\"},\"1594\":{\"t\":\"各个电器对象之间所传递的消息(参数)，容易混乱。\"},\"1595\":{\"t\":\"当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想 考虑 中介者模式。\"},\"1596\":{\"h\":\"中介者模式解决智能家庭项目\",\"a\":\"中介者模式解决智能家庭项目\"},\"1597\":{\"t\":\"思路分析和类图：\"},\"1598\":{\"t\":\"image-20220326163930542\"},\"1599\":{\"t\":\"代码实现：\"},\"1600\":{\"t\":\"中介者类\"},\"1601\":{\"t\":\"// 中介者抽象类 public abstract class Mediator { // 将给中介者对象，加入到集合中 public abstract void Register(String colleagueName, Colleague colleague); // 接收消息, 具体的同事对象发出 public abstract void GetMessage(int stateChange, String colleagueName); public abstract void SendMessage(); } // 具体的中介者类 public class ConcreteMediator extends Mediator { // 集合，放入所有的同事对象 private HashMap<String, Colleague> colleagueMap; private HashMap<String, String> interMap; public ConcreteMediator() { colleagueMap = new HashMap<String, Colleague>(); interMap = new HashMap<String, String>(); } @Override public void Register(String colleagueName, Colleague colleague) { colleagueMap.put(colleagueName, colleague); if (colleague instanceof Alarm) { interMap.put(\\\"Alarm\\\", colleagueName); } else if (colleague instanceof CoffeeMachine) { interMap.put(\\\"CoffeeMachine\\\", colleagueName); } else if (colleague instanceof TV) { interMap.put(\\\"TV\\\", colleagueName); } else if (colleague instanceof Curtains) { interMap.put(\\\"Curtains\\\", colleagueName); } } // 具体中介者的核心方法 // 1. 根据得到消息，完成对应任务 // 2. 中介者在这个方法，协调各个具体的同事对象，完成任务 @Override public void GetMessage(int stateChange, String colleagueName) { //处理闹钟发出的消息 if (colleagueMap.get(colleagueName) instanceof Alarm) { if (stateChange == 0) { ((CoffeeMachine) (colleagueMap.get(interMap .get(\\\"CoffeeMachine\\\")))).StartCoffee(); ((TV) (colleagueMap.get(interMap.get(\\\"TV\\\")))).StartTv(); } else if (stateChange == 1) { ((TV) (colleagueMap.get(interMap.get(\\\"TV\\\")))).StopTv(); } } else if (colleagueMap.get(colleagueName) instanceof CoffeeMachine) { ((Curtains) (colleagueMap.get(interMap.get(\\\"Curtains\\\")))) .UpCurtains(); } else if (colleagueMap.get(colleagueName) instanceof TV) { // 如果 TV 发现消息 } else if (colleagueMap.get(colleagueName) instanceof Curtains) { // 如果是以窗帘发出的消息，这里处理 ... } } @Override public void SendMessage() { } } \"},\"1602\":{\"t\":\"智能家具类\"},\"1603\":{\"t\":\"// 智能家具抽象类 public abstract class Colleague { private Mediator mediator; public String name; public Colleague(Mediator mediator, String name) { this.mediator = mediator; this.name = name; } public Mediator GetMediator() { return this.mediator; } public abstract void SendMessage(int stateChange); } // 咖啡机 public class CoffeeMachine extends Colleague { public CoffeeMachine(Mediator mediator, String name) { super(mediator, name); mediator.Register(name, this); } @Override public void SendMessage(int stateChange) { this.GetMediator().GetMessage(stateChange, this.name); } public void StartCoffee() { System.out.println(\\\"It's time to startcoffee!\\\"); } public void FinishCoffee() { System.out.println(\\\"After 5 minutes!\\\"); System.out.println(\\\"Coffee is ok!\\\"); SendMessage(0); } } // 电视机 public class TV extends Colleague { public TV(Mediator mediator, String name) { super(mediator, name); mediator.Register(name, this); } @Override public void SendMessage(int stateChange) { this.GetMediator().GetMessage(stateChange, this.name); } public void StartTv() { System.out.println(\\\"It's time to StartTv!\\\"); } public void StopTv() { System.out.println(\\\"StopTv!\\\"); } } // 窗帘 public class Curtains extends Colleague { public Curtains(Mediator mediator, String name) { super(mediator, name); mediator.Register(name, this); } @Override public void SendMessage(int stateChange) { this.GetMediator().GetMessage(stateChange, this.name); } public void UpCurtains() { System.out.println(\\\"I am holding Up Curtains!\\\"); } } // 闹钟 public class Alarm extends Colleague { // 构造器 public Alarm(Mediator mediator, String name) { super(mediator, name); // 在创建 Alarm 同事对象时，将自己放入到 ConcreteMediator 对象中[集合] mediator.Register(name, this); } public void SendAlarm(int stateChange) { SendMessage(stateChange); } @Override public void SendMessage(int stateChange) { // 调用的中介者对象的 getMessage this.GetMediator().GetMessage(stateChange, this.name); } } \"},\"1604\":{\"t\":\"测试类\"},\"1605\":{\"t\":\"public class ClientTest { public static void main(String[] args) { // 创建一个中介者对象 Mediator mediator = new ConcreteMediator(); // 创建 Alarm 并且加入到 ConcreteMediator 对象的HashMap Alarm alarm = new Alarm(mediator, \\\"alarm\\\"); // 创建了 CoffeeMachine 对象，并 且加入到 ConcreteMediator 对象的 HashMap CoffeeMachine coffeeMachine = new CoffeeMachine(mediator, \\\"coffeeMachine\\\"); // 创建 Curtains，并且加入到 ConcreteMediator 对象的HashMap Curtains curtains = new Curtains(mediator, \\\"curtains\\\"); TV tV = new TV(mediator, \\\"TV\\\"); // 让闹钟发出消息 alarm.SendAlarm(0); coffeeMachine.FinishCoffee(); alarm.SendAlarm(1); } } \"},\"1606\":{\"h\":\"中介者模式的注意事项和细节\",\"a\":\"中介者模式的注意事项和细节\"},\"1607\":{\"t\":\"传统下多个类相互耦合，会形成网状结构, 使用中介者模式将网状结构分离为星型结构，进行解耦\"},\"1608\":{\"t\":\"中介者模式减少类间依赖，降低了耦合，符合迪米特原则\"},\"1609\":{\"t\":\"中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响\"},\"1610\":{\"t\":\"如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意\"},\"1611\":{\"h\":\"中介者模式的应用场景\",\"a\":\"中介者模式的应用场景\"},\"1612\":{\"t\":\"前面分析了中介者模式的结构与特点，下面分析其以下应用场景：\"},\"1613\":{\"t\":\"当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时\"},\"1614\":{\"t\":\"当想创建一个运行于多个类之间的对象，又不想生成新的子类时\"},\"1615\":{\"h\":\"行为型备忘录模式\"},\"1616\":{\"h\":\"备忘录模式基本介绍\",\"a\":\"备忘录模式基本介绍\"},\"1617\":{\"t\":\"备忘录模式（Memento Pattern）又叫 快照模式，在 不破坏封装性的前提下，捕获 一个对象的内部状态，并在该对象之外保存这个状态。这样以后就 可将该对象恢复到原先保存的状态。\"},\"1618\":{\"t\":\"备忘录模式属于行为型模式。\"},\"1619\":{\"t\":\"可以这里理解备忘录模式：现实生活中的备忘录是用来记录某些要去做的事情，或者是记录已经达成的共同意见的事情，以防忘记了。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作。\"},\"1620\":{\"t\":\"其实很多应用软件都提供了这项功能，如 Word、记事本、Photoshop、Eclipse 等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 IE 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。\"},\"1621\":{\"t\":\"主要优点\"},\"1622\":{\"t\":\"提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态\"},\"1623\":{\"t\":\"实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息\"},\"1624\":{\"t\":\"简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则\"},\"1625\":{\"t\":\"主要缺点\"},\"1626\":{\"t\":\"资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。\"},\"1627\":{\"h\":\"备忘录模式的结构与实现\",\"a\":\"备忘录模式的结构与实现\"},\"1628\":{\"t\":\"备忘录模式的核心是设计备忘录类以及用于管理备忘录的管理者类。\"},\"1629\":{\"t\":\"备忘录模式的主要角色如下：\"},\"1630\":{\"t\":\"发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息\"},\"1631\":{\"t\":\"备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。\"},\"1632\":{\"t\":\"管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改\"},\"1633\":{\"t\":\"备忘录模式的结构图如下图所示：\"},\"1634\":{\"t\":\"image-20220326165253607\"},\"1635\":{\"t\":\"代码实现：\"},\"1636\":{\"t\":\"// 备忘录 class Memento { private String state; public Memento(String state) { this.state = state; } public void setState(String state) { this.state = state; } public String getState() { return state; } } // 发起人 class Originator { private String state; public void setState(String state) { this.state = state; } public String getState() { return state; } public Memento createMemento() { return new Memento(state); } public void restoreMemento(Memento m) { this.setState(m.getState()); } } // 管理者 class Caretaker { private Memento memento; public void setMemento(Memento m) { memento = m; } public Memento getMemento() { return memento; } } public class MementoPattern { public static void main(String[] args) { Originator or = new Originator(); Caretaker cr = new Caretaker(); or.setState(\\\"S0\\\"); System.out.println(\\\"初始状态:\\\" + or.getState()); cr.setMemento(or.createMemento()); //保存状态 or.setState(\\\"S1\\\"); System.out.println(\\\"新的状态:\\\" + or.getState()); or.restoreMemento(cr.getMemento()); //恢复状态 System.out.println(\\\"恢复状态:\\\" + or.getState()); } } \"},\"1637\":{\"h\":\"游戏角色状态恢复问题\",\"a\":\"游戏角色状态恢复问题\"},\"1638\":{\"t\":\"游戏角色有攻击力和防御力，在大战 Boss 前保存自身的状态（攻击力和防御力），当大战 Boss 后攻击力和防御力下降，从备忘录对象恢复到大战前的状态。\"},\"1639\":{\"h\":\"传统方案解决游戏角色恢复\",\"a\":\"传统方案解决游戏角色恢复\"},\"1640\":{\"t\":\"image-20220326164847860\"},\"1641\":{\"t\":\"一个对象，就对应一个保存对象状态的对象，这样当我们游戏的对象很多时，不利于管理，开销也很大。\"},\"1642\":{\"t\":\"传统的方式是简单地做备份，new 出另外一个对象出来，再把需要备份的数据放到这个新对象，但这就暴露了对象内部的细节\"},\"1643\":{\"t\":\"解决方案：备忘录模式。\"},\"1644\":{\"h\":\"备忘录模式解决游戏角色恢复\",\"a\":\"备忘录模式解决游戏角色恢复\"},\"1645\":{\"t\":\"思路分析和类图：\"},\"1646\":{\"t\":\"image-20220326165601510\"},\"1647\":{\"t\":\"代码实现：\"},\"1648\":{\"t\":\"备忘录类\"},\"1649\":{\"t\":\"public class Memento { // 攻击力 private int vit; // 防御力 private int def; public Memento(int vit, int def) { super(); this.vit = vit; this.def = def; } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } \"},\"1650\":{\"t\":\"管理类\"},\"1651\":{\"t\":\"// 守护者对象, 保存游戏角色的状态 public class Caretaker { // 如果只保存一次状态 private Memento memento; public Memento getMemento() { return memento; } public void setMemento(Memento memento) { this.memento = memento; } } \"},\"1652\":{\"t\":\"发起人类\"},\"1653\":{\"t\":\"public class GameRole { private int vit; private int def; // 创建 Memento ,即根据当前的状态得到 Memento public Memento createMemento() { return new Memento(vit, def); } // 从备忘录对象，恢复 GameRole 的状态 public void recoverGameRoleFromMemento(Memento memento) { this.vit = memento.getVit(); this.def = memento.getDef(); } // 显示当前游戏角色的状态 public void display() { System.out.println(\\\"游戏角色当前的攻击力：\\\" + this.vit + \\\" 防御力: \\\" + this.def); } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } \"},\"1654\":{\"t\":\"测试类\"},\"1655\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建游戏角色 GameRole gameRole = new GameRole(); gameRole.setVit(100); gameRole.setDef(100); System.out.println(\\\"和boss大战前的状态\\\"); gameRole.display(); // 把当前状态保存 caretaker Caretaker caretaker = new Caretaker(); caretaker.setMemento(gameRole.createMemento()); System.out.println(\\\"和boss大战~~~\\\"); gameRole.setDef(30); gameRole.setVit(30); gameRole.display(); System.out.println(\\\"大战后，使用备忘录对象恢复到站前\\\"); gameRole.recoverGameRoleFromMemento(caretaker.getMemento()); System.out.println(\\\"恢复后的状态\\\"); gameRole.display(); } } \"},\"1656\":{\"h\":\"备忘录模式的注意事项和细节\",\"a\":\"备忘录模式的注意事项和细节\"},\"1657\":{\"t\":\"备忘录模式给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态\"},\"1658\":{\"t\":\"备忘录模式实现了信息的封装，使得用户不需要关心状态的保存细节\"},\"1659\":{\"t\":\"如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存，这个需要注意\"},\"1660\":{\"t\":\"为了节约内存，备忘录模式可以和原型模式配合使用\"},\"1661\":{\"h\":\"备忘录模式的应用场景\",\"a\":\"备忘录模式的应用场景\"},\"1662\":{\"t\":\"前面学习了备忘录模式的定义与特点、结构与实现，现在来看该模式的以下应用场景：\"},\"1663\":{\"t\":\"需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能\"},\"1664\":{\"t\":\"需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，Eclipse 等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作\"},\"1665\":{\"h\":\"行为型观察者模式\"},\"1666\":{\"h\":\"观察者模式基本介绍\",\"a\":\"观察者模式基本介绍\"},\"1667\":{\"t\":\"在现实世界中，许多对象并不是独立存在的，其中一个对象的行为发生改变可能会导致一个或者多个其他对象的行为也发生改变。例如，某种商品的物价上涨时会导致部分商家高兴，而消费者伤心；还有，当我们开车到交叉路口时，遇到红灯会停，遇到绿灯会行。这样的例子还有很多，例如，股票价格与股民、微信公众号与微信用户、气象局的天气预报与听众、小偷与警察等。\"},\"1668\":{\"t\":\"观察者模式（Observer Pattern）的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。\"},\"1669\":{\"t\":\"观察者模式是一种对象行为型模式。\"},\"1670\":{\"t\":\"主要优点\"},\"1671\":{\"t\":\"降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则\"},\"1672\":{\"t\":\"目标与观察者之间建立了一套触发机制\"},\"1673\":{\"t\":\"主要缺点\"},\"1674\":{\"t\":\"目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用\"},\"1675\":{\"t\":\"当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率\"},\"1676\":{\"h\":\"观察者模式的结构与实现\",\"a\":\"观察者模式的结构与实现\"},\"1677\":{\"t\":\"实现观察者模式时要注意具体目标对象和具体观察者对象之间不能直接调用，否则将使两者之间紧密耦合起来，这违反了面向对象的设计原则。\"},\"1678\":{\"t\":\"观察者模式的主要角色如下：\"},\"1679\":{\"t\":\"抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法\"},\"1680\":{\"t\":\"具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象\"},\"1681\":{\"t\":\"抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用\"},\"1682\":{\"t\":\"具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态\"},\"1683\":{\"t\":\"观察者模式的结构图如下所示：\"},\"1684\":{\"t\":\"image-20220326161321893\"},\"1685\":{\"t\":\"代码实现：\"},\"1686\":{\"t\":\"// 抽象目标 abstract class Subject { protected List<Observer> observers = new ArrayList<Observer>(); // 增加观察者方法 public void add(Observer observer) { observers.add(observer); } // 删除观察者方法 public void remove(Observer observer) { observers.remove(observer); } public abstract void notifyObserver(); // 通知观察者方法 } // 具体目标 class ConcreteSubject extends Subject { public void notifyObserver() { System.out.println(\\\"具体目标发生改变...\\\"); System.out.println(\\\"--------------\\\"); for (Object obs : observers) { ((Observer) obs).response(); } } } // 抽象观察者 interface Observer { void response(); // 反应 } // 具体观察者1 class ConcreteObserver1 implements Observer { public void response() { System.out.println(\\\"具体观察者1作出反应！\\\"); } } // 具体观察者 1 class ConcreteObserver2 implements Observer { public void response() { System.out.println(\\\"具体观察者2作出反应！\\\"); } } public class ObserverPattern { public static void main(String[] args) { Subject subject = new ConcreteSubject(); Observer obs1 = new ConcreteObserver1(); Observer obs2 = new ConcreteObserver2(); subject.add(obs1); subject.add(obs2); subject.notifyObserver(); } } \"},\"1687\":{\"h\":\"天气预报项目需求\",\"a\":\"天气预报项目需求\"},\"1688\":{\"t\":\"气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去（比如发布到自己的网站或第三方）\"},\"1689\":{\"t\":\"需要设计开放型 API，便于其他第三方也能接入气象站获取数据\"},\"1690\":{\"t\":\"提供温度、气压和湿度的接口\"},\"1691\":{\"t\":\"测量数据更新时，要能实时的通知给第三方\"},\"1692\":{\"h\":\"普通方案解决天气预报需求\",\"a\":\"普通方案解决天气预报需求\"},\"1693\":{\"h\":\"逻辑分析\",\"a\":\"逻辑分析\"},\"1694\":{\"t\":\"传统的设计方案初步设计出一个 WeatherData 类。\"},\"1695\":{\"t\":\"image-20220326160526405\"},\"1696\":{\"t\":\"说明：\"},\"1697\":{\"t\":\"通过 getXxx 方法，可以让第三方接入，并得到相关信息\"},\"1698\":{\"t\":\"当数据有更新时，气象站通过调用 dataChange() 去更新数据，当第三方再次获取时，就能得到最新数据，当然也可以推送\"},\"1699\":{\"t\":\"image-20220326160613310\"},\"1700\":{\"t\":\"CurrentConditions 可以理解成是我们气象局的网站。\"},\"1701\":{\"h\":\"代码实现\",\"a\":\"代码实现\"},\"1702\":{\"t\":\"public class CurrentConditions { // 温度，气压，湿度 private float temperature; private float pressure; private float humidity; // 更新 天气情况，是由 WeatherData 来调用，我使用推送模式 public void update(float temperature, float pressure, float humidity) { this.temperature = temperature; this.pressure = pressure; this.humidity = humidity; display(); } // 显示 public void display() { System.out.println(\\\"***Today mTemperature: \\\" + temperature + \\\"***\\\"); System.out.println(\\\"***Today mPressure: \\\" + pressure + \\\"***\\\"); System.out.println(\\\"***Today mHumidity: \\\" + humidity + \\\"***\\\"); } } public class WeatherData { private float temperatrue; private float pressure; private float humidity; private CurrentConditions currentConditions; // 加入新的第三方 public WeatherData(CurrentConditions currentConditions) { this.currentConditions = currentConditions; } public float getTemperature() { return temperatrue; } public float getPressure() { return pressure; } public float getHumidity() { return humidity; } public void dataChange() { // 调用接入方的 update currentConditions.update(getTemperature(), getPressure(), getHumidity()); } // 当数据有更新时，就调用 setData public void setData(float temperature, float pressure, float humidity) { this.temperatrue = temperature; this.pressure = pressure; this.humidity = humidity; // 调用 dataChange， 将最新的信息推送给接入方 currentConditions dataChange(); } } \"},\"1703\":{\"t\":\"测试类\"},\"1704\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建接入方 currentConditions CurrentConditions currentConditions = new CurrentConditions(); // 创建 WeatherData 并将接入方 currentConditions 传递到 WeatherData中 WeatherData weatherData = new WeatherData(currentConditions); // 更新天气情况 weatherData.setData(30, 150, 40); // 天气情况变化 System.out.println(\\\"============天气情况变化=============\\\"); weatherData.setData(40, 160, 20); } } \"},\"1705\":{\"h\":\"问题分析\",\"a\":\"问题分析\"},\"1706\":{\"t\":\"其他第三方接入气象站获取数据的问题\"},\"1707\":{\"t\":\"无法在运行时动态的添加第三方 (如新浪网站）\"},\"1708\":{\"t\":\"违反 OCP 原则\"},\"1709\":{\"t\":\"在 WeatherData 中，当增加一个第三方，都需要创建一个对应的第三方的公告板对象，并加入到 dataChange, 不利于维护，也不是动态加入\"},\"1710\":{\"t\":\"所以我们可以使用 观察者模式，\"},\"1711\":{\"h\":\"观察者模式解决天气预报需求\",\"a\":\"观察者模式解决天气预报需求\"},\"1712\":{\"t\":\"类图：\"},\"1713\":{\"t\":\"image-20220326162333026\"},\"1714\":{\"t\":\"代码实现：\"},\"1715\":{\"t\":\"观察者类\"},\"1716\":{\"t\":\"// 观察者接口，有观察者来实现 public interface Observer { public void update(float temperature, float pressure, float humidity); } public class BaiduSite implements Observer { // 温度，气压，湿度 private float temperature; private float pressure; private float humidity; // 更新 天气情况，是由 WeatherData 来调用，我使用推送模式 public void update(float temperature, float pressure, float humidity) { this.temperature = temperature; this.pressure = pressure; this.humidity = humidity; display(); } // 显示 public void display() { System.out.println(\\\"===百度网站====\\\"); System.out.println(\\\"***百度网站 气温 : \\\" + temperature + \\\"***\\\"); System.out.println(\\\"***百度网站 气压: \\\" + pressure + \\\"***\\\"); System.out.println(\\\"***百度网站 湿度: \\\" + humidity + \\\"***\\\"); } } public class CurrentConditions implements Observer { // 温度，气压，湿度 private float temperature; private float pressure; private float humidity; // 更新 天气情况，是由 WeatherData 来调用，我使用推送模式 public void update(float temperature, float pressure, float humidity) { this.temperature = temperature; this.pressure = pressure; this.humidity = humidity; display(); } // 显示 public void display() { System.out.println(\\\"***Today mTemperature: \\\" + temperature + \\\"***\\\"); System.out.println(\\\"***Today mPressure: \\\" + pressure + \\\"***\\\"); System.out.println(\\\"***Today mHumidity: \\\" + humidity + \\\"***\\\"); } } \"},\"1717\":{\"t\":\"数据类\"},\"1718\":{\"t\":\"// 接口, 让 WeatherData 来实现 public interface Subject { public void registerObserver(Observer o); public void removeObserver(Observer o); public void notifyObservers(); } /** * 类是核心 * 1. 包含最新的天气情况信息 * 2. 含有 观察者集合，使用 ArrayList 管理 * 3. 当数据有更新时，就主动的调用 ArrayList，通知所有的（接入方）就看到最新的信息 */ public class WeatherData implements Subject { private float temperatrue; private float pressure; private float humidity; // 观察者集合 private ArrayList<Observer> observers; // 加入新的第三方 public WeatherData() { observers = new ArrayList<Observer>(); } public float getTemperature() { return temperatrue; } public float getPressure() { return pressure; } public float getHumidity() { return humidity; } public void dataChange() { // 调用 接入方的 update notifyObservers(); } // 当数据有更新时，就调用 setData public void setData(float temperature, float pressure, float humidity) { this.temperatrue = temperature; this.pressure = pressure; this.humidity = humidity; // 调用 dataChange， 将最新的信息推送给接入方 currentConditions dataChange(); } // 注册一个观察者 @Override public void registerObserver(Observer o) { observers.add(o); } // 移除一个观察者 @Override public void removeObserver(Observer o) { if(observers.contains(o)) { observers.remove(o); } } // 遍历所有的观察者，并通知 @Override public void notifyObservers() { for(int i = 0; i < observers.size(); i++) { observers.get(i).update(this.temperatrue, this.pressure, this.humidity); } } } \"},\"1719\":{\"t\":\"测试类\"},\"1720\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建一个 WeatherData WeatherData weatherData = new WeatherData(); // 创建观察者 CurrentConditions currentConditions = new CurrentConditions(); BaiduSite baiduSite = new BaiduSite(); // 注册到 WeatherData weatherData.registerObserver(currentConditions); weatherData.registerObserver(baiduSite); // 测试 System.out.println(\\\"通知各个注册的观察者, 看看信息\\\"); weatherData.setData(10f, 100f, 30.3f); weatherData.removeObserver(currentConditions); // 测试 System.out.println(); System.out.println(\\\"通知各个注册的观察者, 看看信息\\\"); weatherData.setData(10f, 100f, 30.3f); } } \"},\"1721\":{\"t\":\"使用了观察者模式设计后，会以集合的方式来管理用户（Observer），包括注册，移除和通知。这样，我们增加观察者（这里可以理解成一个新的公告板），就不需要去修改核心类 WeatherData 不会修改代码，遵守了 OCP 原则。\"},\"1722\":{\"h\":\"JDK 的观察者模式剖析\",\"a\":\"jdk-的观察者模式剖析\"},\"1723\":{\"t\":\"JDK 的 Observable 类就使用了观察者模式。\"},\"1724\":{\"t\":\"image-20220326162754094\"},\"1725\":{\"t\":\"Observable 的作用和地位等价于我们前面讲过 Subject\"},\"1726\":{\"t\":\"Observable 是类，不是接口，类中已经实现了核心的方法，即管理 Observer 的方法 add、delete、notify\"},\"1727\":{\"t\":\"Observer 的作用和地位等价于我们前面讲过的 Observer，有 update\"},\"1728\":{\"t\":\"Observable 和 Observer 的使用方法和前面讲过的一样，只是 Observable 是类，通过继承来实现观察者模式\"},\"1729\":{\"h\":\"观察者模式的应用场景\",\"a\":\"观察者模式的应用场景\"},\"1730\":{\"t\":\"在软件系统中，当系统一方行为依赖另一方行为的变动时，可使用观察者模式松耦合联动双方，使得一方的变动可以通知到感兴趣的另一方对象，从而让另一方对象对此做出响应。\"},\"1731\":{\"t\":\"通过前面的分析与应用实例可知观察者模式适合以下几种情形：\"},\"1732\":{\"t\":\"对象间存在一对多关系，一个对象的状态发生改变会影响其他对象\"},\"1733\":{\"t\":\"当一个抽象模型有两个方面，其中一个方面依赖于另一方面时，可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用\"},\"1734\":{\"t\":\"实现类似广播机制的功能，不需要知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播\"},\"1735\":{\"t\":\"多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知\"},\"1736\":{\"h\":\"创建型原型模式\"},\"1737\":{\"h\":\"原型模式基本介绍\",\"a\":\"原型模式基本介绍\"},\"1738\":{\"t\":\"在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。\"},\"1739\":{\"t\":\"原型模式（Prototype Pattern）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。\"},\"1740\":{\"t\":\"原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。\"},\"1741\":{\"t\":\"工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 对象.clone()。\"},\"1742\":{\"t\":\"主要优点\"},\"1743\":{\"t\":\"Java 自带的原型模式基于内存二进制流的复制，在性能上比直接 new 一个对象更加优良\"},\"1744\":{\"t\":\"可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，以便在需要的时候使用（例如恢复到历史某一状态），可辅助实现撤销操作\"},\"1745\":{\"t\":\"主要缺点\"},\"1746\":{\"t\":\"需要为每一个类都配置一个 clone 方法\"},\"1747\":{\"t\":\"clone 方法位于类的内部，当对已有类进行改造的时候，需要修改代码，违背了开闭原则\"},\"1748\":{\"t\":\"当实现深克隆时，需要编写较为复杂的代码，而且当对象之间存在多重嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来会比较麻烦。因此，深克隆、浅克隆需要运用得当\"},\"1749\":{\"h\":\"原型模式原理结构图\",\"a\":\"原型模式原理结构图\"},\"1750\":{\"t\":\"原型模式包含以下主要角色：\"},\"1751\":{\"t\":\"抽象原型类（Prototype）：原型接口，声明一个克隆自己的接口，规定了具体原型对象必须实现的接口\"},\"1752\":{\"t\":\"具体原型类（ConcretePrototype）：实现原型接口的原型类，实现一个克隆自己的操作\"},\"1753\":{\"t\":\"访问类（Client）：让一个原型对象克隆自己，从而创建一个新的对象（属性一样）\"},\"1754\":{\"t\":\"image-20220301174940372\"},\"1755\":{\"h\":\"克隆羊案例\",\"a\":\"克隆羊案例\"},\"1756\":{\"t\":\"现在有一只羊 tom，姓名为：tom, 年龄为：1，颜色为：白色，请编写程序创建和 tom 羊属性完全相同的 10 只羊。\"},\"1757\":{\"h\":\"传统方式解决克隆羊实例\",\"a\":\"传统方式解决克隆羊实例\"},\"1758\":{\"t\":\"思路分析（图解）\"},\"1759\":{\"t\":\"image-20220301174437773\"},\"1760\":{\"t\":\"Sheep 类代码：\"},\"1761\":{\"t\":\"public class Sheep { private String name; private int age; private String color; public Sheep(String name, int age, String color) { super(); this.name = name; this.age = age; this.color = color; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } @Override public String toString() { return \\\"Sheep [name=\\\" + name + \\\", age=\\\" + age + \\\", color=\\\" + color + \\\"]\\\"; } } \"},\"1762\":{\"t\":\"Client 类代码：\"},\"1763\":{\"t\":\"public class Client { public static void main(String[] args) { // 传统的方法 Sheep sheep = new Sheep(\\\"tom\\\", 1, \\\"白色\\\"); Sheep sheep2 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); Sheep sheep3 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); Sheep sheep4 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); Sheep sheep5 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); // ... System.out.println(sheep); System.out.println(sheep2); System.out.println(sheep3); System.out.println(sheep4); System.out.println(sheep5); // ... } } \"},\"1764\":{\"h\":\"传统的方式的优缺点\",\"a\":\"传统的方式的优缺点\"},\"1765\":{\"t\":\"优点是比较好理解，简单易操作\"},\"1766\":{\"t\":\"在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低\"},\"1767\":{\"t\":\"总是需要重新初始化对象，而不是动态地获得对象运行时的状态, 不够灵活\"},\"1768\":{\"t\":\"改进的思路分析：Java 中 Object 类是所有类的根类，Object 类提供了一个 clone() 方法，该方法可以将一个 Java 对象复制一份，但是需要实现 clone 的 Java 类必须要实现一个接口 Cloneable，该接口表示该类能够复制且具有复制的能力，使用 原型模式。\"},\"1769\":{\"h\":\"原型模式解决克隆羊实例\",\"a\":\"原型模式解决克隆羊实例\"},\"1770\":{\"t\":\"使用原型模式改进传统方式，让程序具有更高的效率和扩展性。\"},\"1771\":{\"t\":\"Sheep 类：\"},\"1772\":{\"t\":\"public class Sheep implements Cloneable { private String name; private int age; private String color; private String address = \\\"蒙古羊\\\"; public Sheep friend; // 是对象，克隆是会如何处理 public Sheep(String name, int age, String color) { super(); this.name = name; this.age = age; this.color = color; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } @Override public String toString() { return \\\"Sheep [name=\\\" + name + \\\", age=\\\" + age + \\\", color=\\\" + color + \\\", address=\\\" + address + \\\"]\\\"; } // 克隆该实例，使用默认的 clone 方法来完成 @Override protected Object clone() { Sheep sheep = null; try { sheep = (Sheep) super.clone(); } catch (Exception e) { System.out.println(e.getMessage()); } return sheep; } } \"},\"1773\":{\"t\":\"Client 类：\"},\"1774\":{\"t\":\"public class Client { public static void main(String[] args) { System.out.println(\\\"原型模式完成对象的创建\\\"); Sheep sheep = new Sheep(\\\"tom\\\", 1, \\\"白色\\\"); sheep.friend = new Sheep(\\\"jack\\\", 2, \\\"黑色\\\"); Sheep sheep2 = (Sheep) sheep.clone(); // 克隆 Sheep sheep3 = (Sheep) sheep.clone(); // 克隆 Sheep sheep4 = (Sheep) sheep.clone(); // 克隆 Sheep sheep5 = (Sheep) sheep.clone(); // 克隆 System.out.println(\\\"sheep2 =\\\" + sheep2 + \\\"sheep2.friend=\\\" + sheep2.friend.hashCode()); System.out.println(\\\"sheep3 =\\\" + sheep3 + \\\"sheep3.friend=\\\" + sheep3.friend.hashCode()); System.out.println(\\\"sheep4 =\\\" + sheep4 + \\\"sheep4.friend=\\\" + sheep4.friend.hashCode()); System.out.println(\\\"sheep5 =\\\" + sheep5 + \\\"sheep5.friend=\\\" + sheep5.friend.hashCode()); } } \"},\"1775\":{\"h\":\"Spring 框架的原型模式\",\"a\":\"spring-框架的原型模式\"},\"1776\":{\"t\":\"Spring 中原型 bean 的创建，就是原型模式。\"},\"1777\":{\"t\":\"image-20220301175359902\"},\"1778\":{\"h\":\"深入讨论：浅拷贝和深拷贝\",\"a\":\"深入讨论-浅拷贝和深拷贝\"},\"1779\":{\"t\":\"浅拷贝的介绍\"},\"1780\":{\"t\":\"对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象\"},\"1781\":{\"t\":\"对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值\"},\"1782\":{\"t\":\"前面我们克隆羊案例就是浅拷贝\"},\"1783\":{\"t\":\"浅拷贝是使用默认的 clone() 方法来实现：sheep = (Sheep) super.clone();\"},\"1784\":{\"t\":\"深拷贝基本介绍\"},\"1785\":{\"t\":\"复制对象的所有基本数据类型的成员变量值\"},\"1786\":{\"t\":\"为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象 \\\\ 可达的所有对象。也就是说，对象进行深拷贝要对整个对象（包括对象的引用类型）进行拷贝\"},\"1787\":{\"t\":\"深拷贝实现方式 1：重写 clone 方法来实现深拷贝\"},\"1788\":{\"t\":\"深拷贝实现方式 2：通过 对象序列化 实现深拷贝（推荐）\"},\"1789\":{\"t\":\"深拷贝应用实例\"},\"1790\":{\"t\":\"使用 重写 clone 方法实现深拷贝\"},\"1791\":{\"t\":\"使用序列化来实现深拷贝\"},\"1792\":{\"t\":\"DeepCloneableTarget 类\"},\"1793\":{\"t\":\"public class DeepCloneableTarget implements Serializable, Cloneable { private static final long serialVersionUID = 1L; private String cloneName; private String cloneClass; // 构造器 public DeepCloneableTarget(String cloneName, String cloneClass) { this.cloneName = cloneName; this.cloneClass = cloneClass; } // 因为该类的属性，都是 String , 因此我们这里使用默认的 clone 完成即可 @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } \"},\"1794\":{\"t\":\"DeepProtoType 类\"},\"1795\":{\"t\":\"public class DeepProtoType implements Serializable, Cloneable { public String name; // String 属性 public DeepCloneableTarget deepCloneableTarget; // 引用类型 public DeepProtoType() { super(); } // 深拷贝 - 方式 1 使用 clone 方法 @Override protected Object clone() throws CloneNotSupportedException { Object deep = null; // 这里完成对基本数据类型（属性）和 String 的克隆 deep = super.clone(); // 对引用类型的属性，进行单独处理 DeepProtoType deepProtoType = (DeepProtoType) deep; deepProtoType.deepCloneableTarget = (DeepCloneableTarget) deepCloneableTarget.clone(); return deepProtoType; } // 深拷贝 - 方式 2 通过对象的序列化实现 (推荐) public Object deepClone() { // 创建流对象 ByteArrayOutputStream bos = null; ObjectOutputStream oos = null; ByteArrayInputStream bis = null; ObjectInputStream ois = null; try { // 序列化 bos = new ByteArrayOutputStream(); oos = new ObjectOutputStream(bos); oos.writeObject(this); // 当前这个对象以对象流的方式输出 // 反序列化 bis = new ByteArrayInputStream(bos.toByteArray()); ois = new ObjectInputStream(bis); DeepProtoType copyObj = (DeepProtoType) ois.readObject(); return copyObj; } catch (Exception e) { e.printStackTrace(); return null; } finally { // 关闭流 try { bos.close(); oos.close(); bis.close(); ois.close(); } catch (Exception e2) { System.out.println(e2.getMessage()); } } } } \"},\"1796\":{\"t\":\"Client 类\"},\"1797\":{\"t\":\"public class Client { public static void main(String[] args) throws Exception { DeepProtoType p = new DeepProtoType(); p.name = \\\"宋江\\\"; p.deepCloneableTarget = new DeepCloneableTarget(\\\"大牛\\\", \\\"小牛\\\"); // 方式 1：完成深拷贝 // DeepProtoType p2 = (DeepProtoType) p.clone(); // System.out.println(\\\"p.name=\\\" + p.name + \\\"p.deepCloneableTarget=\\\" + p.deepCloneableTarget.hashCode()); // System.out.println(\\\"p2.name=\\\" + p.name + \\\"p2.deepCloneableTarget=\\\" + p2.deepCloneableTarget.hashCode()); // 方式 2：完成深拷贝 DeepProtoType p2 = (DeepProtoType) p.deepClone(); System.out.println(\\\"p.name=\\\" + p.name + \\\"p.deepCloneableTarget=\\\" + p.deepCloneableTarget.hashCode()); System.out.println(\\\"p2.name=\\\" + p.name + \\\"p2.deepCloneableTarget=\\\" + p2.deepCloneableTarget.hashCode()); } } \"},\"1798\":{\"t\":\"DeepProtoType 是引用类型，类似于常写的 Person、Animal 类等。\"},\"1799\":{\"t\":\"方式一：如果直接调用引用类型的 clone 方法，则是浅拷贝。那么再创键一个类（成员变量有引用类型），在该类的 clone 方法里返回成员变量（引用类型），返回前，调用引用类型的 clone 方法赋值给成员变量即可\"},\"1800\":{\"t\":\"方式二：利用了序列化和反序列化，推荐\"},\"1801\":{\"h\":\"原型模式的注意事项和细节\",\"a\":\"原型模式的注意事项和细节\"},\"1802\":{\"t\":\"创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率\"},\"1803\":{\"t\":\"不用重新初始化对象，而是动态地获得对象运行时的状态\"},\"1804\":{\"t\":\"如果原始对象发生变化（增加或者减少属性），其它克隆对象的也会发生相应的变化，无需修改代码\"},\"1805\":{\"t\":\"在实现深克隆的时候可能需要比较复杂的代码\"},\"1806\":{\"t\":\"缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了 OCP 原则\"},\"1807\":{\"h\":\"结构型代理模式\"},\"1808\":{\"h\":\"代理模式的基本介绍\",\"a\":\"代理模式的基本介绍\"},\"1809\":{\"t\":\"在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。例如，购买火车票不一定要去火车站买，可以通过 12306 网站或者去火车票代售点买。又如找女朋友、找保姆、找工作等都可以通过找中介完成。\"},\"1810\":{\"t\":\"在软件设计中，使用代理模式的例子也很多，例如，要访问的远程对象比较大（如视频或大图像等），其下载要花很多时间。还有因为安全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等。\"},\"1811\":{\"t\":\"代理模式（Proxy Pattern）：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。\"},\"1812\":{\"t\":\"被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。\"},\"1813\":{\"t\":\"代理模式有不同的形式，主要有三种 静态代理、动态代理（JDK 代理、接口代理）和 Cglib 代理（可以在内存动态的创建对象，而不需要实现接口，他是属于动态代理的范畴）。\"},\"1814\":{\"t\":\"主要优点\"},\"1815\":{\"t\":\"代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用\"},\"1816\":{\"t\":\"代理对象可以扩展目标对象的功能\"},\"1817\":{\"t\":\"代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度，增加了程序的可扩展性\"},\"1818\":{\"t\":\"主要缺点\"},\"1819\":{\"t\":\"代理模式会造成系统设计中类的数量增加\"},\"1820\":{\"t\":\"在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢\"},\"1821\":{\"t\":\"增加了系统的复杂度\"},\"1822\":{\"t\":\"代理模式示意图：\"},\"1823\":{\"t\":\"image-20220314192143394\"},\"1824\":{\"h\":\"静态代理\",\"a\":\"静态代理\"},\"1825\":{\"h\":\"静态代理基本介绍\",\"a\":\"静态代理基本介绍\"},\"1826\":{\"t\":\"静态代理在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者是继承相同父类。\"},\"1827\":{\"t\":\"代理模式的主要角色如下：\"},\"1828\":{\"t\":\"抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法\"},\"1829\":{\"t\":\"真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象\"},\"1830\":{\"t\":\"代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能\"},\"1831\":{\"t\":\"image-20220316221211102\"},\"1832\":{\"t\":\"在代码中，一般代理会被理解为代码增强，实际上就是在原代码逻辑前后增加一些代码逻辑，而使调用者无感知。\"},\"1833\":{\"h\":\"静态代理应用实例\",\"a\":\"静态代理应用实例\"},\"1834\":{\"t\":\"定义一个接口：ITeacherDao\"},\"1835\":{\"t\":\"目标对象 TeacherDAO 实现接口 ITeacherDAO\"},\"1836\":{\"t\":\"使用静态代理方式，就需要在代理对象 TeacherDAOProxy 中也实现 ITeacherDAO\"},\"1837\":{\"t\":\"调用的时候通过调用代理对象的方法来调用目标对象\"},\"1838\":{\"t\":\"特别提醒：代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法。\"},\"1839\":{\"t\":\"思路分析图解（类图）\"},\"1840\":{\"t\":\"image-20220316213701600\"},\"1841\":{\"t\":\"代码实现\"},\"1842\":{\"t\":\"// 接口 public interface ITeacherDao { void teach(); // 授课的方法 } // 被代理对象，目标对象，实际访问的对象 public class TeacherDao implements ITeacherDao { @Override public void teach() { System.out.println(\\\" 老师授课中\\\"); } } // 代理对象，静态代理 public class TeacherDaoProxy implements ITeacherDao{ private ITeacherDao target; // 目标对象，通过接口来聚合 // 构造器 public TeacherDaoProxy(ITeacherDao target) { this.target = target; } @Override public void teach() { System.out.println(\\\"开始代理，上课前先备课\\\"); // 方法 target.teach(); // 被代理对象的方法 System.out.println(\\\"40 分钟后下课\\\"); // 方法 } } \"},\"1843\":{\"t\":\"测试类\"},\"1844\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建目标对象（被代理对象） TeacherDao teacherDao = new TeacherDao(); // 创建代理对象, 同时将被代理对象传递给代理对象 TeacherDaoProxy teacherDaoProxy = new TeacherDaoProxy(teacherDao); // 通过代理对象，调用到被代理对象的方法 // 即：执行的是代理对象的方法，代理对象再去调用目标对象的方法 teacherDaoProxy.teach(); } } \"},\"1845\":{\"h\":\"静态代理优缺点\",\"a\":\"静态代理优缺点\"},\"1846\":{\"t\":\"优点：在不修改目标对象的功能前提下, 能通过代理对象对目标功能扩展\"},\"1847\":{\"t\":\"缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类，一旦接口增加方法，目标对象与代理对象都要维护\"},\"1848\":{\"h\":\"动态代理\",\"a\":\"动态代理\"},\"1849\":{\"h\":\"动态代理基本介绍\",\"a\":\"动态代理基本介绍\"},\"1850\":{\"t\":\"代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理。\"},\"1851\":{\"t\":\"代理对象的生成，是利用 JDK 的 API，动态的在内存中构建代理对象。\"},\"1852\":{\"t\":\"动态代理也叫做：JDK 代理、接口代理。\"},\"1853\":{\"h\":\"JDK 中生成代理对象的 API\",\"a\":\"jdk-中生成代理对象的-api\"},\"1854\":{\"t\":\"代理类所在包：java.lang.reflect.Proxy。\"},\"1855\":{\"t\":\"JDK 实现代理只需要使用 newProxyInstance 方法，但是该方法需要接收三个参数，完整的写法是：\"},\"1856\":{\"t\":\"static Object newProxyInstance(ClassLoader loader, Class[] interfaces,InvocationHandler h) \"},\"1857\":{\"t\":\"人性化解释\"},\"1858\":{\"t\":\"我们已经写了一个对象，这个对象已经成型（目标对象，旧对象）\"},\"1859\":{\"t\":\"时代变化，新功能出现，但是原来的目标对象成型，很难添加新的东西，于是我们需要重新造出一个对象\"},\"1860\":{\"t\":\"要求新的对象有旧的对象的所有功能，同时添加新的功能，于是需要 Proxy 动态代理（母亲）\"},\"1861\":{\"t\":\"怎么造出新对象呢，我们首先需要旧对象的基因（类加载器）和该对象的父类基因（类的父接口）\"},\"1862\":{\"t\":\"研究旧对象和其父亲的基因，造出新的对象，并且在造出的过程添加新的功能，于是新的对象更加全面\"},\"1863\":{\"t\":\"image-20220325225306403\"},\"1864\":{\"h\":\"动态代理应用实例\",\"a\":\"动态代理应用实例\"},\"1865\":{\"t\":\"将前面的静态代理改进成动态代理模式（即：JDK 代理模式）。\"},\"1866\":{\"t\":\"类图\"},\"1867\":{\"t\":\"image-20220316215716168\"},\"1868\":{\"t\":\"代码实现\"},\"1869\":{\"t\":\"// 接口 public interface ITeacherDao { void teach(); // 授课方法 void sayHello(String name); } public class TeacherDao implements ITeacherDao { @Override public void teach() { System.out.println(\\\" 老师授课中.... \\\"); } @Override public void sayHello(String name) { System.out.println(\\\"hello \\\" + name); } } \"},\"1870\":{\"t\":\"动态代理类\"},\"1871\":{\"t\":\"public class ProxyFactory { // 维护一个目标对象，Object private Object target; // 构造器，对 target 进行初始化 public ProxyFactory(Object target) { this.target = target; } // 给目标对象 生成一个代理对象 public Object getProxyInstance() { // 说明 /* * public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h) // 1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定 // 2. Class<?>[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型 // 3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入 */ return Proxy.newProxyInstance( // 需要类加载器 target.getClass().getClassLoader(), // 需要父类接口 target.getClass().getInterfaces(), // 创建新的对象 new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"JDK 代理开始 ~~，开始上课\\\"); // 反射机制调用目标对象的方法 Object returnVal = method.invoke(target, args); System.out.println(\\\"JDK 代理提交，开始下课\\\"); return returnVal; } }); } } \"},\"1872\":{\"t\":\"测试类\"},\"1873\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建目标对象 ITeacherDao target = new TeacherDao(); // 给目标对象，创建代理对象, 可以转成 ITeacherDao ITeacherDao proxyInstance = (ITeacherDao) new ProxyFactory(target).getProxyInstance(); // proxyInstance=class com.sun.proxy.$Proxy0 内存中动态生成了代理对象 System.out.println(\\\"proxyInstance=\\\" + proxyInstance.getClass()); // 通过代理对象，调用目标对象的方法 //proxyInstance.teach(); proxyInstance.sayHello(\\\" tom \\\"); } } \"},\"1874\":{\"h\":\"Cglib 代理\",\"a\":\"cglib-代理\"},\"1875\":{\"h\":\"Cglib 代理基本介绍\",\"a\":\"cglib-代理基本介绍\"},\"1876\":{\"t\":\"静态代理和 JDK 代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个 单独的对象，并没有 实现任何的接口，这个时候可使用目标对象子类来实现代理，这就是 Cglib 代理。\"},\"1877\":{\"t\":\"Cglib 代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将 Cglib 代理归属到动态代理。\"},\"1878\":{\"t\":\"Cglib 是一个强大的高性能的代码生成包，它可以在运行期扩展 Java 类与实现 Java 接口。它广泛的被许多 AOP 的框架使用，例如 Spring AOP，实现方法拦截。\"},\"1879\":{\"t\":\"在 AOP 编程中如何选择代理模式：\"},\"1880\":{\"t\":\"目标对象需要实现接口，用 JDK 代理\"},\"1881\":{\"t\":\"目标对象不需要实现接口，用 Cglib 代理\"},\"1882\":{\"t\":\"Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类。\"},\"1883\":{\"t\":\"image-20220325225354561\"},\"1884\":{\"t\":\"思路\"},\"1885\":{\"t\":\"创建目标对象\"},\"1886\":{\"t\":\"创建增强器，相当于JDK动态代理需要的 父接口\"},\"1887\":{\"t\":\"设置要生成代理对象的目标对象的类\"},\"1888\":{\"t\":\"设置回调方法，里面指定生成目标对象的过程\"},\"1889\":{\"t\":\"执行生成目标对象\"},\"1890\":{\"t\":\"执行目标对象的方法\"},\"1891\":{\"t\":\"人性化解释\"},\"1892\":{\"t\":\"我们已经写了一个对象，这个对象已经成型（目标对象）\"},\"1893\":{\"t\":\"时代变化，新功能出现，但是原来的对象成型，很难添加新的东西，于是我们需要重新造出一个对象\"},\"1894\":{\"t\":\"要求新的对象有旧的对象的所有功能，同时添加新的功能，于是需要 Proxy 动态代理（母亲）\"},\"1895\":{\"t\":\"怎么造出新对象呢，我们先造出代理对象的雏形（形状），然后给雏形找个父亲（目标对象的类）\"},\"1896\":{\"t\":\"让父亲和母亲造出新的对象，然后放进这个雏形（形状）里，并且在造出的过程添加新的功能，于是新的对象更加全面\"},\"1897\":{\"h\":\"Cglib 代理模式应用实例\",\"a\":\"cglib-代理模式应用实例\"},\"1898\":{\"t\":\"将前面的案例用 Cglib 代理模式实现。\"},\"1899\":{\"t\":\"image-20220316220549595\"},\"1900\":{\"t\":\"代码实现\"},\"1901\":{\"t\":\"// Cglib 代理不需要接口 public class TeacherDao { public String teach() { System.out.println(\\\" 老师授课中 ，我是cglib代理，不需要实现接口 \\\"); return \\\"hello\\\"; } } \"},\"1902\":{\"t\":\"Cglib 代码类\"},\"1903\":{\"t\":\"public class ProxyFactory implements MethodInterceptor { // 维护一个目标对象 private Object target; // 构造器，传入一个被代理的对象 public ProxyFactory(Object target) { this.target = target; } // 返回一个代理对象: 是 target 对象的代理对象 public Object getProxyInstance() { // 1. 创建一个增强器，相当于代理对象的雏形 Enhancer enhancer = new Enhancer(); // 2. 设置父类 enhancer.setSuperclass(target.getClass()); // 3. 设置回调函数 enhancer.setCallback(this); // 4. 创建子类对象，即代理对象 return enhancer.create(); } // 重写 intercept 方法，会调用目标对象的方法 @Override public Object intercept(Object arg0, Method method, Object[] args, MethodProxy arg3) throws Throwable { System.out.println(\\\"Cglib 代理模式 ~~ 开始\\\"); Object returnVal = method.invoke(target, args); System.out.println(\\\"Cglib 代理模式 ~~ 提交\\\"); return returnVal; } // 上面设置回调的 this 和重写 intercept 等价于 enhancer.setCallback(new MethodInterceptor() { @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { System.out.println(\\\"Cglib 代理模式 ~~ 开始\\\"); Object returnVal = method.invoke(target, args); System.out.println(\\\"Cglib 代理模式 ~~ 提交\\\"); return returnVal; } }); // 设置回调 } \"},\"1904\":{\"t\":\"测试类\"},\"1905\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建目标对象 TeacherDao target = new TeacherDao(); // 获取到代理对象，并且将目标对象传递给代理对象 TeacherDao proxyInstance = (TeacherDao)new ProxyFactory(target).getProxyInstance(); // 执行代理对象的方法，触发 intecept 方法，从而实现对目标对象的调用 String res = proxyInstance.teach(); System.out.println(\\\"res=\\\" + res); } } \"},\"1906\":{\"t\":\"在内存中动态构建子类，注意代理的类不能为 final，否则报错 java.lang.IllegalArgumentException。\"},\"1907\":{\"t\":\"目标对象的方法如果为 final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法。\"},\"1908\":{\"h\":\"几种常见的代理模式介绍\",\"a\":\"几种常见的代理模式介绍\"},\"1909\":{\"t\":\"防火墙代理\"},\"1910\":{\"t\":\"内网通过代理穿透防火墙，实现对公网的访问。\"},\"1911\":{\"t\":\"缓存代理\"},\"1912\":{\"t\":\"比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源则 OK，如果取不到资源，再到公网或者数据库取，然后缓存。\"},\"1913\":{\"t\":\"远程代理\"},\"1914\":{\"t\":\"远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。\"},\"1915\":{\"t\":\"同步代理\"},\"1916\":{\"t\":\"主要使用在多线程编程中，完成多线程间同步工作。\"},\"1917\":{\"h\":\"代理模式的应用场景\",\"a\":\"代理模式的应用场景\"},\"1918\":{\"t\":\"当无法或不想直接引用某个对象或访问某个对象存在困难时，可以通过代理对象来间接访问。使用代理模式主要有两个目的：一是保护目标对象，二是增强目标对象。\"},\"1919\":{\"t\":\"前面分析了代理模式的结构与特点，现在来分析以下的应用场景：\"},\"1920\":{\"t\":\"远程代理，这种方式通常是为了隐藏目标对象存在于不同地址空间的事实，方便客户端访问。例如，用户申请某些网盘空间时，会在用户的文件系统中建立一个虚拟的硬盘，用户访问虚拟硬盘时实际访问的是网盘空间\"},\"1921\":{\"t\":\"虚拟代理，这种方式通常用于要创建的目标对象开销很大时。例如，下载一幅很大的图像需要很长时间，因某种计算比较复杂而短时间无法完成，这时可以先用小比例的虚拟代理替换真实的对象，消除用户对服务器慢的感觉\"},\"1922\":{\"t\":\"安全代理，这种方式通常用于控制不同种类客户对真实对象的访问权限\"},\"1923\":{\"t\":\"智能指引，主要用于调用目标对象时，代理附加一些额外的处理功能。例如，增加计算真实对象的引用次数的功能，这样当该对象没有被引用时，就可以自动释放它\"},\"1924\":{\"t\":\"延迟加载，指为了提高系统的性能，延迟对目标的加载。例如，Hibernate 中就存在属性的延迟加载和关联表的延时加载\"},\"1925\":{\"h\":\"行为型职责链模式\"},\"1926\":{\"h\":\"职责链模式基本介绍\",\"a\":\"职责链模式基本介绍\"},\"1927\":{\"t\":\"在现实生活中，一个事件需要经过多个对象处理是很常见的场景。例如，采购审批流程、请假流程等。公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据需要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这无疑增加了难度。\"},\"1928\":{\"t\":\"在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2 的拦截器、JSP 和 Servlet 的 Filter 等，所有这些都可以考虑使用职责链模式来实现。\"},\"1929\":{\"t\":\"职责链模式（Chain of Responsibility Pattern）又叫 责任链模式，为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。这种模式对请求的发送者和接收者进行解耦。\"},\"1930\":{\"t\":\"在职责链模式中，通常每个接收者都包含对另一个接收者的引用。客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递过程，请求会自动进行传递，如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。所以职责链将请求的发送者和请求的处理者解耦了。\"},\"1931\":{\"t\":\"这种类型的设计模式属于行为型模式。\"},\"1932\":{\"t\":\"主要优点\"},\"1933\":{\"t\":\"降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息\"},\"1934\":{\"t\":\"增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则\"},\"1935\":{\"t\":\"增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任\"},\"1936\":{\"t\":\"职责链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if-else 语句\"},\"1937\":{\"t\":\"责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则\"},\"1938\":{\"t\":\"主要缺点\"},\"1939\":{\"t\":\"不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理\"},\"1940\":{\"t\":\"对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响\"},\"1941\":{\"t\":\"职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用\"},\"1942\":{\"h\":\"职责链模式的结构与实现\",\"a\":\"职责链模式的结构与实现\"},\"1943\":{\"t\":\"职责链模式主要包含以下角色：\"},\"1944\":{\"t\":\"抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接\"},\"1945\":{\"t\":\"具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者\"},\"1946\":{\"t\":\"客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程\"},\"1947\":{\"t\":\"责任链模式的本质是 解耦请求与处理，让请求在处理链中能进行传递与被处理；理解责任链模式应当理解其模式，而不是其具体实现。责任链模式的独到之处是将其节点处理者组合成了链式结构，并允许节点自身决定是否进行请求处理或转发，相当于让请求流动起来。\"},\"1948\":{\"t\":\"其结构图如下图所示：\"},\"1949\":{\"t\":\"image-20220326184616770\"},\"1950\":{\"t\":\"客户端可按下图所示设置职责链：\"},\"1951\":{\"t\":\"image-20220326184654465\"},\"1952\":{\"t\":\"代码实现\"},\"1953\":{\"t\":\"// 抽象处理者角色 abstract class Handler { private Handler next; public void setNext(Handler next) { this.next = next; } public Handler getNext() { return next; } // 处理请求的方法 public abstract void handleRequest(String request); } // 具体处理者角色 1 class ConcreteHandler1 extends Handler { public void handleRequest(String request) { if (request.equals(\\\"one\\\")) { System.out.println(\\\"具体处理者1负责处理该请求！\\\"); } else { if (getNext() != null) { getNext().handleRequest(request); } else { System.out.println(\\\"没有人处理该请求！\\\"); } } } } // 具体处理者角色 2 class ConcreteHandler2 extends Handler { public void handleRequest(String request) { if (request.equals(\\\"two\\\")) { System.out.println(\\\"具体处理者2负责处理该请求！\\\"); } else { if (getNext() != null) { getNext().handleRequest(request); } else { System.out.println(\\\"没有人处理该请求！\\\"); } } } } public class ChainOfResponsibilityPattern { public static void main(String[] args) { //组装责任链 Handler handler1 = new ConcreteHandler1(); Handler handler2 = new ConcreteHandler2(); handler1.setNext(handler2); //提交请求 handler1.handleRequest(\\\"two\\\"); } } \"},\"1954\":{\"h\":\"学校 OA 系统的采购审批项目\",\"a\":\"学校-oa-系统的采购审批项目\"},\"1955\":{\"t\":\"采购员采购教学器材\"},\"1956\":{\"t\":\"如果金额小于等于 5000，由教学主任审批（0 <= x <= 5000）\"},\"1957\":{\"t\":\"如果金额小于等于 10000，由院长审批（5000 < x <= 10000）\"},\"1958\":{\"t\":\"如果金额小于等于 30000，由副校长审批（10000 < x <= 30000）\"},\"1959\":{\"t\":\"如果金额超过 30000 以上，有校长审批（30000 < x）\"},\"1960\":{\"t\":\"传统方案题分析\"},\"1961\":{\"t\":\"传统方式是：接收到一个采购请求后，根据采购金额来调用对应的 Approver（审批人）完成审批\"},\"1962\":{\"t\":\"传统方式的问题分析：客户端这里会使用到分支判断（比如 Switch）来对不同的采购请求处理，这样就存在如下问题： \"},\"1963\":{\"t\":\"如果各个级别的人员审批金额发生变化，在客户端的也需要变化\"},\"1964\":{\"t\":\"客户端必须明确的知道有多少个审批级别和访问\"},\"1965\":{\"t\":\"这样对一个采购请求进行处理和 Approver（审批人）就存在强耦合关系，不利于代码的扩展和维护\"},\"1966\":{\"t\":\"解决方案：职责链模式。\"},\"1967\":{\"h\":\"职责链模式解决采购审批项目\",\"a\":\"职责链模式解决采购审批项目\"},\"1968\":{\"t\":\"思路分析和类图：\"},\"1969\":{\"t\":\"image-20220326183929550\"},\"1970\":{\"t\":\"代码实现：\"},\"1971\":{\"t\":\"职责链类\"},\"1972\":{\"t\":\"public abstract class Approver { Approver approver; // 下一个处理者 String name; // 名字 public Approver(String name) { this.name = name; } // 下一个处理者 public void setApprover(Approver approver) { this.approver = approver; } // 处理审批请求的方法，得到一个请求，处理是子类完成，因此该方法做成抽象 public abstract void processRequest(PurchaseRequest purchaseRequest); } // 学校管理者（权力最大） public class SchoolMasterApprover extends Approver { public SchoolMasterApprover(String name) { super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { if(purchaseRequest.getPrice() > 30000) { System.out.println(\\\" 请求编号 id= \\\" + purchaseRequest.getId() + \\\" 被 \\\" + this.name + \\\" 处理\\\"); }else { approver.processRequest(purchaseRequest); } } } // 学校副管理者（权力第二） public class ViceSchoolMasterApprover extends Approver { public ViceSchoolMasterApprover(String name) { super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { if(purchaseRequest.getPrice() < 10000 && purchaseRequest.getPrice() <= 30000) { System.out.println(\\\" 请求编号 id= \\\" + purchaseRequest.getId() + \\\" 被 \\\" + this.name + \\\" 处理\\\"); }else { approver.processRequest(purchaseRequest); } } } // 院系管理者（权力第三） public class CollegeApprover extends Approver { public CollegeApprover(String name) { super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { if(purchaseRequest.getPrice() < 5000 && purchaseRequest.getPrice() <= 10000) { System.out.println(\\\" 请求编号 id= \\\" + purchaseRequest.getId() + \\\" 被 \\\" + this.name + \\\" 处理\\\"); }else { approver.processRequest(purchaseRequest); } } } // 班级管理者（权力第四） public class DepartmentApprover extends Approver { public DepartmentApprover(String name) { super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { if(purchaseRequest.getPrice() <= 5000) { System.out.println(\\\" 请求编号 id= \\\" + purchaseRequest.getId() + \\\" 被 \\\" + this.name + \\\" 处理\\\"); }else { approver.processRequest(purchaseRequest); } } } \"},\"1973\":{\"t\":\"请求类\"},\"1974\":{\"t\":\"// 请求类 public class PurchaseRequest { private int type = 0; // 请求类型 private float price = 0.0f; // 请求金额 private int id = 0; // 构造器 public PurchaseRequest(int type, float price, int id) { this.type = type; this.price = price; this.id = id; } public int getType() { return type; } public float getPrice() { return price; } public int getId() { return id; } } \"},\"1975\":{\"t\":\"测试类\"},\"1976\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建一个请求 PurchaseRequest purchaseRequest = new PurchaseRequest(1, 31000, 1); // 创建相关的审批人 DepartmentApprover departmentApprover = new DepartmentApprover(\\\"张主任\\\"); CollegeApprover collegeApprover = new CollegeApprover(\\\"李院长\\\"); ViceSchoolMasterApprover viceSchoolMasterApprover = new ViceSchoolMasterApprover(\\\"王副校\\\"); SchoolMasterApprover schoolMasterApprover = new SchoolMasterApprover(\\\"佟校长\\\"); // 需要将各个审批级别的下一个设置好 (处理人构成环形) departmentApprover.setApprover(collegeApprover); collegeApprover.setApprover(viceSchoolMasterApprover); viceSchoolMasterApprover.setApprover(schoolMasterApprover); schoolMasterApprover.setApprover(departmentApprover); departmentApprover.processRequest(purchaseRequest); } } \"},\"1977\":{\"t\":\"SpringMVC 的 HandlerExecutionChain 类就使用到职责链模式。\"},\"1978\":{\"h\":\"职责链模式的注意事项和细节\",\"a\":\"职责链模式的注意事项和细节\"},\"1979\":{\"t\":\"职责链模式将请求和处理分开，实现解耦，提高系统的灵活性\"},\"1980\":{\"t\":\"职责链模式简化了对象，使对象不需要知道链的结构\"},\"1981\":{\"t\":\"性能会受到影响，特别是在链比较长的时候，因此需控制链中最大节点数量，一般通过在 Handler 中设置一个最大节点数量，在 setNext() 方法中判断是否已经超过阀值，超过则不允许该链建立，避免出现超长链无意识地破坏系统性能\"},\"1982\":{\"t\":\"调试不方便，采用了类似递归的方式，调试时逻辑可能比较复杂\"},\"1983\":{\"h\":\"职责链模式的应用场景\",\"a\":\"职责链模式的应用场景\"},\"1984\":{\"t\":\"责任链模式通常在以下几种情况使用：\"},\"1985\":{\"t\":\"多个对象可以处理一个请求，但具体由哪个对象处理该请求在运行时自动确定\"},\"1986\":{\"t\":\"可动态指定一组对象处理请求，或添加新的处理者\"},\"1987\":{\"t\":\"需要在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求\"},\"1988\":{\"h\":\"七大原则\"},\"1989\":{\"h\":\"设计模式七大原则\",\"a\":\"设计模式七大原则\"},\"1990\":{\"t\":\"设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么 这样设计的依据）。\"},\"1991\":{\"t\":\"设计模式常用的七大原则有：\"},\"1992\":{\"t\":\"单一职责原则\"},\"1993\":{\"t\":\"接口隔离原则\"},\"1994\":{\"t\":\"依赖倒转（倒置）原则\"},\"1995\":{\"t\":\"里氏替换原则\"},\"1996\":{\"t\":\"开闭原则\"},\"1997\":{\"t\":\"迪米特法则\"},\"1998\":{\"t\":\"合成复用原则\"},\"1999\":{\"h\":\"单一职责原则（SRP）\",\"a\":\"单一职责原则-srp\"},\"2000\":{\"h\":\"基本介绍\",\"a\":\"基本介绍\"},\"2001\":{\"t\":\"单一职责原则（Single Responsibility Principle，SRP）又称单一功能原则，由罗伯特·C.马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。\"},\"2002\":{\"t\":\"对类来说的，即一个类应该只负责一项职责。如类 A 负责两个不同职责：职责 1，职责 2。当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2。\"},\"2003\":{\"t\":\"就像一个 DAO 类负责一个表的增删改查，不能出现其他表的增删改查。\"},\"2004\":{\"t\":\"该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：\"},\"2005\":{\"t\":\"一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力\"},\"2006\":{\"t\":\"当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费\"},\"2007\":{\"h\":\"单一职责原则的优点\",\"a\":\"单一职责原则的优点\"},\"2008\":{\"t\":\"单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点：\"},\"2009\":{\"t\":\"降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多\"},\"2010\":{\"t\":\"提高类的可读性。复杂性降低，自然其可读性会提高\"},\"2011\":{\"t\":\"提高系统的可维护性。可读性提高，那自然更容易维护了\"},\"2012\":{\"t\":\"变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响\"},\"2013\":{\"h\":\"应用实例\",\"a\":\"应用实例\"},\"2014\":{\"t\":\"代码示例 1\"},\"2015\":{\"t\":\"下方代码 违反了单一职责原则，run 方法不能既负责摩托车、汽车（陆地），又负责飞机（飞机）。\"},\"2016\":{\"t\":\"public class SingleResponsibility1 { public static void main(String[] args) { Vehicle vehicle = new Vehicle(); vehicle.run(\\\"摩托车\\\"); vehicle.run(\\\"汽车\\\"); vehicle.run(\\\"飞机\\\"); } } class Vehicle { public void run(String vehicle) { System.out.println(vehicle + \\\" 在公路上运行....\\\"); } } \"},\"2017\":{\"t\":\"改进：我们要根据交通工具运行方法不同，分解成不同类即可，看代码示例 2。\"},\"2018\":{\"t\":\"代码示例 2\"},\"2019\":{\"t\":\"下面代码虽然遵守单一职责原则，但是这样做的改动很大，即将 类分解 成三个，同时修改和新增 main 方法的对象。\"},\"2020\":{\"t\":\"public class SingleResponsibility2 { public static void main(String[] args) { RoadVehicle roadVehicle = new RoadVehicle(); roadVehicle.run(\\\"摩托车\\\"); roadVehicle.run(\\\"汽车\\\"); AirVehicle airVehicle = new AirVehicle(); airVehicle.run(\\\"飞机\\\"); } } class RoadVehicle { public void run(String vehicle) { System.out.println(vehicle + \\\"公路运行\\\"); } } class AirVehicle { public void run(String vehicle) { System.out.println(vehicle + \\\"天空运行\\\"); } } class WaterVehicle { public void run(String vehicle) { System.out.println(vehicle + \\\"水中运行\\\"); } } \"},\"2021\":{\"t\":\"改进：直接修改 Vehicle 类，改动的代码会比较少。\"},\"2022\":{\"t\":\"代码示例 3\"},\"2023\":{\"t\":\"下面代码的修改方法没有对原来的类做大的修改，只是增加方法。\"},\"2024\":{\"t\":\"这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责。\"},\"2025\":{\"t\":\"public class SingleResponsibility3 { public static void main(String[] args) { Vehicle2 vehicle2 = new Vehicle2(); vehicle2.run(\\\"汽车\\\"); vehicle2.runWater(\\\"轮船\\\"); vehicle2.runAir(\\\"飞机\\\"); } } class Vehicle2 { public void run(String vehicle) { // 处理 System.out.println(vehicle + \\\" 在公路上运行....\\\"); } public void runAir(String vehicle) { System.out.println(vehicle + \\\" 在天空上运行....\\\"); } public void runWater(String vehicle) { System.out.println(vehicle + \\\" 在水中行....\\\"); } } \"},\"2026\":{\"h\":\"单一职责原则注意事项和细节\",\"a\":\"单一职责原则注意事项和细节\"},\"2027\":{\"t\":\"降低类的复杂度，一个类只负责一项职责\"},\"2028\":{\"t\":\"提高类的可读性，可维护性\"},\"2029\":{\"t\":\"降低变更引起的风险\"},\"2030\":{\"t\":\"通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则\"},\"2031\":{\"h\":\"接口隔离原则（ISP）\",\"a\":\"接口隔离原则-isp\"},\"2032\":{\"h\":\"基本介绍\",\"a\":\"基本介绍-1\"},\"2033\":{\"t\":\"接口隔离原则（Interface Segregation Principle）：客户端不应该依赖它不需要的接口，即 一个类对另一个类的依赖应该建立在最小的接口上。\"},\"2034\":{\"t\":\"最小接口指：接口里的方法不应该囤积许多类需要的不同方法，尽量保证一个接口只能由一个或多个类共同使用的方法。\"},\"2035\":{\"t\":\"先看一张图（违反接口隔离原则）：\"},\"2036\":{\"t\":\"image-20220224195635097\"},\"2037\":{\"t\":\"类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C 来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。\"},\"2038\":{\"t\":\"按隔离原则应当这样处理：将接口 Interface1 拆分为独立的几个接口（这里我们拆分成 3 个接口），类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。\"},\"2039\":{\"t\":\"接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：\"},\"2040\":{\"t\":\"单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离\"},\"2041\":{\"t\":\"单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建\"},\"2042\":{\"h\":\"接口隔离原则的优点\",\"a\":\"接口隔离原则的优点\"},\"2043\":{\"t\":\"接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：\"},\"2044\":{\"t\":\"将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性\"},\"2045\":{\"t\":\"接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性\"},\"2046\":{\"t\":\"如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险\"},\"2047\":{\"t\":\"使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义\"},\"2048\":{\"t\":\"能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码\"},\"2049\":{\"h\":\"应用实例\",\"a\":\"应用实例-1\"},\"2050\":{\"t\":\"类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，编写代码的应用实例。\"},\"2051\":{\"t\":\"没有使用接口隔离原则代码\"},\"2052\":{\"t\":\"public class Segregation1 { public static void main(String[] args) { } } // 接口 interface Interface1 { void operation1(); void operation2(); void operation3(); void operation4(); void operation5(); } class B implements Interface1 { public void operation1() { System.out.println(\\\"B 实现了 operation1\\\"); } public void operation2() { System.out.println(\\\"B 实现了 operation2\\\"); } public void operation3() { System.out.println(\\\"B 实现了 operation3\\\"); } public void operation4() { System.out.println(\\\"B 实现了 operation4\\\"); } public void operation5() { System.out.println(\\\"B 实现了 operation5\\\"); } } class D implements Interface1 { public void operation1() { System.out.println(\\\"D 实现了 operation1\\\"); } public void operation2() { System.out.println(\\\"D 实现了 operation2\\\"); } public void operation3() { System.out.println(\\\"D 实现了 operation3\\\"); } public void operation4() { System.out.println(\\\"D 实现了 operation4\\\"); } public void operation5() { System.out.println(\\\"D 实现了 operation5\\\"); } } class A { // A 类通过接口 Interface1 依赖(使用) B 类，但是只会用到 1,2,3 方法 public void depend1(Interface1 i) { i.operation1(); } public void depend2(Interface1 i) { i.operation2(); } public void depend3(Interface1 i) { i.operation3(); } } class C { // C 类通过接口 Interface1 依赖(使用) D 类，但是只会用到 1,4,5 方法 public void depend1(Interface1 i) { i.operation1(); } public void depend4(Interface1 i) { i.operation4(); } public void depend5(Interface1 i) { i.operation5(); } } \"},\"2053\":{\"t\":\"类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C 来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。\"},\"2054\":{\"t\":\"使用接口隔离原则代码\"},\"2055\":{\"t\":\"将接口 Interface1 拆分为独立的几个接口，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。\"},\"2056\":{\"t\":\"接口 Interface1 中出现的方法，根据实际情况拆分为三个接口。\"},\"2057\":{\"t\":\"image-20220224200505149\"},\"2058\":{\"t\":\"public class Segregation1 { public static void main(String[] args) { // 使用一把 A a = new A(); a.depend1(new B()); // A 类通过接口去依赖 B 类 a.depend2(new B()); a.depend3(new B()); C c = new C(); c.depend1(new D()); // C 类通过接口去依赖(使用) D 类 c.depend4(new D()); c.depend5(new D()); } } // 接口 1 interface Interface1 { void operation1(); } // 接口 2 interface Interface2 { void operation2(); void operation3(); } // 接口 3 interface Interface3 { void operation4(); void operation5(); } class B implements Interface1, Interface2 { public void operation1() { System.out.println(\\\"B 实现了 operation1\\\"); } public void operation2() { System.out.println(\\\"B 实现了 operation2\\\"); } public void operation3() { System.out.println(\\\"B 实现了 operation3\\\"); } } class D implements Interface1, Interface3 { public void operation1() { System.out.println(\\\"D 实现了 operation1\\\"); } public void operation4() { System.out.println(\\\"D 实现了 operation4\\\"); } public void operation5() { System.out.println(\\\"D 实现了 operation5\\\"); } } class A { // A 类通过接口 Interface1,Interface2 依赖(使用) B类，但是只会用到 1,2,3 方法 public void depend1(Interface1 i) { i.operation1(); } public void depend2(Interface2 i) { i.operation2(); } public void depend3(Interface2 i) { i.operation3(); } } class C { // C 类通过接口 Interface1,Interface3 依赖(使用) D 类，但是只会用到 1,4,5 方法 public void depend1(Interface1 i) { i.operation1(); } public void depend4(Interface3 i) { i.operation4(); } public void depend5(Interface3 i) { i.operation5(); } } \"},\"2059\":{\"h\":\"依赖倒转原则（DIP）\",\"a\":\"依赖倒转原则-dip\"},\"2060\":{\"h\":\"基本介绍\",\"a\":\"基本介绍-2\"},\"2061\":{\"t\":\"依赖倒转原则（Dependence Inversion Principle）是指：\"},\"2062\":{\"t\":\"高层模块不应该依赖低层模块，二者都应该依赖其抽象\"},\"2063\":{\"t\":\"抽象不应该依赖细节，细节应该依赖抽象\"},\"2064\":{\"t\":\"依赖倒转（倒置）的中心思想是 面向接口编程\"},\"2065\":{\"t\":\"依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 Java 中，抽象指的是接口或抽象类，细节就是具体的实现类\"},\"2066\":{\"t\":\"使用 接口或抽象类 的目的是制定好 规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成\"},\"2067\":{\"t\":\"类与类之间不建议之间互相引用，而是通过接口来间接引用，这样给接口传入不同的类，就能使用该类的方法。\"},\"2068\":{\"h\":\"依赖倒转原则的作用\",\"a\":\"依赖倒转原则的作用\"},\"2069\":{\"t\":\"依赖倒置原则的主要作用如下：\"},\"2070\":{\"t\":\"依赖倒置原则可以降低类间的耦合性\"},\"2071\":{\"t\":\"依赖倒置原则可以提高系统的稳定性\"},\"2072\":{\"t\":\"依赖倒置原则可以减少并行开发引起的风险\"},\"2073\":{\"t\":\"依赖倒置原则可以提高代码的可读性和可维护性\"},\"2074\":{\"h\":\"简单应用实例\",\"a\":\"简单应用实例\"},\"2075\":{\"t\":\"需求：Person 接收消息。\"},\"2076\":{\"t\":\"方式一：违反依赖倒转原则\"},\"2077\":{\"t\":\"简单，比较容易想到，但是 Person 类的 receive 方法竟然直接引用 Email 类，导致双方高耦合，彼此无法分离。\"},\"2078\":{\"t\":\"public class DependecyInversion { public static void main(String[] args) { Person person = new Person(); person.receive(new Email()); } } class Email { public String getInfo() { return \\\"电子邮件信息: hello,world\\\"; } } class Person { public void receive(Email email ) { System.out.println(email.getInfo()); } } \"},\"2079\":{\"t\":\"如果我们获取的对象是 微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法。\"},\"2080\":{\"t\":\"解决思路：引入一个抽象的接口 IReceiver，表示接收者，这样 Person 类与接口 IReceiver 发生依赖，因为 Email，WeiXin 等等属于接收的范围，他们各自实现 IReceiver 接口就好了，这样我们就符合依赖倒转原则。\"},\"2081\":{\"t\":\"方式二\"},\"2082\":{\"t\":\"public class DependecyInversion { public static void main(String[] args) { // 客户端无需改变 Person person = new Person(); person.receive(new Email()); person.receive(new WeiXin()); } } // 定义接口 interface IReceiver { public String getInfo(); } class Email implements IReceiver { public String getInfo() { return \\\"电子邮件信息: hello,world\\\"; } } // 增加微信 class WeiXin implements IReceiver { public String getInfo() { return \\\"微信信息: hello,ok\\\"; } } // 方式 2 class Person { // 这里我们是对接口的依赖 public void receive(IReceiver receiver ) { System.out.println(receiver.getInfo()); } } \"},\"2083\":{\"t\":\"注意 33 行的参数类型，这样只需要传入继承接口的类，就能实现该类的方法，调用多个类只需要一个接口类。\"},\"2084\":{\"h\":\"依赖关系传递的三种方式和应用案例\",\"a\":\"依赖关系传递的三种方式和应用案例\"},\"2085\":{\"t\":\"上方只是简单介绍依赖倒转原则的基本使用，下面是核心方式使用：\"},\"2086\":{\"t\":\"接口传递\"},\"2087\":{\"t\":\"构造方法传递\"},\"2088\":{\"t\":\"setter 方式传递\"},\"2089\":{\"t\":\"public class DependencyPass { public static void main(String[] args) { Kele kele = new Kele(); OpenAndClose1 openAndClose1 = new OpenAndClose1(); openAndClose1.open(kele); // 通过构造器进行依赖传递 BingTang bingTang = new BingTang(); OpenAndClose2 openAndClose2 = new OpenAndClose2(bingTang); openAndClose2.open(); // 通过 setter 方法进行依赖传递 XueLi xueLi = new XueLi(); OpenAndClose3 openAndClose = new OpenAndClose3(); openAndClose.setTv(xueLi); openAndClose.open(); } } // 方式 1：通过接口传递实现依赖 // 开关的接口 interface IOpenAndClose1 { public void open(ITV1 tv); // 抽象方法，接收接口 } interface ITV1 { // ITV 接口 public void play(); } class Kele implements ITV1 { @Override public void play() { System.out.println(\\\"可乐电视机，打开\\\"); } } class OpenAndClose1 implements IOpenAndClose1 { public void open(ITV1 tv){ tv.play(); } } // 方式 2: 通过构造方法依赖传递 interface IOpenAndClose2 { public void open(); // 抽象方法 } interface ITV2 { // ITV 接口 public void play(); } class OpenAndClose2 implements IOpenAndClose2 { public ITV2 tv; // 成员 public OpenAndClose2(ITV2 tv){ // 构造器 this.tv = tv; } public void open(){ this.tv.play(); } } class BingTang implements ITV2 { @Override public void play() { System.out.println(\\\"冰糖电视机，打开\\\"); } } // 方式 3，通过 setter 方法传递 interface IOpenAndClose3 { public void open(); // 抽象方法 public void setTv(ITV3 tv); } interface ITV3 { // ITV接口 public void play(); } class OpenAndClose3 implements IOpenAndClose3 { private ITV3 tv; public void setTv(ITV3 tv) { this.tv = tv; } public void open() { this.tv.play(); } } class XueLi implements ITV3 { @Override public void play() { System.out.println(\\\"雪梨电视机，打开\\\"); } } \"},\"2090\":{\"t\":\"输出：\"},\"2091\":{\"t\":\"可乐电视机，打开 冰糖电视机，打开 雪梨电视机，打开 \"},\"2092\":{\"h\":\"依赖倒转原则的注意事项和细节\",\"a\":\"依赖倒转原则的注意事项和细节\"},\"2093\":{\"t\":\"低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好\"},\"2094\":{\"t\":\"变量的 声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在 一个缓冲层，利于程序扩展和优化\"},\"2095\":{\"t\":\"继承时遵循 里氏替换原则\"},\"2096\":{\"h\":\"里氏替换原则（LSP）\",\"a\":\"里氏替换原则-lsp\"},\"2097\":{\"h\":\"OO 中的继承性的思考和说明\",\"a\":\"oo-中的继承性的思考和说明\"},\"2098\":{\"t\":\"继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。\"},\"2099\":{\"t\":\"继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来 侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。\"},\"2100\":{\"t\":\"问题：在编程中，如何正确的使用继承？\"},\"2101\":{\"t\":\"使用里氏替原则。\"},\"2102\":{\"h\":\"基本介绍\",\"a\":\"基本介绍-3\"},\"2103\":{\"t\":\"里氏替换原则（Liskov Substitution Principle）由麻省理工学院计算机科学实验室的里斯科夫（Liskov）女士在 1987 年的「面向对象技术的高峰会议」（OOPSLA）上发表的一篇文章《数据抽象和层次》（Data Abstraction and Hierarchy）里提出来的，她提出：继承必须确保超类所拥有的性质在子类中仍然成立（Inheritance should ensure that any property proved about supertype objects also holds for subtype objects）。\"},\"2104\":{\"t\":\"如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。\"},\"2105\":{\"t\":\"在使用继承时，遵循里氏替换原则，在 子类中尽量不要重写父类的方法。\"},\"2106\":{\"t\":\"里氏替换原则 主要阐述了有关继承的一些原则，因为继承实际上让两个类耦合性增强了，所以告诉我们什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。\"},\"2107\":{\"t\":\"在适当的情况下，可以通过聚合、组合、依赖来解决问题。\"},\"2108\":{\"t\":\"举例\"},\"2109\":{\"t\":\"假设 B 类需要 A 类的某些方法（日后基本不会改），则把这些方法放到一个抽象类 C，再让 A、B 类继承抽象类 C，防止 B 直接继承 A 类，提高耦合度。\"},\"2110\":{\"h\":\"里氏替换原则的作用\",\"a\":\"里氏替换原则的作用\"},\"2111\":{\"t\":\"里氏替换原则的主要作用如下：\"},\"2112\":{\"t\":\"里氏替换原则是实现开闭原则的重要方式之一\"},\"2113\":{\"t\":\"它克服了继承中重写父类造成的可复用性变差的缺点\"},\"2114\":{\"t\":\"它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性\"},\"2115\":{\"t\":\"加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险\"},\"2116\":{\"h\":\"应用实例\",\"a\":\"应用实例-2\"},\"2117\":{\"t\":\"看下面代码，思考问题和解决思路\"},\"2118\":{\"t\":\"public class Liskov { public static void main(String[] args) { A a = new A(); System.out.println(\\\"11-3=\\\" + a.func1(11, 3)); System.out.println(\\\"1-8=\\\" + a.func1(1, 8)); System.out.println(\\\"-----------------------\\\"); B b = new B(); System.out.println(\\\"11-3=\\\" + b.func1(11, 3)); // 这里本意是求出 11-3，但是不小心c System.out.println(\\\"1-8=\\\" + b.func1(1, 8)); // 1-8 System.out.println(\\\"11+3+9=\\\" + b.func2(11, 3)); } } // A 类 class A { // 返回两个数的差 public int func1(int num1, int num2) { return num1 - num2; } } // B 类继承了 A // 增加了一个新功能：完成两个数相加，然后和 9 求和 class B extends A { // 这里，重写了 A 类的方法, 可能是无意识 public int func1(int a, int b) { return a + b; } public int func2(int a, int b) { return func1(a, b) + 9; } } \"},\"2119\":{\"t\":\"解决方法\"},\"2120\":{\"t\":\"我们发现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候。\"},\"2121\":{\"t\":\"通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合、组合等 关系代替。\"},\"2122\":{\"t\":\"改进方案：\"},\"2123\":{\"t\":\"image-20220224203106674\"},\"2124\":{\"t\":\"public class Liskov { public static void main(String[] args) { A a = new A(); System.out.println(\\\"11-3=\\\" + a.func1(11, 3)); System.out.println(\\\"1-8=\\\" + a.func1(1, 8)); System.out.println(\\\"-----------------------\\\"); B b = new B(); // 因为 B 类不再继承A类，因此调用者，不会再 func1 是求减法 // 调用完成的功能就会很明确 System.out.println(\\\"11+3=\\\" + b.func1(11, 3)); // 这里本意是求出 11+3 System.out.println(\\\"1+8=\\\" + b.func1(1, 8)); // 1+8 System.out.println(\\\"11+3+9=\\\" + b.func2(11, 3)); // 使用组合仍然可以使用到 A 类相关方法 System.out.println(\\\"11-3=\\\" + b.func3(11, 3));// 这里本意是求出 11-3 } } // 创建一个更加基础的基类 class Base { // 把更加基础的方法和成员写到 Base 类 } // A 类 class A extends Base { // 返回两个数的差 public int func1(int num1, int num2) { return num1 - num2; } } // B 类继承了 A // 增加了一个新功能：完成两个数相加，然后和 9 求和 class B extends Base { // 如果 B 需要使用 A 类的方法，使用组合关系 private A a = new A(); // 这里，重写了 A 类的方法, 可能是无意识 public int func1(int a, int b) { return a + b; } public int func2(int a, int b) { return func1(a, b) + 9; } // 我们仍然想使用 A 的方法 public int func3(int a, int b) { return this.a.func1(a, b); } } \"},\"2125\":{\"h\":\"开闭原则（OCP）\",\"a\":\"开闭原则-ocp\"},\"2126\":{\"h\":\"基本介绍\",\"a\":\"基本介绍-4\"},\"2127\":{\"t\":\"开闭原则（Open Closed Principle，OCP）由勃兰特·梅耶（Bertrand Meyer）提出，他在 1988 年的著作《面向对象软件构造》（Object Oriented Software Construction）中提出：软件实体应当对扩展开放，对修改关闭（Software entities should be open for extension，but closed for modification），这就是开闭原则的经典定义。\"},\"2128\":{\"t\":\"开闭原则（Open Closed Principle）是编程中 最基础、最重要 的设计原则。\"},\"2129\":{\"t\":\"一个软件实体如类，模块和函数应该 对扩展开放（对提供方），对 修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。\"},\"2130\":{\"t\":\"当软件需要变化时，尽量 通过扩展软件 实体的行为来实现变化，而不是 通过修改 已有的代码来实现变化。\"},\"2131\":{\"t\":\"编程中遵循其它原则，以及使用设计模式的目的就是遵循 开闭原则。\"},\"2132\":{\"h\":\"开闭原则的作用\",\"a\":\"开闭原则的作用\"},\"2133\":{\"t\":\"开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：\"},\"2134\":{\"t\":\"对软件测试的影响\"},\"2135\":{\"t\":\"软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。\"},\"2136\":{\"t\":\"可以提高代码的可复用性\"},\"2137\":{\"t\":\"粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。\"},\"2138\":{\"t\":\"可以提高软件的可维护性\"},\"2139\":{\"t\":\"遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。\"},\"2140\":{\"h\":\"应用示例\",\"a\":\"应用示例\"},\"2141\":{\"t\":\"类图设计，如下：\"},\"2142\":{\"t\":\"image-20220224203440696\"},\"2143\":{\"t\":\"代码演示\"},\"2144\":{\"t\":\"public class Ocp { public static void main(String[] args) { // 使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); } } // 这是一个用于绘图的类 [使用方] class GraphicEditor { // 接收 Shape 对象，然后根据 type，来绘制不同的图形 public void drawShape(Shape s) { if (s.m_type == 1) drawRectangle(s); else if (s.m_type == 2) drawCircle(s); } // 绘制矩形 public void drawRectangle(Shape r) { System.out.println(\\\" 绘制矩形 \\\"); } // 绘制圆形 public void drawCircle(Shape r) { System.out.println(\\\" 绘制圆形 \\\"); } } // Shape 类，基类 class Shape { int m_type; } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } } class Circle extends Shape { Circle() { super.m_type = 2; } } \"},\"2145\":{\"t\":\"上方代码优缺点\"},\"2146\":{\"t\":\"优点是比较好理解，简单易操作\"},\"2147\":{\"t\":\"缺点是违反了设计模式的 OCP 原则，即对扩展开放（提供方），对修改关闭（使用方）。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码\"},\"2148\":{\"t\":\"比如我们这时要新增加一个图形种类三角形，我们需要做如下修改，修改的地方较多（四处）\"},\"2149\":{\"t\":\"public class Ocp { public static void main(String[] args) { // 使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); graphicEditor.drawShape(new Triangle()); } } // 这是一个用于绘图的类 [使用方] class GraphicEditor { // 接收 Shape 对象，然后根据 type，来绘制不同的图形 public void drawShape(Shape s) { if (s.m_type == 1) drawRectangle(s); else if (s.m_type == 2) drawCircle(s); } // 绘制矩形 public void drawRectangle(Shape r) { System.out.println(\\\" 绘制矩形 \\\"); } // 绘制圆形 public void drawCircle(Shape r) { System.out.println(\\\" 绘制圆形 \\\"); } // 绘制三角形 public void drawTriangle(Shape r) { System.out.println(\\\" 绘制三角形 \\\"); } } // Shape 类，基类 class Shape { int m_type; } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } } class Circle extends Shape { Circle() { super.m_type = 2; } } // 新增画三角形 class Triangle extends Shape { Triangle() { super.m_type = 3; } } \"},\"2150\":{\"h\":\"应用实例改进\",\"a\":\"应用实例改进\"},\"2151\":{\"t\":\"思路：把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可，使用方的代码就不需要修，满足了开闭原则。\"},\"2152\":{\"t\":\"public class Ocp { public static void main(String[] args) { // 使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); graphicEditor.drawShape(new Triangle()); graphicEditor.drawShape(new OtherGraphic()); } } // 这是一个用于绘图的类 [使用方] class GraphicEditor { //接收 Shape 对象，调用 draw 方法 public void drawShape(Shape s) { s.draw(); } } // Shape 类，基类 abstract class Shape { int m_type; public abstract void draw();//抽象方法 } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } @Override public void draw() { System.out.println(\\\" 绘制矩形 \\\"); } } class Circle extends Shape { Circle() { super.m_type = 2; } @Override public void draw() { System.out.println(\\\" 绘制圆形 \\\"); } } // 新增画三角形 class Triangle extends Shape { Triangle() { super.m_type = 3; } @Override public void draw() { System.out.println(\\\" 绘制三角形 \\\"); } } // 新增一个图形 class OtherGraphic extends Shape { OtherGraphic() { super.m_type = 4; } @Override public void draw() { System.out.println(\\\" 绘制其它图形 \\\"); } } \"},\"2153\":{\"t\":\"和依赖倒转原则类似，遵循其它原则，以及使用设计模式的目的就是遵循 开闭原则。\"},\"2154\":{\"h\":\"迪米特法则（DP）\",\"a\":\"迪米特法则-dp\"},\"2155\":{\"h\":\"基本介绍\",\"a\":\"基本介绍-5\"},\"2156\":{\"t\":\"一个对象应该对其他对象保持最少的了解，类与类关系越密切，耦合度越大\"},\"2157\":{\"t\":\"迪米特法则（Demeter Principle）又叫 最少知道原则，即一个类 对自己依赖的类（引用的其他类）知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息\"},\"2158\":{\"t\":\"主要优点\"},\"2159\":{\"t\":\"降低了类之间的耦合度，提高了模块的相对独立性\"},\"2160\":{\"t\":\"由于亲合度降低，从而提高了类的可复用率和系统的扩展性\"},\"2161\":{\"t\":\"迪米特法则还有个更简单的定义：只与直接的朋友通信。\"},\"2162\":{\"t\":\"直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部\"},\"2163\":{\"t\":\"直接朋友和非直接朋友举例\"},\"2164\":{\"t\":\"B 是 A 的直接朋友：\"},\"2165\":{\"t\":\"public class A { // 成员变量 B b; // 方法参数 public void method1(B b) { } // 方法返回值 public B method2() { return new B(); } } \"},\"2166\":{\"t\":\"非直接朋友：\"},\"2167\":{\"t\":\"public class A { public void method() { // 局部变量不是直接朋友 B b = new B(); } } \"},\"2168\":{\"t\":\"迪米特法则能够帮我们实现代码的 高内聚、松耦合。\"},\"2169\":{\"t\":\"那到底什么是「高内聚」呢？\"},\"2170\":{\"t\":\"所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一个类中。相近的功能往往会被同时修改，放到同一个类中，修改会比较集中，代码容易维护。实际上，我们前面讲过的单一职责原则是实现代码高内聚非常有效的设计原则。\"},\"2171\":{\"t\":\"我们再来看一下，什么是「松耦合」？\"},\"2172\":{\"t\":\"所谓松耦合是说，在代码中，类与类之间的依赖关系简单清晰。即使两个类有依赖关系，一个类的代码改动不会或者很少导致依赖类的代码改动。实际上，我们前面讲的依赖注入、接口隔离、基于接口而非实现编程，以及今天讲的迪米特法则，都是为了实现代码的松耦合。\"},\"2173\":{\"t\":\"最后，我们来看一下，「内聚」和「耦合」之间的关系\"},\"2174\":{\"t\":\"前面也提到，「高内聚」有助于「松耦合」，同理，「低内聚」也会导致「紧耦合」。关于这一点，我画了一张对比图来解释。图中左边部分的代码结构是「高内聚、松耦合」；右边部分正好相反，是「低内聚、紧耦合」\"},\"2175\":{\"t\":\"图中左边部分的代码设计中，类的粒度比较小，每个类的职责都比较单一。相近的功能都放到了一个类中，不相近的功能被分割到了多个类中。这样类更加独立，代码的内聚性更好。因为职责单一，所以每个类被依赖的类就会比较少，代码低耦合。一个类的修改，只会影响到一个依赖类的代码改动。我们只需要测试这一个依赖类是否还能正常工作就行了\"},\"2176\":{\"t\":\"图中右边部分的代码设计中，类粒度比较大，低内聚，功能大而全，不相近的功能放到了一个类中。这就导致很多其他类都依赖这个类。当我们修改这个类的某一个功能代码的时候，会影响依赖它的多个类。我们需要测试这三个依赖类，是否还能正常工作。这也就是所谓的「牵一发而动全身」\"},\"2177\":{\"t\":\"除此之外，从图中我们也可以看出，高内聚、低耦合的代码结构更加简单、清晰，相应地，在可维护性和可读性上确实要好很多\"},\"2178\":{\"t\":\"所以，在运用迪米特法则时要注意以下 6 点：\"},\"2179\":{\"t\":\"在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标\"},\"2180\":{\"t\":\"在类的结构设计上，尽量降低类成员的访问权限\"},\"2181\":{\"t\":\"在类的设计上，优先考虑将一个类设置成不变类\"},\"2182\":{\"t\":\"在对其他类的引用上，将引用其他对象的次数降到最低\"},\"2183\":{\"t\":\"不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）\"},\"2184\":{\"t\":\"谨慎使用序列化（Serializable）功能\"},\"2185\":{\"h\":\"应用实例\",\"a\":\"应用实例-3\"},\"2186\":{\"t\":\"需求：有一个学校，下属有各个学院和总部，现要求打印出学校总部员工 ID 和学院员工的 id。\"},\"2187\":{\"t\":\"违反了 迪米特法则 的内容是 SchoolManager 类的内容（57 - 90 行代码）\"},\"2188\":{\"t\":\"// 客户端 public class Demeter1 { public static void main(String[] args) { // 创建了一个 SchoolManager 对象 SchoolManager schoolManager = new SchoolManager(); // 输出学院的员工 id 和 学校总部的员工信息 schoolManager.printAllEmployee(new CollegeManager()); } } // 学校总部员工类 class Employee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } // 学院的员工类 class CollegeEmployee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } // 管理学院员工的管理类 class CollegeManager { // 返回学院的所有员工 public List<CollegeEmployee> getAllEmployee() { List<CollegeEmployee> list = new ArrayList<CollegeEmployee>(); // 这里我们增加了 10 个员工到 list for (int i = 0; i < 10; i++) { CollegeEmployee emp = new CollegeEmployee(); emp.setId(\\\"学院员工id= \\\" + i); list.add(emp); } return list; } } // 学校管理类 // 分析 SchoolManager 类的直接朋友类有哪些：Employee、CollegeManager // CollegeEmployee 不是直接朋友 而是一个陌生类，这样违背了 迪米特法则 class SchoolManager { // 返回学校总部的员工 public List<Employee> getAllEmployee() { List<Employee> list = new ArrayList<Employee>(); // 这里我们增加了 5 个员工到 list for (int i = 0; i < 5; i++) { Employee emp = new Employee(); emp.setId(\\\"学校总部员工id= \\\" + i); list.add(emp); } return list; } // 该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) { // 分析问题 // 1. 这里的 CollegeEmployee 不是 SchoolManager 的直接朋友 // 2. CollegeEmployee 是以局部变量方式出现在 SchoolManager // 3. 违反了 迪米特法则 // 获取到学院员工 List<CollegeEmployee> list1 = sub.getAllEmployee(); System.out.println(\\\"------------学院员工------------\\\"); for (CollegeEmployee e : list1) { System.out.println(e.getId()); } // 获取到学校总部员工 List<Employee> list2 = this.getAllEmployee(); System.out.println(\\\"------------学校总部员工------------\\\"); for (Employee e : list2) { System.out.println(e.getId()); } } } \"},\"2189\":{\"t\":\"上方代码违反了 迪米特法则。\"},\"2190\":{\"h\":\"应用实例改进\",\"a\":\"应用实例改进-1\"},\"2191\":{\"t\":\"前面设计的问题在于 SchoolManager 中，CollegeEmployee 类并不是 SchoolManager 类的直接朋友（分析）。\"},\"2192\":{\"t\":\"按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。\"},\"2193\":{\"t\":\"主要看 SchoolManager 类的内容（65 - 91 行代码）\"},\"2194\":{\"t\":\"// 客户端 public class Demeter1 { public static void main(String[] args) { System.out.println(\\\"~~~使用迪米特法则的改进~~~\\\"); // 创建了一个 SchoolManager 对象 SchoolManager schoolManager = new SchoolManager(); // 输出学院的员工 id 和 学校总部的员工信息 schoolManager.printAllEmployee(new CollegeManager()); } } // 学校总部员工类 class Employee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } // 学院的员工类 class CollegeEmployee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } // 管理学院员工的管理类 class CollegeManager { // 返回学院的所有员工 public List<CollegeEmployee> getAllEmployee() { List<CollegeEmployee> list = new ArrayList<CollegeEmployee>(); // 这里我们增加了 10 个员工到 list for (int i = 0; i < 10; i++) { CollegeEmployee emp = new CollegeEmployee(); emp.setId(\\\"学院员工id= \\\" + i); list.add(emp); } return list; } // 输出学院员工的信息 public void printEmployee() { // 获取到学院员工 List<CollegeEmployee> list1 = getAllEmployee(); System.out.println(\\\"------------学院员工------------\\\"); for (CollegeEmployee e : list1) { System.out.println(e.getId()); } } } // 学校管理类 class SchoolManager { // 返回学校总部的员工 public List<Employee> getAllEmployee() { List<Employee> list = new ArrayList<Employee>(); // 这里我们增加了 5 个员工到 list for (int i = 0; i < 5; i++) { Employee emp = new Employee(); emp.setId(\\\"学校总部员工id= \\\" + i); list.add(emp); } return list; } // 该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) { // 分析问题 // 1. 将输出学院的员工方法，封装到 CollegeManager sub.printEmployee(); // 获取到学校总部员工 List<Employee> list2 = this.getAllEmployee(); System.out.println(\\\"------------学校总部员工------------\\\"); for (Employee e : list2) { System.out.println(e.getId()); } } } \"},\"2195\":{\"h\":\"迪米特法则注意事项和细节\",\"a\":\"迪米特法则注意事项和细节\"},\"2196\":{\"t\":\"迪米特法则的核心是降低类之间的耦合，不建议在方法里 new 其他的类\"},\"2197\":{\"t\":\"但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间（对象间）耦合关系，并不是要求完全没有依赖关系\"},\"2198\":{\"h\":\"合成复用原则（CRP）\",\"a\":\"合成复用原则-crp\"},\"2199\":{\"t\":\"合成复用原则（Composite Reuse Principle，CRP）又叫 组合/聚合复用原则（Composition/Aggregate Reuse Principle，CARP）。它要求在软件复用时，要尽量先使用 组合或者聚合 等关联关系来实现，其次才考虑使用继承关系来实现。\"},\"2200\":{\"t\":\"如果要使用继承关系，则必须严格遵循里氏替换原则。\"},\"2201\":{\"t\":\"继承图\"},\"2202\":{\"t\":\"B 直接继承 A。\"},\"2203\":{\"t\":\"image-20220226103414310\"},\"2204\":{\"t\":\"聚合图\"},\"2205\":{\"t\":\"B 需要 A 的三个方法，但不是继承，而是通过方法参数、构造器、setter 传入 A 的对象。\"},\"2206\":{\"t\":\"image-20220226103435911\"},\"2207\":{\"t\":\"组合图\"},\"2208\":{\"t\":\"B 需要 A 的三个方法，直接通过 new A 获得 A 的对象。\"},\"2209\":{\"t\":\"image-20220226103439980\"},\"2210\":{\"h\":\"设计原则核心思想\",\"a\":\"设计原则核心思想\"},\"2211\":{\"t\":\"找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起\"},\"2212\":{\"t\":\"针对接口编程，而不是针对实现编程\"},\"2213\":{\"t\":\"为了交互对象之间的松耦合设计而努力\"},\"2214\":{\"h\":\"合成复用原则的重要性\",\"a\":\"合成复用原则的重要性\"},\"2215\":{\"t\":\"通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：\"},\"2216\":{\"t\":\"继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为「白箱」复用\"},\"2217\":{\"t\":\"子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护\"},\"2218\":{\"t\":\"它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化\"},\"2219\":{\"t\":\"采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：\"},\"2220\":{\"t\":\"它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为「黑箱」复用\"},\"2221\":{\"t\":\"新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口\"},\"2222\":{\"t\":\"复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象\"},\"2223\":{\"h\":\"总结\",\"a\":\"总结\"},\"2224\":{\"t\":\"单一职责原则：一个类或一个方法只负责一件事情\"},\"2225\":{\"t\":\"接口隔离原则：一个接口的所有抽象方法能被一个类全部实现\"},\"2226\":{\"t\":\"依赖倒转原则：通过接口、构造器、setter 来降低类与类之间的依赖\"},\"2227\":{\"t\":\"里氏替换原则：子类中尽量不要重写父类的方法，应该将父类的方法（以后不会改）放到一个抽象类，由父类和子类共同继承\"},\"2228\":{\"t\":\"开闭原则：对扩展开放（对提供方），对修改关闭（对使用方）\"},\"2229\":{\"t\":\"迪米特法则：不要在方法里 new 其他的类，而是用过方法参数、全局变量引用其他类\"},\"2230\":{\"t\":\"合成复用原则：尽量使用合成/聚合的方式引用其他类，而不是使用继承\"},\"2231\":{\"t\":\"设计原则\"},\"2232\":{\"t\":\"一句话归纳\"},\"2233\":{\"t\":\"目的\"},\"2234\":{\"t\":\"开闭原则\"},\"2235\":{\"t\":\"对扩展开放，对修改关闭\"},\"2236\":{\"t\":\"降低维护带来的新风险\"},\"2237\":{\"t\":\"依赖倒置原则\"},\"2238\":{\"t\":\"高层不应该依赖低层，要面向接口编程\"},\"2239\":{\"t\":\"更利于代码结构的升级扩展\"},\"2240\":{\"t\":\"单一职责原则\"},\"2241\":{\"t\":\"一个类只干一件事，实现类要单一\"},\"2242\":{\"t\":\"便于理解，提高代码的可读性\"},\"2243\":{\"t\":\"接口隔离原则\"},\"2244\":{\"t\":\"一个接口只干一件事，接口要精简单一\"},\"2245\":{\"t\":\"功能解耦，高聚合、低耦合\"},\"2246\":{\"t\":\"迪米特法则\"},\"2247\":{\"t\":\"不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度\"},\"2248\":{\"t\":\"只和朋友交流，不和陌生人说话，减少代码臃肿\"},\"2249\":{\"t\":\"里氏替换原则\"},\"2250\":{\"t\":\"不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义\"},\"2251\":{\"t\":\"防止继承泛滥\"},\"2252\":{\"t\":\"合成复用原则\"},\"2253\":{\"t\":\"尽量使用组合或者聚合关系实现代码复用，少使用继承\"},\"2254\":{\"t\":\"降低代码耦合\"},\"2255\":{\"t\":\"实际上，这些原则的目的只有一个：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。\"},\"2256\":{\"h\":\"创建型单例模式\"},\"2257\":{\"h\":\"单例设计模式介绍\",\"a\":\"单例设计模式介绍\"},\"2258\":{\"t\":\"在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。\"},\"2259\":{\"t\":\"所谓类的 单例设计模式，就是 采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）。\"},\"2260\":{\"t\":\"比如 Hibernate 的 SessionFactory，它充当数据存储源的代理，并负责创建 Session 对象。SessionFactory 并不是轻量级的，一般情况下，一个项目通常只需要一个 SessionFactory 就够，这是就会使用到单例模式。\"},\"2261\":{\"t\":\"单例模式在现实生活中的应用也非常广泛，例如公司 CEO、部门经理等都属于单例模型。J2EE 标准中的 Servlet Context 和 ServletContextConfig、Spring 框架应用中的 ApplicationContext、数据库中的连接池等也都是单例模式。\"},\"2262\":{\"t\":\"主要优点\"},\"2263\":{\"t\":\"单例模式可以保证内存里只有一个实例，减少了内存的开销\"},\"2264\":{\"t\":\"可以避免对资源的多重占用\"},\"2265\":{\"t\":\"单例模式设置全局访问点，可以优化和共享资源的访问\"},\"2266\":{\"t\":\"主要缺点\"},\"2267\":{\"t\":\"单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则\"},\"2268\":{\"t\":\"在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象\"},\"2269\":{\"t\":\"单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则\"},\"2270\":{\"h\":\"单例设计模式八种方式\",\"a\":\"单例设计模式八种方式\"},\"2271\":{\"t\":\"单例模式有八种方式：\"},\"2272\":{\"t\":\"饿汉式（静态常量）\"},\"2273\":{\"t\":\"饿汉式（静态代码块）\"},\"2274\":{\"t\":\"懒汉式（线程不安全）\"},\"2275\":{\"t\":\"懒汉式（线程安全，同步方法）\"},\"2276\":{\"t\":\"懒汉式（线程安全，同步代码块）\"},\"2277\":{\"t\":\"双重检查\"},\"2278\":{\"t\":\"静态内部类\"},\"2279\":{\"t\":\"枚举\"},\"2280\":{\"h\":\"饿汉式（静态常量）\",\"a\":\"饿汉式-静态常量\"},\"2281\":{\"t\":\"饿汉式（静态常量）步骤如下：\"},\"2282\":{\"t\":\"构造器私有化 (防止 new )\"},\"2283\":{\"t\":\"类的内部创建对象\"},\"2284\":{\"t\":\"向外暴露一个静态的公共方法。如 getInstance()\"},\"2285\":{\"t\":\"代码实现\"},\"2286\":{\"t\":\"public class SingletonTest01 { public static void main(String[] args) { // 测试 Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); // instance.hashCode=968514068 System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); // instance2.hashCode=968514068 } } // 饿汉式（静态常量） class Singleton { // 1. 构造器私有化，外部能 new private Singleton() { } // 2.本类内部创建对象实例 private final static Singleton instance = new Singleton(); // 3. 提供一个公有的静态方法，返回实例对象 public static Singleton getInstance() { return instance; } } \"},\"2287\":{\"t\":\"优缺点说明\"},\"2288\":{\"t\":\"优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题\"},\"2289\":{\"t\":\"缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading 的效果。如果从始至终从未使用过这个实例，则 会造成内存的浪费\"},\"2290\":{\"t\":\"这种方式基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，在单例模式中大多数都是调用 getInstance 方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 就没有达到 lazy loading 的效果\"},\"2291\":{\"t\":\"结论：这种单例模式 可用，可能 造成内存浪费。\"},\"2292\":{\"h\":\"饿汉式（静态代码块）\",\"a\":\"饿汉式-静态代码块\"},\"2293\":{\"t\":\"public class SingletonTest02 { public static void main(String[] args) { // 测试 Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); } } // 饿汉式（静态代码块） class Singleton { // 1. 构造器私有化, 外部能new private Singleton() { } // 2.本类内部创建对象实例 private static Singleton instance; static { // 在静态代码块中，创建单例对象 instance = new Singleton(); } // 3. 提供一个公有的静态方法，返回实例对象 public static Singleton getInstance() { return instance; } } \"},\"2294\":{\"t\":\"优缺点说明\"},\"2295\":{\"t\":\"这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面 是一样的。\"},\"2296\":{\"t\":\"结论：这种单例模式可用，但是可能造成内存浪费。\"},\"2297\":{\"h\":\"懒汉式（线程不安全）\",\"a\":\"懒汉式-线程不安全\"},\"2298\":{\"t\":\"public class SingletonTest03 { public static void main(String[] args) { System.out.println(\\\"懒汉式1 ， 线程不安全~\\\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); } } // 懒汉式（线程不安全） class Singleton { private static Singleton instance; private Singleton() {} // 提供一个静态的公有方法，当使用到该方法时，才去创建 instance // 即懒汉式 public static Singleton getInstance() { if(instance == null) { instance = new Singleton(); } return instance; } } \"},\"2299\":{\"t\":\"优缺点说明\"},\"2300\":{\"t\":\"起到了 Lazy Loading 的效果，但是只能在单线程下使用\"},\"2301\":{\"t\":\"如果在多线程下，一个线程进入了 if (singleton == null) 判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式\"},\"2302\":{\"t\":\"结论：在实际开发中，不要使用 这种方式。\"},\"2303\":{\"h\":\"懒汉式（线程安全，同步方法）\",\"a\":\"懒汉式-线程安全-同步方法\"},\"2304\":{\"t\":\"public class SingletonTest04 { public static void main(String[] args) { System.out.println(\\\"懒汉式2 ， 线程安全~\\\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); } } // 懒汉式（线程安全，同步方法） class Singleton { private static Singleton instance; private Singleton() {} // 提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题 // 即懒汉式 public static synchronized Singleton getInstance() { if(instance == null) { instance = new Singleton(); } return instance; } } \"},\"2305\":{\"t\":\"优缺点说明\"},\"2306\":{\"t\":\"解决了 线程安全 问题\"},\"2307\":{\"t\":\"但是效率太低了，每个线程在想获得类的实例时候，执行 getInstance() 方法都要进行同步。而其实这个方法只执行 一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低\"},\"2308\":{\"t\":\"结论：在实际开发中，不推荐 使用这种方式。\"},\"2309\":{\"h\":\"懒汉式（线程安全，同步代码块）\",\"a\":\"懒汉式-线程安全-同步代码块\"},\"2310\":{\"t\":\"public class SingletonTest04 { public static void main(String[] args) { System.out.println(\\\"懒汉式2 ， 线程安全~\\\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); } } // 懒汉式（线程安全，同步方法） class Singleton { private static Singleton instance; private Singleton() {} // 提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题 // 即懒汉式 public static Singleton getInstance() { if(instance == null) { synchronized(Singleton.class) { instance = new Singleton(); } } return instance; } } \"},\"2311\":{\"t\":\"和懒汉式（线程安全，同步方法）类似，不推荐使用。\"},\"2312\":{\"h\":\"双重检查\",\"a\":\"双重检查\"},\"2313\":{\"t\":\"public class SingletonTest06 { public static void main(String[] args) { System.out.println(\\\"双重检查\\\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); } } // 懒汉式(线程安全，同步方法) class Singleton { private static volatile Singleton instance; private Singleton() {} // 提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题 // 同时保证了效率, 推荐使用 public static synchronized Singleton getInstance() { if(instance == null) { synchronized (Singleton.class) { if(instance == null) { instance = new Singleton(); } } } return instance; } } \"},\"2314\":{\"t\":\"优缺点说明\"},\"2315\":{\"t\":\"Double-Check 概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 if (singleton == null) 检查，这样就可以保证线程安全了\"},\"2316\":{\"t\":\"这样，实例化代码只用执行一次，后面再次访问时，判断 if (singleton == null)，直接 return 实例化对象，也避免的反复进行方法同步\"},\"2317\":{\"t\":\"线程安全；延迟加载；效率较高\"},\"2318\":{\"t\":\"结论：在实际开发中，推荐使用这种单例设计模式。\"},\"2319\":{\"h\":\"静态内部类\",\"a\":\"静态内部类\"},\"2320\":{\"t\":\"public class SingletonTest07 { public static void main(String[] args) { System.out.println(\\\"使用静态内部类完成单例模式\\\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\\\"instance.hashCode=\\\" + instance.hashCode()); System.out.println(\\\"instance2.hashCode=\\\" + instance2.hashCode()); } } // 静态内部类完成，推荐使用 class Singleton { private static volatile Singleton instance; // 构造器私有化 private Singleton() {} // 写一个静态内部类，该类中有一个静态属性 Singleton private static class SingletonInstance { private static final Singleton INSTANCE = new Singleton(); } // 提供一个静态的公有方法，直接返回 SingletonInstance.INSTANCE public static synchronized Singleton getInstance() { return SingletonInstance.INSTANCE; } } \"},\"2321\":{\"t\":\"优缺点说明\"},\"2322\":{\"t\":\"这种方式采用了类装载的机制来保证初始化实例时只有一个线程\"},\"2323\":{\"t\":\"静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化\"},\"2324\":{\"t\":\"类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的\"},\"2325\":{\"t\":\"优点：避免了线程不安全，利用 静态内部类特点实现延迟加载，效率高\"},\"2326\":{\"t\":\"结论：推荐使用。\"},\"2327\":{\"h\":\"枚举\",\"a\":\"枚举\"},\"2328\":{\"t\":\"public class SingletonTest08 { public static void main(String[] args) { Singleton instance = Singleton.INSTANCE; Singleton instance2 = Singleton.INSTANCE; System.out.println(instance == instance2); System.out.println(instance.hashCode()); System.out.println(instance2.hashCode()); instance.sayOK(); } } // 使用枚举，可以实现单例, 推荐 enum Singleton { INSTANCE; // 属性，代表 Singleton s public void sayOK() { System.out.println(\\\"ok~\\\"); } } \"},\"2329\":{\"t\":\"优缺点说明\"},\"2330\":{\"t\":\"这借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象\"},\"2331\":{\"t\":\"这种方式是 Effective Java 的作者 Josh Bloch 提倡的方式\"},\"2332\":{\"t\":\"结论：推荐使用。\"},\"2333\":{\"h\":\"单例模式JDK应用\",\"a\":\"单例模式jdk应用\"},\"2334\":{\"t\":\"在 JDK 中，java.lang.Runtime 就是经典的单例模式：饿汉式（静态常量）。\"},\"2335\":{\"t\":\"public class Runtime { private static final Runtime currentRuntime = new Runtime(); private static Version version; public static Runtime getRuntime() { return currentRuntime; } private Runtime() {} } \"},\"2336\":{\"h\":\"单例模式注意事项和细节说明\",\"a\":\"单例模式注意事项和细节说明\"},\"2337\":{\"t\":\"单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。\"},\"2338\":{\"t\":\"当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用 new。\"},\"2339\":{\"t\":\"单例模式使用的场景：需要 频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如 数据源、session 工厂 等)。\"},\"2340\":{\"h\":\"单例模式的应用场景\",\"a\":\"单例模式的应用场景\"},\"2341\":{\"t\":\"对于 Java 来说，单例模式可以保证在一个 JVM 中只存在单一实例。单例模式的应用场景主要有以下几个方面：\"},\"2342\":{\"t\":\"需要频繁创建的一些类，使用单例可以降低系统的内存压力，减少 GC\"},\"2343\":{\"t\":\"某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等\"},\"2344\":{\"t\":\"某些类创建实例时占用资源较多，或实例化耗时较长，且经常使用\"},\"2345\":{\"t\":\"某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等\"},\"2346\":{\"t\":\"频繁访问数据库或文件的对象\"},\"2347\":{\"t\":\"对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套\"},\"2348\":{\"t\":\"当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等\"},\"2349\":{\"h\":\"单例存在哪些问题\",\"a\":\"单例存在哪些问题\"},\"2350\":{\"t\":\"尽管单例是一个很常用的设计模式，在实际的开发中，我们也确实经常用到它，但是，有些人认为单例是一种反模式（anti-pattern），并不推荐使用。大部分情况下，我们在项目中使用单例，都是用它来表示一些全局唯一类，比如配置信息类、连接池类、ID 生成器类。单例模式书写简洁、使用方便，在代码中，我们不需要创建对象，直接通过类似 IdGenerator.getInstance().getId() 这样的方法来调用就可以了。但是，这种使用方法有点类似硬编码（hard code），会带来诸多问题。接下来，我们就具体看看到底有哪些问题。\"},\"2351\":{\"h\":\"单例对 OOP 特性的支持不友好\",\"a\":\"单例对-oop-特性的支持不友好\"},\"2352\":{\"t\":\"我们知道，OOP 的四大特性是封装、抽象、继承、多态。单例这种设计模式对于其中的抽象、继承、多态都支持得不好。为什么这么说呢？我们还是通过 IdGenerator 这个例子来讲解。\"},\"2353\":{\"t\":\"public class Order { public void create(...) { //... long id = IdGenerator.getInstance().getId(); //... } } public class User { public void create(...) { // ... long id = IdGenerator.getInstance().getId(); //... } } \"},\"2354\":{\"t\":\"IdGenerator 的使用方式违背了基于接口而非实现的设计原则，也就违背了广义上理解的 OOP 的抽象特性。如果未来某一天，我们希望针对不同的业务采用不同的 ID 生成算法。比如，订单 ID 和用户 ID 采用不同的 ID 生成器来生成。为了应对这个需求变化，我们需要修改所有用到 IdGenerator 类的地方，这样代码的改动就会比较大。\"},\"2355\":{\"t\":\"public class Order { public void create(...) { // ... long id = IdGenerator.getInstance().getId(); // 需要将上面一行代码，替换为下面一行代码 long id = OrderIdGenerator.getIntance().getId(); // ... } } public class User { public void create(...) { // ... long id = IdGenerator.getInstance().getId(); // 需要将上面一行代码，替换为下面一行代码 long id = UserIdGenerator.getIntance().getId(); } } \"},\"2356\":{\"t\":\"除此之外，单例对继承、多态特性的支持也不友好。这里之所以会用「不友好」这个词，而非「完全不支持」，是因为从理论上来讲，单例类也可以被继承、也可以实现多态，只是实现起来会非常奇怪，会导致代码的可读性变差。不明白设计意图的人，看到这样的设计，会觉得莫名其妙。所以，一旦你选择将某个类设计成到单例类，也就意味着放弃了继承和多态这两个强有力的面向对象特性，也就相当于损失了可以应对未来需求变化的扩展性\"},\"2357\":{\"h\":\"单例会隐藏类之间的依赖关系\",\"a\":\"单例会隐藏类之间的依赖关系\"},\"2358\":{\"t\":\"我们知道，代码的可读性非常重要。在阅读代码的时候，我们希望一眼就能看出类与类之间的依赖关系，搞清楚这个类依赖了哪些外部类。通过构造函数、参数传递等方式声明的类之间的依赖关系，我们通过查看函数的定义，就能很容易识别出来。但是，单例类不需要显示创建、不需要依赖参数传递，在函数中直接调用就可以了。如果代码比较复杂，这种调用关系就会非常隐蔽。在阅读代码的时候，我们就需要仔细查看每个函数的代码实现，才能知道这个类到底依赖了哪些单例类。\"},\"2359\":{\"h\":\"单例对代码的扩展性不友好\",\"a\":\"单例对代码的扩展性不友好\"},\"2360\":{\"t\":\"我们知道，单例类只能有一个对象实例。如果未来某一天，我们需要在代码中创建两个实例或多个实例，那就要对代码有比较大的改动。你可能会说，会有这样的需求吗？既然单例类大部分情况下都用来表示全局类，怎么会需要两个或者多个实例呢\"},\"2361\":{\"t\":\"实际上，这样的需求并不少见。我们拿数据库连接池来举例解释一下\"},\"2362\":{\"t\":\"在系统设计初期，我们觉得系统中只应该有一个数据库连接池，这样能方便我们控制对数据库连接资源的消耗。所以，我们把数据库连接池类设计成了单例类。但之后我们发现，系统中有些 SQL 语句运行得非常慢。这些 SQL 语句在执行的时候，长时间占用数据库连接资源，导致其他 SQL 请求无法响应。为了解决这个问题，我们希望将慢 SQL 与其他 SQL 隔离开来执行。为了实现这样的目的，我们可以在系统中创建两个数据库连接池，慢 SQL 独享一个数据库连接池，其他 SQL 独享另外一个数据库连接池，这样就能避免慢 SQL 影响到其他 SQL 的执行\"},\"2363\":{\"t\":\"如果我们将数据库连接池设计成单例类，显然就无法适应这样的需求变更，也就是说，单例类在某些情况下会影响代码的扩展性、灵活性。所以，数据库连接池、线程池这类的资源池，最好还是不要设计成单例类。实际上，一些开源的数据库连接池、线程池也确实没有设计成单例类\"},\"2364\":{\"h\":\"单例对代码的可测试性不友好\",\"a\":\"单例对代码的可测试性不友好\"},\"2365\":{\"t\":\"单例模式的使用会影响到代码的可测试性。如果单例类依赖比较重的外部资源，比如 DB，我们在写单元测试的时候，希望能通过 mock 的方式将它替换掉。而单例类这种硬编码式的使用方式，导致无法实现 mock 替换\"},\"2366\":{\"t\":\"除此之外，如果单例类持有成员变量（比如 IdGenerator 中的 id 成员变量），那它实际上相当于一种全局变量，被所有的代码共享。如果这个全局变量是一个可变全局变量，也就是说，它的成员变量是可以被修改的，那我们在编写单元测试的时候，还需要注意不同测试用例之间，修改了单例类中的同一个成员变量的值，从而导致测试结果互相影响的问题\"},\"2367\":{\"h\":\"单例不支持有参数的构造函数\",\"a\":\"单例不支持有参数的构造函数\"},\"2368\":{\"t\":\"单例不支持有参数的构造函数，比如我们创建一个连接池的单例对象，我们没法通过参数来指定连接池的大小。针对这个问题，我们来看下都有哪些解决方案。\"},\"2369\":{\"t\":\"第一种解决思路是：创建完实例之后，再调用 init() 函数传递参数。需要注意的是，我们在使用这个单例类的时候，要先调用 init() 方法，然后才能调用 getInstance() 方法，否则代码会抛出异常。具体的代码实现如下所示：\"},\"2370\":{\"t\":\"public class Singleton { private static Singleton instance = null; private final int paramA; private final int paramB; private Singleton(int paramA, int paramB) { this.paramA = paramA; this.paramB = paramB; } public static Singleton getInstance() { if (instance == null) { throw new RuntimeException(\\\"Run init() first.\\\"); } return instance; } public synchronized static Singleton init(int paramA, int paramB) { if (instance != null){ throw new RuntimeException(\\\"Singleton has been created!\\\"); } instance = new Singleton(paramA, paramB); return instance; } } Singleton.init(10, 50); // 先 init，再使用 Singleton singleton = Singleton.getInstance(); \"},\"2371\":{\"t\":\"第二种解决思路是：将参数放到 getIntance() 方法中。具体的代码实现如下所示：\"},\"2372\":{\"t\":\"public class Singleton { private static Singleton instance = null; private final int paramA; private final int paramB; private Singleton(int paramA, int paramB) { this.paramA = paramA; this.paramB = paramB; } public synchronized static Singleton getInstance(int paramA, int paramB) { if (instance == null) { instance = new Singleton(paramA, paramB); } return instance; } } Singleton singleton = Singleton.getInstance(10, 50); \"},\"2373\":{\"t\":\"不知道你有没有发现，上面的代码实现稍微有点问题。如果我们如下两次执行 getInstance() 方法，那获取到的 singleton1 和 signleton2 的 paramA 和 paramB 都是 10 和 50。也就是说，第二次的参数（20，30）没有起作用，而构建的过程也没有给与提示，这样就会误导用户。\"},\"2374\":{\"t\":\"Singleton singleton1 = Singleton.getInstance(10, 50); Singleton singleton2 = Singleton.getInstance(20, 30); \"},\"2375\":{\"t\":\"第三种解决思路是：将参数放到另外一个全局变量中。具体的代码实现如下。Config 是一个存储了 paramA 和 paramB 值的全局变量。里面的值既可以像下面的代码那样通过静态常量来定义，也可以从配置文件中加载得到。实际上，这种方式是最值得推荐的。\"},\"2376\":{\"t\":\"public class Config { public static final int PARAM_A = 123; public static final int PARAM_B = 245; } public class Singleton { private static Singleton instance = null; private final int paramA; private final int paramB; private Singleton() { this.paramA = Config.PARAM_A; this.paramB = Config.PARAM_B; } public synchronized static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } \"},\"2377\":{\"h\":\"有何替代解决方案\",\"a\":\"有何替代解决方案\"},\"2378\":{\"t\":\"刚刚我们提到了单例的很多问题，你可能会说，即便单例有这么多问题，但我不用不行啊。我业务上有表示全局唯一类的需求，如果不用单例，我怎么才能保证这个类的对象全局唯一呢？为了保证全局唯一，除了使用单例，我们还可以用静态方法来实现。这也是项目开发中经常用到的一种实现思路。比如， ID 唯一递增生成器的例子，用静态方法实现一下，就是下面这个样子：\"},\"2379\":{\"t\":\"// 静态方法实现方式 public class IdGenerator { private static AtomicLong id = new AtomicLong(0); public static long getId() { return id.incrementAndGet(); } } // 使用举例 long id = IdGenerator.getId(); \"},\"2380\":{\"t\":\"不过，静态方法这种实现思路，并不能解决我们之前提到的问题。实际上，它比单例更加不灵活，比如，它无法支持延迟加载。我们再来看看有没有其他办法。实际上，单例除了我们之前讲到的使用方法之外，还有另外一种使用方法。具体的代码如下所示：\"},\"2381\":{\"t\":\"// 1. 老的使用方式 public demofunction() { //... long id = IdGenerator.getInstance().getId(); //... } // 2. 新的使用方式：依赖注入 public demofunction(IdGenerator idGenerator) { long id = idGenerator.getId(); } // 外部调用demofunction()的时候，传入idGenerator IdGenerator idGenerator = IdGenerator.getInsance(); demofunction(idGenerator); \"},\"2382\":{\"t\":\"基于新的使用方式，我们将单例生成的对象，作为参数传递给函数（也可以通过构造函数传递给类的成员变量），可以解决单例隐藏类之间依赖关系的问题。不过，对于单例存在的其他问题，比如对 OOP 特性、扩展性、可测性不友好等问题，还是无法解决\"},\"2383\":{\"t\":\"所以，如果要完全解决这些问题，我们可能要从根上，寻找其他方式来实现全局唯一类。实际上，类对象的全局唯一性可以通过多种不同的方式来保证。我们既可以通过单例模式来强制保证，也可以通过工厂模式、IOC 容器（比如 Spring IOC 容器）来保证，还可以通过程序员自己来保证（自己在编写代码的时候自己保证不要创建两个类对象）。这就类似 Java 中内存对象的释放由 JVM 来负责，而 C++ 中由程序员自己负责，道理是一样的\"},\"2384\":{\"t\":\"对于替代方案工厂模式、IOC 容器的详细讲解，我们放到后面讲解\"},\"2385\":{\"h\":\"如何理解单例模式中的唯一性\",\"a\":\"如何理解单例模式中的唯一性\"},\"2386\":{\"t\":\"首先，我们重新看一下单例的定义：「一个类只允许创建唯一一个对象（或者实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式\"},\"2387\":{\"t\":\"定义中提到，「一个类只允许创建唯一一个对象」。那对象的唯一性的作用范围是什么呢？是指线程内只允许创建一个对象，还是指进程内只允许创建一个对象？答案是后者，也就是说，单例模式创建的对象是进程唯一的。这里有点不好理解，我来详细地解释一下\"},\"2388\":{\"t\":\"我们编写的代码，通过编译、链接，组织在一起，就构成了一个操作系统可以执行的文件，也就是我们平时所说的「可执行文件」（比如 Windows 下的 exe 文件）。可执行文件实际上就是代码被翻译成操作系统可理解的一组指令，你完全可以简单地理解为就是代码本身\"},\"2389\":{\"t\":\"当我们使用命令行或者双击运行这个可执行文件的时候，操作系统会启动一个进程，将这个执行文件从磁盘加载到自己的进程地址空间（可以理解操作系统为进程分配的内存存储区，用来存储代码和数据）。接着，进程就一条一条地执行可执行文件中包含的代码。比如，当进程读到代码中的 User user = new User(); 这条语句的时候，它就在自己的地址空间中创建一个 user 临时变量和一个 User 对象。进程之间是不共享地址空间的，如果我们在一个进程中创建另外一个进程（比如，代码中有一个 fork() 语句，进程执行到这条语句的时候会创建一个新的进程），操作系统会给新进程分配新的地址空间，并且将老进程地址空间的所有内容，重新拷贝一份到新进程的地址空间中，这些内容包括代码、数据（比如 user 临时变量、User 对象）\"},\"2390\":{\"t\":\"所以，单例类在老进程中存在且只能存在一个对象，在新进程中也会存在且只能存在一个对象。而且，这两个对象并不是同一个对象，这也就说，单例类中对象的唯一性的作用范围是进程内的，在进程间是不唯一的\"},\"2391\":{\"h\":\"如何实现线程唯一的单例\",\"a\":\"如何实现线程唯一的单例\"},\"2392\":{\"t\":\"刚刚我们讲了单例类对象是进程唯一的，一个进程只能有一个单例对象。那如何实现一个线程唯一的单例呢\"},\"2393\":{\"t\":\"我们先来看一下，什么是线程唯一的单例，以及「线程唯一」和「进程唯一」的区别\"},\"2394\":{\"t\":\"「进程唯一」指的是进程内唯一，进程间不唯一。类比一下，「线程唯一」指的是线程内唯一，线程间可以不唯一。实际上，「进程唯一」还代表了线程内、线程间都唯一，这也是「进程唯一」和「线程唯一」的区别之处。这段话听起来有点像绕口令，我举个例子来解释一下\"},\"2395\":{\"t\":\"假设 IdGenerator 是一个线程唯一的单例类。在线程 A 内，我们可以创建一个单例对象 a。因为线程内唯一，在线程 A 内就不能再创建新的 IdGenerator 对象了，而线程间可以不唯一，所以，在另外一个线程 B 内，我们还可以重新创建一个新的单例对象 b\"},\"2396\":{\"t\":\"尽管概念理解起来比较复杂，但线程唯一单例的代码实现很简单，如下所示。在代码中，我们通过一个 HashMap 来存储对象，其中 key 是线程 ID，value 是对象。这样我们就可以做到，不同的线程对应不同的对象，同一个线程只能对应一个对象。实际上，Java 语言本身提供了 ThreadLocal 工具类，可以更加轻松地实现线程唯一单例。不过，ThreadLocal 底层实现原理也是基于下面代码中所示的 HashMap\"},\"2397\":{\"t\":\"public class IdGenerator { private AtomicLong id = new AtomicLong(0); private static final ConcurrentHashMap<Long, IdGenerator> instances = new ConcurrentHashMap<>(); private IdGenerator() {} public static IdGenerator getInstance() { Long currentThreadId = Thread.currentThread().getId(); instances.putIfAbsent(currentThreadId, new IdGenerator()); return instances.get(currentThreadId); } public long getId() { return id.incrementAndGet(); } } \"},\"2398\":{\"h\":\"如何实现集群环境下的单例？\",\"a\":\"如何实现集群环境下的单例\"},\"2399\":{\"t\":\"刚刚我们讲了「进程唯一」的单例和「线程唯一」的单例，现在，我们再来看下，「集群唯一」的单例\"},\"2400\":{\"t\":\"首先，我们还是先来解释一下，什么是「集群唯一」的单例\"},\"2401\":{\"t\":\"我们还是将它跟「进程唯一」「线程唯一」做个对比。「进程唯一」指的是进程内唯一、进程间不唯一。「线程唯一」指的是线程内唯一、线程间不唯一。集群相当于多个进程构成的一个集合，「集群唯一」就相当于是进程内唯一、进程间也唯一。也就是说，不同的进程间共享同一个对象，不能创建同一个类的多个对象\"},\"2402\":{\"t\":\"我们知道，经典的单例模式是进程内唯一的，那如何实现一个进程间也唯一的单例呢？如果严格按照不同的进程间共享同一个对象来实现，那集群唯一的单例实现起来就有点难度了\"},\"2403\":{\"t\":\"具体来说，我们需要把这个单例对象序列化并存储到外部共享存储区（比如文件）。进程在使用这个单例对象的时候，需要先从外部共享存储区中将它读取到内存，并反序列化成对象，然后再使用，使用完成之后还需要再存储回外部共享存储区\"},\"2404\":{\"t\":\"为了保证任何时刻，在进程间都只有一份对象存在，一个进程在获取到对象之后，需要对对象加锁，避免其他进程再将其获取。在进程使用完这个对象之后，还需要显式地将对象从内存中删除，并且释放对对象的加锁\"},\"2405\":{\"t\":\"我用伪代码实现了一下这个过程，具体如下所示：\"},\"2406\":{\"t\":\"public class IdGenerator { private AtomicLong id = new AtomicLong(0); private static IdGenerator instance; private static SharedObjectStorage storage = FileSharedObjectStorage(/*入参省略，比如文件地址*/); private static DistributedLock lock = new DistributedLock(); private IdGenerator() {} public synchronized static IdGenerator getInstance() if (instance == null) { lock.lock(); instance = storage.load(IdGenerator.class); } return instance; } public synchroinzed void freeInstance() { storage.save(this, IdGeneator.class); instance = null; //释放对象 lock.unlock(); } public long getId() { return id.incrementAndGet(); } } // IdGenerator使用举例 IdGenerator idGeneator = IdGenerator.getInstance(); long id = idGenerator.getId(); IdGenerator.freeInstance(); \"},\"2407\":{\"h\":\"如何实现一个多例模式？\",\"a\":\"如何实现一个多例模式\"},\"2408\":{\"t\":\"跟单例模式概念相对应的还有一个多例模式。那如何实现一个多例模式呢？「单例」指的是，一个类只能创建一个对象。对应地，「多例」指的就是，一个类可以创建多个对象，但是个数是有限制的，比如只能创建 3 个对象。如果用代码来简单示例一下的话，就是下面这个样子：\"},\"2409\":{\"t\":\"public class BackendServer { private long serverNo; private String serverAddress; private static final int SERVER_COUNT = 3; private static final Map<Long, BackendServer> serverInstances = new HashMap<>(); static { serverInstances.put(1L, new BackendServer(1L, \\\"192.134.22.138:8080\\\")); serverInstances.put(2L, new BackendServer(2L, \\\"192.134.22.139:8080\\\")); serverInstances.put(3L, new BackendServer(3L, \\\"192.134.22.140:8080\\\")); } private BackendServer(long serverNo, String serverAddress) { this.serverNo = serverNo; this.serverAddress = serverAddress; } public BackendServer getInstance(long serverNo) { return serverInstances.get(serverNo); } public BackendServer getRandomInstance() { Random r = new Random(); int no = r.nextInt(SERVER_COUNT)+1; return serverInstances.get(no); } } \"},\"2410\":{\"t\":\"实际上，对于多例模式，还有一种理解方式：同一类型的只能创建一个对象，不同类型的可以创建多个对象。这里的「类型」如何理解呢？我们还是通过一个例子来解释一下，具体代码如下所示。在代码中，logger name 就是刚刚说的「类型」，同一个 logger name 获取到的对象实例是相同的，不同的 logger name 获取到的对象实例是不同的。\"},\"2411\":{\"t\":\"public class Logger { private static final ConcurrentHashMap<String, Logger> instances = new ConcurrentHashMap<>(); private Logger() {} public static Logger getInstance(String loggerName) { instances.putIfAbsent(loggerName, new Logger()); return instances.get(loggerName); } public void log() { //... } } //l1==l2, l1!=l3 Logger l1 = Logger.getInstance(\\\"User.class\\\"); Logger l2 = Logger.getInstance(\\\"User.class\\\"); Logger l3 = Logger.getInstance(\\\"Order.class\\\"); \"},\"2412\":{\"t\":\"这种多例模式的理解方式有点类似工厂模式。它跟工厂模式的不同之处是，多例模式创建的对象都是同一个类的对象，而工厂模式创建的是不同子类的对象，关于这一点，后面就会讲到。实际上，它还有点类似享元模式，两者的区别等到我们讲到享元模式的时候再来分析。除此之外，实际上，枚举类型也相当于多例模式，一个类型只能对应一个对象，一个类可以创建多个对象。\"},\"2413\":{\"h\":\"行为型状态模式\"},\"2414\":{\"h\":\"状态模式基本介绍\",\"a\":\"状态模式基本介绍\"},\"2415\":{\"t\":\"在软件开发过程中，应用程序中的部分对象可能会根据不同的情况做出不同的行为，我们把这种对象称为有状态的对象，而把影响对象行为的一个或多个动态变化的属性称为状态。当有状态的对象与外部事件产生互动时，其内部状态就会发生改变，从而使其行为也发生改变。如人都有高兴和伤心的时候，不同的情绪有不同的行为，当然外界也会影响其情绪变化。\"},\"2416\":{\"t\":\"对这种有状态的对象编程，传统的解决方案是：将这些所有可能发生的情况全都考虑到，然后使用 if-else 或 switch-case 语句来做状态判断，再进行不同情况的处理。但是显然这种做法对复杂的状态判断存在天然弊端，条件判断语句会过于臃肿，可读性差，且不具备扩展性，维护难度也大。且增加新的状态时要添加新的 if-else 语句，这违背了「开闭原则」，不利于程序的扩展。\"},\"2417\":{\"t\":\"以上问题如果采用 状态模式 就能很好地得到解决。状态模式的解决思想是：当控制一个对象状态转换的条件表达式过于复杂时，把相关「判断逻辑」提取出来，用各个不同的类进行表示，系统处于哪种情况，直接使用相应的状态类对象进行处理，这样能把原来复杂的逻辑判断简单化，消除了 if-else、switch-case 等冗余语句，代码更有层次性，并且具备良好的扩展力。\"},\"2418\":{\"t\":\"状态模式（State Pattern）：对有状态的对象，把复杂的「判断逻辑」提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换。\"},\"2419\":{\"t\":\"当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。\"},\"2420\":{\"t\":\"状态模式是一种对象行为型模式。\"},\"2421\":{\"t\":\"主要优点\"},\"2422\":{\"t\":\"结构清晰，状态模式将与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足「单一职责原则」\"},\"2423\":{\"t\":\"将状态转换显示化，减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态转换变得更加明确，且减少对象间的相互依赖\"},\"2424\":{\"t\":\"状态类职责明确，有利于程序的扩展。通过定义新的子类很容易地增加新的状态和转换\"},\"2425\":{\"t\":\"主要缺点\"},\"2426\":{\"t\":\"状态模式的使用必然会增加系统的类与对象的个数\"},\"2427\":{\"t\":\"状态模式的结构与实现都较为复杂，如果使用不当会导致程序结构和代码的混乱\"},\"2428\":{\"t\":\"状态模式对开闭原则的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源码，否则无法切换到新增状态，而且修改某个状态类的行为也需要修改对应类的源码\"},\"2429\":{\"h\":\"状态模式的结构与实现\",\"a\":\"状态模式的结构与实现\"},\"2430\":{\"t\":\"状态模式把受环境改变的对象行为包装在不同的状态对象里，其意图是让一个对象在其内部状态改变的时候，其行为也随之改变。现在我们来分析其基本结构和实现方法。\"},\"2431\":{\"t\":\"状态模式包含以下主要角色。\"},\"2432\":{\"t\":\"环境类（Context）角色：也称为上下文，它定义了客户端需要的接口，内部维护一个当前状态，并负责具体状态的切换\"},\"2433\":{\"t\":\"抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为，可以有一个或多个行为\"},\"2434\":{\"t\":\"具体状态（Concrete State）角色：实现抽象状态所对应的行为，并且在需要的情况下进行状态切换\"},\"2435\":{\"t\":\"其结构图如下图所示：\"},\"2436\":{\"t\":\"image-20220326173758893\"},\"2437\":{\"t\":\"代码实现：\"},\"2438\":{\"t\":\"// 环境类 class Context { private State state; // 定义环境类的初始状态 public Context() { this.state = new ConcreteStateA(); } // 设置新状态 public void setState(State state) { this.state = state; } // 读取状态 public State getState() { return (state); } // 对请求做处理 public void Handle() { state.Handle(this); } } // 抽象状态类 abstract class State { public abstract void Handle(Context context); } // 具体状态 A 类 class ConcreteStateA extends State { public void Handle(Context context) { System.out.println(\\\"当前状态是 A.\\\"); context.setState(new ConcreteStateB()); } } // 具体状态 B 类 class ConcreteStateB extends State { public void Handle(Context context) { System.out.println(\\\"当前状态是 B.\\\"); context.setState(new ConcreteStateA()); } } public class StatePatternClient { public static void main(String[] args) { Context context = new Context(); // 创建环境 context.Handle(); // 处理请求 context.Handle(); context.Handle(); context.Handle(); } } \"},\"2439\":{\"h\":\"APP 抽奖活动问题\",\"a\":\"app-抽奖活动问题\"},\"2440\":{\"t\":\"具体要求如下：\"},\"2441\":{\"t\":\"假如每参加一次这个活动要扣除用户 50 积分，中奖概率是 10%\"},\"2442\":{\"t\":\"奖品数量固定，抽完就不能抽奖\"},\"2443\":{\"t\":\"活动有四个状态: 可以抽奖、不能抽奖、发放奖品和奖品领完\"},\"2444\":{\"t\":\"活动的四个状态转换关系图：\"},\"2445\":{\"t\":\"image-20220326172739237\"},\"2446\":{\"h\":\"状态模式解决抽奖活动问题\",\"a\":\"状态模式解决抽奖活动问题\"},\"2447\":{\"t\":\"思路分析和类图：\"},\"2448\":{\"t\":\"定义出一个接口叫状态接口，每个状态都实现它\"},\"2449\":{\"t\":\"接口有扣除积分方法、抽奖方法、发放奖品方法\"},\"2450\":{\"t\":\"image-20220326172843488\"},\"2451\":{\"t\":\"代码示例：\"},\"2452\":{\"t\":\"public class RaffleActivity { // state 表示活动当前的状态，是变化 State state = null; // 奖品数量 int count = 0; // 四个属性，表示四种状态 State noRafflleState = new NoRaffleState(this); State canRaffleState = new CanRaffleState(this); State dispenseState = new DispenseState(this); State dispensOutState = new DispenseOutState(this); // 构造器 // 1. 初始化当前的状态为 noRafflleState（即不能抽奖的状态） // 2. 初始化奖品的数量 public RaffleActivity( int count) { this.state = getNoRafflleState(); this.count = count; } // 扣分，调用当前状态的 deductMoney public void debuctMoney(){ state.deductMoney(); } // 抽奖 public void raffle(){ // 如果当前的状态是抽奖成功 if(state.raffle()){ // 领取奖品 state.dispensePrize(); } } //这里请大家注意，每领取一次奖品，count-- public int getCount() { int curCount = count; count--; return curCount; } // setter 和 getter 方法省略 } \"},\"2453\":{\"t\":\"状态类\"},\"2454\":{\"t\":\"// 状态抽象类 public abstract class State { // 扣除积分 - 50 public abstract void deductMoney(); // 是否抽中奖品 public abstract boolean raffle(); // 发放奖品 public abstract void dispensePrize(); } // 可以抽奖的状态 public class CanRaffleState extends State { RaffleActivity activity; public CanRaffleState(RaffleActivity activity) { this.activity = activity; } // 已经扣除了积分，不能再扣 @Override public void deductMoney() { System.out.println(\\\"已经扣取过了积分\\\"); } // 可以抽奖, 抽完奖后，根据实际情况，改成新的状态 @Override public boolean raffle() { System.out.println(\\\"正在抽奖，请稍等！\\\"); Random r = new Random(); int num = r.nextInt(10); // 10% 中奖机会 if(num == 0){ // 改变活动状态为发放奖品 context activity.setState(activity.getDispenseState()); return true; }else{ System.out.println(\\\"很遗憾没有抽中奖品！\\\"); // 改变状态为不能抽奖 activity.setState(activity.getNoRafflleState()); return false; } } // 不能发放奖品 @Override public void dispensePrize() { System.out.println(\\\"没中奖，不能发放奖品\\\"); } } // 不能抽奖状态 public class NoRaffleState extends State { // 初始化时传入活动引用，扣除积分后改变其状态 RaffleActivity activity; public NoRaffleState(RaffleActivity activity) { this.activity = activity; } // 当前状态可以扣积分，扣除后，将状态设置成可以抽奖状态 @Override public void deductMoney() { System.out.println(\\\"扣除50积分成功，您可以抽奖了\\\"); activity.setState(activity.getCanRaffleState()); } // 当前状态不能抽奖 @Override public boolean raffle() { System.out.println(\\\"扣了积分才能抽奖喔！\\\"); return false; } // 当前状态不能发奖品 @Override public void dispensePrize() { System.out.println(\\\"不能发放奖品\\\"); } } // 发放奖品的状态 public class DispenseState extends State { // 初始化时传入活动引用，发放奖品后改变其状态 RaffleActivity activity; public DispenseState(RaffleActivity activity) { this.activity = activity; } @Override public void deductMoney() { System.out.println(\\\"不能扣除积分\\\"); } @Override public boolean raffle() { System.out.println(\\\"不能抽奖\\\"); return false; } // 发放奖品 @Override public void dispensePrize() { if(activity.getCount() > 0){ System.out.println(\\\"恭喜中奖了\\\"); // 改变状态为不能抽奖 activity.setState(activity.getNoRafflleState()); }else{ System.out.println(\\\"很遗憾，奖品发送完了\\\"); // 改变状态为奖品发送完毕，后面我们就不可以抽奖 activity.setState(activity.getDispensOutState()); } } } // 奖品发放完毕状态 public class DispenseOutState extends State { // 初始化时传入活动引用，当我们 activity 改变成 DispenseOutState，抽奖活动结束 RaffleActivity activity; public DispenseOutState(RaffleActivity activity) { this.activity = activity; } @Override public void deductMoney() { System.out.println(\\\"奖品发送完了，请下次再参加\\\"); } @Override public boolean raffle() { System.out.println(\\\"奖品发送完了，请下次再参加\\\"); return false; } @Override public void dispensePrize() { System.out.println(\\\"奖品发送完了，请下次再参加\\\"); } } \"},\"2455\":{\"t\":\"测试类\"},\"2456\":{\"t\":\"// 状态模式测试类 public class ClientTest { public static void main(String[] args) { // 创建活动对象，奖品有 1 个奖品 RaffleActivity activity = new RaffleActivity(1); // 我们连续抽 300 次奖 for (int i = 0; i < 30; i++) { System.out.println(\\\"--------第\\\" + (i + 1) + \\\"次抽奖----------\\\"); // 参加抽奖，第一步点击扣除积分 activity.debuctMoney(); // 第二步抽奖 activity.raffle(); } } } \"},\"2457\":{\"h\":\"状态模式在实际项目源码\",\"a\":\"状态模式在实际项目源码\"},\"2458\":{\"t\":\"借贷平台的订单，有审核、发布、抢单等等步骤，随着操作的不同，会改变订单的状态，项目中的这个模块实现就会使用到状态模式。\"},\"2459\":{\"t\":\"通常通过 if/else 判断订单的状态，从而实现不同的逻辑，伪代码如下：\"},\"2460\":{\"t\":\"if(审核) { // 审核逻辑 }else if(发布) { // 发布逻辑 }else if(抢单) { // 抢单逻辑 } \"},\"2461\":{\"t\":\"问题分析\"},\"2462\":{\"t\":\"这类代码难以应对变化，在添加一种状态时，我们需要手动添加 if/else，在添加一种功能时，要对所有的状态进行判断。因此代码会变得越来越臃肿，并且一旦没有处理某个状态，便会发生极其严重的 BUG，难以维护。\"},\"2463\":{\"t\":\"使用状态模式完成借贷平台项目的审核模块\"},\"2464\":{\"t\":\"状态类\"},\"2465\":{\"t\":\"public interface State { // 电审 void checkEvent(Context context); // 电审失败 void checkFailEvent(Context context); // 定价发布 void makePriceEvent(Context context); // 接单 void acceptOrderEvent(Context context); // 无人接单失效 void notPeopleAcceptEvent(Context context); // 付款 void payOrderEvent(Context context); // 接单有人支付失效 void orderFailureEvent(Context context); // 反馈 void feedBackEvent(Context context); // 获取状态 String getCurrentState(); } \"},\"2466\":{\"t\":\"各种状态子类\"},\"2467\":{\"t\":\"public abstract class AbstractState implements State { protected static final RuntimeException EXCEPTION = new RuntimeException(\\\"操作流程不允许\\\"); // 抽象类，默认实现了 State 接口的所有方法 // 该类的所有方法，其子类（具体的状态类），可以有选择的进行重写 @Override public void checkEvent(Context context) { throw EXCEPTION; } @Override public void checkFailEvent(Context context) { throw EXCEPTION; } @Override public void makePriceEvent(Context context) { throw EXCEPTION; } @Override public void acceptOrderEvent(Context context) { throw EXCEPTION; } @Override public void notPeopleAcceptEvent(Context context) { throw EXCEPTION; } @Override public void payOrderEvent(Context context) { throw EXCEPTION; } @Override public void orderFailureEvent(Context context) { throw EXCEPTION; } @Override public void feedBackEvent(Context context) { throw EXCEPTION; } } // 已完结状态类 class FeedBackState extends AbstractState { @Override public String getCurrentState() { return StateEnum.FEED_BACKED.getValue(); } } // 订单生成状态类 class GenerateState extends AbstractState { @Override public void checkEvent(Context context) { context.setState(new ReviewState()); } @Override public void checkFailEvent(Context context) { context.setState(new FeedBackState()); } @Override public String getCurrentState() { return StateEnum.GENERATE.getValue(); } } // 待付款状态类 class NotPayState extends AbstractState { @Override public void payOrderEvent(Context context) { context.setState(new PaidState()); } @Override public void feedBackEvent(Context context) { context.setState(new FeedBackState()); } @Override public String getCurrentState() { return StateEnum.NOT_PAY.getValue(); } } // 已付款状态类 class PaidState extends AbstractState { @Override public void feedBackEvent(Context context) { context.setState(new FeedBackState()); } @Override public String getCurrentState() { return StateEnum.PAID.getValue(); } } // 已发布状态类 class PublishState extends AbstractState { @Override public void acceptOrderEvent(Context context) { // 把当前状态设置为 NotPayState // 至于应该变成哪个状态，有流程图来决定 context.setState(new NotPayState()); } @Override public void notPeopleAcceptEvent(Context context) { context.setState(new FeedBackState()); } @Override public String getCurrentState() { return StateEnum.PUBLISHED.getValue(); } } // 已审核状态类 class ReviewState extends AbstractState { @Override public void makePriceEvent(Context context) { context.setState(new PublishState()); } @Override public String getCurrentState() { return StateEnum.REVIEWED.getValue(); } } \"},\"2468\":{\"t\":\"状态枚举类\"},\"2469\":{\"t\":\"public enum StateEnum { // 订单生成 GENERATE(1, \\\"GENERATE\\\"), // 已审核 REVIEWED(2, \\\"REVIEWED\\\"), // 已发布 PUBLISHED(3, \\\"PUBLISHED\\\"), // 待付款 NOT_PAY(4, \\\"NOT_PAY\\\"), // 已付款 PAID(5, \\\"PAID\\\"), // 已完结 FEED_BACKED(6, \\\"FEED_BACKED\\\"); private int key; private String value; StateEnum(int key, String value) { this.key = key; this.value = value; } public int getKey() {return key;} public String getValue() {return value;} } \"},\"2470\":{\"t\":\"环境上下文类\"},\"2471\":{\"t\":\"// 环境上下文 public class Context extends AbstractState{ // 当前的状态 state，根据我们的业务流程处理，不停的变化 private State state; @Override public void checkEvent(Context context) { state.checkEvent(this); getCurrentState(); } @Override public void checkFailEvent(Context context) { state.checkFailEvent(this); getCurrentState(); } @Override public void makePriceEvent(Context context) { state.makePriceEvent(this); getCurrentState(); } @Override public void acceptOrderEvent(Context context) { state.acceptOrderEvent(this); getCurrentState(); } @Override public void notPeopleAcceptEvent(Context context) { state.notPeopleAcceptEvent(this); getCurrentState(); } @Override public void payOrderEvent(Context context) { state.payOrderEvent(this); getCurrentState(); } @Override public void orderFailureEvent(Context context) { state.orderFailureEvent(this); getCurrentState(); } @Override public void feedBackEvent(Context context) { state.feedBackEvent(this); getCurrentState(); } public State getState() { return state; } public void setState(State state) { this.state = state; } @Override public String getCurrentState() { System.out.println(\\\"当前状态 : \\\" + state.getCurrentState()); return state.getCurrentState(); } } \"},\"2472\":{\"t\":\"测试类\"},\"2473\":{\"t\":\"public class ClientTest { public static void main(String[] args) { // 创建 context 对象 Context context = new Context(); // 将当前状态设置为 PublishState context.setState(new PublishState()); System.out.println(context.getCurrentState()); context.acceptOrderEvent(context); context.payOrderEvent(context); // 失败, 检测失败时，会抛出异常 try { context.checkFailEvent(context); System.out.println(\\\"流程正常..\\\"); } catch (Exception e) { System.out.println(e.getMessage()); } } } \"},\"2474\":{\"h\":\"状态模式的注意事项和细节\",\"a\":\"状态模式的注意事项和细节\"},\"2475\":{\"t\":\"状态模式的代码有很强的可读性。状态模式将每个状态的行为封装到对应的一个类\"},\"2476\":{\"t\":\"状态模式方便维护。将容易产生问题的 if-else 语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产出很多 if-else 语句，而且容易出错\"},\"2477\":{\"t\":\"符合「开闭原则」。容易增删状态\"},\"2478\":{\"t\":\"会产生很多类。每个状态都要一个对应的类，当状态过多时会产生很多类，加大维护难度\"},\"2479\":{\"h\":\"状态模式的应用场景\",\"a\":\"状态模式的应用场景\"},\"2480\":{\"t\":\"通常在以下情况下可以考虑使用状态模式：\"},\"2481\":{\"t\":\"当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式\"},\"2482\":{\"t\":\"一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时\"},\"2483\":{\"h\":\"行为型策略模式\"},\"2484\":{\"h\":\"策略模式基本介绍\",\"a\":\"策略模式基本介绍\"},\"2485\":{\"t\":\"在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。\"},\"2486\":{\"t\":\"在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。\"},\"2487\":{\"t\":\"如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。\"},\"2488\":{\"t\":\"策略模式（Strategy Pattern）：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。\"},\"2489\":{\"t\":\"策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。即定义 算法族（策略组），并分别封装起来，让他们之间可以互相替换，此模式让 算法的变化 独立于 使用算法的客户。\"},\"2490\":{\"t\":\"这算法体现了几个设计原则：\"},\"2491\":{\"t\":\"把变化的代码从不变的代码中分离出来\"},\"2492\":{\"t\":\"针对接口编程而不是具体类（定义了策略接口）\"},\"2493\":{\"t\":\"多用组合/聚合，少用继承（客户通过组合方式使用策略模式）\"},\"2494\":{\"t\":\"主要优点\"},\"2495\":{\"t\":\"多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if-else 语句、switch-case 语句\"},\"2496\":{\"t\":\"策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码\"},\"2497\":{\"t\":\"策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的\"},\"2498\":{\"t\":\"策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法\"},\"2499\":{\"t\":\"策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离\"},\"2500\":{\"t\":\"主要缺点\"},\"2501\":{\"t\":\"客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类\"},\"2502\":{\"t\":\"策略模式造成很多的策略类，增加维护难度\"},\"2503\":{\"h\":\"策略模式的结构与实现\",\"a\":\"策略模式的结构与实现\"},\"2504\":{\"t\":\"策略模式是准备一组算法，并将这组算法封装到一系列的策略类里面，作为一个抽象策略类的子类。策略模式的重心不是如何实现算法，而是如何组织这些算法，从而让程序结构更加灵活，具有更好的维护性和扩展性，现在我们来分析其基本结构和实现方法。\"},\"2505\":{\"t\":\"策略模式的主要角色如下：\"},\"2506\":{\"t\":\"抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现\"},\"2507\":{\"t\":\"具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现\"},\"2508\":{\"t\":\"环境（Context）类：持有一个策略类的引用，最终给客户端调用\"},\"2509\":{\"t\":\"其结构图如图下所示：\"},\"2510\":{\"t\":\"image-20220326181157415\"},\"2511\":{\"t\":\"代码实现：\"},\"2512\":{\"t\":\"// 抽象策略类 interface Strategy { public void strategyMethod(); // 策略方法 } // 具体策略类 A class ConcreteStrategyA implements Strategy { public void strategyMethod() { System.out.println(\\\"具体策略A的策略方法被访问！\\\"); } } // 具体策略类 B class ConcreteStrategyB implements Strategy { public void strategyMethod() { System.out.println(\\\"具体策略B的策略方法被访问！\\\"); } } // 环境类 class Context { private Strategy strategy; public Strategy getStrategy() { return strategy; } public void setStrategy(Strategy strategy) { this.strategy = strategy; } public void strategyMethod() { strategy.strategyMethod(); } } public class StrategyPattern { public static void main(String[] args) { Context c = new Context(); Strategy s = new ConcreteStrategyA(); c.setStrategy(s); c.strategyMethod(); System.out.println(\\\"-----------------\\\"); s = new ConcreteStrategyB(); c.setStrategy(s); c.strategyMethod(); } } \"},\"2513\":{\"h\":\"鸭子项目\",\"a\":\"鸭子项目\"},\"2514\":{\"t\":\"要求：\"},\"2515\":{\"t\":\"有各种鸭子（比如野鸭、北京鸭、水鸭等。鸭子有各种行为，比如叫、飞行等）\"},\"2516\":{\"t\":\"显示鸭子的信息\"},\"2517\":{\"h\":\"传统方式解决鸭子项目\",\"a\":\"传统方式解决鸭子项目\"},\"2518\":{\"t\":\"传统的设计方案（类图）\"},\"2519\":{\"t\":\"image-20220326180057205\"},\"2520\":{\"h\":\"传统方式代码实现\",\"a\":\"传统方式代码实现\"},\"2521\":{\"t\":\"public abstract class Duck { public Duck() { } public abstract void display(); // 显示鸭子信息 public void quack() { System.out.println(\\\"鸭子嘎嘎叫~~\\\"); } public void swim() { System.out.println(\\\"鸭子会游泳~~\\\"); } public void fly() { System.out.println(\\\"鸭子会飞翔~~~\\\"); } } public class PekingDuck extends Duck { @Override public void display() { System.out.println(\\\"~~北京鸭~~~\\\"); } // 因为北京鸭不能飞翔，因此需要重写 fly @Override public void fly() { System.out.println(\\\"北京鸭不能飞翔\\\"); } } public class WildDuck extends Duck { @Override public void display() { System.out.println(\\\"这是野鸭\\\"); } } \"},\"2522\":{\"h\":\"传统方式问题分析和解决方案\",\"a\":\"传统方式问题分析和解决方案\"},\"2523\":{\"t\":\"首先其它鸭子都继承了 Duck 类，所以 fly 让所有子类都会飞了，这其实是继承带来的问题：对类的局部改动，尤其超类的局部改动，会影响其他部分。会有 溢出效应。\"},\"2524\":{\"t\":\"所以北京鸭类为了改进不能飞问题，我们通过覆盖重写 fly 方法来解决，即 覆盖解决。\"},\"2525\":{\"t\":\"问题又来了，如果我们有一个玩具鸭子 ToyDuck 类，这样就需要 ToyDuck 去覆盖重写 Duck 的所有实现的方法，相当于 ToyDuck 类和 Duck 类的方法完全不兼容，那么继承就影响非常大。代码如下：\"},\"2526\":{\"t\":\"public class ToyDuck extends Duck{ @Override public void display() { System.out.println(\\\"玩具鸭\\\"); } // 需要重写父类的所有方法 public void quack() { System.out.println(\\\"玩具鸭不能叫~~\\\"); } public void swim() { System.out.println(\\\"玩具鸭不会游泳~~\\\"); } public void fly() { System.out.println(\\\"玩具鸭不会飞翔~~~\\\"); } } \"},\"2527\":{\"t\":\"所以解决思路：使用 策略模式（strategy pattern）。\"},\"2528\":{\"h\":\"策略模式解决鸭子项目\",\"a\":\"策略模式解决鸭子项目\"},\"2529\":{\"t\":\"思路分析：\"},\"2530\":{\"t\":\"策略模式：分别封装行为接口，实现算法族，超类里放行为接口对象，在子类里具体设定行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为的变化独立于算法的使用者。\"},\"2531\":{\"t\":\"类图分析：\"},\"2532\":{\"t\":\"image-20220326181409122\"},\"2533\":{\"t\":\"代码实现：\"},\"2534\":{\"t\":\"飞行策略模式类\"},\"2535\":{\"t\":\"public interface FlyBehavior { void fly(); // 给子类具体实现 } public class NoFlyBehavior implements FlyBehavior{ @Override public void fly() { System.out.println(\\\"不会飞翔 ~~~\\\"); } } public class BadFlyBehavior implements FlyBehavior { @Override public void fly() { System.out.println(\\\"飞翔技术一般 ~~~\\\"); } } public class GoodFlyBehavior implements FlyBehavior { @Override public void fly() { System.out.println(\\\"飞翔技术高超 ~~~\\\"); } } \"},\"2536\":{\"t\":\"叫声策略模式类（该策略类并没有提供实现类，下面的测试类也没有实际使用到该类，这里只是说明：可以使用多种策略）\"},\"2537\":{\"t\":\"public interface QuackBehavior { void quack(); // 子类实现 } \"},\"2538\":{\"t\":\"鸭子信息类，可以使用多种策略\"},\"2539\":{\"t\":\"public abstract class Duck { // 属性, 飞行策略接口 FlyBehavior flyBehavior; // 其它属性：叫声策略接口 QuackBehavior quackBehavior; public Duck() { } public abstract void display(); // 显示鸭子信息 public void quack() { System.out.println(\\\"鸭子嘎嘎叫~~\\\"); } public void swim() { System.out.println(\\\"鸭子会游泳~~\\\"); } public void fly() { // 改进 if(flyBehavior != null) { flyBehavior.fly(); } } public void setFlyBehavior(FlyBehavior flyBehavior) { this.flyBehavior = flyBehavior; } public void setQuackBehavior(QuackBehavior quackBehavior) { this.quackBehavior = quackBehavior; } } public class PekingDuck extends Duck { // 假如北京鸭可以飞翔，但是飞翔技术一般 public PekingDuck() { flyBehavior = new BadFlyBehavior(); quackBehavior = new QuackBehavior(); } @Override public void display() { System.out.println(\\\"~~北京鸭~~~\\\"); } } public class WildDuck extends Duck { // 构造器，传入 FlyBehavor 的对象 public WildDuck() { flyBehavior = new GoodFlyBehavior(); quackBehavior = new QuackBehavior(); } @Override public void display() { System.out.println(\\\" 这是野鸭 \\\"); } } public class ToyDuck extends Duck{ public ToyDuck() { flyBehavior = new NoFlyBehavior(); quackBehavior = new QuackBehavior(); } @Override public void display() { System.out.println(\\\"玩具鸭\\\"); } // 需要重写父类的所有方法 public void quack() { System.out.println(\\\"玩具鸭不能叫~~\\\"); } public void swim() { System.out.println(\\\"玩具鸭不会游泳~~\\\"); } } \"},\"2540\":{\"t\":\"测试类\"},\"2541\":{\"t\":\"public class Client { public static void main(String[] args) { WildDuck wildDuck = new WildDuck(); wildDuck.fly();// ToyDuck toyDuck = new ToyDuck(); toyDuck.fly(); PekingDuck pekingDuck = new PekingDuck(); pekingDuck.fly(); // 动态改变某个对象的行为, 北京鸭 不能飞 pekingDuck.setFlyBehavior(new NoFlyBehavior()); System.out.println(\\\"北京鸭的实际飞翔能力\\\"); pekingDuck.fly(); } } \"},\"2542\":{\"h\":\"JDK-Arrays 的策略模式剖析\",\"a\":\"jdk-arrays-的策略模式剖析\"},\"2543\":{\"t\":\"JDK 的 Arrays 的 Comparator 就使用了策略模式。\"},\"2544\":{\"t\":\"image-20220326182515064\"},\"2545\":{\"t\":\"代码解释：\"},\"2546\":{\"t\":\"public class Strategy { public static void main(String[] args) { // 数组 Integer[] data = { 9, 1, 2, 8, 4, 3 }; // 实现降序排序，返回-1 放左边，1 放右边，0 保持不变 // 说明 // 1. 实现了 Comparator 接口（策略接口） , 匿名类 对象 new Comparator<Integer>(){..} // 2. 对象 new Comparator<Integer>(){..} 就是实现了 策略接口 的对象 // 3. public int compare(Integer o1, Integer o2){} 指定具体的处理方式 Comparator<Integer> comparator = new Comparator<Integer>() { public int compare(Integer o1, Integer o2) { if (o1 > o2) { return -1; } else { return 1; } }; }; /* Arrays 的 sort 类 public static <T> void sort(T[] a, Comparator<? super T> c) { if (c == null) { sort(a); // 默认方法 } else { if (LegacyMergeSort.userRequested) { legacyMergeSort(a, c); // 使用策略对象 c } else{ // 使用策略对象 c TimSort.sort(a, 0, a.length, c, null, 0, 0); } } } */ // 方式 1 Arrays.sort(data, comparator); System.out.println(Arrays.toString(data)); // 降序排序 // 方式 2：同时 lambda 表达式实现 策略模式 Integer[] data2 = { 19, 11, 12, 18, 14, 13 }; Arrays.sort(data2, (var1, var2) -> { if(var1.compareTo(var2) > 0) { return -1; } else { return 1; } }); System.out.println(\\\"data2=\\\" + Arrays.toString(data2)); } } \"},\"2547\":{\"h\":\"策略模式的注意事项和细节\",\"a\":\"策略模式的注意事项和细节\"},\"2548\":{\"t\":\"策略模式的关键是：分析项目中变化部分与不变部分\"},\"2549\":{\"t\":\"策略模式的核心思想是：多用组合/聚合，少用继承；用行为类组合，而不是行为的继承。这样才会更有弹性\"},\"2550\":{\"t\":\"策略模式体现了「对修改关闭，对扩展开放」原则，客户端增加行为不用修改原有代码，只要添加一种策略（或者行为）即可，避免了使用多重转移语句（if-else if-else）\"},\"2551\":{\"t\":\"策略模式提供了可以替换继承关系的办法：策略模式将算法封装在独立的 Strategy 类中，使得可以独立于其 Context 并改变它，使它易于切换、易于理解、易于扩展\"},\"2552\":{\"t\":\"需要注意的是：每添加一个策略就要增加一个类，当策略过多是会导致类数目庞\"},\"2553\":{\"h\":\"策略模式的应用场景\",\"a\":\"策略模式的应用场景\"},\"2554\":{\"t\":\"策略模式在很多地方用到，如 Java SE 中的容器布局管理就是一个典型的实例，Java SE 中的每个容器都存在多种布局供用户选择。\"},\"2555\":{\"t\":\"在程序设计中，通常在以下几种情况中使用策略模式较多：\"},\"2556\":{\"t\":\"一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中\"},\"2557\":{\"t\":\"一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句\"},\"2558\":{\"t\":\"系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时\"},\"2559\":{\"t\":\"系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构\"},\"2560\":{\"t\":\"多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为\"},\"2561\":{\"h\":\"设计模式概述\"},\"2562\":{\"h\":\"掌握设计模式的层次\",\"a\":\"掌握设计模式的层次\"},\"2563\":{\"t\":\"第 1 层：刚开始学编程不久，听说过什么是设计模式\"},\"2564\":{\"t\":\"第 2 层：有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己却不知道\"},\"2565\":{\"t\":\"第 3 层：学习过了设计模式，发现自己已经在使用了，并且发现了一些新的模式挺好用的\"},\"2566\":{\"t\":\"第 4 层：阅读了很多别人写的源码和框架，在其中看到别人设计模式，并且能够领会设计模式的精妙和带来的 好处\"},\"2567\":{\"t\":\"第 5 层：代码写着写着，自己都没有意识到使用了设计模式，并且熟练的写了出来\"},\"2568\":{\"h\":\"设计模式介绍\",\"a\":\"设计模式介绍\"},\"2569\":{\"t\":\"设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是 某类问题的通用解决方案，设计模式（Design pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\"},\"2570\":{\"t\":\"设计模式的本质提高 软件的维护性，通用性和扩展性，并降低软件的复杂度。\"},\"2571\":{\"t\":\"《设计模式》 是经典的书，作者是 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides Design（俗称「四人组 GOF」）。\"},\"2572\":{\"t\":\"设计模式并不局限于某种语言，Java，PHP，C++ 都有设计模式。\"},\"2573\":{\"h\":\"设计模式的重要性\",\"a\":\"设计模式的重要性\"},\"2574\":{\"t\":\"软件工程中，设计模式（design pattern）是对软件设计中 普遍存在（反复出现） 的各种问题，所提出的 解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在 1990 年代从建筑设计领域引入到计算机科学的。\"},\"2575\":{\"t\":\"拿实际工作经历来说，当一个项目开发完后，如果客户 提出增新功能，怎么办?。（可扩展性，使用设计模式，软件具有很好的扩展性）。\"},\"2576\":{\"t\":\"如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (维护性、可读性、规范性)\"},\"2577\":{\"t\":\"目前程序员门槛越来越高，一线 IT 公司(大厂)，都会问你在实际项目中 使用过什么设计模式，怎样使用的，解决了什么问题。\"},\"2578\":{\"t\":\"设计模式在软件中哪里？面向对象（oo）=> 功能模块[设计模式 + 算法(数据结构)] => 框架（使用到多种设计模式） => 架构（服务器集群）。\"},\"2579\":{\"t\":\"如果想成为合格软件工程师，那就花时间来研究下设计模式是非常必要的。\"},\"2580\":{\"h\":\"设计模式的目的\",\"a\":\"设计模式的目的\"},\"2581\":{\"t\":\"编写软件过程中，程序员面临着来自 耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性 等多方面的挑战，设计模式是为了让程序（软件），具有更好的：\"},\"2582\":{\"t\":\"代码重用性（即：相同功能的代码，不用多次编写）\"},\"2583\":{\"t\":\"可读性（即：编程规范性，便于其他程序员的阅读和理解）\"},\"2584\":{\"t\":\"可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护）\"},\"2585\":{\"t\":\"可靠性（即：当我们增加新的功能后，对原来的功能没有影响）\"},\"2586\":{\"t\":\"可靠性（即：当我们增加新的功能后，对原来的功能没有影响）\"},\"2587\":{\"t\":\"设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点：\"},\"2588\":{\"t\":\"可以提高程序员的思维能力、编程能力和设计能力\"},\"2589\":{\"t\":\"使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期\"},\"2590\":{\"t\":\"使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强\"},\"2591\":{\"t\":\"设计模式解决的是设计不足的问题，但同时也要避免设计过度。一定要牢记简洁原则，要知道设计模式是为了使设计简单，而不是更复杂。如果引入设计模式使得设计变得复杂，只能说我们把简单问题复杂化了，问题本身不需要设计模式。\"},\"2592\":{\"t\":\"当然，设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。\"},\"2593\":{\"t\":\"设计模式要活学活用，不要生搬硬套。\"},\"2594\":{\"t\":\"需要特别声明的是，在日常应用中，设计模式从来都不是单个设计模式独立使用的。在实际应用中，通常多个设计模式混合使用，你中有我，我中有你。如下图：\"},\"2595\":{\"t\":\"分享金句：\"},\"2596\":{\"t\":\"设计模式包含了面向对象的精髓，「懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要」\"},\"2597\":{\"t\":\"Scott Mayers 在其巨著《Effective C++》就曾经说过：C++ 老手和 C++ 新手的区别就是前者手背上有很多伤疤\"},\"2598\":{\"h\":\"设计模式类型\",\"a\":\"设计模式类型\"},\"2599\":{\"t\":\"根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种：\"},\"2600\":{\"t\":\"创建型模式：用于描述「怎样创建对象」，它的主要特点是「将对象的创建与使用分离」\"},\"2601\":{\"t\":\"结构型模式：用于描述如何将类或对象按某种布局组成更大的结构\"},\"2602\":{\"t\":\"行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责\"},\"2603\":{\"t\":\"共 23 种：\"},\"2604\":{\"t\":\"创建型模式（5 种）\"},\"2605\":{\"t\":\"单例模式（Singleton Pattern）：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式\"},\"2606\":{\"t\":\"工厂方法模式（FactoryMethod Pattern）：定义一个用于创建产品的接口，由子类决定生产什么产品\"},\"2607\":{\"t\":\"抽象工厂模式（AbstractFactory Pattern）：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品\"},\"2608\":{\"t\":\"原型模式（Prototype Pattern）：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例\"},\"2609\":{\"t\":\"建造者模式（Builder Pattern）：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象\"},\"2610\":{\"t\":\"以上 5 种创建型模式，除了工厂方法模式属于类创建型模式，其他的全部属于对象创建型模式。\"},\"2611\":{\"t\":\"结构型模式（7 种）\"},\"2612\":{\"t\":\"适配器模式（Adapter Pattern）：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作\"},\"2613\":{\"t\":\"桥接模式（Bridge Pattern）：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度\"},\"2614\":{\"t\":\"装饰模式（Decorator Pattern）：动态地给对象增加一些职责，即增加其额外的功能\"},\"2615\":{\"t\":\"组合模式（Composite Pattern）：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性\"},\"2616\":{\"t\":\"外观模式（Facade Pattern）：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问\"},\"2617\":{\"t\":\"享元模式（Flyweight Pattern）：运用共享技术来有效地支持大量细粒度对象的复用\"},\"2618\":{\"t\":\"代理模式（Proxy Pattern）：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性\"},\"2619\":{\"t\":\"以上 7 种结构型模式，除了适配器模式分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式。\"},\"2620\":{\"t\":\"行为型模式（11 种）\"},\"2621\":{\"t\":\"模板方法模式（Template Method Pattern）模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤\"},\"2622\":{\"t\":\"命令模式（Command Pattern）：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开\"},\"2623\":{\"t\":\"访问者模式（Visitor Pattern）：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问\"},\"2624\":{\"t\":\"迭代器模式（Iterator Pattern）：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示\"},\"2625\":{\"t\":\"观察者模式（Observer Pattern）：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为\"},\"2626\":{\"t\":\"中介者模式（Mediator Pattern）：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解\"},\"2627\":{\"t\":\"备忘录模式（Memento Pattern）：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它\"},\"2628\":{\"t\":\"解释器模式（Interpreter Pattern）：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器\"},\"2629\":{\"t\":\"状态模式（State Pattern）：允许一个对象在其内部状态发生改变时改变其行为能力\"},\"2630\":{\"t\":\"策略模式（Strategy Pattern）：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户\"},\"2631\":{\"t\":\"职责链模式（Chain of Responsibility Pattern）：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合\"},\"2632\":{\"t\":\"以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。\"},\"2633\":{\"h\":\"行为型模板方法模式\"},\"2634\":{\"h\":\"模板方法模式基本介绍\",\"a\":\"模板方法模式基本介绍\"},\"2635\":{\"t\":\"在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。\"},\"2636\":{\"t\":\"例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。\"},\"2637\":{\"t\":\"这样的例子在生活中还有很多，例如，一个人每天会起床、吃饭、做事、睡觉等，其中「做事」的内容每天可能不同。我们把这些规定了流程或格式的实例定义成模板，允许使用者根据自己的需求去更新它，例如，简历模板、论文模板、Word 中模板文件等。\"},\"2638\":{\"t\":\"模板方法模式（Template Method Pattern）又叫 模板模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。\"},\"2639\":{\"t\":\"简单说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤。\"},\"2640\":{\"t\":\"这种类型的设计模式属于行为型模式。\"},\"2641\":{\"t\":\"主要优点\"},\"2642\":{\"t\":\"它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展\"},\"2643\":{\"t\":\"它在父类中提取了公共的部分代码，便于代码复用\"},\"2644\":{\"t\":\"部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则\"},\"2645\":{\"t\":\"主要缺点\"},\"2646\":{\"t\":\"对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度\"},\"2647\":{\"t\":\"父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度\"},\"2648\":{\"t\":\"由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍\"},\"2649\":{\"h\":\"模板方法模式结构与实现\",\"a\":\"模板方法模式结构与实现\"},\"2650\":{\"t\":\"模板方法模式包含以下主要角色。\"},\"2651\":{\"t\":\"抽象类/抽象模板（Abstract Class）\"},\"2652\":{\"t\":\"抽象模板类，负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。这些方法的定义如下：\"},\"2653\":{\"t\":\"模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法\"},\"2654\":{\"t\":\"基本方法：是整个算法中的一个步骤，包含以下几种类型： \"},\"2655\":{\"t\":\"抽象方法：在抽象类中声明，由具体子类实现\"},\"2656\":{\"t\":\"具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它\"},\"2657\":{\"t\":\"钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种\"},\"2658\":{\"t\":\"具体子类/具体实现（Concrete Class）\"},\"2659\":{\"t\":\"具体实现类，实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。\"},\"2660\":{\"t\":\"模板方法模式的结构图如下：\"},\"2661\":{\"t\":\"image-20220326113623976\"},\"2662\":{\"t\":\"代码实现：\"},\"2663\":{\"t\":\"// 抽象类 abstract class AbstractClass { // 模板方法 public void TemplateMethod() { SpecificMethod(); abstractMethod1(); abstractMethod2(); } // 具体方法 public void SpecificMethod() { System.out.println(\\\"抽象类中的具体方法被调用...\\\"); } // 抽象方法 1 public abstract void abstractMethod1(); // 抽象方法 2 public abstract void abstractMethod2(); } // 具体子类 class ConcreteClass extends AbstractClass { public void abstractMethod1() { System.out.println(\\\"抽象方法1的实现被调用...\\\"); } public void abstractMethod2() { System.out.println(\\\"抽象方法2的实现被调用...\\\"); } } public class TemplateMethodPattern { public static void main(String[] args) { AbstractClass tm = new ConcreteClass(); tm.TemplateMethod(); } } \"},\"2664\":{\"h\":\"模板方法模式解决豆浆制作问题\",\"a\":\"模板方法模式解决豆浆制作问题\"},\"2665\":{\"t\":\"编写制作豆浆的程序，说明如下：\"},\"2666\":{\"t\":\"制作豆浆的流程：选材、添加配料、浸泡、放到豆浆机打碎\"},\"2667\":{\"t\":\"通过添加不同的配料，可以制作出不同口味的豆浆\"},\"2668\":{\"t\":\"选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的（红豆、花生豆浆）\"},\"2669\":{\"t\":\"请使用 模板方法模式 完成\"},\"2670\":{\"t\":\"思路分析和类图：\"},\"2671\":{\"t\":\"image-20220326114122266\"},\"2672\":{\"h\":\"模板方法模式的钩子方法\",\"a\":\"模板方法模式的钩子方法\"},\"2673\":{\"t\":\"在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为 钩子。\"},\"2674\":{\"t\":\"比如，我们还希望制作纯豆浆，不添加任何的配料，则使用钩子方法\"},\"2675\":{\"t\":\"代码实现：\"},\"2676\":{\"t\":\"抽象类\"},\"2677\":{\"t\":\"// 抽象类，表示豆浆 public abstract class SoyaMilk { // 模板方法，make，模板方法可以做成final，不让子类去覆盖. final void make() { select(); if(customerWantCondiments()) { addCondiments(); } soak(); beat(); } // 选材料 void select() { System.out.println(\\\"第一步：选择好的新鲜黄豆 \\\"); } // 添加不同的配料，抽象方法，子类具体实现 abstract void addCondiments(); // 浸泡 void soak() { System.out.println(\\\"第三步， 黄豆和配料开始浸泡， 需要3小时 \\\"); } void beat() { System.out.println(\\\"第四步：黄豆和配料放到豆浆机去打碎 \\\"); } // 钩子方法，决定是否需要添加配料 boolean customerWantCondiments() { return true; } } // 红豆类 public class RedBeanSoyaMilk extends SoyaMilk { @Override void addCondiments() { System.out.println(\\\" 加入上好的红豆 \\\"); } } // 花生类 public class PeanutSoyaMilk extends SoyaMilk { @Override void addCondiments() { System.out.println(\\\" 加入上好的花生 \\\"); } } // 纯豆浆类 public class PureSoyaMilk extends SoyaMilk{ @Override void addCondiments() { // 空实现，纯豆浆不需要配料 } @Override boolean customerWantCondiments() { return false; } } \"},\"2678\":{\"t\":\"测试类\"},\"2679\":{\"t\":\"public class Client { public static void main(String[] args) { // 制作红豆豆浆 System.out.println(\\\"----制作红豆豆浆----\\\"); SoyaMilk redBeanSoyaMilk = new RedBeanSoyaMilk(); redBeanSoyaMilk.make(); System.out.println(\\\"----制作花生豆浆----\\\"); SoyaMilk peanutSoyaMilk = new PeanutSoyaMilk(); peanutSoyaMilk.make(); System.out.println(\\\"----制作纯豆浆----\\\"); SoyaMilk pureSoyaMilk = new PureSoyaMilk(); pureSoyaMilk.make(); } } \"},\"2680\":{\"h\":\"模板方法模式的注意事项和细节\",\"a\":\"模板方法模式的注意事项和细节\"},\"2681\":{\"t\":\"基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改。\"},\"2682\":{\"t\":\"实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。\"},\"2683\":{\"t\":\"该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大。一般模板方法都加上 final 关键字， 防止子类重写模板方法。\"},\"2684\":{\"h\":\"模板方法模式的应用场景\",\"a\":\"模板方法模式的应用场景\"},\"2685\":{\"t\":\"模板方法模式通常适用于以下场景：\"},\"2686\":{\"t\":\"算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现\"},\"2687\":{\"t\":\"当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码\"},\"2688\":{\"t\":\"当需要控制子类的扩展时，模板方法只在特定点调用钩子操作，这样就只允许在这些点进行扩展\"},\"2689\":{\"h\":\"设计思想\"},\"2690\":{\"h\":\"基于接口而非实现编程\",\"a\":\"基于接口而非实现编程\"},\"2691\":{\"t\":\"这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。\"},\"2692\":{\"h\":\"如何解读原则中的「接口」二字\",\"a\":\"如何解读原则中的「接口」二字\"},\"2693\":{\"t\":\"「基于接口而非实现编程」这条原则的英文描述是：「Program to an interface, not an implementation」。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的「接口」语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。\"},\"2694\":{\"t\":\"实际上，理解这条原则的关键，就是理解其中的「接口」两个字。从本质上来看，「接口」就是一组「协议」或者「约定」，是功能提供者提供给使用者的一个「功能列表」。「接口」在不同的应用场景下会有不同的解读，比如服务端与客户端之间的「接口」，类库提供的「接口」，甚至是一组通信的协议都可以叫作「接口」。刚刚对「接口」的理解，都比较偏上层、偏抽象，与实际的写代码离得有点远。如果落实到具体的编码，「基于接口而非实现编程」这条原则中的「接口」，可以理解为编程语言中的接口或者抽象类。\"},\"2695\":{\"t\":\"前面我们提到，这条原则能非常有效地提高代码质量，之所以这么说，那是因为，应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。\"},\"2696\":{\"t\":\"实际上，「基于接口而非实现编程」这条原则的另一个表述方式，是「基于抽象而非实现编程」。后者的表述方式其实更能体现这条原则的设计初衷。在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。\"},\"2697\":{\"h\":\"如何将这条原则应用到实战中\",\"a\":\"如何将这条原则应用到实战中\"},\"2698\":{\"t\":\"假设我们的系统中有很多涉及图片处理和存储的业务逻辑。图片经过处理之后被上传到阿里云上。为了代码复用，我们封装了图片存储相关的代码逻辑，提供了一个统一的 AliyunImageStore 类，供整个系统来使用。具体的代码实现如下所示：\"},\"2699\":{\"t\":\"public class AliyunImageStore { // ... 省略属性、构造函数等 ... public void createBucketIfNotExisting(String bucketName) { // ... 创建 bucket 代码逻辑 ... // ... 失败会抛出异常 ... } public String generateAccessToken() { // ...根据 accesskey/secrectkey 等生成 access token } public String uploadToAliyun(Image image, String bucketName, String accessToken) { //... 上传图片到阿里云 ... //... 返回图片存储在阿里云上的地址(url）... } public Image downloadFromAliyun(String url, String accessToken) { //... 从阿里云下载图片 ... } } // AliyunImageStore 类的使用举例 public class ImageProcessingJob { private static final String BUCKET_NAME = \\\"ai_images_bucket\\\"; // ... 省略其他无关代码 ... public void process() { Image image = ...; // 处理图片，并封装为 Image 对象 AliyunImageStore imageStore = new AliyunImageStore(/*省略参数*/); imageStore.createBucketIfNotExisting(BUCKET_NAME); String accessToken = imageStore.generateAccessToken(); imagestore.uploadToAliyun(image, BUCKET_NAME, accessToken); } } \"},\"2700\":{\"t\":\"整个上传流程包含三个步骤：创建 bucket（你可以简单理解为存储目录）、生成 access token 访问凭证、携带 access token 上传图片到指定的 bucket 中。代码实现非常简单，类中的几个方法定义得都很干净，用起来也很清晰，乍看起来没有太大问题，完全能满足我们将图片存储在阿里云的业务需求。\"},\"2701\":{\"t\":\"不过，软件开发中唯一不变的就是变化。过了一段时间后，我们自建了私有云，不再将图片存储到阿里云了，而是将图片存储到自建私有云上。为了满足这样一个需求的变化，我们该如何修改代码呢？\"},\"2702\":{\"t\":\"我们需要重新设计实现一个存储图片到私有云的 PrivateImageStore 类，并用它替换掉项目中所有的 AliyunImageStore 类对象。这样的修改听起来并不复杂，只是简单替换而已，对整个代码的改动并不大。不过，我们经常说，「细节是魔鬼」。这句话在软件开发中特别适用。实际上，刚刚的设计实现方式，就隐藏了很多容易出问题的「魔鬼细节」，我们一块来看看都有哪些\"},\"2703\":{\"t\":\"新的 PrivateImageStore 类需要设计实现哪些方法，才能在尽量最小化代码修改的情况下，替换掉 AliyunImageStore 类呢？这就要求我们必须将 AliyunImageStore 类中所定义的所有 public 方法，在 PrivateImageStore 类中都逐一定义并重新实现一遍。而这样做就会存在一些问题，我总结了下面两点\"},\"2704\":{\"t\":\"首先，AliyunImageStore 类中有些函数命名暴露了实现细节，比如，uploadToAliyun() 和 downloadFromAliyun()。如果开发这个功能的同事没有接口意识、抽象思维，那这种暴露实现细节的命名方式就不足为奇了，毕竟最初我们只考虑将图片存储在阿里云上。而我们把这种包含「aliyun」字眼的方法，照抄到 PrivateImageStore 类中，显然是不合适的。如果我们在新类中重新命名 uploadToAliyun()、downloadFromAliyun() 这些方法，那就意味着，我们要修改项目中所有使用到这两个方法的代码，代码修改量可能就会很大\"},\"2705\":{\"t\":\"其次，将图片存储到阿里云的流程，跟存储到私有云的流程，可能并不是完全一致的。比如，阿里云的图片上传和下载的过程中，需要生产 access token，而私有云不需要 access token。一方面，AliyunImageStore 中定义的 generateAccessToken() 方法不能照抄到 PrivateImageStore 中；另一方面，我们在使用 AliyunImageStore 上传、下载图片的时候，代码中用到了 generateAccessToken() 方法，如果要改为私有云的上传下载流程，这些代码都需要做调整\"},\"2706\":{\"t\":\"那这两个问题该如何解决呢？解决这个问题的根本方法就是，在编写代码的时候，要遵从「基于接口而非实现编程」的原则，具体来讲，我们需要做到下面这 3 点。\"},\"2707\":{\"t\":\"函数的命名不能暴露任何实现细节。比如，前面提到的 uploadToAliyun() 就不符合要求，应该改为去掉 aliyun 这样的字眼，改为更加抽象的命名方式，比如：upload()\"},\"2708\":{\"t\":\"封装具体的实现细节。比如，跟阿里云相关的特殊上传（或下载）流程不应该暴露给调用者。我们对上传（或下载）流程进行封装，对外提供一个包裹所有上传（或下载）细节的方法，给调用者使用\"},\"2709\":{\"t\":\"为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口，而不是具体的实现类来编程\"},\"2710\":{\"t\":\"我们按照这个思路，把代码重构一下。重构后的代码如下所示：\"},\"2711\":{\"t\":\"public interface ImageStore { String upload(Image image, String bucketName); Image download(String url); } public class AliyunImageStore implements ImageStore { // ... 省略属性、构造函数等 ... public String upload(Image image, String bucketName) { createBucketIfNotExisting(bucketName); String accessToken = generateAccessToken(); // ... 上传图片到阿里云 ... // ... 返回图片在阿里云上的地址(url) ... } public Image download(String url) { String accessToken = generateAccessToken(); // ... 从阿里云下载图片 ... } private void createBucketIfNotExisting(String bucketName) { // ... 创建bucket ... // ... 失败会抛出异常 ... } private String generateAccessToken() { // ... 根据 accesskey/secrectkey 等生成 access token } } // 上传下载流程改变：私有云不需要支持 access token public class PrivateImageStore implements ImageStore { public String upload(Image image, String bucketName) { createBucketIfNotExisting(bucketName); // ... 上传图片到私有云 ... // ... 返回图片的ur l... } public Image download(String url) { //... 从私有云下载图片 ... } private void createBucketIfNotExisting(String bucketName) { // ... 创建bucke t... // ... 失败会抛出异常 ... } } // ImageStore 的使用举例 public class ImageProcessingJob { private static final String BUCKET_NAME = \\\"ai_images_bucket\\\"; // ... 省略其他无关代码 ... public void process() { Image image = ...; // 处理图片，并封装为 Image 对象 ImageStore imageStore = new PrivateImageStore(...); imagestore.upload(image, BUCKET_NAME); } } \"},\"2712\":{\"t\":\"除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。\"},\"2713\":{\"t\":\"总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。\"},\"2714\":{\"h\":\"是否需要为每个类定义接口\",\"a\":\"是否需要为每个类定义接口\"},\"2715\":{\"t\":\"看了刚刚的讲解，你可能会有这样的疑问：为了满足这条原则，我是不是需要给每个实现类都定义对应的接口呢？在开发的时候，是不是任何代码都要只依赖接口，完全不依赖实现编程呢\"},\"2716\":{\"t\":\"做任何事情都要讲求一个「度」，过度使用这条原则，非得给每个类都定义接口，接口满天飞，也会导致不必要的开发负担。至于什么时候，该为某个类定义接口，实现基于接口的编程，什么时候不需要定义接口，直接使用实现类编程，我们做权衡的根本依据，还是要回归到设计原则诞生的初衷上来。只要搞清楚了这条原则是为了解决什么样的问题而产生的，你就会发现，很多之前模棱两可的问题，都会变得豁然开朗\"},\"2717\":{\"t\":\"前面我们也提到，这条原则的设计初衷是，将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低代码间的耦合性，提高代码的扩展性\"},\"2718\":{\"t\":\"从这个设计初衷上来看，如果在我们的业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那我们就没有必要为其设计接口，也没有必要基于接口编程，直接使用实现类就可以了\"},\"2719\":{\"t\":\"除此之外，越是不稳定的系统，我们越是要在代码的扩展性、维护性上下功夫。相反，如果某个系统特别稳定，在开发完之后，基本上不需要做维护，那我们就没有必要为其扩展性，投入不必要的开发时间\"},\"2720\":{\"h\":\"多用组合少用继承\",\"a\":\"多用组合少用继承\"},\"2721\":{\"t\":\"在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。\"},\"2722\":{\"h\":\"为什么不推荐使用继承\",\"a\":\"为什么不推荐使用继承\"},\"2723\":{\"t\":\"继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。\"},\"2724\":{\"t\":\"假设我们要设计一个关于鸟的类。我们将「鸟类」这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。\"},\"2725\":{\"t\":\"我们知道，大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有 fly() 方法的父类，那鸵鸟就具有「飞」这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？具体的代码实现如下所示：\"},\"2726\":{\"t\":\"public class AbstractBird { // ... 省略其他属性和方法 ... public void fly() { // ... } } public class Ostrich extends AbstractBird { // 鸵鸟 // ... 省略其他属性和方法 ... public void fly() { throw new UnSupportedMethodException(\\\"I can't fly.'\\\"); } } \"},\"2727\":{\"t\":\"这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。\"},\"2728\":{\"t\":\"你可能又会说，那我们再通过 AbstractBird 类派生出两个更加细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？\"},\"2729\":{\"t\":\"在刚刚这个场景中，我们只关注「鸟会不会飞」，但如果我们还关注「鸟会不会叫」，那这个时候，我们又该如何设计类之间的继承关系呢？\"},\"2730\":{\"t\":\"是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。\"},\"2731\":{\"t\":\"如果我们还需要考虑「是否会下蛋」这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。\"},\"2732\":{\"t\":\"总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。\"},\"2733\":{\"h\":\"组合相比继承有哪些优势\",\"a\":\"组合相比继承有哪些优势\"},\"2734\":{\"t\":\"实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。\"},\"2735\":{\"t\":\"接口表示具有某种行为特性。针对「会飞」这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。我们将这个设计思路翻译成 Java 代码的话，就是下面这个样子：\"},\"2736\":{\"t\":\"public interface Flyable { void fly(); } public interface Tweetable { void tweet(); } public interface EggLayable { void layEgg(); } public class Ostrich implements Tweetable, EggLayable {//鸵鸟 // ... 省略其他属性和方法... @Override public void tweet() { // ... } @Override public void layEgg() { // ... } } public class Sparrow impelents Flyable, Tweetable, EggLayable {//麻雀 // ... 省略其他属性和方法 ... @Override public void fly() { // ... } @Override public void tweet() { // ... } @Override public void layEgg() { // ... } } \"},\"2737\":{\"t\":\"不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍 layEgg() 方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？\"},\"2738\":{\"t\":\"我们可以针对三个接口再定义三个实现类，它们分别是：实现了 fly() 方法的 FlyAbility 类、实现了 tweet() 方法的 TweetAbility 类、实现了 layEgg() 方法的 EggLayAbility 类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：\"},\"2739\":{\"t\":\"public interface Flyable { void fly()； } public class FlyAbility implements Flyable { @Override public void fly() { //... } } // 省略 Tweetable/TweetAbility/EggLayable/EggLayAbility public class Ostrich implements Tweetable, EggLayable { // 鸵鸟 private TweetAbility tweetAbility = new TweetAbility(); // 组合 private EggLayAbility eggLayAbility = new EggLayAbility(); // 组合 // ... 省略其他属性和方法 ... @Override public void tweet() { tweetAbility.tweet(); // 委托 } @Override public void layEgg() { eggLayAbility.layEgg(); // 委托 } } \"},\"2740\":{\"t\":\"我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。\"},\"2741\":{\"h\":\"如何判断该用组合还是继承\",\"a\":\"如何判断该用组合还是继承\"},\"2742\":{\"t\":\"尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合\"},\"2743\":{\"t\":\"如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承\"},\"2744\":{\"t\":\"除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系\"},\"2745\":{\"t\":\"前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系。比如，Crawler 类和 PageAnalyzer 类，它们都用到了 URL 拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现 Crawler 类和 PageAnalyzer 类继承同一个父类，而父类中定义的却只是 URL 相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：\"},\"2746\":{\"t\":\"public class Url { // ... 省略属性和方法 } public class Crawler { private Url url; // 组合 public Crawler() { this.url = new Url(); } // ... } public class PageAnalyzer { private Url url; // 组合 public PageAnalyzer() { this.url = new Url(); } // ... } \"},\"2747\":{\"t\":\"还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。\"},\"2748\":{\"t\":\"public class FeignClient { // Feign Client 框架代码 // ... 省略其他代码 ... public void encode(String url) { // ... } } public void demofunction(FeignClient feignClient) { // ... feignClient.encode(url); // ... } public class CustomizedFeignClient extends FeignClient { @Override public void encode(String url) { // ... 重写 encode 的实现 ...} } // 调用 FeignClient client = new CustomizedFeignClient(); demofunction(client); \"},\"2749\":{\"t\":\"尽管有些人说，要杜绝继承，100% 用组合代替继承，但是我的观点没那么极端！之所以「多用组合少用继承」这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。\"},\"2750\":{\"h\":\"通过封装、抽象、模块化、中间层等解耦代码\",\"a\":\"通过封装、抽象、模块化、中间层等解耦代码\"},\"2751\":{\"h\":\"解耦为何如此重要\",\"a\":\"解耦为何如此重要\"},\"2752\":{\"t\":\"软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力是有限的。过于复杂的代码往往在可读性、可维护性上都不友好。那如何来控制代码的复杂性呢？手段有很多，我个人认为，最关键的就是解耦，保证代码松耦合、高内聚。如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段\"},\"2753\":{\"t\":\"后文迪米特法则有介绍，什么是「高内聚、松耦合」。实际上，「高内聚、松耦合」是一个比较通用的设计思想，不仅可以指导细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性\"},\"2754\":{\"t\":\"不管是阅读代码还是修改代码，「高内聚、松耦合」的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，「高内聚、松耦合」的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类\"},\"2755\":{\"t\":\"除此之外，代码「高内聚、松耦合」，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了\"},\"2756\":{\"h\":\"代码是否需要解耦\",\"a\":\"代码是否需要解耦\"},\"2757\":{\"t\":\"那现在问题来了，我们该怎么判断代码的耦合程度呢？或者说，怎么判断代码是否符合 高内聚、松耦合 呢？再或者说，如何判断系统是否需要解耦重构呢\"},\"2758\":{\"t\":\"间接的衡量标准有很多，前面我们讲到了一些，比如，看修改代码会不会牵一发而动全身。除此之外，还有一个直接的衡量标准，也是我在阅读源码的时候经常会用到的，那就是把模块与模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构\"},\"2759\":{\"t\":\"如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。当然，这种判断还是有比较强的主观色彩，但是可以作为一种参考和梳理依赖的手段，配合间接的衡量标准一块来使用\"},\"2760\":{\"h\":\"如何给代码解耦\",\"a\":\"如何给代码解耦\"},\"2761\":{\"t\":\"封装与抽象\"},\"2762\":{\"t\":\"封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口。\"},\"2763\":{\"t\":\"中间层\"},\"2764\":{\"t\":\"引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰。\"},\"2765\":{\"t\":\"除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。\"},\"2766\":{\"t\":\"第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义\"},\"2767\":{\"t\":\"第二阶段：新开发的代码依赖中间层提供的新接口\"},\"2768\":{\"t\":\"第三阶段：将依赖老接口的代码改为调用新接口\"},\"2769\":{\"t\":\"第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口\"},\"2770\":{\"t\":\"这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。\"},\"2771\":{\"t\":\"模块化\"},\"2772\":{\"t\":\"模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。\"},\"2773\":{\"t\":\"其他设计思想和原则\"},\"2774\":{\"t\":\"高内聚、松耦合 是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，我们已经多次听到过这个设计思想。很多设计原则都以实现代码的 高内聚、松耦合 为目的。我们来一块简单了解都有哪些原则。\"},\"2775\":{\"t\":\"单一职责原则\"},\"2776\":{\"t\":\"我们前面提到，内聚性和耦合性并非独立的。高内聚会让代码更加松耦合，而实现高内聚的重要指导原则就是单一职责原则。模块或者类的职责设计得单一，而不是大而全，那依赖它的类和它依赖的类就会比较少，代码耦合也就相应的降低了。\"},\"2777\":{\"t\":\"基于接口而非实现编程\"},\"2778\":{\"t\":\"基于接口而非实现编程能通过接口这样一个中间层，隔离变化和具体的实现。这样做的好处是，在有依赖关系的两个模块或类之间，一个模块或者类的改动，不会影响到另一个模块或类。实际上，这就相当于将一种强依赖关系（强耦合）解耦为了弱依赖关系（弱耦合）。依赖注入。\"},\"2779\":{\"t\":\"依赖注入\"},\"2780\":{\"t\":\"跟基于接口而非实现编程思想类似，依赖注入也是将代码之间的强耦合变为弱耦合。尽管依赖注入无法将本应该有依赖关系的两个类，解耦为没有依赖关系，但可以让耦合关系没那么紧密，容易做到插拔替换。\"},\"2781\":{\"t\":\"多用组合少用继承\"},\"2782\":{\"t\":\"我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。\"},\"2783\":{\"t\":\"迪米特法则\"},\"2784\":{\"t\":\"迪米特法则讲的是，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。从定义上，我们明显可以看出，这条原则的目的就是为了实现代码的松耦合。除了上面讲到的这些设计思想和原则之外，还有一些设计模式也是为了解耦依赖，比如观察者模式，有关这一部分的内容，我们留在设计模式模块中慢慢讲解。\"},\"2785\":{\"t\":\"下一章会继续讲解七大设计原则。\"},\"2786\":{\"h\":\"代码复用\",\"a\":\"代码复用\"},\"2787\":{\"t\":\"无论是开发哪种软件产品，成本和时间都是最重要的。较少的开发时间意味着可以比竞争对手更早进入市场。较低的开发成本意味着能够留出更多的营销资金，覆盖更广泛的潜在客户。\"},\"2788\":{\"t\":\"其中，代码复用是减少开发成本最常用的方式之一，其目的非常明显，即：与其反复从头开发，不如在新对象中重用已有的代码。\"},\"2789\":{\"t\":\"这个想法表面看起来很棒，但实际上要让已有的代码在全新的代码中工作，还是需要付出额外努力的。组件间紧密的耦合、对具体类而非接口的依赖和硬编码的行为都会降低代码的灵活性，使得复用这些代码变得更加困难。\"},\"2790\":{\"t\":\"使用设计模式是增加软件组件灵活性并使其易于复用的方式之一。但是，这可能也会让组件变得更加复杂。\"},\"2791\":{\"t\":\"一般情况下，复用可以分为三个层次。在最底层，可以复用类、类库、容器，也许还有一些类的「团体（例如容器和迭代器）」。\"},\"2792\":{\"t\":\"框架位于最高层。它们能帮助你精简自己的设计，可以明确解决问题所需的抽象概念，然后用类来表示这些概念并定义其关系。例如，JUnit 是一个小型框架，也是框架的 Hello, world，其中定义了 Test、TestCase 和 TestSuite 这几个类及其关系。框架通常比单个类的颗粒度要大。你可以通过在某处构建子类来与框架建立联系。这些子类信奉「别给我们打电话，我们会给你打电话的。」\"},\"2793\":{\"t\":\"还有一个中间层次。这是我觉得设计模式所处的位置。设计模式比框架更小且更抽象。它们实际上是对一组类的关系及其互动方式的描述。当你从类转向模式，并最终到达框架的过程中，复用程度会不断增加。\"},\"2794\":{\"t\":\"中间层次的优点在于模式提供的复用方式要比框架的风险小。创建框架是一项投入重大且风险很高的工作，模式则能让你独立于具体代码来复用设计思想和理念。\"},\"2795\":{\"h\":\"扩展性\",\"a\":\"扩展性\"},\"2796\":{\"t\":\"需求变化是程序员生命中唯一不变的事情。比如以下几种场景：\"},\"2797\":{\"t\":\"你在 Windows 平台上发布了一款游戏，现在人们想要 Mac OS 的版本\"},\"2798\":{\"t\":\"你创建了一个使用方形按钮的 GUI 框架，但几个月后开始流行原型按钮\"},\"2799\":{\"t\":\"你设计了一款优秀的电子商务网站，但仅仅几个月后，客户就要求新增电话订单的功能\"},\"2800\":{\"t\":\"每个软件开发者都经历过许多相似的故事，导致它们发生的原因也不少。\"},\"2801\":{\"t\":\"首先，在完成了第一版的程序后，我们就应该做好了从头开始优化重写代码的准备，因为现在你已经能在很多方面更好的理解问题了，同时在专业水平上也有所提高，所以之前的代码现在看上去可能会显得很糟糕。\"},\"2802\":{\"t\":\"其次，可能是在你掌控之外的某些事情发生了变化，这也是导致许多开发团队转变最初想法的原因。比如，每位在网络应用中使用 Flash 的开发者都必须重新开发或移植代码，因为不断地有浏览器停止对 Flash 格式地支持。\"},\"2803\":{\"t\":\"最后，可能是需求的改变，之前你的客户对当前版本的程序感到满意，但是现在希望对程序进行 11 个「小小」的改动，使其可完成原始计划阶段中完全没有提到的功能，新增或改变功能。\"},\"2804\":{\"t\":\"当然这也有好的一面，如果有人要求你对程序进行修改，至少说明还有人关心它。因此在设计程序架构时，有经验的开发者都会尽量选择支持未来任何可能变更的方式。\"},\"2805\":{\"h\":\"UML类图\"},\"2806\":{\"h\":\"UML 基本介绍\",\"a\":\"uml-基本介绍\"},\"2807\":{\"t\":\"997 年 UML 被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是 简单、统一、图形化、能表达软件设计中的动态与静态信息。\"},\"2808\":{\"t\":\"UML：Unified modeling language UML (统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果。\"},\"2809\":{\"t\":\"UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他 们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等，如右图：\"},\"2810\":{\"t\":\"画 UML 图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理，UML 图分类：\"},\"2811\":{\"t\":\"用例图（use case）\"},\"2812\":{\"t\":\"静态结构图：类图、对象图、包图、组件图、部署图\"},\"2813\":{\"t\":\"动态行为图：交互图（时序图与协作图）、状态图、活动图\"},\"2814\":{\"t\":\"说明：类图是描述类与类之间的关系的，是 UML 图中最核心的。\"},\"2815\":{\"h\":\"应用场景\",\"a\":\"应用场景\"},\"2816\":{\"t\":\"UML 能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。\"},\"2817\":{\"t\":\"UML 具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML 可以对任何具有静态结构和动态行为的系统进行建模，而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段。\"},\"2818\":{\"t\":\"UML 模型大多以图表的方式表现出来，一份典型的建模图表通常包含几个块或框、连接线和作为模型附加信息的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。\"},\"2819\":{\"t\":\"在这里大家可能会疑问，UML 明明是一种图形，为什么说是语言呢？\"},\"2820\":{\"t\":\"语言是包括文字和图形的，有很多内容文字是无法表达的。你见过建筑设计图纸吗？里面还不是很多图形，光用文字能表达清楚建筑设计吗？在建筑界，有一套标准来描述设计，同样道理，在软件开发界，我们也需要一套标准来帮助我们做好软件开发的工作。UML 就是其中的一种标准，注意这可不是唯一标准，只是 UML 是大家比较推崇的一种标准而已。UML 并不是强制性标准，没有规定在软件开发中一定要用 UML，但是我们需要包括 UML 在内的各种标准，来提高我们软件开发的水平。\"},\"2821\":{\"h\":\"基本构件\",\"a\":\"基本构件\"},\"2822\":{\"t\":\"UML 建模的核心是模型，模型是现实的简化、真实系统的抽象。UML 提供了系统的设计蓝图。当给软件系统建模时，需要采用通用的符号语言，这种描述模型所使用的语言被称为建模语言。在 UML 中，所有的描述由事物、关系和图这些构件组成。下图完整地描述了所有构件的关系：\"},\"2823\":{\"t\":\"image-20220326235402075\"},\"2824\":{\"h\":\"UML 接口\",\"a\":\"uml-接口\"},\"2825\":{\"t\":\"接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示。\"},\"2826\":{\"t\":\"如下所示是图形类接口的 UML 表示：\"},\"2827\":{\"t\":\"image-20220327001037848\"},\"2828\":{\"t\":\"如果在 IDEA，那么是：\"},\"2829\":{\"t\":\"image-20220327001011970\"},\"2830\":{\"h\":\"UML 类图\",\"a\":\"uml-类图\"},\"2831\":{\"t\":\"类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。\"},\"2832\":{\"t\":\"类图中的类可以通过某种编程语言直接实现。类图在软件系统开发的整个生命周期都是有效的，它是面向对象系统的建模中最常见的图。如下所示是「计算长方形和圆形的周长与面积」的类图，图形接口有计算面积和周长的抽象方法，长方形和圆形实现这两个方法供访问类调用。\"},\"2833\":{\"t\":\"类图用于描述系统中的类（对象）本身的组成和类（对象）之间的各种静态关系。\"},\"2834\":{\"t\":\"类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合\"},\"2835\":{\"t\":\"类图简单举例\"},\"2836\":{\"t\":\"public class Person{ private Integer id; private String name; public void setName(String name){ this.name=name; } public String getName(){ return name; } } \"},\"2837\":{\"t\":\"对该类右键\"},\"2838\":{\"t\":\"image-20220226225439452\"},\"2839\":{\"t\":\"image-20220226225625153\"},\"2840\":{\"t\":\"如果新建一个类图，快捷键是空格，或者对着空白处右键，点击 Add Class to Diagram...，搜索其他类即可。\"},\"2841\":{\"t\":\"类图用 3 个矩形拼接表示，最上面的部分标识类的名称，中间的部分标识类的属性，最下面的部分标识类的方法。\"},\"2842\":{\"t\":\"类图中，需注意以下几点：\"},\"2843\":{\"t\":\"抽象类或抽象方法用斜体表示\"},\"2844\":{\"t\":\"如果是接口，则在类名上方加 <<Interface>>\"},\"2845\":{\"t\":\"字段和方法返回值的数据类型非必需\"},\"2846\":{\"t\":\"静态类或静态方法加下划线\"},\"2847\":{\"h\":\"类之间的关系\",\"a\":\"类之间的关系\"},\"2848\":{\"t\":\"UML 将事物之间的联系归纳为 6 种，并用对应的图形类表示。下面根据类与类之间的耦合度从弱到强排列。UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。\"},\"2849\":{\"h\":\"类图—依赖关系（Dependence）\",\"a\":\"类图—依赖关系-dependence\"},\"2850\":{\"t\":\"依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。\"},\"2851\":{\"t\":\"只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。\"},\"2852\":{\"t\":\"依赖关系使用 带箭头的虚线 来表示，箭头从使用类指向被依赖的类。\"},\"2853\":{\"t\":\"public class PersonServiceBean { private PersonDao personDao; // 类 public void save(Person person){} public IDCard getIDCard(Integer personid){return null;} public void modify(){ Department department = new Department(); } } class PersonDao{} class IDCard{} class Person1{} class Department{} \"},\"2854\":{\"t\":\"对应的类图：\"},\"2855\":{\"t\":\"image-20220226230456728\"},\"2856\":{\"h\":\"小结\",\"a\":\"小结\"},\"2857\":{\"t\":\"什么时候显示依赖关系：\"},\"2858\":{\"t\":\"类中用到了对方\"},\"2859\":{\"t\":\"如果是类的成员属性\"},\"2860\":{\"t\":\"如果是方法的返回类型\"},\"2861\":{\"t\":\"是方法接收的参数类型\"},\"2862\":{\"t\":\"方法中使用到\"},\"2863\":{\"h\":\"类图—关联关系（Association）\",\"a\":\"类图—关联关系-association\"},\"2864\":{\"t\":\"关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。\"},\"2865\":{\"t\":\"关联具有 导航性：即双向关系或单向关系。\"},\"2866\":{\"t\":\"关联具有多重性：如 1(表示有且仅有一个），「0...」(表示 0 个或者多个），「0，1」(表示 0 个或者一个）,「n.….」(表示 n 到 m 个都可以)，「m.….*」（表示至少 m 个)。\"},\"2867\":{\"t\":\"关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用 带两个箭头或者没有箭头的实线 来表示，单向的关联用 带一个箭头的实线 来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。\"},\"2868\":{\"t\":\"双向一对一关系\"},\"2869\":{\"t\":\"public class Tercher { private String name; private List<Student> stus; } class Student { private String name; private List<Tercher> teas; public void study(){ } } \"},\"2870\":{\"t\":\"image-20220327001329079\"},\"2871\":{\"h\":\"类图—聚合关系（Aggregation）\",\"a\":\"类图—聚合关系-aggregation\"},\"2872\":{\"t\":\"聚合（Aggregation）关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系，是 整体和部分的关系，整体与部分可以分开，是 关联关系的特例，所以他具有关联的 导航性与多重性。\"},\"2873\":{\"t\":\"聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。\"},\"2874\":{\"t\":\"在 UML 类图中，聚合关系可以用 带空心菱形的实线 来表示，菱形指向整体。如下是大学和教师的代码和关系图：\"},\"2875\":{\"t\":\"public class University { private Teacher teas; public void setTeacher(Teacher teas) { this.teas = teas; } } class Teacher { private String name; public void teaching(); } \"},\"2876\":{\"t\":\"image-20220327001543029\"},\"2877\":{\"h\":\"类图—组合关系（Composition）\",\"a\":\"类图—组合关系-composition\"},\"2878\":{\"t\":\"组合（Composition）关系也是关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。\"},\"2879\":{\"t\":\"在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。\"},\"2880\":{\"t\":\"在 UML 类图中，组合关系用 带实心菱形的实线 来表示，菱形指向整体。\"},\"2881\":{\"t\":\"案例：在程序中我们定义实体：Person（人）与 IDCard（身份证）、Head（头），那么 Head 和 Person 就是组合，IDCard 和 Person 就是聚合。\"},\"2882\":{\"t\":\"但是如果在程序中 Person 实体中定义了对 IDCard 进行级联删除，即删除 Person 时连同 IDCard 一起删除，那 么 IDCard 和 Person 就是组合了。\"},\"2883\":{\"t\":\"案例 1\"},\"2884\":{\"t\":\"public class Head{ private IDCard card; private Head head = new Head(); } public class IDCard{} public class Head{} \"},\"2885\":{\"t\":\"如下图，可以看到黑色的箭头是组合关系，白色的箭头是聚合。\"},\"2886\":{\"t\":\"image-20220226232425687\"},\"2887\":{\"t\":\"案例 2\"},\"2888\":{\"t\":\"public class Computer { private Mouse mouse = new Mouse(); // 鼠标可以和 Computer 不能分离 private Moniter moniter = new Moniter();// 显示器可以和 Computer 不能分离 public void setMouse(Mouse mouse) { this.mouse = mouse; } public void setMoniter(Moniter moniter) { this.moniter = moniter; } } public class Mouse { } public class Moniter { } \"},\"2889\":{\"t\":\"image-20220226232506081\"},\"2890\":{\"t\":\"聚合通过方法参数、构造器、setter 传入对象，是组合的弱引用。\"},\"2891\":{\"t\":\"组合是直接 new 出对象，依赖性强。\"},\"2892\":{\"h\":\"类图—泛化关系(generalization）\",\"a\":\"类图—泛化关系-generalization\"},\"2893\":{\"t\":\"泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。\"},\"2894\":{\"t\":\"在 UML 类图中，泛化关系用 带空心三角箭头的实线 来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。\"},\"2895\":{\"t\":\"abstract class DaoSupport{ public void save(Object entity){ } public void delete(Object id){ } } class PersonServiceBean2 extends DaoSupport{ } \"},\"2896\":{\"t\":\"类图（蓝色是 IDEA 自带，实际是空心的）：\"},\"2897\":{\"t\":\"image-20220226231114471\"},\"2898\":{\"h\":\"类图—实现关系（Implementation）\",\"a\":\"类图—实现关系-implementation\"},\"2899\":{\"t\":\"实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。\"},\"2900\":{\"t\":\"在 UML 类图中，实现关系使用 带空心三角箭头的虚线 来表示，箭头从实现类指向接口。\"},\"2901\":{\"t\":\"实现关系实际上就是 A 类实现 B 接口，他是依赖关系的特例。\"},\"2902\":{\"t\":\"public interface PersonService { public void delete(Interger id); } public class PersonServiceBean implements PersonService { public void delete(Interger id){} } \"},\"2903\":{\"t\":\"如下图，绿色是 IDEA 自带，实际是空心的虚线：\"},\"2904\":{\"t\":\"image-20220226231346103\"},\"2905\":{\"h\":\"类与类箭头技巧\",\"a\":\"类与类箭头技巧\"},\"2906\":{\"t\":\"画类图时，要使用正确的箭头。类关系记忆技巧总结如下表所示：\"},\"2907\":{\"t\":\"分类\"},\"2908\":{\"t\":\"箭头特征\"},\"2909\":{\"t\":\"记忆技巧\"},\"2910\":{\"t\":\"箭头方向\"},\"2911\":{\"t\":\"从子类指向父类\"},\"2912\":{\"t\":\"定义子类需要通过 extends 关键字指定父类子类一定是知道父类定义的，但父类并不知道子类的定义只有知道对方信息时才能指向对方箭头的方向是从子类指向父类\"},\"2913\":{\"t\":\"继承/实现\"},\"2914\":{\"t\":\"用线条连接两个类； 空心三角箭头表示继承或实现\"},\"2915\":{\"t\":\"实线表示继承，是is-a的关系，表示扩展，不虚，很结实\"},\"2916\":{\"t\":\"虚线表示实现，虚线代表「虚」无实体\"},\"2917\":{\"t\":\"关联/依赖\"},\"2918\":{\"t\":\"用线条连接两个类； 普通箭头表示关联或依赖\"},\"2919\":{\"t\":\"虚线表示依赖关系：临时用一下，若即若离，虚无缥缈，若有若无表示一种使用关系，一个类需要借助另一个类来实现功能一般一个类将另一个类作为参数使用，或作为返回值\"},\"2920\":{\"t\":\"实线表示关联关系：关系稳定，实打实的关系，「铁哥们」表示一个类对象和另一个类对象有关联通常一个类中有另一个类对象作为属性\"},\"2921\":{\"t\":\"组合/聚合\"},\"2922\":{\"t\":\"用菱形表示：像一个盛东西的器皿（如盘子）\"},\"2923\":{\"t\":\"聚合：空心菱形，代表空器皿里可以放很多相同的东西，聚集在一起（箭头方向所指的类）整体和局部的关系，两者有独立的生命周期，是 has-a 的关系弱关系，消极的词：弱-空\"},\"2924\":{\"t\":\"组合：实心菱形，代表器皿里已经有实体结构的存在，生死与共整体与局部的关系，和聚合关系对比，关系更加强烈，两者具有相同的生命周期，contains-a 的关系强关系，积极的词；强-满\"},\"2925\":{\"t\":\"注意：UML 的标准类关系图中，没有实心箭头。有些 Java 编程的 IDE 自带类生成工具可能出现实心箭头，主要目的是降低理解难度。\"},\"2926\":{\"h\":\"行为型访问者模式\"},\"2927\":{\"h\":\"访问者模式基本介绍\",\"a\":\"访问者模式基本介绍\"},\"2928\":{\"t\":\"在现实生活中，有些集合对象存在多种不同的元素，且每种元素也存在多种不同的访问者和处理方式。例如，公园中存在多个景点，也存在多个游客，不同的游客对同一个景点的评价可能不同；医院医生开的处方单中包含多种药元素，査看它的划价员和药房工作人员对它的处理方式也不同，划价员根据处方单上面的药品名和数量进行划价，药房工作人员根据处方单的内容进行抓药。\"},\"2929\":{\"t\":\"这样的例子还有很多，例如，电影或电视剧中的人物角色，不同的观众对他们的评价也不同；还有顾客在商场购物时放在「购物车」中的商品，顾客主要关心所选商品的性价比，而收银员关心的是商品的价格和数量。\"},\"2930\":{\"t\":\"这些被处理的数据元素相对稳定而访问方式多种多样的数据结构，如果用「访问者模式」来处理比较方便。访问者模式能把处理方法从数据结构中分离出来，并可以根据需要增加新的处理方法，且不用修改原来的程序代码与数据结构，这提高了程序的扩展性和灵活性。\"},\"2931\":{\"t\":\"访问者模式（Visitor Pattern），将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式。\"},\"2932\":{\"t\":\"访问者模式（Visitor）是一种对象行为型模式，基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口。\"},\"2933\":{\"t\":\"访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作（这些操作彼此没有关联），同时需要避免让这些操作「污染」这些对象的类，可以选用访问者模式解决。\"},\"2934\":{\"t\":\"主要优点\"},\"2935\":{\"t\":\"扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能\"},\"2936\":{\"t\":\"复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度\"},\"2937\":{\"t\":\"灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构\"},\"2938\":{\"t\":\"符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一\"},\"2939\":{\"t\":\"主要缺点\"},\"2940\":{\"t\":\"增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了「开闭原则」\"},\"2941\":{\"t\":\"破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性\"},\"2942\":{\"t\":\"违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类\"},\"2943\":{\"h\":\"访问者模式的结构与实现\",\"a\":\"访问者模式的结构与实现\"},\"2944\":{\"t\":\"访问者模式包含以下主要角色：\"},\"2945\":{\"t\":\"抽象访问者（Visitor）角色：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作 visit()，该操作中的参数类型标识了被访问的具体元素\"},\"2946\":{\"t\":\"具体访问者（ConcreteVisitor）角色：实现抽象访问者角色中声明的各个访问操作，确定访问者访问一个元素时该做什么\"},\"2947\":{\"t\":\"抽象元素（Element）角色：声明一个包含接受操作 accept() 的接口，被接受的访问者对象作为 accept() 方法的参数\"},\"2948\":{\"t\":\"具体元素（ConcreteElement）角色：实现抽象元素角色提供的 accept() 操作，其方法体通常都是 visitor.visit(this)，另外具体元素中可能还包含本身业务逻辑的相关操作\"},\"2949\":{\"t\":\"对象结构（Object Structure）角色：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现\"},\"2950\":{\"t\":\"结构图如下：\"},\"2951\":{\"t\":\"image-20220326123351242\"},\"2952\":{\"t\":\"代码实现：\"},\"2953\":{\"t\":\"// 抽象访问者 interface Visitor { void visit(ConcreteElementA element); void visit(ConcreteElementB element); } // 具体访问者 A 类 class ConcreteVisitorA implements Visitor { public void visit(ConcreteElementA element) { System.out.println(\\\"具体访问者A访问-->\\\" + element.operationA()); } public void visit(ConcreteElementB element) { System.out.println(\\\"具体访问者A访问-->\\\" + element.operationB()); } } // 具体访问者 B 类 class ConcreteVisitorB implements Visitor { public void visit(ConcreteElementA element) { System.out.println(\\\"具体访问者B访问-->\\\" + element.operationA()); } public void visit(ConcreteElementB element) { System.out.println(\\\"具体访问者B访问-->\\\" + element.operationB()); } } // 抽象元素类 interface Element { void accept(Visitor visitor); } // 接收者元素 A 类 class ConcreteElementA implements Element { public void accept(Visitor visitor) { visitor.visit(this); } public String operationA() { return \\\"具体元素A的操作。\\\"; } } // 接收者元素 B 类 class ConcreteElementB implements Element { public void accept(Visitor visitor) { visitor.visit(this); } public String operationB() { return \\\"具体元素B的操作。\\\"; } } // 对象结构角色 class ObjectStructure { private List<Element> list = new ArrayList<Element>(); public void accept(Visitor visitor) { Iterator<Element> i = list.iterator(); while (i.hasNext()) { ((Element) i.next()).accept(visitor); } } public void add(Element element) { list.add(element); } public void remove(Element element) { list.remove(element); } } public class VisitorPattern { public static void main(String[] args) { ObjectStructure os = new ObjectStructure(); os.add(new ConcreteElementA()); os.add(new ConcreteElementB()); Visitor visitor = new ConcreteVisitorA(); os.accept(visitor); System.out.println(\\\"------------------------\\\"); visitor = new ConcreteVisitorB(); os.accept(visitor); } } \"},\"2954\":{\"h\":\"访问者模式应用实例\",\"a\":\"访问者模式应用实例\"},\"2955\":{\"t\":\"将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价（评价有不同的种类，比如成功、失败等）\"},\"2956\":{\"t\":\"思路分析和类图：\"},\"2957\":{\"t\":\"image-20220326123658042\"},\"2958\":{\"t\":\"代码实现：\"},\"2959\":{\"t\":\"行为类\"},\"2960\":{\"t\":\"public abstract class Action { // 得到男性的测评 public abstract void getManResult(Man man); // 得到女性的测评 public abstract void getWomanResult(Woman woman); } public class Success extends Action { @Override public void getManResult(Man man) { System.out.println(\\\" 男人给的评价该歌手很成功 !\\\"); } @Override public void getWomanResult(Woman woman) { System.out.println(\\\" 女人给的评价该歌手很成功 !\\\"); } } public class Fail extends Action { @Override public void getManResult(Man man) { System.out.println(\\\" 男人给的评价该歌手失败 !\\\"); } @Override public void getWomanResult(Woman woman) { System.out.println(\\\" 女人给的评价该歌手失败 !\\\"); } } public class Wait extends Action { @Override public void getManResult(Man man) { System.out.println(\\\" 男人给的评价是该歌手待定 ..\\\"); } @Override public void getWomanResult(Woman woman) { System.out.println(\\\" 女人给的评价是该歌手待定 ..\\\"); } } \"},\"2961\":{\"t\":\"访问者类\"},\"2962\":{\"t\":\"public abstract class Person { // 提供一个方法，让访问者可以访问 public abstract void accept(Action action); } public class Man extends Person { @Override public void accept(Action action) { action.getManResult(this); } } // 说明 // 1. 这里我们使用到了双分派, 即首先在客户端程序中，将具体状态作为参数传递 Woman 中(第一次分派) // 2. 然后 Woman 类调用作为参数的 \\\"具体方法\\\" 中方法 getWomanResult, 同时将自己(this)作为参数传入，完成第二次的分派 public class Woman extends Person{ @Override public void accept(Action action) { action.getWomanResult(this); } } \"},\"2963\":{\"t\":\"管理类\"},\"2964\":{\"t\":\"// 数据结构，管理很多人（Man , Woman） public class ObjectStructure { // 维护了一个集合 private List<Person> persons = new LinkedList<>(); // 增加到 list public void attach(Person p) { persons.add(p); } // 移除 public void detach(Person p) { persons.remove(p); } // 显示测评情况 public void display(Action action) { for(Person p: persons) { p.accept(action); } } } \"},\"2965\":{\"t\":\"测试类\"},\"2966\":{\"t\":\"public class Client { public static void main(String[] args) { // 创建 ObjectStructure ObjectStructure objectStructure = new ObjectStructure(); objectStructure.attach(new Man()); objectStructure.attach(new Woman()); // 成功 Success success = new Success(); objectStructure.display(success); System.out.println(\\\"===============\\\"); Fail fail = new Fail(); objectStructure.display(fail); System.out.println(\\\"=======给的是待定的测评========\\\"); Wait wait = new Wait(); objectStructure.display(wait); } } \"},\"2967\":{\"t\":\"上面 Woman 类提到了 双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型。\"},\"2968\":{\"t\":\"以上述实例为例，假设我们要添加一个 Wait 的状态类，考察 Man 类和 Woman 类的反应，由于使用了 双分派，只需增加一个 Action 子类即可在客户端调用即可，不需要改动任何其他类的代码。\"},\"2969\":{\"h\":\"访问者模式的注意事项和细节\",\"a\":\"访问者模式的注意事项和细节\"},\"2970\":{\"t\":\"访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高。访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统。\"},\"2971\":{\"t\":\"访问者模式的具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难，违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素。\"},\"2972\":{\"t\":\"因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么 访问者模式就是比较合适的\"},\"2973\":{\"h\":\"访问者模式的应用场景\",\"a\":\"访问者模式的应用场景\"},\"2974\":{\"t\":\"当系统中存在类型数量稳定（固定）的一类数据结构时，可以使用访问者模式方便地实现对该类型所有数据结构的不同操作，而又不会对数据产生任何副作用（脏数据）。\"},\"2975\":{\"t\":\"简而言之，就是当对集合中的不同类型数据（类型数量稳定）进行多种操作时，使用访问者模式。\"},\"2976\":{\"t\":\"通常在以下情况可以考虑使用访问者（Visitor）模式：\"},\"2977\":{\"t\":\"对象结构相对稳定，但其操作算法经常变化的程序\"},\"2978\":{\"t\":\"对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构\"},\"2979\":{\"t\":\"对象结构包含很多类型的对象，希望对这些对象实施一些依赖于其具体类型的操作。\"},\"2980\":{\"h\":\"阿里巴巴 Java 开发手册\"},\"2981\":{\"h\":\"前言\",\"a\":\"前言\"},\"2982\":{\"t\":\"《Java开发手册》是阿里巴巴和开课吧技术团队的集体智慧结晶和经验总结，经历了多次大规模一线实战的检验及不断完善，公开到业界后，众多社区开发者踊跃参与打磨完善，系统化地整理成册，当前的最新版本是黄山版。现代软件行业的高速发展对开发者的综合素质要求越来越高，因为不仅是编程知识点，其它维度的知识点也会影响到软件的最终交付质量。比如：五花八门的错误码会人为地增加排查问题的难度；数据库的表结构和索引设计缺陷带来的系统架构缺陷或性能风险；工程结构混乱导致后续项目维护艰难；没有鉴权的漏洞代码容易被黑客攻击等。所以本手册以Java开发者为中心视角，划分为编程规约、异常日志、单元测试、安全规约、MySQL数据库、工程结构、设计规约七个维度，再根据内容特征，细分成若干二级子目录。此外，依据约束力强弱及故障敏感性，规约依次分为【强制】、【推荐】、【参考】三大类。在延伸的信息中，“说明”对规约做了适当扩展和解释；“正例”提倡什么样的编码和实现方式；“反例”说明需要提防的雷区，以及真实的错误案例。\"},\"2983\":{\"t\":\"手册的愿景是码出高效，码出质量。现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制定交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶？对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，代码质 量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。2017 年杭州云栖大会上发布了配套的Java开发规约IDE插件，下载量已达到 275 万人次，阿里云效也集成了代码规约扫描引擎。 2018 年 9 月在云栖厅发布 36 万字的配套详解图书《码出高效》，秉持“图胜于表，表胜于言”的理念，深入浅出地将计算机基础、面向对象思想、数据结构与集合、JVM探源与内存分析、并发与多线程、单元测试等知识丰富立体地呈现出来。本书紧扣学以致用、学以精进的目标，结合一线开发的实践经验和故障案例，与底层源码解析融会贯通，娓娓道来。《码出高效》和《Java开发手册（第 2 版）》稿费所得收入均捐赠公益事情，希望用技术情怀帮助到更多的人。\"},\"2984\":{\"h\":\"一、编程规约\",\"a\":\"一、编程规约\"},\"2985\":{\"h\":\"(一) 命名风格\",\"a\":\"一-命名风格\"},\"2986\":{\"t\":\"【强制】所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 反例：_name / __name / / Object$\"},\"2987\":{\"t\":\"【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。 正例：ali / alibaba / taobao / kaikeba / aliyun / youku / hangzhou等国际通用的名称，可视同英文。 反例：DaZhePromotion【打折】/ getPingfenByName()【评分】 / String fw【福娃】/ int 变量名 = 3\"},\"2988\":{\"t\":\"【强制】代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。 正例：blockList / allowList / secondary 反例：blackList / whiteList / slave / SB / WTF\"},\"2989\":{\"t\":\"【强制】类名使用UpperCamelCase风格，以下情形例外：DO / PO / DTO / BO / VO / UID等。 正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion 反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion\"},\"2990\":{\"t\":\"【强制】方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase风格。 正例：localValue / getHttpMessage() / inputUserId\"},\"2991\":{\"t\":\"【强制】常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。 正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME 反例：MAX_COUNT / EXPIRED_TIME\"},\"2992\":{\"t\":\"【强制】抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾，测试类命名以它要测试的类的名称开始，以Test结尾。\"},\"2993\":{\"t\":\"【强制】类型与中括号紧挨相连来定义数组。 正例：定义整形数组int[] arrayDemo。 反例：在main参数中，使用String args[] 来定义。\"},\"2994\":{\"t\":\"【强制】POJO类中的任何布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。 说明：本文MySQL规约中的建表约定第 1 条，表达是与否的变量采用is_xxx的命名方式，所以需要在<resultMap>设置从is_xxx到xxx的映射关系。 反例：定义为基本数据类型Boolean isDeleted的属性，它的方法也是isDeleted()，框架在反向解析时，“误以为”对应的属性名称是deleted，导致属性获取不到，进而抛出异常。\"},\"2995\":{\"t\":\"【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。 正例：应用工具类包名为com.alibaba.ei.kunlun.aap.util；类名为MessageUtils（此规则参考spring的框架结构）。\"},\"2996\":{\"t\":\"【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。说明：子类、父类成员变量名相同，即使是public也是能够通过编译，而局部变量在同一方法内的不同代码块中同名也是合法的，但是要避免使用。对于非setter / getter的参数名称也要避免与成员变量名称相同。 反例：\"},\"2997\":{\"t\":\"public class ConfusingName { protected int stock; protected String alibaba; // 非setter/getter的参数名称，不允许与本类成员变量同名 public void access(String alibaba) { if (condition) { final int money = 666; // ... } for (int i = 0; i < 10; i++) { // 在同一方法体中，不允许与其它代码块中的money命名相同 final int money = 15978; // ... } } } class Son extends ConfusingName { // 不允许与父类的成员变量名称相同 private int stock; } \"},\"2998\":{\"t\":\"【强制】杜绝完全不规范的英文缩写，避免望文不知义。 反例：AbstractClass“缩写”成AbsClass；condition“缩写”成condi；Function“缩写”成Fu，此类随意缩写严重降低了代码的可阅读性。\"},\"2999\":{\"t\":\"【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用完整的单词组合来表达。 正例：在JDK中，对某个对象引用的volatile字段进行原子更新的类名为AtomicReferenceFieldUpdater。 反例：常见的方法内变量为int a; 的定义方式。\"},\"3000\":{\"t\":\"【推荐】在常量与变量命名时，表示类型的名词放在词尾，以提升辨识度。 正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT 反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD\"},\"3001\":{\"t\":\"【推荐】如果模块、接口、类、方法使用了设计模式，在命名时要体现出具体模式。 说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。 正例：\"},\"3002\":{\"t\":\"public class OrderFactory; public class LoginProxy; public class ResourceObserver; \"},\"3003\":{\"t\":\"【推荐】接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义常量，如果一定要定义，最好确定该常量与接口的方法相关，并且是整个应用的基础常量。 正例：接口方法签名void commit(); ​ 接口基础常量String COMPANY = \\\"alibaba\\\"; 反例：接口方法定义public abstract void commit(); 说明：JDK8中接口允许有默认实现，那么这个default方法，是对所有实现类都有价值的默认实现。\"},\"3004\":{\"t\":\"接口和实现类的命名有两套规则： 1 ）【强制】对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别。 正例：CacheServiceImpl实现CacheService接口。 2 ）【推荐】如果是形容能力的接口名称，取对应的形容词为接口名（通常是 – able结尾的形容词）。 正例：AbstractTranslator实现Translatable。\"},\"3005\":{\"t\":\"【参考】枚举类名带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。 说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。 正例：枚举名字为ProcessStatusEnum的成员名称：SUCCESS / UNKNOWN_REASON\"},\"3006\":{\"t\":\"【参考】各层命名规约： A）Service / DAO层方法命名规约： ​ 1 ）获取单个对象的方法用get做前缀。 ​ 2 ）获取多个对象的方法用list做前缀，复数结尾，如：listObjects ​ 3 ）获取统计值的方法用count做前缀。 ​ 4 ）插入的方法用save / insert做前缀。 ​ 5 ）删除的方法用remove / delete做前缀。 ​ 6 ）修改的方法用update做前缀。 ​ 7 ）检查的方法用check做前缀。 B）领域模型命名规约： ​ 1 ）数据对象：xxxDO，xxx即为数据表名。 ​ 2 ）数据传输对象：xxxDTO，xxx为业务领域相关的名称。 ​ 3 ）展示对象：xxxVO，xxx一般为网页名称。 ​ 4 ）POJO是DO / DTO / BO / VO的统称，禁止命名成xxxPOJO。\"},\"3007\":{\"h\":\"(二) 常量定义\",\"a\":\"二-常量定义\"},\"3008\":{\"t\":\"【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。 反例： // 开发者A定义了缓存的key。\"},\"3009\":{\"t\":\"String key = \\\"Id#taobao_\\\" + tradeId; cache.put(key, value); \"},\"3010\":{\"t\":\"// 开发者B使用缓存时直接复制少了下划线，即key是\\\"Id#taobao\\\" + tradeId，导致出现故障。\"},\"3011\":{\"t\":\"String key = \\\"Id#taobao\\\" + tradeId; cache.get(key); \"},\"3012\":{\"t\":\"【强制】long或Long赋值时，数值后使用大写L，不能是小写l，小写容易跟数字混淆，造成误解。 说明：public static final Long NUM = 2 l; 写的是数字的 21 ，还是Long型的 2 ？\"},\"3013\":{\"t\":\"【强制】浮点数类型的数值后缀统一为大写的D或F。 正例：\"},\"3014\":{\"t\":\"public static final double HEIGHT = 175.5D; public static final float WEIGHT = 150.3F; \"},\"3015\":{\"t\":\"【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。 说明：大而全的常量类，杂乱无章，使用查找功能才能定位到要修改的常量，不利于理解，也不利于维护。 正例：缓存相关常量放在类CacheConsts下；系统配置相关常量放在类SystemConfigConsts下。\"},\"3016\":{\"t\":\"【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。 1 ）跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。 2 ）应用内共享常量：放置在一方库中，通常是子模块中的constant目录下。 反例： 易懂常量也要统一定义成应用内共享常量，两个程序员在两个类中分别定义了表示“是”的常量： ​类A中：public static final String YES = \\\"yes\\\"; ​类B中：public static final String YES = \\\"y\\\"; ​A.YES.equals(B.YES)，预期是true，但实际返回为false，导致线上问题。 3 ）子工程内部共享常量：即在当前子工程的constant目录下。 4 ）包内共享常量：即在当前包下单独的constant目录下。 5 ）类内共享常量：直接在类内部private static final定义。\"},\"3017\":{\"t\":\"【推荐】如果变量值仅在一个固定范围内变化用enum类型来定义。 说明：如果存在名称之外的延伸属性应使用enum类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。 正例：\"},\"3018\":{\"t\":\"public enum SeasonEnum { SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4); private int seq; SeasonEnum(int seq) { this.seq = seq; } public int getSeq() { return seq; } } \"},\"3019\":{\"h\":\"(三) 代码格式\",\"a\":\"三-代码格式\"},\"3020\":{\"t\":\"【强制】如果大括号内为空，简洁地写成{}即可，大括号中间无需换行和空格；如果是非空代码块，则： 1 ）左大括号前不换行。 2 ）左大括号后换行。 3 ）右大括号前换行。 4 ）右大括号后还有else等代码则不换行；表示终止的右大括号后必须换行。\"},\"3021\":{\"t\":\"【强制】左小括号和右边相邻字符之间不需要空格；右小括号和左边相邻字符之间也不需要空格；而左大括号前需要加空格。详见第 5 条下方正例提示。 反例：if(空格 a == b空格)\"},\"3022\":{\"t\":\"【强制】if / for / while / switch / do等保留字与左右括号之间都必须加空格。\"},\"3023\":{\"t\":\"【强制】任何二目、三目运算符的左右两边都需要加一个空格。 说明：包括赋值运算符 =、逻辑运算符 &&、加减乘除符号等。\"},\"3024\":{\"t\":\"【强制】采用 4 个空格缩进，禁止使用Tab字符。 说明：如使用Tab缩进，必须设置 1 个Tab为 4 个空格。IDEA设置Tab为 4 个空格时，请勿勾选Use tab character；而在Eclipse中，必须勾选insert spaces for tabs。 正例：（涉及上述中的 1 - 5 点）\"},\"3025\":{\"t\":\"public static void main(String[] args) { // 缩进 4 个空格 String say = \\\"hello\\\"; // 运算符的左右必须有一个空格 int flag = 0; // 关键词if与括号之间必须有一个空格，括号内的f与左括号， 0 与右括号不需要空格 if (flag == 0) { System.out.println(say); } // 左大括号前加空格且不换行；左大括号后换行 if (flag == 1) { System.out.println(\\\"world\\\"); // 右大括号前换行，右大括号后有else，不用换行 } else { System.out.println(\\\"ok\\\"); // 在右大括号后直接结束，则必须换行 } } \"},\"3026\":{\"t\":\"【强制】注释的双斜线与注释内容之间有且仅有一个空格。 正例： // 这是示例注释，请注意在双斜线之后有一个空格\"},\"3027\":{\"t\":\"String commentString = new String(\\\"demo\\\"); \"},\"3028\":{\"t\":\"【强制】在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。 正例：\"},\"3029\":{\"t\":\"double first = 3.2D; int second = (int)first + 2 ; \"},\"3030\":{\"t\":\"【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则： 1 ）第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。 2 ）运算符与下文一起换行。 3 ）方法调用的点符号与下文一起换行。 4 ）方法调用中的多个参数需要换行时，在逗号后进行。 5 ）在括号前不要换行，见反例。 正例：\"},\"3031\":{\"t\":\"StringBuilder builder = new StringBuilder(); // 超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点号一起换行 builder.append(\\\"yang\\\").append(\\\"hao\\\")... .append(\\\"chen\\\")... .append(\\\"chen\\\")... .append(\\\"chen\\\"); \"},\"3032\":{\"t\":\"反例：\"},\"3033\":{\"t\":\"// 超过 120 个字符的情况下，不要在括号前换行 builder.append(\\\"you\\\").append(\\\"are\\\")...append (\\\"lucky\\\"); // 参数很多的方法调用可能超过 120 个字符，逗号后才是换行处 method(args1, args2, args3, ... , argsX); \"},\"3034\":{\"t\":\"【强制】方法参数在定义和传入时，多个参数逗号后面必须加空格。 正例：下例中实参的args1逗号后边必须要有一个空格。 ​ method(args 1 , args 2 , args 3 );\"},\"3035\":{\"t\":\"【强制】IDE的text file encoding设置为UTF- 8 ；IDE中文件的换行符使用Unix格式，不要使用Windows格式。\"},\"3036\":{\"t\":\"【推荐】单个方法的总行数不超过 80 行。 说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过 80 行。 正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加晰；共性逻辑抽取 成为共性方法，便于复用和维护。\"},\"3037\":{\"t\":\"【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。 正例： int one = 1 ; long two = 2L; float three = 3F; StringBuilder builder = new StringBuilder(); 说明：增加builder这个变量，如果需要对齐，则给one、two、three都要增加几个空格，在变量比较多的情况下，是 非常累赘的事情。\"},\"3038\":{\"t\":\"【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行，分隔开来以提升可读性。 说明：任何情形，没有必要插入多个空行进行隔开。\"},\"3039\":{\"h\":\"(四) OOP规约\",\"a\":\"四-oop规约\"},\"3040\":{\"t\":\"【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。\"},\"3041\":{\"t\":\"【强制】所有的覆写方法，必须加 @Override注解。 说明：getObject() 与get0bject() 的问题。一个是字母的O，一个是数字的 0 ，加 @Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。\"},\"3042\":{\"t\":\"【强制】相同参数类型，相同业务含义，才可以使用的可变参数，参数类型避免定义为Object。 说明：可变参数必须放置在参数列表的最后。（建议开发者尽量不用可变参数编程） 正例：public List<User> listUsers(String type, Long... ids) {...}\"},\"3043\":{\"t\":\"【强制】外部正在调用的接口或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加 @Deprecated注解，并清晰地说明采用的新接口或者新服务是什么。\"},\"3044\":{\"t\":\"【强制】不能使用过时的类或方法。 说明：java.net.URLDecoder中的方法decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。\"},\"3045\":{\"t\":\"【强制】Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。 正例：\\\"test\\\".equals(param); 反例：param.equals(\\\"test\\\"); 说明：推荐使用JDK7引入的工具类java.util.Objects#equals(Object a, Object b)\"},\"3046\":{\"t\":\"【强制】所有整型包装类对象之间值的比较，全部使用equals方法比较。 说明：对于Integer var =? 在 - 128 至 127 之间的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用 == 进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。\"},\"3047\":{\"t\":\"【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。\"},\"3048\":{\"t\":\"【强制】浮点数之间的等值判断，基本数据类型不能使用 == 进行比较，包装数据类型不能使用equals进行判断。 说明：浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考《码出高效》。 反例：\"},\"3049\":{\"t\":\"float a = 1.0F - 0.9F; float b = 0.9F - 0.8F; if (a == b) { // 预期进入此代码块，执行其它业务逻辑 // 但事实上a == b的结果为false } Float x = Float.valueOf(a); Float y = Float.valueOf(b); if (x.equals(y)) { // 预期进入此代码块，执行其它业务逻辑 // 但事实上equals的结果为false } \"},\"3050\":{\"t\":\"正例： (1)指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。\"},\"3051\":{\"t\":\"float a = 1.0F - 0.9F; float b = 0.9F - 0.8F; float diff = 1e-6F; if (Math.abs(a - b) < diff) { System.out.println(\\\"true\\\"); } \"},\"3052\":{\"t\":\"(2)使用BigDecimal来定义值，再进行浮点数的运算操作。\"},\"3053\":{\"t\":\"BigDecimal a = new BigDecimal(\\\"1.0\\\"); BigDecimal b = new BigDecimal(\\\"0.9\\\"); BigDecimal c = new BigDecimal(\\\"0.8\\\"); BigDecimal x = a.subtract(b); BigDecimal y = b.subtract(c); if (x.compareTo(y) == 0) { System.out.println(\\\"true\\\"); } \"},\"3054\":{\"t\":\"【强制】BigDecimal的等值比较应使用compareTo() 方法，而不是equals() 方法。 说明：equals() 方法会比较值和精度（1.0 与 1.00 返回结果为 false），而compareTo() 则会忽略精度。\"},\"3055\":{\"t\":\"【强制】定义数据对象DO类时，属性类型要与数据库字段类型相匹配。 正例：数据库字段的bigint必须与类属性的Long类型相对应。 反例：某业务的数据库表id字段定义类型为bigint unsigned，实际类对象属性为Integer，随着id越来越大， 超过Integer的表示范围而溢出成为负数，此时数据库id不支持存入负数抛出异常产生线上故障。\"},\"3056\":{\"t\":\"【强制】禁止使用构造方法BigDecimal(double) 的方式把double值转化为BigDecimal对象。 说明：BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。 如：BigDecimal g = new BigDecimal(0.1F)；实际的存储值为：0. 正例：优先推荐入参为String的构造方法，或使用BigDecimal的valueOf方法，此方法内部其实执行了Double的toString，而Double的toString按double的实际能表达的精度对尾数进行了截断。\"},\"3057\":{\"t\":\"BigDecimal recommend1 = new BigDecimal(\\\"0.1\\\"); BigDecimal recommend2 = BigDecimal.valueOf(0.1); \"},\"3058\":{\"t\":\"关于基本数据类型与包装数据类型的使用标准如下： 1 ）【强制】所有的POJO类属性必须使用包装数据类型。 2 ）【强制】RPC方法的返回值和参数必须使用包装数据类型。 3 ）【推荐】所有的局部变量使用基本数据类型。 说明：POJO类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE问题，或者入库检查，都由使用者来保证。 正例：数据库的查询结果可能是null，因为自动拆箱，用基本数据类型接收有NPE风险。 反例：某业务的交易报表上显示成交总额涨跌情况，即正负x%，x为基本数据类型，调用的RPC服务，调用不成功时，返回的是默认值，页面显示为0%，这是不合理的，应该显示成中划线-。所以包装数据类型的null值，能够表示额外的信息，如：远程调用失败，异常退出。\"},\"3059\":{\"t\":\"【强制】定义DO / PO / DTO / VO等POJO类时，不要设定任何属性默认值。 反例：某业务的DO的createTime默认值为new Date()；但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\"},\"3060\":{\"t\":\"【强制】序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。 说明：注意serialVersionUID不一致会抛出序列化运行时异常。\"},\"3061\":{\"t\":\"【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中。\"},\"3062\":{\"t\":\"【强制】POJO类必须写toString方法。使用IDE中的工具source > generate toString时，如果继承了另一个POJO类，注意在前面加一下super.toString()。 说明：在方法执行抛出异常时，可以直接调用POJO的toString() 方法打印其属性值，便于排查问题。\"},\"3063\":{\"t\":\"【强制】禁止在POJO类中，同时存在对应属性xxx的isXxx() 和getXxx() 方法。 说明：框架在调用属性xxx的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。\"},\"3064\":{\"t\":\"【推荐】使用索引访问用String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查， 否则会有抛IndexOutOfBoundsException的风险。 说明：\"},\"3065\":{\"t\":\"String str = \\\"a,b,c,,\\\"; String[] ary = str.split(\\\",\\\"); // 预期大于 3 ，结果等于 3 System.out.println(ary.length); \"},\"3066\":{\"t\":\"【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读， 此条规则优先于下一条。 正例：\"},\"3067\":{\"t\":\"public int method(int param); protected double method(int param1, int param2); private void method(); \"},\"3068\":{\"t\":\"【推荐】类内方法定义的顺序依次是：公有方法或保护方法 > 私有方法 > getter / setter方法。 说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有Service和DAO的getter / setter方法放在类体最后。\"},\"3069\":{\"t\":\"【推荐】setter方法中，参数名称与类成员变量名称一致，this.成员名=参数名。在getter / setter方法中，不要增加业务逻辑，增加排查问题的难度。 反例：\"},\"3070\":{\"t\":\"public Integer getData() { if (condition) { return this.data + 100; } else { return this.data - 100; } } \"},\"3071\":{\"t\":\"【推荐】循环体内，字符串的连接方式，使用StringBuilder的append方法进行扩展。 反例：\"},\"3072\":{\"t\":\"String str = \\\"start\\\"; for (int i = 0; i < 100; i++) { str = str + \\\"hello\\\"; } \"},\"3073\":{\"t\":\"说明：反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象，然后进行append操作，最后通过toString() 返回String对象，造成内存资源浪费。\"},\"3074\":{\"t\":\"【推荐】final可以声明类、成员变量、方法、以及本地变量，下列情况使用final关键字： 1 ）不允许被继承的类，如：String类。 2 ）不允许修改引用的域对象，如：POJO类的域变量。 3 ）不允许被覆写的方法，如：POJO类的setter方法。 4 ）不允许运行过程中重新赋值的局部变量。 5 ）避免上下文重复使用一个变量，使用final关键字可以强制重新定义一个变量，方便更好地进行重构。\"},\"3075\":{\"t\":\"【推荐】慎用Object的clone方法来拷贝对象。 说明：对象clone方法默认是浅拷贝，若想实现深拷贝需覆写clone方法实现域对象的深度遍历式拷贝。\"},\"3076\":{\"t\":\"【推荐】类成员与方法访问控制从严： 1 ）如果不允许外部直接通过new来创建对象，那么构造方法必须是private。 2 ）工具类不允许有public或default构造方法。 3 ）类非static成员变量并且与子类共享，必须是protected。 4 ）类非static成员变量并且仅在本类使用，必须是private。 5 ）类static成员变量如果仅在本类使用，必须是private。 6 ）若是static成员变量，考虑是否为final。 7 ）类成员方法只供类内部调用，必须是private。 8 ）类成员方法只对继承类公开，那么限制为protected。 说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个private的方法，想删除就删除，可是一个public的service成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。\"},\"3077\":{\"h\":\"(五) 日期时间\",\"a\":\"五-日期时间\"},\"3078\":{\"t\":\"【强制】日期格式化时，传入pattern中表示年份统一使用小写的y。 说明：日期格式化时，yyyy表示当天所在的年，而大写的YYYY代表是week in which year（JDK7之后引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的YYYY就是下一年。 正例：表示日期和时间的格式如下所示： ​ new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\") 反例：某程序员因使用YYYY/MM/dd进行日期格式化， 2017 /12/31执行结果为2018/12/31，造成线上故障。\"},\"3079\":{\"t\":\"【强制】在日期格式中分清楚大写的M和小写的m，大写的H和小写的h分别指代的意义。 说明：日期格式中的这两对字母表意如下： 1 ）表示月份是大写的M 2 ）表示分钟则是小写的m 3 ） 24 小时制的是大写的H 4 ） 12 小时制的则是小写的h\"},\"3080\":{\"t\":\"【强制】获取当前毫秒数：System.currentTimeMillis()；而不是new Date().getTime()。 说明：获取纳秒级时间，则使用System.nanoTime的方式。在JDK8中，针对统计时间等场景，推荐使用Instant类。\"},\"3081\":{\"t\":\"【强制】不允许在程序任何地方中使用： 1 ）java.sql.Date 2 ）java.sql.Time 3 ）java.sql.Timestamp。 说明：第 1 个不记录时间，getHours() 抛出异常；第 2 个不记录日期，getYear() 抛出异常；第 3 个在构造方法super((time / 1000) * 1000)，在Timestamp属性fastTime和nanos分别存储秒和纳秒信息。 反例：java.util.Date.after(Date) 进行时间比较时，当入参是java.sql.Timestamp时，会触发JDK BUG（JDK9已修复），可能导致比较时的意外结果。\"},\"3082\":{\"t\":\"【强制】禁止在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑错误。 正例：\"},\"3083\":{\"t\":\"// 获取今年的天数 int daysOfThisYear = LocalDate.now().lengthOfYear(); // 获取指定某年的天数 LocalDate.of( 2011 , 1 , 1 ).lengthOfYear(); \"},\"3084\":{\"t\":\"反例：\"},\"3085\":{\"t\":\"// 第一种情况：在闰年 366 天时，出现数组越界异常 int[] dayArray = new int[ 365 ]; // 第二种情况：一年有效期的会员制， 2020 年 1 月 26 日注册，硬编码 365 返回的却是 2021 年 1 月 25 日 Calendar calendar = Calendar.getInstance(); calendar.set( 2020 , 1 , 26 ); calendar.add(Calendar.DATE, 365 ); \"},\"3086\":{\"t\":\"【推荐】避免公历闰年 2 月问题。闰年的 2 月份有 29 天，一年后的那一天不可能是 2 月 29 日。\"},\"3087\":{\"t\":\"【推荐】使用枚举值来指代月份。如果使用数字，注意Date，Calendar等日期相关类的月份month取值范围从 0 到 11 之间。 说明：参考JDK原生注释，Month value is 0-based. e.g., 0 for January. 正例：Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH等来指代相应月份来进行传参或比较。\"},\"3088\":{\"h\":\"(六) 集合处理\",\"a\":\"六-集合处理\"},\"3089\":{\"t\":\"【强制】关于hashCode和equals的处理，遵循如下规则： 1 ）只要覆写equals，就必须覆写hashCode。 2 ）因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的对象必须覆写这两种方法。 3 ）如果自定义对象作为Map的键，那么必须覆写hashCode和equals。 说明：String因为覆写了hashCode和equals方法，所以可以愉快地将String对象作为key来使用。\"},\"3090\":{\"t\":\"【强制】判断所有集合内部的元素是否为空，使用isEmpty() 方法，而不是size() == 0 的方式。 说明：在某些集合中，前者的时间复杂度为O(1)，而且可读性更好。 正例：\"},\"3091\":{\"t\":\"Map<String, Object> map = new HashMap<>(16); if (map.isEmpty()) { System.out.println(\\\"no element in this map.\\\"); } \"},\"3092\":{\"t\":\"【强制】在使用java.util.stream.Collectors类的toMap() 方法转为Map集合时，一定要使用参数类型 为BinaryOperator，参数名为mergeFunction的方法，否则当出现相同key时会抛出 IllegalStateException异常。 说明：参数mergeFunction的作用是当出现key重复时，自定义对value的处理策略。 正例：\"},\"3093\":{\"t\":\"List<Pair<String, Double>> pairArrayList = new ArrayList<>( 3 ); pairArrayList.add(new Pair<>(\\\"version\\\", 12.10)); pairArrayList.add(new Pair<>(\\\"version\\\", 12.19)); pairArrayList.add(new Pair<>(\\\"version\\\", 6.28)); // 生成的map集合中只有一个键值对：{version=6.28} Map<String, Double> map = pairArrayList.stream() .collect(Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) - > v2)); \"},\"3094\":{\"t\":\"反例：\"},\"3095\":{\"t\":\"String[] departments = new String[]{\\\"RDC\\\", \\\"RDC\\\", \\\"KKB\\\"}; // 抛出IllegalStateException异常 Map<Integer, String> map = Arrays.stream(departments) .collect(Collectors.toMap(String::hashCode, str - > str)); \"},\"3096\":{\"t\":\"【强制】在使用java.util.stream.Collectors类的toMap() 方法转为Map集合时，一定要注意当value为null时会抛NPE异常。 说明：在java.util.HashMap的merge方法里会进行如下的判断：\"},\"3097\":{\"t\":\"if (value == null || remappingFunction == null) throw new NullPointerException(); \"},\"3098\":{\"t\":\"反例：\"},\"3099\":{\"t\":\"4. List<Pair<String, Double>> pairArrayList = new ArrayList<>( 2 ); pairArrayList.add(new Pair<>(\\\"version1\\\", 8.3)); pairArrayList.add(new Pair<>(\\\"version2\\\", null)); // 抛出NullPointerException异常 Map<String, Double> map = pairArrayList.stream() .collect(Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) - > v2)); \"},\"3100\":{\"t\":\"【强制】ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常： java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。 说明：subList() 返回的是ArrayList的内部类SubList，并不是ArrayList本身，而是ArrayList的一个视图，对于SubList的所有操作最终会反映到原列表上。\"},\"3101\":{\"t\":\"【强制】使用Map的方法keySet() / values() / entrySet() 返回集合对象时，不可以对其进行添加元素操作，否则会抛出UnsupportedOperationException异常。\"},\"3102\":{\"t\":\"【强制】Collections类返回的对象，如：emptyList() / singletonList() 等都是immutable list，不可对其进行添加或者删除元素的操作。 反例：如果查询无结果，返回Collections.emptyList() 空集合对象，调用方一旦在返回的集合中进行了添加元素的操作，就会触发UnsupportedOperationException异常。\"},\"3103\":{\"t\":\"【强制】在subList场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生ConcurrentModificationException异常。 说明：抽查表明， 9 0% 的程序员对此知识点都有错误的认知。\"},\"3104\":{\"t\":\"【强制】使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一致、长度为0 的空数组。 反例：直接使用toArray无参方法存在问题，此方法返回值只能是Object[]类，若强转其它类型数组将出现ClassCastException错误。 正例：\"},\"3105\":{\"t\":\"List<String> list = new ArrayList<>( 2 ); list.add(\\\"guan\\\"); list.add(\\\"bao\\\"); String[] array = list.toArray(new String[ 0 ]); \"},\"3106\":{\"t\":\"说明：使用toArray带参方法，数组空间大小的length： ​ 1 ）等于 0 ，动态创建与size相同的数组，性能最好。 ​ 2 ）大于 0 但小于size，重新创建大小等于size的数组，增加GC负担。 ​ 3 ）等于size，在高并发情况下，数组创建完成之后，size正在变大的情况下，负面影响与 2 相同。 ​ 4 ）大于size，空间浪费，且在size处插入null值，存在NPE隐患。\"},\"3107\":{\"t\":\"【强制】使用Collection接口任何实现类的addAll() 方法时，要对输入的集合参数进行NPE判断。 说明：在ArrayList#addAll方法的第一行代码即Object[] a = c.toArray()；其中c为输入集合参数，如果为null，则直接抛出异常。\"},\"3108\":{\"t\":\"【强制】使用工具类Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的add/ remove / clear方法会抛出UnsupportedOperationException异常。 说明：asList的返回对象是一个Arrays内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。\"},\"3109\":{\"t\":\"String[] str = new String[]{ \\\"yang\\\", \\\"guan\\\", \\\"bao\\\" }; List list = Arrays.asList(str); \"},\"3110\":{\"t\":\"第一种情况：list.add(\\\"yangguanbao\\\"); 运行时异常。 第二种情况：str[0] = \\\"change\\\"; list中的元素也会随之修改，反之亦然。\"},\"3111\":{\"t\":\"【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用add方法，而<? super T>不能使用get方法，两者在接口调用赋值的场景中容易出错。 说明：扩展说一下PECS(Producer Extends Consumer Super) 原则，即频繁往外读取内容的，适合用<? extends T>，经常往里插入的，适合用<? super T>\"},\"3112\":{\"t\":\"【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instanceof判断，避免抛出ClassCastException异常。 说明：毕竟泛型是在JDK5后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。 反例：\"},\"3113\":{\"t\":\"List<String> generics = null; List notGenerics = new ArrayList( 10 ); notGenerics.add(new Object()); notGenerics.add(new Integer( 1 )); generics = notGenerics; // 此处抛出ClassCastException异常 String string = generics.get( 0 ); \"},\"3114\":{\"t\":\"【强制】不要在foreach循环里进行元素的remove / add操作。remove元素请使用iterator方式，如果并发操作，需要对iterator对象加锁。 正例：\"},\"3115\":{\"t\":\"List<String> list = new ArrayList<>(); list.add(\\\"1\\\"); list.add(\\\"2\\\"); Iterator<String> iterator = list.iterator(); while (iterator.hasNext()) { String item = iterator.next(); if (删除元素的条件) { iterator.remove(); } } \"},\"3116\":{\"t\":\"反例：\"},\"3117\":{\"t\":\"for (String item : list) { if (\\\"1\\\".equals(item)) { list.remove(item); } } \"},\"3118\":{\"t\":\"说明：反例中的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”会是同样的结果吗？\"},\"3119\":{\"t\":\"【强制】在JDK7版本及以上，Comparator实现类要满足如下三个条件，不然Arrays.sort，Collections.sort会抛IllegalArgumentException异常。 说明：三个条件如下 ​ 1 ）x，y的比较结果和y，x的比较结果相反。 ​ 2 ）x > y，y > z，则x > z。 ​ 3 ）x = y，则x，z比较结果和y，z比较结果相同。 反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。\"},\"3120\":{\"t\":\"new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { return o1.getId() > o2.getId() ? 1 : -1; } }; \"},\"3121\":{\"t\":\"【推荐】泛型集合使用时，在JDK7及以上，使用diamond语法或全省略。 说明：菱形泛型，即diamond，直接使用<>来指代前边已经指定的类型。 正例：\"},\"3122\":{\"t\":\"// diamond方式，即<> HashMap<String, String> userCache = new HashMap<>( 16 ); // 全省略方式 ArrayList<User> users = new ArrayList( 10 ); \"},\"3123\":{\"t\":\"【推荐】集合初始化时，指定集合初始值大小。 说明：HashMap使用构造方法HashMap(int initialCapacity) 进行初始化时，如果暂时无法确定集合大小，那么指定默认值（ 16 ）即可。 正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1 。注意负载因子（即loaderfactor）默认为0.75，如果暂时无法确定初始值大小，请设置为 16 （即默认值）。 反例：HashMap需要放置 1024 个元素，由于没有设置容量初始大小，随着元素增加而被迫不断扩容，resize() 方法总共会调用 8 次，反复重建哈希表和数据迁移。当放置的集合元素个数达千万级时会影响程序性能。\"},\"3124\":{\"t\":\"【推荐】使用entrySet遍历Map类集合KV，而不是keySet方式进行遍历。 说明：keySet其实是遍历了 2 次，一次是转为Iterator对象，另一次是从hashMap中取出key所对应的value。而entrySet只是遍历了一次就把key和value都放到了entry中，效率更高。如果是JDK8，使用Map.forEach方法。 正例：values() 返回的是V值集合，是一个list集合对象；keySet() 返回的是K值集合，是一个Set集合对象；entrySet() 返回的是K-V值组合的Set集合。\"},\"3125\":{\"t\":\"【推荐】高度注意Map类集合K / V能不能存储null值的情况，如下表格：\"},\"3126\":{\"t\":\"集合类\"},\"3127\":{\"t\":\"Key\"},\"3128\":{\"t\":\"Value\"},\"3129\":{\"t\":\"Super\"},\"3130\":{\"t\":\"说明\"},\"3131\":{\"t\":\"Hashtable\"},\"3132\":{\"t\":\"不允许为null\"},\"3133\":{\"t\":\"不允许为null\"},\"3134\":{\"t\":\"Dictionary\"},\"3135\":{\"t\":\"线程安全\"},\"3136\":{\"t\":\"TreeMap\"},\"3137\":{\"t\":\"不允许为null\"},\"3138\":{\"t\":\"允许为null\"},\"3139\":{\"t\":\"AbstractMap\"},\"3140\":{\"t\":\"线程不安全\"},\"3141\":{\"t\":\"ConcurrentHashMap\"},\"3142\":{\"t\":\"不允许为null\"},\"3143\":{\"t\":\"不允许为null\"},\"3144\":{\"t\":\"AbstractMap\"},\"3145\":{\"t\":\"锁分段技术（JDK8:CAS）\"},\"3146\":{\"t\":\"HashMap\"},\"3147\":{\"t\":\"允许为null\"},\"3148\":{\"t\":\"允许为null\"},\"3149\":{\"t\":\"AbstractMap\"},\"3150\":{\"t\":\"线程不安全\"},\"3151\":{\"t\":\"反例：由于HashMap的干扰，很多人认为ConcurrentHashMap是可以置入null值，而事实上，存储null值时会抛出NPE异常。\"},\"3152\":{\"t\":\"【参考】合理利用好集合的有序性（sort）和稳定性（order），避免集合的无序性（unsort）和不稳定性（unorder）带来的负面影响。 说明：有序性是指遍历的结果是按某种比较规则依次排列的，稳定性指集合每次遍历的元素次序是一定的。如： ​ ArrayList是order / unsort；HashMap是unorder / unsort；TreeSet是order / sort。\"},\"3153\":{\"t\":\"【参考】利用Set元素唯一的特性，可以快速对一个集合进行去重操作，避免使用List的contains() 进行遍历去重或者判断包含操作。\"},\"3154\":{\"h\":\"(七) 并发处理\",\"a\":\"七-并发处理\"},\"3155\":{\"t\":\"【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。 说明：资源驱动类、工具类、单例工厂类都需要注意。\"},\"3156\":{\"t\":\"【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。 正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给whatFeatureOfGroup：\"},\"3157\":{\"t\":\"public class UserThreadFactory implements ThreadFactory { private final String namePrefix; private final AtomicInteger nextId = new AtomicInteger(1); // 定义线程组名称，在利用 jstack 来排查问题时，非常有帮助 UserThreadFactory(String whatFeatureOfGroup) { namePrefix =\\\"FromUserThreadFactory's\\\"+whatFeatureOfGroup +\\\"-Worker-\\\";} @Override public Thread newThread(Runnable task) { String name = namePrefix + nextId.getAndIncrement(); Thread thread = new Thread(null, task, name, 0, false); System.out.println(thread.getName()); return thread; } } \"},\"3158\":{\"t\":\"【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\"},\"3159\":{\"t\":\"【强制】线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors返回的线程池对象的弊端如下： ​ 1 ）FixedThreadPool和SingleThreadPool： ​ 允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。 ​ 2 ）CachedThreadPool： ​ 允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。 ​ 3 ）ScheduledThreadPool： ​ 允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。\"},\"3160\":{\"t\":\"【强制】SimpleDateFormat是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类。 正例：注意线程安全，使用DateUtils。亦推荐如下处理：\"},\"3161\":{\"t\":\"private static final ThreadLocal<DateFormat> dateStyle = new ThreadLocal<DateFormat>() { @Override protected DateFormat initialValue() { return new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); } } \"},\"3162\":{\"t\":\"说明：如果是JDK8的应用，可以使用Instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。\"},\"3163\":{\"t\":\"【强制】必须回收自定义的ThreadLocal变量，尤其在线程池场景下，线程经常会被复用，如果不清理自定义的ThreadLocal变量，可能会影响后续业务逻辑和造成内存泄露等问题。尽量在代理中使用try-finally块进行回收。 正例：\"},\"3164\":{\"t\":\"objectThreadLocal.set(userInfo); try { // ... } finally { objectThreadLocal.remove(); } \"},\"3165\":{\"t\":\"【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用RPC方法。\"},\"3166\":{\"t\":\"【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。 说明：线程一需要对表A、B、C依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。\"},\"3167\":{\"t\":\"【强制】在使用阻塞等待获取锁的方式中，必须在try代码块之外，并且在加锁方法与try代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在finally中无法解锁。 说明一：在lock方法与try代码块之间的方法调用抛出异常，无法解锁，造成其它线程无法成功获取锁。 说明二：如果lock方法在try代码块之内，可能由于其它方法抛出异常，导致在finally代码块中，unlock对未加锁的对象解锁，它会调用AQS的tryRelease方法（取决于具体实现类），抛出IllegalMonitorStateException异常。 说明三：在Lock对象的lock方法实现中可能抛出unchecked异常，产生的后果与说明二相同。 正例：\"},\"3168\":{\"t\":\"Lock lock = new XxxLock(); // ... lock.lock(); try { doSomething(); doOthers(); } finally { lock.unlock(); } \"},\"3169\":{\"t\":\"反例：\"},\"3170\":{\"t\":\"Lock lock = new XxxLock(); // ... try { // 如果此处抛出异常，则直接执行finally代码块 doSomething(); // 无论加锁是否成功，finally代码块都会执行 lock.lock(); doOthers(); } finally { lock.unlock(); } \"},\"3171\":{\"t\":\"【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。 说明：Lock对象的unlock方法在执行时，它会调用AQS的tryRelease方法（取决于具体实现类），如果当前线程不持有锁，则抛出IllegalMonitorStateException异常。 正例：\"},\"3172\":{\"t\":\"Lock lock = new XxxLock(); // ... boolean isLocked = lock.tryLock(); if (isLocked) { try { doSomething(); doOthers(); } finally { lock.unlock(); } } \"},\"3173\":{\"t\":\"【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据。 说明：如果每次访问冲突概率小于20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。\"},\"3174\":{\"t\":\"【强制】多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用ScheduledExecutorService则没有这个问题。\"},\"3175\":{\"t\":\"【推荐】资金相关的金融敏感信息，使用悲观锁策略。 说明：乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观锁更新。 正例：悲观锁遵循一锁二判三更新四释放的原则。\"},\"3176\":{\"t\":\"【推荐】使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法被执行到，避免主线程无法执行至await方法，直到超时才返回结果。 说明：注意，子线程抛出异常堆栈，不能在主线程try-catch到。\"},\"3177\":{\"t\":\"【推荐】避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed导致的性能下降。 说明：Random实例包括java.util.Random的实例或者Math.random() 的方式。 正例：在JDK7之后，可以直接使用API ThreadLocalRandom，而在JDK7之前，需要编码保证每个线程持有一个单独的Random实例。\"},\"3178\":{\"t\":\"【推荐】通过双重检查锁（double-checked locking），实现延迟初始化需要将目标属性声明为volatile型，（比如修改helper的属性声明为private volatile Helper helper = null;）。 正例：\"},\"3179\":{\"t\":\"public class LazyInitDemo { private volatile Helper helper = null; public Helper getHelper() { if (helper == null) { synchronized(this) { if (helper == null) { helper = new Helper(); } } } return helper; } // other methods and fields... } \"},\"3180\":{\"t\":\"【参考】volatile解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。 说明：如果是count++操作，使用如下类实现： ​ AtomicInteger count = new AtomicInteger(); ​ count.addAndGet(1); ​ 如果是JDK8，推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）。\"},\"3181\":{\"t\":\"【参考】HashMap在容量不够进行resize时由于高并发可能出现死链，导致CPU飙升，在开发过程中注意规避此风险。\"},\"3182\":{\"t\":\"【参考】ThreadLocal对象使用static修饰，ThreadLocal无法解决共享对象的更新问题。 说明：这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量，也就是说在 类第一次被使用时装载，只分配一块存储空间，所有此类的对象（只要是这个线程内定义的）都可以操控这个变量。\"},\"3183\":{\"h\":\"(八) 控制语句\",\"a\":\"八-控制语句\"},\"3184\":{\"t\":\"【强制】在一个switch块内，每个case要么通过continue / break / return等来终止，要么注释说明程序将继续执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使它什么代码也没有。 说明：注意break是退出switch语句块，而return是退出方法体。\"},\"3185\":{\"t\":\"【强制】当switch括号内的变量类型为String并且此变量为外部参数时，必须先进行null判断。 反例：如下的代码输出是什么？\"},\"3186\":{\"t\":\"public class SwitchString { public static void main(String[] args) { method(null); } public static void method(String param) { switch (param) { // 肯定不是进入这里 case \\\"sth\\\": System.out.println(\\\"it's sth\\\"); break; // 也不是进入这里 case \\\"null\\\": System.out.println(\\\"it's null\\\"); break; // 也不是进入这里 default: System.out.println(\\\"default\\\"); } } } \"},\"3187\":{\"t\":\"【强制】在if / else / for / while / do语句中必须使用大括号。 反例： if (condition) statements; 说明：即使只有一行代码，也要采用大括号的编码方式。\"},\"3188\":{\"t\":\"【强制】三目运算符condition? 表达式 1 ：表达式 2 中，高度注意表达式 1 和 2 在类型对齐时，可能抛出因自动拆箱导致的NPE异常。 说明：以下两种场景会触发类型对齐的拆箱操作： ​ 1 ）表达式 1 或 表达式 2 的值只要有一个是原始类型。 ​ 2 ）表达式 1 或 表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。 反例：\"},\"3189\":{\"t\":\"Integer a = 1 ; Integer b = 2 ; Integer c = null; Boolean flag = false; // a*b的结果是int类型，那么c会强制拆箱成int类型，抛出NPE异常 Integer result = (flag? a * b : c); \"},\"3190\":{\"t\":\"【强制】在高并发场景中，避免使用“等于”判断作为中断或退出的条件。 说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。 反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。\"},\"3191\":{\"t\":\"【推荐】当方法的代码总行数超过 10 行时，return / throw等中断逻辑的右大括号后需要加一个空行。 说明：这样做逻辑清晰，有利于代码阅读时重点关注。\"},\"3192\":{\"t\":\"【推荐】表达异常的分支时，少用if-else方式，这种方式可以改写成：\"},\"3193\":{\"t\":\"if (condition) { ... return obj; } // 接着写else的业务逻辑代码; \"},\"3194\":{\"t\":\"说明：如果非使用if()...else if()...else...方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。 正例：超过 3 层的if-else的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：\"},\"3195\":{\"t\":\"public void findBoyfriend(Man man) { if (man.isUgly()) { System.out.println(\\\"本姑娘是外貌协会的资深会员\\\"); return; } if (man.isPoor()) { System.out.println(\\\"贫贱夫妻百事哀\\\"); return; } if (man.isBadTemper()) { System.out.println(\\\"银河有多远，你就给我滚多远\\\"); return; } System.out.println(\\\"可以先交往一段时间看看\\\"); } \"},\"3196\":{\"t\":\"【推荐】除常用方法（如getXxx / isXxx）等外不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。 说明：很多if语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。 正例：\"},\"3197\":{\"t\":\"// 伪代码如下 final boolean existed = (file.open(fileName, \\\"w\\\") != null) && (...) || (...); if (existed) { ... } \"},\"3198\":{\"t\":\"反例：\"},\"3199\":{\"t\":\"public final void acquire(long arg) { if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) { selfInterrupt(); } } \"},\"3200\":{\"t\":\"【推荐】不要在其它表达式（尤其是条件表达式）中，插入赋值语句。 说明：赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。 反例：\"},\"3201\":{\"t\":\"public Lock getLock(boolean fair) { // 算术表达式中出现赋值操作，容易忽略count值已经被改变 threshold = (count = Integer.MAX_VALUE) - 1 ; // 条件表达式中出现赋值操作，容易误认为是sync == fair return (sync = fair)? new FairSync() : new NonfairSync(); } \"},\"3202\":{\"t\":\"【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的try-catch操作（这个try-catch是否可以移至循环体外）。\"},\"3203\":{\"t\":\"【推荐】避免采用取反逻辑运算符。 说明：取反逻辑不利于快速理解，并且取反逻辑写法一般都存在对应的正向逻辑写法。 正例：使用if(x < 628) 来表达x小于 628 。 反例：使用if(!(x >= 628)) 来表达x小于 628 。\"},\"3204\":{\"t\":\"【推荐】公开接口需要进行入参保护，尤其是批量操作的接口。 反例：某业务系统，提供一个用户批量查询的接口，API文档上有说最多查多少个，但接口实现上没做任何保护，导致调用方传了一个 1000 的用户id数组过来后，查询信息后，内存爆了。\"},\"3205\":{\"t\":\"【参考】下列情形，需要进行参数校验： 1 ）调用频次低的方法。 2 ）执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。 3 ）需要极高稳定性和可用性的方法。 4 ）对外提供的开放接口，不管是RPC / API / HTTP接口。 5 ）敏感权限入口。\"},\"3206\":{\"t\":\"【参考】下列情形，不需要进行参数校验： 1 ）极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查。 2 ）底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般DAO层与Service层都在同一个应用中，部署在同一台服务器中，所以DAO的参数校验，可以省略。 3 ）被声明成private只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\"},\"3207\":{\"h\":\"(九) 注释规约\",\"a\":\"九-注释规约\"},\"3208\":{\"t\":\"【强制】类、类属性、类方法的注释必须使用Javadoc规范，使用 /** 内容 */ 格式，不得使用 // xxx方式。 说明：在IDE编辑窗口中，Javadoc方式会提示相关注释，生成Javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。\"},\"3209\":{\"t\":\"【强制】所有的抽象方法（包括接口中的方法）必须要用Javadoc注释、除了返回值、参数异常说明外，还必须指出该方法做什么事情，实现什么功能。 说明：对子类的实现要求，或者调用注意事项，请一并说明。\"},\"3210\":{\"t\":\"【强制】所有的类都必须添加创建者和创建日期。 说明：在设置模板时，注意IDEA的@author为${USER}，而eclipse的@author为${user}，大小写有区别，而日期 的设置统一为yyyy/MM/dd的格式。 正例：\"},\"3211\":{\"t\":\"/** * * @author yangguanbao * @date 2021/11/26 * **/ \"},\"3212\":{\"t\":\"【强制】方法内部单行注释，在被注释语句上方另起一行，使用 // 注释。方法内部多行注释使用 /* */注释，注意与代码对齐。\"},\"3213\":{\"t\":\"【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。\"},\"3214\":{\"t\":\"【推荐】与其用半吊子英文来注释，不如用中文注释说清楚。专有名词与关键字保持英文原文即可。 反例：“TCP连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。\"},\"3215\":{\"t\":\"【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等。 说明：代码与注释更新不同步，就像公路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。\"},\"3216\":{\"t\":\"【推荐】在类中删除未使用的任何字段和方法、内部类；在方法中删除未使用的参数声明与内部变量。\"},\"3217\":{\"t\":\"【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。 说明：代码被注释掉有两种可能性： 1 ）后续会恢复此段代码逻辑。 2 ）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉即可，假如需要查阅历史代码，登录代码仓库即可。\"},\"3218\":{\"t\":\"【参考】对于注释的要求：第一、能够准确反映设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。\"},\"3219\":{\"t\":\"【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的另一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释又是相当大的负担。 反例：\"},\"3220\":{\"t\":\"// put elephant into fridge put(elephant, fridge); \"},\"3221\":{\"t\":\"方法名put，加上两个有意义的变量名称elephant和fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。\"},\"3222\":{\"t\":\"【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。 1 ）待办事宜（TODO）：（标记人，标记时间，[预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个Javadoc的标签，目前的Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个Javadoc标签）。 2 ）错误，不能工作（FIXME）：（标记人，标记时间，[预计处理时间]）在注释中用FIXME标记某代码是错误的，而且不能工作，需要及时纠正的情况。\"},\"3223\":{\"h\":\"(十) 前后端规约\",\"a\":\"十-前后端规约\"},\"3224\":{\"t\":\"【强制】前后端交互的API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。 说明： 1 ）协议：生产环境必须使用HTTPS。 2 ）路径：每一个API需对应一个路径，表示API具体的请求地址： a）代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。 b）URL路径不能使用大写，单词如果需要分隔，统一使用下划线。 c）路径禁止携带表示请求内容类型的后缀，比如\\\".json\\\"，\\\".xml\\\"，通过accept头表达即可。 3 ）请求方法：对具体操作的定义，常见的请求方法如下： a）GET：从服务器取出资源。 b）POST：在服务器新建一个资源。 c）PUT：在服务器更新资源。 d）DELETE：从服务器删除资源。 4 ）请求内容：URL带的参数必须无敏感信息或符合安全要求；body里带参数时必须设置Content-Type。 5 ）响应体：响应体body可放置多种数据类型，由Content-Type头来确定。\"},\"3225\":{\"t\":\"【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。 说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的null判断。\"},\"3226\":{\"t\":\"【强制】服务端发生错误时，返回给前端的响应信息必须包含HTTP状态码，errorCode、errorMessage、用户提示信息四个部分。 说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。errorCode：参考 。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。 正例：常见的HTTP状态码如下 1 ） 200 OK：表明该请求被成功地完成，所请求的资源发送到客户端。 2 ） 401 Unauthorized：请求要求身份验证，常见对于需要登录而用户未登录的情况。 3 ） 403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。 4 ） 404 NotFound：服务器无法取得所请求的网页，请求资源不存在。 5 ） 500 InternalServerError：服务器内部错误。\"},\"3227\":{\"t\":\"【强制】在前后端交互的JSON格式数据中，所有的key必须为小写字母开始的lowerCamelCase风格，符合英文表达习惯，且表意完整。 正例：errorCode / errorMessage / assetStatus / menuList / orderList / configFlag 反例：ERRORCODE / ERROR_CODE / error_message / error-message / errormessage\"},\"3228\":{\"t\":\"【强制】errorMessage是前后端错误追踪机制的体现，可以在前端输出到type=\\\"hidden\\\" 文字类控件中，或者用户端的日志中，帮助我们快速地定位出问题。\"},\"3229\":{\"t\":\"【强制】对于需要使用超大整数的场景，服务端一律使用String字符串类型返回，禁止使用Long类型。 说明：Java服务端如果直接返回Long整型数据给前端，Javascript会自动转换为Number类型（注：此类型为双精度浮点数，表示原理与取值范围等同于Java中的Double）。Long类型能表示的最大值是 263 - 1 ，在取值范围之内，超过 253（ 9007199254740992 ）的数值转化为Javascript的Number时，有些数值会产生精度损失。扩展说明，在Long取值范围内，任何 2 的指数次的整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。 反例：通常在订单号或交易号大于等于 16 位，大概率会出现前后端订单数据不一致的情况。 比如，后端传输的 \\\"orderId\\\"： 362909601374617692 ，前端拿到的值却是：362909601374617660\"},\"3230\":{\"t\":\"【强制】HTTP请求通过URL传递参数时，不能超过 2048 字节。 说明：不同浏览器对于URL的最大长度限制略有不同，并且对超出最大长度的处理逻辑也有差异， 2048 字节是取所有浏览器的最小值。 反例：某业务将退货的商品id列表放在URL中作为参数传递，当一次退货商品数量过多时，URL参数超长，传递到后端的参数被截断，导致部分商品未能正确退货。\"},\"3231\":{\"t\":\"【强制】HTTP请求通过body传递内容时，必须控制长度，超出最大长度后，后端解析会出错。 说明：nginx默认限制是1MB，tomcat默认限制为2MB，当确实有业务需要传较大内容时，可以调大服务器端的限制。\"},\"3232\":{\"t\":\"【强制】在翻页场景中，用户输入参数的小于 1 ，则前端返回第一页参数给后端；后端发现用户输入的参数大于总页数，直接返回最后一页。\"},\"3233\":{\"t\":\"【强制】服务器内部重定向必须使用forward；外部重定向地址必须使用URL统一代理模块生成，否则会因线上采用HTTPS协议而导致浏览器提示“不安全”，并且还会带来URL维护不一致的问题。\"},\"3234\":{\"t\":\"【推荐】服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的请求结果。 说明：缓存有利于减少交互次数，减少交互的平均延迟。 正例：http1.1中，s-maxage告诉服务器进行缓存，时间单位为秒，用法如下， response.setHeader(\\\"Cache-Control\\\", \\\"s-maxage=\\\" + cacheSeconds);\"},\"3235\":{\"t\":\"【推荐】服务端返回的数据，使用JSON格式而非XML。 说明：尽管HTTP支持使用不同的输出格式，例如纯文本，JSON，CSV，XML，RSS甚至HTML。如果我们使用的面向用户的服务，应该选择JSON作为通信中使用的标准数据交换格式，包括请求和响应。此外，application/JSON是一种通用的MIME类型，具有实用、精简、易读的特点。\"},\"3236\":{\"t\":\"【推荐】前后端的时间格式统一为\\\"yyyy-MM-dd HH:mm:ss\\\"，统一为GMT。\"},\"3237\":{\"t\":\"【参考】在接口路径中不要加入版本号，版本控制在HTTP头信息中体现，有利于向前兼容。 说明：当用户在低版本与高版本之间反复切换工作时，会导致迁移复杂度升高，存在数据错乱风险。\"},\"3238\":{\"h\":\"(十一) 其他\",\"a\":\"十一-其他\"},\"3239\":{\"t\":\"【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。 说明：不要在方法体内定义：Pattern pattern = Pattern.compile(\\\"规则\\\");\"},\"3240\":{\"t\":\"【强制】避免用ApacheBeanutils进行属性的copy。 说明：ApacheBeanUtils性能较差，可以使用其他方案比如SpringBeanUtils，CglibBeanCopier，注意均是浅拷贝。\"},\"3241\":{\"t\":\"【强制】velocity调用POJO类的属性时，直接使用属性名取值即可，模板引擎会自动按规范调用POJO的getXxx()，如果是boolean基本数据类型变量（boolean命名不需要加is前缀），会自动调isXxx()方法。 说明：注意如果是Boolean包装类对象，优先调用getXxx() 的方法。\"},\"3242\":{\"t\":\"【强制】后台输送给页面的变量必须加 $!{var} ——中间的感叹号。 说明：如果var等于null或者不存在，那么 ${var} 会直接显示在页面上。\"},\"3243\":{\"t\":\"【强制】注意Math.random() 这个方法返回是double类型，注意取值的范围 0 ≤ x < 1 （能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大 10 的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法。\"},\"3244\":{\"t\":\"【强制】枚举enum（括号内）的属性字段必须是私有且不可变。\"},\"3245\":{\"t\":\"【推荐】不要在视图模板中加入任何复杂的逻辑运算。 说明：根据MVC理论，视图的职责是展示，不要抢模型和控制器的活。\"},\"3246\":{\"t\":\"【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。\"},\"3247\":{\"t\":\"【推荐】及时清理不再使用的代码段或配置信息。 说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。 正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由：\"},\"3248\":{\"t\":\"public static void hello() { /// 业务方通知活动暂停 // Business business = new Business(); // business.active(); System.out.println(\\\"it's finished\\\"); } \"},\"3249\":{\"h\":\"二、异常日志\",\"a\":\"二、异常日志\"},\"3250\":{\"h\":\"(一) 错误码\",\"a\":\"一-错误码\"},\"3251\":{\"t\":\"【强制】错误码的制定原则：快速溯源、沟通标准化。 说明：错误码想得过于完美和复杂，就像康熙字典的生僻字一样，用词似乎精准，但是字典不容易随身携带且简单易懂。 正例：错误码回答的问题是谁的错？错在哪？ ​ 1 ）错误码必须能够快速知晓错误来源，可快速判断是谁的问题。 ​ 2 ）错误码必须能够进行清晰地比对（代码中容易equals）。 ​ 3 ）错误码有利于团队快速对错误原因达到一致认知。\"},\"3252\":{\"t\":\"【强制】错误码不体现版本号和错误等级信息。 说明：错误码以不断追加的方式进行兼容。错误等级由日志和错误码本身的释义来决定。\"},\"3253\":{\"t\":\"【强制】全部正常，但不得不填充错误码时返回五个零： 00000 。\"},\"3254\":{\"t\":\"【强制】错误码为字符串类型，共 5 位，分成两个部分：错误产生来源+四位数字编号。 说明：错误产生来源分为A/B/C，A表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付超时等问题；B表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题；C表示错误来源于第三方服务，比如CDN服务出错，消息投递超时等问题；四位数字编号从 0001 到 9999 ，大类之间的步长间距预留 100 ，参考文末附表 3 。\"},\"3255\":{\"t\":\"【强制】编号不与公司业务架构，更不与组织架构挂钩，以先到先得的原则在统一平台上进行，审批生效，编号即被永久固定。\"},\"3256\":{\"t\":\"【强制】错误码使用者避免随意定义新的错误码。 说明：尽可能在原有错误码附表中找到语义相同或者相近的错误码在代码中使用即可。\"},\"3257\":{\"t\":\"【强制】错误码不能直接输出给用户作为提示信息使用。 说明：堆栈（stack_trace）、错误信息(error_message) 、错误码（error_code）、提示信息（user_tip）是一个有效关联并互相转义的和谐整体，但是请勿互相越俎代庖。\"},\"3258\":{\"t\":\"【推荐】错误码之外的业务信息由error_message来承载，而不是让错误码本身涵盖过多具体业务属性。\"},\"3259\":{\"t\":\"【推荐】在获取第三方服务错误码时，向上抛出允许本系统转义，由C转为B，并且在错误信息上带上原有的第三方错误码。\"},\"3260\":{\"t\":\"【参考】错误码分为一级宏观错误码、二级宏观错误码、三级宏观错误码。 说明：在无法更加具体确定的错误场景中，可以直接使用一级宏观错误码，分别是：A0001（用户端错误）、B0001（系统执行出错）、C0001（调用第三方服务出错）。 正例：调用第三方服务出错是一级，中间件错误是二级，消息服务出错是三级。\"},\"3261\":{\"t\":\"【参考】错误码的后三位编号与HTTP状态码没有任何关系。\"},\"3262\":{\"t\":\"【参考】错误码有利于不同文化背景的开发者进行交流与代码协作。 说明：英文单词形式的错误码不利于非英语母语国家（如阿拉伯语、希伯来语、俄罗斯语等）之间的开发者互相协作。\"},\"3263\":{\"t\":\"【参考】错误码即人性，感性认知+口口相传，使用纯数字来进行错误码编排不利于感性记忆和分类。 说明：数字是一个整体，每位数字的地位和含义是相同的。 反例：一个五位数字 12345 ，第 1 位是错误等级，第 2 位是错误来源， 345 是编号，人的大脑不会主动地拆开并分辨每位数字的不同含义。\"},\"3264\":{\"h\":\"(二) 异常处理\",\"a\":\"二-异常处理\"},\"3265\":{\"t\":\"【强制】Java类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。 说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不通过catchNumberFormatException来实现。 正例：if (obj != null) {...} 反例：try { obj.method(); } catch (NullPointerException e)\"},\"3266\":{\"t\":\"【强制】异常捕获后不要用来做流程控制，条件控制。 说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\"},\"3267\":{\"t\":\"【强制】catch时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。 说明：对大段代码进行try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。 正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。\"},\"3268\":{\"t\":\"【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\"},\"3269\":{\"t\":\"【强制】事务场景中，抛出异常被catch后，如果需要回滚，一定要注意手动回滚事务。\"},\"3270\":{\"t\":\"【强制】finally块必须对资源对象、流对象进行关闭，有异常也要做try-catch。 说明：如果JDK7，可以使用try-with-resources方式。\"},\"3271\":{\"t\":\"【强制】不要在finally块中使用return 说明：try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则会在此直接返回，无情丢弃掉try块中的返回点。 反例：\"},\"3272\":{\"t\":\"private int x = 0 ; public int checkReturn() { try { // x等于 1 ，此处不返回 return ++x; } finally { // 返回的结果是 2 return ++x; } } \"},\"3273\":{\"t\":\"【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\"},\"3274\":{\"t\":\"【强制】在调用RPC、二方包、或动态生成类的相关方法时，捕捉异常使用Throwable类进行拦截。 说明：通过反射机制来调用方法，如果找不到方法，抛出NoSuchMethodException。什么情况会抛出NoSuchMethodError呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配，或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出NoSuchMethodError。 反例：足迹服务引入了高版本的spring，导致运行到某段核心逻辑时，抛出NoSuchMethodError错误，catch用的类却是Exception，堆栈向上抛，影响到上层业务。这是一个非核心功能点影响到核心应用的典型反例。\"},\"3275\":{\"t\":\"【推荐】方法的返回值可以为null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回null值。 说明：本规约明确防止NPE是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回null的情况。\"},\"3276\":{\"t\":\"【推荐】防止NPE，是程序员的基本修养，注意NPE产生的场景： 1 ）返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE 反例：public int method() { return Integer对象; }，如果为null，自动解箱抛NPE。 2 ）数据库的查询结果可能为null。 3 ）集合里的元素即使isNotEmpty，取出的数据元素也可能为null。 4 ）远程调用返回对象时，一律要求进行空指针判断，防止NPE。 5 ）对于Session中获取的数据，建议进行NPE检查，避免空指针。 6 ）级联调用obj.getA().getB().getC()；一连串调用，易产生NPE。 正例：使用JDK8的Optional类来防止NPE问题。\"},\"3277\":{\"t\":\"【推荐】定义时区分unchecked / checked异常，避免直接抛出new RuntimeException()，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException等。\"},\"3278\":{\"t\":\"【参考】对于公司外的http / api开放接口必须使用错误码，而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装isSuccess() 方法、错误码、错误简短信息；应用内部推荐异常抛出。 说明：关于RPC方法返回方式使用Result方式的理由： 1 ）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。 2 ）如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\"},\"3279\":{\"h\":\"(三) 日志规约\",\"a\":\"三-日志规约\"},\"3280\":{\"t\":\"【强制】应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架（SLF4J、JCL—Jakarta Commons Logging）中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。 说明：日志框架（SLF4J、JCL--Jakarta Commons Logging）的使用方式（推荐使用SLF4J） ​ 使用SLF4J：\"},\"3281\":{\"t\":\"import org.slf4j.Logger; import org.slf4j.LoggerFactory; private static final Logger logger = LoggerFactory.getLogger(Test.class); \"},\"3282\":{\"t\":\"​ 使用JCL：\"},\"3283\":{\"t\":\"import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; private static final Log log = LogFactory.getLog(Test.class); \"},\"3284\":{\"t\":\"【强制】日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。对于当天日志，以“应用名.log”来保存，保存在/{统一目录}/{应用名}/logs/目录下，过往日志格式为：{logname}.log.{保存日期}，日期格式：yyyy-MM-dd 正例：以mppserver应用为例，日志保存/home/admin/mppserver/logs/mppserver.log，历史日志名称为mppserver.log.20 21 - 11 - 28\"},\"3285\":{\"t\":\"【强制】根据国家法律，网络运行状态、网络安全事件、个人敏感信息操作等相关记录，留存的日志不少于六个月，并且进行网络多机备份。\"},\"3286\":{\"t\":\"【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式： appName_logType_logName.log。logType：日志类型，如stats / monitor / access等； logName：日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。 说明：推荐对日志进行分类，将错误日志和业务日志分开放，便于开发人员查看，也便于通过日志对系统进行及时监控。 正例：mppserver应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log\"},\"3287\":{\"t\":\"【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。 说明：因为String字符串的拼接会使用StringBuilder的append() 方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。 正例：logger.debug(\\\"Processing trade with id : {} and symbol : {}\\\", id, symbol);\"},\"3288\":{\"t\":\"【强制】对于trace / debug / info级别的日志输出，必须进行日志级别的开关判断： 说明：虽然在debug(参数) 的方法体内第一行代码isDisabled(Level.DEBUG_INT) 为真时（Slf4j的常见实现Log4j和Logback），就直接return，但是参数可能会进行字符串拼接运算。此外，如果debug(getName()) 这种参数内有getName() 方法调用，无谓浪费方法调用的开销。 正例：\"},\"3289\":{\"t\":\"// 如果判断为真，那么可以输出trace和debug级别的日志 if (logger.isDebugEnabled()) { logger.debug(\\\"Current ID is: {} and name is: {}\\\", id, getName()); } \"},\"3290\":{\"t\":\"【强制】避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置additivity=false 正例：<logger name=\\\"com.taobao.dubbo.config\\\" additivity=\\\"false\\\">\"},\"3291\":{\"t\":\"【强制】生产环境禁止使用System.out或System.err输出或使用e.printStackTrace() 打印异常堆栈。 说明：标准日志输出与标准错误输出文件每次Jboss重启时才滚动，如果大量输出送往这两个文件，容易造成文件大小 超过操作系统大小限制。\"},\"3292\":{\"t\":\"【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字throws往上抛出。 正例：logger.error(\\\"inputParams: {} and errorMessage: {}\\\", 各类参数或者对象toString(), e.getMessage(), e);\"},\"3293\":{\"t\":\"【强制】日志打印时禁止直接用JSON工具将对象转换成String。 说明：如果对象里某些get方法被覆写，存在抛出异常的情况，则可能会因为打印日志而影响正常业务流程的执行。 正例：打印日志时仅打印出业务相关属性值或者调用其对象的toString() 方法。\"},\"3294\":{\"t\":\"【推荐】谨慎地记录日志。生产环境禁止输出debug日志；有选择地输出info日志；如果使用warn来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。 说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？\"},\"3295\":{\"t\":\"【推荐】可以使用warn日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出error级别，避免频繁报警。 说明：注意日志输出的级别，error级别只记录系统逻辑出错、异常或者重要的错误信息。\"},\"3296\":{\"t\":\"【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。 说明：国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。\"},\"3297\":{\"t\":\"【推荐】为了保护用户隐私，日志文件中的用户敏感信息需要进行脱敏处理。 说明：日志排查问题时，推荐使用订单号、UUID之类的唯一编号进行查询。\"},\"3298\":{\"h\":\"三、单元测试\",\"a\":\"三、单元测试\"},\"3299\":{\"t\":\"【强制】好的单元测试必须遵守AIR原则。 说明：单元测试在线上运行时，感觉像空气（AIR）一样感觉不到，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。\"},\"3300\":{\"t\":\"A：Automatic（自动化）\"},\"3301\":{\"t\":\"I：Independent（独立性）\"},\"3302\":{\"t\":\"R：Repeatable（可重复）\"},\"3303\":{\"t\":\"【强制】单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。不准使用System.out来进行人肉验证，单元测试必须使用assert来验证。\"},\"3304\":{\"t\":\"【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。 反例：method2需要依赖method1的执行，将执行结果作为method2的输入。\"},\"3305\":{\"t\":\"【强制】单元测试是可以重复执行的，不能受到外界环境的影响。 说明：单元测试通常会被放到持续集成中，每次有代码push时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。 正例：为了不受外界环境影响，要求设计代码时就把SUT（System under test）的依赖改成注入，在测试时用Spring这样的DI框架注入一个本地（内存）实现或者Mock实现。\"},\"3306\":{\"t\":\"【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。 说明：测试粒度小才能在出错时尽快定位到出错的位置。单元测试不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。\"},\"3307\":{\"t\":\"【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。 说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。\"},\"3308\":{\"t\":\"【强制】单元测试代码必须写在如下工程目录： src/test/java，不允许写在业务代码目录下。 说明：源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。\"},\"3309\":{\"t\":\"【推荐】单测的基本目标：语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100% 说明：在工程规约的应用分层中提到的DAO层，Manager层，可重用度高的Service，都应该进行单元测试。\"},\"3310\":{\"t\":\"【推荐】编写单元测试代码遵守BCDE原则，以保证被测试模块的交付质量。\"},\"3311\":{\"t\":\"B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。\"},\"3312\":{\"t\":\"C：Correct，正确的输入，并得到预期的结果。\"},\"3313\":{\"t\":\"D：Design，与设计文档相结合，来编写单元测试。\"},\"3314\":{\"t\":\"E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。\"},\"3315\":{\"t\":\"【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。 反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。\"},\"3316\":{\"t\":\"【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。 正例：在基础技术部的内部单元测试中，使用FOUNDATION_UNIT_TEST_的前缀来标识单元测试相关代码。\"},\"3317\":{\"t\":\"【推荐】对于不可测的代码在适当的时机做必要的重构，使代码变得可测避免为了达到测试要求而书写不规范测试代码。\"},\"3318\":{\"t\":\"【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。\"},\"3319\":{\"t\":\"【推荐】单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例。\"},\"3320\":{\"t\":\"【参考】为了更方便地进行单元测试，业务代码应避免以下情况：\"},\"3321\":{\"t\":\"构造方法中做的事情过多。\"},\"3322\":{\"t\":\"存在过多的全局变量和静态方法。\"},\"3323\":{\"t\":\"存在过多的外部依赖。\"},\"3324\":{\"t\":\"存在过多的条件语句。 说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。\"},\"3325\":{\"t\":\"【参考】不要对单元测试存在如下误解：\"},\"3326\":{\"t\":\"那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。\"},\"3327\":{\"t\":\"单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。\"},\"3328\":{\"t\":\"单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。\"},\"3329\":{\"t\":\"单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。\"},\"3330\":{\"h\":\"四、安全规约\",\"a\":\"四、安全规约\"},\"3331\":{\"t\":\"【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。 说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容。\"},\"3332\":{\"t\":\"【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。 说明：中国大陆个人手机号码显示：139****1219，隐藏中间 4 位，防止隐私泄露。\"},\"3333\":{\"t\":\"【强制】用户输入的SQL参数严格使用参数绑定或者METADATA字段值限定，防止SQL注入，禁止字符串拼接SQL访问数据库。 反例：某系统签名大量被恶意修改，即是因为对于危险字符#--没有进行转义，导致数据库更新时，where后边的信息被注释掉，对全库进行更新。\"},\"3334\":{\"t\":\"【强制】用户请求传入的任何参数必须做有效性验证。 说明：忽略参数校验可能导致：\"},\"3335\":{\"t\":\"页面page size过大导致内存溢出\"},\"3336\":{\"t\":\"恶意order by导致数据库慢查询\"},\"3337\":{\"t\":\"缓存击穿\"},\"3338\":{\"t\":\"SSRF\"},\"3339\":{\"t\":\"任意重定向\"},\"3340\":{\"t\":\"SQL注入，Shell注入，反序列化注入\"},\"3341\":{\"t\":\"正则输入源串拒绝服务ReDoS 扩展：Java代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。\"},\"3342\":{\"t\":\"【强制】禁止向HTML页面输出未经安全过滤或未正确转义的用户数据。 说明：XSS跨站脚本攻击。它指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览时，嵌入其中Web里面的html代码会被执行，造成获取用户cookie、钓鱼、获取用户页面数据、蠕虫、挂马等危害。\"},\"3343\":{\"t\":\"【强制】表单、AJAX提交必须执行CSRF安全验证。 说明：CSRF (Cross-site request forgery) 跨站请求伪造是一类常见编程漏洞。对于存在CSRF漏洞的应用/网站，攻击者可以事先构造好URL，只要受害者用户一访问，后台便在用户不知情的情况下对数据库中用户参数进行相应修改。\"},\"3344\":{\"t\":\"【强制】URL外部重定向传入的目标地址必须执行白名单过滤。 说明：攻击者通过恶意构造跳转的链接，可以向受害者发起钓鱼攻击。\"},\"3345\":{\"t\":\"【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。 说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。\"},\"3346\":{\"t\":\"【强制】对于文件上传功能，需要对于文件大小、类型进行严格检查和控制。 说明：攻击者可以利用上传漏洞，上传恶意文件到服务器，并且远程执行，达到控制网站服务器的目的。\"},\"3347\":{\"t\":\"【强制】配置文件中的密码需要加密。\"},\"3348\":{\"t\":\"【推荐】发贴、评论、发送等即时消息，需要用户输入内容的场景。必须实现防刷、内容违禁词过滤等风控策略。\"},\"3349\":{\"h\":\"五、MySQL数据库\",\"a\":\"五、mysql数据库\"},\"3350\":{\"h\":\"(一) 建表规约\",\"a\":\"一-建表规约\"},\"3351\":{\"t\":\"【强制】表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsigned tinyint（ 1 表示是， 0 表示否）。 注意：POJO类中的任何布尔类型的变量，都不要加is前缀，所以，需要在<resultMap>设置从is_xxx到Xxx的映射关系。数据库表示是与否的值，使用tinyint类型，坚持is_xxx的命名方式是为了明确其取值含义与取值范围。 说明：任何字段如果为非负数，必须是unsigned。 正例：表达逻辑删除的字段名is_deleted， 1 表示删除， 0 表示未删除。\"},\"3352\":{\"t\":\"【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。 说明：MySQL在Windows下不区分大小写，但在Linux下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。 正例：aliyun_admin，rdc_config，level3_name 反例：AliyunAdmin，rdcConfig，level_3_name\"},\"3353\":{\"t\":\"【强制】表名不使用复数名词。 说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于DO类名也是单数形式，符合表达习惯。\"},\"3354\":{\"t\":\"【强制】禁用保留字，如desc、range、match、delayed等，请参考MySQL官方保留字。\"},\"3355\":{\"t\":\"【强制】主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名则为idx_字段名。 说明：pk_即primary key；uk_即unique key；idx_即index的简称。\"},\"3356\":{\"t\":\"【强制】小数类型为decimal，禁止使用float和double。 说明：在存储的时候，float和double都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过decimal的范围，建议将数据拆成整数和小数并分开存储。\"},\"3357\":{\"t\":\"【强制】如果存储的字符串长度几乎相等，使用char定长字符串类型。\"},\"3358\":{\"t\":\"【强制】varchar是可变长字符串，不预先分配存储空间，长度不要超过 5000 ，如果存储长度大于此值，定义字段类型为text，独立出来一张表，用主键来对应，避免影响其它字段索引率。\"},\"3359\":{\"t\":\"【强制】表必备三字段：id，create_time，update_time。 说明：其中id必为主键，类型为bigint unsigned、单表时自增、步长为 1 。create_time，update_time的类型均为datetime类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。\"},\"3360\":{\"t\":\"【强制】在数据库中不能使用物理删除操作，要使用逻辑删除。 说明：逻辑删除在数据删除后可以追溯到行为操作。不过会使得一些情况下的唯一主键变得不唯一，需要根据情况来酌情解决。\"},\"3361\":{\"t\":\"【推荐】表的命名最好是遵循“业务名称_表的作用”。 正例：alipay_task / force_project / trade_config / tes_question\"},\"3362\":{\"t\":\"【推荐】库名与应用名称尽量一致。\"},\"3363\":{\"t\":\"【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。\"},\"3364\":{\"t\":\"【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循： 1 ）不是频繁修改的字段。 2 ）不是唯一索引的字段。 3 ）不是varchar超长字段，更不能是text字段。 正例：各业务线经常冗余存储商品名称，避免查询时需要调用IC服务获取。\"},\"3365\":{\"t\":\"【推荐】单表行数超过 500 万行或者单表容量超过2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。\"},\"3366\":{\"t\":\"【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。 正例：无符号值可以避免误存负数，且扩大了表示范围： ​ 对象 年龄区间 类型 字节 表示范围 ​ 人 150 岁之内 tinyint unsigned 1 无符号值： 0 到 255 ​ 龟 数百岁 smallint unsigned 2 无符号值： 0 到 65535 ​ 恐龙化石 数千万年 int unsigned 4 无符号值： 0 到约 43 亿 ​ 太阳 约 50 亿年 bigint unsigned 8 无符号值： 0 到约 10 的 19 次方\"},\"3367\":{\"h\":\"(二) 索引规约\",\"a\":\"二-索引规约\"},\"3368\":{\"t\":\"【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。 说明：不要以为唯一索引影响了insert速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。\"},\"3369\":{\"t\":\"【强制】超过三个表禁止join。需要join的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。 说明：即使双表join也要注意表索引、SQL性能。\"},\"3370\":{\"t\":\"【强制】在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。 说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达90%以上，可以使用count(distinct left(列名，索引长度)) / count(*) 的区分度来确定。\"},\"3371\":{\"t\":\"【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。 说明：索引文件具有B-Tree的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。\"},\"3372\":{\"t\":\"【推荐】如果有order by的场景，请注意利用索引的有序性。order by最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现filesort的情况，影响查询性能。 正例：where a =? and b =? order by c；索引：a_b_c 反例：索引如果存在范围查询，那么索引有序性无法利用，如：WHERE a > 10 ORDER BY b；索引a_b无法排序。\"},\"3373\":{\"t\":\"【推荐】利用覆盖索引来进行查询操作，避免回表。 说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。 正例：能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用explain的结果，extra列会出现：using index。\"},\"3374\":{\"t\":\"【推荐】利用延迟关联或者子查询优化超多分页场景。 说明：MySQL并不是跳过offset行，而是取offset+N行，然后返回放弃前offset行，返回N行，那当offset特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行SQL改写。 正例：先快速定位需要获取的id段，然后再关联： SELECT t1.* FROM表 1 as t1 , (select id from表 1 where条件LIMIT 100000 , 20) as t2 where t1.id = t2.id\"},\"3375\":{\"t\":\"【推荐】SQL性能优化的目标：至少要达到range级别，要求是ref级别，如果可以是const最好。 说明： ​ 1 ）consts单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。 ​ 2 ）ref指的是使用普通的索引（normal index）。 ​ 3 ）range对索引进行范围检索。 反例：explain表的结果，type = index，索引物理文件全扫描，速度非常慢，这个index级别比较range还低，与全表扫描是小巫见大巫。\"},\"3376\":{\"t\":\"【推荐】建组合索引的时候，区分度最高的在最左边。 正例：如果where a =? and b = ?，a列的几乎接近于唯一值，那么只需要单建idx_a索引即可。 说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c >? and d =? 那么即使c的区分度更高，也必须把d放在索引的最前列，即建立组合索引idx_d_c。\"},\"3377\":{\"t\":\"【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。\"},\"3378\":{\"t\":\"【参考】创建索引时避免有如下极端误解： 1 ）索引宁滥勿缺。认为一个查询就需要建一个索引。 2 ）吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。 3 ）抵制唯一索引。认为唯一索引一律需要在应用层通过“先查后插”方式解决。\"},\"3379\":{\"h\":\"(三) SQL语句\",\"a\":\"三-sql语句\"},\"3380\":{\"t\":\"【强制】不要使用count(列名) 或count(常量) 来替代count()，count() 是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。 说明：count(*) 会统计值为NULL的行，而count(列名) 不会统计此列为NULL值的行。\"},\"3381\":{\"t\":\"【强制】count(distinct col) 计算该列除NULL之外的不重复行数，注意count(distinct col1 , col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为 0 。\"},\"3382\":{\"t\":\"【强制】当某一列的值全是NULL时，count(col) 的返回结果为 0 ；但sum(col) 的返回结果为NULL，因此使用sum() 时需注意NPE问题。 正例：可以使用如下方式来避免sum的NPE问题：SELECT IFNULL(SUM(column) , 0) FROM table;\"},\"3383\":{\"t\":\"【强制】使用ISNULL() 来判断是否为NULL值。 说明：NULL与任何值的直接比较都为NULL。 ​ 1 ）NULL<>NULL的返回结果是NULL，而不是false。 ​ 2 ）NULL=NULL的返回结果是NULL，而不是true。 ​ 3 ）NULL<>1的返回结果是NULL，而不是true。 反例：在SQL语句中，如果在null前换行，影响可读性。 select * from table where column1 is null and column3 is not null；而ISNULL(column) 是一个整体，简洁易懂。 从性能数据上分析，ISNULL(column) 执行效率更快一些。\"},\"3384\":{\"t\":\"【强制】代码中写分页查询逻辑时，若count为 0 应直接返回，避免执行后面的分页语句。\"},\"3385\":{\"t\":\"【强制】不得使用外键与级联，一切外键概念必须在应用层解决。 说明：（概念解释）学生表中的student_id是主键，那么成绩表中的student_id则为外键。如果更新学生表中的student_id，同时触发成绩表中的student_id更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。\"},\"3386\":{\"t\":\"【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。\"},\"3387\":{\"t\":\"【强制】数据订正（特别是删除或修改记录操作）时，要先select，避免出现误删除的情况，确认无误才能执行更新语句。\"},\"3388\":{\"t\":\"【强制】对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。 说明：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。 正例：select t1.name from first_table as t1 , second_table as t2 where t1.id = t2.id; 反例：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常： Column 'name' infield list is ambiguous。\"},\"3389\":{\"t\":\"【推荐】SQL语句中表的别名前加as，并且以t1、t2、t3、...的顺序依次命名。 说明： ​ 1 ）别名可以是表的简称，或者是依照表在SQL语句中出现的顺序，以t1、t2、t3的方式命名。 ​ 2 ）别名前加as使别名更容易识别。 正例：select t1.name from first_table as t1 , second_table as t2 where t1.id = t2.id;\"},\"3390\":{\"t\":\"【推荐】in操作能避免则避免，若实在避免不了，需要仔细评估in后边的集合元素数量，控制在1000 个之内。\"},\"3391\":{\"t\":\"【参考】因国际化需要，所有的字符存储与表示，均采用utf8字符集，那么字符计数方法需要注意。 说明： SELECT LENGTH(\\\"轻松工作\\\")；--返回为 12 SELECT CHARACTER_LENGTH(\\\"轻松工作\\\")；--返回为 4 如果需要存储表情，那么选择utf8mb4来进行存储，注意它与utf8编码的区别。\"},\"3392\":{\"t\":\"【参考】TRUNCATE TABLE比DELETE速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发trigger，有可能造成事故，故不建议在开发代码中使用此语句。 说明：TRUNCATE TABLE在功能上与不带WHERE子句的DELETE语句相同。\"},\"3393\":{\"h\":\"(四) ORM映射\",\"a\":\"四-orm映射\"},\"3394\":{\"t\":\"【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。 说明： 1 ）增加查询分析器解析成本。 2 ）增减字段容易与resultMap配置不一致。 3 ）无用字段增加网络消耗，尤其是text类型的字段。\"},\"3395\":{\"t\":\"【强制】POJO类的布尔属性不能加is，而数据库字段必须加is_，要求在resultMap中进行字段与属 性之间的映射。 说明：参见定义POJO类以及数据库字段定义规定，在sql.xml增加映射，是必须的。\"},\"3396\":{\"t\":\"【强制】不要用resultClass当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 <resultMap>；反过来，每一个表也必然有一个<resultMap>与之对应。 说明：配置映射关系，使字段与DO类解耦，方便维护。\"},\"3397\":{\"t\":\"【强制】sql.xml配置参数使用：#{}，#param# 不要使用 ${} 此种方式容易出现SQL注入。\"},\"3398\":{\"t\":\"【强制】iBATIS自带的queryForList(String statementName，int start，int size) 不推荐使用。 说明：其实现方式是在数据库取到statementName对应的SQL语句的所有记录，再通过subList取start，size 的子集合，线上因为这个原因曾经出现过OOM。 正例： Map<String, Object> map = new HashMap<>(16); map.put(\\\"start\\\", start); map.put(\\\"size\\\", size);\"},\"3399\":{\"t\":\"【强制】不允许直接拿HashMap与Hashtable作为查询结果集的输出。 反例：某同学为避免写一个，直接使用Hashtable来接收数据库返回结果，结果出现 日常是把bigint转成Long值，而线上由于数据库版本不一样，解析成BigInteger，导致线上问题。\"},\"3400\":{\"t\":\"【强制】更新数据表记录时，必须同时更新记录对应的update_time字段值为当前时间。\"},\"3401\":{\"t\":\"【推荐】不要写一个大而全的数据更新接口。传入为POJO类，不管是不是自己的目标更新字段，都进行\"},\"3402\":{\"t\":\"update table set c1 = value1 , c2 = value2 , c3 = value3；这是不对的。执行SQL时，不要更新无改 动的字段，一是易出错；二是效率低；三是增加binlog存储。\"},\"3403\":{\"t\":\"【参考】@Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各\"},\"3404\":{\"t\":\"方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。\"},\"3405\":{\"t\":\"【参考】<isEqual>中的compareValue是与属性值对比的常量，一般是数字，表示相等时带上此条\"},\"3406\":{\"t\":\"件；<isNotEmpty>表示不为空且不为null时执行；<isNotNull>表示不为null值时执行。\"},\"3407\":{\"h\":\"六、工程结构\",\"a\":\"六、工程结构\"},\"3408\":{\"h\":\"(一) 应用分层\",\"a\":\"一-应用分层\"},\"3409\":{\"t\":\"【推荐】根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示，默认上层依赖于下层，箭头关系表示可直接依赖，如：开放API层可以依赖于Web层（Controller层），也可以直接依赖于Service层，依此类推：\"},\"3410\":{\"t\":\"开放API层：可直接封装Service接口暴露成RPC接口；通过Web封装成http接口；网关控制层等。\"},\"3411\":{\"t\":\"终端显示层：各个端的模板渲染并执行显示的层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示等。\"},\"3412\":{\"t\":\"Web层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。\"},\"3413\":{\"t\":\"Service层：相对具体的业务逻辑服务层。\"},\"3414\":{\"t\":\"Manager层：通用业务处理层，它有如下特征 1 ）对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。 2 ）对Service层通用能力的下沉，如缓存方案、中间件通用处理。 3 ）与DAO层交互，对多个DAO的组合复用。\"},\"3415\":{\"t\":\"DAO层：数据访问层，与底层MySQL、Oracle、Hbase、OceanBase等进行数据交互。\"},\"3416\":{\"t\":\"第三方服务：包括其它部门RPC服务接口，基础平台，其它公司的HTTP接口，如淘宝开放平台、支付宝付款服务、高德地图服务等。\"},\"3417\":{\"t\":\"外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。\"},\"3418\":{\"t\":\"【参考】（分层异常处理规约）在DAO层，产生的异常类型有很多，无法用细粒度的异常进行catch，使用catch(Exception e) 方式，并throw new DAOException(e)，不需要打印日志，因为日志在Manager或Service层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存 储。在Service层出现异常时，必须记录出错日志到磁盘，尽可能带上参数和上下文信息，相当于保护案发现场。Manager层与Service同机部署，日志方式与DAO层处理一致，如果是单独部署，则采用与Service一致的处理方式。Web层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。\"},\"3419\":{\"t\":\"【参考】分层领域模型规约：\"},\"3420\":{\"t\":\"DO（Data Object）：此对象与数据库表结构一一对应，通过DAO层向上传输数据源对象。\"},\"3421\":{\"t\":\"DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。\"},\"3422\":{\"t\":\"BO（Business Object）：业务对象，可以由Service层输出的封装业务逻辑的对象。\"},\"3423\":{\"t\":\"Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用Map类来传输。\"},\"3424\":{\"t\":\"VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。\"},\"3425\":{\"h\":\"(二) 二方库依赖\",\"a\":\"二-二方库依赖\"},\"3426\":{\"t\":\"【强制】定义GAV遵从以下规则： 1 ）GroupId格式：com.{公司/BU}.业务线.[子业务线]，最多 4 级。 说明：{公司/BU}例如：alibaba / taobao / tmall / kaikeba等BU一级；子业务线可选。 正例：com.taobao.jstorm或com.alibaba.dubbo.register 2 ）ArtifactId格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。 正例：dubbo-client / fastjson-api / jstorm-tool 3 ）Version：详细规定参考下方。\"},\"3427\":{\"t\":\"【强制】二方库版本号命名方式：主版本号.次版本号.修订号 1 ）主版本号：产品方向改变，或者大规模API不兼容，或者架构不兼容升级。 2 ）次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的API不兼容修改。 3 ）修订号：保持完全兼容性，修复BUG、新增次要功能特性等。 说明：注意起始版本号必须为：1.0.0，而不是0.0.1。 反例：仓库内某二方库版本号从1.0.0.0开始，一直默默“升级”成1.0.0.64，完全失去版本的语义信息。\"},\"3428\":{\"t\":\"【强制】线上应用不要依赖SNAPSHOT版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使RELEASE版本号有延续性，且版本号不允许覆盖升级。 说明：不依赖SNAPSHOT版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。\"},\"3429\":{\"t\":\"【强制】二方库的新增或升级，保持除功能点之外的其它jar包仲裁结果不变。如果有改变，必须明确评估和验证。 说明：在升级时，进行dependency:resolve前后信息比对，如果仲裁结果完全不一致，那么通过dependency:tree命令，找出差异点，进行<exclude>排除jar包。\"},\"3430\":{\"t\":\"【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的POJO对象。\"},\"3431\":{\"t\":\"【强制】二方库定制包的命名方式，在规定的版本号之后加“-英文说明[序号]”，英文说明可以是部门简称、业务名称，序号直接紧跟在英文说明之后，表示此定制包的顺序号。 说明：fastjson给SCM定制的版本号：1.0.0-SCM1。注：请尽可能在应用端来解决类冲突和加载问题，避免随意发布此类定制包。\"},\"3432\":{\"t\":\"【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。 说明：依赖springframework-core，-context，-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。\"},\"3433\":{\"t\":\"【强制】禁止在子项目的pom依赖中出现相同的GroupId，相同的ArtifactId，但是不同的Version。 说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个war，只能有一个版本号出现在最后的lib目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。\"},\"3434\":{\"t\":\"【推荐】底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。\"},\"3435\":{\"t\":\"【推荐】所有pom文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<dependencyManagement>语句块中。\"},\"3436\":{\"t\":\"说明：<dependencyManagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version和scope都读取自父pom。而<dependencies>所有声明在主pom的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。\"},\"3437\":{\"t\":\"【推荐】二方库不要有配置项，最低限度不要再增加配置项。\"},\"3438\":{\"t\":\"【推荐】不要使用不稳定的工具包或者Utils类。 说明：不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用业界稳定的二方工具包。\"},\"3439\":{\"t\":\"【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则： 1 ） 。移除一切不必要的API和依赖，只包含Service API、必要的领域模型对象、Utils类、常量、枚举等。如果依赖其它二方库，尽量是provided引入，让二方库使用者去依赖具体版本号；无log具体实现，只依赖日志框架。 2 ） 。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。\"},\"3440\":{\"h\":\"(三) 服务器\",\"a\":\"三-服务器\"},\"3441\":{\"t\":\"【强制】调用远程操作必须有超时设置。 说明：类似于HttpClient的超时设置需要自己明确去设置Timeout。根据经验表明，无数次的故障都是因为没有设置超时时间。\"},\"3442\":{\"t\":\"【推荐】客户端设置远程接口方法的具体超时时间（单位 ms），超时设置生效顺序一般为： 1 ）客户端Special Method； 2 ）客户端接口级别； 3 ）服务端Special Method； 4 ）服务端接口级别。\"},\"3443\":{\"t\":\"【推荐】高并发服务器建议调小TCP协议的time_wait超时时间。 说明：操作系统默认 240 秒后，才会关闭处于time_wait状态的连接，在高并发访问下，服务器端会因为处于time_wait的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。 正例：在linux服务器上请通过变更/etc/sysctl.conf文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout=30\"},\"3444\":{\"t\":\"【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为fd） 说明：主流操作系统的设计是将TCP / UDP连接采用与文件一样的方式去管理，即一个连接对应于一个fd。主流的linux服务器默认所支持最大fd数量为 1024 ，当并发连接数很大时很容易因为fd不足而出现“open too many files”错误，导致新的连接无法建立。建议将linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。\"},\"3445\":{\"t\":\"【推荐】给JVM环境参数设置-XX：+HeapDumpOnOutOfMemoryError参数，让JVM碰到OOM场景时输出dump信息。 说明：OOM的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常有帮助。\"},\"3446\":{\"t\":\"【推荐】在线上生产环境，JVM的Xms和Xmx设置一样大小的内存容量，避免在GC后调整堆大小带来的压力。\"},\"3447\":{\"t\":\"【推荐】了解每个服务大致的平均耗时，可以通过独立配置线程池，将较慢的服务与主线程池隔离开，免得不同服务的线程同归于尽。\"},\"3448\":{\"t\":\"【参考】服务器内部重定向必须使用forward；外部部重定向地址必须使用URL Broker生成，否则因线上采用HTTPS协议而导致浏览器提示“不安全”。此外，还会带来URL维护不一致的问题。\"},\"3449\":{\"h\":\"七、设计规约\",\"a\":\"七、设计规约\"},\"3450\":{\"t\":\"【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。 说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行double check。 正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要在评审通过后上线。\"},\"3451\":{\"t\":\"【强制】在需求分析阶段，如果与系统交互的User超过一类并且相关的UserCase超过 5 个，使用用例图来表达更加清晰的结构化需求。\"},\"3452\":{\"t\":\"【强制】如果某个业务对象的状态超过 3 个，使用状态图来表达并且明确状态变化的各个触发条件。 说明：状态图的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换关系，再明确触发状态转换的条件是什么。 正例：淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。\"},\"3453\":{\"t\":\"【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。 说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。\"},\"3454\":{\"t\":\"【强制】如果系统中模型类超过 5 个，且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。 说明：类图像建筑领域的施工图，如果搭平房，可能不需要，但如果建造蚂蚁Z空间大楼，肯定需要详细的施工图。\"},\"3455\":{\"t\":\"【强制】如果系统中超过 2 个对象之间存在协作关系，并需要表示复杂的处理流程，使用活动图来表示。 说明：活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。\"},\"3456\":{\"t\":\"【强制】系统设计时要准确识别出弱依赖，并针对性地设计降级和应急预案，保证核心系统正常可用。 说明：系统依赖的第三方服务被降级或屏蔽后，依然不会影响主干流程继续进行，仅影响信息展示、或消息通知等非关键功能，那么这些服务称为弱依赖。 正例：当系统弱依赖于多个外部服务时，如果下游服务耗时过长，则会严重影响当前调用者，必须采取相应降级措施，比如，当调用链路中某个下游服务调用的平均响应时间或错误率超过阈值时，系统自动进行降级或熔断操作，屏蔽弱依赖负面影响，保护当前系统主干功能可用。 反例：某个疫情相关的二维码出错：“服务器开了点小差，请稍后重试”，不可用时长持续很久，引起社会高度关注，原因可能为调用的外部依赖服务RT过高而导致系统假死，而在显示端没有做降级预案，只能直接抛错给用户。\"},\"3457\":{\"t\":\"【推荐】系统架构设计时明确以下目标：\"},\"3458\":{\"t\":\"确定系统边界。确定系统在技术层面上的做与不做。\"},\"3459\":{\"t\":\"确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。\"},\"3460\":{\"t\":\"确定指导后续设计与演化的原则。使后续的子系统或模块设计在一个既定的框架内和技术方向上继续演化。\"},\"3461\":{\"t\":\"确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等。\"},\"3462\":{\"t\":\"【推荐】需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。\"},\"3463\":{\"t\":\"【推荐】类在设计与实现时要符合单一原则。 说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。\"},\"3464\":{\"t\":\"【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。 说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。\"},\"3465\":{\"t\":\"【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。 说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。\"},\"3466\":{\"t\":\"【推荐】系统设计阶段，注意对扩展开放，对修改闭合。 说明：极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。\"},\"3467\":{\"t\":\"【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即DRY原则（Don't Repeat Yourself）。 说明：随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复，在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。 正例：一个类中有多个public方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\"},\"3468\":{\"t\":\"private boolean checkParam(DTO dto) {...} \"},\"3469\":{\"t\":\"【推荐】避免如下误解：敏捷开发=讲故事+编码+发布。 说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。 反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。\"},\"3470\":{\"t\":\"【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。 说明：避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。\"},\"3471\":{\"t\":\"【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。 说明：世间众多设计模式其实就是一种设计模式即隔离变化点的模式。 正例：极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。\"},\"3472\":{\"t\":\"【参考】设计的本质就是识别和表达系统难点。 说明：识别和表达完全是两回事，很多人错误地认为识别到系统难点在哪里，表达只是自然而然的事情，但是大家在设计评审中经常出现语焉不详，甚至是词不达意的情况。准确地表达系统难点需要具备如下能力：表达规则和表达工具的熟练性。抽象思维和总结能力的局限性。基础知识体系的完备性。深入浅出的生动表达力。\"},\"3473\":{\"t\":\"【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。 说明：代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题要相应的文档来完整地呈现。\"},\"3474\":{\"t\":\"【参考】在做无障碍产品设计时，需要考虑到：\"},\"3475\":{\"t\":\"所有可交互的控件元素必须能被tab键聚焦，并且焦点顺序需符合自然操作逻辑。\"},\"3476\":{\"t\":\"用于登录校验和请求拦截的验证码均需提供图形验证以外的其它方式。\"},\"3477\":{\"t\":\"自定义的控件类型需明确交互方式。 正例：登录场景中，输入框的按钮都需要考虑tab键聚焦，符合自然逻辑的操作顺序如下，\\\"输入用户名，输入密码，输入验证码，点击登录\\\"，其中验证码实现语音验证方式。如有自定义标签实现的控件设置控件类型可使用role属性。\"},\"3478\":{\"h\":\"附 1 ：版本历史\",\"a\":\"附-1-版本历史\"},\"3479\":{\"t\":\"版本号\"},\"3480\":{\"t\":\"版本名\"},\"3481\":{\"t\":\"发布日期\"},\"3482\":{\"t\":\"备注\"},\"3483\":{\"t\":\"2016.12.07\"},\"3484\":{\"t\":\"试读版本首次对外发布\"},\"3485\":{\"t\":\"1.0.0\"},\"3486\":{\"t\":\"正式版\"},\"3487\":{\"t\":\"2017.02.09\"},\"3488\":{\"t\":\"阿里巴巴集团正式对外发布\"},\"3489\":{\"t\":\"1.0.1\"},\"3490\":{\"t\":\"2017.02.13\"},\"3491\":{\"t\":\"1)修正 String[]的前后矛盾 2)vm 修正成 velocity 3)修正 countdown 描述错误\"},\"3492\":{\"t\":\"1.0.2\"},\"3493\":{\"t\":\"2017.02.20\"},\"3494\":{\"t\":\"1)去除文底水印 2)数据类型中引用太阳系年龄问题 3)修正关于异常和方法签名的部分描述 4)修正 final 描述 5)去除 Comparator 部分描述\"},\"3495\":{\"t\":\"1.1.0\"},\"3496\":{\"t\":\"2017.02.27\"},\"3497\":{\"t\":\"1)增加前言 2)增加<? extends T>描述和说明 3)增加版本历史 4)增加专有名词解释\"},\"3498\":{\"t\":\"1.1.1\"},\"3499\":{\"t\":\"2017.03.31\"},\"3500\":{\"t\":\"修正页码总数和部分示例\"},\"3501\":{\"t\":\"1.2.0\"},\"3502\":{\"t\":\"完美版\"},\"3503\":{\"t\":\"2017.05.20\"},\"3504\":{\"t\":\"1)根据云栖社区的“聚能聊”活动反馈，对手册的页码、排版、描述进行修正 2)增加 final 的适用场景描述 3)增加关于锁的粒度的说明 4)增加“指定集合大小”的详细说明以及正反例 5)增加卫语句的示例代码 6)明确数据库表示删除概念的字段名为 is_deleted\"},\"3505\":{\"t\":\"1.3.0\"},\"3506\":{\"t\":\"终极版\"},\"3507\":{\"t\":\"2017.09.25\"},\"3508\":{\"t\":\"增加单元测试规约，阿里开源的 IDE 代码规约检测插件\"},\"3509\":{\"t\":\"1.3.1\"},\"3510\":{\"t\":\"纪念版\"},\"3511\":{\"t\":\"2017.11.30\"},\"3512\":{\"t\":\"修正部分描述;采用和 P3C 开源 IDE 检测插件相同的 Apache2.0 协议\"},\"3513\":{\"t\":\"1.4.0\"},\"3514\":{\"t\":\"详尽版\"},\"3515\":{\"t\":\"2018.05.20\"},\"3516\":{\"t\":\"增加设计规约大类，共 16 条\"},\"3517\":{\"t\":\"1.5.0\"},\"3518\":{\"t\":\"华山版\"},\"3519\":{\"t\":\"2019.06.19\"},\"3520\":{\"t\":\"1)鉴于手册是 Java 社区开发者集体智慧的结晶，移除《阿里巴巴 Java 开发手册》 的限定词“阿里巴巴” 2)新增 21 条新规约。比如，switch 的 NPE 问题、浮点数的比较、无泛型限制、锁 的使用方式、判断表达式、日期格式等 3)修改描述 112 处。比如，IFNULL 的判断、集合的 toArray、日志处理等 4)完善若干处示例。比如，卫语句示例、enum 示例、finally 的 return 示例等\"},\"3521\":{\"t\":\"1.6.0\"},\"3522\":{\"t\":\"泰山版\"},\"3523\":{\"t\":\"2020.04.22\"},\"3524\":{\"t\":\"1)发布错误码统一解决方案，详细参考附表3。 2)修改描述 90 处。比如，阻塞等待锁、建表的小数类型等。 3)完善若干处示例。比如，ISNULL 的示例等。 4)新增 34 条新规约。比如，日期时间的闰年、闰月问题，三目运算的自动拆箱， SQL 查询的表别名限定，Collectors 类的 toMap() 方法使用注意等。\"},\"3525\":{\"t\":\"1.7.0\"},\"3526\":{\"t\":\"嵩山版\"},\"3527\":{\"t\":\"2020.08.03\"},\"3528\":{\"t\":\"1)新增前后端规约 14 条。 2)新增禁止任何歧视性用语的约定。 3)新增涉及敏感操作的情况下日志需要保存六个月的约定。 4)修正 BigDecimal 类中关于 compareTo 和 equals 的等值比较。 5)修正 HashMap 关于 1024 个元素扩容的次数。 6)修正架构分层规范与相关说明。 7)修正泰山版中部分格式错误和描述错误。\"},\"3529\":{\"t\":\"1.7.1\"},\"3530\":{\"t\":\"黄山版\"},\"3531\":{\"t\":\"2022.02.03\"},\"3532\":{\"t\":\"1)新增 11 条新规约。比如，浮点数的后缀统一为大写;枚举的属性字段必须是私 有且不可变;配置文件中的密码需要加密等。 2)新增描述中的正反例 2 条。比如，多个构造方法次序、NoSuchMethodError 处 理;新增扩展说明 5 条。比如，父集合元素的增加或删除异常等。3)修改描述 22 处。比如，魔法值的示例代码、ScheduledThreadPool 问题等。 4)修正嵩山版中部分代码格式错误和描述错误。\"},\"3533\":{\"h\":\"附 2 ：专有名词解释\",\"a\":\"附-2-专有名词解释\"},\"3534\":{\"t\":\"POJO（Plain Ordinary Java Object）：在本规约中，POJO专指只有setter / getter / toString的简单类，包括DO / DTO / BO / VO 等。\"},\"3535\":{\"t\":\"DO（Data Object）：阿里巴巴专指数据库表一 一对应的POJO类。 此对象与数据库表结构一 一对应，通过DAO层向上传输数据源对象。\"},\"3536\":{\"t\":\"PO（Persistent Object）：也指数据库表一 一对应的POJO类。 此对象与数据库表结构一 一对应，通过DAO层向上传输数据源对象。\"},\"3537\":{\"t\":\"DTO（Data Transfer Object ）：数据传输对象，Service或Manager向外传输的对象。\"},\"3538\":{\"t\":\"BO（Business Object）：业务对象，可以由Service层输出的封装业务逻辑的对象。\"},\"3539\":{\"t\":\"Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用Map类来传输。\"},\"3540\":{\"t\":\"VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。\"},\"3541\":{\"t\":\"CAS（Compare And Swap） ：解决多线程并行情况下使用锁造成性能损耗的一种机制，这是硬件实现的原子操作。 CAS操作包含三个操作数：内存位置、预期原值和新值。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。\"},\"3542\":{\"t\":\"GAV（GroupId、ArtifactId、Version）：Maven坐标，是用来唯一标识jar包。\"},\"3543\":{\"t\":\"OOP（Object Oriented Programming）：本文泛指类、对象的编程处理方式。\"},\"3544\":{\"t\":\"AQS（AbstractQueuedSynchronizer）：利用先进先出队列实现的底层同步工具类，它是很多上层同步实现类的基础，比如： ReentrantLock、CountDownLatch、 Semaphore等，它们通过继承AQS实现其模版方法，然后将AQS子类作为同步组件的内部类，通常命名为Sync。\"},\"3545\":{\"t\":\"ORM（Object Relation Mapping）：对象关系映射，对象领域模型与底层数据之间的转换，本文泛指iBATIS，mybatis 等框架。\"},\"3546\":{\"t\":\"NPE（java.lang.NullPointerException）：空指针异常。\"},\"3547\":{\"t\":\"OOM（Out Of Memory）：源于java.lang.OutOfMemoryError，当JVM没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。\"},\"3548\":{\"t\":\"GMT（Greenwich Mean Time）：指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。地球每天的自转是有些不规则的，而且正在缓慢减速，现在的标准时间是协调世界时（UTC），它由原子钟提供。\"},\"3549\":{\"t\":\"一方库：本工程内部子项目模块依赖的库（jar包）。\"},\"3550\":{\"t\":\"二方库：公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar包）。\"},\"3551\":{\"t\":\"三方库：公司之外的开源库（jar包）。\"},\"3552\":{\"h\":\"附 3 ：错误码列表\",\"a\":\"附-3-错误码列表\"},\"3553\":{\"t\":\"错误码\"},\"3554\":{\"t\":\"中文描述\"},\"3555\":{\"t\":\"说明\"},\"3556\":{\"t\":\"0000\"},\"3557\":{\"t\":\"一切 ok\"},\"3558\":{\"t\":\"正确执行后的返回\"},\"3559\":{\"t\":\"A0001\"},\"3560\":{\"t\":\"用户端错误\"},\"3561\":{\"t\":\"一级宏观错误码\"},\"3562\":{\"t\":\"A0100\"},\"3563\":{\"t\":\"用户注册错误\"},\"3564\":{\"t\":\"二级宏观错误码\"},\"3565\":{\"t\":\"A0101\"},\"3566\":{\"t\":\"用户未同意隐私协议\"},\"3567\":{\"t\":\"A0102\"},\"3568\":{\"t\":\"注册国家或地区受限\"},\"3569\":{\"t\":\"A0110\"},\"3570\":{\"t\":\"用户名校验失败\"},\"3571\":{\"t\":\"A0111\"},\"3572\":{\"t\":\"用户名已存在\"},\"3573\":{\"t\":\"A0112\"},\"3574\":{\"t\":\"用户名包含敏感词\"},\"3575\":{\"t\":\"A0113\"},\"3576\":{\"t\":\"用户名包含特殊字符\"},\"3577\":{\"t\":\"A0120\"},\"3578\":{\"t\":\"密码校验失败\"},\"3579\":{\"t\":\"A0121\"},\"3580\":{\"t\":\"密码长度不够\"},\"3581\":{\"t\":\"A0122\"},\"3582\":{\"t\":\"密码强度不够\"},\"3583\":{\"t\":\"A0130\"},\"3584\":{\"t\":\"校验码输入错误\"},\"3585\":{\"t\":\"A0131\"},\"3586\":{\"t\":\"短信校验码输入错误\"},\"3587\":{\"t\":\"A0132\"},\"3588\":{\"t\":\"邮件校验码输入错误\"},\"3589\":{\"t\":\"A0133\"},\"3590\":{\"t\":\"语音校验码输入错误\"},\"3591\":{\"t\":\"A0140\"},\"3592\":{\"t\":\"用户证件异常\"},\"3593\":{\"t\":\"A0141\"},\"3594\":{\"t\":\"用户证件类型未选择\"},\"3595\":{\"t\":\"A0142\"},\"3596\":{\"t\":\"大陆身份证编号校验\"},\"3597\":{\"t\":\"A0143\"},\"3598\":{\"t\":\"护照编号校验非法\"},\"3599\":{\"t\":\"A0144\"},\"3600\":{\"t\":\"军官证编号校验非法\"},\"3601\":{\"t\":\"A0150\"},\"3602\":{\"t\":\"用户基本信息校验失\"},\"3603\":{\"t\":\"A0151\"},\"3604\":{\"t\":\"手机格式校验失败\"},\"3605\":{\"t\":\"A0152\"},\"3606\":{\"t\":\"地址格式校验失败\"},\"3607\":{\"t\":\"A0153\"},\"3608\":{\"t\":\"邮箱格式校验失败\"},\"3609\":{\"t\":\"A0200\"},\"3610\":{\"t\":\"用户登录异常 二级\"},\"3611\":{\"t\":\"A0201\"},\"3612\":{\"t\":\"用户账户不存在\"},\"3613\":{\"t\":\"A0202\"},\"3614\":{\"t\":\"用户账户被冻结\"},\"3615\":{\"t\":\"A0203\"},\"3616\":{\"t\":\"用户账户已作废\"},\"3617\":{\"t\":\"A0210\"},\"3618\":{\"t\":\"用户密码错误\"},\"3619\":{\"t\":\"A0211\"},\"3620\":{\"t\":\"用户输入密码错误次\"},\"3621\":{\"t\":\"A0220\"},\"3622\":{\"t\":\"用户身份校验失败\"},\"3623\":{\"t\":\"A0221\"},\"3624\":{\"t\":\"用户指纹识别失败\"},\"3625\":{\"t\":\"A0222\"},\"3626\":{\"t\":\"用户面容识别失败\"},\"3627\":{\"t\":\"A0223\"},\"3628\":{\"t\":\"用户未获得第三方登\"},\"3629\":{\"t\":\"A0230\"},\"3630\":{\"t\":\"用户登录已过期\"},\"3631\":{\"t\":\"A0240\"},\"3632\":{\"t\":\"用户验证码错误\"},\"3633\":{\"t\":\"A0241\"},\"3634\":{\"t\":\"用户验证码尝试次数\"},\"3635\":{\"t\":\"A0300\"},\"3636\":{\"t\":\"访问权限异常\"},\"3637\":{\"t\":\"二级宏观错误码\"},\"3638\":{\"t\":\"A0301\"},\"3639\":{\"t\":\"访问未授权\"},\"3640\":{\"t\":\"A0302\"},\"3641\":{\"t\":\"正在授权中\"},\"3642\":{\"t\":\"A0303\"},\"3643\":{\"t\":\"用户授权申请被拒\"},\"3644\":{\"t\":\"A0310\"},\"3645\":{\"t\":\"因访问对象隐私设\"},\"3646\":{\"t\":\"A0311\"},\"3647\":{\"t\":\"授权已过期\"},\"3648\":{\"t\":\"A0312\"},\"3649\":{\"t\":\"无权限使用 API\"},\"3650\":{\"t\":\"A0320\"},\"3651\":{\"t\":\"用户访问被拦截\"},\"3652\":{\"t\":\"A0321\"},\"3653\":{\"t\":\"黑名单用户\"},\"3654\":{\"t\":\"A0322\"},\"3655\":{\"t\":\"账号被冻结\"},\"3656\":{\"t\":\"A0323\"},\"3657\":{\"t\":\"非法 IP 地址\"},\"3658\":{\"t\":\"A0324\"},\"3659\":{\"t\":\"网关访问受限\"},\"3660\":{\"t\":\"A0325\"},\"3661\":{\"t\":\"地域黑名单\"},\"3662\":{\"t\":\"A0330\"},\"3663\":{\"t\":\"服务已欠费\"},\"3664\":{\"t\":\"A0340\"},\"3665\":{\"t\":\"用户签名异常\"},\"3666\":{\"t\":\"A0341\"},\"3667\":{\"t\":\"RSA 签名错误\"},\"3668\":{\"t\":\"A0400\"},\"3669\":{\"t\":\"用户请求参数错误\"},\"3670\":{\"t\":\"二级宏观错误码\"},\"3671\":{\"t\":\"A0401\"},\"3672\":{\"t\":\"包含非法恶意跳转\"},\"3673\":{\"t\":\"A0402\"},\"3674\":{\"t\":\"无效的用户输入\"},\"3675\":{\"t\":\"A0410\"},\"3676\":{\"t\":\"请求必填参数为空\"},\"3677\":{\"t\":\"A0411\"},\"3678\":{\"t\":\"用户订单号为空\"},\"3679\":{\"t\":\"A0412\"},\"3680\":{\"t\":\"订购数量为空\"},\"3681\":{\"t\":\"A0413\"},\"3682\":{\"t\":\"缺少时间戳参数\"},\"3683\":{\"t\":\"A0414\"},\"3684\":{\"t\":\"非法的时间戳参数\"},\"3685\":{\"t\":\"A0420\"},\"3686\":{\"t\":\"请求参数值超出允许\"},\"3687\":{\"t\":\"A0421\"},\"3688\":{\"t\":\"参数格式不匹配\"},\"3689\":{\"t\":\"A0422\"},\"3690\":{\"t\":\"地址不在服务范围\"},\"3691\":{\"t\":\"A0423\"},\"3692\":{\"t\":\"时间不在服务范围\"},\"3693\":{\"t\":\"A0424\"},\"3694\":{\"t\":\"金额超出限制\"},\"3695\":{\"t\":\"A0425\"},\"3696\":{\"t\":\"数量超出限制\"},\"3697\":{\"t\":\"A0426\"},\"3698\":{\"t\":\"请求批量处理总个数\"},\"3699\":{\"t\":\"A0427\"},\"3700\":{\"t\":\"请求 JSON 解析失败\"},\"3701\":{\"t\":\"A0430\"},\"3702\":{\"t\":\"用户输入内容非法\"},\"3703\":{\"t\":\"A0431\"},\"3704\":{\"t\":\"包含违禁敏感词\"},\"3705\":{\"t\":\"A0432\"},\"3706\":{\"t\":\"图片包含违禁信息\"},\"3707\":{\"t\":\"A0433\"},\"3708\":{\"t\":\"文件侵犯版权\"},\"3709\":{\"t\":\"A0440\"},\"3710\":{\"t\":\"用户操作异常\"},\"3711\":{\"t\":\"A0441\"},\"3712\":{\"t\":\"用户支付超时\"},\"3713\":{\"t\":\"A0442\"},\"3714\":{\"t\":\"确认订单超时\"},\"3715\":{\"t\":\"A0443\"},\"3716\":{\"t\":\"订单已关闭\"},\"3717\":{\"t\":\"A0500\"},\"3718\":{\"t\":\"用户请求服务异常\"},\"3719\":{\"t\":\"二级宏观错误码\"},\"3720\":{\"t\":\"A0501\"},\"3721\":{\"t\":\"请求次数超出限制\"},\"3722\":{\"t\":\"A0502\"},\"3723\":{\"t\":\"请求并发数超出限制\"},\"3724\":{\"t\":\"A0503\"},\"3725\":{\"t\":\"用户操作请等待\"},\"3726\":{\"t\":\"A0504\"},\"3727\":{\"t\":\"WebSocket 连接异常\"},\"3728\":{\"t\":\"A0505\"},\"3729\":{\"t\":\"WebSocket 连接断开\"},\"3730\":{\"t\":\"A0506\"},\"3731\":{\"t\":\"用户重复请求\"},\"3732\":{\"t\":\"A0600\"},\"3733\":{\"t\":\"用户资源异常\"},\"3734\":{\"t\":\"二级宏观错误码\"},\"3735\":{\"t\":\"A0601\"},\"3736\":{\"t\":\"账户余额不足\"},\"3737\":{\"t\":\"A0602\"},\"3738\":{\"t\":\"用户磁盘空间不足\"},\"3739\":{\"t\":\"A0603\"},\"3740\":{\"t\":\"用户内存空间不足\"},\"3741\":{\"t\":\"A0604\"},\"3742\":{\"t\":\"用户 OSS 容量不足\"},\"3743\":{\"t\":\"A0605\"},\"3744\":{\"t\":\"用户配额已用光\"},\"3745\":{\"t\":\"蚂蚁森林浇水数或每天抽奖数\"},\"3746\":{\"t\":\"A0700\"},\"3747\":{\"t\":\"用户上传文件异常\"},\"3748\":{\"t\":\"二级宏观错误码\"},\"3749\":{\"t\":\"A0701\"},\"3750\":{\"t\":\"用户上传文件类型不\"},\"3751\":{\"t\":\"A0702\"},\"3752\":{\"t\":\"用户上传文件太大\"},\"3753\":{\"t\":\"A0703\"},\"3754\":{\"t\":\"用户上传图片太大\"},\"3755\":{\"t\":\"A0704\"},\"3756\":{\"t\":\"用户上传视频太大\"},\"3757\":{\"t\":\"A0705\"},\"3758\":{\"t\":\"用户上传压缩文件太\"},\"3759\":{\"t\":\"A0800\"},\"3760\":{\"t\":\"用户当前版本异常\"},\"3761\":{\"t\":\"二级宏观错误码\"},\"3762\":{\"t\":\"A0801\"},\"3763\":{\"t\":\"用户安装版本与系统\"},\"3764\":{\"t\":\"A0802\"},\"3765\":{\"t\":\"用户安装版本过低\"},\"3766\":{\"t\":\"A0803\"},\"3767\":{\"t\":\"用户安装版本过高\"},\"3768\":{\"t\":\"A0804\"},\"3769\":{\"t\":\"用户安装版本已过期\"},\"3770\":{\"t\":\"A0805\"},\"3771\":{\"t\":\"用户 API 请求版本不\"},\"3772\":{\"t\":\"A0806\"},\"3773\":{\"t\":\"用户 API 请求版本过\"},\"3774\":{\"t\":\"A0807\"},\"3775\":{\"t\":\"用户 API 请求版本过\"},\"3776\":{\"t\":\"A0900\"},\"3777\":{\"t\":\"用户隐私未授权\"},\"3778\":{\"t\":\"二级宏观错误码\"},\"3779\":{\"t\":\"A0901\"},\"3780\":{\"t\":\"用户隐私未签署\"},\"3781\":{\"t\":\"A0902\"},\"3782\":{\"t\":\"用户摄像头未授权\"},\"3783\":{\"t\":\"A0903\"},\"3784\":{\"t\":\"用户相机未授权\"},\"3785\":{\"t\":\"A0904\"},\"3786\":{\"t\":\"用户图片库未授权\"},\"3787\":{\"t\":\"A0905\"},\"3788\":{\"t\":\"用户文件未授权\"},\"3789\":{\"t\":\"A0906\"},\"3790\":{\"t\":\"用户位置信息未授权\"},\"3791\":{\"t\":\"A0907\"},\"3792\":{\"t\":\"用户通讯录未授权\"},\"3793\":{\"t\":\"A1000\"},\"3794\":{\"t\":\"用户设备异常\"},\"3795\":{\"t\":\"二级宏观错误码\"},\"3796\":{\"t\":\"A1001\"},\"3797\":{\"t\":\"用户相机异常\"},\"3798\":{\"t\":\"A1002\"},\"3799\":{\"t\":\"用户麦克风异常\"},\"3800\":{\"t\":\"A1003\"},\"3801\":{\"t\":\"用户听筒异常\"},\"3802\":{\"t\":\"A1004\"},\"3803\":{\"t\":\"用户扬声器异常\"},\"3804\":{\"t\":\"A1005\"},\"3805\":{\"t\":\"用户 GPS 定位异常\"},\"3806\":{\"t\":\"B0001\"},\"3807\":{\"t\":\"系统执行出错\"},\"3808\":{\"t\":\"一级宏观错误码\"},\"3809\":{\"t\":\"B0100\"},\"3810\":{\"t\":\"系统执行超时\"},\"3811\":{\"t\":\"二级宏观错误码\"},\"3812\":{\"t\":\"B0101\"},\"3813\":{\"t\":\"系统订单处理超时\"},\"3814\":{\"t\":\"B0200\"},\"3815\":{\"t\":\"系统容灾功能被触发\"},\"3816\":{\"t\":\"二级宏观错误码\"},\"3817\":{\"t\":\"B0210\"},\"3818\":{\"t\":\"系统限流\"},\"3819\":{\"t\":\"B0220\"},\"3820\":{\"t\":\"系统功能降级\"},\"3821\":{\"t\":\"B0300\"},\"3822\":{\"t\":\"系统资源异常\"},\"3823\":{\"t\":\"二级宏观错误码\"},\"3824\":{\"t\":\"B0310\"},\"3825\":{\"t\":\"系统资源耗尽\"},\"3826\":{\"t\":\"B0311\"},\"3827\":{\"t\":\"系统磁盘空间耗尽\"},\"3828\":{\"t\":\"B0312\"},\"3829\":{\"t\":\"系统内存耗尽\"},\"3830\":{\"t\":\"B0313\"},\"3831\":{\"t\":\"文件句柄耗尽\"},\"3832\":{\"t\":\"B0314\"},\"3833\":{\"t\":\"系统连接池耗尽\"},\"3834\":{\"t\":\"B0315\"},\"3835\":{\"t\":\"系统线程池耗尽\"},\"3836\":{\"t\":\"B0320\"},\"3837\":{\"t\":\"系统资源访问异常\"},\"3838\":{\"t\":\"B0321\"},\"3839\":{\"t\":\"系统读取磁盘文件\"},\"3840\":{\"t\":\"C0001\"},\"3841\":{\"t\":\"调用第三方服务出\"},\"3842\":{\"t\":\"C0100\"},\"3843\":{\"t\":\"中间件服务出错\"},\"3844\":{\"t\":\"一级宏观错误码\"},\"3845\":{\"t\":\"C0110\"},\"3846\":{\"t\":\"RPC 服务出错\"},\"3847\":{\"t\":\"二级宏观错误码\"},\"3848\":{\"t\":\"C0111\"},\"3849\":{\"t\":\"RPC 服务未找到\"},\"3850\":{\"t\":\"C0112\"},\"3851\":{\"t\":\"RPC 服务未注册\"},\"3852\":{\"t\":\"C0113\"},\"3853\":{\"t\":\"接口不存在\"},\"3854\":{\"t\":\"C0120\"},\"3855\":{\"t\":\"消息服务出错\"},\"3856\":{\"t\":\"C0121\"},\"3857\":{\"t\":\"消息投递出错\"},\"3858\":{\"t\":\"C0122\"},\"3859\":{\"t\":\"消息消费出错\"},\"3860\":{\"t\":\"C0123\"},\"3861\":{\"t\":\"消息订阅出错\"},\"3862\":{\"t\":\"C0124\"},\"3863\":{\"t\":\"消息分组未查到\"},\"3864\":{\"t\":\"C0130\"},\"3865\":{\"t\":\"缓存服务出错\"},\"3866\":{\"t\":\"C0131\"},\"3867\":{\"t\":\"key 长度超过限制\"},\"3868\":{\"t\":\"C0132\"},\"3869\":{\"t\":\"value 长度超过限制\"},\"3870\":{\"t\":\"C0133\"},\"3871\":{\"t\":\"存储容量已满\"},\"3872\":{\"t\":\"C0134\"},\"3873\":{\"t\":\"不支持的数据格式\"},\"3874\":{\"t\":\"C0140\"},\"3875\":{\"t\":\"配置服务出错\"},\"3876\":{\"t\":\"C0150\"},\"3877\":{\"t\":\"网络资源服务出错\"},\"3878\":{\"t\":\"C0151\"},\"3879\":{\"t\":\"VPN服务出错\"},\"3880\":{\"t\":\"C0152\"},\"3881\":{\"t\":\"CDN服务出错\"},\"3882\":{\"t\":\"C0153\"},\"3883\":{\"t\":\"域名解析服务出错\"},\"3884\":{\"t\":\"C0154\"},\"3885\":{\"t\":\"网关服务出错\"},\"3886\":{\"t\":\"C0200\"},\"3887\":{\"t\":\"第三方系统执行超时\"},\"3888\":{\"t\":\"二级宏观错误码\"},\"3889\":{\"t\":\"C0210\"},\"3890\":{\"t\":\"RPC执行超时\"},\"3891\":{\"t\":\"C0220\"},\"3892\":{\"t\":\"消息投递超时\"},\"3893\":{\"t\":\"C0230\"},\"3894\":{\"t\":\"缓存服务超时\"},\"3895\":{\"t\":\"C0240\"},\"3896\":{\"t\":\"配置服务超时\"},\"3897\":{\"t\":\"C0250\"},\"3898\":{\"t\":\"数据库服务超时\"},\"3899\":{\"t\":\"C0300\"},\"3900\":{\"t\":\"数据库服务出错\"},\"3901\":{\"t\":\"二级宏观错误码\"},\"3902\":{\"t\":\"C0311\"},\"3903\":{\"t\":\"表不存在\"},\"3904\":{\"t\":\"C0312\"},\"3905\":{\"t\":\"列不存在\"},\"3906\":{\"t\":\"C0321\"},\"3907\":{\"t\":\"多表关联中存在多\"},\"3908\":{\"t\":\"C0331\"},\"3909\":{\"t\":\"数据库死锁\"},\"3910\":{\"t\":\"C0341\"},\"3911\":{\"t\":\"主键冲突\"},\"3912\":{\"t\":\"C0400\"},\"3913\":{\"t\":\"第三方容灾系统被\"},\"3914\":{\"t\":\"二级宏观错误码\"},\"3915\":{\"t\":\"C0401\"},\"3916\":{\"t\":\"第三方系统限流\"},\"3917\":{\"t\":\"C0402\"},\"3918\":{\"t\":\"第三方功能降级\"},\"3919\":{\"t\":\"C0500\"},\"3920\":{\"t\":\"通知服务出错\"},\"3921\":{\"t\":\"二级宏观错误码\"},\"3922\":{\"t\":\"C0501\"},\"3923\":{\"t\":\"短信提醒服务失败\"},\"3924\":{\"t\":\"C0502\"},\"3925\":{\"t\":\"语音提醒服务失败\"},\"3926\":{\"t\":\"C0503\"},\"3927\":{\"t\":\"邮件提醒服务失败\"},\"3928\":{\"h\":\"Google Java 编程风格指南\"},\"3929\":{\"t\":\"转载并翻译自 https://google.github.io/styleguide/javaguide.html。个人英语水平有限，应以原文档为标准。\"},\"3930\":{\"h\":\"简介\",\"a\":\"简介\"},\"3931\":{\"t\":\"本文档是 Google Java 语言编程规范的 完整 定义。一个 Java 源文件当且仅当遵守本规范时，才可被描述为 Google 风格。\"},\"3932\":{\"t\":\"与其它编程规范指南类似，本文档讨论的不仅涉及代码对齐的美观问题，同时还包含其它类型约定和编码规范。然而，本文档侧重于讨论我们普遍遵循的 硬性规定，也避免提供那些无法明确执行的建议。\"},\"3933\":{\"h\":\"术语说明\",\"a\":\"术语说明\"},\"3934\":{\"t\":\"在本文档中，除非另有说明：\"},\"3935\":{\"t\":\"class 类 表示 ordinary class 普通的类、enum class 枚举类、interface 接口或 annotation 注解类型。\"},\"3936\":{\"t\":\"member 成员 表示 nested class 嵌套类、field 字段、method 方法或 constructor 者构造方法，即除初始化方法和注释之外，类的所有最顶层内容。\"},\"3937\":{\"t\":\"comment 注释 表示 implementation comments 实现注释。我们不使用术语 documentation comments，而是使用（在 Java 中）更通用的术语 Javadoc。\"},\"3938\":{\"t\":\"其它出现在本文档中的术语将另作说明。\"},\"3939\":{\"h\":\"指南说明\",\"a\":\"指南说明\"},\"3940\":{\"t\":\"本文档中的示例代是 不规范 的。也就是说，虽然示例代码是属于 Google 风格，但并不意味着这是编写优雅代码的唯一方式。示例中代码的风格不应被作为执行的准则。\"},\"3941\":{\"h\":\"源文件准则\",\"a\":\"源文件准则\"},\"3942\":{\"h\":\"文件名\",\"a\":\"文件名\"},\"3943\":{\"t\":\"源文件的名称包含了区分大小写的（并且是 唯一 的）顶级类的类名和 .java 扩展名组成。\"},\"3944\":{\"h\":\"文件编码：UTF-8\",\"a\":\"文件编码-utf-8\"},\"3945\":{\"t\":\"源文件使用 UTF-8 编码。\"},\"3946\":{\"h\":\"特殊字符\",\"a\":\"特殊字符\"},\"3947\":{\"h\":\"空格字符\",\"a\":\"空格字符\"},\"3948\":{\"t\":\"除了换行符，ASCII 水平空格字符（0x20） 是源文件中唯一允许出现的空格字符，这意味着：\"},\"3949\":{\"t\":\"字符串和字符字面量中的所有非空格字符都要进行转义。\"},\"3950\":{\"t\":\"不允许使用制表符缩进。\"},\"3951\":{\"h\":\"特殊转义序列\",\"a\":\"特殊转义序列\"},\"3952\":{\"t\":\"对于任何含有 特殊转义序列（ \\\\b、\\\\t、\\\\n、\\\\f、\\\\r、\\\\\\\"、\\\\' 和 \\\\\\\\ ）的字符，推荐使用这些转义序列，而不是对应的八进制（例如 \\\\012 ）或者 Unicode（例如 \\\\u000a ）转义字符。\"},\"3953\":{\"h\":\"非 ASCII 字符\",\"a\":\"非-ascii-字符\"},\"3954\":{\"t\":\"对剩余的非 ASCII 字符，取决于 更容易阅读和理解 的方式，选择 Unicode 字符（例如 ∞ ）或等价的 Unicode 转义字符（例如 \\\\u221e ），并且强烈反对在字符串和注释之外使用 Unicode 转义字符。\"},\"3955\":{\"t\":\"提示：在使用 Unicode 转义字符的情况下，或者偶尔使用实际的 Unicode 字符时，添加解释性的注释是非常有帮助的。\"},\"3956\":{\"t\":\"例如：\"},\"3957\":{\"t\":\"Example\"},\"3958\":{\"t\":\"Discussion\"},\"3959\":{\"t\":\"String unitAbbrev = \\\"μs\\\";\"},\"3960\":{\"t\":\"最好：没有注释也十分清晰\"},\"3961\":{\"t\":\"String unitAbbrev = \\\"\\\\u03bcs\\\"; // \\\"μs\\\"\"},\"3962\":{\"t\":\"允许：但没理由这么做\"},\"3963\":{\"t\":\"String unitAbbrev = \\\"\\\\u03bcs\\\"; // Greek letter mu, \\\"s\\\"\"},\"3964\":{\"t\":\"允许：但比较笨拙和易出错\"},\"3965\":{\"t\":\"String unitAbbrev = \\\"\\\\u03bcs\\\";\"},\"3966\":{\"t\":\"较差：可读性太差\"},\"3967\":{\"t\":\"return '\\\\ufeff' + content; // byte order mark\"},\"3968\":{\"t\":\"很好：转义字符用于非打印字符时，注释是非常有必要的\"},\"3969\":{\"t\":\"提示：不要担心因为一些程序可能不能正确地处理非 ASCII 字符，而使你的代码可读性变差。如果真的发生这种情况，那程序会直接 报错，并需要被 修复。\"},\"3970\":{\"h\":\"源文件结构\",\"a\":\"源文件结构\"},\"3971\":{\"t\":\"源文件按以下 顺序 包括：\"},\"3972\":{\"t\":\"License 或者 Copyright（如果需要的话）\"},\"3973\":{\"t\":\"Package 语句\"},\"3974\":{\"t\":\"Import 语句\"},\"3975\":{\"t\":\"有且只有一个的顶级 Class\"},\"3976\":{\"t\":\"以上每个部分间隔 一个空行。\"},\"3977\":{\"h\":\"License 或者 Copyright 信息\",\"a\":\"license-或者-copyright-信息\"},\"3978\":{\"t\":\"如果文件中包含许可证和版权信息，应当至于此处。\"},\"3979\":{\"h\":\"Package 语句\",\"a\":\"package-语句\"},\"3980\":{\"t\":\"Package 语句不允许换行。单行字符限制（ 列限制：100 章节）不适用于 Package 语句。\"},\"3981\":{\"h\":\"Import 语句\",\"a\":\"import-语句\"},\"3982\":{\"h\":\"不允许通配符\",\"a\":\"不允许通配符\"},\"3983\":{\"t\":\"不允许 使用静态或者其它形式的 通配符导入。\"},\"3984\":{\"h\":\"不允许换行\",\"a\":\"不允许换行\"},\"3985\":{\"t\":\"Import 语句 不允许 换行。单行字符限制（ 列限制：100 章节）不适用于 Import 语句。\"},\"3986\":{\"h\":\"顺序和间隔\",\"a\":\"顺序和间隔\"},\"3987\":{\"t\":\"Import 语句应按以下方式排序：\"},\"3988\":{\"t\":\"所有静态导入归一组。\"},\"3989\":{\"t\":\"所有非静态导入归一组。\"},\"3990\":{\"t\":\"如果同时存在静态导入和非静态导入，则应使用空行分隔它们。除此之外，在 Import 语句中不允许使用其它空行。\"},\"3991\":{\"t\":\"每组中的 Import 语句以 ASCII 编码顺序先后出现。（注意：因为 . 符号的 ASCII 编码排在 ; 符号之前，所以这与单纯的按 ASCII 编码排序略有不同。）\"},\"3992\":{\"h\":\"不允许类的静态导入\",\"a\":\"不允许类的静态导入\"},\"3993\":{\"t\":\"静态内部类以常规方式导入，而不是使用静态导入。\"},\"3994\":{\"h\":\"Class 定义\",\"a\":\"class-定义\"},\"3995\":{\"h\":\"有且仅有一个顶级类的声明\",\"a\":\"有且仅有一个顶级类的声明\"},\"3996\":{\"t\":\"每个顶级类都定义在它们的源文件中。\"},\"3997\":{\"h\":\"类内容顺序\",\"a\":\"类内容顺序\"},\"3998\":{\"t\":\"类的成员和初始化方法的顺序对代码可读性有着很重要的影响。然而，对此并没有一个统一正确的标准：不同的类可能有不同的排序内容的方式。\"},\"3999\":{\"t\":\"重要的是，每个类都应该使用该类的维护者可以解释清楚的 逻辑排序。例如，新的方法不是习惯性地添加到类的最后，因为「按时间顺序添加」并不是一种逻辑顺序。\"},\"4000\":{\"h\":\"方法重载：不应被分离\",\"a\":\"方法重载-不应被分离\"},\"4001\":{\"t\":\"同名的类方法应该在一个单独连续的组中出现，中间没有其它成员。对于多个构造方法（它们始终具有相同的名称），也是如此。即使这些方法之间的修饰符，如 static 或 private 不同，也适用这个规则。\"},\"4002\":{\"h\":\"格式化\",\"a\":\"格式化\"},\"4003\":{\"t\":\"术语说明：block-like construct 块状结构 指类或者普通方法或者构造方法的主体。注意，在后续 数组初始化 章节中，任何数组的初始化可以选择被认为是一个块状结构。\"},\"4004\":{\"h\":\"花括号\",\"a\":\"花括号\"},\"4005\":{\"h\":\"可选花括号的使用\",\"a\":\"可选花括号的使用\"},\"4006\":{\"t\":\"使用花括号来配对 if、else、for、do 和 while 语句，即使它们的语句主体是空的或者仅包含一条语句。\"},\"4007\":{\"t\":\"其它可选的花括号，例如 lambda 表达式中的花括号，仍然是可选的。\"},\"4008\":{\"h\":\"非空语句块：K & R 风格\",\"a\":\"非空语句块-k-r-风格\"},\"4009\":{\"t\":\"对于非空语句块和块状结构，花括号的使用方式遵循 Kernighan & Ritchie 风格（Egyptian brackets）：\"},\"4010\":{\"t\":\"左花括号之前不能换行，除下面详细说明的情况外。\"},\"4011\":{\"t\":\"左花括号之后换行。\"},\"4012\":{\"t\":\"右花括号之前换行。\"},\"4013\":{\"t\":\"仅在右花括号结束一条语句或者方法 / 构造方法 / 类的主体时，右花括号之后才换行。例如 else 和逗号之后的花括号不能换行。\"},\"4014\":{\"t\":\"特殊情况：在这些规则允许以分号 ( ; ) 结尾的单个语句的地方，可以出现一组语句，并且该块的左花括号前面有一个换行符。这样的代码块通常用于限制局部变量的作用域，例如在 switch 语句内部。\"},\"4015\":{\"t\":\"例如：\"},\"4016\":{\"t\":\"return () -> { while (condition()) { method(); } }; return new MyClass() { @Override public void method() { if (condition()) { try { something(); } catch (ProblemException e) { recover(); } } else if (otherCondition()) { somethingElse(); } else { lastThing(); } { int x = foo(); frob(x); } } }; \"},\"4017\":{\"t\":\"关于枚举类的一些特殊情况，将在 枚举类 章节说明。\"},\"4018\":{\"h\":\"空语句块：可以简洁\",\"a\":\"空语句块-可以简洁\"},\"4019\":{\"t\":\"一个空的语句块或者块状结构可以遵循 K & R 风格（正如在 非空语句块 章节所中描述的）。或者，当它不是 multi-block statement 多块语句（一个包含多块的语句，例如：if / else、try / catch / finally ）一部分的时候，可以在左花括号开始之后立即使用右花括号结束，{} 之中不包含任何字符或者换行符。\"},\"4020\":{\"t\":\"例如：\"},\"4021\":{\"t\":\"// This is acceptable void doNothing() {} // This is equally acceptable void doNothingElse() { } \"},\"4022\":{\"t\":\"// This is not acceptable: No concise empty blocks in a multi-block statement try { doSomething(); } catch (Exception e) {} \"},\"4023\":{\"h\":\"块缩进：+2 个空格\",\"a\":\"块缩进-2-个空格\"},\"4024\":{\"t\":\"每当新写一个语句块或者块状结构时，增加 2 个空格的缩进。当语句块结束时，返回至上一级别的缩进。语句块的缩进规则适用于所有代码和注释。（代码示例请见 非空语句块：K & R 风格 章节）\"},\"4025\":{\"h\":\"一条语句占一行\",\"a\":\"一条语句占一行\"},\"4026\":{\"t\":\"每条语句的最后都有换行符。\"},\"4027\":{\"h\":\"列限制：100\",\"a\":\"列限制-100\"},\"4028\":{\"t\":\"Java 代码的列限制为 100 个字符。这儿的「字符」意味着任意的 Unicode 码位。除非另有说明，任何超过此限制的代码行都必须被换行，正如在 换行 章节中所描述的。\"},\"4029\":{\"t\":\"每个 Unicode 码位都算作一个字符，不论它显示得更宽或者更窄。例如，如果使用 全角字符 的话，为了遵守这条严格的要求，可以选择提前换行。\"},\"4030\":{\"t\":\"特殊情况：\"},\"4031\":{\"t\":\"无法遵守列限制的代码行（例如 Javadoc 中的很长的 URL，或者 JSNI 中很长的方法引用）。\"},\"4032\":{\"t\":\"Package 语句和 Import 语句（请见 Package 语句 和 Import 语句 章节）。\"},\"4033\":{\"t\":\"注释中可以被复制粘贴到 Shell 中执行的命令。\"},\"4034\":{\"t\":\"非常长的标识符（在极少数情况下可能需要）允许超过列限制。在这种情况下，周围代码的有效换行方式应与 google-java-format 生成的方式相同。\"},\"4035\":{\"h\":\"换行\",\"a\":\"换行\"},\"4036\":{\"t\":\"术语说明：将原本可以合法写在一行的代码拆分成多行，这种行为称作 line-wrapping 换行。\"},\"4037\":{\"t\":\"没有全面和明确的准则，可以准确描述每种场景下该如何进行换行。对于同一段代码，通常会有多种有效可行的换行方法。\"},\"4038\":{\"t\":\"注意：换行的典型原因是为了避免代码超出了列数的限制，不过即使符合列限制的一行代码，也可以依据作者的决定而换行。\"},\"4039\":{\"t\":\"提示：提取方法或者局部变量或许可以避免换行的问题。\"},\"4040\":{\"h\":\"在何处换行\",\"a\":\"在何处换行\"},\"4041\":{\"t\":\"换行指令的主要内容是：倾向于在 较高语法级别 处中断一行代码。并且：\"},\"4042\":{\"t\":\"当一行代码的中断发生在 non-assignment 非赋值运算符时，需要在该运算符之前换行。（注意这与其它语言的 Google 编程风格不同，例如 C++ 和 JavaScript）\"},\"4043\":{\"t\":\"这条规则也适用于以下「类似操作符」的符号： \"},\"4044\":{\"t\":\"点分隔符（ . ）\"},\"4045\":{\"t\":\"方法引用中的两个冒号（ :: ）\"},\"4046\":{\"t\":\"类型约束中的 & 符号（ T <extends Foo Foo & Bar> ）\"},\"4047\":{\"t\":\"异常捕获中的 | 符号（ catch (FooException | BarException e) ）\"},\"4048\":{\"t\":\"当一行代码的中断发生在 assignment 赋值运算符时，需要在该运算符之后换行，但在之前换行也可以接受。\"},\"4049\":{\"t\":\"这条规则也适用于 foreach 语句中「类似赋值操作符」的冒号。\"},\"4050\":{\"t\":\"方法或者构造方法的名称紧随着与它相连的开括号 (。\"},\"4051\":{\"t\":\"逗号 , 紧随着它之前的内容。\"},\"4052\":{\"t\":\"在 lambda 语句中，和箭头符号相邻的那行代码永远不会换行，除非 lambda 语句的主体仅是一个不带括号的表达式，并且能紧随着 lambda 语句的箭头立即出现的情况下。例如：\"},\"4053\":{\"t\":\"MyLambda<String, Long, Object> lambda = (String label, Long value, Object obj) -> { ... }; Predicate<String> predicate = str -> longExpressionInvolving(str); \"},\"4054\":{\"t\":\"注意：换行的主要目的是为了拥有清晰的代码，总代码的行数 不必 是越少越好的。\"},\"4055\":{\"h\":\"换行缩进至少 +4 个空格\",\"a\":\"换行缩进至少-4-个空格\"},\"4056\":{\"t\":\"进行换行时，第一行（在连续换行的多行代码中）之后的每行代码至少比之前的那行多缩进 +4 个空格。\"},\"4057\":{\"t\":\"当进行连续换行时，代码的缩进可以根据实际需要超过 +4 个空格。一般来说，当且仅当两行代码以平级的语法元素开头时，它们才会拥有相同级别的缩进。\"},\"4058\":{\"t\":\"在 水平对齐 章节中介绍了不建议使用数量不确定的空格来与上一行代码中的某些单词（token）对齐。\"},\"4059\":{\"h\":\"空格\",\"a\":\"空格\"},\"4060\":{\"h\":\"垂直空格\",\"a\":\"垂直空格\"},\"4061\":{\"t\":\"单个空行总是出现在以下情况中：\"},\"4062\":{\"t\":\"类中连续的成员或初始化方法之间，包括：字段、构造方法、方法、内部类、静态初始化代码块、实例初始化代码块。 \"},\"4063\":{\"t\":\"特殊情况：两个连续字段（它们之间没有其它代码）之间的空行是可选的。可以根据实际需要，用空行去创建字段之间的 logical groupings 逻辑分组。\"},\"4064\":{\"t\":\"特殊情况：枚举常量之间的空行在 枚举类 章节中介绍。\"},\"4065\":{\"t\":\"本文档其它章节中所要求的（例如 源文件结构 章节和 Import 语句 章节）\"},\"4066\":{\"t\":\"单个空行也可以出现在任何需要提高代码可读性的地方，例如在将代码组织成一小块逻辑的语句之间。不鼓励也不反对将单个空行出现在类的第一个成员或初始化方法的之前，或者最后一个成员或初始化方法的之后。\"},\"4067\":{\"t\":\"多个连续的空行是允许的，但这不是本文档所要求的（或者是鼓励的）。\"},\"4068\":{\"h\":\"水平空格\",\"a\":\"水平空格\"},\"4069\":{\"t\":\"除了编程语言或者编程规范的要求之外，除了在字面量、注释和 Javadoc 之外，单个 ASCII 空格 仅 在以下位置出现：\"},\"4070\":{\"t\":\"分隔任何的保留关键字，例如 if、for、catch ，与它们之后的开括号 (。\"},\"4071\":{\"t\":\"分隔任何的保留关键字，例如 else、catch，与它之前的右花括号 }。\"},\"4072\":{\"t\":\"任何的左花括号 { 之前，除了以下两种特殊情况：\"},\"4073\":{\"t\":\"@SomeAnnotation({a, b})（没有使用空格）\"},\"4074\":{\"t\":\"String[][] x = {{\\\"foo\\\"}};（ {{ 之间不需要使用空格，请见往下的第 9 条规则）\"},\"4075\":{\"t\":\"任何的二元或三元操作符的两侧。这条规则也适用于以下「类似操作符」的符号：\"},\"4076\":{\"t\":\"类型约束中的 & 符：<T extends Foo & Bar>\"},\"4077\":{\"t\":\"捕获多个异常中的 | 符：catch (FooException | BarException e)\"},\"4078\":{\"t\":\"foreach 语句中的冒号（ : ）\"},\"4079\":{\"t\":\"lambda 表达式中的箭头：(String str) -> str.length()\"},\"4080\":{\"t\":\"但除了：\"},\"4081\":{\"t\":\"方法引用中的两个冒号（ :: ），写法类似于 Object::toString\"},\"4082\":{\"t\":\"点分隔符（ . ），写法类似于 Object.toString()\"},\"4083\":{\"t\":\"在 ,:; 符号或者类型转换的闭括号 ) 之后。\"},\"4084\":{\"t\":\"在任何内容与以双斜线 ( // ) 开头的注释之间，允许存在多个空格。\"},\"4085\":{\"t\":\"在以双斜线 ( // ) 开头的注释符和注释文本之间，允许存在多个空格。\"},\"4086\":{\"t\":\"在类型和变量的定义之间：List<String> list。\"},\"4087\":{\"t\":\"在数组初始化的两个花括号的内侧。这条规则不是必须的。\"},\"4088\":{\"t\":\"new int[] {5, 6} 和 new int[] { 5, 6 } 都是有效的\"},\"4089\":{\"t\":\"在注解和 [] 或 ... 之间。\"},\"4090\":{\"t\":\"这条规则不会被解释为要求或者禁止在行首或者行尾使用额外的空格，它只针对于行内的空格。\"},\"4091\":{\"h\":\"水平对齐：从不要求\",\"a\":\"水平对齐-从不要求\"},\"4092\":{\"t\":\"术语说明：Horizontal alignment 水平对齐 是一种代码的编写方式，其目的是为了使某些单词（token）出现在上一行代码中的另一些单词的正下方，从而在代码中添加若干数量的额外空格的做法。\"},\"4093\":{\"t\":\"这种做法是允许的，但在 Google 编程规范中却不是必须的。甚至不要求在已经水平对齐的地方继续保持水平对齐。\"},\"4094\":{\"t\":\"如下是一个首先未对齐，然后再对齐的例子：\"},\"4095\":{\"t\":\"private int x; // this is fine private Color color; // this too private int x; // permitted, but future edits private Color color; // may leave it unaligned \"},\"4096\":{\"t\":\"提示：水平对齐有助于阅读代码，但却难以日后维护。考虑这样一种情况：日后的改动需要调整一行代码，这个改动可能会破坏原本令人愉悦的代码格式，不过这种改动是 允许 的。（IDE）通常会提示编码人员（也许是你自己）调整附近代码行中的空格，但这可能会触发一系列的代码格式化，于是这个一行代码的改动就导致了一个「范围爆炸」。在最坏的情况下，这可能会导致大量毫无意义的工作。在最好的情况下，这依然会混淆代码版本中的历史信息、降低代码评审的速度、加剧代码合并的冲突。\"},\"4097\":{\"h\":\"分组括号：推荐\",\"a\":\"分组括号-推荐\"},\"4098\":{\"t\":\"只有当开发人员和评审人员都同意，没有分组括号时代码的阅读者不会想当然地错误理解，或者分组括号不会更有助于阅读代码的情况下，才可以省略可选的分组括号。不能假定每个阅读者都能熟记整个 Java 运算符的优先级表，这是不合理的。\"},\"4099\":{\"h\":\"特定结构\",\"a\":\"特定结构\"},\"4100\":{\"h\":\"枚举类\",\"a\":\"枚举类\"},\"4101\":{\"t\":\"每个枚举常量的逗号之后可以选择性地换行，同时也允许添加额外的空行（通常只有一个）。以下是一种可能的例子：\"},\"4102\":{\"t\":\"private enum Answer { YES { @Override public String toString() { return \\\"yes\\\"; } }, NO, MAYBE } \"},\"4103\":{\"t\":\"没有方法和注释的枚举常量可以写成数组初始化的方式（请见 数组初始化 章节）。\"},\"4104\":{\"t\":\"private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS } \"},\"4105\":{\"t\":\"由于枚举类也是类，因此所有对于类的格式化规则也适用于枚举类。\"},\"4106\":{\"h\":\"变量声明\",\"a\":\"变量声明\"},\"4107\":{\"h\":\"每次声明一个变量\",\"a\":\"每次声明一个变量\"},\"4108\":{\"t\":\"每次变量声明（字段或局部变量）只声明一个变量：例如 int a, b; 形式的变量声明是不允许的。\"},\"4109\":{\"t\":\"特殊情况：可以在 for 循环的头部中声明多个变量。\"},\"4110\":{\"h\":\"在需要时声明\",\"a\":\"在需要时声明\"},\"4111\":{\"t\":\"局部变量 不是 习惯性地声明在它们所属的代码块或者块状结构的起始位置。相反地，局部变量声明在它们第一次被使用的地方（在合理范围之内），这样做是为了最小化局部变量的作用域。局部变量声明通常具有初始值，或者会在声明之后立即初始化。\"},\"4112\":{\"h\":\"数组\",\"a\":\"数组\"},\"4113\":{\"h\":\"数组初始化：可以写成块状结构\",\"a\":\"数组初始化-可以写成块状结构\"},\"4114\":{\"t\":\"任何数组的初始化可以选择写成「类似块状结构」的格式。例如，以下例子都是合法的（不全）：\"},\"4115\":{\"t\":\"new int[] { new int[] { 0, 1, 2, 3 0, } 1, 2, new int[] { 3, 0, 1, } 2, 3 } new int[] {0, 1, 2, 3} \"},\"4116\":{\"h\":\"拒绝使用 C 语言式的声明\",\"a\":\"拒绝使用-c-语言式的声明\"},\"4117\":{\"t\":\"方括号是类型而非变量的一部分：String[] args 是合法的，String args[] 是非法的。\"},\"4118\":{\"h\":\"switch 语句\",\"a\":\"switch-语句\"},\"4119\":{\"t\":\"术语说明： switch 语句块的花括号内是一个或多个 statement groups 语句组。每个语句组都包含了一个或多个 switch 标签（ case Foo: 或者 default: ），switch 标签之后跟随着一条或多条语句（或者，对于最后一个语句组，它可以包含零条或多条语句）。\"},\"4120\":{\"h\":\"缩进\",\"a\":\"缩进\"},\"4121\":{\"t\":\"和其它任何语句块一样，switch 语句块中的内容缩进 +2 个空格。\"},\"4122\":{\"t\":\"switch 标签之后会有一个换行，并增加 +2 个缩进级别，就好像是在开始一段新的代码块。之后的 switch 标签返回到上一个缩进级别，好像是结束了一段代码块。\"},\"4123\":{\"h\":\"Fall-through：需要注释\",\"a\":\"fall-through-需要注释\"},\"4124\":{\"t\":\"在 switch 语句块中，每个语句组要么会突然终止（使用 break、continue、return 关键字、或者抛出异常），要么会有注释标记着以指示（程序）将或可能继续执行到下一个语句组。任何可以表达 fall-through 意思的注释都是可行的（例如典型的 // fall through ）。在最后一个语句组中，这个特殊的注释不是必须的。例如：\"},\"4125\":{\"t\":\"switch (input) { case 1: case 2: prepareOneOrTwo(); // fall through case 3: handleOneTwoOrThree(); break; default: handleLargeNumber(input); } \"},\"4126\":{\"t\":\"注意在 case 1: 之后不需要注释，只有在语句组之后才需要使用注释。\"},\"4127\":{\"h\":\"default 分支：需要存在\",\"a\":\"default-分支-需要存在\"},\"4128\":{\"t\":\"每个 switch 语句都包含了一个 default 语句组，即使它不包含任何代码。\"},\"4129\":{\"t\":\"特殊情况：如果 enum 类型的 switch 语句明确包含了覆盖所有可能性的枚举值，那么它可以省略 default 语句组。如果遗漏了任何情况，IDE 和静态分析工具可以发出警告。\"},\"4130\":{\"h\":\"注解\",\"a\":\"注解\"},\"4131\":{\"h\":\"用于类型的注解\",\"a\":\"用于类型的注解\"},\"4132\":{\"t\":\"用于类型的注解出现在被标记的类型之前。当一个注解被元注解 @Target(ElementType.TYPE_USE) 标记时，那么它就是用于类型的注解。例如：\"},\"4133\":{\"t\":\"final @Nullable String name; public @Nullable Person getPersonByName(String name); \"},\"4134\":{\"h\":\"用于类的注解\",\"a\":\"用于类的注解\"},\"4135\":{\"t\":\"用于类的注解出现在文档之后，并且每个注解都列在自己的一行上（即每行一个注解）。这些注解所占用的行不构成换行（请见 换行 章节），因此缩进级别不会增加。例如：\"},\"4136\":{\"t\":\"@Deprecated @Override public String getNameIfPresent() { ... } \"},\"4137\":{\"h\":\"用于方法和构造方法的注解\",\"a\":\"用于方法和构造方法的注解\"},\"4138\":{\"t\":\"用于方法和构造方法的注解的使用规则与 前一章节 相同。例如：\"},\"4139\":{\"t\":\"@Deprecated @Override public String getNameIfPresent() { ... } \"},\"4140\":{\"t\":\"特殊情况：一个单独的没有参数的注解可以和方法签名的第一行一起出现，例如：\"},\"4141\":{\"t\":\"@Override public int hashCode() { ... } \"},\"4142\":{\"h\":\"用于字段的注解\",\"a\":\"用于字段的注解\"},\"4143\":{\"t\":\"用于字段的注解也出现在文档之后，但这种情况下，多个注解（可能会有参数）可以写在同一行上。例如：\"},\"4144\":{\"t\":\"@Partial @Mock DataLoader loader; \"},\"4145\":{\"h\":\"用于参数和局部变量的注解\",\"a\":\"用于参数和局部变量的注解\"},\"4146\":{\"t\":\"用于参数和局部变量的注解没有特定的格式化规则。（当然，如果注解是用于类型的注解，则除外。）\"},\"4147\":{\"h\":\"注释\",\"a\":\"注释\"},\"4148\":{\"t\":\"本章节介绍 implementation comments 实现注释。Javadoc 将在 Javadoc 章节单独介绍。\"},\"4149\":{\"t\":\"任何换行符之前都可以有任意数量的跟随着实现注释的空格。这样的注释使该行成为非空白的。\"},\"4150\":{\"h\":\"注释块样式\",\"a\":\"注释块样式\"},\"4151\":{\"t\":\"注释块与它周围的代码拥有相同的缩进级别。注释块可以是 /* ... */ 样式或 // ... 样式。对于多行注释 /* ... */，后续的行中必须以 * 开头并且与上一行中的 * 保持对齐。\"},\"4152\":{\"t\":\"/* * This is // And so /* Or you can * okay. // is this. * even do this. */ */ \"},\"4153\":{\"t\":\"注释不会被包含在由星号或者其它字符绘制的框中。\"},\"4154\":{\"t\":\"提示：当写多行注释的时候，如果你希望能为了在必要的时候重新包装每行代码而自动格式化（段落样式），那么应使用 /* ... */ 样式。大多数格式化程序不会重新包装 // ... 样式中的注释块。\"},\"4155\":{\"h\":\"修饰符\",\"a\":\"修饰符\"},\"4156\":{\"t\":\"类和成员如果存在修饰符的话，应以 Java 语言规范建议的顺序出现：\"},\"4157\":{\"t\":\"public protected private abstract default static final transient volatile synchronized native strictfp\"},\"4158\":{\"h\":\"数字字面量\",\"a\":\"数字字面量\"},\"4159\":{\"t\":\"long 数值的整数字面量会使用大写的 L 后缀，永远不要使用小写（避免与数字 1 混淆）。例如，使用 3000000000L 而不是 3000000000l。\"},\"4160\":{\"h\":\"命名\",\"a\":\"命名\"},\"4161\":{\"h\":\"适用于所有标识符的通用规则\",\"a\":\"适用于所有标识符的通用规则\"},\"4162\":{\"t\":\"标识符只允许使用 ASCII 字母和数字，并且在少数情况中可以使用下划线。因此，每个有效的标识符都可以由正则表达式 \\\\w+ 匹配。\"},\"4163\":{\"t\":\"在 Google 风格中，不 会使用特殊的前缀或后缀，例如，这些命名不是 Google 风格的：name_、mName、s_name 和 kName。\"},\"4164\":{\"h\":\"各种类型的标识符的规则\",\"a\":\"各种类型的标识符的规则\"},\"4165\":{\"h\":\"包名\",\"a\":\"包名\"},\"4166\":{\"t\":\"包名只使用小写字母和数字（不使用下划线），连续的单词直接拼接在一起。例如，使用 com.example.deepspace，而不是 com.example.deepSpace 或者 com.example.deep_space。\"},\"4167\":{\"h\":\"类名\",\"a\":\"类名\"},\"4168\":{\"t\":\"类名以 大骆峰 方式编写。\"},\"4169\":{\"t\":\"类名通常是名词或者名词短语。例如 Character 或者 ImmutableList。接口名可能也是名词或名词短语（例如 List ），但有时候也可能是形容词或形容词短语（例如 Readable ）。\"},\"4170\":{\"t\":\"注解类型的命名没有特定的规则或者完善的约定。\"},\"4171\":{\"t\":\"测试类的名称以 Test 结尾，例如 HashIntegrationTest。如果它覆盖了一整个类，则它的名称是该类的名称加上 Test，例如 HashImplTest。\"},\"4172\":{\"h\":\"方法名\",\"a\":\"方法名\"},\"4173\":{\"t\":\"方法名以 小骆峰 方式编写。\"},\"4174\":{\"t\":\"方法名通常是动词或者动词短语。例如 sendMessage 或者 stop。\"},\"4175\":{\"t\":\"下划线可以出现在 JUnit 测试方法名中，用于分隔命名上的逻辑组件，每个组件都以 小骆峰 方式编写，例如 transferMoney_deductsFromSource。测试方法的命名没有一种唯一正确的方式。\"},\"4176\":{\"h\":\"常量名\",\"a\":\"常量名\"},\"4177\":{\"t\":\"常量使用 UPPER_SNAKE_CASE 的格式命名：全大写，单词之间以下划线分隔。但常量究竟意味着什么？\"},\"4178\":{\"t\":\"常量是 static final 修饰的字段，常量的内容是深不可变的（deeply immutable)，并且常量的方法是没有副作用的。以下示例包括了原始类型、字符串、不可变的值类型，和任何可以设置为 null 的内容。如果实例的任何外在状态是可变的，那它就不属于常量。仅仅保证实例引用的不可变属性是不够的。例如：\"},\"4179\":{\"t\":\"// Constants static final int NUMBER = 5; static final ImmutableList<String> NAMES = ImmutableList.of(\\\"Ed\\\", \\\"Ann\\\"); static final Map<String, Integer> AGES = ImmutableMap.of(\\\"Ed\\\", 35, \\\"Ann\\\", 32); static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutable static final SomeMutableType[] EMPTY_ARRAY = {}; // Not constants static String nonFinal = \\\"non-final\\\"; final String nonStatic = \\\"non-static\\\"; static final Set<String> mutableCollection = new HashSet<String>(); static final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable); static final ImmutableMap<String, SomeMutableType> mutableValues = ImmutableMap.of(\\\"Ed\\\", mutableInstance, \\\"Ann\\\", mutableInstance2); static final Logger logger = Logger.getLogger(MyClass.getName()); static final String[] nonEmptyArray = {\\\"these\\\", \\\"can\\\", \\\"change\\\"}; \"},\"4180\":{\"t\":\"常量名通常是名词或者名词短语。\"},\"4181\":{\"h\":\"非常量字段名\",\"a\":\"非常量字段名\"},\"4182\":{\"t\":\"非常量字段名（静态或者其它形式）以 小骆峰 方式编写。\"},\"4183\":{\"t\":\"非常量字段名通常是名词或者名词短语。例如：computedValues 或者 index。\"},\"4184\":{\"h\":\"参数名\",\"a\":\"参数名\"},\"4185\":{\"t\":\"参数名以 小骆峰 方式编写。\"},\"4186\":{\"t\":\"public 方法中应该避免使用一个字符的参数名。\"},\"4187\":{\"h\":\"局部变量名\",\"a\":\"局部变量名\"},\"4188\":{\"t\":\"局部变量名以 小骆峰 方式编写。\"},\"4189\":{\"t\":\"即使是 final 和不可变的，局部变量也不被认为是常量，并且不应该以常量的风格命名。\"},\"4190\":{\"h\":\"类型变量名\",\"a\":\"类型变量名\"},\"4191\":{\"t\":\"类型变量名以如下两者之一方式编写：\"},\"4192\":{\"t\":\"一个大写字母，可选地跟随着一个数字（例如 E，T，X，T2 ）。\"},\"4193\":{\"t\":\"以类名的方式命名（请见 类名 章节），跟随着大写字母 T（例如：RequestT，FooBarT ）。\"},\"4194\":{\"h\":\"骆驼峰形式：定义\",\"a\":\"骆驼峰形式-定义\"},\"4195\":{\"t\":\"有时候会有多种合理的方式用于将英语短语转换为驼峰形式，例如当英语短语里出现首字母缩略词或者不寻常结构的单词（例如「iOS」和「IPv6」）时。为了提高代码的可预测性， Google 编程风格指定了以下（近乎）明确的方案。\"},\"4196\":{\"t\":\"从命名的文字构成开始：\"},\"4197\":{\"t\":\"将短语转换为纯 ASCII 编码，并且删除任何的撇号。例如，「Müller's algorithm」可以转换为「Muellers algorithm」。\"},\"4198\":{\"t\":\"以空格和任何剩余的标点符号（通常是连字符），将短语划分为单词。 \"},\"4199\":{\"t\":\"推荐：如果任何单词在普遍用法中已经具有常规的驼峰形式，那就将它分解成它的组成部分（例如，将「AdWords」变成「ad words」）。注意例如「iOS」之类的单词本身并不是驼峰形式。它违反了一些约定，因此这条规则并不适用。\"},\"4200\":{\"t\":\"现在将所有内容转换为小写（包括首字母缩略词），然后只将以下内容的第一个字符转换为大写： \"},\"4201\":{\"t\":\"... 每个单词，用于产生大驼峰形式，或者\"},\"4202\":{\"t\":\"... 除了第一个以外的每个单词，用于产生小驼峰形式\"},\"4203\":{\"t\":\"最后，将所有单词合并为一个标识符。\"},\"4204\":{\"t\":\"注意，原始单词的大小写几乎完全被忽略。例如：\"},\"4205\":{\"t\":\"Prose form\"},\"4206\":{\"t\":\"Correct\"},\"4207\":{\"t\":\"Incorrect\"},\"4208\":{\"t\":\"\\\"XML HTTP request\\\"\"},\"4209\":{\"t\":\"XmlHttpRequest\"},\"4210\":{\"t\":\"XMLHTTPRequest\"},\"4211\":{\"t\":\"\\\"new customer ID\\\"\"},\"4212\":{\"t\":\"newCustomerId\"},\"4213\":{\"t\":\"newCustomerID\"},\"4214\":{\"t\":\"\\\"inner stopwatch\\\"\"},\"4215\":{\"t\":\"innerStopwatch\"},\"4216\":{\"t\":\"innerStopWatch\"},\"4217\":{\"t\":\"\\\"supports IPv6 on iOS?\\\"\"},\"4218\":{\"t\":\"supportsIpv6OnIos\"},\"4219\":{\"t\":\"supportsIPv6OnIOS\"},\"4220\":{\"t\":\"\\\"YouTube importer\\\"\"},\"4221\":{\"t\":\"YouTubeImporterYoutubeImporter*\"},\"4222\":{\"t\":\"* 表示可以接受，但不推荐的。\"},\"4223\":{\"t\":\"注意：一些带连字符的单词在英语中含糊不清的：例如「nonempty」和「non-empty」都是正确的，所以方法名 checkNonempty 和 checkNonEmpty 也都是正确的。\"},\"4224\":{\"h\":\"编程实践\",\"a\":\"编程实践\"},\"4225\":{\"h\":\"@Override ：总是使用\",\"a\":\"override-总是使用\"},\"4226\":{\"t\":\"只要是合法的，方法总会被标记 @Override 注解。这包括了一个类的方法重写了父类的方法、一个类的方法实现了接口的方法、一个接口的方法重新定义了父接口的方法。\"},\"4227\":{\"t\":\"特殊情况：当父类方法是 @Deprecated 的时候，@Override 可以省略。\"},\"4228\":{\"h\":\"捕获异常：不能忽略\",\"a\":\"捕获异常-不能忽略\"},\"4229\":{\"t\":\"除非另有说明，对捕获的异常不做任何响应是很少正确的。（典型的响应是打印日志，或者如果打印日志是「不可能」的，就重新抛出一个作为 AssertionError 的异常。）\"},\"4230\":{\"t\":\"当对 catch 语句块中的任何内容不做处理确实是合适的时候，应该在注释中说明正当的理由。\"},\"4231\":{\"t\":\"try { int i = Integer.parseInt(response); return handleNumericResponse(i); } catch (NumberFormatException ok) { // it's not numeric; that's fine, just continue } return handleTextResponse(response); \"},\"4232\":{\"t\":\"特殊情况：在测试代码中，如果捕获的异常名称是 expected 或者以此为开头，那么它可以不加注释地被忽略。以下是一个很常见的惯用语法，用于确认被测试的代码确实抛出了预期类型的异常，所以此处的注释是不必要的。\"},\"4233\":{\"t\":\"try { emptyStack.pop(); fail(); } catch (NoSuchElementException expected) { } \"},\"4234\":{\"h\":\"静态成员：限定使用类\",\"a\":\"静态成员-限定使用类\"},\"4235\":{\"t\":\"当对静态类的成员的引用必须是有所限定的时候，那它是以该类的名称作为限定，而不是该类的类型的引用或者表达式。\"},\"4236\":{\"t\":\"Foo aFoo = ...; Foo.aStaticMethod(); // good aFoo.aStaticMethod(); // bad somethingThatYieldsAFoo().aStaticMethod(); // very bad \"},\"4237\":{\"h\":\"Finalizers：禁用\",\"a\":\"finalizers-禁用\"},\"4238\":{\"t\":\"重写 Object.finalize 方法是 非常罕见 的。\"},\"4239\":{\"t\":\"提示：禁止这么做。如果你真的需要，请先仔细阅读和理解 《Effective Java》第七章 —— 避免使用 Finalizer 和 Cleaner，然后禁止这么做。\"},\"4240\":{\"h\":\"Javadoc\",\"a\":\"javadoc\"},\"4241\":{\"h\":\"格式化\",\"a\":\"格式化-1\"},\"4242\":{\"h\":\"一般形式\",\"a\":\"一般形式\"},\"4243\":{\"t\":\"Javadoc 语句块的基本格式如这个例子所示：\"},\"4244\":{\"t\":\"/** * Multiple lines of Javadoc text are written here, * wrapped normally... */ public int method(String p1) { ... } \"},\"4245\":{\"t\":\"... 或者如这个单行例子所示：\"},\"4246\":{\"t\":\"/** An especially short bit of Javadoc. */ \"},\"4247\":{\"t\":\"基本格式总是可以接受的。当整个 Javadoc 语句块（包括注释标记）可以写在一行的时候，单行格式可以被替换。注意这仅适用于没有类似于 @return 之类块标签的情况。\"},\"4248\":{\"h\":\"段落\",\"a\":\"段落\"},\"4249\":{\"t\":\"一个空行 -- 这意味着，仅包含用于对齐的前导星号（*）的行 -- 会出现在段落之间，和块标签组（如果有的话）之前。除了第一个以外的每个段落，在第一个单词之前有一个 <p> 标签，标签与单词之间没有空格。其它块级元素的 HTML 标签，例如 <ul> 或 <table>，不需要在前面加 <p>。\"},\"4250\":{\"h\":\"块标签\",\"a\":\"块标签\"},\"4251\":{\"t\":\"使用到的任何标准「块标签」按以下的顺序出现 @param、@return、@throws、@deprecated，并且这四种类型的块标签不会与空的描述一起出现。当块标签不能写在一行的时候，后续的行从 @ 的位置缩进四个（或者更多）空格。\"},\"4252\":{\"h\":\"摘要片段\",\"a\":\"摘要片段\"},\"4253\":{\"t\":\"每个 Javadoc 语句块以一个简短的 摘要片段 开头。这个片段非常重要：它是在某些情况下唯一可以出现的文本，例如在类和方法的索引中。\"},\"4254\":{\"t\":\"这是一个片段 -- 是名词短语或者动词短语，而不是一个完整的句子。它 不 以 A {@code Foo} is a... 或者 This method returns... 开头，也不会形成例如 Save the record. 这样的祈使句。然而，这个片段是用大写字母书写的并且会有标签符号，就好像它是个完整的句子。\"},\"4255\":{\"t\":\"提示：一个常见的错误是用以下形式编写简单的 Javadoc /** @return the customer ID */。这是不正确的，并且应该被修正为 /** Returns the customer ID. */。\"},\"4256\":{\"h\":\"在何处使用 Javadoc\",\"a\":\"在何处使用-javadoc\"},\"4257\":{\"t\":\"至少，Javadoc 应该出现在每个 public 类，和这个类的每个 public 或者 protected 成员，但除了以下提及的几个例外。\"},\"4258\":{\"t\":\"额外的 Javadoc 内容也可以出现，正如在 非必需的 Javadoc 章节中所描述的。\"},\"4259\":{\"h\":\"特殊情况：自解释的成员\",\"a\":\"特殊情况-自解释的成员\"},\"4260\":{\"t\":\"对于类似 getFoo 之类的「简单、明显」的成员，Javadoc 是可选的，在这种情况下，除了「Returns the foo」也确实真的没什么值得好说了。\"},\"4261\":{\"t\":\"重要：引用这个特殊情况来证明省略典型的阅读者可能需要知道的相关信息是不合适的。例如，对于名为 getCanonicalName 的方法，一个典型的阅读者可能不知道术语「canonical name」是什么意思，所以不要省略它的文档（以它只会说 /** Returns the canonical name. */ 的理由）。\"},\"4262\":{\"h\":\"特殊情况：重写\",\"a\":\"特殊情况-重写\"},\"4263\":{\"t\":\"Javadoc 不会总是出现在一个重写了父类方法的方法中。\"},\"4264\":{\"h\":\"非必需的 Javadoc\",\"a\":\"非必需的-javadoc\"},\"4265\":{\"t\":\"其它的类和成员根据实际需要或者期望来编写 Javadoc。\"},\"4266\":{\"t\":\"每当使用实现注释来定义一个类或者成员的总体目的或者行为的时候，这个注释改为用 Javadoc 来编写（使用 /** ）。\"},\"4267\":{\"t\":\"非必需的 Javadoc 内容不是严格要求遵守 一般形式 章节、段落 章节、块标签 章节以及 摘要片段 章节的格式化规则，尽管这当然是推荐的。\"},\"4268\":{\"h\":\"统一命名规范详解\"},\"4269\":{\"h\":\"静态样式检查详解\"},\"4270\":{\"h\":\"统一代码格式化详解\"},\"4271\":{\"h\":\"Sonarlint插件详解\"},\"4272\":{\"h\":\"IDEA下单元测试详解\"},\"4273\":{\"h\":\"JUnit4 详解\"},\"4274\":{\"t\":\"JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。\"},\"4275\":{\"h\":\"什么是JUnit？\",\"a\":\"什么是junit\"},\"4276\":{\"t\":\"JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。\"},\"4277\":{\"h\":\"JUnit特点？\",\"a\":\"junit特点\"},\"4278\":{\"t\":\"JUnit 是一个开放的资源框架，用于编写和运行测试。\"},\"4279\":{\"t\":\"提供注解来识别测试方法。\"},\"4280\":{\"t\":\"提供断言来测试预期结果。\"},\"4281\":{\"t\":\"JUnit 测试允许你编写代码更快，并能提高质量。\"},\"4282\":{\"t\":\"JUnit 优雅简洁。没那么复杂，花费时间较少。\"},\"4283\":{\"t\":\"JUnit测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。\"},\"4284\":{\"t\":\"JUnit测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。\"},\"4285\":{\"t\":\"JUnit在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。\"},\"4286\":{\"h\":\"官方资料\",\"a\":\"官方资料\"},\"4287\":{\"t\":\"最好的资料依然在Junit官方网站，以下我帮你总结下Junit相关的官方网址。\"},\"4288\":{\"t\":\"官网地址\"},\"4289\":{\"t\":\"官方入门文档\"},\"4290\":{\"t\":\"官方github\"},\"4291\":{\"h\":\"常用注解\",\"a\":\"常用注解\"},\"4292\":{\"t\":\"@Test\"},\"4293\":{\"t\":\"在junit3中，是通过对测试类和测试方法的命名来确定是否是测试，且所有的测试类必须继承junit的测试基类。在junit4中，定义一个测试方法变得简单很多，只需要在方法前加上@Test就行了。\"},\"4294\":{\"t\":\"注意：测试方法必须是public void，即公共、无返回数据。可以抛出异常。\"},\"4295\":{\"t\":\"@Ignore\"},\"4296\":{\"t\":\"有时候我们想暂时不运行某些测试方法\\\\测试类，可以在方法前加上这个注解。在运行结果中，junit会统计忽略的用例数，来提醒你。但是不建议经常这么做，因为这样的坏处时，容易忘记去更新这些测试方法，导致代码不够干净，用例遗漏。使用此标注的时候不能与其它标注一起使用，如：和@Test 标注一起使用，那就没用了\"},\"4297\":{\"t\":\"@BeforeClass\"},\"4298\":{\"t\":\"当我们运行几个有关联的用例时，可能会在数据准备或其它前期准备中执行一些相同的命令，这个时候为了让代码更清晰，更少冗余，可以将公用的部分提取出来，放在一个方法里，并为这个方法注解@BeforeClass。意思是在测试类里所有用例运行之前，运行一次这个方法。例如创建数据库连接、读取文件等。\"},\"4299\":{\"t\":\"注意：方法名可以任意，但必须是public static void，即公开、静态、无返回。这个方法只会运行一次。\"},\"4300\":{\"t\":\"@AfterClass\"},\"4301\":{\"t\":\"跟@BeforeClass对应，在测试类里所有用例运行之后，运行一次。用于处理一些测试后续工作，例如清理数据，恢复现场。\"},\"4302\":{\"t\":\"注意：同样必须是public static void，即公开、静态、无返回。这个方法只会运行一次。\"},\"4303\":{\"t\":\"@Before\"},\"4304\":{\"t\":\"与@BeforeClass的区别在于，@Before不止运行一次，它会在每个用例运行之前都运行一次。主要用于一些独立于用例之间的准备工作。\"},\"4305\":{\"t\":\"比如两个用例都需要读取数据库里的用户A信息，但第一个用例会删除这个用户A，而第二个用例需要修改用户A。那么可以用@BeforeClass创建数据库连接。用@Before来插入一条用户A信息。\"},\"4306\":{\"t\":\"注意：必须是public void，不能为static。不止运行一次，根据用例数而定。\"},\"4307\":{\"t\":\"@After：与@Before对应。\"},\"4308\":{\"t\":\"@Runwith\"},\"4309\":{\"t\":\"首先要分清几个概念：测试方法、测试类、测试集、测试运行器。\"},\"4310\":{\"t\":\"其中测试方法就是用@Test注解的一些函数。\"},\"4311\":{\"t\":\"测试类是包含一个或多个测试方法的一个Test.java文件。\"},\"4312\":{\"t\":\"测试集是一个suite，可能包含多个测试类。\"},\"4313\":{\"t\":\"测试运行器则决定了用什么方式偏好去运行这些测试集/类/方法。\"},\"4314\":{\"t\":\"而@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。常见的运行器有： \"},\"4315\":{\"t\":\"@RunWith(Parameterized.class) 参数化运行器，配合@Parameters使用junit的参数化功能\"},\"4316\":{\"t\":\"@RunWith(Suite.class) @SuiteClasses({ATest.class,BTest.class,CTest.class})测试集运行器配合使用测试集功能\"},\"4317\":{\"t\":\"@RunWith(JUnit4.class) junit4的默认运行器\"},\"4318\":{\"t\":\"@RunWith(JUnit38ClassRunner.class) 用于兼容junit3.8的运行器\"},\"4319\":{\"t\":\"一些其它运行器具备更多功能。例如@RunWith(SpringJUnit4ClassRunner.class)集成了spring的一些功能\"},\"4320\":{\"t\":\"@Parameters： 用于使用参数化功能。\"},\"4321\":{\"h\":\"编写单元测试\",\"a\":\"编写单元测试\"},\"4322\":{\"t\":\"接下来，我们开始学习JUnit4单元测试实例:\"},\"4323\":{\"h\":\"Maven包引入\",\"a\":\"maven包引入\"},\"4324\":{\"t\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>org.example</groupId> <artifactId>java-junit4</artifactId> <version>1.0-SNAPSHOT</version> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <configuration> <source>8</source> <target>8</target> </configuration> </plugin> </plugins> </build> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> </dependencies> </project> \"},\"4325\":{\"h\":\"测试:Hello World\",\"a\":\"测试-hello-world\"},\"4326\":{\"t\":\"package tech.pdai.junit4; import org.junit.Test; import static org.junit.Assert.assertEquals; /** * Hello world test. * * @author pdai */ public class HelloWorldTest { @Test public void firstTest() { assertEquals(2, 1 + 1); } } \"},\"4327\":{\"t\":\"执行结果 @Test注解在方法上标记方法为测试方法，以便构建工具和 IDE 能够识别并执行它们。JUnit 4 需要测试方法为public，这和Junit 5 有差别。\"},\"4328\":{\"h\":\"测试:生命周期\",\"a\":\"测试-生命周期\"},\"4329\":{\"t\":\"@BeforeClass注解修饰的方法(该方法要用static修饰)会在所有方法运行前被执行，且只执行一次，通常用来为后面测试方法的准备工作，如加载配置、进行数据库的连接等。父类的@BeforeClass注解方法会在子类的@BeforeClass注解方法执行前执行。\"},\"4330\":{\"t\":\"@Before注解修饰的方法会在每个测试方法执行前执行一次,父类@Before修饰的方法会在子类@Before修饰的方法执行前 执行\"},\"4331\":{\"t\":\"@After注解修饰的方法会在每个测试方法执行后执行一次,父类@After修饰的方法会在子类@After修饰的方法执行后执行。\"},\"4332\":{\"t\":\"@AfterClass注解修饰的方法(该方法要用static修饰)会在所有方法执行结束后执行一次，且也只执行一次，通常用来对资源进行释放，比如数据库连接的关闭等，无论测试用例里的其他方法有没有抛出异常，该方法最终都会被执行。而且父类中的被@AfterClass注解方法修饰的方法会在子类的@AfterClass注解修饰的方法执行之后才会被执行。\"},\"4333\":{\"t\":\"package tech.pdai.junit4; import org.junit.*; /** * Standard Test. */ public class StandardTest { @BeforeClass public static void beforeClass() { System.out.println(\\\"in before class\\\"); } @AfterClass public static void afterClass() { System.out.println(\\\"in after class\\\"); } @Before public void before() { System.out.println(\\\"in before\\\"); } @After public void after() { System.out.println(\\\"in after\\\"); } @Test public void testCase1() { System.out.println(\\\"in test case 1\\\"); } @Test public void testCase2() { System.out.println(\\\"in test case 2\\\"); } } \"},\"4334\":{\"t\":\"执行结果\"},\"4335\":{\"h\":\"测试:禁用测试\",\"a\":\"测试-禁用测试\"},\"4336\":{\"t\":\"@Ignore：暂不执行该方法；\"},\"4337\":{\"t\":\"package tech.pdai.junit4; import org.junit.Ignore; import org.junit.Test; /** * Ignore Test. */ public class IgnoreTest { /** * ignore. */ @Ignore @Test public void ignoreTest(){ System.out.println(\\\"ignore test\\\"); } } \"},\"4338\":{\"t\":\"执行结果\"},\"4339\":{\"h\":\"测试:断言测试\",\"a\":\"测试-断言测试\"},\"4340\":{\"t\":\"断言测试注解有哪些\"},\"4341\":{\"t\":\"断言\"},\"4342\":{\"t\":\"描述\"},\"4343\":{\"t\":\"void assertEquals([String message],expected value,actual value)\"},\"4344\":{\"t\":\"断言两个值相等。值类型可能是int，short，long，byte，char，Object，第一个参数是一个可选字符串消息\"},\"4345\":{\"t\":\"void assertTrue([String message],boolean condition)\"},\"4346\":{\"t\":\"断言一个条件为真\"},\"4347\":{\"t\":\"void assertFalse([String message],boolean condition)\"},\"4348\":{\"t\":\"断言一个条件为假\"},\"4349\":{\"t\":\"void assertNotNull([String message],java.lang.Object object)\"},\"4350\":{\"t\":\"断言一个对象不为空（null）\"},\"4351\":{\"t\":\"void assertNull([String message],java.lang.Object object)\"},\"4352\":{\"t\":\"断言一个对象为空（null）\"},\"4353\":{\"t\":\"void assertSame([String message],java.lang.Object expected,java.lang.Object actual)\"},\"4354\":{\"t\":\"断言两个对象引用相同的对象\"},\"4355\":{\"t\":\"void assertNotSame([String message],java.lang.Object unexpected,java.lang.Object actual)\"},\"4356\":{\"t\":\"断言两个对象不是引用同一个对象\"},\"4357\":{\"t\":\"void assertArrayEquals([String message],expectedArray,resultArray)\"},\"4358\":{\"t\":\"断言预期数组和结果数组相等，数组类型可能是int，short，long，byte，char，Object\"},\"4359\":{\"t\":\"简单测试\"},\"4360\":{\"t\":\"package tech.pdai.junit4; import org.junit.Assert; import org.junit.Test; /** * Assertion Test. */ public class AssertionTest { @Test public void test() { String obj1 = \\\"junit\\\"; String obj2 = \\\"junit\\\"; String obj3 = \\\"test\\\"; String obj4 = \\\"test\\\"; String obj5 = null; int var1 = 1; int var2 = 2; int[] array1 = {1, 2, 3}; int[] array2 = {1, 2, 3}; Assert.assertEquals(obj1, obj2); Assert.assertSame(obj3, obj4); Assert.assertNotSame(obj2, obj4); Assert.assertNotNull(obj1); Assert.assertNull(obj5); Assert.assertTrue(var1 < var2); Assert.assertFalse(var1 > var2); Assert.assertArrayEquals(array1, array2); } } \"},\"4361\":{\"t\":\"在以上类中我们可以看到，这些断言方法是可以工作的。\"},\"4362\":{\"t\":\"assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。\"},\"4363\":{\"t\":\"assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。\"},\"4364\":{\"t\":\"assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。\"},\"4365\":{\"t\":\"assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。\"},\"4366\":{\"t\":\"assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。\"},\"4367\":{\"t\":\"更多测试，来自官网https://github.com/junit-team/junit4/wiki/Assertions\"},\"4368\":{\"t\":\"package tech.pdai.junit4; import org.hamcrest.core.CombinableMatcher; import org.junit.Test; import java.util.Arrays; import static org.hamcrest.CoreMatchers.*; import static org.junit.Assert.*; /** * More Assertion Test from Junit-Team. */ public class Assertion2Test { @Test public void testAssertArrayEquals() { byte[] expected = \\\"trial\\\".getBytes(); byte[] actual = \\\"trial\\\".getBytes(); assertArrayEquals(\\\"failure - byte arrays not same\\\", expected, actual); } @Test public void testAssertEquals() { assertEquals(\\\"failure - strings are not equal\\\", \\\"text\\\", \\\"text\\\"); } @Test public void testAssertFalse() { assertFalse(\\\"failure - should be false\\\", false); } @Test public void testAssertNotNull() { assertNotNull(\\\"should not be null\\\", new Object()); } @Test public void testAssertNotSame() { assertNotSame(\\\"should not be same Object\\\", new Object(), new Object()); } @Test public void testAssertNull() { assertNull(\\\"should be null\\\", null); } @Test public void testAssertSame() { Integer aNumber = Integer.valueOf(768); assertSame(\\\"should be same\\\", aNumber, aNumber); } // JUnit Matchers assertThat @Test public void testAssertThatBothContainsString() { assertThat(\\\"albumen\\\", both(containsString(\\\"a\\\")).and(containsString(\\\"b\\\"))); } @Test public void testAssertThatHasItems() { assertThat(Arrays.asList(\\\"one\\\", \\\"two\\\", \\\"three\\\"), hasItems(\\\"one\\\", \\\"three\\\")); } @Test public void testAssertThatEveryItemContainsString() { assertThat(Arrays.asList(new String[]{\\\"fun\\\", \\\"ban\\\", \\\"net\\\"}), everyItem(containsString(\\\"n\\\"))); } // Core Hamcrest Matchers with assertThat @Test public void testAssertThatHamcrestCoreMatchers() { assertThat(\\\"good\\\", allOf(equalTo(\\\"good\\\"), startsWith(\\\"good\\\"))); assertThat(\\\"good\\\", not(allOf(equalTo(\\\"bad\\\"), equalTo(\\\"good\\\")))); assertThat(\\\"good\\\", anyOf(equalTo(\\\"bad\\\"), equalTo(\\\"good\\\"))); assertThat(7, not(CombinableMatcher.<Integer>either(equalTo(3)).or(equalTo(4)))); assertThat(new Object(), not(sameInstance(new Object()))); } @Test public void testAssertTrue() { assertTrue(\\\"failure - should be true\\\", true); } } \"},\"4369\":{\"t\":\"执行结果\"},\"4370\":{\"h\":\"测试:异常测试\",\"a\":\"测试-异常测试\"},\"4371\":{\"t\":\"Junit 用代码处理提供了一个追踪异常的选项。你可以测试代码是否它抛出了想要得到的异常。expected 参数和 @Test 注释一起使用。现在让我们看看 @Test(expected):\"},\"4372\":{\"t\":\"package tech.pdai.junit4; import org.junit.Test; /** * Exception Test. */ public class ExceptionTest { @Test(expected = ArithmeticException.class) public void exceptionTest() { System.out.println(\\\"in exception success test\\\"); int a = 0; int b = 1 / a; } @Test(expected = NullPointerException.class) public void exceptionFailTest() { System.out.println(\\\"in exception fail test\\\"); int a = 0; int b = 1 / a; } } \"},\"4373\":{\"t\":\"执行结果 观察错误的信息：\"},\"4374\":{\"t\":\"in exception success test in exception fail test java.lang.Exception: Unexpected exception, expected<java.lang.NullPointerException> but was<java.lang.ArithmeticException> at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) Caused by: java.lang.ArithmeticException: / by zero at tech.pdai.junit4.ExceptionTest.exceptionFailTest(ExceptionTest.java:21) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19) ... 14 more \"},\"4375\":{\"h\":\"测试:时间测试\",\"a\":\"测试-时间测试\"},\"4376\":{\"t\":\"JUnit提供了一个暂停的方便选项，如果一个测试用例比起指定的毫秒数花费了更多的时间，那么JUnit将自动将它标记为失败，timeout参数和@Test注解一起使用，例如@Test(timeout=1000)。\"},\"4377\":{\"t\":\"简单例子\"},\"4378\":{\"t\":\"package tech.pdai.junit4; import org.junit.Test; import java.util.concurrent.TimeUnit; /** * Timeout Test. */ public class TimeoutTest { @Test(timeout = 1000) public void testCase1() throws InterruptedException { TimeUnit.SECONDS.sleep(5000); System.out.println(\\\"in timeout exception\\\"); } } \"},\"4379\":{\"t\":\"执行结果 观察错误的信息：\"},\"4380\":{\"t\":\"org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds at java.lang.Thread.sleep(Native Method) at java.lang.Thread.sleep(Thread.java:340) at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386) at tech.pdai.junit4.TimeoutTest.testCase1(TimeoutTest.java:14) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298) at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.lang.Thread.run(Thread.java:748) \"},\"4381\":{\"t\":\"超时规则\"},\"4382\":{\"t\":\"应用到测试类的所有测试用例\"},\"4383\":{\"t\":\"package tech.pdai.junit4; import org.junit.Rule; import org.junit.Test; import org.junit.rules.Timeout; import java.util.concurrent.CountDownLatch; import java.util.concurrent.TimeUnit; /** * Timeout Rule. */ public class HasGlobalTimeoutTest { public static String log; private final CountDownLatch latch = new CountDownLatch(1); @Rule public Timeout globalTimeout = Timeout.seconds(10); // 10 seconds max per method tested @Test public void testSleepForTooLong() throws Exception { log += \\\"ran1\\\"; TimeUnit.SECONDS.sleep(100); // sleep for 100 seconds } @Test public void testBlockForever() throws Exception { log += \\\"ran2\\\"; latch.await(); // will block } } \"},\"4384\":{\"t\":\"执行结果\"},\"4385\":{\"h\":\"测试:参数化测试\",\"a\":\"测试-参数化测试\"},\"4386\":{\"t\":\"Junit 4 引入了一个新的功能参数化测试。参数化测试允许开发人员使用不同的值反复运行同 一个测试。你将遵循 5 个步骤来创建参数化测试：\"},\"4387\":{\"t\":\"为准备使用参数化测试的测试类指定特殊的运行器 org.junit.runners.Parameterized。\"},\"4388\":{\"t\":\"为测试类声明几个变量，分别用于存放期望值和测试所用数据。\"},\"4389\":{\"t\":\"为测试类声明一个带有参数的公共构造函数，并在其中为第二个环节中声明的几个变量赋值。\"},\"4390\":{\"t\":\"为测试类声明一个使用注解 org.junit.runners.Parameterized.Parameters 修饰的，返回值为 java.util.Collection 的公共静态方法，并在此方法中初始化所有需要测试的参数对。\"},\"4391\":{\"t\":\"编写测试方法，使用定义的变量作为参数进行测试。\"},\"4392\":{\"t\":\"什么是@RunWith?\"},\"4393\":{\"t\":\"首先要分清几个概念：测试方法、测试类、测试集、测试运行器。\"},\"4394\":{\"t\":\"其中测试方法就是用@Test注解的一些函数。\"},\"4395\":{\"t\":\"测试类是包含一个或多个测试方法的一个**Test.java文件，\"},\"4396\":{\"t\":\"测试集是一个suite，可能包含多个测试类。\"},\"4397\":{\"t\":\"测试运行器则决定了用什么方式偏好去运行这些测试集/类/方法。\"},\"4398\":{\"t\":\"而@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。常见的运行器有：\"},\"4399\":{\"t\":\"@RunWith(Parameterized.class) 参数化运行器，配合@Parameters使用JUnit的参数化功能\"},\"4400\":{\"t\":\"@RunWith(Suite.class) @SuiteClasses({ATest.class,BTest.class,CTest.class}) 测试集运行器配合使用测试集功能\"},\"4401\":{\"t\":\"@RunWith(JUnit4.class)， junit4的默认运行器\"},\"4402\":{\"t\":\"@RunWith(JUnit38ClassRunner.class)，用于兼容junit3.8的运行器 一些其它运行器具备更多功能。例如@RunWith(SpringJUnit4ClassRunner.class)集成了spring的一些功能\"},\"4403\":{\"t\":\"测试例子\"},\"4404\":{\"t\":\"待测试类\"},\"4405\":{\"t\":\"package tech.pdai.junit4; /** * PrimeNumberChecker. */ public class PrimeNumberChecker { public Boolean validate(final Integer parimeNumber) { for (int i = 2; i < (parimeNumber / 2); i++) { if (parimeNumber % i == 0) { return false; } } return true; } } \"},\"4406\":{\"t\":\"测试类\"},\"4407\":{\"t\":\"package tech.pdai.junit4; import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.Parameterized; import java.util.Arrays; import java.util.Collection; /** * Parameterized Test. */ @RunWith(Parameterized.class) // 步骤一: 指定定参数运行器 public class PrimeNumberCheckerTest { /** * 步骤二：声明变量 */ private Integer inputNumber; private Boolean expectedResult; private PrimeNumberChecker primeNumberChecker; /** * 步骤三：为测试类声明一个带有参数的公共构造函数，为变量赋值 */ public PrimeNumberCheckerTest(Integer inputNumber, Boolean expectedResult) { this.inputNumber = inputNumber; this.expectedResult = expectedResult; } /** * 步骤四：为测试类声明一个使用注解 org.junit.runners.Parameterized.Parameters 修饰的，返回值为 * java.util.Collection 的公共静态方法，并在此方法中初始化所有需要测试的参数对 * 1）该方法必须由Parameters注解修饰 * 2）该方法必须为public static的 * 3）该方法必须返回Collection类型 * 4）该方法的名字不做要求 * 5）该方法没有参数 */ @Parameterized.Parameters public static Collection primeNumbers() { return Arrays.asList(new Object[][]{ {2, true}, {6, false}, {19, true}, {22, false}, {23, true} }); } @Before public void initialize() { primeNumberChecker = new PrimeNumberChecker(); } /** * 步骤五：编写测试方法，使用自定义变量进行测试 */ @Test public void testPrimeNumberChecker() { System.out.println(\\\"Parameterized Number is : \\\" + inputNumber); Assert.assertEquals(expectedResult, primeNumberChecker.validate(inputNumber)); } } \"},\"4408\":{\"t\":\"执行结果\"},\"4409\":{\"h\":\"测试:套件测试\",\"a\":\"测试-套件测试\"},\"4410\":{\"t\":\"“套件测试”是指捆绑了几个单元测试用例并运行起来。在JUnit中，@RunWith 和 @Suite 这两个注解是用来运行套件测试。先来创建几个测试类 测试类1\"},\"4411\":{\"t\":\"package tech.pdai.junit4.testsuite; import org.junit.Test; public class JunitTest1 { @Test public void printMessage(){ System.out.println(\\\"in JunitTest1\\\"); } } \"},\"4412\":{\"t\":\"测试类2\"},\"4413\":{\"t\":\"package tech.pdai.junit4.testsuite; import org.junit.Test; public class JunitTest2 { @Test public void printMessage(){ System.out.println(\\\"in JunitTest2\\\"); } } \"},\"4414\":{\"t\":\"测试套件\"},\"4415\":{\"t\":\"package tech.pdai.junit4.testsuite; import org.junit.runner.RunWith; import org.junit.runners.Suite; /** * Test suite. */ @RunWith(Suite.class) @Suite.SuiteClasses({ /** * 此处类的配置顺序会影响执行顺序 */ JunitTest1.class, JunitTest2.class }) public class JunitSuiteTest { } \"},\"4416\":{\"t\":\"执行结果\"},\"4417\":{\"h\":\"测试:测试顺序\",\"a\":\"测试-测试顺序\"},\"4418\":{\"t\":\"自定义测试方法的顺序，比如按照方法的名字顺序：\"},\"4419\":{\"t\":\"package tech.pdai.junit4; import org.junit.FixMethodOrder; import org.junit.Test; import org.junit.runners.MethodSorters; /** * Order. */ @FixMethodOrder(MethodSorters.NAME_ASCENDING) public class TestMethodOrder { @Test public void testA() { System.out.println(\\\"first\\\"); } @Test public void testC() { System.out.println(\\\"third\\\"); } @Test public void testB() { System.out.println(\\\"second\\\"); } } \"},\"4420\":{\"t\":\"执行结果\"},\"4421\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"4422\":{\"t\":\"https://github.com/junit-team/junit4/wiki\"},\"4423\":{\"t\":\"https://blog.csdn.net/qq_34264849/article/details/88243278\"},\"4424\":{\"t\":\"https://www.cnblogs.com/jingjiren/p/10339039.html\"},\"4425\":{\"t\":\"https://blog.csdn.net/weixin_44425934/\"},\"4426\":{\"h\":\"Junit5 详解\"},\"4427\":{\"h\":\"Mockito 详解\"},\"4428\":{\"h\":\"SpringBoot2+H2+Mockito实战\"},\"4429\":{\"h\":\"浅谈单元测试\"},\"4430\":{\"t\":\"单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。\"},\"4431\":{\"h\":\"什么是单元测试？\",\"a\":\"什么是单元测试\"},\"4432\":{\"t\":\"来自百度百科。\"},\"4433\":{\"t\":\"单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。\"},\"4434\":{\"h\":\"为什么要写单元测试？\",\"a\":\"为什么要写单元测试\"},\"4435\":{\"t\":\"使用单元测试可以有效地降低程序出错的机率，提供准确的文档，并帮助我们改进设计方案等等。\"},\"4436\":{\"t\":\"以下列举了一些我为什么使用单元测试的好处：\"},\"4437\":{\"t\":\"允许你对代码做出任何改变，因为你了解单元测试会在你的预期之中。\"},\"4438\":{\"t\":\"单元测试可以有效地降低程序出现BUG的机率；\"},\"4439\":{\"t\":\"帮助你更深入地理解代码--因为在写单元测试的时候，你需要明确程序所有的执行流程及对应的执行结果等等;\"},\"4440\":{\"t\":\"允许在任何时候代码重构，而不必担心破坏现有的代码。这使得我们编写程序更灵活;\"},\"4441\":{\"t\":\"确保你的代码的健壮性，因为所有的测试都是通过了的。\"},\"4442\":{\"t\":\"文档记录。单元测试就是一种无价的文档，它是展示函数或类如何使用的最佳文档，这份文档是可编译、可运行的、并且它保持最新，永远与代码同步。\"},\"4443\":{\"t\":\"具有回归性。自动化的单元测试避免了代码出现回归，编写完成之后，可以随时随地地快速运行测试，而不是将代码部署到设备之后，然后再手动地覆盖各种执行路径，这样的行为效率低下，浪费时间。\"},\"4444\":{\"h\":\"什么时候写单元测试？\",\"a\":\"什么时候写单元测试\"},\"4445\":{\"t\":\"写单元测试的时机不外乎三种情况：\"},\"4446\":{\"t\":\"一是在具体实现代码之前，这是测试驱动开发（TDD）所提倡的；\"},\"4447\":{\"t\":\"二是与具体实现代码同步进行。先写少量功能代码，紧接着写单元测试（重复这两个过程，直到完成功能代码开发）。其实这种方案跟第一种已经很接近，基本上功能代码开发完，单元测试也差不多完成了。\"},\"4448\":{\"t\":\"三是编写完功能代码再写单元测试。我的实践经验告诉我，事后编写的单元测试“粒度”都比较粗。对同样的功能代码，采取前两种方案的结果可能是用10个“小”的单测来覆盖，每个单测比较简单易懂，可读性可维护性都比较好（重构时单测的改动不大）；而第三种方案写的单测，往往是用1个“大”的单测来覆盖，这个单测逻辑就比较复杂，因为它要测的东西很多，可读性可维护性就比较差。\"},\"4449\":{\"t\":\"建议：我个人是比较推荐单元测试与具体实现代码同步进行这个方案的。只有对需求有一定的理解后才能知道什么是代码的正确性，才能写出有效的单元测试来验证正确性，而能写出一些功能代码则说明对需求有一定理解了。\"},\"4450\":{\"h\":\"单元测试要写多细？\",\"a\":\"单元测试要写多细\"},\"4451\":{\"t\":\"单元测试不是越多越好，而是越有效越好！进一步解读就是哪些代码需要有单元测试覆盖：\"},\"4452\":{\"t\":\"逻辑复杂的\"},\"4453\":{\"t\":\"容易出错的\"},\"4454\":{\"t\":\"不易理解的，即使是自己过段时间也会遗忘的，看不懂自己的代码，单元测试代码有助于理解代码的功能和需求\"},\"4455\":{\"t\":\"公共代码。比如自定义的所有http请求都会经过的拦截器；工具类等。\"},\"4456\":{\"t\":\"核心业务代码。一个产品里最核心最有业务价值的代码应该要有较高的单元测试覆盖率。\"},\"4457\":{\"h\":\"有哪些单元测试相关的概念？\",\"a\":\"有哪些单元测试相关的概念\"},\"4458\":{\"t\":\"这里节选自https://segmentfault.com/a/1190000006731125，作者yongshun 采用署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议.\"},\"4459\":{\"h\":\"被测系统\",\"a\":\"被测系统\"},\"4460\":{\"t\":\"被测系统(System under test, SUT)表示正在被测试的系统, 目的是测试系统能否正确操作. 根据测试类型的不同, SUT 指代的内容也不同, 例如 SUT 可以是一个类甚至是一整个系统.\"},\"4461\":{\"h\":\"测试依赖组件(DOC)\",\"a\":\"测试依赖组件-doc\"},\"4462\":{\"t\":\"被测系统所依赖的组件, 例如进程 UserService 的单元测试时, UserService 会依赖 UserDao, 因此 UserDao 就是 DOC.\"},\"4463\":{\"h\":\"测试替身(Test Double)\",\"a\":\"测试替身-test-double\"},\"4464\":{\"t\":\"一个实际的系统会依赖多个外部对象, 但是在进行单元测试时, 我们会用一些功能较为简单的并且其行为和实际对象类似的假对象来作为 SUT 的依赖对象, 以此来降低单元测试的复杂性和可实现性. 在这里, 这些假对象就被称为 测试替身(Test Double). 测试替身有如下 5 种类型:\"},\"4465\":{\"t\":\"Test stub\"},\"4466\":{\"t\":\"为 SUT 提供数据的假对象，我们举一个例子来展示什么是 Test stub.\"},\"4467\":{\"t\":\"假设我们的一个模块需要从 HTTP 接口中获取商品价格数据, 这个获取数据的接口被封装为 getPrice 方法. 在对这个模块进行测试时, 我们显然不太可能专门开一个 HTTP 服务器来提供此接口, 而是提供一个带有 getPrice 方法的假对象, 从这个假对象中获取数据. 在这个例子中, 提供数据的假对象就叫做 Test stub.\"},\"4468\":{\"t\":\"Fake object\"},\"4469\":{\"t\":\"实现了简单功能的一个假对象. Fake object 和 Test stub 的主要区别就是 Test stub 侧重于用于提供数据的假对象, 而 Fake object 没有这层含义.\"},\"4470\":{\"t\":\"使用 Fake object 的最主要的原因就是在测试时某些组件不可用或运行速度太慢, 因而使用 Fake object 来代替它们.\"},\"4471\":{\"t\":\"Mock object\"},\"4472\":{\"t\":\"用于模拟实际的对象, 并且能够校验对这个 Mock object 的方法调用是否符合预期.\"},\"4473\":{\"t\":\"实际上, Mock object 是 Test stub 或 Fake object 一种, 但是 Mock object 有 Test stub/Fake object 没有的特性, Mock object 可以很灵活地配置所调用的方法所产生的行为, 并且它可以追踪方法调用, 例如一个 Mock Object 方法调用时传递了哪些参数, 方法调用了几次等.\"},\"4474\":{\"t\":\"Dummy object\"},\"4475\":{\"t\":\"在测试中并不使用的, 但是为了测试代码能够正常编译/运行而添加的对象. 例如我们调用一个 Test Double 对象的一个方法, 这个方法需要传递几个参数, 但是其中某个参数无论是什么值都不会影响测试的结果, 那么这个参数就是一个 Dummy object. Dummy object 可以是一个空引用, 一个空对象或者是一个常量等.\"},\"4476\":{\"t\":\"简单的说, Dummy object 就是那些没有使用到的, 仅仅是为了填充参数列表的对象.\"},\"4477\":{\"t\":\"Test Spy\"},\"4478\":{\"t\":\"可以包装一个真实的 Java 对象, 并返回一个包装后的新对象. 若没有特别配置的话, 对这个新对象的所有方法调用, 都会委派给实际的 Java 对象.\"},\"4479\":{\"t\":\"mock 和 spy 的区别是: mock 是无中生有地生出一个完全虚拟的对象, 它的所有方法都是虚拟的; 而 spy 是在现有类的基础上包装了一个对象, 即如果我们没有重写 spy 的方法, 那么这些方法的实现其实都是调用的被包装的对象的方法.\"},\"4480\":{\"h\":\"Test fixture\",\"a\":\"test-fixture\"},\"4481\":{\"t\":\"所谓 test fixture, 就是运行测试程序所需要的先决条件(precondition). 即对被测对象进行测试时锁需要的一切东西(The test fixture is everything we need to have in place to exercise the SUT). 这个 东西 不单单指的是数据, 同时包括对被测对象的配置, 被测对象所需要的依赖对象等. JUnit4 之前是通过 setUp, TearDown 方法完成, 在 JUnit4这, 我们可以使用@Before 代替 setUp 方法, @After 代替 tearDown 方法.\"},\"4482\":{\"t\":\"注意, @Before 在每个测试方法运行前都会被调用, @After 在每个测试方法运行后都会被调用.\"},\"4483\":{\"t\":\"因为 @Before 和 @After 会在每个测试方法前后都会被调用, 而有时我们仅仅需要在测试前进行一次初始化, 这样的情况下, 可以使用@BeforeClass 和@AfterClass 注解.\"},\"4484\":{\"h\":\"测试用例(Test case)\",\"a\":\"测试用例-test-case\"},\"4485\":{\"t\":\"在 JUnit 3中, 测试方法都必须以 test 为前缀, 且必须是 public void 的, JUnit 4之后, 就没有这个限制了, 只要在每个测试方法标注 @Test 注解, 方法签名可以是任意的.\"},\"4486\":{\"h\":\"测试套件\",\"a\":\"测试套件\"},\"4487\":{\"t\":\"通过 TestSuit 对象将多个测试用例组装成一个测试套件, 测试套件批量运行.通过@RunWith 和@SuteClass 两个注解, 我们可以创建一个测试套件. 通过@RunWith 指定一个特殊的运行器, 几 Suite.class 套件运行器, 并通过@SuiteClasses 注解, 将需要进行测试的类列表作作为参数传入.\"},\"4488\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"4489\":{\"t\":\"https://coolshell.cn/articles/8209.html\"},\"4490\":{\"t\":\"https://segmentfault.com/a/1190000006731125\"},\"4491\":{\"t\":\"https://blog.csdn.net/flysqrlboy/article/details/79301241\"},\"4492\":{\"h\":\"注解机制详解\"},\"4493\":{\"t\":\"注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。@pdai\"},\"4494\":{\"h\":\"注解基础\",\"a\":\"注解基础\"},\"4495\":{\"t\":\"注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：\"},\"4496\":{\"t\":\"生成文档，通过代码里标识的元数据生成javadoc文档。\"},\"4497\":{\"t\":\"编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。\"},\"4498\":{\"t\":\"编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。\"},\"4499\":{\"t\":\"运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。\"},\"4500\":{\"t\":\"这么来说是比较抽象的，我们具体看下注解的常见分类：\"},\"4501\":{\"t\":\"Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。\"},\"4502\":{\"t\":\"元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented，@Retention用于标明注解被保留的阶段，@Target用于标明注解使用的范围，@Inherited用于标明注解可继承，@Documented用于标明是否生成javadoc文档。\"},\"4503\":{\"t\":\"自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。\"},\"4504\":{\"t\":\"接下来我们通过这个分类角度来理解注解。\"},\"4505\":{\"h\":\"Java内置注解\",\"a\":\"java内置注解\"},\"4506\":{\"t\":\"我们从最为常见的Java内置的注解开始说起，先看下下面的代码：\"},\"4507\":{\"t\":\"class A{ public void test() { } } class B extends A{ /** * 重载父类的test方法 */ @Override public void test() { } /** * 被弃用的方法 */ @Deprecated public void oldMethod() { } /** * 忽略告警 * * @return */ @SuppressWarnings(\\\"rawtypes\\\") public List processList() { List list = new ArrayList(); return list; } } \"},\"4508\":{\"t\":\"Java 1.5开始自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings：\"},\"4509\":{\"t\":\"@Override：表示当前的方法定义将覆盖父类中的方法\"},\"4510\":{\"t\":\"@Deprecated：表示代码被弃用，如果使用了被@Deprecated注解的代码则编译器将发出警告\"},\"4511\":{\"t\":\"@SuppressWarnings：表示关闭编译器警告信息\"},\"4512\":{\"t\":\"我们再具体看下这几个内置注解，同时通过这几个内置注解中的元注解的定义来引出元注解。\"},\"4513\":{\"h\":\"内置注解 - @Override\",\"a\":\"内置注解-override\"},\"4514\":{\"t\":\"我们先来看一下这个注解类型的定义：\"},\"4515\":{\"t\":\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.SOURCE) public @interface Override { } \"},\"4516\":{\"t\":\"从它的定义我们可以看到，这个注解可以被用来修饰方法，并且它只在编译时有效，在编译后的class文件中便不再存在。这个注解的作用我们大家都不陌生，那就是告诉编译器被修饰的方法是重写的父类的中的相同签名的方法，编译器会对此做出检查，若发现父类中不存在这个方法或是存在的方法签名不同，则会报错。\"},\"4517\":{\"h\":\"内置注解 - @Deprecated\",\"a\":\"内置注解-deprecated\"},\"4518\":{\"t\":\"这个注解的定义如下：\"},\"4519\":{\"t\":\"@Documented @Retention(RetentionPolicy.RUNTIME) @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE}) public @interface Deprecated { } \"},\"4520\":{\"t\":\"从它的定义我们可以知道，它会被文档化，能够保留到运行时，能够修饰构造方法、属性、局部变量、方法、包、参数、类型。这个注解的作用是告诉编译器被修饰的程序元素已被“废弃”，不再建议用户使用。\"},\"4521\":{\"h\":\"内置注解 - @SuppressWarnings\",\"a\":\"内置注解-suppresswarnings\"},\"4522\":{\"t\":\"这个注解我们也比较常用到，先来看下它的定义：\"},\"4523\":{\"t\":\"@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE}) @Retention(RetentionPolicy.SOURCE) public @interface SuppressWarnings { String[] value(); } \"},\"4524\":{\"t\":\"它能够修饰的程序元素包括类型、属性、方法、参数、构造器、局部变量，只能存活在源码时，取值为String[]。它的作用是告诉编译器忽略指定的警告信息，它可以取的值如下所示：\"},\"4525\":{\"t\":\"参数\"},\"4526\":{\"t\":\"作用\"},\"4527\":{\"t\":\"原描述\"},\"4528\":{\"t\":\"all\"},\"4529\":{\"t\":\"抑制所有警告\"},\"4530\":{\"t\":\"to suppress all warnings\"},\"4531\":{\"t\":\"boxing\"},\"4532\":{\"t\":\"抑制装箱、拆箱操作时候的警告\"},\"4533\":{\"t\":\"to suppress warnings relative to boxing/unboxing operations\"},\"4534\":{\"t\":\"cast\"},\"4535\":{\"t\":\"抑制映射相关的警告\"},\"4536\":{\"t\":\"to suppress warnings relative to cast operations\"},\"4537\":{\"t\":\"dep-ann\"},\"4538\":{\"t\":\"抑制启用注释的警告\"},\"4539\":{\"t\":\"to suppress warnings relative to deprecated annotation\"},\"4540\":{\"t\":\"deprecation\"},\"4541\":{\"t\":\"抑制过期方法警告\"},\"4542\":{\"t\":\"to suppress warnings relative to deprecation\"},\"4543\":{\"t\":\"fallthrough\"},\"4544\":{\"t\":\"抑制确在switch中缺失breaks的警告\"},\"4545\":{\"t\":\"to suppress warnings relative to missing breaks in switch statements\"},\"4546\":{\"t\":\"finally\"},\"4547\":{\"t\":\"抑制finally模块没有返回的警告\"},\"4548\":{\"t\":\"to suppress warnings relative to finally block that don’t return\"},\"4549\":{\"t\":\"hiding\"},\"4550\":{\"t\":\"抑制与隐藏变数的区域变数相关的警告\"},\"4551\":{\"t\":\"to suppress warnings relative to locals that hide variable（）\"},\"4552\":{\"t\":\"incomplete-switch\"},\"4553\":{\"t\":\"忽略没有完整的switch语句\"},\"4554\":{\"t\":\"to suppress warnings relative to missing entries in a switch statement (enum case)\"},\"4555\":{\"t\":\"nls\"},\"4556\":{\"t\":\"忽略非nls格式的字符\"},\"4557\":{\"t\":\"to suppress warnings relative to non-nls string literals\"},\"4558\":{\"t\":\"null\"},\"4559\":{\"t\":\"忽略对null的操作\"},\"4560\":{\"t\":\"to suppress warnings relative to null analysis\"},\"4561\":{\"t\":\"rawtype\"},\"4562\":{\"t\":\"使用generics时忽略没有指定相应的类型\"},\"4563\":{\"t\":\"to suppress warnings relative to un-specific types when using\"},\"4564\":{\"t\":\"restriction\"},\"4565\":{\"t\":\"抑制与使用不建议或禁止参照相关的警告\"},\"4566\":{\"t\":\"to suppress warnings relative to usage of discouraged or\"},\"4567\":{\"t\":\"serial\"},\"4568\":{\"t\":\"忽略在serializable类中没有声明serialVersionUID变量\"},\"4569\":{\"t\":\"to suppress warnings relative to missing serialVersionUID field for a serializable class\"},\"4570\":{\"t\":\"static-access\"},\"4571\":{\"t\":\"抑制不正确的静态访问方式警告\"},\"4572\":{\"t\":\"to suppress warnings relative to incorrect static access\"},\"4573\":{\"t\":\"synthetic-access\"},\"4574\":{\"t\":\"抑制子类没有按最优方法访问内部类的警告\"},\"4575\":{\"t\":\"to suppress warnings relative to unoptimized access from inner classes\"},\"4576\":{\"t\":\"unchecked\"},\"4577\":{\"t\":\"抑制没有进行类型检查操作的警告\"},\"4578\":{\"t\":\"to suppress warnings relative to unchecked operations\"},\"4579\":{\"t\":\"unqualified-field-access\"},\"4580\":{\"t\":\"抑制没有权限访问的域的警告\"},\"4581\":{\"t\":\"to suppress warnings relative to field access unqualified\"},\"4582\":{\"t\":\"unused\"},\"4583\":{\"t\":\"抑制没被使用过的代码的警告\"},\"4584\":{\"t\":\"to suppress warnings relative to unused code\"},\"4585\":{\"h\":\"元注解\",\"a\":\"元注解\"},\"4586\":{\"t\":\"上述内置注解的定义中使用了一些元注解（注解类型进行注解的注解类），在JDK 1.5中提供了4个标准的元注解：@Target，@Retention，@Documented，@Inherited, 在JDK 1.8中提供了两个元注解 @Repeatable和@Native。\"},\"4587\":{\"h\":\"元注解 - @Target\",\"a\":\"元注解-target\"},\"4588\":{\"t\":\"Target注解的作用是：描述注解的使用范围（即：被修饰的注解可以用在什么地方） 。\"},\"4589\":{\"t\":\"Target注解用来说明那些被它所注解的注解类可修饰的对象范围：注解可以用于修饰 packages、types（类、接口、枚举、注解类）、类成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数），在定义注解类时使用了@Target 能够更加清晰的知道它能够被用来修饰哪些对象，它的取值范围定义在ElementType 枚举中。\"},\"4590\":{\"t\":\"public enum ElementType { TYPE, // 类、接口、枚举类 FIELD, // 成员变量（包括：枚举常量） METHOD, // 成员方法 PARAMETER, // 方法参数 CONSTRUCTOR, // 构造方法 LOCAL_VARIABLE, // 局部变量 ANNOTATION_TYPE, // 注解类 PACKAGE, // 可用于修饰：包 TYPE_PARAMETER, // 类型参数，JDK 1.8 新增 TYPE_USE // 使用类型的任何地方，JDK 1.8 新增 } \"},\"4591\":{\"h\":\"元注解 - @Retention & @RetentionTarget\",\"a\":\"元注解-retention-retentiontarget\"},\"4592\":{\"t\":\"Reteniton注解的作用是：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时） 。\"},\"4593\":{\"t\":\"Reteniton注解用来限定那些被它所注解的注解类在注解到其他类上以后，可被保留到何时，一共有三种策略，定义在RetentionPolicy枚举中。\"},\"4594\":{\"t\":\"public enum RetentionPolicy { SOURCE, // 源文件保留 CLASS, // 编译期保留，默认值 RUNTIME // 运行期保留，可通过反射去获取注解信息 } \"},\"4595\":{\"t\":\"为了验证应用了这三种策略的注解类有何区别，分别使用三种策略各定义一个注解类做测试。\"},\"4596\":{\"t\":\"@Retention(RetentionPolicy.SOURCE) public @interface SourcePolicy { } @Retention(RetentionPolicy.CLASS) public @interface ClassPolicy { } @Retention(RetentionPolicy.RUNTIME) public @interface RuntimePolicy { } \"},\"4597\":{\"t\":\"用定义好的三个注解类分别去注解一个方法。\"},\"4598\":{\"t\":\"public class RetentionTest { @SourcePolicy public void sourcePolicy() { } @ClassPolicy public void classPolicy() { } @RuntimePolicy public void runtimePolicy() { } } \"},\"4599\":{\"t\":\"通过执行 javap -verbose RetentionTest命令获取到的RetentionTest 的 class 字节码内容如下。\"},\"4600\":{\"t\":\"{ public retention.RetentionTest(); flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\\\"<init>\\\":()V 4: return LineNumberTable: line 3: 0 public void sourcePolicy(); flags: ACC_PUBLIC Code: stack=0, locals=1, args_size=1 0: return LineNumberTable: line 7: 0 public void classPolicy(); flags: ACC_PUBLIC Code: stack=0, locals=1, args_size=1 0: return LineNumberTable: line 11: 0 RuntimeInvisibleAnnotations: 0: #11() public void runtimePolicy(); flags: ACC_PUBLIC Code: stack=0, locals=1, args_size=1 0: return LineNumberTable: line 15: 0 RuntimeVisibleAnnotations: 0: #14() } \"},\"4601\":{\"t\":\"从 RetentionTest 的字节码内容我们可以得出以下两点结论：\"},\"4602\":{\"t\":\"编译器并没有记录下 sourcePolicy() 方法的注解信息；\"},\"4603\":{\"t\":\"编译器分别使用了 RuntimeInvisibleAnnotations 和 RuntimeVisibleAnnotations 属性去记录了classPolicy()方法 和 runtimePolicy()方法 的注解信息；\"},\"4604\":{\"h\":\"元注解 - @Documented\",\"a\":\"元注解-documented\"},\"4605\":{\"t\":\"Documented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。\"},\"4606\":{\"t\":\"以下代码在使用Javadoc工具可以生成@TestDocAnnotation注解信息。\"},\"4607\":{\"t\":\"import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Target; @Documented @Target({ElementType.TYPE,ElementType.METHOD}) public @interface TestDocAnnotation { public String value() default \\\"default\\\"; } @TestDocAnnotation(\\\"myMethodDoc\\\") public void testDoc() { } \"},\"4608\":{\"h\":\"元注解 - @Inherited\",\"a\":\"元注解-inherited\"},\"4609\":{\"t\":\"Inherited注解的作用：被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。\"},\"4610\":{\"t\":\"我们来测试下这个注解：\"},\"4611\":{\"t\":\"定义@Inherited注解：\"},\"4612\":{\"t\":\"@Inherited @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE,ElementType.METHOD}) public @interface TestInheritedAnnotation { String [] values(); int number(); } \"},\"4613\":{\"t\":\"使用这个注解\"},\"4614\":{\"t\":\"@TestInheritedAnnotation(values = {\\\"value\\\"}, number = 10) public class Person { } class Student extends Person{ @Test public void test(){ Class clazz = Student.class; Annotation[] annotations = clazz.getAnnotations(); for (Annotation annotation : annotations) { System.out.println(annotation.toString()); } } } \"},\"4615\":{\"t\":\"输出\"},\"4616\":{\"t\":\"xxxxxxx.TestInheritedAnnotation(values=[value], number=10) \"},\"4617\":{\"t\":\"即使Student类没有显示地被注解@TestInheritedAnnotation，但是它的父类Person被注解，而且@TestInheritedAnnotation被@Inherited注解，因此Student类自动有了该注解。\"},\"4618\":{\"h\":\"元注解 - @Repeatable (Java8)\",\"a\":\"元注解-repeatable-java8\"},\"4619\":{\"t\":\"@Repeatable请参考Java 8 - 重复注解\"},\"4620\":{\"h\":\"元注解 - @Native (Java8)\",\"a\":\"元注解-native-java8\"},\"4621\":{\"t\":\"使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。对于 @Native 注解不常使用，了解即可\"},\"4622\":{\"h\":\"注解与反射接口\",\"a\":\"注解与反射接口\"},\"4623\":{\"t\":\"定义注解后，如何获取注解中的内容呢？反射包java.lang.reflect下的AnnotatedElement接口提供这些方法。这里注意：只有注解被定义为RUNTIME后，该注解才能是运行时可见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。\"},\"4624\":{\"t\":\"AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的方法来访问Annotation信息。我们看下具体的先关接口\"},\"4625\":{\"t\":\"boolean isAnnotationPresent(Class<?extends Annotation> annotationClass)\"},\"4626\":{\"t\":\"判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false。注意：此方法会忽略注解对应的注解容器。\"},\"4627\":{\"t\":\"<T extends Annotation> T getAnnotation(Class<T> annotationClass)\"},\"4628\":{\"t\":\"返回该程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。\"},\"4629\":{\"t\":\"Annotation[] getAnnotations()\"},\"4630\":{\"t\":\"返回该程序元素上存在的所有注解，若没有注解，返回长度为0的数组。\"},\"4631\":{\"t\":\"<T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)\"},\"4632\":{\"t\":\"返回该程序元素上存在的、指定类型的注解数组。没有注解对应类型的注解时，返回长度为0的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。getAnnotationsByType方法与 getAnnotation的区别在于，getAnnotationsByType会检测注解对应的重复注解容器。若程序元素为类，当前类上找不到注解，且该注解为可继承的，则会去父类上检测对应的注解。\"},\"4633\":{\"t\":\"<T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)\"},\"4634\":{\"t\":\"返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注释。如果没有注释直接存在于此元素上，则返回null\"},\"4635\":{\"t\":\"<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)\"},\"4636\":{\"t\":\"返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注释\"},\"4637\":{\"t\":\"Annotation[] getDeclaredAnnotations()\"},\"4638\":{\"t\":\"返回直接存在于此元素上的所有注解及注解对应的重复注解容器。与此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注释直接存在于此元素上，则返回长度为零的一个数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。\"},\"4639\":{\"h\":\"自定义注解\",\"a\":\"自定义注解\"},\"4640\":{\"t\":\"当我们理解了内置注解, 元注解和获取注解的反射接口后，我们便可以开始自定义注解了。这个例子我把上述的知识点全部融入进来, 代码很简单：\"},\"4641\":{\"t\":\"定义自己的注解\"},\"4642\":{\"t\":\"package com.pdai.java.annotation; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyMethodAnnotation { public String title() default \\\"\\\"; public String description() default \\\"\\\"; } \"},\"4643\":{\"t\":\"使用注解\"},\"4644\":{\"t\":\"package com.pdai.java.annotation; import java.io.FileNotFoundException; import java.lang.annotation.Annotation; import java.lang.reflect.Method; import java.util.ArrayList; import java.util.List; public class TestMethodAnnotation { @Override @MyMethodAnnotation(title = \\\"toStringMethod\\\", description = \\\"override toString method\\\") public String toString() { return \\\"Override toString method\\\"; } @Deprecated @MyMethodAnnotation(title = \\\"old static method\\\", description = \\\"deprecated old static method\\\") public static void oldMethod() { System.out.println(\\\"old method, don't use it.\\\"); } @SuppressWarnings({\\\"unchecked\\\", \\\"deprecation\\\"}) @MyMethodAnnotation(title = \\\"test method\\\", description = \\\"suppress warning static method\\\") public static void genericsTest() throws FileNotFoundException { List l = new ArrayList(); l.add(\\\"abc\\\"); oldMethod(); } } \"},\"4645\":{\"t\":\"用反射接口获取注解信息\"},\"4646\":{\"t\":\"在TestMethodAnnotation中添加Main方法进行测试：\"},\"4647\":{\"t\":\"public static void main(String[] args) { try { // 获取所有methods Method[] methods = TestMethodAnnotation.class.getClassLoader() .loadClass((\\\"com.pdai.java.annotation.TestMethodAnnotation\\\")) .getMethods(); // 遍历 for (Method method : methods) { // 方法上是否有MyMethodAnnotation注解 if (method.isAnnotationPresent(MyMethodAnnotation.class)) { try { // 获取并遍历方法上的所有注解 for (Annotation anno : method.getDeclaredAnnotations()) { System.out.println(\\\"Annotation in Method '\\\" + method + \\\"' : \\\" + anno); } // 获取MyMethodAnnotation对象信息 MyMethodAnnotation methodAnno = method .getAnnotation(MyMethodAnnotation.class); System.out.println(methodAnno.title()); } catch (Throwable ex) { ex.printStackTrace(); } } } } catch (SecurityException | ClassNotFoundException e) { e.printStackTrace(); } } \"},\"4648\":{\"t\":\"测试的输出\"},\"4649\":{\"t\":\"Annotation in Method 'public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()' : @java.lang.Deprecated() Annotation in Method 'public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()' : @com.pdai.java.annotation.MyMethodAnnotation(title=old static method, description=deprecated old static method) old static method Annotation in Method 'public static void com.pdai.java.annotation.TestMethodAnnotation.genericsTest() throws java.io.FileNotFoundException' : @com.pdai.java.annotation.MyMethodAnnotation(title=test method, description=suppress warning static method) test method Annotation in Method 'public java.lang.String com.pdai.java.annotation.TestMethodAnnotation.toString()' : @com.pdai.java.annotation.MyMethodAnnotation(title=toStringMethod, description=override toString method) toStringMethod \"},\"4650\":{\"h\":\"深入理解注解\",\"a\":\"深入理解注解\"},\"4651\":{\"t\":\"提示\"},\"4652\":{\"t\":\"接下来，我们从其它角度深入理解注解\"},\"4653\":{\"h\":\"Java8提供了哪些新的注解？\",\"a\":\"java8提供了哪些新的注解\"},\"4654\":{\"t\":\"@Repeatable\"},\"4655\":{\"t\":\"请参考Java 8 - 重复注解\"},\"4656\":{\"t\":\"ElementType.TYPE_USE\"},\"4657\":{\"t\":\"请参考Java 8 - 类型注解\"},\"4658\":{\"t\":\"ElementType.TYPE_PARAMETER\"},\"4659\":{\"t\":\"ElementType.TYPE_USE(此类型包括类型声明和类型参数声明，是为了方便设计者进行类型检查)包含了ElementType.TYPE(类、接口（包括注解类型）和枚举的声明)和ElementType.TYPE_PARAMETER(类型参数声明), 不妨再看个例子\"},\"4660\":{\"t\":\"// 自定义ElementType.TYPE_PARAMETER注解 @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE_PARAMETER) public @interface MyNotEmpty { } // 自定义ElementType.TYPE_USE注解 @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE_USE) public @interface MyNotNull { } // 测试类 public class TypeParameterAndTypeUseAnnotation<@MyNotEmpty T>{ //使用TYPE_PARAMETER类型，会编译不通过 // public @MyNotEmpty T test(@MyNotEmpty T a){ // new ArrayList<@MyNotEmpty String>(); // return a; // } //使用TYPE_USE类型，编译通过 public @MyNotNull T test2(@MyNotNull T a){ new ArrayList<@MyNotNull String>(); return a; } } \"},\"4661\":{\"h\":\"注解支持继承吗？\",\"a\":\"注解支持继承吗\"},\"4662\":{\"t\":\"注解是不支持继承的\"},\"4663\":{\"t\":\"不能使用关键字extends来继承某个@interface，但注解在编译后，编译器会自动继承java.lang.annotation.Annotation接口.\"},\"4664\":{\"t\":\"虽然反编译后发现注解继承了Annotation接口，请记住，即使Java的接口可以实现多继承，但定义注解时依然无法使用extends关键字继承@interface。\"},\"4665\":{\"t\":\"区别于注解的继承，被注解的子类继承父类注解可以用@Inherited： 如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。\"},\"4666\":{\"h\":\"注解实现的原理？\",\"a\":\"注解实现的原理\"},\"4667\":{\"t\":\"网上很多标注解的原理文章根本没有说到点子上。\"},\"4668\":{\"t\":\"这里推荐你两篇文章：\"},\"4669\":{\"t\":\"https://blog.csdn.net/qq_20009015/article/details/106038023\"},\"4670\":{\"t\":\"https://www.race604.com/annotation-processing/\"},\"4671\":{\"h\":\"注解的应用场景\",\"a\":\"注解的应用场景\"},\"4672\":{\"t\":\"提示\"},\"4673\":{\"t\":\"最后我们再看看实际开发中注解的一些应用场景。@pdai\"},\"4674\":{\"h\":\"配置化到注解化 - 框架的演进\",\"a\":\"配置化到注解化-框架的演进\"},\"4675\":{\"t\":\"Spring 框架 配置化到注解化的转变。\"},\"4676\":{\"h\":\"继承实现到注解实现 - Junit3到Junit4\",\"a\":\"继承实现到注解实现-junit3到junit4\"},\"4677\":{\"t\":\"一个模块的封装大多数人都是通过继承和组合等模式来实现的，但是如果结合注解将可以极大程度提高实现的优雅度（降低耦合度）。而Junit3 到Junit4的演化就是最好的一个例子。\"},\"4678\":{\"t\":\"被测试类\"},\"4679\":{\"t\":\"public class HelloWorld { public void sayHello(){ System.out.println(\\\"hello....\\\"); throw new NumberFormatException(); } public void sayWorld(){ System.out.println(\\\"world....\\\"); } public String say(){ return \\\"hello world!\\\"; } } \"},\"4680\":{\"t\":\"Junit 3 实现UT\"},\"4681\":{\"t\":\"通过继承 TestCase来实现，初始化是通过Override父类方法来进行，测试方式通过test的前缀方法获取。\"},\"4682\":{\"t\":\"public class HelloWorldTest extends TestCase{ private HelloWorld hw; @Override protected void setUp() throws Exception { super.setUp(); hw=new HelloWorld(); } //1.测试没有返回值 public void testHello(){ try { hw.sayHello(); } catch (Exception e) { System.out.println(\\\"发生异常.....\\\"); } } public void testWorld(){ hw.sayWorld(); } //2.测试有返回值的方法 // 返回字符串 public void testSay(){ assertEquals(\\\"测试失败\\\", hw.say(), \\\"hello world!\\\"); } //返回对象 public void testObj(){ assertNull(\\\"测试对象不为空\\\", null); assertNotNull(\\\"测试对象为空\\\",new String()); } @Override protected void tearDown() throws Exception { super.tearDown(); hw=null; } } \"},\"4683\":{\"t\":\"Junit 4 实现UT\"},\"4684\":{\"t\":\"通过定义@Before，@Test，@After等等注解来实现。\"},\"4685\":{\"t\":\"public class HelloWorldTest { private HelloWorld hw; @Before public void setUp() { hw = new HelloWorld(); } @Test(expected=NumberFormatException.class) // 1.测试没有返回值,有别于junit3的使用，更加方便 public void testHello() { hw.sayHello(); } @Test public void testWorld() { hw.sayWorld(); } @Test // 2.测试有返回值的方法 // 返回字符串 public void testSay() { assertEquals(\\\"测试失败\\\", hw.say(), \\\"hello world!\\\"); } @Test // 返回对象 public void testObj() { assertNull(\\\"测试对象不为空\\\", null); assertNotNull(\\\"测试对象为空\\\", new String()); } @After public void tearDown() throws Exception { hw = null; } } \"},\"4686\":{\"t\":\"这里我们发现通过注解的方式，我们实现单元测试时将更为优雅。如果你还期望了解Junit4是如何实现运行的呢？可以看这篇文章：JUnit4源码分析运行原理在新窗口打开。\"},\"4687\":{\"h\":\"自定义注解和AOP - 通过切面实现解耦\",\"a\":\"自定义注解和aop-通过切面实现解耦\"},\"4688\":{\"t\":\"最为常见的就是使用Spring AOP切面实现统一的操作日志管理，我这里找了一个开源项目中的例子（只展示主要代码），给你展示下如何通过注解实现解耦的。\"},\"4689\":{\"t\":\"自定义Log注解\"},\"4690\":{\"t\":\"@Target({ ElementType.PARAMETER, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Log { /** * 模块 */ public String title() default \\\"\\\"; /** * 功能 */ public BusinessType businessType() default BusinessType.OTHER; /** * 操作人类别 */ public OperatorType operatorType() default OperatorType.MANAGE; /** * 是否保存请求的参数 */ public boolean isSaveRequestData() default true; } \"},\"4691\":{\"t\":\"实现日志的切面, 对自定义注解Log作切点进行拦截\"},\"4692\":{\"t\":\"即对注解了@Log的方法进行切点拦截，\"},\"4693\":{\"t\":\"@Aspect @Component public class LogAspect { private static final Logger log = LoggerFactory.getLogger(LogAspect.class); /** * 配置织入点 - 自定义注解的包路径 * */ @Pointcut(\\\"@annotation(com.xxx.aspectj.lang.annotation.Log)\\\") public void logPointCut() { } /** * 处理完请求后执行 * * @param joinPoint 切点 */ @AfterReturning(pointcut = \\\"logPointCut()\\\", returning = \\\"jsonResult\\\") public void doAfterReturning(JoinPoint joinPoint, Object jsonResult) { handleLog(joinPoint, null, jsonResult); } /** * 拦截异常操作 * * @param joinPoint 切点 * @param e 异常 */ @AfterThrowing(value = \\\"logPointCut()\\\", throwing = \\\"e\\\") public void doAfterThrowing(JoinPoint joinPoint, Exception e) { handleLog(joinPoint, e, null); } protected void handleLog(final JoinPoint joinPoint, final Exception e, Object jsonResult) { try { // 获得注解 Log controllerLog = getAnnotationLog(joinPoint); if (controllerLog == null) { return; } // 获取当前的用户 User currentUser = ShiroUtils.getSysUser(); // *========数据库日志=========*// OperLog operLog = new OperLog(); operLog.setStatus(BusinessStatus.SUCCESS.ordinal()); // 请求的地址 String ip = ShiroUtils.getIp(); operLog.setOperIp(ip); // 返回参数 operLog.setJsonResult(JSONObject.toJSONString(jsonResult)); operLog.setOperUrl(ServletUtils.getRequest().getRequestURI()); if (currentUser != null) { operLog.setOperName(currentUser.getLoginName()); if (StringUtils.isNotNull(currentUser.getDept()) && StringUtils.isNotEmpty(currentUser.getDept().getDeptName())) { operLog.setDeptName(currentUser.getDept().getDeptName()); } } if (e != null) { operLog.setStatus(BusinessStatus.FAIL.ordinal()); operLog.setErrorMsg(StringUtils.substring(e.getMessage(), 0, 2000)); } // 设置方法名称 String className = joinPoint.getTarget().getClass().getName(); String methodName = joinPoint.getSignature().getName(); operLog.setMethod(className + \\\".\\\" + methodName + \\\"()\\\"); // 设置请求方式 operLog.setRequestMethod(ServletUtils.getRequest().getMethod()); // 处理设置注解上的参数 getControllerMethodDescription(controllerLog, operLog); // 保存数据库 AsyncManager.me().execute(AsyncFactory.recordOper(operLog)); } catch (Exception exp) { // 记录本地异常日志 log.error(\\\"==前置通知异常==\\\"); log.error(\\\"异常信息:{}\\\", exp.getMessage()); exp.printStackTrace(); } } /** * 获取注解中对方法的描述信息 用于Controller层注解 * * @param log 日志 * @param operLog 操作日志 * @throws Exception */ public void getControllerMethodDescription(Log log, OperLog operLog) throws Exception { // 设置action动作 operLog.setBusinessType(log.businessType().ordinal()); // 设置标题 operLog.setTitle(log.title()); // 设置操作人类别 operLog.setOperatorType(log.operatorType().ordinal()); // 是否需要保存request，参数和值 if (log.isSaveRequestData()) { // 获取参数的信息，传入到数据库中。 setRequestValue(operLog); } } /** * 获取请求的参数，放到log中 * * @param operLog * @param request */ private void setRequestValue(OperLog operLog) { Map<String, String[]> map = ServletUtils.getRequest().getParameterMap(); String params = JSONObject.toJSONString(map); operLog.setOperParam(StringUtils.substring(params, 0, 2000)); } /** * 是否存在注解，如果存在就获取 */ private Log getAnnotationLog(JoinPoint joinPoint) throws Exception { Signature signature = joinPoint.getSignature(); MethodSignature methodSignature = (MethodSignature) signature; Method method = methodSignature.getMethod(); if (method != null) { return method.getAnnotation(Log.class); } return null; } } \"},\"4694\":{\"t\":\"使用@Log注解\"},\"4695\":{\"t\":\"以一个简单的CRUD操作为例, 这里展示部分代码：每对“部门”进行操作就会产生一条操作日志存入数据库。\"},\"4696\":{\"t\":\"@Controller @RequestMapping(\\\"/system/dept\\\") public class DeptController extends BaseController { private String prefix = \\\"system/dept\\\"; @Autowired private IDeptService deptService; /** * 新增保存部门 */ @Log(title = \\\"部门管理\\\", businessType = BusinessType.INSERT) @RequiresPermissions(\\\"system:dept:add\\\") @PostMapping(\\\"/add\\\") @ResponseBody public AjaxResult addSave(@Validated Dept dept) { if (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) { return error(\\\"新增部门'\\\" + dept.getDeptName() + \\\"'失败，部门名称已存在\\\"); } return toAjax(deptService.insertDept(dept)); } /** * 保存 */ @Log(title = \\\"部门管理\\\", businessType = BusinessType.UPDATE) @RequiresPermissions(\\\"system:dept:edit\\\") @PostMapping(\\\"/edit\\\") @ResponseBody public AjaxResult editSave(@Validated Dept dept) { if (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) { return error(\\\"修改部门'\\\" + dept.getDeptName() + \\\"'失败，部门名称已存在\\\"); } else if(dept.getParentId().equals(dept.getDeptId())) { return error(\\\"修改部门'\\\" + dept.getDeptName() + \\\"'失败，上级部门不能是自己\\\"); } return toAjax(deptService.updateDept(dept)); } /** * 删除 */ @Log(title = \\\"部门管理\\\", businessType = BusinessType.DELETE) @RequiresPermissions(\\\"system:dept:remove\\\") @GetMapping(\\\"/remove/{deptId}\\\") @ResponseBody public AjaxResult remove(@PathVariable(\\\"deptId\\\") Long deptId) { if (deptService.selectDeptCount(deptId) > 0) { return AjaxResult.warn(\\\"存在下级部门,不允许删除\\\"); } if (deptService.checkDeptExistUser(deptId)) { return AjaxResult.warn(\\\"部门存在用户,不允许删除\\\"); } return toAjax(deptService.deleteDeptById(deptId)); } // ... } \"},\"4697\":{\"t\":\"同样的，你也可以看到权限管理也是通过类似的注解（@RequiresPermissions）机制来实现的。所以我们可以看到，通过注解+AOP最终的目标是为了实现模块的解耦。\"},\"4698\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"4699\":{\"t\":\"https://blog.csdn.net/javazejian/article/details/71860633\"},\"4700\":{\"t\":\"https://blog.csdn.net/qq_20009015/article/details/106038023\"},\"4701\":{\"t\":\"https://www.zhihu.com/question/47449512\"},\"4702\":{\"t\":\"https://www.race604.com/annotation-processing/\"},\"4703\":{\"t\":\"https://www.runoob.com/w3cnote/java-annotation.html\"},\"4704\":{\"t\":\"著作权归@pdai所有 原文链接：https://pdai.tech/md/java/basic/java-basic-x-annotation.html\"},\"4705\":{\"h\":\"异常机制详解\"},\"4706\":{\"t\":\"Java异常是Java提供的一种识别及响应错误的一致性机制，java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。本文综合多篇文章后，总结了Java 异常的相关知识，希望可以提升你对Java中异常的认知效率。@pdai\"},\"4707\":{\"h\":\"异常的层次结构\",\"a\":\"异常的层次结构\"},\"4708\":{\"t\":\"异常指不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通 过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例，描述了出现在一段编码中的 错误条件。当条件生成时，错误将引发异常。\"},\"4709\":{\"t\":\"Java异常类层次结构图：\"},\"4710\":{\"t\":\"img\"},\"4711\":{\"h\":\"Throwable\",\"a\":\"throwable\"},\"4712\":{\"t\":\"Throwable 是 Java 语言中所有错误与异常的超类。\"},\"4713\":{\"t\":\"Throwable 包含两个子类：Error（错误）和 Exception（异常），它们通常用于指示发生了异常情况。\"},\"4714\":{\"t\":\"Throwable 包含了其线程创建时线程执行堆栈的快照，它提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。\"},\"4715\":{\"h\":\"Error（错误）\",\"a\":\"error-错误\"},\"4716\":{\"t\":\"Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。\"},\"4717\":{\"t\":\"此类错误一般表示代码运行时 JVM 出现问题。通常有 Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如 OutOfMemoryError：内存不足错误；StackOverflowError：栈溢出错误。此类错误发生时，JVM 将终止线程。\"},\"4718\":{\"t\":\"这些错误是不受检异常，非代码性错误。因此，当此类错误发生时，应用程序不应该去处理此类错误。按照Java惯例，我们是不应该实现任何新的Error子类的！\"},\"4719\":{\"h\":\"Exception（异常）\",\"a\":\"exception-异常\"},\"4720\":{\"t\":\"程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。\"},\"4721\":{\"t\":\"运行时异常\"},\"4722\":{\"t\":\"都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。\"},\"4723\":{\"t\":\"运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。\"},\"4724\":{\"t\":\"非运行时异常 （编译异常）\"},\"4725\":{\"t\":\"是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。\"},\"4726\":{\"h\":\"可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）\",\"a\":\"可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions\"},\"4727\":{\"t\":\"可查异常（编译器要求必须处置的异常）：\"},\"4728\":{\"t\":\"正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。\"},\"4729\":{\"t\":\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\"},\"4730\":{\"t\":\"不可查异常(编译器不要求强制处置的异常)\"},\"4731\":{\"t\":\"包括运行时异常（RuntimeException与其子类）和错误（Error）。\"},\"4732\":{\"h\":\"异常基础\",\"a\":\"异常基础\"},\"4733\":{\"t\":\"提示\"},\"4734\":{\"t\":\"接下来我们看下异常使用的基础。\"},\"4735\":{\"h\":\"异常关键字\",\"a\":\"异常关键字\"},\"4736\":{\"t\":\"try – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。\"},\"4737\":{\"t\":\"catch – 用于捕获异常。catch用来捕获try语句块中发生的异常。\"},\"4738\":{\"t\":\"finally – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。\"},\"4739\":{\"t\":\"throw – 用于抛出异常。\"},\"4740\":{\"t\":\"throws – 用在方法签名中，用于声明该方法可能抛出的异常。\"},\"4741\":{\"h\":\"异常的申明(throws)\",\"a\":\"异常的申明-throws\"},\"4742\":{\"t\":\"在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：\"},\"4743\":{\"t\":\"public static void method() throws IOException, FileNotFoundException{ //something statements } \"},\"4744\":{\"t\":\"注意：若是父类的方法没有声明异常，则子类继承方法后，也不能声明异常。\"},\"4745\":{\"t\":\"通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。传递异常可以在方法签名处使用 throws 关键字声明可能会抛出的异常。\"},\"4746\":{\"t\":\"private static void readFile(String filePath) throws IOException { File file = new File(filePath); String result; BufferedReader reader = new BufferedReader(new FileReader(file)); while((result = reader.readLine())!=null) { System.out.println(result); } reader.close(); } \"},\"4747\":{\"t\":\"Throws抛出异常的规则：\"},\"4748\":{\"t\":\"如果是不可查异常（unchecked exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。\"},\"4749\":{\"t\":\"必须声明方法可抛出的任何可查异常（checked exception）。即如果一个方法可能出现受可查异常，要么用try-catch语句捕获，要么用throws子句声明将它抛出，否则会导致编译错误\"},\"4750\":{\"t\":\"仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。\"},\"4751\":{\"t\":\"调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。\"},\"4752\":{\"h\":\"异常的抛出(throw)\",\"a\":\"异常的抛出-throw\"},\"4753\":{\"t\":\"如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：\"},\"4754\":{\"t\":\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 5.0 / value; } \"},\"4755\":{\"t\":\"大部分情况下都不需要手动抛出异常，因为Java的大部分方法要么已经处理异常，要么已声明异常。所以一般都是捕获异常或者再往上抛。\"},\"4756\":{\"t\":\"有时我们会从 catch 中抛出一个异常，目的是为了改变异常的类型。多用于在多系统集成时，当某个子系统故障，异常类型可能有多种，可以用统一的异常类型向外暴露，不需暴露太多内部异常细节。\"},\"4757\":{\"t\":\"private static void readFile(String filePath) throws MyException { try { // code } catch (IOException e) { MyException ex = new MyException(\\\"read file failed.\\\"); ex.initCause(e); throw ex; } } \"},\"4758\":{\"h\":\"异常的自定义\",\"a\":\"异常的自定义\"},\"4759\":{\"t\":\"习惯上，定义一个异常类应包含两个构造函数，一个无参构造函数和一个带有详细描述信息的构造函数（Throwable 的 toString 方法会打印这些详细信息，调试时很有用）, 比如上面用到的自定义MyException：\"},\"4760\":{\"t\":\"public class MyException extends Exception { public MyException(){ } public MyException(String msg){ super(msg); } // ... } \"},\"4761\":{\"h\":\"异常的捕获\",\"a\":\"异常的捕获\"},\"4762\":{\"t\":\"异常捕获处理的方法通常有：\"},\"4763\":{\"t\":\"try-catch\"},\"4764\":{\"t\":\"try-catch-finally\"},\"4765\":{\"t\":\"try-finally\"},\"4766\":{\"t\":\"try-with-resource\"},\"4767\":{\"h\":\"try-catch\",\"a\":\"try-catch\"},\"4768\":{\"t\":\"在一个 try-catch 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理\"},\"4769\":{\"t\":\"private static void readFile(String filePath) { try { // code } catch (FileNotFoundException e) { // handle FileNotFoundException } catch (IOException e){ // handle IOException } } \"},\"4770\":{\"t\":\"同一个 catch 也可以捕获多种类型异常，用 | 隔开\"},\"4771\":{\"t\":\"private static void readFile(String filePath) { try { // code } catch (FileNotFoundException | UnknownHostException e) { // handle FileNotFoundException or UnknownHostException } catch (IOException e){ // handle IOException } } \"},\"4772\":{\"h\":\"try-catch-finally\",\"a\":\"try-catch-finally\"},\"4773\":{\"t\":\"常规语法\"},\"4774\":{\"t\":\"try { //执行程序代码，可能会出现异常 } catch(Exception e) { //捕获异常并处理 } finally { //必执行的代码 } \"},\"4775\":{\"t\":\"执行的顺序 \"},\"4776\":{\"t\":\"当try没有捕获到异常时：try语句块中的语句逐一被执行，程序将跳过catch语句块，执行finally语句块和其后的语句；\"},\"4777\":{\"t\":\"当try捕获到异常，catch语句块里没有处理此异常的情况：当try语句块里的某条语句出现异常时，而没有处理此异常的catch语句块时，此异常将会抛给JVM处理，finally语句块里的语句还是会被执行，但finally语句块后的语句不会被执行；\"},\"4778\":{\"t\":\"当try捕获到异常，catch语句块里有处理此异常的情况：在try语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到catch语句块，并与catch语句块逐一匹配，找到与之对应的处理程序，其他的catch语句块将不会被执行，而try语句块中，出现异常之后的语句也不会被执行，catch语句块执行完后，执行finally语句块里的语句，最后执行finally语句块后的语句；\"},\"4779\":{\"t\":\"img\"},\"4780\":{\"t\":\"一个完整的例子\"},\"4781\":{\"t\":\"private static void readFile(String filePath) throws MyException { File file = new File(filePath); String result; BufferedReader reader = null; try { reader = new BufferedReader(new FileReader(file)); while((result = reader.readLine())!=null) { System.out.println(result); } } catch (IOException e) { System.out.println(\\\"readFile method catch block.\\\"); MyException ex = new MyException(\\\"read file failed.\\\"); ex.initCause(e); throw ex; } finally { System.out.println(\\\"readFile method finally block.\\\"); if (null != reader) { try { reader.close(); } catch (IOException e) { e.printStackTrace(); } } } } \"},\"4782\":{\"h\":\"try-finally\",\"a\":\"try-finally\"},\"4783\":{\"t\":\"可以直接用try-finally吗？ 可以。\"},\"4784\":{\"t\":\"try块中引起异常，异常代码之后的语句不再执行，直接执行finally语句。 try块没有引发异常，则执行完try块就执行finally语句。\"},\"4785\":{\"t\":\"try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。\"},\"4786\":{\"t\":\"//以Lock加锁为例，演示try-finally ReentrantLock lock = new ReentrantLock(); try { //需要加锁的代码 } finally { lock.unlock(); //保证锁一定被释放 } \"},\"4787\":{\"t\":\"finally遇见如下情况不会执行\"},\"4788\":{\"t\":\"在前面的代码中用了System.exit()退出程序。\"},\"4789\":{\"t\":\"finally语句块中发生了异常。\"},\"4790\":{\"t\":\"程序所在的线程死亡。\"},\"4791\":{\"t\":\"关闭CPU。\"},\"4792\":{\"h\":\"try-with-resource\",\"a\":\"try-with-resource\"},\"4793\":{\"t\":\"try-with-resource是Java 7中引入的，很容易被忽略。\"},\"4794\":{\"t\":\"上面例子中，finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。\"},\"4795\":{\"t\":\"代码实现\"},\"4796\":{\"t\":\"private static void tryWithResourceTest(){ try (Scanner scanner = new Scanner(new FileInputStream(\\\"c:/abc\\\"),\\\"UTF-8\\\")){ // code } catch (IOException e){ // handle exception } } \"},\"4797\":{\"t\":\"看下Scanner\"},\"4798\":{\"t\":\"public final class Scanner implements Iterator<String>, Closeable { // ... } public interface Closeable extends AutoCloseable { public void close() throws IOException; } \"},\"4799\":{\"t\":\"try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。\"},\"4800\":{\"h\":\"异常基础总结\",\"a\":\"异常基础总结\"},\"4801\":{\"t\":\"try、catch和finally都不能单独使用，只能是try-catch、try-finally或者try-catch-finally。\"},\"4802\":{\"t\":\"try语句块监控代码，出现异常就停止执行下面的代码，然后将异常移交给catch语句块来处理。\"},\"4803\":{\"t\":\"finally语句块中的代码一定会被执行，常用于回收资源 。\"},\"4804\":{\"t\":\"throws：声明一个异常，告知方法调用者。\"},\"4805\":{\"t\":\"throw ：抛出一个异常，至于该异常被捕获还是继续抛出都与它无关。\"},\"4806\":{\"t\":\"Java编程思想一书中，对异常的总结。\"},\"4807\":{\"t\":\"在恰当的级别处理问题。（在知道该如何处理的情况下了捕获异常。）\"},\"4808\":{\"t\":\"解决问题并且重新调用产生异常的方法。\"},\"4809\":{\"t\":\"进行少许修补，然后绕过异常发生的地方继续执行。\"},\"4810\":{\"t\":\"用别的数据进行计算，以代替方法预计会返回的值。\"},\"4811\":{\"t\":\"把当前运行环境下能做的事尽量做完，然后把相同的异常重抛到更高层。\"},\"4812\":{\"t\":\"把当前运行环境下能做的事尽量做完，然后把不同的异常抛到更高层。\"},\"4813\":{\"t\":\"终止程序。\"},\"4814\":{\"t\":\"进行简化（如果你的异常模式使问题变得太复杂，那么用起来会非常痛苦）。\"},\"4815\":{\"t\":\"让类库和程序更安全。\"},\"4816\":{\"h\":\"常用的异常\",\"a\":\"常用的异常\"},\"4817\":{\"t\":\"在Java中提供了一些异常用来描述经常发生的错误，对于这些异常，有的需要程序员进行捕获处理或声明抛出，有的是由Java虚拟机自动进行捕获处理。Java中常见的异常类:\"},\"4818\":{\"t\":\"RuntimeException\"},\"4819\":{\"t\":\"java.lang.ArrayIndexOutOfBoundsException 数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。\"},\"4820\":{\"t\":\"java.lang.ArithmeticException 算术条件异常。譬如：整数除零等。\"},\"4821\":{\"t\":\"java.lang.NullPointerException 空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等\"},\"4822\":{\"t\":\"java.lang.ClassNotFoundException 找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。\"},\"4823\":{\"t\":\"java.lang.NegativeArraySizeException 数组长度为负异常\"},\"4824\":{\"t\":\"java.lang.ArrayStoreException 数组中包含不兼容的值抛出的异常\"},\"4825\":{\"t\":\"java.lang.SecurityException 安全性异常\"},\"4826\":{\"t\":\"java.lang.IllegalArgumentException 非法参数异常\"},\"4827\":{\"t\":\"IOException\"},\"4828\":{\"t\":\"IOException：操作输入流和输出流时可能出现的异常。\"},\"4829\":{\"t\":\"EOFException 文件已结束异常\"},\"4830\":{\"t\":\"FileNotFoundException 文件未找到异常\"},\"4831\":{\"t\":\"其他\"},\"4832\":{\"t\":\"ClassCastException 类型转换异常类\"},\"4833\":{\"t\":\"ArrayStoreException 数组中包含不兼容的值抛出的异常\"},\"4834\":{\"t\":\"SQLException 操作数据库异常类\"},\"4835\":{\"t\":\"NoSuchFieldException 字段未找到异常\"},\"4836\":{\"t\":\"NoSuchMethodException 方法未找到抛出的异常\"},\"4837\":{\"t\":\"NumberFormatException 字符串转换为数字抛出的异常\"},\"4838\":{\"t\":\"StringIndexOutOfBoundsException 字符串索引超出范围抛出的异常\"},\"4839\":{\"t\":\"IllegalAccessException 不允许访问某类异常\"},\"4840\":{\"t\":\"InstantiationException 当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常\"},\"4841\":{\"h\":\"异常实践\",\"a\":\"异常实践\"},\"4842\":{\"t\":\"提示\"},\"4843\":{\"t\":\"在 Java 中处理异常并不是一个简单的事情。不仅仅初学者很难理解，即使一些有经验的开发者也需要花费很多时间来思考如何处理异常，包括需要处理哪些异常，怎样处理等等。这也是绝大多数开发团队都会制定一些规则来规范进行异常处理的原因。\"},\"4844\":{\"t\":\"当你抛出或捕获异常的时候，有很多不同的情况需要考虑，而且大部分事情都是为了改善代码的可读性或者 API 的可用性。\"},\"4845\":{\"t\":\"异常不仅仅是一个错误控制机制，也是一个通信媒介。因此，为了和同事更好的合作，一个团队必须要制定出一个最佳实践和规则，只有这样，团队成员才能理解这些通用概念，同时在工作中使用它。\"},\"4846\":{\"t\":\"这里给出几个被很多团队使用的异常处理最佳实践。\"},\"4847\":{\"h\":\"只针对不正常的情况才使用异常\",\"a\":\"只针对不正常的情况才使用异常\"},\"4848\":{\"t\":\"异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。《阿里手册》中：【强制】Java 类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。\"},\"4849\":{\"t\":\"比如，在解析字符串形式的数字时，可能存在数字格式错误，不得通过catch Exception来实现\"},\"4850\":{\"t\":\"代码1\"},\"4851\":{\"t\":\"if (obj != null) { //... } \"},\"4852\":{\"t\":\"代码2\"},\"4853\":{\"t\":\"try { obj.method(); } catch (NullPointerException e) { //... } \"},\"4854\":{\"t\":\"主要原因有三点：\"},\"4855\":{\"t\":\"异常机制的设计初衷是用于不正常的情况，所以很少会会JVM实现试图对它们的性能进行优化。所以，创建、抛出和捕获异常的开销是很昂贵的。\"},\"4856\":{\"t\":\"把代码放在try-catch中返回阻止了JVM实现本来可能要执行的某些特定的优化。\"},\"4857\":{\"t\":\"对数组进行遍历的标准模式并不会导致冗余的检查，有些现代的JVM实现会将它们优化掉。\"},\"4858\":{\"h\":\"在 finally 块中清理资源或者使用 try-with-resource 语句\",\"a\":\"在-finally-块中清理资源或者使用-try-with-resource-语句\"},\"4859\":{\"t\":\"当使用类似InputStream这种需要使用后关闭的资源时，一个常见的错误就是在try块的最后关闭资源。\"},\"4860\":{\"t\":\"错误示例\"},\"4861\":{\"t\":\"public void doNotCloseResourceInTry() { FileInputStream inputStream = null; try { File file = new File(\\\"./tmp.txt\\\"); inputStream = new FileInputStream(file); // use the inputStream to read a file // do NOT do this inputStream.close(); } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"4862\":{\"t\":\"问题就是，只有没有异常抛出的时候，这段代码才可以正常工作。try 代码块内代码会正常执行，并且资源可以正常关闭。但是，使用 try 代码块是有原因的，一般调用一个或多个可能抛出异常的方法，而且，你自己也可能会抛出一个异常，这意味着代码可能不会执行到 try 代码块的最后部分。结果就是，你并没有关闭资源。\"},\"4863\":{\"t\":\"所以，你应该把清理工作的代码放到 finally 里去，或者使用 try-with-resource 特性。\"},\"4864\":{\"t\":\"方法一：使用 finally 代码块\"},\"4865\":{\"t\":\"与前面几行 try 代码块不同，finally 代码块总是会被执行。不管 try 代码块成功执行之后还是你在 catch 代码块中处理完异常后都会执行。因此，你可以确保你清理了所有打开的资源。\"},\"4866\":{\"t\":\"public void closeResourceInFinally() { FileInputStream inputStream = null; try { File file = new File(\\\"./tmp.txt\\\"); inputStream = new FileInputStream(file); // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } finally { if (inputStream != null) { try { inputStream.close(); } catch (IOException e) { log.error(e); } } } } \"},\"4867\":{\"t\":\"方法二：Java 7 的 try-with-resource 语法\"},\"4868\":{\"t\":\"如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。\"},\"4869\":{\"t\":\"public void automaticallyCloseResource() { File file = new File(\\\"./tmp.txt\\\"); try (FileInputStream inputStream = new FileInputStream(file);) { // use the inputStream to read a file } catch (FileNotFoundException e) { log.error(e); } catch (IOException e) { log.error(e); } } \"},\"4870\":{\"h\":\"尽量使用标准的异常\",\"a\":\"尽量使用标准的异常\"},\"4871\":{\"t\":\"代码重用是值得提倡的，这是一条通用规则，异常也不例外。\"},\"4872\":{\"t\":\"重用现有的异常有几个好处：\"},\"4873\":{\"t\":\"它使得你的API更加易于学习和使用，因为它与程序员原来已经熟悉的习惯用法是一致的。\"},\"4874\":{\"t\":\"对于用到这些API的程序而言，它们的可读性更好，因为它们不会充斥着程序员不熟悉的异常。\"},\"4875\":{\"t\":\"异常类越少，意味着内存占用越小，并且转载这些类的时间开销也越小。\"},\"4876\":{\"t\":\"Java标准异常中有几个是经常被使用的异常。如下表格：\"},\"4877\":{\"t\":\"异常\"},\"4878\":{\"t\":\"使用场合\"},\"4879\":{\"t\":\"IllegalArgumentException\"},\"4880\":{\"t\":\"参数的值不合适\"},\"4881\":{\"t\":\"IllegalStateException\"},\"4882\":{\"t\":\"参数的状态不合适\"},\"4883\":{\"t\":\"NullPointerException\"},\"4884\":{\"t\":\"在null被禁止的情况下参数值为null\"},\"4885\":{\"t\":\"IndexOutOfBoundsException\"},\"4886\":{\"t\":\"下标越界\"},\"4887\":{\"t\":\"ConcurrentModificationException\"},\"4888\":{\"t\":\"在禁止并发修改的情况下，对象检测到并发修改\"},\"4889\":{\"t\":\"UnsupportedOperationException\"},\"4890\":{\"t\":\"对象不支持客户请求的方法\"},\"4891\":{\"t\":\"虽然它们是Java平台库迄今为止最常被重用的异常，但是，在许可的条件下，其它的异常也可以被重用。例如，如果你要实现诸如复数或者矩阵之类的算术对象，那么重用ArithmeticException和NumberFormatException将是非常合适的。如果一个异常满足你的需要，则不要犹豫，使用就可以，不过你一定要确保抛出异常的条件与该异常的文档中描述的条件一致。这种重用必须建立在语义的基础上，而不是名字的基础上。\"},\"4892\":{\"t\":\"最后，一定要清楚，选择重用哪一种异常并没有必须遵循的规则。例如，考虑纸牌对象的情形，假设有一个用于发牌操作的方法，它的参数(handSize)是发一手牌的纸牌张数。假设调用者在这个参数中传递的值大于整副牌的剩余张数。那么这种情形既可以被解释为IllegalArgumentException(handSize的值太大)，也可以被解释为IllegalStateException(相对客户的请求而言，纸牌对象的纸牌太少)。\"},\"4893\":{\"h\":\"对异常进行文档说明\",\"a\":\"对异常进行文档说明\"},\"4894\":{\"t\":\"当在方法上声明抛出异常时，也需要进行文档说明。目的是为了给调用者提供尽可能多的信息，从而可以更好地避免或处理异常。\"},\"4895\":{\"t\":\"在 Javadoc 添加 @throws 声明，并且描述抛出异常的场景。\"},\"4896\":{\"t\":\"/** * Method description * * @throws MyBusinessException - businuess exception description */ public void doSomething(String input) throws MyBusinessException { // ... } \"},\"4897\":{\"t\":\"同时，在抛出MyBusinessException 异常时，需要尽可能精确地描述问题和相关信息，这样无论是打印到日志中还是在监控工具中，都能够更容易被人阅读，从而可以更好地定位具体错误信息、错误的严重程度等。\"},\"4898\":{\"h\":\"优先捕获最具体的异常\",\"a\":\"优先捕获最具体的异常\"},\"4899\":{\"t\":\"大多数 IDE 都可以帮助你实现这个最佳实践。当你尝试首先捕获较不具体的异常时，它们会报告无法访问的代码块。\"},\"4900\":{\"t\":\"但问题在于，只有匹配异常的第一个 catch 块会被执行。 因此，如果首先捕获 IllegalArgumentException ，则永远不会到达应该处理更具体的 NumberFormatException 的 catch 块，因为它是 IllegalArgumentException 的子类。\"},\"4901\":{\"t\":\"总是优先捕获最具体的异常类，并将不太具体的 catch 块添加到列表的末尾。\"},\"4902\":{\"t\":\"你可以在下面的代码片断中看到这样一个 try-catch 语句的例子。 第一个 catch 块处理所有 NumberFormatException 异常，第二个处理所有非 NumberFormatException 异常的IllegalArgumentException 异常。\"},\"4903\":{\"t\":\"public void catchMostSpecificExceptionFirst() { try { doSomething(\\\"A message\\\"); } catch (NumberFormatException e) { log.error(e); } catch (IllegalArgumentException e) { log.error(e) } } \"},\"4904\":{\"h\":\"不要捕获 Throwable 类\",\"a\":\"不要捕获-throwable-类\"},\"4905\":{\"t\":\"Throwable 是所有异常和错误的超类。你可以在 catch 子句中使用它，但是你永远不应该这样做！\"},\"4906\":{\"t\":\"如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。JVM 抛出错误，指出不应该由应用程序处理的严重问题。 典型的例子是 OutOfMemoryError 或者 StackOverflowError 。两者都是由应用程序控制之外的情况引起的，无法处理。\"},\"4907\":{\"t\":\"所以，最好不要捕获 Throwable ，除非你确定自己处于一种特殊的情况下能够处理错误。\"},\"4908\":{\"t\":\"public void doNotCatchThrowable() { try { // do something } catch (Throwable t) { // don't do this! } } \"},\"4909\":{\"h\":\"不要忽略异常\",\"a\":\"不要忽略异常\"},\"4910\":{\"t\":\"很多时候，开发者很有自信不会抛出异常，因此写了一个catch块，但是没有做任何处理或者记录日志。\"},\"4911\":{\"t\":\"public void doNotIgnoreExceptions() { try { // do something } catch (NumberFormatException e) { // this will never happen } } \"},\"4912\":{\"t\":\"但现实是经常会出现无法预料的异常，或者无法确定这里的代码未来是不是会改动(删除了阻止异常抛出的代码)，而此时由于异常被捕获，使得无法拿到足够的错误信息来定位问题。\"},\"4913\":{\"t\":\"合理的做法是至少要记录异常的信息。\"},\"4914\":{\"t\":\"public void logAnException() { try { // do something } catch (NumberFormatException e) { log.error(\\\"This should never happen: \\\" + e); // see this line } } \"},\"4915\":{\"h\":\"不要记录并抛出异常\",\"a\":\"不要记录并抛出异常\"},\"4916\":{\"t\":\"这可能是本文中最常被忽略的最佳实践。\"},\"4917\":{\"t\":\"可以发现很多代码甚至类库中都会有捕获异常、记录日志并再次抛出的逻辑。如下：\"},\"4918\":{\"t\":\"try { new Long(\\\"xyz\\\"); } catch (NumberFormatException e) { log.error(e); throw e; } \"},\"4919\":{\"t\":\"这个处理逻辑看着是合理的。但这经常会给同一个异常输出多条日志。如下：\"},\"4920\":{\"t\":\"17:44:28,945 ERROR TestExceptionHandling:65 - java.lang.NumberFormatException: For input string: \\\"xyz\\\" Exception in thread \\\"main\\\" java.lang.NumberFormatException: For input string: \\\"xyz\\\" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Long.parseLong(Long.java:589) at java.lang.Long.(Long.java:965) at com.stackify.example.TestExceptionHandling.logAndThrowException(TestExceptionHandling.java:63) at com.stackify.example.TestExceptionHandling.main(TestExceptionHandling.java:58) \"},\"4921\":{\"t\":\"如上所示，后面的日志也没有附加更有用的信息。如果想要提供更加有用的信息，那么可以将异常包装为自定义异常。\"},\"4922\":{\"t\":\"public void wrapException(String input) throws MyBusinessException { try { // do something } catch (NumberFormatException e) { throw new MyBusinessException(\\\"A message that describes the error.\\\", e); } } \"},\"4923\":{\"t\":\"因此，仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。\"},\"4924\":{\"h\":\"包装异常时不要抛弃原始的异常\",\"a\":\"包装异常时不要抛弃原始的异常\"},\"4925\":{\"t\":\"捕获标准异常并包装为自定义异常是一个很常见的做法。这样可以添加更为具体的异常信息并能够做针对的异常处理。 在你这样做时，请确保将原始异常设置为原因（注：参考下方代码 NumberFormatException e 中的原始异常 e ）。Exception 类提供了特殊的构造函数方法，它接受一个 Throwable 作为参数。否则，你将会丢失堆栈跟踪和原始异常的消息，这将会使分析导致异常的异常事件变得困难。\"},\"4926\":{\"t\":\"public void wrapException(String input) throws MyBusinessException { try { // do something } catch (NumberFormatException e) { throw new MyBusinessException(\\\"A message that describes the error.\\\", e); } } \"},\"4927\":{\"h\":\"不要使用异常控制程序的流程\",\"a\":\"不要使用异常控制程序的流程\"},\"4928\":{\"t\":\"不应该使用异常控制应用的执行流程，例如，本应该使用if语句进行条件判断的情况下，你却使用异常处理，这是非常不好的习惯，会严重影响应用的性能。\"},\"4929\":{\"h\":\"不要在finally块中使用return。\",\"a\":\"不要在finally块中使用return。\"},\"4930\":{\"t\":\"try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。\"},\"4931\":{\"t\":\"如下是一个反例：\"},\"4932\":{\"t\":\"private int x = 0; public int checkReturn() { try { // x等于1，此处不返回 return ++x; } finally { // 返回的结果是2 return ++x; } } \"},\"4933\":{\"h\":\"深入理解异常\",\"a\":\"深入理解异常\"},\"4934\":{\"t\":\"提示\"},\"4935\":{\"t\":\"我们再深入理解下异常，看下底层实现。\"},\"4936\":{\"h\":\"JVM处理异常的机制？\",\"a\":\"jvm处理异常的机制\"},\"4937\":{\"t\":\"提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。\"},\"4938\":{\"t\":\"public static void simpleTryCatch() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } } \"},\"4939\":{\"t\":\"上面的代码是一个很简单的例子，用来捕获处理一个潜在的空指针异常。\"},\"4940\":{\"t\":\"当然如果只是看简简单单的代码，我们很难看出什么高深之处，更没有了今天文章要谈论的内容。\"},\"4941\":{\"t\":\"所以这里我们需要借助一把神兵利器，它就是javap,一个用来拆解class文件的工具，和javac一样由JDK提供。\"},\"4942\":{\"t\":\"然后我们使用javap来分析这段代码（需要先使用javac编译）\"},\"4943\":{\"t\":\"//javap -c Main public static void simpleTryCatch(); Code: 0: invokestatic #3 // Method testNPE:()V 3: goto 11 6: astore_0 7: aload_0 8: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 11: return Exception table: from to target type 0 3 6 Class java/lang/Exception \"},\"4944\":{\"t\":\"看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。\"},\"4945\":{\"t\":\"异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下\"},\"4946\":{\"t\":\"from 可能发生异常的起始点\"},\"4947\":{\"t\":\"to 可能发生异常的结束点\"},\"4948\":{\"t\":\"target 上述from和to之前发生异常后的异常处理者的位置\"},\"4949\":{\"t\":\"type 异常处理者处理的异常的类信息\"},\"4950\":{\"t\":\"那么异常表用在什么时候呢\"},\"4951\":{\"t\":\"答案是异常发生的时候，当一个异常发生时\"},\"4952\":{\"t\":\"1.JVM会在当前出现异常的方法中，查找异常表，是否有合适的处理者来处理\"},\"4953\":{\"t\":\"2.如果当前方法异常表不为空，并且异常符合处理者的from和to节点，并且type也匹配，则JVM调用位于target的调用者来处理。\"},\"4954\":{\"t\":\"3.如果上一条未找到合理的处理者，则继续查找异常表中的剩余条目\"},\"4955\":{\"t\":\"4.如果当前方法的异常表无法处理，则向上查找（弹栈处理）刚刚调用该方法的调用处，并重复上面的操作。\"},\"4956\":{\"t\":\"5.如果所有的栈帧被弹出，仍然没有处理，则抛给当前的Thread，Thread则会终止。\"},\"4957\":{\"t\":\"6.如果当前Thread为最后一个非守护线程，且未处理异常，则会导致JVM终止运行。\"},\"4958\":{\"t\":\"以上就是JVM处理异常的一些机制。\"},\"4959\":{\"t\":\"try catch -finally\"},\"4960\":{\"t\":\"除了简单的try-catch外，我们还常常和finally做结合使用。比如这样的代码\"},\"4961\":{\"t\":\"public static void simpleTryCatchFinally() { try { testNPE(); } catch (Exception e) { e.printStackTrace(); } finally { System.out.println(\\\"Finally\\\"); } } \"},\"4962\":{\"t\":\"同样我们使用javap分析一下代码\"},\"4963\":{\"t\":\"public static void simpleTryCatchFinally(); Code: 0: invokestatic #3 // Method testNPE:()V 3: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 6: ldc #7 // String Finally 8: invokevirtual #8 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 11: goto 41 14: astore_0 15: aload_0 16: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 19: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 22: ldc #7 // String Finally 24: invokevirtual #8 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 27: goto 41 30: astore_1 31: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 34: ldc #7 // String Finally 36: invokevirtual #8 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 39: aload_1 40: athrow 41: return Exception table: from to target type 0 3 14 Class java/lang/Exception 0 3 30 any 14 19 30 any \"},\"4964\":{\"t\":\"和之前有所不同，这次异常表中，有三条数据，而我们仅仅捕获了一个Exception, 异常表的后两个item的type为any; 上面的三条异常表item的意思为:\"},\"4965\":{\"t\":\"如果0到3之间，发生了Exception类型的异常，调用14位置的异常处理者。\"},\"4966\":{\"t\":\"如果0到3之间，无论发生什么异常，都调用30位置的处理者\"},\"4967\":{\"t\":\"如果14到19之间（即catch部分），不论发生什么异常，都调用30位置的处理者。\"},\"4968\":{\"t\":\"再次分析上面的Java代码，finally里面的部分已经被提取到了try部分和catch部分。我们再次调一下代码来看一下\"},\"4969\":{\"t\":\"public static void simpleTryCatchFinally(); Code: //try 部分提取finally代码，如果没有异常发生，则执行输出finally操作，直至goto到41位置，执行返回操作。 0: invokestatic #3 // Method testNPE:()V 3: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 6: ldc #7 // String Finally 8: invokevirtual #8 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 11: goto 41 //catch部分提取finally代码，如果没有异常发生，则执行输出finally操作，直至执行got到41位置，执行返回操作。 14: astore_0 15: aload_0 16: invokevirtual #5 // Method java/lang/Exception.printStackTrace:()V 19: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 22: ldc #7 // String Finally 24: invokevirtual #8 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 27: goto 41 //finally部分的代码如果被调用，有可能是try部分，也有可能是catch部分发生异常。 30: astore_1 31: getstatic #6 // Field java/lang/System.out:Ljava/io/PrintStream; 34: ldc #7 // String Finally 36: invokevirtual #8 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 39: aload_1 40: athrow //如果异常没有被catch捕获，而是到了这里，执行完finally的语句后，仍然要把这个异常抛出去，传递给调用处。 41: return \"},\"4970\":{\"t\":\"Catch先后顺序的问题\"},\"4971\":{\"t\":\"我们在代码中的catch的顺序决定了异常处理者在异常表的位置，所以，越是具体的异常要先处理，否则就会出现下面的问题\"},\"4972\":{\"t\":\"private static void misuseCatchException() { try { testNPE(); } catch (Throwable t) { t.printStackTrace(); } catch (Exception e) { //error occurs during compilings with tips Exception Java.lang.Exception has already benn caught. e.printStackTrace(); } } \"},\"4973\":{\"t\":\"这段代码会导致编译失败，因为先捕获Throwable后捕获Exception，会导致后面的catch永远无法被执行。\"},\"4974\":{\"t\":\"Return 和finally的问题\"},\"4975\":{\"t\":\"这算是我们扩展的一个相对比较极端的问题，就是类似这样的代码，既有return，又有finally，那么finally导致会不会执行\"},\"4976\":{\"t\":\"public static String tryCatchReturn() { try { testNPE(); return \\\"OK\\\"; } catch (Exception e) { return \\\"ERROR\\\"; } finally { System.out.println(\\\"tryCatchReturn\\\"); } } \"},\"4977\":{\"t\":\"答案是finally会执行，那么还是使用上面的方法，我们来看一下为什么finally会执行。\"},\"4978\":{\"t\":\"public static java.lang.String tryCatchReturn(); Code: 0: invokestatic #3 // Method testNPE:()V 3: ldc #6 // String OK 5: astore_0 6: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream; 9: ldc #8 // String tryCatchReturn 11: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 14: aload_0 15: areturn 返回OK字符串，areturn意思为return a reference from a method 16: astore_0 17: ldc #10 // String ERROR 19: astore_1 20: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream; 23: ldc #8 // String tryCatchReturn 25: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 28: aload_1 29: areturn //返回ERROR字符串 30: astore_2 31: getstatic #7 // Field java/lang/System.out:Ljava/io/PrintStream; 34: ldc #8 // String tryCatchReturn 36: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 39: aload_2 40: athrow 如果catch有未处理的异常，抛出去。 \"},\"4979\":{\"h\":\"异常是否耗时？为什么会耗时？\",\"a\":\"异常是否耗时-为什么会耗时\"},\"4980\":{\"t\":\"说用异常慢，首先来看看异常慢在哪里？有多慢？下面的测试用例简单的测试了建立对象、建立异常对象、抛出并接住异常对象三者的耗时对比：\"},\"4981\":{\"t\":\"public class ExceptionTest { private int testTimes; public ExceptionTest(int testTimes) { this.testTimes = testTimes; } public void newObject() { long l = System.nanoTime(); for (int i = 0; i < testTimes; i++) { new Object(); } System.out.println(\\\"建立对象：\\\" + (System.nanoTime() - l)); } public void newException() { long l = System.nanoTime(); for (int i = 0; i < testTimes; i++) { new Exception(); } System.out.println(\\\"建立异常对象：\\\" + (System.nanoTime() - l)); } public void catchException() { long l = System.nanoTime(); for (int i = 0; i < testTimes; i++) { try { throw new Exception(); } catch (Exception e) { } } System.out.println(\\\"建立、抛出并接住异常对象：\\\" + (System.nanoTime() - l)); } public static void main(String[] args) { ExceptionTest test = new ExceptionTest(10000); test.newObject(); test.newException(); test.catchException(); } } \"},\"4982\":{\"t\":\"运行结果：\"},\"4983\":{\"t\":\"建立对象：575817 建立异常对象：9589080 建立、抛出并接住异常对象：47394475 \"},\"4984\":{\"t\":\"建立一个异常对象，是建立一个普通Object耗时的约20倍（实际上差距会比这个数字更大一些，因为循环也占用了时间，追求精确的读者可以再测一下空循环的耗时然后在对比前减掉这部分），而抛出、接住一个异常对象，所花费时间大约是建立异常对象的4倍。\"},\"4985\":{\"t\":\"那占用时间的“大头”：抛出、接住异常，系统到底做了什么事情？请参考这篇文章：\"},\"4986\":{\"t\":\"https://www.iteye.com/blog/icyfenix-857722\"},\"4987\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"4988\":{\"t\":\"https://blog.csdn.net/MacWx/article/details/90204111\"},\"4989\":{\"t\":\"https://blog.csdn.net/hguisu/article/details/6155636\"},\"4990\":{\"t\":\"https://blog.csdn.net/ThinkWon/article/details/101681073\"},\"4991\":{\"t\":\"https://www.cnblogs.com/skywang12345/p/3544287.html\"},\"4992\":{\"t\":\"https://www.codercto.com/a/33350.html\"},\"4993\":{\"t\":\"著作权归@pdai所有 原文链接：https://pdai.tech/md/java/basic/java-basic-x-exception.html\"},\"4994\":{\"h\":\"泛型机制详解\"},\"4995\":{\"t\":\"Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。本文综合多篇文章后，总结了Java 泛型的相关知识，希望可以提升你对Java中泛型的认知效率。@pdai\"},\"4996\":{\"h\":\"为什么会引入泛型\",\"a\":\"为什么会引入泛型\"},\"4997\":{\"t\":\"泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。\"},\"4998\":{\"t\":\"引入泛型的意义在于：\"},\"4999\":{\"t\":\"适用于多种数据类型执行相同的代码（代码复用）\"},\"5000\":{\"t\":\"我们通过一个例子来阐述，先看下下面的代码：\"},\"5001\":{\"t\":\"private static int add(int a, int b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a + b)); return a + b; } private static float add(float a, float b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a + b)); return a + b; } private static double add(double a, double b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a + b)); return a + b; } \"},\"5002\":{\"t\":\"如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：\"},\"5003\":{\"t\":\"private static <T extends Number> double add(T a, T b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a.doubleValue() + b.doubleValue())); return a.doubleValue() + b.doubleValue(); } \"},\"5004\":{\"t\":\"泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）\"},\"5005\":{\"t\":\"看下这个例子：\"},\"5006\":{\"t\":\"List list = new ArrayList(); list.add(\\\"xxString\\\"); list.add(100d); list.add(new Person()); \"},\"5007\":{\"t\":\"我们在使用上述list中，list中的元素都是Object类型（无法约束其中的类型），所以在取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现java.lang.ClassCastException异常。\"},\"5008\":{\"t\":\"引入泛型，它将提供类型的约束，提供编译前的检查：\"},\"5009\":{\"t\":\"List<String> list = new ArrayList<String>(); // list中只能放String, 不能放其它类型的元素 \"},\"5010\":{\"h\":\"泛型的基本使用\",\"a\":\"泛型的基本使用\"},\"5011\":{\"t\":\"提示\"},\"5012\":{\"t\":\"我们通过一些例子来学习泛型的使用；泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法。一些例子可以参考《李兴华 - Java实战经典》。@pdai\"},\"5013\":{\"h\":\"泛型类\",\"a\":\"泛型类\"},\"5014\":{\"t\":\"从一个简单的泛型类看起：\"},\"5015\":{\"t\":\"class Point<T>{ // 此处可以随便写标识符号，T是type的简称 private T var ; // var的类型由T指定，即：由外部指定 public T getVar(){ // 返回值的类型由外部决定 return var ; } public void setVar(T var){ // 设置的类型也由外部决定 this.var = var ; } } public class GenericsDemo06{ public static void main(String args[]){ Point<String> p = new Point<String>() ; // 里面的var类型为String类型 p.setVar(\\\"it\\\") ; // 设置字符串 System.out.println(p.getVar().length()) ; // 取得字符串的长度 } } \"},\"5016\":{\"t\":\"多元泛型\"},\"5017\":{\"t\":\"class Notepad<K,V>{ // 此处指定了两个泛型类型 private K key ; // 此变量的类型由外部决定 private V value ; // 此变量的类型由外部决定 public K getKey(){ return this.key ; } public V getValue(){ return this.value ; } public void setKey(K key){ this.key = key ; } public void setValue(V value){ this.value = value ; } } public class GenericsDemo09{ public static void main(String args[]){ Notepad<String,Integer> t = null ; // 定义两个泛型类型的对象 t = new Notepad<String,Integer>() ; // 里面的key为String，value为Integer t.setKey(\\\"汤姆\\\") ; // 设置第一个内容 t.setValue(20) ; // 设置第二个内容 System.out.print(\\\"姓名；\\\" + t.getKey()) ; // 取得信息 System.out.print(\\\"，年龄；\\\" + t.getValue()) ; // 取得信息 } } \"},\"5018\":{\"h\":\"泛型接口\",\"a\":\"泛型接口\"},\"5019\":{\"t\":\"简单的泛型接口\"},\"5020\":{\"t\":\"interface Info<T>{ // 在接口上定义泛型 public T getVar() ; // 定义抽象方法，抽象方法的返回值就是泛型类型 } class InfoImpl<T> implements Info<T>{ // 定义泛型接口的子类 private T var ; // 定义属性 public InfoImpl(T var){ // 通过构造方法设置属性内容 this.setVar(var) ; } public void setVar(T var){ this.var = var ; } public T getVar(){ return this.var ; } } public class GenericsDemo24{ public static void main(String arsg[]){ Info<String> i = null; // 声明接口对象 i = new InfoImpl<String>(\\\"汤姆\\\") ; // 通过子类实例化对象 System.out.println(\\\"内容：\\\" + i.getVar()) ; } } \"},\"5021\":{\"h\":\"泛型方法\",\"a\":\"泛型方法\"},\"5022\":{\"t\":\"泛型方法，是在调用方法的时候指明泛型的具体类型。重点看下泛型的方法（图参考自：https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html）\"},\"5023\":{\"t\":\"定义泛型方法语法格式\"},\"5024\":{\"t\":\"img\"},\"5025\":{\"t\":\"调用泛型方法语法格式\"},\"5026\":{\"t\":\"img\"},\"5027\":{\"t\":\"说明一下，定义泛型方法时，必须在返回值前边加一个<T>，来声明这是一个泛型方法，持有一个泛型T，然后才可以用泛型T作为方法的返回值。\"},\"5028\":{\"t\":\"Class<T>的作用就是指明泛型的具体类型，而Class<T>类型的变量c，可以用来创建泛型类的对象。\"},\"5029\":{\"t\":\"为什么要用变量c来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。\"},\"5030\":{\"t\":\"泛型方法要求的参数是Class<T>类型，而Class.forName()方法的返回值也是Class<T>，因此可以用Class.forName()作为参数。其中，forName()方法中的参数是何种类型，返回的Class<T>就是何种类型。在本例中，forName()方法中传入的是User类的完整路径，因此返回的是Class<User>类型的对象，因此调用泛型方法时，变量c的类型就是Class<User>，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。\"},\"5031\":{\"t\":\"当然，泛型方法不是仅仅可以有一个参数Class<T>，可以根据需要添加其他参数。\"},\"5032\":{\"t\":\"为什么要使用泛型方法呢？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。\"},\"5033\":{\"h\":\"泛型的上下限\",\"a\":\"泛型的上下限\"},\"5034\":{\"t\":\"先看下如下的代码，很明显是会报错的 （具体错误原因请参考后文）。\"},\"5035\":{\"t\":\"class A{} class B extends A {} // 如下两个方法不会报错 public static void funA(A a) { // ... } public static void funB(B b) { funA(b); // ... } // 如下funD方法会报错 public static void funC(List<A> listA) { // ... } public static void funD(List<B> listB) { funC(listB); // Unresolved compilation problem: The method doPrint(List<A>) in the type test is not applicable for the arguments (List<B>) // ... } \"},\"5036\":{\"t\":\"那么如何解决呢？\"},\"5037\":{\"t\":\"为了解决泛型中隐含的转换问题，Java泛型加入了类型参数的上下边界机制。<? extends A>表示该类型参数可以是A(上边界)或者A的子类类型。编译时擦除到类型A，即用A类型代替类型参数。这种方法可以解决开始遇到的问题，编译器知道类型参数的范围，如果传入的实例类型B是在这个范围内的话允许转换，这时只要一次类型转换就可以了，运行时会把对象当做A的实例看待。\"},\"5038\":{\"t\":\"public static void funC(List<? extends A> listA) { // ... } public static void funD(List<B> listB) { funC(listB); // OK // ... } \"},\"5039\":{\"t\":\"泛型上下限的引入\"},\"5040\":{\"t\":\"在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。\"},\"5041\":{\"t\":\"上限\"},\"5042\":{\"t\":\"class Info<T extends Number>{ // 此处泛型只能是数字类型 private T var ; // 定义泛型变量 public void setVar(T var){ this.var = var ; } public T getVar(){ return this.var ; } public String toString(){ // 直接打印 return this.var.toString() ; } } public class demo1{ public static void main(String args[]){ Info<Integer> i1 = new Info<Integer>() ; // 声明Integer的泛型对象 } } \"},\"5043\":{\"t\":\"下限\"},\"5044\":{\"t\":\"class Info<T>{ private T var ; // 定义泛型变量 public void setVar(T var){ this.var = var ; } public T getVar(){ return this.var ; } public String toString(){ // 直接打印 return this.var.toString() ; } } public class GenericsDemo21{ public static void main(String args[]){ Info<String> i1 = new Info<String>() ; // 声明String的泛型对象 Info<Object> i2 = new Info<Object>() ; // 声明Object的泛型对象 i1.setVar(\\\"hello\\\") ; i2.setVar(new Object()) ; fun(i1) ; fun(i2) ; } public static void fun(Info<? super String> temp){ // 只能接收String或Object类型的泛型，String类的父类只有Object类 System.out.print(temp + \\\", \\\") ; } } \"},\"5045\":{\"t\":\"小结\"},\"5046\":{\"t\":\"<?> 无限制通配符 <? extends E> extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类 <? super E> super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类 // 使用原则《Effictive Java》 // 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限 1. 如果参数化类型表示一个 T 的生产者，使用 < ? extends T>; 2. 如果它表示一个 T 的消费者，就使用 < ? super T>； 3. 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。 \"},\"5047\":{\"t\":\"再看一个实际例子，加深印象\"},\"5048\":{\"t\":\"private <E extends Comparable<? super E>> E max(List<? extends E> e1) { if (e1 == null){ return null; } //迭代器返回的元素属于 E 的某个子类型 Iterator<? extends E> iterator = e1.iterator(); E result = iterator.next(); while (iterator.hasNext()){ E next = iterator.next(); if (next.compareTo(result) > 0){ result = next; } } return result; } \"},\"5049\":{\"t\":\"上述代码中的类型参数 E 的范围是<E extends Comparable<? super E>>，我们可以分步查看：\"},\"5050\":{\"t\":\"要进行比较，所以 E 需要是可比较的类，因此需要 extends Comparable<…>（注意这里不要和继承的 extends 搞混了，不一样）\"},\"5051\":{\"t\":\"Comparable< ? super E> 要对 E 进行比较，即 E 的消费者，所以需要用 super\"},\"5052\":{\"t\":\"而参数 List< ? extends E> 表示要操作的数据是 E 的子类的列表，指定上限，这样容器才够大\"},\"5053\":{\"t\":\"多个限制\"},\"5054\":{\"t\":\"使用&符号\"},\"5055\":{\"t\":\"public class Client { //工资低于2500元的上斑族并且站立的乘客车票打8折 public static <T extends Staff & Passenger> void discount(T t){ if(t.getSalary()<2500 && t.isStanding()){ System.out.println(\\\"恭喜你！您的车票打八折！\\\"); } } public static void main(String[] args) { discount(new Me()); } } \"},\"5056\":{\"h\":\"泛型数组\",\"a\":\"泛型数组\"},\"5057\":{\"t\":\"具体可以参考下文中关于泛型数组的理解。\"},\"5058\":{\"t\":\"首先，我们泛型数组相关的申明：\"},\"5059\":{\"t\":\"List<String>[] list11 = new ArrayList<String>[10]; //编译错误，非法创建 List<String>[] list12 = new ArrayList<?>[10]; //编译错误，需要强转类型 List<String>[] list13 = (List<String>[]) new ArrayList<?>[10]; //OK，但是会有警告 List<?>[] list14 = new ArrayList<String>[10]; //编译错误，非法创建 List<?>[] list15 = new ArrayList<?>[10]; //OK List<String>[] list6 = new ArrayList[10]; //OK，但是会有警告 \"},\"5060\":{\"t\":\"那么通常我们如何用呢？\"},\"5061\":{\"t\":\"讨巧的使用场景\"},\"5062\":{\"t\":\"public class GenericsDemo30{ public static void main(String args[]){ Integer i[] = fun1(1,2,3,4,5,6) ; // 返回泛型数组 fun2(i) ; } public static <T> T[] fun1(T...arg){ // 接收可变参数 return arg ; // 返回泛型数组 } public static <T> void fun2(T param[]){ // 输出 System.out.print(\\\"接收泛型数组：\\\") ; for(T t:param){ System.out.print(t + \\\"、\\\") ; } } } \"},\"5063\":{\"t\":\"合理使用\"},\"5064\":{\"t\":\"public ArrayWithTypeToken(Class<T> type, int size) { array = (T[]) Array.newInstance(type, size); } \"},\"5065\":{\"t\":\"具体可以查看后文解释。\"},\"5066\":{\"h\":\"深入理解泛型\",\"a\":\"深入理解泛型\"},\"5067\":{\"t\":\"提示\"},\"5068\":{\"t\":\"我们通过泛型背后的类型擦除以及相关的问题来进一步理解泛型。@pdai\"},\"5069\":{\"h\":\"如何理解Java中的泛型是伪泛型？泛型中类型擦除\",\"a\":\"如何理解java中的泛型是伪泛型-泛型中类型擦除\"},\"5070\":{\"t\":\"Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。理解类型擦除对于用好泛型是很有帮助的，尤其是一些看起来“疑难杂症”的问题，弄明白了类型擦除也就迎刃而解了。\"},\"5071\":{\"t\":\"泛型的类型擦除原则是：\"},\"5072\":{\"t\":\"消除类型参数声明，即删除<>及其包围的部分。\"},\"5073\":{\"t\":\"根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。\"},\"5074\":{\"t\":\"为了保证类型安全，必要时插入强制类型转换代码。\"},\"5075\":{\"t\":\"自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。\"},\"5076\":{\"t\":\"那么如何进行擦除的呢？\"},\"5077\":{\"t\":\"参考自：http://softlab.sdut.edu.cn/blog/subaochen/2017/01/generics-type-erasure/\"},\"5078\":{\"t\":\"擦除类定义中的类型参数 - 无限制类型擦除\"},\"5079\":{\"t\":\"当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<T>和<?>的类型参数都被替换为Object。\"},\"5080\":{\"t\":\"img\"},\"5081\":{\"t\":\"擦除类定义中的类型参数 - 有限制类型擦除\"},\"5082\":{\"t\":\"当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<T extends Number>和<? extends Number>的类型参数被替换为Number，<? super Number>被替换为Object。\"},\"5083\":{\"t\":\"img\"},\"5084\":{\"t\":\"擦除方法定义中的类型参数\"},\"5085\":{\"t\":\"擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的，这里仅以擦除方法定义中的有限制类型参数为例。\"},\"5086\":{\"t\":\"img\"},\"5087\":{\"h\":\"如何证明类型的擦除呢？\",\"a\":\"如何证明类型的擦除呢\"},\"5088\":{\"t\":\"我们通过两个例子证明Java类型的类型擦除\"},\"5089\":{\"t\":\"原始类型相等\"},\"5090\":{\"t\":\"public class Test { public static void main(String[] args) { ArrayList<String> list1 = new ArrayList<String>(); list1.add(\\\"abc\\\"); ArrayList<Integer> list2 = new ArrayList<Integer>(); list2.add(123); System.out.println(list1.getClass() == list2.getClass()); // true } } \"},\"5091\":{\"t\":\"在这个例子中，我们定义了两个ArrayList数组，不过一个是ArrayList<String>泛型类型的，只能存储字符串；一个是ArrayList<Integer>泛型类型的，只能存储整数，最后，我们通过list1对象和list2对象的getClass()方法获取他们的类的信息，最后发现结果为true。说明泛型类型String和Integer都被擦除掉了，只剩下原始类型。\"},\"5092\":{\"t\":\"通过反射添加其它类型元素\"},\"5093\":{\"t\":\"public class Test { public static void main(String[] args) throws Exception { ArrayList<Integer> list = new ArrayList<Integer>(); list.add(1); //这样调用 add 方法只能存储整形，因为泛型类型的实例为 Integer list.getClass().getMethod(\\\"add\\\", Object.class).invoke(list, \\\"asd\\\"); for (int i = 0; i < list.size(); i++) { System.out.println(list.get(i)); } } } \"},\"5094\":{\"t\":\"在程序中定义了一个ArrayList泛型类型实例化为Integer对象，如果直接调用add()方法，那么只能存储整数数据，不过当我们利用反射调用add()方法的时候，却可以存储字符串，这说明了Integer泛型实例在编译之后被擦除掉了，只保留了原始类型。\"},\"5095\":{\"h\":\"如何理解类型擦除后保留的原始类型?\",\"a\":\"如何理解类型擦除后保留的原始类型\"},\"5096\":{\"t\":\"在上面，两次提到了原始类型，什么是原始类型？\"},\"5097\":{\"t\":\"原始类型 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用Object）替换。\"},\"5098\":{\"t\":\"原始类型Object\"},\"5099\":{\"t\":\"class Pair<T> { private T value; public T getValue() { return value; } public void setValue(T value) { this.value = value; } } \"},\"5100\":{\"t\":\"Pair的原始类型为:\"},\"5101\":{\"t\":\"class Pair { private Object value; public Object getValue() { return value; } public void setValue(Object value) { this.value = value; } } \"},\"5102\":{\"t\":\"因为在Pair<T>中，T 是一个无限定的类型变量，所以用Object替换，其结果就是一个普通的类，如同泛型加入Java语言之前的已经实现的样子。在程序中可以包含不同类型的Pair，如Pair<String>或Pair<Integer>，但是擦除类型后他们的就成为原始的Pair类型了，原始类型都是Object。\"},\"5103\":{\"t\":\"从上面章节，我们也可以明白ArrayList被擦除类型后，原始类型也变为Object，所以通过反射我们就可以存储字符串了。\"},\"5104\":{\"t\":\"如果类型变量有限定，那么原始类型就用第一个边界的类型变量类替换。\"},\"5105\":{\"t\":\"比如: Pair这样声明的话\"},\"5106\":{\"t\":\"public class Pair<T extends Comparable> {} \"},\"5107\":{\"t\":\"那么原始类型就是Comparable。\"},\"5108\":{\"t\":\"要区分原始类型和泛型变量的类型。\"},\"5109\":{\"t\":\"在调用泛型方法时，可以指定泛型，也可以不指定泛型:\"},\"5110\":{\"t\":\"在不指定泛型的情况下，泛型变量的类型为该方法中的几种类型的同一父类的最小级，直到Object\"},\"5111\":{\"t\":\"在指定泛型的情况下，该方法的几种类型必须是该泛型的实例的类型或者其子类\"},\"5112\":{\"t\":\"public class Test { public static void main(String[] args) { /**不指定泛型的时候*/ int i = Test.add(1, 2); //这两个参数都是Integer，所以T为Integer类型 Number f = Test.add(1, 1.2); //这两个参数一个是Integer，一个是Float，所以取同一父类的最小级，为Number Object o = Test.add(1, \\\"asd\\\"); //这两个参数一个是Integer，一个是String，所以取同一父类的最小级，为Object /**指定泛型的时候*/ int a = Test.<Integer>add(1, 2); //指定了Integer，所以只能为Integer类型或者其子类 int b = Test.<Integer>add(1, 2.2); //编译错误，指定了Integer，不能为Float Number c = Test.<Number>add(1, 2.2); //指定为Number，所以可以为Integer和Float } //这是一个简单的泛型方法 public static <T> T add(T x,T y){ return y; } } \"},\"5113\":{\"t\":\"其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型为Object，就比如ArrayList中，如果不指定泛型，那么这个ArrayList可以存储任意的对象。\"},\"5114\":{\"t\":\"Object泛型\"},\"5115\":{\"t\":\"public static void main(String[] args) { ArrayList list = new ArrayList(); list.add(1); list.add(\\\"121\\\"); list.add(new Date()); } \"},\"5116\":{\"h\":\"如何理解泛型的编译期检查？\",\"a\":\"如何理解泛型的编译期检查\"},\"5117\":{\"t\":\"既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量String会在编译的时候变为Object类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？\"},\"5118\":{\"t\":\"Java编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。\"},\"5119\":{\"t\":\"例如：\"},\"5120\":{\"t\":\"public static void main(String[] args) { ArrayList<String> list = new ArrayList<String>(); list.add(\\\"123\\\"); list.add(123);//编译错误 } \"},\"5121\":{\"t\":\"在上面的程序中，使用add方法添加一个整型，在IDE中，直接会报错，说明这就是在编译之前的检查，因为如果是在编译之后检查，类型擦除后，原始类型为Object，是应该允许任意引用类型添加的。可实际上却不是这样的，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。\"},\"5122\":{\"t\":\"那么，这个类型检查是针对谁的呢？我们先看看参数化类型和原始类型的兼容。\"},\"5123\":{\"t\":\"以 ArrayList举例子，以前的写法:\"},\"5124\":{\"t\":\"ArrayList list = new ArrayList(); \"},\"5125\":{\"t\":\"现在的写法:\"},\"5126\":{\"t\":\"ArrayList<String> list = new ArrayList<String>(); \"},\"5127\":{\"t\":\"如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：\"},\"5128\":{\"t\":\"ArrayList<String> list1 = new ArrayList(); //第一种 情况 ArrayList list2 = new ArrayList<String>(); //第二种 情况 \"},\"5129\":{\"t\":\"这样是没有错误的，不过会有个编译时警告。\"},\"5130\":{\"t\":\"不过在第一种情况，可以实现与完全使用泛型参数一样的效果，第二种则没有效果。\"},\"5131\":{\"t\":\"因为类型检查就是编译时完成的，new ArrayList()只是在内存中开辟了一个存储空间，可以存储任何类型对象，而真正涉及类型检查的是它的引用，因为我们是使用它引用list1来调用它的方法，比如说调用add方法，所以list1引用能完成泛型类型的检查。而引用list2没有使用泛型，所以不行。\"},\"5132\":{\"t\":\"举例子：\"},\"5133\":{\"t\":\"public class Test { public static void main(String[] args) { ArrayList<String> list1 = new ArrayList(); list1.add(\\\"1\\\"); //编译通过 list1.add(1); //编译错误 String str1 = list1.get(0); //返回类型就是String ArrayList list2 = new ArrayList<String>(); list2.add(\\\"1\\\"); //编译通过 list2.add(1); //编译通过 Object object = list2.get(0); //返回类型就是Object new ArrayList<String>().add(\\\"11\\\"); //编译通过 new ArrayList<String>().add(22); //编译错误 String str2 = new ArrayList<String>().get(0); //返回类型就是String } } \"},\"5134\":{\"t\":\"通过上面的例子，我们可以明白，类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。\"},\"5135\":{\"t\":\"泛型中参数话类型为什么不考虑继承关系？\"},\"5136\":{\"t\":\"在Java中，像下面形式的引用传递是不允许的:\"},\"5137\":{\"t\":\"ArrayList<String> list1 = new ArrayList<Object>(); //编译错误 ArrayList<Object> list2 = new ArrayList<String>(); //编译错误 \"},\"5138\":{\"t\":\"我们先看第一种情况，将第一种情况拓展成下面的形式：\"},\"5139\":{\"t\":\"ArrayList<Object> list1 = new ArrayList<Object>(); list1.add(new Object()); list1.add(new Object()); ArrayList<String> list2 = list1; //编译错误 \"},\"5140\":{\"t\":\"实际上，在第4行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用list2引用用get()方法取值的时候，返回的都是String类型的对象（上面提到了，类型检测是根据引用来决定的），可是它里面实际上已经被我们存放了Object类型的对象，这样就会有ClassCastException了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。（这也是泛型出现的原因，就是为了解决类型转换的问题，我们不能违背它的初衷）。\"},\"5141\":{\"t\":\"再看第二种情况，将第二种情况拓展成下面的形式：\"},\"5142\":{\"t\":\"ArrayList<String> list1 = new ArrayList<String>(); list1.add(new String()); list1.add(new String()); ArrayList<Object> list2 = list1; //编译错误 \"},\"5143\":{\"t\":\"没错，这样的情况比第一种情况好的多，最起码，在我们用list2取值的时候不会出现ClassCastException，因为是从String转换为Object。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。\"},\"5144\":{\"t\":\"我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。再说，你如果又用list2往里面add()新的对象，那么到时候取得时候，我怎么知道我取出来的到底是String类型的，还是Object类型的呢？\"},\"5145\":{\"t\":\"所以，要格外注意，泛型中的引用传递的问题。\"},\"5146\":{\"h\":\"如何理解泛型的多态？泛型的桥接方法\",\"a\":\"如何理解泛型的多态-泛型的桥接方法\"},\"5147\":{\"t\":\"类型擦除会造成多态的冲突，而JVM解决方法就是桥接方法。\"},\"5148\":{\"t\":\"现在有这样一个泛型类：\"},\"5149\":{\"t\":\"class Pair<T> { private T value; public T getValue() { return value; } public void setValue(T value) { this.value = value; } } \"},\"5150\":{\"t\":\"然后我们想要一个子类继承它。\"},\"5151\":{\"t\":\"class DateInter extends Pair<Date> { @Override public void setValue(Date value) { super.setValue(value); } @Override public Date getValue() { return super.getValue(); } } \"},\"5152\":{\"t\":\"在这个子类中，我们设定父类的泛型类型为Pair<Date>，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：将父类的泛型类型限定为Date，那么父类里面的两个方法的参数都为Date类型。\"},\"5153\":{\"t\":\"public Date getValue() { return value; } public void setValue(Date value) { this.value = value; } \"},\"5154\":{\"t\":\"所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的@Override标签中也可以看到，一点问题也没有，实际上是这样的吗？\"},\"5155\":{\"t\":\"分析：实际上，类型擦除后，父类的的泛型类型全部变为了原始类型Object，所以父类编译之后会变成下面的样子：\"},\"5156\":{\"t\":\"class Pair { private Object value; public Object getValue() { return value; } public void setValue(Object value) { this.value = value; } } \"},\"5157\":{\"t\":\"再看子类的两个重写的方法的类型：\"},\"5158\":{\"t\":\"@Override public void setValue(Date value) { super.setValue(value); } @Override public Date getValue() { return super.getValue(); } \"},\"5159\":{\"t\":\"先来分析setValue方法，父类的类型是Object，而子类的类型是Date，参数类型不一样，这如果实在普通的继承关系中，根本就不会是重写，而是重载。 我们在一个main方法测试一下：\"},\"5160\":{\"t\":\"public static void main(String[] args) throws ClassNotFoundException { DateInter dateInter = new DateInter(); dateInter.setValue(new Date()); dateInter.setValue(new Object()); //编译错误 } \"},\"5161\":{\"t\":\"如果是重载，那么子类中两个setValue方法，一个是参数Object类型，一个是Date类型，可是我们发现，根本就没有这样的一个子类继承自父类的Object类型参数的方法。所以说，却是是重写了，而不是重载了。\"},\"5162\":{\"t\":\"为什么会这样呢？\"},\"5163\":{\"t\":\"原因是这样的，我们传入父类的泛型类型是Date，Pair<Date>，我们的本意是将泛型类变为如下：\"},\"5164\":{\"t\":\"class Pair { private Date value; public Date getValue() { return value; } public void setValue(Date value) { this.value = value; } } \"},\"5165\":{\"t\":\"然后再子类中重写参数类型为Date的那两个方法，实现继承中的多态。\"},\"5166\":{\"t\":\"可是由于种种原因，虚拟机并不能将泛型类型变为Date，只能将类型擦除掉，变为原始类型Object。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM知道你的本意吗？知道！！！可是它能直接实现吗，不能！！！如果真的不能的话，那我们怎么去重写我们想要的Date类型参数的方法啊。\"},\"5167\":{\"t\":\"于是JVM采用了一个特殊的方法，来完成这项功能，那就是桥方法。\"},\"5168\":{\"t\":\"首先，我们用javap -c className的方式反编译下DateInter子类的字节码，结果如下：\"},\"5169\":{\"t\":\"class com.tao.test.DateInter extends com.tao.test.Pair<java.util.Date> { com.tao.test.DateInter(); Code: 0: aload_0 1: invokespecial #8 // Method com/tao/test/Pair.\\\"<init>\\\":()V 4: return public void setValue(java.util.Date); //我们重写的setValue方法 Code: 0: aload_0 1: aload_1 2: invokespecial #16 // Method com/tao/test/Pair.setValue:(Ljava/lang/Object;)V 5: return public java.util.Date getValue(); //我们重写的getValue方法 Code: 0: aload_0 1: invokespecial #23 // Method com/tao/test/Pair.getValue:()Ljava/lang/Object; 4: checkcast #26 // class java/util/Date 7: areturn public java.lang.Object getValue(); //编译时由编译器生成的桥方法 Code: 0: aload_0 1: invokevirtual #28 // Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法; 4: areturn public void setValue(java.lang.Object); //编译时由编译器生成的桥方法 Code: 0: aload_0 1: aload_1 2: checkcast #26 // class java/util/Date 5: invokevirtual #30 // Method setValue:(Ljava/util/Date; 去调用我们重写的setValue方法)V 8: return } \"},\"5170\":{\"t\":\"从编译的结果来看，我们本意重写setValue和getValue方法的子类，竟然有4个方法，其实不用惊奇，最后的两个方法，就是编译器自己生成的桥方法。可以看到桥方法的参数类型都是Object，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的setvalue和getValue方法上面的@Oveerride只不过是假象。而桥方法的内部实现，就只是去调用我们自己重写的那两个方法。\"},\"5171\":{\"t\":\"所以，虚拟机巧妙的使用了桥方法，来解决了类型擦除和多态的冲突。\"},\"5172\":{\"t\":\"不过，要提到一点，这里面的setValue和getValue这两个桥方法的意义又有不同。\"},\"5173\":{\"t\":\"setValue方法是为了解决类型擦除与多态之间的冲突。\"},\"5174\":{\"t\":\"而getValue却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：\"},\"5175\":{\"t\":\"那么父类的getValue方法如下：\"},\"5176\":{\"t\":\"public Object getValue() { return super.getValue(); } \"},\"5177\":{\"t\":\"而子类重写的方法是：\"},\"5178\":{\"t\":\"public Date getValue() { return super.getValue(); } \"},\"5179\":{\"t\":\"其实这在普通的类继承中也是普遍存在的重写，这就是协变。\"},\"5180\":{\"t\":\"并且，还有一点也许会有疑问，子类中的桥方法Object getValue()和Date getValue()是同时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写Java代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。\"},\"5181\":{\"h\":\"如何理解基本类型不能作为泛型类型？\",\"a\":\"如何理解基本类型不能作为泛型类型\"},\"5182\":{\"t\":\"比如，我们没有ArrayList<int>，只有ArrayList<Integer>, 为何？\"},\"5183\":{\"t\":\"因为当类型擦除后，ArrayList的原始类型变为Object，但是Object类型不能存储int值，只能引用Integer的值。\"},\"5184\":{\"t\":\"另外需要注意，我们能够使用list.add(1)是因为Java基础类型的自动装箱拆箱操作。\"},\"5185\":{\"h\":\"如何理解泛型类型不能实例化？\",\"a\":\"如何理解泛型类型不能实例化\"},\"5186\":{\"t\":\"不能实例化泛型类型, 这本质上是由于类型擦除决定的：\"},\"5187\":{\"t\":\"我们可以看到如下代码会在编译器中报错：\"},\"5188\":{\"t\":\"T test = new T(); // ERROR \"},\"5189\":{\"t\":\"因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件，所以自然就不行了，此外由于T 被擦除为 Object，如果可以 new T() 则就变成了 new Object()，失去了本意。 如果我们确实需要实例化一个泛型，应该如何做呢？可以通过反射实现：\"},\"5190\":{\"t\":\"static <T> T newTclass (Class < T > clazz) throws InstantiationException, IllegalAccessException { T obj = clazz.newInstance(); return obj; } \"},\"5191\":{\"h\":\"泛型数组：能不能采用具体的泛型类型进行初始化？\",\"a\":\"泛型数组-能不能采用具体的泛型类型进行初始化\"},\"5192\":{\"t\":\"我们先来看下Oracle官网提供的一个例子：\"},\"5193\":{\"t\":\"List<String>[] lsa = new List<String>[10]; // Not really allowed. Object o = lsa; Object[] oa = (Object[]) o; List<Integer> li = new ArrayList<Integer>(); li.add(new Integer(3)); oa[1] = li; // Unsound, but passes run time store check String s = lsa[1].get(0); // Run-time error ClassCastException. \"},\"5194\":{\"t\":\"由于 JVM 泛型的擦除机制，所以上面代码可以给 oa[1] 赋值为 ArrayList 也不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现 ClassCastException，如果可以进行泛型数组的声明则上面说的这种情况在编译期不会出现任何警告和错误，只有在运行时才会出错，但是泛型的出现就是为了消灭 ClassCastException，所以如果 Java 支持泛型数组初始化操作就是搬起石头砸自己的脚。\"},\"5195\":{\"t\":\"而对于下面的代码来说是成立的：\"},\"5196\":{\"t\":\"List<?>[] lsa = new List<?>[10]; // OK, array of unbounded wildcard type. Object o = lsa; Object[] oa = (Object[]) o; List<Integer> li = new ArrayList<Integer>(); li.add(new Integer(3)); oa[1] = li; // Correct. Integer i = (Integer) lsa[1].get(0); // OK \"},\"5197\":{\"t\":\"所以说采用通配符的方式初始化泛型数组是允许的，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。综述就是说Java 的泛型数组初始化时数组类型不能是具体的泛型类型，只能是通配符的形式，因为具体类型会导致可存入任意类型对象，在取出时会发生类型转换异常，会与泛型的设计思想冲突，而通配符形式本来就需要自己强转，符合预期。\"},\"5198\":{\"t\":\"Oracle 官方文档：https://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html在新窗口打开\"},\"5199\":{\"t\":\"更进一步的，我们看看如下的代码：\"},\"5200\":{\"t\":\"List<String>[] list11 = new ArrayList<String>[10]; //编译错误，非法创建 List<String>[] list12 = new ArrayList<?>[10]; //编译错误，需要强转类型 List<String>[] list13 = (List<String>[]) new ArrayList<?>[10]; //OK，但是会有警告 List<?>[] list14 = new ArrayList<String>[10]; //编译错误，非法创建 List<?>[] list15 = new ArrayList<?>[10]; //OK List<String>[] list6 = new ArrayList[10]; //OK，但是会有警告 \"},\"5201\":{\"t\":\"因为在 Java 中是不能创建一个确切的泛型类型的数组的，除非是采用通配符的方式且要做显式类型转换才可以。\"},\"5202\":{\"h\":\"泛型数组：如何正确的初始化泛型数组实例？\",\"a\":\"泛型数组-如何正确的初始化泛型数组实例\"},\"5203\":{\"t\":\"这个无论我们通过new ArrayList[10] 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，因此那些方式初始化泛型数组都不是最优雅的方式。\"},\"5204\":{\"t\":\"我们在使用到泛型数组的场景下应该尽量使用列表集合替换，此外也可以通过使用 java.lang.reflect.Array.newInstance(Class<T> componentType, int length) 方法来创建一个具有指定类型和维度的数组，如下：\"},\"5205\":{\"t\":\"public class ArrayWithTypeToken<T> { private T[] array; public ArrayWithTypeToken(Class<T> type, int size) { array = (T[]) Array.newInstance(type, size); } public void put(int index, T item) { array[index] = item; } public T get(int index) { return array[index]; } public T[] create() { return array; } } //... ArrayWithTypeToken<Integer> arrayToken = new ArrayWithTypeToken<Integer>(Integer.class, 100); Integer[] array = arrayToken.create(); \"},\"5206\":{\"t\":\"所以使用反射来初始化泛型数组算是优雅实现，因为泛型类型 T在运行时才能被确定下来，我们能创建泛型数组也必然是在 Java 运行时想办法，而运行时能起作用的技术最好的就是反射了。\"},\"5207\":{\"h\":\"如何理解泛型类中的静态方法和静态变量？\",\"a\":\"如何理解泛型类中的静态方法和静态变量\"},\"5208\":{\"t\":\"泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数\"},\"5209\":{\"t\":\"举例说明：\"},\"5210\":{\"t\":\"public class Test2<T> { public static T one; //编译错误 public static T show(T one){ //编译错误 return null; } } \"},\"5211\":{\"t\":\"因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。\"},\"5212\":{\"t\":\"但是要注意区分下面的一种情况：\"},\"5213\":{\"t\":\"public class Test2<T> { public static <T >T show(T one){ //这是正确的 return null; } } \"},\"5214\":{\"t\":\"因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的 T，而不是泛型类中的T。\"},\"5215\":{\"h\":\"如何理解异常中使用泛型？\",\"a\":\"如何理解异常中使用泛型\"},\"5216\":{\"t\":\"不能抛出也不能捕获泛型类的对象。事实上，泛型类扩展Throwable都不合法。例如：下面的定义将不会通过编译：\"},\"5217\":{\"t\":\"public class Problem<T> extends Exception { } \"},\"5218\":{\"t\":\"为什么不能扩展Throwable，因为异常都是在运行时捕获和抛出的，而在编译的时候，泛型信息全都会被擦除掉，那么，假设上面的编译可行，那么，在看下面的定义：\"},\"5219\":{\"t\":\"try{ } catch(Problem<Integer> e1) { } catch(Problem<Number> e2) { } \"},\"5220\":{\"t\":\"类型信息被擦除后，那么两个地方的catch都变为原始类型Object，那么也就是说，这两个地方的catch变的一模一样,就相当于下面的这样\"},\"5221\":{\"t\":\"try{ } catch(Problem<Object> e1) { } catch(Problem<Object> e2) { } \"},\"5222\":{\"t\":\"这个当然就是不行的。\"},\"5223\":{\"t\":\"不能再catch子句中使用泛型变量\"},\"5224\":{\"t\":\"public static <T extends Throwable> void doWork(Class<T> t) { try { ... } catch(T e) { //编译错误 ... } } \"},\"5225\":{\"t\":\"因为泛型信息在编译的时候已经变为原始类型，也就是说上面的T会变为原始类型Throwable，那么如果可以再catch子句中使用泛型变量，那么，下面的定义呢：\"},\"5226\":{\"t\":\"public static <T extends Throwable> void doWork(Class<T> t){ try { } catch(T e) { //编译错误 } catch(IndexOutOfBounds e) { } } \"},\"5227\":{\"t\":\"根据异常捕获的原则，一定是子类在前面，父类在后面，那么上面就违背了这个原则。即使你在使用该静态方法的使用T是ArrayIndexOutofBounds，在编译之后还是会变成Throwable，ArrayIndexOutofBounds是IndexOutofBounds的子类，违背了异常捕获的原则。所以java为了避免这样的情况，禁止在catch子句中使用泛型变量。\"},\"5228\":{\"t\":\"但是在异常声明中可以使用类型变量。下面方法是合法的。\"},\"5229\":{\"t\":\"public static<T extends Throwable> void doWork(T t) throws T { try{ ... } catch(Throwable realCause) { t.initCause(realCause); throw t; } } \"},\"5230\":{\"t\":\"上面的这样使用是没问题的。\"},\"5231\":{\"h\":\"如何获取泛型的参数类型？\",\"a\":\"如何获取泛型的参数类型\"},\"5232\":{\"t\":\"既然类型被擦除了，那么如何获取泛型的参数类型呢？可以通过反射（java.lang.reflect.Type）获取泛型\"},\"5233\":{\"t\":\"java.lang.reflect.Type是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 以上这些类型都实现Type接口。\"},\"5234\":{\"t\":\"public class GenericType<T> { private T data; public T getData() { return data; } public void setData(T data) { this.data = data; } public static void main(String[] args) { GenericType<String> genericType = new GenericType<String>() {}; Type superclass = genericType.getClass().getGenericSuperclass(); //getActualTypeArguments 返回确切的泛型参数, 如Map<String, Integer>返回[String, Integer] Type type = ((ParameterizedType) superclass).getActualTypeArguments()[0]; System.out.println(type);//class java.lang.String } } \"},\"5235\":{\"t\":\"其中 ParameterizedType:\"},\"5236\":{\"t\":\"public interface ParameterizedType extends Type { // 返回确切的泛型参数, 如Map<String, Integer>返回[String, Integer] Type[] getActualTypeArguments(); //返回当前class或interface声明的类型, 如List<?>返回List Type getRawType(); //返回所属类型. 如,当前类型为O<T>.I<S>, 则返回O<T>. 顶级类型将返回null Type getOwnerType(); } \"},\"5237\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"5238\":{\"t\":\"泛型作为Java基础知识点之一，网上知识点比较多也比较散，本文主要综合了网络上比较好的文章，方便你快速学习。（以下是一部分我参考的链接）\"},\"5239\":{\"t\":\"https://blog.csdn.net/sunxianghuang/article/details/51982979\"},\"5240\":{\"t\":\"https://blog.csdn.net/LonelyRoamer/article/details/7868820\"},\"5241\":{\"t\":\"https://docs.oracle.com/javase/tutorial/extra/generics/index.html\"},\"5242\":{\"t\":\"https://blog.csdn.net/s10461/article/details/53941091\"},\"5243\":{\"t\":\"https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html\"},\"5244\":{\"t\":\"https://www.cnblogs.com/rudy-laura/articles/3391013.html\"},\"5245\":{\"t\":\"https://www.jianshu.com/p/986f732ed2f1\"},\"5246\":{\"t\":\"https://blog.csdn.net/u011240877/article/details/53545041\"},\"5247\":{\"t\":\"著作权归@pdai所有 原文链接：https://pdai.tech/md/java/basic/java-basic-x-generic.html\"},\"5248\":{\"h\":\"知识点\"},\"5249\":{\"t\":\"本文主要对Java基础知识点进行总结。 @pdai\"},\"5250\":{\"h\":\"数据类型\",\"a\":\"数据类型\"},\"5251\":{\"h\":\"包装类型\",\"a\":\"包装类型\"},\"5252\":{\"t\":\"八个基本类型:\"},\"5253\":{\"t\":\"boolean/1\"},\"5254\":{\"t\":\"byte/8\"},\"5255\":{\"t\":\"char/16\"},\"5256\":{\"t\":\"short/16\"},\"5257\":{\"t\":\"int/32\"},\"5258\":{\"t\":\"float/32\"},\"5259\":{\"t\":\"long/64\"},\"5260\":{\"t\":\"double/64\"},\"5261\":{\"t\":\"基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\"},\"5262\":{\"t\":\"Integer x = 2; // 装箱 int y = x; // 拆箱 \"},\"5263\":{\"h\":\"缓存池\",\"a\":\"缓存池\"},\"5264\":{\"t\":\"new Integer(123) 与 Integer.valueOf(123) 的区别在于:\"},\"5265\":{\"t\":\"new Integer(123) 每次都会新建一个对象\"},\"5266\":{\"t\":\"Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\"},\"5267\":{\"t\":\"Integer x = new Integer(123); Integer y = new Integer(123); System.out.println(x == y); // false Integer z = Integer.valueOf(123); Integer k = Integer.valueOf(123); System.out.println(z == k); // true \"},\"5268\":{\"t\":\"valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\"},\"5269\":{\"t\":\"public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } \"},\"5270\":{\"t\":\"在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\"},\"5271\":{\"t\":\"static final int low = -128; static final int high; static final Integer cache[]; static { // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\\\"java.lang.Integer.IntegerCache.high\\\"); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; } \"},\"5272\":{\"t\":\"编译器会在缓冲池范围内的基本类型自动装箱过程调用 valueOf() 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。\"},\"5273\":{\"t\":\"Integer m = 123; Integer n = 123; System.out.println(m == n); // true \"},\"5274\":{\"t\":\"基本类型对应的缓冲池如下:\"},\"5275\":{\"t\":\"boolean values true and false\"},\"5276\":{\"t\":\"all byte values\"},\"5277\":{\"t\":\"short values between -128 and 127\"},\"5278\":{\"t\":\"int values between -128 and 127\"},\"5279\":{\"t\":\"char in the range \\\\u0000 to \\\\u007F\"},\"5280\":{\"t\":\"在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。\"},\"5281\":{\"t\":\"如果在缓冲池之外：\"},\"5282\":{\"t\":\"Integer m = 323; Integer n = 323; System.out.println(m == n); // false \"},\"5283\":{\"h\":\"String\",\"a\":\"string\"},\"5284\":{\"h\":\"概览\",\"a\":\"概览\"},\"5285\":{\"t\":\"String 被声明为 final，因此它不可被继承。\"},\"5286\":{\"t\":\"内部使用 char 数组存储数据，该数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\"},\"5287\":{\"t\":\"public final class String implements java.io.Serializable, Comparable<String>, CharSequence { /** The value is used for character storage. */ private final char value[]; \"},\"5288\":{\"h\":\"不可变的好处\",\"a\":\"不可变的好处\"},\"5289\":{\"t\":\"1. 可以缓存 hash 值\"},\"5290\":{\"t\":\"因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。\"},\"5291\":{\"t\":\"2. String Pool 的需要\"},\"5292\":{\"t\":\"如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。\"},\"5293\":{\"t\":\"img\"},\"5294\":{\"t\":\"3. 安全性\"},\"5295\":{\"t\":\"String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。\"},\"5296\":{\"t\":\"4. 线程安全\"},\"5297\":{\"t\":\"String 不可变性天生具备线程安全，可以在多个线程中安全地使用。\"},\"5298\":{\"t\":\"Program Creek : Why String is immutable in Java?在新窗口打开\"},\"5299\":{\"h\":\"String, StringBuffer and StringBuilder\",\"a\":\"string-stringbuffer-and-stringbuilder\"},\"5300\":{\"t\":\"1. 可变性\"},\"5301\":{\"t\":\"String 不可变\"},\"5302\":{\"t\":\"StringBuffer 和 StringBuilder 可变\"},\"5303\":{\"t\":\"2. 线程安全\"},\"5304\":{\"t\":\"String 不可变，因此是线程安全的\"},\"5305\":{\"t\":\"StringBuilder 不是线程安全的\"},\"5306\":{\"t\":\"StringBuffer 是线程安全的，内部使用 synchronized 进行同步\"},\"5307\":{\"t\":\"StackOverflow : String, StringBuffer, and StringBuilder在新窗口打开\"},\"5308\":{\"h\":\"String.intern()\",\"a\":\"string-intern\"},\"5309\":{\"t\":\"使用 String.intern() 可以保证相同内容的字符串变量引用同一的内存对象。\"},\"5310\":{\"t\":\"下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。\"},\"5311\":{\"t\":\"String s1 = new String(\\\"aaa\\\"); String s2 = new String(\\\"aaa\\\"); System.out.println(s1 == s2); // false String s3 = s1.intern(); System.out.println(s1.intern() == s3); // true \"},\"5312\":{\"t\":\"如果是采用 \\\"bbb\\\" 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。\"},\"5313\":{\"t\":\"String s4 = \\\"bbb\\\"; String s5 = \\\"bbb\\\"; System.out.println(s4 == s5); // true \"},\"5314\":{\"t\":\"HotSpot中字符串常量池保存哪里？永久代？方法区还是堆区？\"},\"5315\":{\"t\":\"运行时常量池（Runtime Constant Pool）是虚拟机规范中是方法区的一部分，在加载类和结构到虚拟机后，就会创建对应的运行时常量池；而字符串常量池是这个过程中常量字符串的存放位置。所以从这个角度，字符串常量池属于虚拟机规范中的方法区，它是一个逻辑上的概念；而堆区，永久代以及元空间是实际的存放位置。\"},\"5316\":{\"t\":\"不同的虚拟机对虚拟机的规范（比如方法区）是不一样的，只有 HotSpot 才有永久代的概念。\"},\"5317\":{\"t\":\"HotSpot也是发展的，由于一些问题在新窗口打开的存在，HotSpot考虑逐渐去永久代，对于不同版本的JDK，实际的存储位置是有差异的，具体看如下表格：\"},\"5318\":{\"t\":\"JDK版本\"},\"5319\":{\"t\":\"是否有永久代，字符串常量池放在哪里？\"},\"5320\":{\"t\":\"方法区逻辑上规范，由哪些实际的部分实现的？\"},\"5321\":{\"t\":\"jdk1.6及之前\"},\"5322\":{\"t\":\"有永久代，运行时常量池（包括字符串常量池），静态变量存放在永久代上\"},\"5323\":{\"t\":\"这个时期方法区在HotSpot中是由永久代来实现的，以至于这个时期说方法区就是指永久代\"},\"5324\":{\"t\":\"jdk1.7\"},\"5325\":{\"t\":\"有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中；\"},\"5326\":{\"t\":\"这个时期方法区在HotSpot中由永久代（类型信息、字段、方法、常量）和堆（字符串常量池、静态变量）共同实现\"},\"5327\":{\"t\":\"jdk1.8及之后\"},\"5328\":{\"t\":\"取消永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中\"},\"5329\":{\"t\":\"这个时期方法区在HotSpot中由本地内存的元空间（类型信息、字段、方法、常量）和堆（字符串常量池、静态变量）共同实现\"},\"5330\":{\"h\":\"运算\",\"a\":\"运算\"},\"5331\":{\"h\":\"参数传递\",\"a\":\"参数传递\"},\"5332\":{\"t\":\"Java 的参数是以值传递的形式传入方法中，而不是引用传递。\"},\"5333\":{\"t\":\"以下代码中 Dog dog 的 dog 是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中。因此在方法中改变指针引用的对象，那么这两个指针此时指向的是完全不同的对象，一方改变其所指向对象的内容对另一方没有影响。\"},\"5334\":{\"t\":\"public class Dog { String name; Dog(String name) { this.name = name; } String getName() { return this.name; } void setName(String name) { this.name = name; } String getObjectAddress() { return super.toString(); } } public class PassByValueExample { public static void main(String[] args) { Dog dog = new Dog(\\\"A\\\"); System.out.println(dog.getObjectAddress()); // Dog@4554617c func(dog); System.out.println(dog.getObjectAddress()); // Dog@4554617c System.out.println(dog.getName()); // A } private static void func(Dog dog) { System.out.println(dog.getObjectAddress()); // Dog@4554617c dog = new Dog(\\\"B\\\"); System.out.println(dog.getObjectAddress()); // Dog@74a14482 System.out.println(dog.getName()); // B } } \"},\"5335\":{\"t\":\"但是如果在方法中改变对象的字段值会改变原对象该字段值，因为改变的是同一个地址指向的内容。\"},\"5336\":{\"t\":\"class PassByValueExample { public static void main(String[] args) { Dog dog = new Dog(\\\"A\\\"); func(dog); System.out.println(dog.getName()); // B } private static void func(Dog dog) { dog.setName(\\\"B\\\"); } } \"},\"5337\":{\"t\":\"StackOverflow: Is Java “pass-by-reference” or “pass-by-value”?在新窗口打开\"},\"5338\":{\"h\":\"float 与 double\",\"a\":\"float-与-double\"},\"5339\":{\"t\":\"1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。Java 不能隐式执行向下转型，因为这会使得精度降低。\"},\"5340\":{\"t\":\"// float f = 1.1; \"},\"5341\":{\"t\":\"1.1f 字面量才是 float 类型。\"},\"5342\":{\"t\":\"float f = 1.1f; \"},\"5343\":{\"h\":\"隐式类型转换\",\"a\":\"隐式类型转换\"},\"5344\":{\"t\":\"因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。\"},\"5345\":{\"t\":\"short s1 = 1; // s1 = s1 + 1; \"},\"5346\":{\"t\":\"但是使用 += 运算符可以执行隐式类型转换。\"},\"5347\":{\"t\":\"s1 += 1; \"},\"5348\":{\"t\":\"上面的语句相当于将 s1 + 1 的计算结果进行了向下转型:\"},\"5349\":{\"t\":\"s1 = (short) (s1 + 1); \"},\"5350\":{\"t\":\"StackOverflow : Why don't Java's +=, -=, *=, /= compound assignment operators require casting?在新窗口打开\"},\"5351\":{\"h\":\"switch\",\"a\":\"switch\"},\"5352\":{\"t\":\"从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。\"},\"5353\":{\"t\":\"String s = \\\"a\\\"; switch (s) { case \\\"a\\\": System.out.println(\\\"aaa\\\"); break; case \\\"b\\\": System.out.println(\\\"bbb\\\"); break; } \"},\"5354\":{\"t\":\"switch 不支持 long，是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断，如果值过于复杂，那么还是用 if 比较合适。\"},\"5355\":{\"t\":\"// long x = 111; // switch (x) { // Incompatible types. Found: 'long', required: 'char, byte, short, int, Character, Byte, Short, Integer, String, or an enum' // case 111: // System.out.println(111); // break; // case 222: // System.out.println(222); // break; // } \"},\"5356\":{\"t\":\"StackOverflow : Why can't your switch statement data type be long, Java?在新窗口打开\"},\"5357\":{\"h\":\"继承\",\"a\":\"继承\"},\"5358\":{\"h\":\"访问权限\",\"a\":\"访问权限\"},\"5359\":{\"t\":\"Java 中有三个访问权限修饰符: private、protected 以及 public，如果不加访问修饰符，表示包级可见。\"},\"5360\":{\"t\":\"可以对类或类中的成员(字段以及方法)加上访问修饰符。\"},\"5361\":{\"t\":\"类可见表示其它类可以用这个类创建实例对象。\"},\"5362\":{\"t\":\"成员可见表示其它类可以用这个类的实例对象访问到该成员；\"},\"5363\":{\"t\":\"protected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。\"},\"5364\":{\"t\":\"设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。\"},\"5365\":{\"t\":\"如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。\"},\"5366\":{\"t\":\"字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 共有字段，如果在某个时刻，我们想要使用 int 去存储 id 字段，那么就需要去修改所有的客户端代码。\"},\"5367\":{\"t\":\"public class AccessExample { public String id; } \"},\"5368\":{\"t\":\"可以使用公有的 getter 和 setter 方法来替换公有字段，这样的话就可以控制对字段的修改行为。\"},\"5369\":{\"t\":\"public class AccessExample { private int id; public String getId() { return id + \\\"\\\"; } public void setId(String id) { this.id = Integer.valueOf(id); } } \"},\"5370\":{\"t\":\"但是也有例外，如果是包级私有的类或者私有的嵌套类，那么直接暴露成员不会有特别大的影响。\"},\"5371\":{\"t\":\"public class AccessWithInnerClassExample { private class InnerClass { int x; } private InnerClass innerClass; public AccessWithInnerClassExample() { innerClass = new InnerClass(); } public int getValue() { return innerClass.x; // 直接访问 } } \"},\"5372\":{\"h\":\"抽象类与接口\",\"a\":\"抽象类与接口\"},\"5373\":{\"t\":\"1. 抽象类\"},\"5374\":{\"t\":\"抽象类和抽象方法都使用 abstract 关键字进行声明。抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。\"},\"5375\":{\"t\":\"抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。\"},\"5376\":{\"t\":\"public abstract class AbstractClassExample { protected int x; private int y; public abstract void func1(); public void func2() { System.out.println(\\\"func2\\\"); } } public class AbstractExtendClassExample extends AbstractClassExample { @Override public void func1() { System.out.println(\\\"func1\\\"); } } // AbstractClassExample ac1 = new AbstractClassExample(); // 'AbstractClassExample' is abstract; cannot be instantiated AbstractClassExample ac2 = new AbstractExtendClassExample(); ac2.func1(); \"},\"5377\":{\"t\":\"2. 接口\"},\"5378\":{\"t\":\"接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。\"},\"5379\":{\"t\":\"从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。\"},\"5380\":{\"t\":\"接口的成员(字段 + 方法)默认都是 public 的，并且不允许定义为 private 或者 protected。\"},\"5381\":{\"t\":\"接口的字段默认都是 static 和 final 的。\"},\"5382\":{\"t\":\"public interface InterfaceExample { void func1(); default void func2(){ System.out.println(\\\"func2\\\"); } int x = 123; // int y; // Variable 'y' might not have been initialized public int z = 0; // Modifier 'public' is redundant for interface fields // private int k = 0; // Modifier 'private' not allowed here // protected int l = 0; // Modifier 'protected' not allowed here // private void fun3(); // Modifier 'private' not allowed here } public class InterfaceImplementExample implements InterfaceExample { @Override public void func1() { System.out.println(\\\"func1\\\"); } } // InterfaceExample ie1 = new InterfaceExample(); // 'InterfaceExample' is abstract; cannot be instantiated InterfaceExample ie2 = new InterfaceImplementExample(); ie2.func1(); System.out.println(InterfaceExample.x); \"},\"5383\":{\"t\":\"3. 比较\"},\"5384\":{\"t\":\"从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。\"},\"5385\":{\"t\":\"从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。\"},\"5386\":{\"t\":\"接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\"},\"5387\":{\"t\":\"接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。\"},\"5388\":{\"t\":\"4. 使用选择\"},\"5389\":{\"t\":\"使用接口:\"},\"5390\":{\"t\":\"需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；\"},\"5391\":{\"t\":\"需要使用多重继承。\"},\"5392\":{\"t\":\"使用抽象类:\"},\"5393\":{\"t\":\"需要在几个相关的类中共享代码。\"},\"5394\":{\"t\":\"需要能控制继承来的成员的访问权限，而不是都为 public。\"},\"5395\":{\"t\":\"需要继承非静态和非常量字段。\"},\"5396\":{\"t\":\"在很多情况下，接口优先于抽象类，因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。\"},\"5397\":{\"t\":\"深入理解 abstract class 和 interface在新窗口打开\"},\"5398\":{\"t\":\"When to Use Abstract Class and Interface在新窗口打开\"},\"5399\":{\"h\":\"super\",\"a\":\"super\"},\"5400\":{\"t\":\"访问父类的构造函数: 可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。\"},\"5401\":{\"t\":\"访问父类的成员: 如果子类重写了父类的中某个方法的实现，可以通过使用 super 关键字来引用父类的方法实现。\"},\"5402\":{\"t\":\"public class SuperExample { protected int x; protected int y; public SuperExample(int x, int y) { this.x = x; this.y = y; } public void func() { System.out.println(\\\"SuperExample.func()\\\"); } } public class SuperExtendExample extends SuperExample { private int z; public SuperExtendExample(int x, int y, int z) { super(x, y); this.z = z; } @Override public void func() { super.func(); System.out.println(\\\"SuperExtendExample.func()\\\"); } } SuperExample e = new SuperExtendExample(1, 2, 3); e.func(); SuperExample.func() SuperExtendExample.func() \"},\"5403\":{\"t\":\"Using the Keyword super在新窗口打开\"},\"5404\":{\"h\":\"重写与重载\",\"a\":\"重写与重载\"},\"5405\":{\"t\":\"1. 重写(Override)\"},\"5406\":{\"t\":\"存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\"},\"5407\":{\"t\":\"为了满足里式替换原则，重写有以下两个限制:\"},\"5408\":{\"t\":\"子类方法的访问权限必须大于等于父类方法；\"},\"5409\":{\"t\":\"子类方法的返回类型必须是父类方法返回类型或为其子类型。\"},\"5410\":{\"t\":\"使用 @Override 注解，可以让编译器帮忙检查是否满足上面的两个限制条件。\"},\"5411\":{\"t\":\"2. 重载(Overload)\"},\"5412\":{\"t\":\"存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\"},\"5413\":{\"t\":\"应该注意的是，返回值不同，其它都相同不算是重载。\"},\"5414\":{\"h\":\"Object 通用方法\",\"a\":\"object-通用方法\"},\"5415\":{\"h\":\"概览\",\"a\":\"概览-1\"},\"5416\":{\"t\":\"public final native Class<?> getClass() public native int hashCode() public boolean equals(Object obj) protected native Object clone() throws CloneNotSupportedException public String toString() public final native void notify() public final native void notifyAll() public final native void wait(long timeout) throws InterruptedException public final void wait(long timeout, int nanos) throws InterruptedException public final void wait() throws InterruptedException protected void finalize() throws Throwable {} \"},\"5417\":{\"h\":\"equals()\",\"a\":\"equals\"},\"5418\":{\"t\":\"1. 等价关系\"},\"5419\":{\"t\":\"(一)自反性\"},\"5420\":{\"t\":\"x.equals(x); // true \"},\"5421\":{\"t\":\"(二)对称性\"},\"5422\":{\"t\":\"x.equals(y) == y.equals(x); // true \"},\"5423\":{\"t\":\"(三)传递性\"},\"5424\":{\"t\":\"if (x.equals(y) && y.equals(z)) x.equals(z); // true; \"},\"5425\":{\"t\":\"(四)一致性\"},\"5426\":{\"t\":\"多次调用 equals() 方法结果不变\"},\"5427\":{\"t\":\"x.equals(y) == x.equals(y); // true \"},\"5428\":{\"t\":\"(五)与 null 的比较\"},\"5429\":{\"t\":\"对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false\"},\"5430\":{\"t\":\"x.equals(null); // false; \"},\"5431\":{\"t\":\"2. equals() 与 ==\"},\"5432\":{\"t\":\"对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。\"},\"5433\":{\"t\":\"对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。\"},\"5434\":{\"t\":\"Integer x = new Integer(1); Integer y = new Integer(1); System.out.println(x.equals(y)); // true System.out.println(x == y); // false \"},\"5435\":{\"t\":\"3. 实现\"},\"5436\":{\"t\":\"检查是否为同一个对象的引用，如果是直接返回 true；\"},\"5437\":{\"t\":\"检查是否是同一个类型，如果不是，直接返回 false；\"},\"5438\":{\"t\":\"将 Object 对象进行转型；\"},\"5439\":{\"t\":\"判断每个关键域是否相等。\"},\"5440\":{\"t\":\"public class EqualExample { private int x; private int y; private int z; public EqualExample(int x, int y, int z) { this.x = x; this.y = y; this.z = z; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; EqualExample that = (EqualExample) o; if (x != that.x) return false; if (y != that.y) return false; return z == that.z; } } \"},\"5441\":{\"h\":\"hashCode()\",\"a\":\"hashcode\"},\"5442\":{\"t\":\"hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。\"},\"5443\":{\"t\":\"在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。\"},\"5444\":{\"t\":\"下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的，只在集合中添加一个对象，但是因为 EqualExample 没有实现 hasCode() 方法，因此这两个对象的散列值是不同的，最终导致集合添加了两个等价的对象。\"},\"5445\":{\"t\":\"EqualExample e1 = new EqualExample(1, 1, 1); EqualExample e2 = new EqualExample(1, 1, 1); System.out.println(e1.equals(e2)); // true HashSet<EqualExample> set = new HashSet<>(); set.add(e1); set.add(e2); System.out.println(set.size()); // 2 \"},\"5446\":{\"t\":\"理想的散列函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的散列值上。这就要求了散列函数要把所有域的值都考虑进来，可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。\"},\"5447\":{\"t\":\"一个数与 31 相乘可以转换成移位和减法: 31*x == (x<<5)-x，编译器会自动进行这个优化。\"},\"5448\":{\"t\":\"@Override public int hashCode() { int result = 17; result = 31 * result + x; result = 31 * result + y; result = 31 * result + z; return result; } \"},\"5449\":{\"h\":\"toString()\",\"a\":\"tostring\"},\"5450\":{\"t\":\"默认返回 ToStringExample@4554617c 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。\"},\"5451\":{\"t\":\"public class ToStringExample { private int number; public ToStringExample(int number) { this.number = number; } } ToStringExample example = new ToStringExample(123); System.out.println(example.toString()); ToStringExample@4554617c \"},\"5452\":{\"h\":\"clone()\",\"a\":\"clone\"},\"5453\":{\"t\":\"1. cloneable\"},\"5454\":{\"t\":\"clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。\"},\"5455\":{\"t\":\"public class CloneExample { private int a; private int b; } CloneExample e1 = new CloneExample(); // CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object' \"},\"5456\":{\"t\":\"重写 clone() 得到以下实现:\"},\"5457\":{\"t\":\"public class CloneExample { private int a; private int b; @Override protected CloneExample clone() throws CloneNotSupportedException { return (CloneExample)super.clone(); } } CloneExample e1 = new CloneExample(); try { CloneExample e2 = e1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } java.lang.CloneNotSupportedException: CloneExample \"},\"5458\":{\"t\":\"以上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。\"},\"5459\":{\"t\":\"应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。\"},\"5460\":{\"t\":\"public class CloneExample implements Cloneable { private int a; private int b; @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } \"},\"5461\":{\"t\":\"2. 浅拷贝\"},\"5462\":{\"t\":\"拷贝对象和原始对象的引用类型引用同一个对象。\"},\"5463\":{\"t\":\"public class ShallowCloneExample implements Cloneable { private int[] arr; public ShallowCloneExample() { arr = new int[10]; for (int i = 0; i < arr.length; i++) { arr[i] = i; } } public void set(int index, int value) { arr[index] = value; } public int get(int index) { return arr[index]; } @Override protected ShallowCloneExample clone() throws CloneNotSupportedException { return (ShallowCloneExample) super.clone(); } } ShallowCloneExample e1 = new ShallowCloneExample(); ShallowCloneExample e2 = null; try { e2 = e1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } e1.set(2, 222); System.out.println(e2.get(2)); // 222 \"},\"5464\":{\"t\":\"3. 深拷贝\"},\"5465\":{\"t\":\"拷贝对象和原始对象的引用类型引用不同对象。\"},\"5466\":{\"t\":\"public class DeepCloneExample implements Cloneable { private int[] arr; public DeepCloneExample() { arr = new int[10]; for (int i = 0; i < arr.length; i++) { arr[i] = i; } } public void set(int index, int value) { arr[index] = value; } public int get(int index) { return arr[index]; } @Override protected DeepCloneExample clone() throws CloneNotSupportedException { DeepCloneExample result = (DeepCloneExample) super.clone(); result.arr = new int[arr.length]; for (int i = 0; i < arr.length; i++) { result.arr[i] = arr[i]; } return result; } } DeepCloneExample e1 = new DeepCloneExample(); DeepCloneExample e2 = null; try { e2 = e1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } e1.set(2, 222); System.out.println(e2.get(2)); // 2 \"},\"5467\":{\"t\":\"4. clone() 的替代方案\"},\"5468\":{\"t\":\"使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。\"},\"5469\":{\"t\":\"public class CloneConstructorExample { private int[] arr; public CloneConstructorExample() { arr = new int[10]; for (int i = 0; i < arr.length; i++) { arr[i] = i; } } public CloneConstructorExample(CloneConstructorExample original) { arr = new int[original.arr.length]; for (int i = 0; i < original.arr.length; i++) { arr[i] = original.arr[i]; } } public void set(int index, int value) { arr[index] = value; } public int get(int index) { return arr[index]; } } CloneConstructorExample e1 = new CloneConstructorExample(); CloneConstructorExample e2 = new CloneConstructorExample(e1); e1.set(2, 222); System.out.println(e2.get(2)); // 2 \"},\"5470\":{\"h\":\"关键字\",\"a\":\"关键字\"},\"5471\":{\"h\":\"final\",\"a\":\"final\"},\"5472\":{\"t\":\"1. 数据\"},\"5473\":{\"t\":\"声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\"},\"5474\":{\"t\":\"对于基本类型，final 使数值不变；\"},\"5475\":{\"t\":\"对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。\"},\"5476\":{\"t\":\"final int x = 1; // x = 2; // cannot assign value to final variable 'x' final A y = new A(); y.a = 1; \"},\"5477\":{\"t\":\"2. 方法\"},\"5478\":{\"t\":\"声明方法不能被子类重写。\"},\"5479\":{\"t\":\"private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\"},\"5480\":{\"t\":\"3. 类\"},\"5481\":{\"t\":\"声明类不允许被继承。\"},\"5482\":{\"h\":\"static\",\"a\":\"static\"},\"5483\":{\"t\":\"1. 静态变量\"},\"5484\":{\"t\":\"静态变量: 又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它；静态变量在内存中只存在一份。\"},\"5485\":{\"t\":\"实例变量: 每创建一个实例就会产生一个实例变量，它与该实例同生共死。\"},\"5486\":{\"t\":\"public class A { private int x; // 实例变量 private static int y; // 静态变量 public static void main(String[] args) { // int x = A.x; // Non-static field 'x' cannot be referenced from a static context A a = new A(); int x = a.x; int y = A.y; } } \"},\"5487\":{\"t\":\"2. 静态方法\"},\"5488\":{\"t\":\"静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法(abstract)。\"},\"5489\":{\"t\":\"public abstract class A { public static void func1(){ } // public abstract static void func2(); // Illegal combination of modifiers: 'abstract' and 'static' } \"},\"5490\":{\"t\":\"只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。\"},\"5491\":{\"t\":\"public class A { private static int x; private int y; public static void func1(){ int a = x; // int b = y; // Non-static field 'y' cannot be referenced from a static context // int b = this.y; // 'A.this' cannot be referenced from a static context } } \"},\"5492\":{\"t\":\"3. 静态语句块\"},\"5493\":{\"t\":\"静态语句块在类初始化时运行一次。\"},\"5494\":{\"t\":\"public class A { static { System.out.println(\\\"123\\\"); } public static void main(String[] args) { A a1 = new A(); A a2 = new A(); } } 123 \"},\"5495\":{\"t\":\"4. 静态内部类\"},\"5496\":{\"t\":\"非静态内部类依赖于外部类的实例，而静态内部类不需要。\"},\"5497\":{\"t\":\"public class OuterClass { class InnerClass { } static class StaticInnerClass { } public static void main(String[] args) { // InnerClass innerClass = new InnerClass(); // 'OuterClass.this' cannot be referenced from a static context OuterClass outerClass = new OuterClass(); InnerClass innerClass = outerClass.new InnerClass(); StaticInnerClass staticInnerClass = new StaticInnerClass(); } } \"},\"5498\":{\"t\":\"静态内部类不能访问外部类的非静态的变量和方法。\"},\"5499\":{\"t\":\"5. 静态导包\"},\"5500\":{\"t\":\"在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。\"},\"5501\":{\"t\":\"import static com.xxx.ClassName.* \"},\"5502\":{\"t\":\"6. 初始化顺序\"},\"5503\":{\"t\":\"静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\"},\"5504\":{\"t\":\"public static String staticField = \\\"静态变量\\\"; static { System.out.println(\\\"静态语句块\\\"); } public String field = \\\"实例变量\\\"; { System.out.println(\\\"普通语句块\\\"); } \"},\"5505\":{\"t\":\"最后才是构造函数的初始化。\"},\"5506\":{\"t\":\"public InitialOrderTest() { System.out.println(\\\"构造函数\\\"); } \"},\"5507\":{\"t\":\"存在继承的情况下，初始化顺序为:\"},\"5508\":{\"t\":\"父类(静态变量、静态语句块)\"},\"5509\":{\"t\":\"子类(静态变量、静态语句块)\"},\"5510\":{\"t\":\"父类(实例变量、普通语句块)\"},\"5511\":{\"t\":\"父类(构造函数)\"},\"5512\":{\"t\":\"子类(实例变量、普通语句块)\"},\"5513\":{\"t\":\"子类(构造函数)\"},\"5514\":{\"h\":\"反射\",\"a\":\"反射\"},\"5515\":{\"t\":\"每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。\"},\"5516\":{\"t\":\"类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中，可以使用 Class.forName(\\\"com.mysql.jdbc.Driver\\\") 这种方式来控制类的加载，该方法会返回一个 Class 对象。\"},\"5517\":{\"t\":\"反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。\"},\"5518\":{\"t\":\"Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类:\"},\"5519\":{\"t\":\"Field : 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\"},\"5520\":{\"t\":\"Method : 可以使用 invoke() 方法调用与 Method 对象关联的方法；\"},\"5521\":{\"t\":\"Constructor : 可以用 Constructor 创建新的对象。\"},\"5522\":{\"t\":\"Advantages of Using Reflection:\"},\"5523\":{\"t\":\"Extensibility Features : An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.\"},\"5524\":{\"t\":\"Class Browsers and Visual Development Environments : A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.\"},\"5525\":{\"t\":\"Debuggers and Test Tools : Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite.\"},\"5526\":{\"t\":\"Drawbacks of Reflection:\"},\"5527\":{\"t\":\"Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.\"},\"5528\":{\"t\":\"Performance Overhead : Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.\"},\"5529\":{\"t\":\"Security Restrictions : Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.\"},\"5530\":{\"t\":\"Exposure of Internals :Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.\"},\"5531\":{\"t\":\"相关文章：Java 基础 - 反射机制详解\"},\"5532\":{\"h\":\"异常\",\"a\":\"异常\"},\"5533\":{\"t\":\"Throwable 可以用来表示任何可以作为异常抛出的类，分为两种: Error 和 Exception。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种:\"},\"5534\":{\"t\":\"受检异常 : 需要用 try...catch... 语句捕获并进行处理，并且可以从异常中恢复；\"},\"5535\":{\"t\":\"非受检异常 : 是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。\"},\"5536\":{\"t\":\"img\"},\"5537\":{\"t\":\"相关文章：Java 基础 - 异常机制详解\"},\"5538\":{\"h\":\"泛型\",\"a\":\"泛型\"},\"5539\":{\"t\":\"public class Box<T> { // T stands for \\\"Type\\\" private T t; public void set(T t) { this.t = t; } public T get() { return t; } } \"},\"5540\":{\"t\":\"相关文章：Java 基础 - 泛型机制详解\"},\"5541\":{\"h\":\"注解\",\"a\":\"注解\"},\"5542\":{\"t\":\"Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。\"},\"5543\":{\"t\":\"相关文章：Java 基础 - 注解机制详解\"},\"5544\":{\"h\":\"特性\",\"a\":\"特性\"},\"5545\":{\"h\":\"Java 各版本的新特性\",\"a\":\"java-各版本的新特性\"},\"5546\":{\"t\":\"New highlights in Java SE 8\"},\"5547\":{\"t\":\"Lambda Expressions\"},\"5548\":{\"t\":\"Pipelines and Streams\"},\"5549\":{\"t\":\"Date and Time API\"},\"5550\":{\"t\":\"Default Methods\"},\"5551\":{\"t\":\"Type Annotations\"},\"5552\":{\"t\":\"Nashhorn JavaScript Engine\"},\"5553\":{\"t\":\"Concurrent Accumulators\"},\"5554\":{\"t\":\"Parallel operations\"},\"5555\":{\"t\":\"PermGen Error Removed\"},\"5556\":{\"t\":\"New highlights in Java SE 7\"},\"5557\":{\"t\":\"Strings in Switch Statement\"},\"5558\":{\"t\":\"Type Inference for Generic Instance Creation\"},\"5559\":{\"t\":\"Multiple Exception Handling\"},\"5560\":{\"t\":\"Support for Dynamic Languages\"},\"5561\":{\"t\":\"Try with Resources\"},\"5562\":{\"t\":\"Java nio Package\"},\"5563\":{\"t\":\"Binary Literals, Underscore in literals\"},\"5564\":{\"t\":\"Diamond Syntax\"},\"5565\":{\"t\":\"Difference between Java 1.8 and Java 1.7?在新窗口打开\"},\"5566\":{\"t\":\"Java 8 特性在新窗口打开\"},\"5567\":{\"h\":\"Java 与 C++ 的区别\",\"a\":\"java-与-c-的区别\"},\"5568\":{\"t\":\"Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。\"},\"5569\":{\"t\":\"Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。\"},\"5570\":{\"t\":\"Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\"},\"5571\":{\"t\":\"Java 支持自动垃圾回收，而 C++ 需要手动回收。\"},\"5572\":{\"t\":\"Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\"},\"5573\":{\"t\":\"Java 不支持操作符重载，虽然可以对两个 String 对象支持加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。\"},\"5574\":{\"t\":\"Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。\"},\"5575\":{\"t\":\"Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。\"},\"5576\":{\"t\":\"What are the main differences between Java and C++?在新窗口打开\"},\"5577\":{\"h\":\"JRE or JDK\",\"a\":\"jre-or-jdk\"},\"5578\":{\"t\":\"JRE is the JVM program, Java application need to run on JRE.\"},\"5579\":{\"t\":\"JDK is a superset of JRE, JRE + tools for developing java programs. e.g, it provides the compiler \\\"javac\\\"\"},\"5580\":{\"h\":\"参考资料\",\"a\":\"参考资料\"},\"5581\":{\"t\":\"Eckel B. Java 编程思想[M]. 机械工业出版社, 2002.\"},\"5582\":{\"t\":\"Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.\"},\"5583\":{\"h\":\"图谱 & Q/A\"},\"5584\":{\"t\":\"本文主要对Java基础知识体系小结，同时结合一些Q&A进行理解。 @pdai\"},\"5585\":{\"h\":\"参考文档\",\"a\":\"参考文档\"},\"5586\":{\"t\":\"Thinking in Java (Java 编程思想) Gitbook中文文档 https://java.quanke.name/\"},\"5587\":{\"t\":\"Thinking in Java (Java 编程思想) Github https://github.com/quanke/think-in-java\"},\"5588\":{\"t\":\"Thinking in Java (Java 编程思想) Gitbook2 https://www.gitbook.com/book/wizardforcel/thinking-in-java/details\"},\"5589\":{\"h\":\"知识体系\",\"a\":\"知识体系\"},\"5590\":{\"t\":\"img\"},\"5591\":{\"h\":\"Q&A\",\"a\":\"q-a\"},\"5592\":{\"h\":\"Java 中应该使用什么数据类型来代表价格?\",\"a\":\"java-中应该使用什么数据类型来代表价格\"},\"5593\":{\"t\":\"如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。\"},\"5594\":{\"h\":\"怎么将 byte 转换为 String?\",\"a\":\"怎么将-byte-转换为-string\"},\"5595\":{\"t\":\"可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。\"},\"5596\":{\"h\":\"Java 中怎样将 bytes 转换为 long 类型?\",\"a\":\"java-中怎样将-bytes-转换为-long-类型\"},\"5597\":{\"t\":\"String接收bytes的构造器转成String，再Long.parseLong\"},\"5598\":{\"h\":\"我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?\",\"a\":\"我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象\"},\"5599\":{\"t\":\"是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。\"},\"5600\":{\"h\":\"存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；\",\"a\":\"存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b\"},\"5601\":{\"t\":\"可以，向下转型。但是不建议使用，容易出现类型转型异常.\"},\"5602\":{\"h\":\"哪个类包含 clone 方法? 是 Cloneable 还是 Object?\",\"a\":\"哪个类包含-clone-方法-是-cloneable-还是-object\"},\"5603\":{\"t\":\"java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。\"},\"5604\":{\"h\":\"Java 中 ++ 操作符是线程安全的吗?\",\"a\":\"java-中-操作符是线程安全的吗\"},\"5605\":{\"t\":\"不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。还会存在竞态条件(读取-修改-写入)。\"},\"5606\":{\"h\":\"a = a + b 与 a += b 的区别\",\"a\":\"a-a-b-与-a-b-的区别\"},\"5607\":{\"t\":\"+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。\"},\"5608\":{\"t\":\"byte a = 127; byte b = 127; b = a + b; // error : cannot convert from int to byte b += a; // ok \"},\"5609\":{\"t\":\"(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)\"},\"5610\":{\"h\":\"我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?\",\"a\":\"我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗\"},\"5611\":{\"t\":\"不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。\"},\"5612\":{\"h\":\"3*0.1 == 0.3 将会返回什么? true 还是 false?\",\"a\":\"_3-0-1-0-3-将会返回什么-true-还是-false\"},\"5613\":{\"t\":\"false，因为有些浮点数不能完全精确的表示出来。\"},\"5614\":{\"h\":\"int 和 Integer 哪个会占用更多的内存?\",\"a\":\"int-和-integer-哪个会占用更多的内存\"},\"5615\":{\"t\":\"Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。\"},\"5616\":{\"h\":\"为什么 Java 中的 String 是不可变的(Immutable)?\",\"a\":\"为什么-java-中的-string-是不可变的-immutable\"},\"5617\":{\"t\":\"Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。更详细的内容参见答案。\"},\"5618\":{\"h\":\"我们能在 Switch 中使用 String 吗?\",\"a\":\"我们能在-switch-中使用-string-吗\"},\"5619\":{\"t\":\"从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。\"},\"5620\":{\"h\":\"Java 中的构造器链是什么?\",\"a\":\"java-中的构造器链是什么\"},\"5621\":{\"t\":\"当你从一个构造器中调用另一个构造器，就是Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。\"},\"5622\":{\"h\":\"枚举类\",\"a\":\"枚举类\"},\"5623\":{\"t\":\"JDK1.5出现 每个枚举值都需要调用一次构造函数\"},\"5624\":{\"h\":\"什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?\",\"a\":\"什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象\"},\"5625\":{\"t\":\"不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。\"},\"5626\":{\"t\":\"如何在Java中写出Immutable的类?\"},\"5627\":{\"t\":\"要写出这样的类，需要遵循以下几个原则:\"},\"5628\":{\"t\":\"1)immutable对象的状态在创建之后就不能发生改变，任何对它的改变都应该产生一个新的对象。\"},\"5629\":{\"t\":\"2)Immutable类的所有的属性都应该是final的。\"},\"5630\":{\"t\":\"3)对象必须被正确的创建，比如: 对象引用在对象创建过程中不能泄露(leak)。\"},\"5631\":{\"t\":\"4)对象应该是final的，以此来限制子类继承父类，以避免子类改变了父类的immutable特性。\"},\"5632\":{\"t\":\"5)如果类中包含mutable类对象，那么返回给客户端的时候，返回该对象的一个拷贝，而不是该对象本身(该条可以归为第一条中的一个特例)\"},\"5633\":{\"h\":\"我们能创建一个包含可变对象的不可变对象吗?\",\"a\":\"我们能创建一个包含可变对象的不可变对象吗\"},\"5634\":{\"t\":\"是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。\"},\"5635\":{\"h\":\"有没有可能两个不相等的对象有相同的 hashcode?\",\"a\":\"有没有可能两个不相等的对象有相同的-hashcode\"},\"5636\":{\"t\":\"有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。\"},\"5637\":{\"h\":\"两个相同的对象会有不同的 hash code 吗?\",\"a\":\"两个相同的对象会有不同的-hash-code-吗\"},\"5638\":{\"t\":\"不能，根据 hash code 的规定，这是不可能的。\"},\"5639\":{\"h\":\"我们可以在 hashcode() 中使用随机数字吗?\",\"a\":\"我们可以在-hashcode-中使用随机数字吗\"},\"5640\":{\"t\":\"不行，因为对象的 hashcode 值必须是相同的。\"},\"5641\":{\"h\":\"Java 中，Comparator 与 Comparable 有什么不同?\",\"a\":\"java-中-comparator-与-comparable-有什么不同\"},\"5642\":{\"t\":\"Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。\"},\"5643\":{\"h\":\"为什么在重写 equals 方法的时候需要重写 hashCode 方法?\",\"a\":\"为什么在重写-equals-方法的时候需要重写-hashcode-方法\"},\"5644\":{\"t\":\"因为有强制的规范指定需要同时重写 hashcode 与 equals 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。\"},\"5645\":{\"h\":\"“a==b”和”a.equals(b)”有什么区别?\",\"a\":\"a-b-和-a-equals-b-有什么区别\"},\"5646\":{\"t\":\"如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。\"},\"5647\":{\"h\":\"a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?\",\"a\":\"a-hashcode-有什么用-与-a-equals-b-有什么关系\"},\"5648\":{\"t\":\"简介: hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equals() 方法来判断相等的对象，必须具有相同的 hash code。\"},\"5649\":{\"t\":\"1、hashcode的作用\"},\"5650\":{\"t\":\"List和Set，如何保证Set不重复呢? 通过迭代使用equals方法来判断，数据量小还可以接受，数据量大怎么解决? 引入hashcode，实际上hashcode扮演的角色就是寻址，大大减少查询匹配次数。\"},\"5651\":{\"t\":\"2、hashcode重要吗\"},\"5652\":{\"t\":\"对于数组、List集合就是一个累赘。而对于hashmap, hashset, hashtable就异常重要了。\"},\"5653\":{\"t\":\"3、equals方法遵循的原则\"},\"5654\":{\"t\":\"对称性 若x.equals(y)true，则y.equals(x)true\"},\"5655\":{\"t\":\"自反性 x.equals(x)必须true\"},\"5656\":{\"t\":\"传递性 若x.equals(y)true,y.equals(z)true,则x.equals(z)必为true\"},\"5657\":{\"t\":\"一致性 只要x,y内容不变，无论调用多少次结果不变\"},\"5658\":{\"t\":\"其他 x.equals(null) 永远false，x.equals(和x数据类型不同)始终false\"},\"5659\":{\"h\":\"final、finalize 和 finally 的不同之处?\",\"a\":\"final、finalize-和-finally-的不同之处\"},\"5660\":{\"t\":\"final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。\"},\"5661\":{\"t\":\"Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。\"},\"5662\":{\"t\":\"finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。\"},\"5663\":{\"h\":\"Java 中的编译期常量是什么? 使用它又什么风险?\",\"a\":\"java-中的编译期常量是什么-使用它又什么风险\"},\"5664\":{\"t\":\"变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。\"},\"5665\":{\"h\":\"静态内部类与顶级类有什么区别?\",\"a\":\"静态内部类与顶级类有什么区别\"},\"5666\":{\"t\":\"一个公共的顶级类的源文件名称与类名相同，而嵌套静态类没有这个要求。一个嵌套类位于顶级类内部，需要使用顶级类的名称来引用嵌套静态类，如 HashMap.Entry 是一个嵌套静态类，HashMap 是一个顶级类，Entry是一个嵌套静态类。\"},\"5667\":{\"h\":\"Java 中，Serializable 与 Externalizable 的区别?\",\"a\":\"java-中-serializable-与-externalizable-的区别\"},\"5668\":{\"t\":\"Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。\"},\"5669\":{\"h\":\"说出 JDK 1.7 中的三个新特性?\",\"a\":\"说出-jdk-1-7-中的三个新特性\"},\"5670\":{\"t\":\"虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(<>)用于泛型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。\"},\"5671\":{\"h\":\"说出 5 个 JDK 1.8 引入的新特性?\",\"a\":\"说出-5-个-jdk-1-8-引入的新特性\"},\"5672\":{\"t\":\"Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性: Lambda 表达式，允许像对象一样传递匿名函数 Stream API，充分利用现代多核 CPU，可以写出很简洁的代码 Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用 扩展方法，现在，接口中可以有静态、默认方法。 重复注解，现在你可以将相同的注解在同一类型上使用多次。\"},\"5673\":{\"t\":\"下述包含 Java 面试过程中关于 SOLID 的设计原则，OOP 基础，如类，对象，接口，继承，多态，封装，抽象以及更高级的一些概念，如组合、聚合及关联。也包含了 GOF 设计模式的问题。\"},\"5674\":{\"h\":\"接口是什么? 为什么要使用接口而不是直接使用具体类?\",\"a\":\"接口是什么-为什么要使用接口而不是直接使用具体类\"},\"5675\":{\"t\":\"接口用于定义 API。它定义了类必须得遵循的规则。同时，它提供了一种抽象，因为客户端只使用接口，这样可以有多重实现，如 List 接口，你可以使用可随机访问的 ArrayList，也可以使用方便插入和删除的 LinkedList。接口中不允许普通方法，以此来保证抽象，但是 Java 8 中你可以在接口声明静态方法和默认普通方法。\"},\"5676\":{\"h\":\"Java 中，抽象类与接口之间有什么不同?\",\"a\":\"java-中-抽象类与接口之间有什么不同\"},\"5677\":{\"t\":\"Java 中，抽象类和接口有很多不同之处，但是最重要的一个是 Java 中限制一个类只能继承一个类，但是可以实现多个接口。抽象类可以很好的定义一个家族类的默认行为，而接口能更好的定义类型，有助于后面实现多态机制 参见第六条。\"},\"5678\":{\"h\":\"Object有哪些公用方法?\",\"a\":\"object有哪些公用方法\"},\"5679\":{\"t\":\"clone equals hashcode wait notify notifyall finalize toString getClass 除了clone和finalize其他均为公共方法。\"},\"5680\":{\"t\":\"11个方法，wait被重载了两次\"},\"5681\":{\"h\":\"equals与==的区别\",\"a\":\"equals与-的区别\"},\"5682\":{\"t\":\"区别1. ==是一个运算符 equals是Object类的方法\"},\"5683\":{\"t\":\"区别2. 比较时的区别\"},\"5684\":{\"t\":\"用于基本类型的变量比较时: ==用于比较值是否相等，equals不能直接用于基本数据类型的比较，需要转换为其对应的包装类型。\"},\"5685\":{\"t\":\"用于引用类型的比较时。==和equals都是比较栈内存中的地址是否相等 。相等为true 否则为false。但是通常会重写equals方法去实现对象内容的比较。\"},\"5686\":{\"h\":\"String、StringBuffer与StringBuilder的区别\",\"a\":\"string、stringbuffer与stringbuilder的区别\"},\"5687\":{\"t\":\"第一点: 可变和适用范围。String对象是不可变的，而StringBuffer和StringBuilder是可变字符序列。每次对String的操作相当于生成一个新的String对象，而对StringBuffer和StringBuilder的操作是对对象本身的操作，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用String，因为频繁的生成对象将会对系统性能产生影响。\"},\"5688\":{\"t\":\"第二点: 线程安全。String由于有final修饰，是immutable的，安全性是简单而纯粹的。StringBuilder和StringBuffer的区别在于StringBuilder不保证同步，也就是说如果需要线程安全需要使用StringBuffer，不需要同步的StringBuilder效率更高。\"},\"5689\":{\"h\":\"switch能否用String做参数\",\"a\":\"switch能否用string做参数\"},\"5690\":{\"t\":\"Java1.7开始支持，但实际这是一颗Java语法糖。除此之外，byte，short，int，枚举均可用于switch，而boolean和浮点型不可以。\"},\"5691\":{\"h\":\"接口与抽象类\",\"a\":\"接口与抽象类\"},\"5692\":{\"t\":\"一个子类只能继承一个抽象类, 但能实现多个接口\"},\"5693\":{\"t\":\"抽象类可以有构造方法, 接口没有构造方法\"},\"5694\":{\"t\":\"抽象类可以有普通成员变量, 接口没有普通成员变量\"},\"5695\":{\"t\":\"抽象类和接口都可有静态成员变量, 抽象类中静态成员变量访问类型任意，接口只能public static final(默认)\"},\"5696\":{\"t\":\"抽象类可以没有抽象方法, 抽象类可以有普通方法；接口在JDK8之前都是抽象方法，在JDK8可以有default方法，在JDK9中允许有私有普通方法\"},\"5697\":{\"t\":\"抽象类可以有静态方法；接口在JDK8之前不能有静态方法，在JDK8中可以有静态方法，且只能被接口类直接调用（不能被实现类的对象调用）\"},\"5698\":{\"t\":\"抽象类中的方法可以是public、protected; 接口方法在JDK8之前只有public abstract，在JDK8可以有default方法，在JDK9中允许有private方法\"},\"5699\":{\"h\":\"抽象类和最终类\",\"a\":\"抽象类和最终类\"},\"5700\":{\"t\":\"抽象类可以没有抽象方法, 最终类可以没有最终方法\"},\"5701\":{\"t\":\"最终类不能被继承, 最终方法不能被重写(可以重载)\"},\"5702\":{\"h\":\"异常\",\"a\":\"异常\"},\"5703\":{\"t\":\"相关的关键字 throw、throws、try...catch、finally\"},\"5704\":{\"t\":\"throws 用在方法签名上, 以便抛出的异常可以被调用者处理\"},\"5705\":{\"t\":\"throw 方法内部通过throw抛出异常\"},\"5706\":{\"t\":\"try 用于检测包住的语句块, 若有异常, catch子句捕获并执行catch块\"},\"5707\":{\"h\":\"关于finally\",\"a\":\"关于finally\"},\"5708\":{\"t\":\"finally不管有没有异常都要处理\"},\"5709\":{\"t\":\"当try和catch中有return时，finally仍然会执行，finally比return先执行\"},\"5710\":{\"t\":\"不管有木有异常抛出, finally在return返回前执行\"},\"5711\":{\"t\":\"finally是在return后面的表达式运算后执行的(此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值)，所以函数返回值是在finally执行前确定的\"},\"5712\":{\"t\":\"注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值\"},\"5713\":{\"t\":\"finally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电\"},\"5714\":{\"h\":\"受检查异常和运行时异常\",\"a\":\"受检查异常和运行时异常\"},\"5715\":{\"t\":\"受检查的异常(checked exceptions),其必须被try...catch语句块所捕获, 或者在方法签名里通过throws子句声明。受检查的异常必须在编译时被捕捉处理,命名为Checked Exception是因为Java编译器要进行检查, Java虚拟机也要进行检查, 以确保这个规则得到遵守。\"},\"5716\":{\"t\":\"常见的checked exception: ClassNotFoundException IOException FileNotFoundException EOFException\"},\"5717\":{\"t\":\"运行时异常(runtime exceptions), 需要程序员自己分析代码决定是否捕获和处理,比如空指针,被0除...\"},\"5718\":{\"t\":\"常见的runtime exception: NullPointerException ArithmeticException ClassCastException IllegalArgumentException IllegalStateException IndexOutOfBoundsException NoSuchElementException\"},\"5719\":{\"t\":\"Error的，则属于严重错误，如系统崩溃、虚拟机错误、动态链接失败等，这些错误无法恢复或者不可能捕捉，将导致应用程序中断，Error不需要捕获。\"},\"5720\":{\"h\":\"super出现在父类的子类中。有三种存在方式\",\"a\":\"super出现在父类的子类中。有三种存在方式\"},\"5721\":{\"t\":\"super.xxx(xxx为变量名或对象名)意思是获取父类中xxx的变量或引用\"},\"5722\":{\"t\":\"super.xxx(); (xxx为方法名)意思是直接访问并调用父类中的方法\"},\"5723\":{\"t\":\"super() 调用父类构造\"},\"5724\":{\"t\":\"注: super只能指代其直接父类\"},\"5725\":{\"h\":\"this() & super()在构造方法中的区别\",\"a\":\"this-super-在构造方法中的区别\"},\"5726\":{\"t\":\"调用super()必须写在子类构造方法的第一行, 否则编译不通过\"},\"5727\":{\"t\":\"super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行\"},\"5728\":{\"t\":\"尽管可以用this调用一个构造器, 却不能调用2个\"},\"5729\":{\"t\":\"this和super不能出现在同一个构造器中, 否则编译不通过\"},\"5730\":{\"t\":\"this()、super()都指的对象,不可以在static环境中使用\"},\"5731\":{\"t\":\"本质this指向本对象的指针。super是一个关键字\"},\"5732\":{\"h\":\"构造内部类和静态内部类对象\",\"a\":\"构造内部类和静态内部类对象\"},\"5733\":{\"t\":\"public class Enclosingone { public class Insideone {} public static class Insideone{} } public class Test { public static void main(String[] args) { // 构造内部类对象需要外部类的引用 Enclosingone.Insideone obj1 = new Enclosingone().new Insideone(); // 构造静态内部类的对象 Enclosingone.Insideone obj2 = new Enclosingone.Insideone(); } } \"},\"5734\":{\"t\":\"静态内部类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。非静态内部类能够访问外部类的静态和非静态成员。静态内部类不能访问外部类的非静态成员，只能访问外部类的静态成员。\"},\"5735\":{\"h\":\"序列化\",\"a\":\"序列化\"},\"5736\":{\"t\":\"声明为static和transient类型的数据不能被序列化， 反序列化需要一个无参构造函数\"},\"5737\":{\"h\":\"Java移位运算符\",\"a\":\"java移位运算符\"},\"5738\":{\"t\":\"java中有三种移位运算符\"},\"5739\":{\"t\":\"<< :左移运算符,x << 1,相当于x乘以2(不溢出的情况下),低位补0\"},\"5740\":{\"t\":\">> :带符号右移,x >> 1,相当于x除以2,正数高位补0,负数高位补1\"},\"5741\":{\"t\":\">>> :无符号右移,忽略符号位,空位都以0补齐\"},\"5742\":{\"h\":\"形参&实参\",\"a\":\"形参-实参\"},\"5743\":{\"t\":\"形式参数可被视为local variable.形参和局部变量一样都不能离开方法。只有在方法中使用，不会在方法外可见。 形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误。但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改。不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下，那就是: 方法内部类。一个方法内的内部类如果使用了这个方法的参数或者局部变量的话，这个参数或局部变量应该是final。 形参的值在调用时根据调用者更改，实参则用自身的值更改形参的值(指针、引用皆在此列)，也就是说真正被传递的是实参。\"},\"5744\":{\"h\":\"局部变量为什么要初始化\",\"a\":\"局部变量为什么要初始化\"},\"5745\":{\"t\":\"局部变量是指类方法中的变量，必须初始化。局部变量运行时被分配在栈中，量大，生命周期短，如果虚拟机给每个局部变量都初始化一下，是一笔很大的开销，但变量不初始化为默认值就使用是不安全的。出于速度和安全性两个方面的综合考虑，解决方案就是虚拟机不初始化，但要求编写者一定要在使用前给变量赋值。\"},\"5746\":{\"h\":\"Java语言的鲁棒性\",\"a\":\"java语言的鲁棒性\"},\"5747\":{\"t\":\"Java在编译和运行程序时，都要对可能出现的问题进行检查，以消除错误的产生。它提供自动垃圾收集来进行内存管理，防止程序员在管理内存时容易产生的错误。通过集成的面向对象的例外处理机制，在编译时，Java揭示出可能出现但未被处理的异常，帮助程序员正确地进行选择以防止系统的崩溃。另外，Java在编译时还可捕获类型声明中的许多常见错误，防止动态运行时不匹配问题的出现。\"},\"5748\":{\"h\":\"面向对象\"},\"5749\":{\"t\":\"本文主要介绍Java OOP 面向对象基础和相关类图。@pdai\"},\"5750\":{\"h\":\"三大特性\",\"a\":\"三大特性\"},\"5751\":{\"h\":\"封装\",\"a\":\"封装\"},\"5752\":{\"t\":\"利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。\"},\"5753\":{\"t\":\"优点:\"},\"5754\":{\"t\":\"减少耦合: 可以独立地开发、测试、优化、使用、理解和修改\"},\"5755\":{\"t\":\"减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块\"},\"5756\":{\"t\":\"有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能\"},\"5757\":{\"t\":\"提高软件的可重用性\"},\"5758\":{\"t\":\"降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的\"},\"5759\":{\"t\":\"以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。\"},\"5760\":{\"t\":\"注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。\"},\"5761\":{\"t\":\"public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \\\"man\\\" : \\\"woman\\\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \\\" is working very hard!\\\"); } else { System.out.println(name + \\\" can't work any more!\\\"); } } } \"},\"5762\":{\"h\":\"继承\",\"a\":\"继承\"},\"5763\":{\"t\":\"继承实现了 IS-A 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。\"},\"5764\":{\"t\":\"继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。\"},\"5765\":{\"t\":\"Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 向上转型 。\"},\"5766\":{\"t\":\"Animal animal = new Cat(); \"},\"5767\":{\"h\":\"多态\",\"a\":\"多态\"},\"5768\":{\"t\":\"多态分为编译时多态和运行时多态:\"},\"5769\":{\"t\":\"编译时多态主要指方法的重载\"},\"5770\":{\"t\":\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\"},\"5771\":{\"t\":\"运行时多态有三个条件:\"},\"5772\":{\"t\":\"继承\"},\"5773\":{\"t\":\"覆盖(重写)\"},\"5774\":{\"t\":\"向上转型\"},\"5775\":{\"t\":\"下面的代码中，乐器类(Instrument)有两个子类: Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。\"},\"5776\":{\"t\":\"public class Instrument { public void play() { System.out.println(\\\"Instrument is playing...\\\"); } } public class Wind extends Instrument { public void play() { System.out.println(\\\"Wind is playing...\\\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\\\"Percussion is playing...\\\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } } \"},\"5777\":{\"h\":\"类图\",\"a\":\"类图\"},\"5778\":{\"t\":\"以下类图使用 PlantUML在新窗口打开 绘制，更多语法及使用请参考: http://plantuml.com/ 。\"},\"5779\":{\"h\":\"泛化关系 (Generalization)\",\"a\":\"泛化关系-generalization\"},\"5780\":{\"t\":\"用来描述继承关系，在 Java 中使用 extends 关键字。\"},\"5781\":{\"t\":\"img\"},\"5782\":{\"t\":\"@startuml title Generalization class Vehical class Car class Truck Vehical <|-- Car Vehical <|-- Truck @enduml \"},\"5783\":{\"h\":\"实现关系 (Realization)\",\"a\":\"实现关系-realization\"},\"5784\":{\"t\":\"用来实现一个接口，在 Java 中使用 implements 关键字。\"},\"5785\":{\"t\":\"img\"},\"5786\":{\"t\":\"@startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml \"},\"5787\":{\"h\":\"聚合关系 (Aggregation)\",\"a\":\"聚合关系-aggregation\"},\"5788\":{\"t\":\"表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。\"},\"5789\":{\"t\":\"img\"},\"5790\":{\"t\":\"@startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml \"},\"5791\":{\"h\":\"组合关系 (Composition)\",\"a\":\"组合关系-composition\"},\"5792\":{\"t\":\"和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。\"},\"5793\":{\"t\":\"img\"},\"5794\":{\"t\":\"@startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml \"},\"5795\":{\"h\":\"关联关系 (Association)\",\"a\":\"关联关系-association\"},\"5796\":{\"t\":\"表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。\"},\"5797\":{\"t\":\"img\"},\"5798\":{\"t\":\"@startuml title Association class School class Student School \\\"1\\\" - \\\"n\\\" Student @enduml \"},\"5799\":{\"h\":\"依赖关系 (Dependency)\",\"a\":\"依赖关系-dependency\"},\"5800\":{\"t\":\"和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式:\"},\"5801\":{\"t\":\"A 类是 B 类中的(某中方法的)局部变量；\"},\"5802\":{\"t\":\"A 类是 B 类方法当中的一个参数；\"},\"5803\":{\"t\":\"A 类向 B 类发送消息，从而影响 B 类发生变化；\"},\"5804\":{\"t\":\"img\"},\"5805\":{\"t\":\"@startuml title Dependency class Vehicle { move(MoveBehavior) } interface MoveBehavior { move() } note \\\"MoveBehavior.move()\\\" as N Vehicle ..> MoveBehavior Vehicle .. N @enduml \"},\"5806\":{\"h\":\"参考资料\",\"a\":\"参考资料\"},\"5807\":{\"t\":\"Java 编程思想\"},\"5808\":{\"t\":\"敏捷软件开发: 原则、模式与实践\"},\"5809\":{\"t\":\"面向对象设计的 SOLID 原则在新窗口打开\"},\"5810\":{\"t\":\"看懂 UML 类图和时序图在新窗口打开\"},\"5811\":{\"t\":\"UML 系列——时序图(顺序图)sequence diagram在新窗口打开\"},\"5812\":{\"t\":\"面向对象编程三大特性 ------ 封装、继承、多态在新窗口打开\"},\"5813\":{\"t\":\"javaoop基础知识总结 https://blog.csdn.net/weixin_38173324/article/details/70037927\"},\"5814\":{\"t\":\"Java实现OOP(面向对象编程) https://www.cnblogs.com/AlanLee/p/6475334.html\"},\"5815\":{\"t\":\"Java 抽象类与oop三大特征 http://www.cnblogs.com/wujing-hubei/p/6012105.html\"},\"5816\":{\"h\":\"反射机制详解\"},\"5817\":{\"t\":\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。本文综合多篇文章后，总结了Java 反射的相关知识，希望可以提升你对Java中反射的认知效率。@pdai\"},\"5818\":{\"h\":\"反射基础\",\"a\":\"反射基础\"},\"5819\":{\"t\":\"RTTI（Run-Time Type Identification）运行时类型识别。在《Thinking in Java》一书第十四章中有提到，其作用是在运行时识别一个对象的类型和类的信息。主要有两种方式：一种是“传统的”RTTI，它假定我们在编译时已经知道了所有的类型；另一种是“反射”机制，它允许我们在运行时发现和使用类的信息。\"},\"5820\":{\"t\":\"反射就是把java类中的各种成分映射成一个个的Java对象\"},\"5821\":{\"t\":\"例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。\"},\"5822\":{\"t\":\"这里我们首先需要理解 Class类，以及类的加载机制； 然后基于此我们如何通过反射获取Class类以及类中的成员变量、方法、构造方法等。\"},\"5823\":{\"h\":\"Class类\",\"a\":\"class类\"},\"5824\":{\"t\":\"Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)（每个java类运行时都在JVM里表现为一个class对象，可通过类名.class、类型.getClass()、Class.forName(\\\"类名\\\")等方法获取class对象）。数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 class 对象。\"},\"5825\":{\"t\":\"public final class Class<T> implements java.io.Serializable, GenericDeclaration, Type, AnnotatedElement { private static final int ANNOTATION= 0x00002000; private static final int ENUM = 0x00004000; private static final int SYNTHETIC = 0x00001000; private static native void registerNatives(); static { registerNatives(); } /* * Private constructor. Only the Java Virtual Machine creates Class objects. //私有构造器，只有JVM才能调用创建Class对象 * This constructor is not used and prevents the default constructor being * generated. */ private Class(ClassLoader loader) { // Initialize final field for classLoader. The initialization value of non-null // prevents future JIT optimizations from assuming this final field is null. classLoader = loader; } \"},\"5826\":{\"t\":\"到这我们也就可以得出以下几点信息：\"},\"5827\":{\"t\":\"Class类也是类的一种，与class关键字是不一样的。\"},\"5828\":{\"t\":\"手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在同名.class的文件中(字节码文件)\"},\"5829\":{\"t\":\"每个通过关键字class标识的类，在内存中有且只有一个与之对应的Class对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个Class对象。\"},\"5830\":{\"t\":\"Class类只存私有构造函数，因此对应Class对象只能有JVM创建和加载\"},\"5831\":{\"t\":\"Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要(关于反射稍后分析)。\"},\"5832\":{\"h\":\"类加载\",\"a\":\"类加载\"},\"5833\":{\"t\":\"类加载机制和类字节码技术可以参考如下两篇文章：\"},\"5834\":{\"t\":\"JVM基础 - 类字节码详解 \"},\"5835\":{\"t\":\"源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行\"},\"5836\":{\"t\":\"JVM基础 - Java 类加载机制 \"},\"5837\":{\"t\":\"这篇文章将带你深入理解Java 类加载机制\"},\"5838\":{\"t\":\"其中，这里我们需要回顾的是：\"},\"5839\":{\"t\":\"类加载机制流程\"},\"5840\":{\"t\":\"img\"},\"5841\":{\"t\":\"类的加载\"},\"5842\":{\"t\":\"img\"},\"5843\":{\"h\":\"反射的使用\",\"a\":\"反射的使用\"},\"5844\":{\"t\":\"提示\"},\"5845\":{\"t\":\"基于此我们如何通过反射获取Class类对象以及类中的成员变量、方法、构造方法等\"},\"5846\":{\"t\":\"在Java中，Class类与java.lang.reflect类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)、Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)，下面将对这几个重要类进行分别说明。\"},\"5847\":{\"h\":\"Class类对象的获取\",\"a\":\"class类对象的获取\"},\"5848\":{\"t\":\"在类加载的时候，jvm会创建一个class对象\"},\"5849\":{\"t\":\"class对象是可以说是反射中最常用的，获取class对象的方式的主要有三种\"},\"5850\":{\"t\":\"根据类名：类名.class\"},\"5851\":{\"t\":\"根据对象：对象.getClass()\"},\"5852\":{\"t\":\"根据全限定类名：Class.forName(全限定类名)\"},\"5853\":{\"t\":\" @Test public void classTest() throws Exception { // 获取Class对象的三种方式 logger.info(\\\"根据类名: \\\\t\\\" + User.class); logger.info(\\\"根据对象: \\\\t\\\" + new User().getClass()); logger.info(\\\"根据全限定类名:\\\\t\\\" + Class.forName(\\\"com.test.User\\\")); // 常用的方法 logger.info(\\\"获取全限定类名:\\\\t\\\" + userClass.getName()); logger.info(\\\"获取类名:\\\\t\\\" + userClass.getSimpleName()); logger.info(\\\"实例化:\\\\t\\\" + userClass.newInstance()); } // ... package com.test; public class User { private String name = \\\"init\\\"; private int age; public User() {} public User(String name, int age) { super(); this.name = name; this.age = age; } private String getName() { return name; } private void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \\\"User [name=\\\" + name + \\\", age=\\\" + age + \\\"]\\\"; } } \"},\"5854\":{\"t\":\"输出结果：\"},\"5855\":{\"t\":\"根据类名: class com.test.User 根据对象: class com.test.User 根据全限定类名: class com.test.User 获取全限定类名: com.test.User 获取类名: User 实例化: User [name=init, age=0] \"},\"5856\":{\"t\":\"再来看看 Class类的方法\"},\"5857\":{\"t\":\"方法名\"},\"5858\":{\"t\":\"说明\"},\"5859\":{\"t\":\"forName()\"},\"5860\":{\"t\":\"(1)获取Class对象的一个引用，但引用的类还没有加载(该类的第一个对象没有生成)就加载了这个类。\"},\"5861\":{\"t\":\"(2)为了产生Class引用，forName()立即就进行了初始化。\"},\"5862\":{\"t\":\"Object-getClass()\"},\"5863\":{\"t\":\"获取Class对象的一个引用，返回表示该对象的实际类型的Class引用。\"},\"5864\":{\"t\":\"getName()\"},\"5865\":{\"t\":\"取全限定的类名(包括包名)，即类的完整名字。\"},\"5866\":{\"t\":\"getSimpleName()\"},\"5867\":{\"t\":\"获取类名(不包括包名)\"},\"5868\":{\"t\":\"getCanonicalName()\"},\"5869\":{\"t\":\"获取全限定的类名(包括包名)\"},\"5870\":{\"t\":\"isInterface()\"},\"5871\":{\"t\":\"判断Class对象是否是表示一个接口\"},\"5872\":{\"t\":\"getInterfaces()\"},\"5873\":{\"t\":\"返回Class对象数组，表示Class对象所引用的类所实现的所有接口。\"},\"5874\":{\"t\":\"getSupercalss()\"},\"5875\":{\"t\":\"返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。\"},\"5876\":{\"t\":\"newInstance()\"},\"5877\":{\"t\":\"返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。\"},\"5878\":{\"t\":\"getFields()\"},\"5879\":{\"t\":\"获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有getMethods和getConstructors。\"},\"5880\":{\"t\":\"getDeclaredFields\"},\"5881\":{\"t\":\"获得某个类的自己声明的字段，即包括public、private和proteced，默认但是不包括父类声明的任何字段。类似的还有getDeclaredMethods和getDeclaredConstructors。\"},\"5882\":{\"t\":\"简单测试下（这里例子源于https://blog.csdn.net/mcryeasy/article/details/52344729）\"},\"5883\":{\"t\":\"package com.cry; import java.lang.reflect.Field; interface I1 { } interface I2 { } class Cell{ public int mCellPublic; } class Animal extends Cell{ private int mAnimalPrivate; protected int mAnimalProtected; int mAnimalDefault; public int mAnimalPublic; private static int sAnimalPrivate; protected static int sAnimalProtected; static int sAnimalDefault; public static int sAnimalPublic; } class Dog extends Animal implements I1, I2 { private int mDogPrivate; public int mDogPublic; protected int mDogProtected; private int mDogDefault; private static int sDogPrivate; protected static int sDogProtected; static int sDogDefault; public static int sDogPublic; } public class Test { public static void main(String[] args) throws IllegalAccessException, InstantiationException { Class<Dog> dog = Dog.class; //类名打印 System.out.println(dog.getName()); //com.cry.Dog System.out.println(dog.getSimpleName()); //Dog System.out.println(dog.getCanonicalName());//com.cry.Dog //接口 System.out.println(dog.isInterface()); //false for (Class iI : dog.getInterfaces()) { System.out.println(iI); } /* interface com.cry.I1 interface com.cry.I2 */ //父类 System.out.println(dog.getSuperclass());//class com.cry.Animal //创建对象 Dog d = dog.newInstance(); //字段 for (Field f : dog.getFields()) { System.out.println(f.getName()); } /* mDogPublic sDogPublic mAnimalPublic sAnimalPublic mCellPublic //父类的父类的公共字段也打印出来了 */ System.out.println(\\\"---------\\\"); for (Field f : dog.getDeclaredFields()) { System.out.println(f.getName()); } /** 只有自己类声明的字段 mDogPrivate mDogPublic mDogProtected mDogDefault sDogPrivate sDogProtected sDogDefault sDogPublic */ } } \"},\"5884\":{\"t\":\"getName、getCanonicalName与getSimpleName的区别：\"},\"5885\":{\"t\":\"getSimpleName：只获取类名\"},\"5886\":{\"t\":\"getName：类的全限定名，jvm中Class的表示，可以用于动态加载Class对象，例如Class.forName。\"},\"5887\":{\"t\":\"getCanonicalName：返回更容易理解的表示，主要用于输出（toString）或log打印，大多数情况下和getName一样，但是在内部类、数组等类型的表示形式就不同了。\"},\"5888\":{\"t\":\"package com.cry; public class Test { private class inner{ } public static void main(String[] args) throws ClassNotFoundException { //普通类 System.out.println(Test.class.getSimpleName()); //Test System.out.println(Test.class.getName()); //com.cry.Test System.out.println(Test.class.getCanonicalName()); //com.cry.Test //内部类 System.out.println(inner.class.getSimpleName()); //inner System.out.println(inner.class.getName()); //com.cry.Test$inner System.out.println(inner.class.getCanonicalName()); //com.cry.Test.inner //数组 System.out.println(args.getClass().getSimpleName()); //String[] System.out.println(args.getClass().getName()); //[Ljava.lang.String; System.out.println(args.getClass().getCanonicalName()); //java.lang.String[] //我们不能用getCanonicalName去加载类对象，必须用getName //Class.forName(inner.class.getCanonicalName()); 报错 Class.forName(inner.class.getName()); } } \"},\"5889\":{\"h\":\"Constructor类及其用法\",\"a\":\"constructor类及其用法\"},\"5890\":{\"t\":\"Constructor类存在于反射包(java.lang.reflect)中，反映的是Class 对象所表示的类的构造方法。\"},\"5891\":{\"t\":\"获取Constructor对象是通过Class类中的方法获取的，Class类与Constructor相关的主要方法如下：\"},\"5892\":{\"t\":\"方法返回值\"},\"5893\":{\"t\":\"方法名称\"},\"5894\":{\"t\":\"方法说明\"},\"5895\":{\"t\":\"static Class<?>\"},\"5896\":{\"t\":\"forName(String className)\"},\"5897\":{\"t\":\"返回与带有给定字符串名的类或接口相关联的 Class 对象。\"},\"5898\":{\"t\":\"Constructor\"},\"5899\":{\"t\":\"getConstructor(Class<?>... parameterTypes)\"},\"5900\":{\"t\":\"返回指定参数类型、具有public访问权限的构造函数对象\"},\"5901\":{\"t\":\"Constructor<?>[]\"},\"5902\":{\"t\":\"getConstructors()\"},\"5903\":{\"t\":\"返回所有具有public访问权限的构造函数的Constructor对象数组\"},\"5904\":{\"t\":\"Constructor\"},\"5905\":{\"t\":\"getDeclaredConstructor(Class<?>... parameterTypes)\"},\"5906\":{\"t\":\"返回指定参数类型、所有声明的（包括private）构造函数对象\"},\"5907\":{\"t\":\"Constructor<?>[]\"},\"5908\":{\"t\":\"getDeclaredConstructors()\"},\"5909\":{\"t\":\"返回所有声明的（包括private）构造函数对象\"},\"5910\":{\"t\":\"T\"},\"5911\":{\"t\":\"newInstance()\"},\"5912\":{\"t\":\"调用无参构造器创建此 Class 对象所表示的类的一个新实例。\"},\"5913\":{\"t\":\"下面看一个简单例子来了解Constructor对象的使用：\"},\"5914\":{\"t\":\"public class ConstructionTest implements Serializable { public static void main(String[] args) throws Exception { Class<?> clazz = null; //获取Class对象的引用 clazz = Class.forName(\\\"com.example.javabase.User\\\"); //第一种方法，实例化默认构造方法，User必须无参构造函数,否则将抛异常 User user = (User) clazz.newInstance(); user.setAge(20); user.setName(\\\"Jack\\\"); System.out.println(user); System.out.println(\\\"--------------------------------------------\\\"); //获取带String参数的public构造函数 Constructor cs1 =clazz.getConstructor(String.class); //创建User User user1= (User) cs1.newInstance(\\\"hiway\\\"); user1.setAge(22); System.out.println(\\\"user1:\\\"+user1.toString()); System.out.println(\\\"--------------------------------------------\\\"); //取得指定带int和String参数构造函数,该方法是私有构造private Constructor cs2=clazz.getDeclaredConstructor(int.class,String.class); //由于是private必须设置可访问 cs2.setAccessible(true); //创建user对象 User user2= (User) cs2.newInstance(25,\\\"hiway2\\\"); System.out.println(\\\"user2:\\\"+user2.toString()); System.out.println(\\\"--------------------------------------------\\\"); //获取所有构造包含private Constructor<?> cons[] = clazz.getDeclaredConstructors(); // 查看每个构造方法需要的参数 for (int i = 0; i < cons.length; i++) { //获取构造函数参数类型 Class<?> clazzs[] = cons[i].getParameterTypes(); System.out.println(\\\"构造函数[\\\"+i+\\\"]:\\\"+cons[i].toString() ); System.out.print(\\\"参数类型[\\\"+i+\\\"]:(\\\"); for (int j = 0; j < clazzs.length; j++) { if (j == clazzs.length - 1) System.out.print(clazzs[j].getName()); else System.out.print(clazzs[j].getName() + \\\",\\\"); } System.out.println(\\\")\\\"); } } } class User { private int age; private String name; public User() { super(); } public User(String name) { super(); this.name = name; } /** * 私有构造 * @param age * @param name */ private User(int age, String name) { super(); this.age = age; this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return \\\"User{\\\" + \\\"age=\\\" + age + \\\", name='\\\" + name + '\\\\'' + '}'; } } \"},\"5915\":{\"t\":\"输出结果\"},\"5916\":{\"t\":\"/* output User{age=20, name='Jack'} -------------------------------------------- user1:User{age=22, name='hiway'} -------------------------------------------- user2:User{age=25, name='hiway2'} -------------------------------------------- 构造函数[0]:private com.example.javabase.User(int,java.lang.String) 参数类型[0]:(int,java.lang.String) 构造函数[1]:public com.example.javabase.User(java.lang.String) 参数类型[1]:(java.lang.String) 构造函数[2]:public com.example.javabase.User() 参数类型[2]:() \"},\"5917\":{\"t\":\"关于Constructor类本身一些常用方法如下(仅部分，其他可查API)\"},\"5918\":{\"t\":\"方法返回值\"},\"5919\":{\"t\":\"方法名称\"},\"5920\":{\"t\":\"方法说明\"},\"5921\":{\"t\":\"Class\"},\"5922\":{\"t\":\"getDeclaringClass()\"},\"5923\":{\"t\":\"返回 Class 对象，该对象表示声明由此 Constructor 对象表示的构造方法的类,其实就是返回真实类型（不包含参数）\"},\"5924\":{\"t\":\"Type[]\"},\"5925\":{\"t\":\"getGenericParameterTypes()\"},\"5926\":{\"t\":\"按照声明顺序返回一组 Type 对象，返回的就是 Constructor对象构造函数的形参类型。\"},\"5927\":{\"t\":\"String\"},\"5928\":{\"t\":\"getName()\"},\"5929\":{\"t\":\"以字符串形式返回此构造方法的名称。\"},\"5930\":{\"t\":\"Class<?>[]\"},\"5931\":{\"t\":\"getParameterTypes()\"},\"5932\":{\"t\":\"按照声明顺序返回一组 Class 对象，即返回Constructor 对象所表示构造方法的形参类型\"},\"5933\":{\"t\":\"T\"},\"5934\":{\"t\":\"newInstance(Object... initargs)\"},\"5935\":{\"t\":\"使用此 Constructor对象表示的构造函数来创建新实例\"},\"5936\":{\"t\":\"String\"},\"5937\":{\"t\":\"toGenericString()\"},\"5938\":{\"t\":\"返回描述此 Constructor 的字符串，其中包括类型参数。\"},\"5939\":{\"t\":\"代码演示如下：\"},\"5940\":{\"t\":\"Constructor cs3 = clazz.getDeclaredConstructor(int.class,String.class); System.out.println(\\\"-----getDeclaringClass-----\\\"); Class uclazz=cs3.getDeclaringClass(); //Constructor对象表示的构造方法的类 System.out.println(\\\"构造方法的类:\\\"+uclazz.getName()); System.out.println(\\\"-----getGenericParameterTypes-----\\\"); //对象表示此 Constructor 对象所表示的方法的形参类型 Type[] tps=cs3.getGenericParameterTypes(); for (Type tp:tps) { System.out.println(\\\"参数名称tp:\\\"+tp); } System.out.println(\\\"-----getParameterTypes-----\\\"); //获取构造函数参数类型 Class<?> clazzs[] = cs3.getParameterTypes(); for (Class claz:clazzs) { System.out.println(\\\"参数名称:\\\"+claz.getName()); } System.out.println(\\\"-----getName-----\\\"); //以字符串形式返回此构造方法的名称 System.out.println(\\\"getName:\\\"+cs3.getName()); System.out.println(\\\"-----getoGenericString-----\\\"); //返回描述此 Constructor 的字符串，其中包括类型参数。 System.out.println(\\\"getoGenericString():\\\"+cs3.toGenericString()); \"},\"5941\":{\"t\":\"输出结果\"},\"5942\":{\"t\":\"-----getDeclaringClass----- 构造方法的类:com.example.javabase.User -----getGenericParameterTypes----- 参数名称tp:int 参数名称tp:class java.lang.String -----getParameterTypes----- 参数名称:int 参数名称:java.lang.String -----getName----- getName:com.example.javabase.User -----getoGenericString----- getoGenericString():private com.example.javabase.User(int,java.lang.String) \"},\"5943\":{\"h\":\"Field类及其用法\",\"a\":\"field类及其用法\"},\"5944\":{\"t\":\"Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。\"},\"5945\":{\"t\":\"同样的道理，我们可以通过Class类的提供的方法来获取代表字段信息的Field对象，Class类与Field对象相关方法如下：\"},\"5946\":{\"t\":\"方法返回值\"},\"5947\":{\"t\":\"方法名称\"},\"5948\":{\"t\":\"方法说明\"},\"5949\":{\"t\":\"Field\"},\"5950\":{\"t\":\"getDeclaredField(String name)\"},\"5951\":{\"t\":\"获取指定name名称的(包含private修饰的)字段，不包括继承的字段\"},\"5952\":{\"t\":\"Field[]\"},\"5953\":{\"t\":\"getDeclaredFields()\"},\"5954\":{\"t\":\"获取Class对象所表示的类或接口的所有(包含private修饰的)字段,不包括继承的字段\"},\"5955\":{\"t\":\"Field\"},\"5956\":{\"t\":\"getField(String name)\"},\"5957\":{\"t\":\"获取指定name名称、具有public修饰的字段，包含继承字段\"},\"5958\":{\"t\":\"Field[]\"},\"5959\":{\"t\":\"getFields()\"},\"5960\":{\"t\":\"获取修饰符为public的字段，包含继承字段\"},\"5961\":{\"t\":\"下面的代码演示了上述方法的使用过程\"},\"5962\":{\"t\":\"public class ReflectField { public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException { Class<?> clazz = Class.forName(\\\"reflect.Student\\\"); //获取指定字段名称的Field类,注意字段修饰符必须为public而且存在该字段, // 否则抛NoSuchFieldException Field field = clazz.getField(\\\"age\\\"); System.out.println(\\\"field:\\\"+field); //获取所有修饰符为public的字段,包含父类字段,注意修饰符为public才会获取 Field fields[] = clazz.getFields(); for (Field f:fields) { System.out.println(\\\"f:\\\"+f.getDeclaringClass()); } System.out.println(\\\"================getDeclaredFields====================\\\"); //获取当前类所字段(包含private字段),注意不包含父类的字段 Field fields2[] = clazz.getDeclaredFields(); for (Field f:fields2) { System.out.println(\\\"f2:\\\"+f.getDeclaringClass()); } //获取指定字段名称的Field类,可以是任意修饰符的自动,注意不包含父类的字段 Field field2 = clazz.getDeclaredField(\\\"desc\\\"); System.out.println(\\\"field2:\\\"+field2); } /** 输出结果: field:public int reflect.Person.age f:public java.lang.String reflect.Student.desc f:public int reflect.Person.age f:public java.lang.String reflect.Person.name ================getDeclaredFields==================== f2:public java.lang.String reflect.Student.desc f2:private int reflect.Student.score field2:public java.lang.String reflect.Student.desc */ } class Person{ public int age; public String name; //省略set和get方法 } class Student extends Person{ public String desc; private int score; //省略set和get方法 } \"},\"5963\":{\"t\":\"上述方法需要注意的是，如果我们不期望获取其父类的字段，则需使用Class类的getDeclaredField/getDeclaredFields方法来获取字段即可，倘若需要连带获取到父类的字段，那么请使用Class类的getField/getFields，但是也只能获取到public修饰的的字段，无法获取父类的私有字段。下面将通过Field类本身的方法对指定类属性赋值，代码演示如下：\"},\"5964\":{\"t\":\"//获取Class对象引用 Class<?> clazz = Class.forName(\\\"reflect.Student\\\"); Student st= (Student) clazz.newInstance(); //获取父类public字段并赋值 Field ageField = clazz.getField(\\\"age\\\"); ageField.set(st,18); Field nameField = clazz.getField(\\\"name\\\"); nameField.set(st,\\\"Lily\\\"); //只获取当前类的字段,不获取父类的字段 Field descField = clazz.getDeclaredField(\\\"desc\\\"); descField.set(st,\\\"I am student\\\"); Field scoreField = clazz.getDeclaredField(\\\"score\\\"); //设置可访问，score是private的 scoreField.setAccessible(true); scoreField.set(st,88); System.out.println(st.toString()); //输出结果：Student{age=18, name='Lily ,desc='I am student', score=88} //获取字段值 System.out.println(scoreField.get(st)); // 88 \"},\"5965\":{\"t\":\"其中的set(Object obj, Object value)方法是Field类本身的方法，用于设置字段的值，而get(Object obj)则是获取字段的值，当然关于Field类还有其他常用的方法如下：\"},\"5966\":{\"t\":\"方法返回值\"},\"5967\":{\"t\":\"方法名称\"},\"5968\":{\"t\":\"方法说明\"},\"5969\":{\"t\":\"void\"},\"5970\":{\"t\":\"set(Object obj, Object value)\"},\"5971\":{\"t\":\"将指定对象变量上此 Field 对象表示的字段设置为指定的新值。\"},\"5972\":{\"t\":\"Object\"},\"5973\":{\"t\":\"get(Object obj)\"},\"5974\":{\"t\":\"返回指定对象上此 Field 表示的字段的值\"},\"5975\":{\"t\":\"Class<?>\"},\"5976\":{\"t\":\"getType()\"},\"5977\":{\"t\":\"返回一个 Class 对象，它标识了此Field 对象所表示字段的声明类型。\"},\"5978\":{\"t\":\"boolean\"},\"5979\":{\"t\":\"isEnumConstant()\"},\"5980\":{\"t\":\"如果此字段表示枚举类型的元素则返回 true；否则返回 false\"},\"5981\":{\"t\":\"String\"},\"5982\":{\"t\":\"toGenericString()\"},\"5983\":{\"t\":\"返回一个描述此 Field（包括其一般类型）的字符串\"},\"5984\":{\"t\":\"String\"},\"5985\":{\"t\":\"getName()\"},\"5986\":{\"t\":\"返回此 Field 对象表示的字段的名称\"},\"5987\":{\"t\":\"Class<?>\"},\"5988\":{\"t\":\"getDeclaringClass()\"},\"5989\":{\"t\":\"返回表示类或接口的 Class 对象，该类或接口声明由此 Field 对象表示的字段\"},\"5990\":{\"t\":\"void\"},\"5991\":{\"t\":\"setAccessible(boolean flag)\"},\"5992\":{\"t\":\"将此对象的 accessible 标志设置为指示的布尔值,即设置其可访问性\"},\"5993\":{\"t\":\"上述方法可能是较为常用的，事实上在设置值的方法上，Field类还提供了专门针对基本数据类型的方法，如setInt()/getInt()、setBoolean()/getBoolean、setChar()/getChar()等等方法，这里就不全部列出了，需要时查API文档即可。需要特别注意的是被final关键字修饰的Field字段是安全的，在运行时可以接收任何修改，但最终其实际值是不会发生改变的。\"},\"5994\":{\"h\":\"Method类及其用法\",\"a\":\"method类及其用法\"},\"5995\":{\"t\":\"Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息，所反映的方法可能是类方法或实例方法（包括抽象方法）。\"},\"5996\":{\"t\":\"下面是Class类获取Method对象相关的方法：\"},\"5997\":{\"t\":\"方法返回值\"},\"5998\":{\"t\":\"方法名称\"},\"5999\":{\"t\":\"方法说明\"},\"6000\":{\"t\":\"Method\"},\"6001\":{\"t\":\"getDeclaredMethod(String name, Class<?>... parameterTypes)\"},\"6002\":{\"t\":\"返回一个指定参数的Method对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。\"},\"6003\":{\"t\":\"Method[]\"},\"6004\":{\"t\":\"getDeclaredMethods()\"},\"6005\":{\"t\":\"返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。\"},\"6006\":{\"t\":\"Method\"},\"6007\":{\"t\":\"getMethod(String name, Class<?>... parameterTypes)\"},\"6008\":{\"t\":\"返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。\"},\"6009\":{\"t\":\"Method[]\"},\"6010\":{\"t\":\"getMethods()\"},\"6011\":{\"t\":\"返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。\"},\"6012\":{\"t\":\"同样通过案例演示上述方法：\"},\"6013\":{\"t\":\"import java.lang.reflect.Method; public class ReflectMethod { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class clazz = Class.forName(\\\"reflect.Circle\\\"); //根据参数获取public的Method,包含继承自父类的方法 Method method = clazz.getMethod(\\\"draw\\\",int.class,String.class); System.out.println(\\\"method:\\\"+method); //获取所有public的方法: Method[] methods =clazz.getMethods(); for (Method m:methods){ System.out.println(\\\"m::\\\"+m); } System.out.println(\\\"=========================================\\\"); //获取当前类的方法包含private,该方法无法获取继承自父类的method Method method1 = clazz.getDeclaredMethod(\\\"drawCircle\\\"); System.out.println(\\\"method1::\\\"+method1); //获取当前类的所有方法包含private,该方法无法获取继承自父类的method Method[] methods1=clazz.getDeclaredMethods(); for (Method m:methods1){ System.out.println(\\\"m1::\\\"+m); } } } class Shape { public void draw(){ System.out.println(\\\"draw\\\"); } public void draw(int count , String name){ System.out.println(\\\"draw \\\"+ name +\\\",count=\\\"+count); } } class Circle extends Shape{ private void drawCircle(){ System.out.println(\\\"drawCircle\\\"); } public int getAllCount(){ return 100; } } \"},\"6014\":{\"t\":\"输出结果:\"},\"6015\":{\"t\":\"method:public void reflect.Shape.draw(int,java.lang.String) m::public int reflect.Circle.getAllCount() m::public void reflect.Shape.draw() m::public void reflect.Shape.draw(int,java.lang.String) m::public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException m::public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException m::public final void java.lang.Object.wait() throws java.lang.InterruptedException m::public boolean java.lang.Object.equals(java.lang.Object) m::public java.lang.String java.lang.Object.toString() m::public native int java.lang.Object.hashCode() m::public final native java.lang.Class java.lang.Object.getClass() m::public final native void java.lang.Object.notify() m::public final native void java.lang.Object.notifyAll() ========================================= method1::private void reflect.Circle.drawCircle() m1::public int reflect.Circle.getAllCount() m1::private void reflect.Circle.drawCircle() \"},\"6016\":{\"t\":\"在通过getMethods方法获取Method对象时，会把父类的方法也获取到，如上的输出结果，把Object类的方法都打印出来了。而getDeclaredMethod/getDeclaredMethods方法都只能获取当前类的方法。我们在使用时根据情况选择即可。下面将演示通过Method对象调用指定类的方法：\"},\"6017\":{\"t\":\"Class clazz = Class.forName(\\\"reflect.Circle\\\"); //创建对象 Circle circle = (Circle) clazz.newInstance(); //获取指定参数的方法对象Method Method method = clazz.getMethod(\\\"draw\\\",int.class,String.class); //通过Method对象的invoke(Object obj,Object... args)方法调用 method.invoke(circle,15,\\\"圈圈\\\"); //对私有无参方法的操作 Method method1 = clazz.getDeclaredMethod(\\\"drawCircle\\\"); //修改私有方法的访问标识 method1.setAccessible(true); method1.invoke(circle); //对有返回值得方法操作 Method method2 =clazz.getDeclaredMethod(\\\"getAllCount\\\"); Integer count = (Integer) method2.invoke(circle); System.out.println(\\\"count:\\\"+count); \"},\"6018\":{\"t\":\"输出结果\"},\"6019\":{\"t\":\"draw 圈圈,count=15 drawCircle count:100 \"},\"6020\":{\"t\":\"在上述代码中调用方法，使用了Method类的invoke(Object obj,Object... args)第一个参数代表调用的对象，第二个参数传递的调用方法的参数。这样就完成了类方法的动态调用。\"},\"6021\":{\"t\":\"方法返回值\"},\"6022\":{\"t\":\"方法名称\"},\"6023\":{\"t\":\"方法说明\"},\"6024\":{\"t\":\"Object\"},\"6025\":{\"t\":\"invoke(Object obj, Object... args)\"},\"6026\":{\"t\":\"对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。\"},\"6027\":{\"t\":\"Class<?>\"},\"6028\":{\"t\":\"getReturnType()\"},\"6029\":{\"t\":\"返回一个 Class 对象，该对象描述了此 Method 对象所表示的方法的正式返回类型,即方法的返回类型\"},\"6030\":{\"t\":\"Type\"},\"6031\":{\"t\":\"getGenericReturnType()\"},\"6032\":{\"t\":\"返回表示由此 Method 对象所表示方法的正式返回类型的 Type 对象，也是方法的返回类型。\"},\"6033\":{\"t\":\"Class<?>[]\"},\"6034\":{\"t\":\"getParameterTypes()\"},\"6035\":{\"t\":\"按照声明顺序返回 Class 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型。即返回方法的参数类型组成的数组\"},\"6036\":{\"t\":\"Type[]\"},\"6037\":{\"t\":\"getGenericParameterTypes()\"},\"6038\":{\"t\":\"按照声明顺序返回 Type 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型的，也是返回方法的参数类型\"},\"6039\":{\"t\":\"String\"},\"6040\":{\"t\":\"getName()\"},\"6041\":{\"t\":\"以 String 形式返回此 Method 对象表示的方法名称，即返回方法的名称\"},\"6042\":{\"t\":\"boolean\"},\"6043\":{\"t\":\"isVarArgs()\"},\"6044\":{\"t\":\"判断方法是否带可变参数，如果将此方法声明为带有可变数量的参数，则返回 true；否则，返回 false。\"},\"6045\":{\"t\":\"String\"},\"6046\":{\"t\":\"toGenericString()\"},\"6047\":{\"t\":\"返回描述此 Method 的字符串，包括类型参数。\"},\"6048\":{\"t\":\"getReturnType方法/getGenericReturnType方法都是获取Method对象表示的方法的返回类型，只不过前者返回的Class类型后者返回的Type(前面已分析过)，Type就是一个接口而已，在Java8中新增一个默认的方法实现，返回的就参数类型信息\"},\"6049\":{\"t\":\"public interface Type { //1.8新增 default String getTypeName() { return toString(); } } \"},\"6050\":{\"t\":\"而getParameterTypes/getGenericParameterTypes也是同样的道理，都是获取Method对象所表示的方法的参数类型，其他方法与前面的Field和Constructor是类似的。\"},\"6051\":{\"h\":\"反射机制执行的流程\",\"a\":\"反射机制执行的流程\"},\"6052\":{\"t\":\"这部分主要参考自https://www.cnblogs.com/yougewe/p/10125073.html\"},\"6053\":{\"t\":\"先看个例子\"},\"6054\":{\"t\":\"public class HelloReflect { public static void main(String[] args) { try { // 1. 使用外部配置的实现，进行动态加载类 TempFunctionTest test = (TempFunctionTest)Class.forName(\\\"com.tester.HelloReflect\\\").newInstance(); test.sayHello(\\\"call directly\\\"); // 2. 根据配置的函数名，进行方法调用（不需要通用的接口抽象） Object t2 = new TempFunctionTest(); Method method = t2.getClass().getDeclaredMethod(\\\"sayHello\\\", String.class); method.invoke(test, \\\"method invoke\\\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (NoSuchMethodException e ) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } } public void sayHello(String word) { System.out.println(\\\"hello,\\\" + word); } } \"},\"6055\":{\"t\":\"来看执行流程\"},\"6056\":{\"t\":\"img\"},\"6057\":{\"h\":\"反射获取类实例\",\"a\":\"反射获取类实例\"},\"6058\":{\"t\":\"首先调用了 java.lang.Class 的静态方法，获取类信息。\"},\"6059\":{\"t\":\" @CallerSensitive public static Class<?> forName(String className) throws ClassNotFoundException { // 先通过反射，获取调用进来的类信息，从而获取当前的 classLoader Class<?> caller = Reflection.getCallerClass(); // 调用native方法进行获取class信息 return forName0(className, true, ClassLoader.getClassLoader(caller), caller); } \"},\"6060\":{\"t\":\"forName()反射获取类信息，并没有将实现留给了java,而是交给了jvm去加载。\"},\"6061\":{\"t\":\"主要是先获取 ClassLoader, 然后调用 native 方法，获取信息，加载类则是回调 java.lang.ClassLoader.\"},\"6062\":{\"t\":\"最后，jvm又会回调 ClassLoader 进类加载。\"},\"6063\":{\"t\":\" // public Class<?> loadClass(String name) throws ClassNotFoundException { return loadClass(name, false); } // sun.misc.Launcher public Class<?> loadClass(String var1, boolean var2) throws ClassNotFoundException { int var3 = var1.lastIndexOf(46); if(var3 != -1) { SecurityManager var4 = System.getSecurityManager(); if(var4 != null) { var4.checkPackageAccess(var1.substring(0, var3)); } } if(this.ucp.knownToNotExist(var1)) { Class var5 = this.findLoadedClass(var1); if(var5 != null) { if(var2) { this.resolveClass(var5); } return var5; } else { throw new ClassNotFoundException(var1); } } else { return super.loadClass(var1, var2); } } // java.lang.ClassLoader protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { // 先获取锁 synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded // 如果已经加载了的话，就不用再加载了 Class<?> c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { // 双亲委托加载 if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } // 父类没有加载到时，再自己加载 if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } protected Object getClassLoadingLock(String className) { Object lock = this; if (parallelLockMap != null) { // 使用 ConcurrentHashMap来保存锁 Object newLock = new Object(); lock = parallelLockMap.putIfAbsent(className, newLock); if (lock == null) { lock = newLock; } } return lock; } protected final Class<?> findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } \"},\"6064\":{\"t\":\"下面来看一下 newInstance() 的实现方式。\"},\"6065\":{\"t\":\" // 首先肯定是 Class.newInstance @CallerSensitive public T newInstance() throws InstantiationException, IllegalAccessException { if (System.getSecurityManager() != null) { checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), false); } // NOTE: the following code may not be strictly correct under // the current Java memory model. // Constructor lookup // newInstance() 其实相当于调用类的无参构造函数，所以，首先要找到其无参构造器 if (cachedConstructor == null) { if (this == Class.class) { // 不允许调用 Class 的 newInstance() 方法 throw new IllegalAccessException( \\\"Can not call newInstance() on the Class for java.lang.Class\\\" ); } try { // 获取无参构造器 Class<?>[] empty = {}; final Constructor<T> c = getConstructor0(empty, Member.DECLARED); // Disable accessibility checks on the constructor // since we have to do the security check here anyway // (the stack depth is wrong for the Constructor's // security check to work) java.security.AccessController.doPrivileged( new java.security.PrivilegedAction<Void>() { public Void run() { c.setAccessible(true); return null; } }); cachedConstructor = c; } catch (NoSuchMethodException e) { throw (InstantiationException) new InstantiationException(getName()).initCause(e); } } Constructor<T> tmpConstructor = cachedConstructor; // Security check (same as in java.lang.reflect.Constructor) int modifiers = tmpConstructor.getModifiers(); if (!Reflection.quickCheckMemberAccess(this, modifiers)) { Class<?> caller = Reflection.getCallerClass(); if (newInstanceCallerCache != caller) { Reflection.ensureMemberAccess(caller, this, null, modifiers); newInstanceCallerCache = caller; } } // Run constructor try { // 调用无参构造器 return tmpConstructor.newInstance((Object[])null); } catch (InvocationTargetException e) { Unsafe.getUnsafe().throwException(e.getTargetException()); // Not reached return null; } } \"},\"6066\":{\"t\":\"newInstance() 主要做了三件事：\"},\"6067\":{\"t\":\"权限检测，如果不通过直接抛出异常；\"},\"6068\":{\"t\":\"查找无参构造器，并将其缓存起来；\"},\"6069\":{\"t\":\"调用具体方法的无参构造方法，生成实例并返回；\"},\"6070\":{\"t\":\"下面是获取构造器的过程：\"},\"6071\":{\"t\":\" private Constructor<T> getConstructor0(Class<?>[] parameterTypes, int which) throws NoSuchMethodException { // 获取所有构造器 Constructor<T>[] constructors = privateGetDeclaredConstructors((which == Member.PUBLIC)); for (Constructor<T> constructor : constructors) { if (arrayContentsEq(parameterTypes, constructor.getParameterTypes())) { return getReflectionFactory().copyConstructor(constructor); } } throw new NoSuchMethodException(getName() + \\\".<init>\\\" + argumentTypesToString(parameterTypes)); } \"},\"6072\":{\"t\":\"getConstructor0() 为获取匹配的构造方器；分三步：\"},\"6073\":{\"t\":\"先获取所有的constructors, 然后通过进行参数类型比较；\"},\"6074\":{\"t\":\"找到匹配后，通过 ReflectionFactory copy一份constructor返回；\"},\"6075\":{\"t\":\"否则抛出 NoSuchMethodException;\"},\"6076\":{\"t\":\" // 获取当前类所有的构造方法，通过jvm或者缓存 // Returns an array of \\\"root\\\" constructors. These Constructor // objects must NOT be propagated to the outside world, but must // instead be copied via ReflectionFactory.copyConstructor. private Constructor<T>[] privateGetDeclaredConstructors(boolean publicOnly) { checkInitted(); Constructor<T>[] res; // 调用 reflectionData(), 获取保存的信息，使用软引用保存，从而使内存不够可以回收 ReflectionData<T> rd = reflectionData(); if (rd != null) { res = publicOnly ? rd.publicConstructors : rd.declaredConstructors; // 存在缓存，则直接返回 if (res != null) return res; } // No cached value available; request value from VM if (isInterface()) { @SuppressWarnings(\\\"unchecked\\\") Constructor<T>[] temporaryRes = (Constructor<T>[]) new Constructor<?>[0]; res = temporaryRes; } else { // 使用native方法从jvm获取构造器 res = getDeclaredConstructors0(publicOnly); } if (rd != null) { // 最后，将从jvm中读取的内容，存入缓存 if (publicOnly) { rd.publicConstructors = res; } else { rd.declaredConstructors = res; } } return res; } // Lazily create and cache ReflectionData private ReflectionData<T> reflectionData() { SoftReference<ReflectionData<T>> reflectionData = this.reflectionData; int classRedefinedCount = this.classRedefinedCount; ReflectionData<T> rd; if (useCaches && reflectionData != null && (rd = reflectionData.get()) != null && rd.redefinedCount == classRedefinedCount) { return rd; } // else no SoftReference or cleared SoftReference or stale ReflectionData // -> create and replace new instance return newReflectionData(reflectionData, classRedefinedCount); } // 新创建缓存，保存反射信息 private ReflectionData<T> newReflectionData(SoftReference<ReflectionData<T>> oldReflectionData, int classRedefinedCount) { if (!useCaches) return null; // 使用cas保证更新的线程安全性，所以反射是保证线程安全的 while (true) { ReflectionData<T> rd = new ReflectionData<>(classRedefinedCount); // try to CAS it... if (Atomic.casReflectionData(this, oldReflectionData, new SoftReference<>(rd))) { return rd; } // 先使用CAS更新，如果更新成功，则立即返回，否则测查当前已被其他线程更新的情况，如果和自己想要更新的状态一致，则也算是成功了 oldReflectionData = this.reflectionData; classRedefinedCount = this.classRedefinedCount; if (oldReflectionData != null && (rd = oldReflectionData.get()) != null && rd.redefinedCount == classRedefinedCount) { return rd; } } } \"},\"6077\":{\"t\":\"如上，privateGetDeclaredConstructors(), 获取所有的构造器主要步骤；\"},\"6078\":{\"t\":\"先尝试从缓存中获取；\"},\"6079\":{\"t\":\"如果缓存没有，则从jvm中重新获取，并存入缓存，缓存使用软引用进行保存，保证内存可用；\"},\"6080\":{\"t\":\"另外，使用 relactionData() 进行缓存保存；ReflectionData 的数据结构如下。\"},\"6081\":{\"t\":\" // reflection data that might get invalidated when JVM TI RedefineClasses() is called private static class ReflectionData<T> { volatile Field[] declaredFields; volatile Field[] publicFields; volatile Method[] declaredMethods; volatile Method[] publicMethods; volatile Constructor<T>[] declaredConstructors; volatile Constructor<T>[] publicConstructors; // Intermediate results for getFields and getMethods volatile Field[] declaredPublicFields; volatile Method[] declaredPublicMethods; volatile Class<?>[] interfaces; // Value of classRedefinedCount when we created this ReflectionData instance final int redefinedCount; ReflectionData(int redefinedCount) { this.redefinedCount = redefinedCount; } } \"},\"6082\":{\"t\":\"其中，还有一个点，就是如何比较构造是否是要查找构造器，其实就是比较类型完成相等就完了，有一个不相等则返回false。\"},\"6083\":{\"t\":\" private static boolean arrayContentsEq(Object[] a1, Object[] a2) { if (a1 == null) { return a2 == null || a2.length == 0; } if (a2 == null) { return a1.length == 0; } if (a1.length != a2.length) { return false; } for (int i = 0; i < a1.length; i++) { if (a1[i] != a2[i]) { return false; } } return true; } // sun.reflect.ReflectionFactory /** Makes a copy of the passed constructor. The returned constructor is a \\\"child\\\" of the passed one; see the comments in Constructor.java for details. */ public <T> Constructor<T> copyConstructor(Constructor<T> arg) { return langReflectAccess().copyConstructor(arg); } // java.lang.reflect.Constructor, copy 其实就是新new一个 Constructor 出来 Constructor<T> copy() { // This routine enables sharing of ConstructorAccessor objects // among Constructor objects which refer to the same underlying // method in the VM. (All of this contortion is only necessary // because of the \\\"accessibility\\\" bit in AccessibleObject, // which implicitly requires that new java.lang.reflect // objects be fabricated for each reflective call on Class // objects.) if (this.root != null) throw new IllegalArgumentException(\\\"Can not copy a non-root Constructor\\\"); Constructor<T> res = new Constructor<>(clazz, parameterTypes, exceptionTypes, modifiers, slot, signature, annotations, parameterAnnotations); // root 指向当前 constructor res.root = this; // Might as well eagerly propagate this if already present res.constructorAccessor = constructorAccessor; return res; } \"},\"6084\":{\"t\":\"通过上面，获取到 Constructor 了。\"},\"6085\":{\"t\":\"接下来就只需调用其相应构造器的 newInstance()，即返回实例了。\"},\"6086\":{\"t\":\" // return tmpConstructor.newInstance((Object[])null); // java.lang.reflect.Constructor @CallerSensitive public T newInstance(Object ... initargs) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { if (!override) { if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) { Class<?> caller = Reflection.getCallerClass(); checkAccess(caller, clazz, null, modifiers); } } if ((clazz.getModifiers() & Modifier.ENUM) != 0) throw new IllegalArgumentException(\\\"Cannot reflectively create enum objects\\\"); ConstructorAccessor ca = constructorAccessor; // read volatile if (ca == null) { ca = acquireConstructorAccessor(); } @SuppressWarnings(\\\"unchecked\\\") T inst = (T) ca.newInstance(initargs); return inst; } // sun.reflect.DelegatingConstructorAccessorImpl public Object newInstance(Object[] args) throws InstantiationException, IllegalArgumentException, InvocationTargetException { return delegate.newInstance(args); } // sun.reflect.NativeConstructorAccessorImpl public Object newInstance(Object[] args) throws InstantiationException, IllegalArgumentException, InvocationTargetException { // We can't inflate a constructor belonging to a vm-anonymous class // because that kind of class can't be referred to by name, hence can't // be found from the generated bytecode. if (++numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(c.getDeclaringClass())) { ConstructorAccessorImpl acc = (ConstructorAccessorImpl) new MethodAccessorGenerator(). generateConstructor(c.getDeclaringClass(), c.getParameterTypes(), c.getExceptionTypes(), c.getModifiers()); parent.setDelegate(acc); } // 调用native方法，进行调用 constructor return newInstance0(c, args); } \"},\"6087\":{\"t\":\"返回构造器的实例后，可以根据外部进行进行类型转换，从而使用接口或方法进行调用实例功能了。\"},\"6088\":{\"h\":\"反射获取方法\",\"a\":\"反射获取方法\"},\"6089\":{\"t\":\"第一步，先获取 Method;\"},\"6090\":{\"t\":\" // java.lang.Class @CallerSensitive public Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException { checkMemberAccess(Member.DECLARED, Reflection.getCallerClass(), true); Method method = searchMethods(privateGetDeclaredMethods(false), name, parameterTypes); if (method == null) { throw new NoSuchMethodException(getName() + \\\".\\\" + name + argumentTypesToString(parameterTypes)); } return method; } \"},\"6091\":{\"t\":\"忽略第一个检查权限，剩下就只有两个动作了。\"},\"6092\":{\"t\":\"获取所有方法列表；\"},\"6093\":{\"t\":\"根据方法名称和方法列表，选出符合要求的方法；\"},\"6094\":{\"t\":\"如果没有找到相应方法，抛出异常，否则返回对应方法；\"},\"6095\":{\"t\":\"所以，先看一下怎样获取类声明的所有方法？\"},\"6096\":{\"t\":\" // Returns an array of \\\"root\\\" methods. These Method objects must NOT // be propagated to the outside world, but must instead be copied // via ReflectionFactory.copyMethod. private Method[] privateGetDeclaredMethods(boolean publicOnly) { checkInitted(); Method[] res; ReflectionData<T> rd = reflectionData(); if (rd != null) { res = publicOnly ? rd.declaredPublicMethods : rd.declaredMethods; if (res != null) return res; } // No cached value available; request value from VM res = Reflection.filterMethods(this, getDeclaredMethods0(publicOnly)); if (rd != null) { if (publicOnly) { rd.declaredPublicMethods = res; } else { rd.declaredMethods = res; } } return res; } \"},\"6097\":{\"t\":\"很相似，和获取所有构造器的方法很相似，都是先从缓存中获取方法，如果没有，则从jvm中获取。\"},\"6098\":{\"t\":\"不同的是，方法列表需要进行过滤 Reflection.filterMethods;当然后面看来，这个方法我们一般不会派上用场。\"},\"6099\":{\"t\":\" // sun.misc.Reflection public static Method[] filterMethods(Class<?> containingClass, Method[] methods) { if (methodFilterMap == null) { // Bootstrapping return methods; } return (Method[])filter(methods, methodFilterMap.get(containingClass)); } // 可以过滤指定的方法，一般为空，如果要指定过滤，可以调用 registerMethodsToFilter(), 或者... private static Member[] filter(Member[] members, String[] filteredNames) { if ((filteredNames == null) || (members.length == 0)) { return members; } int numNewMembers = 0; for (Member member : members) { boolean shouldSkip = false; for (String filteredName : filteredNames) { if (member.getName() == filteredName) { shouldSkip = true; break; } } if (!shouldSkip) { ++numNewMembers; } } Member[] newMembers = (Member[])Array.newInstance(members[0].getClass(), numNewMembers); int destIdx = 0; for (Member member : members) { boolean shouldSkip = false; for (String filteredName : filteredNames) { if (member.getName() == filteredName) { shouldSkip = true; break; } } if (!shouldSkip) { newMembers[destIdx++] = member; } } return newMembers; } \"},\"6100\":{\"t\":\"第二步，根据方法名和参数类型过滤指定方法返回：\"},\"6101\":{\"t\":\" private static Method searchMethods(Method[] methods, String name, Class<?>[] parameterTypes) { Method res = null; // 使用常量池，避免重复创建String String internedName = name.intern(); for (int i = 0; i < methods.length; i++) { Method m = methods[i]; if (m.getName() == internedName && arrayContentsEq(parameterTypes, m.getParameterTypes()) && (res == null || res.getReturnType().isAssignableFrom(m.getReturnType()))) res = m; } return (res == null ? res : getReflectionFactory().copyMethod(res)); } \"},\"6102\":{\"t\":\"大概意思看得明白，就是匹配到方法名，然后参数类型匹配，才可以。\"},\"6103\":{\"t\":\"但是可以看到，匹配到一个方法，并没有退出for循环，而是继续进行匹配。\"},\"6104\":{\"t\":\"这里是匹配最精确的子类进行返回（最优匹配）\"},\"6105\":{\"t\":\"最后，还是通过 ReflectionFactory, copy 方法后返回。\"},\"6106\":{\"h\":\"调用method.invoke()方法\",\"a\":\"调用method-invoke-方法\"},\"6107\":{\"t\":\" @CallerSensitive public Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException { if (!override) { if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) { Class<?> caller = Reflection.getCallerClass(); checkAccess(caller, clazz, obj, modifiers); } } MethodAccessor ma = methodAccessor; // read volatile if (ma == null) { ma = acquireMethodAccessor(); } return ma.invoke(obj, args); } \"},\"6108\":{\"t\":\"invoke时，是通过 MethodAccessor 进行调用的，而 MethodAccessor 是个接口，在第一次时调用 acquireMethodAccessor() 进行新创建。\"},\"6109\":{\"t\":\" // probably make the implementation more scalable. private MethodAccessor acquireMethodAccessor() { // First check to see if one has been created yet, and take it // if so MethodAccessor tmp = null; if (root != null) tmp = root.getMethodAccessor(); if (tmp != null) { // 存在缓存时，存入 methodAccessor，否则调用 ReflectionFactory 创建新的 MethodAccessor methodAccessor = tmp; } else { // Otherwise fabricate one and propagate it up to the root tmp = reflectionFactory.newMethodAccessor(this); setMethodAccessor(tmp); } return tmp; } // sun.reflect.ReflectionFactory public MethodAccessor newMethodAccessor(Method method) { checkInitted(); if (noInflation && !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) { return new MethodAccessorGenerator(). generateMethod(method.getDeclaringClass(), method.getName(), method.getParameterTypes(), method.getReturnType(), method.getExceptionTypes(), method.getModifiers()); } else { NativeMethodAccessorImpl acc = new NativeMethodAccessorImpl(method); DelegatingMethodAccessorImpl res = new DelegatingMethodAccessorImpl(acc); acc.setParent(res); return res; } } \"},\"6110\":{\"t\":\"两个Accessor详情：\"},\"6111\":{\"t\":\"// NativeMethodAccessorImpl / DelegatingMethodAccessorImpl class NativeMethodAccessorImpl extends MethodAccessorImpl { private final Method method; private DelegatingMethodAccessorImpl parent; private int numInvocations; NativeMethodAccessorImpl(Method method) { this.method = method; } public Object invoke(Object obj, Object[] args) throws IllegalArgumentException, InvocationTargetException { // We can't inflate methods belonging to vm-anonymous classes because // that kind of class can't be referred to by name, hence can't be // found from the generated bytecode. if (++numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) { MethodAccessorImpl acc = (MethodAccessorImpl) new MethodAccessorGenerator(). generateMethod(method.getDeclaringClass(), method.getName(), method.getParameterTypes(), method.getReturnType(), method.getExceptionTypes(), method.getModifiers()); parent.setDelegate(acc); } return invoke0(method, obj, args); } void setParent(DelegatingMethodAccessorImpl parent) { this.parent = parent; } private static native Object invoke0(Method m, Object obj, Object[] args); } class DelegatingMethodAccessorImpl extends MethodAccessorImpl { private MethodAccessorImpl delegate; DelegatingMethodAccessorImpl(MethodAccessorImpl delegate) { setDelegate(delegate); } public Object invoke(Object obj, Object[] args) throws IllegalArgumentException, InvocationTargetException { return delegate.invoke(obj, args); } void setDelegate(MethodAccessorImpl delegate) { this.delegate = delegate; } } \"},\"6112\":{\"t\":\"进行 ma.invoke(obj, args); 调用时，调用 DelegatingMethodAccessorImpl.invoke();\"},\"6113\":{\"t\":\"最后被委托到 NativeMethodAccessorImpl.invoke(), 即：\"},\"6114\":{\"t\":\" public Object invoke(Object obj, Object[] args) throws IllegalArgumentException, InvocationTargetException { // We can't inflate methods belonging to vm-anonymous classes because // that kind of class can't be referred to by name, hence can't be // found from the generated bytecode. if (++numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) { MethodAccessorImpl acc = (MethodAccessorImpl) new MethodAccessorGenerator(). generateMethod(method.getDeclaringClass(), method.getName(), method.getParameterTypes(), method.getReturnType(), method.getExceptionTypes(), method.getModifiers()); parent.setDelegate(acc); } // invoke0 是个 native 方法，由jvm进行调用业务方法。从而完成反射调用功能。 return invoke0(method, obj, args); } \"},\"6115\":{\"t\":\"其中， generateMethod() 是生成具体类的方法：\"},\"6116\":{\"t\":\" /** This routine is not thread-safe */ public MethodAccessor generateMethod(Class<?> declaringClass, String name, Class<?>[] parameterTypes, Class<?> returnType, Class<?>[] checkedExceptions, int modifiers) { return (MethodAccessor) generate(declaringClass, name, parameterTypes, returnType, checkedExceptions, modifiers, false, false, null); } \"},\"6117\":{\"t\":\"generate() 戳详情。\"},\"6118\":{\"t\":\" /** This routine is not thread-safe */ private MagicAccessorImpl generate(final Class<?> declaringClass, String name, Class<?>[] parameterTypes, Class<?> returnType, Class<?>[] checkedExceptions, int modifiers, boolean isConstructor, boolean forSerialization, Class<?> serializationTargetClass) { ByteVector vec = ByteVectorFactory.create(); asm = new ClassFileAssembler(vec); this.declaringClass = declaringClass; this.parameterTypes = parameterTypes; this.returnType = returnType; this.modifiers = modifiers; this.isConstructor = isConstructor; this.forSerialization = forSerialization; asm.emitMagicAndVersion(); // Constant pool entries: // ( * = Boxing information: optional) // (+ = Shared entries provided by AccessorGenerator) // (^ = Only present if generating SerializationConstructorAccessor) // [UTF-8] [This class's name] // [CONSTANT_Class_info] for above // [UTF-8] \\\"sun/reflect/{MethodAccessorImpl,ConstructorAccessorImpl,SerializationConstructorAccessorImpl}\\\" // [CONSTANT_Class_info] for above // [UTF-8] [Target class's name] // [CONSTANT_Class_info] for above // ^ [UTF-8] [Serialization: Class's name in which to invoke constructor] // ^ [CONSTANT_Class_info] for above // [UTF-8] target method or constructor name // [UTF-8] target method or constructor signature // [CONSTANT_NameAndType_info] for above // [CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info] for target method // [UTF-8] \\\"invoke\\\" or \\\"newInstance\\\" // [UTF-8] invoke or newInstance descriptor // [UTF-8] descriptor for type of non-primitive parameter 1 // [CONSTANT_Class_info] for type of non-primitive parameter 1 // ... // [UTF-8] descriptor for type of non-primitive parameter n // [CONSTANT_Class_info] for type of non-primitive parameter n // + [UTF-8] \\\"java/lang/Exception\\\" // + [CONSTANT_Class_info] for above // + [UTF-8] \\\"java/lang/ClassCastException\\\" // + [CONSTANT_Class_info] for above // + [UTF-8] \\\"java/lang/NullPointerException\\\" // + [CONSTANT_Class_info] for above // + [UTF-8] \\\"java/lang/IllegalArgumentException\\\" // + [CONSTANT_Class_info] for above // + [UTF-8] \\\"java/lang/InvocationTargetException\\\" // + [CONSTANT_Class_info] for above // + [UTF-8] \\\"<init>\\\" // + [UTF-8] \\\"()V\\\" // + [CONSTANT_NameAndType_info] for above // + [CONSTANT_Methodref_info] for NullPointerException's constructor // + [CONSTANT_Methodref_info] for IllegalArgumentException's constructor // + [UTF-8] \\\"(Ljava/lang/String;)V\\\" // + [CONSTANT_NameAndType_info] for \\\"<init>(Ljava/lang/String;)V\\\" // + [CONSTANT_Methodref_info] for IllegalArgumentException's constructor taking a String // + [UTF-8] \\\"(Ljava/lang/Throwable;)V\\\" // + [CONSTANT_NameAndType_info] for \\\"<init>(Ljava/lang/Throwable;)V\\\" // + [CONSTANT_Methodref_info] for InvocationTargetException's constructor // + [CONSTANT_Methodref_info] for \\\"super()\\\" // + [UTF-8] \\\"java/lang/Object\\\" // + [CONSTANT_Class_info] for above // + [UTF-8] \\\"toString\\\" // + [UTF-8] \\\"()Ljava/lang/String;\\\" // + [CONSTANT_NameAndType_info] for \\\"toString()Ljava/lang/String;\\\" // + [CONSTANT_Methodref_info] for Object's toString method // + [UTF-8] \\\"Code\\\" // + [UTF-8] \\\"Exceptions\\\" // * [UTF-8] \\\"java/lang/Boolean\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(Z)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"booleanValue\\\" // * [UTF-8] \\\"()Z\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Byte\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(B)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"byteValue\\\" // * [UTF-8] \\\"()B\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Character\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(C)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"charValue\\\" // * [UTF-8] \\\"()C\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Double\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(D)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"doubleValue\\\" // * [UTF-8] \\\"()D\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Float\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(F)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"floatValue\\\" // * [UTF-8] \\\"()F\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Integer\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(I)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"intValue\\\" // * [UTF-8] \\\"()I\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Long\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(J)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"longValue\\\" // * [UTF-8] \\\"()J\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"java/lang/Short\\\" // * [CONSTANT_Class_info] for above // * [UTF-8] \\\"(S)V\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above // * [UTF-8] \\\"shortValue\\\" // * [UTF-8] \\\"()S\\\" // * [CONSTANT_NameAndType_info] for above // * [CONSTANT_Methodref_info] for above short numCPEntries = NUM_BASE_CPOOL_ENTRIES + NUM_COMMON_CPOOL_ENTRIES; boolean usesPrimitives = usesPrimitiveTypes(); if (usesPrimitives) { numCPEntries += NUM_BOXING_CPOOL_ENTRIES; } if (forSerialization) { numCPEntries += NUM_SERIALIZATION_CPOOL_ENTRIES; } // Add in variable-length number of entries to be able to describe // non-primitive parameter types and checked exceptions. numCPEntries += (short) (2 * numNonPrimitiveParameterTypes()); asm.emitShort(add(numCPEntries, S1)); final String generatedName = generateName(isConstructor, forSerialization); asm.emitConstantPoolUTF8(generatedName); asm.emitConstantPoolClass(asm.cpi()); thisClass = asm.cpi(); if (isConstructor) { if (forSerialization) { asm.emitConstantPoolUTF8 (\\\"sun/reflect/SerializationConstructorAccessorImpl\\\"); } else { asm.emitConstantPoolUTF8(\\\"sun/reflect/ConstructorAccessorImpl\\\"); } } else { asm.emitConstantPoolUTF8(\\\"sun/reflect/MethodAccessorImpl\\\"); } asm.emitConstantPoolClass(asm.cpi()); superClass = asm.cpi(); asm.emitConstantPoolUTF8(getClassName(declaringClass, false)); asm.emitConstantPoolClass(asm.cpi()); targetClass = asm.cpi(); short serializationTargetClassIdx = (short) 0; if (forSerialization) { asm.emitConstantPoolUTF8(getClassName(serializationTargetClass, false)); asm.emitConstantPoolClass(asm.cpi()); serializationTargetClassIdx = asm.cpi(); } asm.emitConstantPoolUTF8(name); asm.emitConstantPoolUTF8(buildInternalSignature()); asm.emitConstantPoolNameAndType(sub(asm.cpi(), S1), asm.cpi()); if (isInterface()) { asm.emitConstantPoolInterfaceMethodref(targetClass, asm.cpi()); } else { if (forSerialization) { asm.emitConstantPoolMethodref(serializationTargetClassIdx, asm.cpi()); } else { asm.emitConstantPoolMethodref(targetClass, asm.cpi()); } } targetMethodRef = asm.cpi(); if (isConstructor) { asm.emitConstantPoolUTF8(\\\"newInstance\\\"); } else { asm.emitConstantPoolUTF8(\\\"invoke\\\"); } invokeIdx = asm.cpi(); if (isConstructor) { asm.emitConstantPoolUTF8(\\\"([Ljava/lang/Object;)Ljava/lang/Object;\\\"); } else { asm.emitConstantPoolUTF8 (\\\"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\\\"); } invokeDescriptorIdx = asm.cpi(); // Output class information for non-primitive parameter types nonPrimitiveParametersBaseIdx = add(asm.cpi(), S2); for (int i = 0; i < parameterTypes.length; i++) { Class<?> c = parameterTypes[i]; if (!isPrimitive(c)) { asm.emitConstantPoolUTF8(getClassName(c, false)); asm.emitConstantPoolClass(asm.cpi()); } } // Entries common to FieldAccessor, MethodAccessor and ConstructorAccessor emitCommonConstantPoolEntries(); // Boxing entries if (usesPrimitives) { emitBoxingContantPoolEntries(); } if (asm.cpi() != numCPEntries) { throw new InternalError(\\\"Adjust this code (cpi = \\\" + asm.cpi() + \\\", numCPEntries = \\\" + numCPEntries + \\\")\\\"); } // Access flags asm.emitShort(ACC_PUBLIC); // This class asm.emitShort(thisClass); // Superclass asm.emitShort(superClass); // Interfaces count and interfaces asm.emitShort(S0); // Fields count and fields asm.emitShort(S0); // Methods count and methods asm.emitShort(NUM_METHODS); emitConstructor(); emitInvoke(); // Additional attributes (none) asm.emitShort(S0); // Load class vec.trim(); final byte[] bytes = vec.getData(); // Note: the class loader is the only thing that really matters // here -- it's important to get the generated code into the // same namespace as the target class. Since the generated code // is privileged anyway, the protection domain probably doesn't // matter. return AccessController.doPrivileged( new PrivilegedAction<MagicAccessorImpl>() { public MagicAccessorImpl run() { try { return (MagicAccessorImpl) ClassDefiner.defineClass (generatedName, bytes, 0, bytes.length, declaringClass.getClassLoader()).newInstance(); } catch (InstantiationException | IllegalAccessException e) { throw new InternalError(e); } } }); } \"},\"6119\":{\"t\":\"咱们主要看这一句：ClassDefiner.defineClass(xx, declaringClass.getClassLoader()).newInstance();\"},\"6120\":{\"t\":\"在ClassDefiner.defineClass方法实现中，每被调用一次都会生成一个DelegatingClassLoader类加载器对象 ，这里每次都生成新的类加载器，是为了性能考虑，在某些情况下可以卸载这些生成的类，因为类的卸载是只有在类加载器可以被回收的情况下才会被回收的，如果用了原来的类加载器，那可能导致这些新创建的类一直无法被卸载。\"},\"6121\":{\"t\":\"而反射生成的类，有时候可能用了就可以卸载了，所以使用其独立的类加载器，从而使得更容易控制反射类的生命周期。\"},\"6122\":{\"h\":\"反射调用流程小结\",\"a\":\"反射调用流程小结\"},\"6123\":{\"t\":\"最后，用几句话总结反射的实现原理：\"},\"6124\":{\"t\":\"反射类及反射方法的获取，都是通过从列表中搜寻查找匹配的方法，所以查找性能会随类的大小方法多少而变化；\"},\"6125\":{\"t\":\"每个类都会有一个与之对应的Class实例，从而每个类都可以获取method反射方法，并作用到其他实例身上；\"},\"6126\":{\"t\":\"反射也是考虑了线程安全的，放心使用；\"},\"6127\":{\"t\":\"反射使用软引用relectionData缓存class信息，避免每次重新从jvm获取带来的开销；\"},\"6128\":{\"t\":\"反射调用多次生成新代理Accessor, 而通过字节码生存的则考虑了卸载功能，所以会使用独立的类加载器；\"},\"6129\":{\"t\":\"当找到需要的方法，都会copy一份出来，而不是使用原来的实例，从而保证数据隔离；\"},\"6130\":{\"t\":\"调度反射方法，最终是由jvm执行invoke0()执行；\"},\"6131\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"6132\":{\"t\":\"https://www.codercto.com/a/46094.html\"},\"6133\":{\"t\":\"https://blog.csdn.net/sinat_38259539/article/details/71799078\"},\"6134\":{\"t\":\"https://blog.csdn.net/qq_40896997/article/details/94483820\"},\"6135\":{\"t\":\"https://www.cnblogs.com/zhaoguhong/p/6937364.html\"},\"6136\":{\"t\":\"https://juejin.im/post/5c160420e51d452a60684431\"},\"6137\":{\"t\":\"https://blog.csdn.net/mcryeasy/java/article/details/52344729\"},\"6138\":{\"t\":\"著作权归@pdai所有 原文链接：https://pdai.tech/md/java/basic/java-basic-x-reflection.html\"},\"6139\":{\"h\":\"SPI机制详解\"},\"6140\":{\"t\":\"SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。@pdai\"},\"6141\":{\"t\":\"SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 解耦。\"},\"6142\":{\"t\":\"SPI整体机制图如下：\"},\"6143\":{\"t\":\"img\"},\"6144\":{\"t\":\"当服务的提供者提供了一种接口的实现之后，需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的META-INF/services/中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：java.util.ServiceLoader。\"},\"6145\":{\"h\":\"SPI机制的简单示例\",\"a\":\"spi机制的简单示例\"},\"6146\":{\"t\":\"网上找了个例子：这里在新窗口打开\"},\"6147\":{\"t\":\"我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。\"},\"6148\":{\"t\":\"先定义好接口\"},\"6149\":{\"t\":\"public interface Search { public List<String> searchDoc(String keyword); } \"},\"6150\":{\"t\":\"文件搜索实现\"},\"6151\":{\"t\":\"public class FileSearch implements Search{ @Override public List<String> searchDoc(String keyword) { System.out.println(\\\"文件搜索 \\\"+keyword); return null; } } \"},\"6152\":{\"t\":\"数据库搜索实现\"},\"6153\":{\"t\":\"public class DatabaseSearch implements Search{ @Override public List<String> searchDoc(String keyword) { System.out.println(\\\"数据搜索 \\\"+keyword); return null; } } \"},\"6154\":{\"t\":\"resources 接下来可以在resources下新建META-INF/services/目录，然后新建接口全限定名的文件：com.cainiao.ys.spi.learn.Search，里面加上我们需要用到的实现类\"},\"6155\":{\"t\":\"com.cainiao.ys.spi.learn.FileSearch \"},\"6156\":{\"t\":\"测试方法\"},\"6157\":{\"t\":\"public class TestCase { public static void main(String[] args) { ServiceLoader<Search> s = ServiceLoader.load(Search.class); Iterator<Search> iterator = s.iterator(); while (iterator.hasNext()) { Search search = iterator.next(); search.searchDoc(\\\"hello world\\\"); } } } \"},\"6158\":{\"t\":\"可以看到输出结果：文件搜索 hello world\"},\"6159\":{\"t\":\"如果在com.cainiao.ys.spi.learn.Search文件里写上两个实现类，那最后的输出结果就是两行了。\"},\"6160\":{\"t\":\"这就是因为ServiceLoader.load(Search.class)在加载某接口时，会去META-INF/services下找接口的全限定名文件，再根据里面的内容加载相应的实现类。\"},\"6161\":{\"t\":\"这就是spi的思想，接口的实现由provider实现，provider只用在提交的jar包里的META-INF/services下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。\"},\"6162\":{\"h\":\"SPI机制的广泛应用\",\"a\":\"spi机制的广泛应用\"},\"6163\":{\"h\":\"SPI机制 - JDBC DriverManager\",\"a\":\"spi机制-jdbc-drivermanager\"},\"6164\":{\"t\":\"在JDBC4.0之前，我们开发有连接数据库的时候，通常会用Class.forName(\\\"com.mysql.jdbc.Driver\\\")这句先加载数据库相关的驱动，然后再进行获取连接等的操作。而JDBC4.0之后不需要用Class.forName(\\\"com.mysql.jdbc.Driver\\\")来加载驱动，直接获取连接就可以了，现在这种方式就是使用了Java的SPI扩展机制来实现。\"},\"6165\":{\"h\":\"JDBC接口定义\",\"a\":\"jdbc接口定义\"},\"6166\":{\"t\":\"首先在java中定义了接口java.sql.Driver，并没有具体的实现，具体的实现都是由不同厂商来提供的。\"},\"6167\":{\"h\":\"mysql实现\",\"a\":\"mysql实现\"},\"6168\":{\"t\":\"在mysql的jar包mysql-connector-java-6.0.6.jar中，可以找到META-INF/services目录，该目录下会有一个名字为java.sql.Driver的文件，文件内容是com.mysql.cj.jdbc.Driver，这里面的内容就是针对Java中定义的接口的实现。\"},\"6169\":{\"h\":\"postgresql实现\",\"a\":\"postgresql实现\"},\"6170\":{\"t\":\"同样在postgresql的jar包postgresql-42.0.0.jar中，也可以找到同样的配置文件，文件内容是org.postgresql.Driver，这是postgresql对Java的java.sql.Driver的实现。\"},\"6171\":{\"h\":\"使用方法\",\"a\":\"使用方法\"},\"6172\":{\"t\":\"上面说了，现在使用SPI扩展来加载具体的驱动，我们在Java中写连接数据库的代码的时候，不需要再使用Class.forName(\\\"com.mysql.jdbc.Driver\\\")来加载驱动了，而是直接使用如下代码：\"},\"6173\":{\"t\":\"String url = \\\"jdbc:xxxx://xxxx:xxxx/xxxx\\\"; Connection conn = DriverManager.getConnection(url,username,password); ..... \"},\"6174\":{\"t\":\"这里并没有涉及到spi的使用，接着看下面的解析。\"},\"6175\":{\"h\":\"源码实现\",\"a\":\"源码实现\"},\"6176\":{\"t\":\"上面的使用方法，就是我们普通的连接数据库的代码，并没有涉及到SPI的东西，但是有一点我们可以确定的是，我们没有写有关具体驱动的硬编码Class.forName(\\\"com.mysql.jdbc.Driver\\\")！\"},\"6177\":{\"t\":\"上面的代码可以直接获取数据库连接进行操作，但是跟SPI有啥关系呢？上面代码没有了加载驱动的代码，我们怎么去确定使用哪个数据库连接的驱动呢？这里就涉及到使用Java的SPI扩展机制来查找相关驱动的东西了，关于驱动的查找其实都在DriverManager中，DriverManager是Java中的实现，用来获取数据库连接，在DriverManager中有一个静态代码块如下：\"},\"6178\":{\"t\":\"static { loadInitialDrivers(); println(\\\"JDBC DriverManager initialized\\\"); } \"},\"6179\":{\"t\":\"可以看到是加载实例化驱动的，接着看loadInitialDrivers方法：\"},\"6180\":{\"t\":\"private static void loadInitialDrivers() { String drivers; try { drivers = AccessController.doPrivileged(new PrivilegedAction<String>() { public String run() { return System.getProperty(\\\"jdbc.drivers\\\"); } }); } catch (Exception ex) { drivers = null; } AccessController.doPrivileged(new PrivilegedAction<Void>() { public Void run() { //使用SPI的ServiceLoader来加载接口的实现 ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); Iterator<Driver> driversIterator = loadedDrivers.iterator(); try{ while(driversIterator.hasNext()) { driversIterator.next(); } } catch(Throwable t) { // Do nothing } return null; } }); println(\\\"DriverManager.initialize: jdbc.drivers = \\\" + drivers); if (drivers == null || drivers.equals(\\\"\\\")) { return; } String[] driversList = drivers.split(\\\":\\\"); println(\\\"number of Drivers:\\\" + driversList.length); for (String aDriver : driversList) { try { println(\\\"DriverManager.Initialize: loading \\\" + aDriver); Class.forName(aDriver, true, ClassLoader.getSystemClassLoader()); } catch (Exception ex) { println(\\\"DriverManager.Initialize: load failed: \\\" + ex); } } } \"},\"6181\":{\"t\":\"上面的代码主要步骤是：\"},\"6182\":{\"t\":\"从系统变量中获取有关驱动的定义。\"},\"6183\":{\"t\":\"使用SPI来获取驱动的实现。\"},\"6184\":{\"t\":\"遍历使用SPI获取到的具体实现，实例化各个实现类。\"},\"6185\":{\"t\":\"根据第一步获取到的驱动列表来实例化具体实现类。\"},\"6186\":{\"t\":\"我们主要关注2,3步，这两步是SPI的用法，首先看第二步，使用SPI来获取驱动的实现，对应的代码是：\"},\"6187\":{\"t\":\"ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); \"},\"6188\":{\"t\":\"这里没有去META-INF/services目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器。\"},\"6189\":{\"t\":\"接着看第三步，遍历使用SPI获取到的具体实现，实例化各个实现类，对应的代码如下：\"},\"6190\":{\"t\":\"//获取迭代器 Iterator<Driver> driversIterator = loadedDrivers.iterator(); //遍历所有的驱动实现 while(driversIterator.hasNext()) { driversIterator.next(); } \"},\"6191\":{\"t\":\"在遍历的时候，首先调用driversIterator.hasNext()方法，这里会搜索classpath下以及jar包中所有的META-INF/services目录下的java.sql.Driver文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类（ServiceLoader具体的源码实现在下面）。\"},\"6192\":{\"t\":\"然后是调用driversIterator.next();方法，此时就会根据驱动名字具体实例化各个实现类了。现在驱动就被找到并实例化了。\"},\"6193\":{\"t\":\"可以看下截图，我在测试项目中添加了两个jar包，mysql-connector-java-6.0.6.jar和postgresql-42.0.0.0.jar，跟踪到DriverManager中之后：\"},\"6194\":{\"t\":\"img\"},\"6195\":{\"t\":\"可以看到此时迭代器中有两个驱动，mysql和postgresql的都被加载了。\"},\"6196\":{\"h\":\"SPI机制 - Common-Logging\",\"a\":\"spi机制-common-logging\"},\"6197\":{\"t\":\"common-logging（也称Jakarta Commons Logging，缩写 JCL）是常用的日志库门面，具体日志库相关可以看这篇。我们看下它是怎么解耦的。\"},\"6198\":{\"t\":\"首先，日志实例是通过LogFactory的getLog(String)方法创建的：\"},\"6199\":{\"t\":\"public static getLog(Class clazz) throws LogConfigurationException { return getFactory().getInstance(clazz); } \"},\"6200\":{\"t\":\"LogFatory是一个抽象类，它负责加载具体的日志实现，分析其Factory getFactory()方法：\"},\"6201\":{\"t\":\"public static org.apache.commons.logging.LogFactory getFactory() throws LogConfigurationException { // Identify the class loader we will be using ClassLoader contextClassLoader = getContextClassLoaderInternal(); if (contextClassLoader == null) { // This is an odd enough situation to report about. This // output will be a nuisance on JDK1.1, as the system // classloader is null in that environment. if (isDiagnosticsEnabled()) { logDiagnostic(\\\"Context classloader is null.\\\"); } } // Return any previously registered factory for this class loader org.apache.commons.logging.LogFactory factory = getCachedFactory(contextClassLoader); if (factory != null) { return factory; } if (isDiagnosticsEnabled()) { logDiagnostic( \\\"[LOOKUP] LogFactory implementation requested for the first time for context classloader \\\" + objectId(contextClassLoader)); logHierarchy(\\\"[LOOKUP] \\\", contextClassLoader); } // Load properties file. // // If the properties file exists, then its contents are used as // \\\"attributes\\\" on the LogFactory implementation class. One particular // property may also control which LogFactory concrete subclass is // used, but only if other discovery mechanisms fail.. // // As the properties file (if it exists) will be used one way or // another in the end we may as well look for it first. // classpath根目录下寻找commons-logging.properties Properties props = getConfigurationFile(contextClassLoader, FACTORY_PROPERTIES); // Determine whether we will be using the thread context class loader to // load logging classes or not by checking the loaded properties file (if any). // classpath根目录下commons-logging.properties是否配置use_tccl ClassLoader baseClassLoader = contextClassLoader; if (props != null) { String useTCCLStr = props.getProperty(TCCL_KEY); if (useTCCLStr != null) { // The Boolean.valueOf(useTCCLStr).booleanValue() formulation // is required for Java 1.2 compatibility. if (Boolean.valueOf(useTCCLStr).booleanValue() == false) { // Don't use current context classloader when locating any // LogFactory or Log classes, just use the class that loaded // this abstract class. When this class is deployed in a shared // classpath of a container, it means webapps cannot deploy their // own logging implementations. It also means that it is up to the // implementation whether to load library-specific config files // from the TCCL or not. baseClassLoader = thisClassLoader; } } } // 这里真正开始决定使用哪个factory // 首先，尝试查找vm系统属性org.apache.commons.logging.LogFactory，其是否指定factory // Determine which concrete LogFactory subclass to use. // First, try a global system property if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] Looking for system property [\\\" + FACTORY_PROPERTY + \\\"] to define the LogFactory subclass to use...\\\"); } try { String factoryClass = getSystemProperty(FACTORY_PROPERTY, null); if (factoryClass != null) { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] Creating an instance of LogFactory class '\\\" + factoryClass + \\\"' as specified by system property \\\" + FACTORY_PROPERTY); } factory = newFactory(factoryClass, baseClassLoader, contextClassLoader); } else { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] No system property [\\\" + FACTORY_PROPERTY + \\\"] defined.\\\"); } } } catch (SecurityException e) { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] A security exception occurred while trying to create an\\\" + \\\" instance of the custom factory class\\\" + \\\": [\\\" + trim(e.getMessage()) + \\\"]. Trying alternative implementations...\\\"); } // ignore } catch (RuntimeException e) { // This is not consistent with the behaviour when a bad LogFactory class is // specified in a services file. // // One possible exception that can occur here is a ClassCastException when // the specified class wasn't castable to this LogFactory type. if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] An exception occurred while trying to create an\\\" + \\\" instance of the custom factory class\\\" + \\\": [\\\" + trim(e.getMessage()) + \\\"] as specified by a system property.\\\"); } throw e; } // 第二，尝试使用java spi服务发现机制，载META-INF/services下寻找org.apache.commons.logging.LogFactory实现 // Second, try to find a service by using the JDK1.3 class // discovery mechanism, which involves putting a file with the name // of an interface class in the META-INF/services directory, where the // contents of the file is a single line specifying a concrete class // that implements the desired interface. if (factory == null) { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] Looking for a resource file of name [\\\" + SERVICE_ID + \\\"] to define the LogFactory subclass to use...\\\"); } try { // META-INF/services/org.apache.commons.logging.LogFactory, SERVICE_ID final InputStream is = getResourceAsStream(contextClassLoader, SERVICE_ID); if (is != null) { // This code is needed by EBCDIC and other strange systems. // It's a fix for bugs reported in xerces BufferedReader rd; try { rd = new BufferedReader(new InputStreamReader(is, \\\"UTF-8\\\")); } catch (java.io.UnsupportedEncodingException e) { rd = new BufferedReader(new InputStreamReader(is)); } String factoryClassName = rd.readLine(); rd.close(); if (factoryClassName != null && !\\\"\\\".equals(factoryClassName)) { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] Creating an instance of LogFactory class \\\" + factoryClassName + \\\" as specified by file '\\\" + SERVICE_ID + \\\"' which was present in the path of the context classloader.\\\"); } factory = newFactory(factoryClassName, baseClassLoader, contextClassLoader); } } else { // is == null if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] No resource file with name '\\\" + SERVICE_ID + \\\"' found.\\\"); } } } catch (Exception ex) { // note: if the specified LogFactory class wasn't compatible with LogFactory // for some reason, a ClassCastException will be caught here, and attempts will // continue to find a compatible class. if (isDiagnosticsEnabled()) { logDiagnostic( \\\"[LOOKUP] A security exception occurred while trying to create an\\\" + \\\" instance of the custom factory class\\\" + \\\": [\\\" + trim(ex.getMessage()) + \\\"]. Trying alternative implementations...\\\"); } // ignore } } // 第三，尝试从classpath根目录下的commons-logging.properties中查找org.apache.commons.logging.LogFactory属性指定的factory // Third try looking into the properties file read earlier (if found) if (factory == null) { if (props != null) { if (isDiagnosticsEnabled()) { logDiagnostic( \\\"[LOOKUP] Looking in properties file for entry with key '\\\" + FACTORY_PROPERTY + \\\"' to define the LogFactory subclass to use...\\\"); } String factoryClass = props.getProperty(FACTORY_PROPERTY); if (factoryClass != null) { if (isDiagnosticsEnabled()) { logDiagnostic( \\\"[LOOKUP] Properties file specifies LogFactory subclass '\\\" + factoryClass + \\\"'\\\"); } factory = newFactory(factoryClass, baseClassLoader, contextClassLoader); // TODO: think about whether we need to handle exceptions from newFactory } else { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] Properties file has no entry specifying LogFactory subclass.\\\"); } } } else { if (isDiagnosticsEnabled()) { logDiagnostic(\\\"[LOOKUP] No properties file available to determine\\\" + \\\" LogFactory subclass from..\\\"); } } } // 最后，使用后备factory实现，org.apache.commons.logging.impl.LogFactoryImpl // Fourth, try the fallback implementation class if (factory == null) { if (isDiagnosticsEnabled()) { logDiagnostic( \\\"[LOOKUP] Loading the default LogFactory implementation '\\\" + FACTORY_DEFAULT + \\\"' via the same classloader that loaded this LogFactory\\\" + \\\" class (ie not looking in the context classloader).\\\"); } // Note: unlike the above code which can try to load custom LogFactory // implementations via the TCCL, we don't try to load the default LogFactory // implementation via the context classloader because: // * that can cause problems (see comments in newFactory method) // * no-one should be customising the code of the default class // Yes, we do give up the ability for the child to ship a newer // version of the LogFactoryImpl class and have it used dynamically // by an old LogFactory class in the parent, but that isn't // necessarily a good idea anyway. factory = newFactory(FACTORY_DEFAULT, thisClassLoader, contextClassLoader); } if (factory != null) { /** * Always cache using context class loader. */ cacheFactory(contextClassLoader, factory); if (props != null) { Enumeration names = props.propertyNames(); while (names.hasMoreElements()) { String name = (String) names.nextElement(); String value = props.getProperty(name); factory.setAttribute(name, value); } } } return factory; } \"},\"6202\":{\"t\":\"可以看出，抽象类LogFactory加载具体实现的步骤如下：\"},\"6203\":{\"t\":\"从vm系统属性org.apache.commons.logging.LogFactory\"},\"6204\":{\"t\":\"使用SPI服务发现机制，发现org.apache.commons.logging.LogFactory的实现\"},\"6205\":{\"t\":\"查找classpath根目录commons-logging.properties的org.apache.commons.logging.LogFactory属性是否指定factory实现\"},\"6206\":{\"t\":\"使用默认factory实现，org.apache.commons.logging.impl.LogFactoryImpl\"},\"6207\":{\"t\":\"LogFactory的getLog()方法返回类型是org.apache.commons.logging.Log接口，提供了从trace到fatal方法。可以确定，如果日志实现提供者只要实现该接口，并且使用继承自org.apache.commons.logging.LogFactory的子类创建Log，必然可以构建一个松耦合的日志系统。\"},\"6208\":{\"h\":\"SPI机制 - 插件体系\",\"a\":\"spi机制-插件体系\"},\"6209\":{\"t\":\"其实最具spi思想的应该属于插件开发，我们项目中也用到的这种思想，后面再说，这里具体说一下eclipse的插件思想。\"},\"6210\":{\"t\":\"Eclipse使用OSGi作为插件系统的基础，动态添加新插件和停止现有插件，以动态的方式管理组件生命周期。\"},\"6211\":{\"t\":\"一般来说，插件的文件结构必须在指定目录下包含以下三个文件：\"},\"6212\":{\"t\":\"META-INF/MANIFEST.MF: 项目基本配置信息，版本、名称、启动器等\"},\"6213\":{\"t\":\"build.properties: 项目的编译配置信息，包括，源代码路径、输出路径\"},\"6214\":{\"t\":\"plugin.xml：插件的操作配置信息，包含弹出菜单及点击菜单后对应的操作执行类等\"},\"6215\":{\"t\":\"当eclipse启动时，会遍历plugins文件夹中的目录，扫描每个插件的清单文件MANIFEST.MF，并建立一个内部模型来记录它所找到的每个插件的信息，就实现了动态添加新的插件。\"},\"6216\":{\"t\":\"这也意味着是eclipse制定了一系列的规则，像是文件结构、类型、参数等。插件开发者遵循这些规则去开发自己的插件，eclipse并不需要知道插件具体是怎样开发的，只需要在启动的时候根据配置文件解析、加载到系统里就好了，是spi思想的一种体现。\"},\"6217\":{\"h\":\"SPI机制 - Spring中SPI机制\",\"a\":\"spi机制-spring中spi机制\"},\"6218\":{\"t\":\"在springboot的自动装配过程中，最终会加载META-INF/spring.factories文件，而加载的过程是由SpringFactoriesLoader加载的。从CLASSPATH下的每个Jar包中搜寻所有META-INF/spring.factories配置文件，然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在Classpath下的jar包中。\"},\"6219\":{\"t\":\"public static final String FACTORIES_RESOURCE_LOCATION = \\\"META-INF/spring.factories\\\"; // spring.factories文件的格式为：key=value1,value2,value3 // 从所有的jar包中找到META-INF/spring.factories文件 // 然后从文件中解析出key=factoryClass类名称的所有value值 public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) { String factoryClassName = factoryClass.getName(); // 取得资源文件的URL Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); List<String> result = new ArrayList<String>(); // 遍历所有的URL while (urls.hasMoreElements()) { URL url = urls.nextElement(); // 根据资源文件URL解析properties文件，得到对应的一组@Configuration类 Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url)); String factoryClassNames = properties.getProperty(factoryClassName); // 组装数据，并返回 result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames))); } return result; } \"},\"6220\":{\"h\":\"SPI机制深入理解\",\"a\":\"spi机制深入理解\"},\"6221\":{\"t\":\"提示\"},\"6222\":{\"t\":\"接下来，我们深入理解下SPI相关内容\"},\"6223\":{\"h\":\"SPI机制通常怎么使用\",\"a\":\"spi机制通常怎么使用\"},\"6224\":{\"t\":\"看完上面的几个例子解析，应该都能知道大概的流程了：\"},\"6225\":{\"t\":\"有关组织或者公司定义标准。\"},\"6226\":{\"t\":\"具体厂商或者框架开发者实现。\"},\"6227\":{\"t\":\"程序猿使用。\"},\"6228\":{\"h\":\"定义标准\",\"a\":\"定义标准\"},\"6229\":{\"t\":\"定义标准，就是定义接口。比如接口java.sql.Driver\"},\"6230\":{\"h\":\"具体厂商或者框架开发者实现\",\"a\":\"具体厂商或者框架开发者实现\"},\"6231\":{\"t\":\"厂商或者框架开发者开发具体的实现：\"},\"6232\":{\"t\":\"在META-INF/services目录下定义一个名字为接口全限定名的文件，比如java.sql.Driver文件，文件内容是具体的实现名字，比如me.cxis.sql.MyDriver。\"},\"6233\":{\"t\":\"写具体的实现me.cxis.sql.MyDriver，都是对接口Driver的实现。\"},\"6234\":{\"h\":\"程序猿使用\",\"a\":\"程序猿使用\"},\"6235\":{\"t\":\"我们会引用具体厂商的jar包来实现我们的功能：\"},\"6236\":{\"t\":\"ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); //获取迭代器 Iterator<Driver> driversIterator = loadedDrivers.iterator(); //遍历 while(driversIterator.hasNext()) { driversIterator.next(); //可以做具体的业务逻辑 } \"},\"6237\":{\"h\":\"使用规范\",\"a\":\"使用规范\"},\"6238\":{\"t\":\"最后总结一下jdk spi需要遵循的规范\"},\"6239\":{\"t\":\"img\"},\"6240\":{\"h\":\"SPI和API的区别是什么\",\"a\":\"spi和api的区别是什么\"},\"6241\":{\"t\":\"这里实际包含两个问题，第一个SPI和API的区别？第二个什么时候用API，什么时候用SPI？\"},\"6242\":{\"t\":\"SPI - “接口”位于“调用方”所在的“包”中\"},\"6243\":{\"t\":\"概念上更依赖调用方。\"},\"6244\":{\"t\":\"组织上位于调用方所在的包中。\"},\"6245\":{\"t\":\"实现位于独立的包中。\"},\"6246\":{\"t\":\"常见的例子是：插件模式的插件。\"},\"6247\":{\"t\":\"API - “接口”位于“实现方”所在的“包”中\"},\"6248\":{\"t\":\"概念上更接近实现方。\"},\"6249\":{\"t\":\"组织上位于实现方所在的包中。\"},\"6250\":{\"t\":\"实现和接口在一个包中。\"},\"6251\":{\"t\":\"参考：\"},\"6252\":{\"t\":\"difference-between-spi-and-api在新窗口打开\"},\"6253\":{\"t\":\"设计原则：小议 SPI 和 API在新窗口打开\"},\"6254\":{\"t\":\"img\"},\"6255\":{\"t\":\"img\"},\"6256\":{\"h\":\"SPI机制实现原理\",\"a\":\"spi机制实现原理\"},\"6257\":{\"t\":\"不妨看下JDK中ServiceLoader<S>方法的具体实现：\"},\"6258\":{\"t\":\"//ServiceLoader实现了Iterable接口，可以遍历所有的服务实现者 public final class ServiceLoader<S> implements Iterable<S> { //查找配置文件的目录 private static final String PREFIX = \\\"META-INF/services/\\\"; //表示要被加载的服务的类或接口 private final Class<S> service; //这个ClassLoader用来定位，加载，实例化服务提供者 private final ClassLoader loader; // 访问控制上下文 private final AccessControlContext acc; // 缓存已经被实例化的服务提供者，按照实例化的顺序存储 private LinkedHashMap<String,S> providers = new LinkedHashMap<>(); // 迭代器 private LazyIterator lookupIterator; //重新加载，就相当于重新创建ServiceLoader了，用于新的服务提供者安装到正在运行的Java虚拟机中的情况。 public void reload() { //清空缓存中所有已实例化的服务提供者 providers.clear(); //新建一个迭代器，该迭代器会从头查找和实例化服务提供者 lookupIterator = new LazyIterator(service, loader); } //私有构造器 //使用指定的类加载器和服务创建服务加载器 //如果没有指定类加载器，使用系统类加载器，就是应用类加载器。 private ServiceLoader(Class<S> svc, ClassLoader cl) { service = Objects.requireNonNull(svc, \\\"Service interface cannot be null\\\"); loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl; acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null; reload(); } //解析失败处理的方法 private static void fail(Class<?> service, String msg, Throwable cause) throws ServiceConfigurationError { throw new ServiceConfigurationError(service.getName() + \\\": \\\" + msg, cause); } private static void fail(Class<?> service, String msg) throws ServiceConfigurationError { throw new ServiceConfigurationError(service.getName() + \\\": \\\" + msg); } private static void fail(Class<?> service, URL u, int line, String msg) throws ServiceConfigurationError { fail(service, u + \\\":\\\" + line + \\\": \\\" + msg); } //解析服务提供者配置文件中的一行 //首先去掉注释校验，然后保存 //返回下一行行号 //重复的配置项和已经被实例化的配置项不会被保存 private int parseLine(Class<?> service, URL u, BufferedReader r, int lc, List<String> names) throws IOException, ServiceConfigurationError { //读取一行 String ln = r.readLine(); if (ln == null) { return -1; } //#号代表注释行 int ci = ln.indexOf('#'); if (ci >= 0) ln = ln.substring(0, ci); ln = ln.trim(); int n = ln.length(); if (n != 0) { if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\\\\t') >= 0)) fail(service, u, lc, \\\"Illegal configuration-file syntax\\\"); int cp = ln.codePointAt(0); if (!Character.isJavaIdentifierStart(cp)) fail(service, u, lc, \\\"Illegal provider-class name: \\\" + ln); for (int i = Character.charCount(cp); i < n; i += Character.charCount(cp)) { cp = ln.codePointAt(i); if (!Character.isJavaIdentifierPart(cp) && (cp != '.')) fail(service, u, lc, \\\"Illegal provider-class name: \\\" + ln); } if (!providers.containsKey(ln) && !names.contains(ln)) names.add(ln); } return lc + 1; } //解析配置文件，解析指定的url配置文件 //使用parseLine方法进行解析，未被实例化的服务提供者会被保存到缓存中去 private Iterator<String> parse(Class<?> service, URL u) throws ServiceConfigurationError { InputStream in = null; BufferedReader r = null; ArrayList<String> names = new ArrayList<>(); try { in = u.openStream(); r = new BufferedReader(new InputStreamReader(in, \\\"utf-8\\\")); int lc = 1; while ((lc = parseLine(service, u, r, lc, names)) >= 0); } return names.iterator(); } //服务提供者查找的迭代器 private class LazyIterator implements Iterator<S> { Class<S> service;//服务提供者接口 ClassLoader loader;//类加载器 Enumeration<URL> configs = null;//保存实现类的url Iterator<String> pending = null;//保存实现类的全名 String nextName = null;//迭代器中下一个实现类的全名 private LazyIterator(Class<S> service, ClassLoader loader) { this.service = service; this.loader = loader; } private boolean hasNextService() { if (nextName != null) { return true; } if (configs == null) { try { String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else configs = loader.getResources(fullName); } } while ((pending == null) || !pending.hasNext()) { if (!configs.hasMoreElements()) { return false; } pending = parse(service, configs.nextElement()); } nextName = pending.next(); return true; } private S nextService() { if (!hasNextService()) throw new NoSuchElementException(); String cn = nextName; nextName = null; Class<?> c = null; try { c = Class.forName(cn, false, loader); } if (!service.isAssignableFrom(c)) { fail(service, \\\"Provider \\\" + cn + \\\" not a subtype\\\"); } try { S p = service.cast(c.newInstance()); providers.put(cn, p); return p; } } public boolean hasNext() { if (acc == null) { return hasNextService(); } else { PrivilegedAction<Boolean> action = new PrivilegedAction<Boolean>() { public Boolean run() { return hasNextService(); } }; return AccessController.doPrivileged(action, acc); } } public S next() { if (acc == null) { return nextService(); } else { PrivilegedAction<S> action = new PrivilegedAction<S>() { public S run() { return nextService(); } }; return AccessController.doPrivileged(action, acc); } } public void remove() { throw new UnsupportedOperationException(); } } //获取迭代器 //返回遍历服务提供者的迭代器 //以懒加载的方式加载可用的服务提供者 //懒加载的实现是：解析配置文件和实例化服务提供者的工作由迭代器本身完成 public Iterator<S> iterator() { return new Iterator<S>() { //按照实例化顺序返回已经缓存的服务提供者实例 Iterator<Map.Entry<String,S>> knownProviders = providers.entrySet().iterator(); public boolean hasNext() { if (knownProviders.hasNext()) return true; return lookupIterator.hasNext(); } public S next() { if (knownProviders.hasNext()) return knownProviders.next().getValue(); return lookupIterator.next(); } public void remove() { throw new UnsupportedOperationException(); } }; } //为指定的服务使用指定的类加载器来创建一个ServiceLoader public static <S> ServiceLoader<S> load(Class<S> service, ClassLoader loader) { return new ServiceLoader<>(service, loader); } //使用线程上下文的类加载器来创建ServiceLoader public static <S> ServiceLoader<S> load(Class<S> service) { ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl); } //使用扩展类加载器为指定的服务创建ServiceLoader //只能找到并加载已经安装到当前Java虚拟机中的服务提供者，应用程序类路径中的服务提供者将被忽略 public static <S> ServiceLoader<S> loadInstalled(Class<S> service) { ClassLoader cl = ClassLoader.getSystemClassLoader(); ClassLoader prev = null; while (cl != null) { prev = cl; cl = cl.getParent(); } return ServiceLoader.load(service, prev); } public String toString() { return \\\"java.util.ServiceLoader[\\\" + service.getName() + \\\"]\\\"; } } \"},\"6259\":{\"t\":\"首先，ServiceLoader实现了Iterable接口，所以它有迭代器的属性，这里主要都是实现了迭代器的hasNext和next方法。这里主要都是调用的lookupIterator的相应hasNext和next方法，lookupIterator是懒加载迭代器。\"},\"6260\":{\"t\":\"其次，LazyIterator中的hasNext方法，静态变量PREFIX就是”META-INF/services/”目录，这也就是为什么需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件。\"},\"6261\":{\"t\":\"最后，通过反射方法Class.forName()加载类对象，并用newInstance方法将类实例化，并把实例化后的类缓存到providers对象中，(LinkedHashMap<String,S>类型）然后返回实例对象。\"},\"6262\":{\"t\":\"所以我们可以看到ServiceLoader不是实例化以后，就去读取配置文件中的具体实现，并进行实例化。而是等到使用迭代器去遍历的时候，才会加载对应的配置文件去解析，调用hasNext方法的时候会去加载配置文件进行解析，调用next方法的时候进行实例化并缓存。\"},\"6263\":{\"t\":\"所有的配置文件只会加载一次，服务提供者也只会被实例化一次，重新加载配置文件可使用reload方法。\"},\"6264\":{\"h\":\"SPI机制的缺陷\",\"a\":\"spi机制的缺陷\"},\"6265\":{\"t\":\"通过上面的解析，可以发现，我们使用SPI机制的缺陷：\"},\"6266\":{\"t\":\"不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。\"},\"6267\":{\"t\":\"获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。\"},\"6268\":{\"t\":\"多个并发多线程使用 ServiceLoader 类的实例是不安全的。\"},\"6269\":{\"h\":\"参考文章\",\"a\":\"参考文章\"},\"6270\":{\"t\":\"https://cxis.me/2017/04/17/Java中SPI机制深入及源码解析/\"},\"6271\":{\"t\":\"https://stackoverflow.com/questions/2954372/difference-between-spi-and-api?answertab=votes#tab-top\"},\"6272\":{\"t\":\"https://zhuanlan.zhihu.com/p/28909673\"},\"6273\":{\"t\":\"http://blog.itpub.net/69912579/viewspace-2656555/\"},\"6274\":{\"t\":\"https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html\"},\"6275\":{\"t\":\"https://blog.csdn.net/sakurainluojia/article/details/53534949\"},\"6276\":{\"t\":\"https://www.jianshu.com/p/0d196ad23915\"},\"6277\":{\"h\":\"Java资源大全中文版\"},\"6278\":{\"t\":\"Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是我们发起这个开源项目的初衷。\"},\"6279\":{\"h\":\"古董级工具\",\"a\":\"古董级工具\"},\"6280\":{\"t\":\"这些工具伴随着Java一起出现，在各自辉煌之后还在一直使用。\"},\"6281\":{\"t\":\"Apache Ant：基于XML的构建管理工具。官网\"},\"6282\":{\"t\":\"cglib：字节码生成库。官网\"},\"6283\":{\"t\":\"GlassFish：应用服务器，由Oracle赞助支持的Java EE参考实现。官网\"},\"6284\":{\"t\":\"Hudson：持续集成服务器，目前仍在活跃开发。官网\"},\"6285\":{\"t\":\"JavaServer Faces：Mojarra是JSF标准的一个开源实现，由Oracle开发。官网\"},\"6286\":{\"t\":\"JavaServer Pages：支持自定义标签库的网站通用模板库。官网\"},\"6287\":{\"t\":\"Liquibase：与具体数据库独立的追踪、管理和应用数据库Scheme变化的工具。官网\"},\"6288\":{\"h\":\"构建工具\",\"a\":\"构建工具\"},\"6289\":{\"t\":\"构建及应用依赖关系处理工具。\"},\"6290\":{\"t\":\"Apache Maven：Maven是一款声明式构建及依赖管理工具，采用约定优于配置方式进行管理。相对Apache Ant更推荐使用Maven，前者采用了过程式管理，维护相对困难。官网\"},\"6291\":{\"t\":\"Bazel：来自Google的构建工具，可以快速、可靠地构建代码。官网\"},\"6292\":{\"t\":\"Gradle：使用Groovy（非XML）进行增量构建，可以很好地与Maven依赖管理配合工作。官网\"},\"6293\":{\"t\":\"Buck：Facebook构建工具。官网\"},\"6294\":{\"h\":\"字节码操作\",\"a\":\"字节码操作\"},\"6295\":{\"t\":\"编程方式操作字节码的开发库。\"},\"6296\":{\"t\":\"ASM：通用底层字节码操作和分析开发库。官网\"},\"6297\":{\"t\":\"Byte Buddy：使用流式API进一步简化字节码生成。官网\"},\"6298\":{\"t\":\"Byteman：在运行时通过DSL（规则）操作字节码进行测试和故障排除。官网\"},\"6299\":{\"t\":\"Javassist：一个简化字节码编辑尝试。官网\"},\"6300\":{\"h\":\"集群管理\",\"a\":\"集群管理\"},\"6301\":{\"t\":\"在集群内动态管理应用程序的框架。\"},\"6302\":{\"t\":\"Apache Aurora：Apache Aurora是一个Mesos框架，用于长时间运行服务和定时任务（cron job）。官网\"},\"6303\":{\"t\":\"Singularity：Singularity是一个Mesos框架，方便部署和操作。它支持Web Service、后台运行、调度作业和一次性任务。官网\"},\"6304\":{\"h\":\"代码分析\",\"a\":\"代码分析\"},\"6305\":{\"t\":\"测量代码指标和质量工具。\"},\"6306\":{\"t\":\"Checkstyle：代码编写规范和标准静态分析工具。官网\"},\"6307\":{\"t\":\"Error Prone：将常见编程错误作为运行时错误报告。官网\"},\"6308\":{\"t\":\"FindBugs：通过字节码静态分析查找隐藏bug。官网\"},\"6309\":{\"t\":\"jQAssistant：使用基于Neo4J查询语言进行代码静态分析。官网\"},\"6310\":{\"t\":\"PMD：对源代码分析查找不良的编程习惯。官网\"},\"6311\":{\"t\":\"SonarQube：通过插件集成其它分析组件，对过去一段时间内的数据进行统计。官网\"},\"6312\":{\"h\":\"编译器生成工具\",\"a\":\"编译器生成工具\"},\"6313\":{\"t\":\"用来创建解析器、解释器或编译器的框架。\"},\"6314\":{\"t\":\"ANTLR：复杂的全功能自顶向下解析框架。官网\"},\"6315\":{\"t\":\"JavaCC：JavaCC是更加专门的轻量级工具，易于上手且支持语法超前预测。官网\"},\"6316\":{\"h\":\"外部配置工具\",\"a\":\"外部配置工具\"},\"6317\":{\"t\":\"支持外部配置的开发库。\"},\"6318\":{\"t\":\"config：针对JVM语言的配置库。官网\"},\"6319\":{\"t\":\"owner：减少冗余配置属性。官网\"},\"6320\":{\"h\":\"约束满足问题求解程序\",\"a\":\"约束满足问题求解程序\"},\"6321\":{\"t\":\"帮助解决约束满足问题的开发库。\"},\"6322\":{\"t\":\"Choco：可直接使用的约束满足问题求解程序，使用了约束规划技术。官网\"},\"6323\":{\"t\":\"JaCoP：为FlatZinc语言提供了一个接口，可以执行MiniZinc模型。官网\"},\"6324\":{\"t\":\"OptaPlanner：业务规划与资源调度优化求解程序。官网\"},\"6325\":{\"t\":\"Sat4J：逻辑代数与优化问题最先进的求解程序。官网\"},\"6326\":{\"h\":\"持续集成\",\"a\":\"持续集成\"},\"6327\":{\"t\":\"Bamboo：Atlassian解决方案，可以很好地集成Atlassian的其他产品。可以选择开源许可，也可以购买商业版。官网\"},\"6328\":{\"t\":\"CircleCI：提供托管服务，可以免费试用。官网\"},\"6329\":{\"t\":\"Codeship：提供托管服务，提供有限的免费模式。官网\"},\"6330\":{\"t\":\"fabric8：容器集成平台。官网\"},\"6331\":{\"t\":\"Go：ThoughtWork开源解决方案。官网\"},\"6332\":{\"t\":\"Jenkins：支持基于服务器的部署服务。官网\"},\"6333\":{\"t\":\"TeamCity：JetBrain的持续集成解决方案，有免费版。官网\"},\"6334\":{\"t\":\"Travis：通常用作开源项目的托管服务。官网\"},\"6335\":{\"t\":\"Buildkite: 持续集成工具，用简单的脚本就能设置pipeline，而且能快速构建，可以免费试用。官网\"},\"6336\":{\"h\":\"CSV解析\",\"a\":\"csv解析\"},\"6337\":{\"t\":\"简化CSV数据读写的框架与开发库\"},\"6338\":{\"t\":\"uniVocity-parsers：速度最快功能最全的CSV开发库之一，同时支持TSV与固定宽度记录的读写。官网\"},\"6339\":{\"h\":\"数据库\",\"a\":\"数据库\"},\"6340\":{\"t\":\"简化数据库交互的相关工具。\"},\"6341\":{\"t\":\"Apache Phoenix：HBase针对低延时应用程序的高性能关系数据库层。官网\"},\"6342\":{\"t\":\"Crate：实现了数据同步、分片、缩放、复制的分布式数据存储。除此之外还可以使用基于SQL的语法跨集群查询。官网\"},\"6343\":{\"t\":\"Flyway：简单的数据库迁移工具。官网\"},\"6344\":{\"t\":\"H2：小型SQL数据库，以可以作为内存数据库使用著称。官网\"},\"6345\":{\"t\":\"HikariCP：高性能JDBC连接工具。官网\"},\"6346\":{\"t\":\"JDBI：便捷的JDBC抽象。官网\"},\"6347\":{\"t\":\"jOOQ：为SQL schema生成typesafe代码。官网\"},\"6348\":{\"t\":\"MapDB：以磁盘或堆内存中并发集合为基础的嵌入式数据库引擎。官网\"},\"6349\":{\"t\":\"Presto：针对大数据的分布式SQL查询引擎。官网\"},\"6350\":{\"t\":\"Querydsl：Typesafe统一查询。官网\"},\"6351\":{\"h\":\"数据结构\",\"a\":\"数据结构\"},\"6352\":{\"t\":\"Apache Parquet：Google Dremel论文中发布的基于组装算法的列式（Columnar）存储格式。官网\"},\"6353\":{\"t\":\"Protobuf：Google数据交换格式。官网\"},\"6354\":{\"t\":\"SBE：简单二进制编码，是最快速的消息格式之一。官网\"},\"6355\":{\"t\":\"Wire：整洁轻量级协议缓存。官网\"},\"6356\":{\"h\":\"时间日期工具库\",\"a\":\"时间日期工具库\"},\"6357\":{\"t\":\"处理时间和日期的开发库。\"},\"6358\":{\"t\":\"Joda-Time：在Java 8发布前，Joda-Time是实际使用的时间日期库标准。官网\"},\"6359\":{\"t\":\"Time4J：高级时间和日期库。官网\"},\"6360\":{\"t\":\"ThreeTen：JSR-310实现，为JDK提供更具特点的时间和日期API。官网\"},\"6361\":{\"h\":\"依赖注入\",\"a\":\"依赖注入\"},\"6362\":{\"t\":\"帮实现依赖翻转范式的开发库。官网\"},\"6363\":{\"t\":\"Apache DeltaSpike：CDI扩展框架。官网\"},\"6364\":{\"t\":\"Dagger2：编译时注入框架，不需要使用反射。官网\"},\"6365\":{\"t\":\"Guice：可以匹敌Dagger的轻量级注入框架。官网\"},\"6366\":{\"t\":\"HK2：轻量级动态依赖注入框架。官网\"},\"6367\":{\"h\":\"开发流程增强工具\",\"a\":\"开发流程增强工具\"},\"6368\":{\"t\":\"从最基本的层面增强开发流程。\"},\"6369\":{\"t\":\"ADT4J：针对代数数据类型的JSR-269代码生成器。官网\"},\"6370\":{\"t\":\"AspectJ：面向切面编程（AOP）的无缝扩展。官网\"},\"6371\":{\"t\":\"Auto：源代码生成器集合。官网\"},\"6372\":{\"t\":\"DCEVM：通过修改JVM在运行时支持对已加载的类进行无限次重定义。官网\"},\"6373\":{\"t\":\"HotswapAgent：支持无限次重定义运行时类与资源。官网\"},\"6374\":{\"t\":\"Immutables：类似Scala的条件类。官网\"},\"6375\":{\"t\":\"JHipster：基于Spring Boot与AngularJS应用程序的Yeoman源代码生成器。官网\"},\"6376\":{\"t\":\"JRebel：无需重新部署，可以即时重新加载代码与配置的商业软件。官网\"},\"6377\":{\"t\":\"Lombok：减少冗余的代码生成器。官网\"},\"6378\":{\"t\":\"Spring Loaded：类重载代理。官网\"},\"6379\":{\"t\":\"vert.x：多语言事件驱动应用框架。官网\"},\"6380\":{\"h\":\"分布式应用\",\"a\":\"分布式应用\"},\"6381\":{\"t\":\"用来编写分布式容错应用的开发库和框架。\"},\"6382\":{\"t\":\"Akka：用来编写分布式容错并发事件驱动应用程序的工具和运行时。官网\"},\"6383\":{\"t\":\"Apache Storm：实时计算系统。官网\"},\"6384\":{\"t\":\"Apache ZooKeeper：针对大型分布式系统的协调服务，支持分布式配置、同步和名称注册。官网\"},\"6385\":{\"t\":\"Hazelcast：高可扩展内存数据网格。官网\"},\"6386\":{\"t\":\"Hystrix：提供延迟和容错。官网\"},\"6387\":{\"t\":\"JGroups：提供可靠的消息传递和集群创建的工具。官网\"},\"6388\":{\"t\":\"Orbit：支持虚拟角色（Actor），在传统角色的基础上增加了另外一层抽象。官网\"},\"6389\":{\"t\":\"Quasar：为JVM提供轻量级线程和角色。官网\"},\"6390\":{\"h\":\"分布式数据库\",\"a\":\"分布式数据库\"},\"6391\":{\"t\":\"对应用程序而言，在分布式系统中的数据库看起来就像是只有一个数据源。\"},\"6392\":{\"t\":\"Apache Cassandra：列式数据库，可用性高且没有单点故障。官网\"},\"6393\":{\"t\":\"Apache HBase：针对大数据的Hadoop数据库。官网\"},\"6394\":{\"t\":\"Druid：实时和历史OLAP数据存储，在聚集查询和近似查询方面表现不俗。官网\"},\"6395\":{\"t\":\"Infinispan：针对缓存的高并发键值对数据存储。官网\"},\"6396\":{\"t\":\"TiDB：开源分布式HTAP数据库，结合了传统的RDBMS和NoSQL的最佳特性。官网\"},\"6397\":{\"h\":\"发布\",\"a\":\"发布\"},\"6398\":{\"t\":\"以本机格式发布应用程序的工具。\"},\"6399\":{\"t\":\"Bintray：发布二进制文件版本控制工具。可以于Maven或Gradle一起配合使用。提供开源免费版本和几种商业收费版本。官网\"},\"6400\":{\"t\":\"Central Repository：最大的二进制组件仓库，面向开源社区提供免费服务。Apache Maven默认使用Central 官网Repository，也可以在所有其他构建工具中使用。\"},\"6401\":{\"t\":\"IzPack：为跨平台部署建立创作工具（Authoring Tool）。官网\"},\"6402\":{\"t\":\"JitPack：打包GitHub仓库的便捷工具。可根据需要构建Maven、Gradle项目，发布可立即使用的组件。官网\"},\"6403\":{\"t\":\"Launch4j：将JAR包装为轻量级本机Windows可执行程序。官网\"},\"6404\":{\"t\":\"Nexus：支持代理和缓存功能的二进制管理工具。官网\"},\"6405\":{\"t\":\"packr：将JAR、资源和JVM打包成Windows、Linux和Mac OS X本地发布文件。官网\"},\"6406\":{\"h\":\"文档处理工具\",\"a\":\"文档处理工具\"},\"6407\":{\"t\":\"处理Office文档的开发库。\"},\"6408\":{\"t\":\"Apache POI：支持OOXML规范（XLSX、DOCX、PPTX）以及OLE2规范（XLS、DOC、PPT）。官网\"},\"6409\":{\"t\":\"documents4j：使用第三方转换器进行文档格式转换，转成类似MS Word这样的格式。官网\"},\"6410\":{\"t\":\"jOpenDocument：处理OpenDocument格式（由Sun公司提出基于XML的文档格式）。官网\"},\"6411\":{\"h\":\"函数式编程\",\"a\":\"函数式编程\"},\"6412\":{\"t\":\"函数式编程支持库。\"},\"6413\":{\"t\":\"Cyclops：支持一元（Monad）操作和流操作工具类、comprehension（List语法）、模式匹配、trampoline等特性。官网\"},\"6414\":{\"t\":\"Fugue：Guava的函数式编程扩展。官网\"},\"6415\":{\"t\":\"Functional Java：实现了多种基础和高级编程抽象，用来辅助面向组合开发（composition-oriented development）。官网\"},\"6416\":{\"t\":\"Javaslang：一个函数式组件库，提供持久化数据类型和函数式控制结构。官网\"},\"6417\":{\"t\":\"jOOλ：旨在填补Java 8 lambda差距的扩展，提供了众多缺失的类型和一组丰富的顺序流API。官网\"},\"6418\":{\"h\":\"游戏开发\",\"a\":\"游戏开发\"},\"6419\":{\"t\":\"游戏开发框架。\"},\"6420\":{\"t\":\"jMonkeyEngine：现代3D游戏开发引擎。官网\"},\"6421\":{\"t\":\"libGDX：全面的跨平台高级框架。官网\"},\"6422\":{\"t\":\"LWJGL：对OpenGL/CL/AL等技术进行抽象的健壮框架。官网\"},\"6423\":{\"t\":\"jPCT：基于OpenGL技术开发的3D图形引擎。纯Java的3D引擎。官网\"},\"6424\":{\"h\":\"GUI\",\"a\":\"gui\"},\"6425\":{\"t\":\"现代图形化用户界面开发库。\"},\"6426\":{\"t\":\"JavaFX：Swing的后继者。官网\"},\"6427\":{\"t\":\"Scene Builder：开发JavaFX应用的可视化布局工具。官网\"},\"6428\":{\"h\":\"高性能计算\",\"a\":\"高性能计算\"},\"6429\":{\"t\":\"涵盖了从集合到特定开发库的高性能计算相关工具。\"},\"6430\":{\"t\":\"Agrona：高性能应用中常见的数据结构和工具方法。官网\"},\"6431\":{\"t\":\"Disruptor：线程间消息传递开发库。官网\"},\"6432\":{\"t\":\"fastutil：快速紧凑的特定类型集合（Collection）。官网\"},\"6433\":{\"t\":\"GS Collections：受Smalltalk启发的集合框架。官网\"},\"6434\":{\"t\":\"HPPC：基础类型集合。官网\"},\"6435\":{\"t\":\"Javolution：实时和嵌入式系统的开发库。官网\"},\"6436\":{\"t\":\"JCTools：JDK中缺失的并发工具。官网\"},\"6437\":{\"t\":\"Koloboke：Hash set和hash map。官网\"},\"6438\":{\"t\":\"Trove：基础类型集合。官网\"},\"6439\":{\"t\":\"High-scale-lib:Cliff Click 个人开发的高性能并发库官网\"},\"6440\":{\"h\":\"IDE\",\"a\":\"ide\"},\"6441\":{\"t\":\"简化开发的集成开发环境。\"},\"6442\":{\"t\":\"Eclipse：老牌开源项目，支持多种插件和编程语言。官网\"},\"6443\":{\"t\":\"IntelliJ IDEA：支持众多JVM语言，是安卓开发者好的选择。商业版主要针对企业客户。官网\"},\"6444\":{\"t\":\"NetBeans：为多种技术提供集成化支持，包括Java SE、Java EE、数据库访问、HTML5等。官网\"},\"6445\":{\"t\":\"Scala IDE：一款基于Eclipse开源平台打造的Scala集成开发环境。官网\"},\"6446\":{\"t\":\"SpringSource Tool Suite（STS）:一款基于Eclipse开源平台打造的Spring应用开发环境。官网\"},\"6447\":{\"h\":\"图像处理\",\"a\":\"图像处理\"},\"6448\":{\"t\":\"创建、评价和操作图片的支持库。\"},\"6449\":{\"t\":\"Imgscalr：纯Java 2D实现，简单、高效、支持硬件加速的图像缩放开发库。官网\"},\"6450\":{\"t\":\"Picasso：安卓图片下载和图片缓存开发库。官网\"},\"6451\":{\"t\":\"Thumbnailator：Thumbnailator是一个高质量Java缩略图开发库。官网\"},\"6452\":{\"t\":\"ZXing：支持多种格式的一维、二维条形码图片处理开发库。官网\"},\"6453\":{\"t\":\"im4java: 基于ImageMagick或GraphicsMagick命令行的图片处理开发库，基本上ImageMagick能够支持的图片格式和处理方式都能够处理。官网\"},\"6454\":{\"t\":\"Apache Batik：在Java应用中程序以SVG格式显示、生成及处理图像的工具集，包括SVG解析器、SVG生成器、SVG DOM等模块，可以集成使用也可以单独使用，还可以扩展自定义的SVG标签。官网\"},\"6455\":{\"h\":\"JSON\",\"a\":\"json\"},\"6456\":{\"t\":\"简化JSON处理的开发库。\"},\"6457\":{\"t\":\"Genson：强大且易于使用的Java到JSON转换开发库。官网\"},\"6458\":{\"t\":\"Gson：谷歌官方推出的JSON处理库，支持在对象与JSON之间双向序列化，性能良好且可以实时调用。官网\"},\"6459\":{\"t\":\"Jackson：与GSON类似，在频繁使用时性能更佳。官网\"},\"6460\":{\"t\":\"LoganSquare：基于Jackson流式API，提供对JSON解析和序列化。比GSON与Jackson组合方式效果更好。官网\"},\"6461\":{\"t\":\"Fastjson：一个Java语言编写的高性能功能完善的JSON库。官网\"},\"6462\":{\"t\":\"Kyro：快速、高效、自动化的Java对象序列化和克隆库。官网\"},\"6463\":{\"h\":\"JVM与JDK\",\"a\":\"jvm与jdk\"},\"6464\":{\"t\":\"目前的JVM和JDK实现。\"},\"6465\":{\"t\":\"JDK 9：JDK 9的早期访问版本。官网\"},\"6466\":{\"t\":\"OpenJDK：JDK开源实现。官网\"},\"6467\":{\"h\":\"基于JVM的语言\",\"a\":\"基于jvm的语言\"},\"6468\":{\"t\":\"除Java外，可以用来编写JVM应用程序的编程语言。\"},\"6469\":{\"t\":\"Scala：融合了面向对象和函数式编程思想的静态类型编程语言。官网\"},\"6470\":{\"t\":\"Groovy：类型可选（Optionally typed）的动态语言，支持静态类型和静态编译。目前是一个Apache孵化器项目。官网\"},\"6471\":{\"t\":\"Clojure：可看做现代版Lisp的动态类型语言。官网\"},\"6472\":{\"t\":\"Ceylon：RedHat开发的面向对象静态类型编程语言。官网\"},\"6473\":{\"t\":\"Kotlin：JetBrain针对JVM、安卓和浏览器提供的静态类型编程语言。官网\"},\"6474\":{\"t\":\"Xtend：一种静态编程语言，能够将其代码转换为简洁高效的Java代码，并基于JVM运行。官网\"},\"6475\":{\"h\":\"日志\",\"a\":\"日志\"},\"6476\":{\"t\":\"记录应用程序行为日志的开发库。\"},\"6477\":{\"t\":\"Apache Log4j 2：使用强大的插件和配置架构进行完全重写。官网\"},\"6478\":{\"t\":\"kibana：分析及可视化日志文件。官网\"},\"6479\":{\"t\":\"Logback：强健的日期开发库，通过Groovy提供很多有趣的选项。官网\"},\"6480\":{\"t\":\"logstash：日志文件管理工具。官网\"},\"6481\":{\"t\":\"Metrics：通过JMX或HTTP发布参数，并且支持存储到数据库。官网\"},\"6482\":{\"t\":\"SLF4J：日志抽象层，需要与具体的实现配合使用。官网\"},\"6483\":{\"h\":\"机器学习\",\"a\":\"机器学习\"},\"6484\":{\"t\":\"提供具体统计算法的工具。其算法可从数据中学习。\"},\"6485\":{\"t\":\"Apache Flink：快速、可靠的大规模数据处理引擎。官网\"},\"6486\":{\"t\":\"Apache Hadoop：在商用硬件集群上用来进行大规模数据存储的开源软件框架。官网\"},\"6487\":{\"t\":\"Apache Mahout：专注协同过滤、聚类和分类的可扩展算法。官网\"},\"6488\":{\"t\":\"Apache Spark：开源数据分析集群计算框架。官网\"},\"6489\":{\"t\":\"DeepDive：从非结构化数据建立结构化信息并集成到已有数据库的工具。官网\"},\"6490\":{\"t\":\"Deeplearning4j：分布式多线程深度学习开发库。官网\"},\"6491\":{\"t\":\"H2O：用作大数据统计的分析引擎。官网\"},\"6492\":{\"t\":\"Weka：用作数据挖掘的算法集合，包括从预处理到可视化的各个层次。官网\"},\"6493\":{\"t\":\"QuickML：高效机器学习库。官网、GitHub\"},\"6494\":{\"h\":\"消息传递\",\"a\":\"消息传递\"},\"6495\":{\"t\":\"在客户端之间进行消息传递，确保协议独立性的工具。\"},\"6496\":{\"t\":\"Aeron：高效可扩展的单播、多播消息传递工具。官网\"},\"6497\":{\"t\":\"Apache ActiveMQ：实现JMS的开源消息代理（broker），可将同步通讯转为异步通讯。官网\"},\"6498\":{\"t\":\"Apache Camel：通过企业级整合模式（Enterprise Integration Pattern EIP）将不同的消息传输API整合在一起。官网\"},\"6499\":{\"t\":\"Apache Kafka：高吞吐量分布式消息系统。官网\"},\"6500\":{\"t\":\"Apache RocketMQ: Apache RocketMQ是一个开源的分布式消息传递和流数据平台。官网\"},\"6501\":{\"t\":\"Hermes：快速、可靠的消息代理（Broker），基于Kafka构建。官网\"},\"6502\":{\"t\":\"JBoss HornetQ：清晰、准确、模块化，可以方便嵌入的消息工具。官网\"},\"6503\":{\"t\":\"JeroMQ：ZeroMQ的纯Java实现。官网\"},\"6504\":{\"t\":\"Smack：跨平台XMPP客户端函数库。官网\"},\"6505\":{\"t\":\"Openfire：是开源的、基于XMPP、采用Java编程语言开发的实时协作服务器。 Openfire安装和使用都非常简单，并可利用Web界面进行管理。 官网GitHub\"},\"6506\":{\"t\":\"Spark：是一个开源，跨平台IM客户端。它的特性支持集组聊天，电话集成和强大安全性能。如果企业内部部署IM使用Openfire+Spark是最佳的组合。 官网GitHub\"},\"6507\":{\"t\":\"Tigase： 是一个轻量级的可伸缩的 Jabber/XMPP 服务器。无需其他第三方库支持，可以处理非常高的复杂和大量的用户数，可以根据需要进行水平扩展。 官网\"},\"6508\":{\"h\":\"杂项\",\"a\":\"杂项\"},\"6509\":{\"t\":\"未分类其它资源。\"},\"6510\":{\"t\":\"Design Patterns：实现并解释了最常见的设计模式。官网\"},\"6511\":{\"t\":\"Jimfs：内存文件系统。官网\"},\"6512\":{\"t\":\"Lanterna：类似curses的简单console文本GUI函数库。官网\"},\"6513\":{\"t\":\"LightAdmin：可插入式CRUD UI函数库，可用来快速应用开发。官网\"},\"6514\":{\"t\":\"OpenRefine：用来处理混乱数据的工具，包括清理、转换、使用Web Service进行扩展并将其关联到数据库。官网\"},\"6515\":{\"t\":\"RoboVM：Java编写原生iOS应用。官网\"},\"6516\":{\"t\":\"Quartz：强大的任务调度库.官网\"},\"6517\":{\"h\":\"应用监控工具\",\"a\":\"应用监控工具\"},\"6518\":{\"t\":\"监控生产环境中应用程序的工具。\"},\"6519\":{\"t\":\"AppDynamics：性能监测商业工具。官网\"},\"6520\":{\"t\":\"JavaMelody：性能监测和分析工具。官网\"},\"6521\":{\"t\":\"Kamon：Kamon用来监测在JVM上运行的应用程序。官网\"},\"6522\":{\"t\":\"New Relic：性能监测商业工具。官网\"},\"6523\":{\"t\":\"SPM：支持对JVM应用程序进行分布式事务追踪的性能监测商业工具。官网\"},\"6524\":{\"t\":\"OverOps(Takipi)：产品运行时错误监测及调试商业工具。官网\"},\"6525\":{\"h\":\"原生开发库\",\"a\":\"原生开发库\"},\"6526\":{\"t\":\"用来进行特定平台开发的原生开发库。\"},\"6527\":{\"t\":\"JNA：不使用JNI就可以使用原生开发库。此外，还为常见系统函数提供了接口。官网\"},\"6528\":{\"h\":\"自然语言处理\",\"a\":\"自然语言处理\"},\"6529\":{\"t\":\"用来专门处理文本的函数库。\"},\"6530\":{\"t\":\"Apache OpenNLP：处理类似分词等常见任务的工具。官网\"},\"6531\":{\"t\":\"CoreNLP：斯坦佛CoreNLP提供了一组基础工具，可以处理类似标签、实体名识别和情感分析这样的任务。官网\"},\"6532\":{\"t\":\"LingPipe：一组可以处理各种任务的工具集，支持POS标签、情感分析等。官网\"},\"6533\":{\"t\":\"Mallet：统计学自然语言处理、文档分类、聚类、主题建模等。官网\"},\"6534\":{\"h\":\"网络\",\"a\":\"网络\"},\"6535\":{\"t\":\"网络编程函数库。\"},\"6536\":{\"t\":\"Async Http Client：异步HTTP和WebSocket客户端函数库。官网\"},\"6537\":{\"t\":\"Grizzly：NIO框架，在Glassfish中作为网络层使用。官网\"},\"6538\":{\"t\":\"Netty：构建高性能网络应用程序开发框架。官网\"},\"6539\":{\"t\":\"OkHttp：一个Android和Java应用的HTTP+SPDY客户端。官网\"},\"6540\":{\"t\":\"Undertow：基于NIO实现了阻塞和非阻塞API的Web服务器，在WildFly中作为网络层使用。官网\"},\"6541\":{\"t\":\"unirest-java: Unirest 是一个轻量级的 HTTP 请求库，涵盖 Node、Ruby、Java、PHP、Python、Objective-C、.NET 等多种语言。可发起 GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS 请求。官网\"},\"6542\":{\"t\":\"brpc-java: java版baidu rpc框架，高性能、多协议、易扩展、低耦合。官网\"},\"6543\":{\"h\":\"ORM\",\"a\":\"orm\"},\"6544\":{\"t\":\"处理对象持久化的API。\"},\"6545\":{\"t\":\"Ebean：支持快速数据访问和编码的ORM框架。官网\"},\"6546\":{\"t\":\"EclipseLink：支持许多持久化标准，JPA、JAXB、JCA和SDO。官网\"},\"6547\":{\"t\":\"Hibernate：广泛使用、强健的持久化框架。Hibernate的技术社区非常活跃。官网\"},\"6548\":{\"t\":\"MyBatis：带有存储过程或者SQL语句的耦合对象（Couples object）。官网\"},\"6549\":{\"t\":\"OrmLite：轻量级开发包，免除了其它ORM产品中的复杂性和开销。官网\"},\"6550\":{\"t\":\"Nutz：另一个SSH。官网，Github，论坛\"},\"6551\":{\"t\":\"JFinal：JAVA WEB + ORM框架。官网，Github\"},\"6552\":{\"t\":\"Apache OpenJPA: 实现了 EJB 3.0 中的 JPA 标准,为开发者提供功能强大、使用简单的持久化数据管理框架。 官网\"},\"6553\":{\"h\":\"PDF\",\"a\":\"pdf\"},\"6554\":{\"t\":\"用来帮助创建PDF文件的资源。\"},\"6555\":{\"t\":\"Apache FOP：从XSL-FO创建PDF。官网\"},\"6556\":{\"t\":\"Apache PDFBox：用来创建和操作PDF的工具集。官网\"},\"6557\":{\"t\":\"DynamicReports：JasperReports的精简版。官网\"},\"6558\":{\"t\":\"flyingsaucer：XML/XHTML和CSS 2.1渲染器。官网\"},\"6559\":{\"t\":\"iText：一个易于使用的PDF函数库，用来编程创建PDF文件。注意，用于商业用途时需要许可证。官网\"},\"6560\":{\"t\":\"JasperReports：一个复杂的报表引擎。官网\"},\"6561\":{\"h\":\"性能分析\",\"a\":\"性能分析\"},\"6562\":{\"t\":\"性能分析、性能剖析及基准测试工具。\"},\"6563\":{\"t\":\"jHiccup：提供平台中JVM暂停的日志和记录。官网\"},\"6564\":{\"t\":\"JMH：JVM基准测试工具。官网\"},\"6565\":{\"t\":\"JProfiler：商业分析器。官网\"},\"6566\":{\"t\":\"LatencyUtils：测量和报告延迟的工具。官网\"},\"6567\":{\"t\":\"VisualVM：对运行中的应用程序信息提供了可视化界面。官网\"},\"6568\":{\"t\":\"YourKit Java Profiler：商业分析器。官网\"},\"6569\":{\"h\":\"响应式开发库\",\"a\":\"响应式开发库\"},\"6570\":{\"t\":\"用来开发响应式应用程序的开发库。\"},\"6571\":{\"t\":\"Reactive Streams：异步流处理标准，支持非阻塞式反向压力（backpressure）。官网\"},\"6572\":{\"t\":\"Reactor：构建响应式快速数据（fast-data）应用程序的开发库。官网\"},\"6573\":{\"t\":\"RxJava：通过JVM可观察序列（observable sequence）构建异步和基于事件的程序。官网\"},\"6574\":{\"h\":\"REST框架\",\"a\":\"rest框架\"},\"6575\":{\"t\":\"用来创建RESTful 服务的框架。\"},\"6576\":{\"t\":\"Dropwizard：偏向于自己使用的Web框架。用来构建Web应用程序，使用了Jetty、Jackson、Jersey和Metrics。官网\"},\"6577\":{\"t\":\"Feign：受Retrofit、JAXRS-2.0和WebSocket启发的HTTP客户端连接器（binder）。官网\"},\"6578\":{\"t\":\"Jersey：JAX-RS参考实现。官网\"},\"6579\":{\"t\":\"RESTEasy：经过JAX-RS规范完全认证的可移植实现。官网\"},\"6580\":{\"t\":\"RestExpress：一个Java类型安全的REST客户端。官网\"},\"6581\":{\"t\":\"RestX：基于注解处理和编译时源码生成的框架。官网\"},\"6582\":{\"t\":\"Retrofit：类型安全的REST客户端。官网\"},\"6583\":{\"t\":\"Spark：受到Sinatra启发的Java REST框架。官网\"},\"6584\":{\"t\":\"Swagger：Swagger是一个规范且完整的框架，提供描述、生产、消费和可视化RESTful Web Service。官网\"},\"6585\":{\"t\":\"Blade：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。官网\"},\"6586\":{\"h\":\"科学计算与分析\",\"a\":\"科学计算与分析\"},\"6587\":{\"t\":\"用于科学计算和分析的函数库。\"},\"6588\":{\"t\":\"DataMelt：用于科学计算、数据分析及数据可视化的开发环境。官网\"},\"6589\":{\"t\":\"JGraphT：支持数学图论对象和算法的图形库。官网\"},\"6590\":{\"t\":\"JScience：用来进行科学测量和单位的一组类。官网\"},\"6591\":{\"h\":\"搜索引擎\",\"a\":\"搜索引擎\"},\"6592\":{\"t\":\"文档索引引擎，用于搜索和分析。\"},\"6593\":{\"t\":\"Apache Solr：一个完全的企业搜索引擎。为高吞吐量通信进行了优化。官网\"},\"6594\":{\"t\":\"Elasticsearch：一个分布式、支持多租户（multitenant）全文本搜索引擎。提供了RESTful Web接口和无schema的JSON文档。官网\"},\"6595\":{\"t\":\"Apache Lucene：是一个开放源代码的全文检索引擎工具包，是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。官网\"},\"6596\":{\"h\":\"安全\",\"a\":\"安全\"},\"6597\":{\"t\":\"用于处理安全、认证、授权或会话管理的函数库。\"},\"6598\":{\"t\":\"Apache Shiro：执行认证、授权、加密和会话管理。官网\"},\"6599\":{\"t\":\"Bouncy Castle，涵盖了从基础的帮助函数到PGP/SMIME操作。官网：多途加密开发库。支持JCA提供者（JCA provider)\"},\"6600\":{\"t\":\"Cryptomator：在云上进行客户端跨平台透明加密。官网\"},\"6601\":{\"t\":\"Keycloak：为浏览器应用和RESTful Web Service集成SSO和IDM。目前还处于beta版本，但是看起来非常有前途。官网\"},\"6602\":{\"t\":\"PicketLink：PicketLink是一个针对Java应用进行安全和身份认证管理的大型项目（Umbrella Project）。官网\"},\"6603\":{\"t\":\"Sa-Token：Sa-Token 是一个轻量级 Java 权限认证框架，主要解决：登录认证、权限认证、Session会话、单点登录、OAuth2.0、微服务网关鉴权 等一系列权限相关问题。官网\"},\"6604\":{\"h\":\"序列化\",\"a\":\"序列化\"},\"6605\":{\"t\":\"用来高效处理序列化的函数库。\"},\"6606\":{\"t\":\"FlatBuffers：高效利用内存的序列化函数库，无需解包和解析即可高效访问序列化数据。官网\"},\"6607\":{\"t\":\"Kryo：快速、高效的对象图形序列化框架。官网\"},\"6608\":{\"t\":\"FST：提供兼容JDK的高性能对象图形序列化。官网\"},\"6609\":{\"t\":\"MessagePack：一种高效的二进制序列化格式。官网\"},\"6610\":{\"h\":\"应用服务器\",\"a\":\"应用服务器\"},\"6611\":{\"t\":\"用来部署应用程序的服务器。\"},\"6612\":{\"t\":\"Apache Tomcat：针对Servlet和JSP的应用服务器，健壮性好且适用性强。官网\"},\"6613\":{\"t\":\"Apache TomEE：Tomcat加Java EE。官网\"},\"6614\":{\"t\":\"Jetty：轻量级、小巧的应用服务器，通常会嵌入到项目中。官网\"},\"6615\":{\"t\":\"WebSphere Liberty：轻量级、模块化应用服务器，由IBM开发。官网\"},\"6616\":{\"t\":\"WildFly：之前被称作JBoss，由Red Hat开发。支持很多Java EE功能。官网\"},\"6617\":{\"h\":\"模板引擎\",\"a\":\"模板引擎\"},\"6618\":{\"t\":\"在模板中替换表达式的工具。\"},\"6619\":{\"t\":\"Apache Velocity：提供HTML页面模板、email模板和通用开源代码生成器模板。官网\"},\"6620\":{\"t\":\"FreeMarker：通用模板引擎，不需要任何重量级或自己使用的依赖关系。官网\"},\"6621\":{\"t\":\"Handlebars.java：使用Java编写的模板引擎，逻辑简单，支持语义扩展（semantic Mustache）。官网\"},\"6622\":{\"t\":\"Thymeleaf：旨在替换JSP，支持XML文件的工具。官网\"},\"6623\":{\"t\":\"Beetl：新一代的模板引擎，功能强大，性能良好，超过当前流行的模板引擎。而且还易学易用。官网\"},\"6624\":{\"h\":\"测试\",\"a\":\"测试\"},\"6625\":{\"t\":\"测试内容从对象到接口，涵盖性能测试和基准测试工具。\"},\"6626\":{\"t\":\"Apache JMeter：功能性测试和性能评测。官网\"},\"6627\":{\"t\":\"Arquillian：集成测试和功能行测试平台，集成Java EE容器。官网\"},\"6628\":{\"t\":\"AssertJ：支持流式断言提高测试的可读性。官网\"},\"6629\":{\"t\":\"Awaitility：用来同步异步操作的DSL。官网\"},\"6630\":{\"t\":\"Cucumber：BDD测试框架。官网\"},\"6631\":{\"t\":\"Gatling：设计为易于使用、可维护的和高性能负载测试工具。官网\"},\"6632\":{\"t\":\"Hamcrest：可用来灵活创建意图（intent）表达式的匹配器。官网\"},\"6633\":{\"t\":\"JMockit：用来模拟静态、final方法等。官网\"},\"6634\":{\"t\":\"JUnit：通用测试框架。官网\"},\"6635\":{\"t\":\"Mockito：在自动化单元测试中创建测试对象，为TDD或BDD提供支持。官网\"},\"6636\":{\"t\":\"PowerMock： 支持模拟静态方法、构造函数、final类和方法、私有方法以及移除静态初始化器的模拟工具。官网\"},\"6637\":{\"t\":\"REST Assured：为REST/HTTP服务提供方便测试的Java DSL。官网\"},\"6638\":{\"t\":\"Selenide：为Selenium提供精准的周边API，用来编写稳定且可读的UI测试。官网\"},\"6639\":{\"t\":\"Selenium：为Web应用程序提供可移植软件测试框架。官网\"},\"6640\":{\"t\":\"Spock：JUnit-compatible framework featuring an expressive Groovy-derived specification language.官网兼容JUnit框架，支持衍生的Groovy范的语言。\"},\"6641\":{\"t\":\"TestNG：测试框架。官网\"},\"6642\":{\"t\":\"Truth：Google的断言和命题（proposition）框架。官网\"},\"6643\":{\"t\":\"Unitils：模块化测试函数库，支持单元测试和集成测试。官网\"},\"6644\":{\"t\":\"WireMock：Web Service测试桩（Stub）和模拟函数。官网\"},\"6645\":{\"h\":\"通用工具库\",\"a\":\"通用工具库\"},\"6646\":{\"t\":\"通用工具类函数库。\"},\"6647\":{\"t\":\"Apache Commons：提供各种用途的函数，比如配置、验证、集合、文件上传或XML处理等。官网\"},\"6648\":{\"t\":\"args4j：命令行参数解析器。官网\"},\"6649\":{\"t\":\"CRaSH：为运行进行提供CLI。官网\"},\"6650\":{\"t\":\"Gephi：可视化跨平台网络图形化操作程序。官网\"},\"6651\":{\"t\":\"Guava：集合、缓存、支持基本类型、并发函数库、通用注解、字符串处理、I/O等。官网\"},\"6652\":{\"t\":\"JADE：构建、调试多租户系统的框架和环境。官网\"},\"6653\":{\"t\":\"javatuples：正如名字表示的那样，提供tuple支持。尽管目前tuple的概念还有留有争议。官网\"},\"6654\":{\"t\":\"JCommander：命令行参数解析器。官网\"},\"6655\":{\"t\":\"Protégé：提供存在论（ontology）编辑器以及构建知识系统的框架。官网\"},\"6656\":{\"t\":\"Hutool：一个Java工具集，缓存、HTTP、加密解密、DFA、JSON、分组配置文件、数据库操作、图片验证码、Excel读写、定时任务、模板引擎、邮件、Servlet、二维码、Emoji、分词等一系列工具类。官网\"},\"6657\":{\"h\":\"网络爬虫\",\"a\":\"网络爬虫\"},\"6658\":{\"t\":\"用于分析网站内容的函数库。\"},\"6659\":{\"t\":\"Apache Nutch：可用于生产环境的高度可扩展、可伸缩的网络爬虫。官网\"},\"6660\":{\"t\":\"Crawler4j：简单的轻量级网络爬虫。官网\"},\"6661\":{\"t\":\"JSoup：刮取、解析、操作和清理HTML。官网\"},\"6662\":{\"t\":\"webmagic：一个可扩展的Java爬虫框架，架构类似Python的Scrapy。\"},\"6663\":{\"h\":\"Web框架\",\"a\":\"web框架\"},\"6664\":{\"t\":\"用于处理Web应用程序不同层次间通讯的框架。\"},\"6665\":{\"t\":\"Apache Tapestry：基于组件的框架，使用Java创建动态、强健的、高度可扩展的Web应用程序。官网\"},\"6666\":{\"t\":\"Apache Wicket：基于组件的Web应用框架，与Tapestry类似带有状态显示GUI。官网\"},\"6667\":{\"t\":\"Google Web Toolkit：一组Web开发工具集，包含在客户端将Java代码转为JavaScript的编译器、XML解析器、RCP 官网API、JUnit集成、国际化支持和GUI控件。\"},\"6668\":{\"t\":\"Grails：Groovy框架，旨在提供一个高效开发环境，使用约定而非配置、没有XML并支持混入（mixin）。官网\"},\"6669\":{\"t\":\"Ninja：Java全栈Web开发框架。非常稳固、快速和高效。官网\"},\"6670\":{\"t\":\"Pippo：小型、高度模块化的类Sinatra框架。官网\"},\"6671\":{\"t\":\"Play：使用约定而非配置，支持代码热加载并在浏览器中显示错误。官网\"},\"6672\":{\"t\":\"PrimeFaces：JSF框架，提供免费和带支持的商业版本。包括若干前端组件。官网\"},\"6673\":{\"t\":\"Ratpack：一组Java开发函数库，用于构建快速、高效、可扩展且测试完备的HTTP应用程序。官网\"},\"6674\":{\"t\":\"Spring Boot：微框架，简化了Spring新程序的开发过程。官网\"},\"6675\":{\"t\":\"Spring：旨在简化Java EE的开发过程，提供依赖注入相关组件并支持面向切面编程。官网\"},\"6676\":{\"t\":\"Vaadin：基于GWT构建的事件驱动框架。使用服务端架构，客户端使用Ajax。官网\"},\"6677\":{\"t\":\"Blade：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。官网\"},\"6678\":{\"h\":\"业务流程管理套件\",\"a\":\"业务流程管理套件\"},\"6679\":{\"t\":\"流程驱动的软件系统构建。\"},\"6680\":{\"t\":\"jBPM：非常灵活的业务流程管理框架，致力于构建开发与业务分析人员之间的桥梁。官网\"},\"6681\":{\"t\":\"Activity：轻量级工作流和业务流程管理框架。官网github\"},\"6682\":{\"h\":\"资源\",\"a\":\"资源\"},\"6683\":{\"h\":\"社区\",\"a\":\"社区\"},\"6684\":{\"t\":\"r/java：Reddit的Java子社区。官网\"},\"6685\":{\"t\":\"stackoverflow：问答平台。官网\"},\"6686\":{\"t\":\"vJUG：虚拟Java用户组。官网\"},\"6687\":{\"t\":\"java8 新特性教程例子。github\"},\"6688\":{\"h\":\"有影响力的书\",\"a\":\"有影响力的书\"},\"6689\":{\"t\":\"具有广泛影响且值得阅读的Java经典书籍。\"},\"6690\":{\"t\":\"Effective Java (2nd Edition)\"},\"6691\":{\"t\":\"Java 8 in Action\"},\"6692\":{\"t\":\"Java Concurrency in Practice | Java并发编程实战\"},\"6693\":{\"t\":\"Thinking in Java | Java编程思想\"},\"6694\":{\"t\":\"Java Puzzlers | Java解惑\"},\"6695\":{\"h\":\"播客\",\"a\":\"播客\"},\"6696\":{\"t\":\"可以一边编程一边听的东西。\"},\"6697\":{\"t\":\"Java Council：官网\"},\"6698\":{\"t\":\"Java Posse：Discontinued as of 02/2015.官网\"},\"6699\":{\"h\":\"Twitter\",\"a\":\"twitter\"},\"6700\":{\"t\":\"Adam Bien：自由职业者、作家、JavaONE明星演讲者、顾问、Java Champion。\"},\"6701\":{\"t\":\"Antonio Goncalves：Java Champion、JUG Leader、Devoxx France、Java EE 6/7、JCP、作家。\"},\"6702\":{\"t\":\"Arun Gupta：Java Champion、JavaONE明星演讲者、JUG Leader、Devoxx4Kids成员、Red Hatter。\"},\"6703\":{\"t\":\"Bruno Borges：Oracle产品经理、Java Jock。\"},\"6704\":{\"t\":\"Ed Burns：Oracle技术团队顾问。\"},\"6705\":{\"t\":\"Eugen Paraschiv：Spring安全课程作者。\"},\"6706\":{\"t\":\"James Weaver：Java、JavaFX、IoT开发者、作者和演讲者。\"},\"6707\":{\"t\":\"Java EE：Java EE Twitter官方账号。\"},\"6708\":{\"t\":\"Java Magazine：Java杂志官方账号。\"},\"6709\":{\"t\":\"Java.net：Java.net官方账号。\"},\"6710\":{\"t\":\"Java：Java Twitter官方账号。\"},\"6711\":{\"t\":\"Javin Paul：知名Java博客作者。\"},\"6712\":{\"t\":\"Lukas Eder：Data Geekery（jOOQ）创始人兼CEO。\"},\"6713\":{\"t\":\"Mario Fusco：RedHatter、JUG协调、活跃讲师和作者。\"},\"6714\":{\"t\":\"Mark Reinhold：Oracle首席架构师、Java平台开发组。\"},\"6715\":{\"t\":\"Martijn Verburg：London JUG co-leader、演讲者、作家、Java Champion等。\"},\"6716\":{\"t\":\"OpenJDK：OpenJDK官方账号。\"},\"6717\":{\"t\":\"Reza Rahman：Java EE、GlassFish、WebLogic传道者、作家、演讲者、开源黑客。\"},\"6718\":{\"t\":\"Simon Maple：Java Champion、virtualJUG创始人、LJC leader、RebelLabs作者。\"},\"6719\":{\"t\":\"Stephen Colebourne： Java Champion、演讲者。\"},\"6720\":{\"t\":\"Tim Boudreau：作家、NetBeans大牛。\"},\"6721\":{\"t\":\"Trisha Gee：Java Champion、演讲者。\"},\"6722\":{\"h\":\"知名网站\",\"a\":\"知名网站\"},\"6723\":{\"t\":\"值得关注的Java技术站点。\"},\"6724\":{\"h\":\"英文站点\",\"a\":\"英文站点\"},\"6725\":{\"t\":\"Android Arsenal\"},\"6726\":{\"t\":\"Google Java Style：官网\"},\"6727\":{\"t\":\"InfoQ：官网\"},\"6728\":{\"t\":\"Java Code Geeks\"},\"6729\":{\"t\":\"Java, SQL, and jOOQ\"},\"6730\":{\"t\":\"Java.net\"},\"6731\":{\"t\":\"Javalobby\"},\"6732\":{\"t\":\"JavaWorld：官网\"},\"6733\":{\"t\":\"JAXenter：官网\"},\"6734\":{\"t\":\"RebelLabs\"},\"6735\":{\"t\":\"The Java Specialist' Newsletter：官网\"},\"6736\":{\"t\":\"The Takipi Blog\"},\"6737\":{\"t\":\"TheServerSide.com：服务器编程交流平台是一个老牌的IT信息网站，关注服务器端编程的，以Java和.Net周边信息为主。官网\"},\"6738\":{\"t\":\"Thoughts On Java\"},\"6739\":{\"t\":\"Vanilla Java\"},\"6740\":{\"t\":\"Vlad Mihalcea on Hibernate\"},\"6741\":{\"t\":\"Voxxed\"},\"6742\":{\"t\":\"OnJava：O'Reilly Java包含最新的Java技术资讯，优质代码，完全的实例和详解。官网\"},\"6743\":{\"h\":\"Better Java\"},\"6744\":{\"t\":\"Java 虽作为最流行的编程语言之一，但是似乎并没有什么人很享受用它。好吧，Java 确实是这样的一门编程语言，从最近发布不久的 Java 8 开始，为了更好的使用 Java，我决定收集一些库，实践和工具等相关资料。“更好” 是主观的，所以推荐使用我所说的建议的某些部分，而不是一下子全部按照这些建议来做。请尽情添加其他意见并提交 PR。\"},\"6745\":{\"t\":\"这篇文章原始发布在 我的博客.\"},\"6746\":{\"t\":\"其他语言版本： English, 简体中文\"},\"6747\":{\"h\":\"目录\",\"a\":\"目录\"},\"6748\":{\"t\":\"Style（风格）\"},\"6749\":{\"t\":\"Structs（结构）\"},\"6750\":{\"t\":\"The Builder Pattern（构建器模式）\"},\"6751\":{\"t\":\"Immutable Object Generation（不可变对象生成）\"},\"6752\":{\"t\":\"Exceptions（异常）\"},\"6753\":{\"t\":\"Dependency injection（依赖注入）\"},\"6754\":{\"t\":\"Avoid Nulls（避免空值）\"},\"6755\":{\"t\":\"Immutable-by-default（默认不可变）\"},\"6756\":{\"t\":\"Avoid lots of Util classes（避免过多的工具类）\"},\"6757\":{\"t\":\"Formatting（格式）\"},\"6758\":{\"t\":\"Javadoc\"},\"6759\":{\"t\":\"Streams（流）\"},\"6760\":{\"t\":\"Deploying（部署）\"},\"6761\":{\"t\":\"Frameworks（框架）\"},\"6762\":{\"t\":\"Maven\"},\"6763\":{\"t\":\"Dependency Convergence（依赖收敛）\"},\"6764\":{\"t\":\"Continuous Integration（持续集成）\"},\"6765\":{\"t\":\"Maven repository（Maven 仓库）\"},\"6766\":{\"t\":\"Configuration management（配置管理）\"},\"6767\":{\"t\":\"Libraries（库）\"},\"6768\":{\"t\":\"Missing Features（缺失的特性）\"},\"6769\":{\"t\":\"Apache Commons\"},\"6770\":{\"t\":\"Guava\"},\"6771\":{\"t\":\"Gson\"},\"6772\":{\"t\":\"Java Tuples（Java 元组）\"},\"6773\":{\"t\":\"Javaslang\"},\"6774\":{\"t\":\"Joda-Time\"},\"6775\":{\"t\":\"Lombok\"},\"6776\":{\"t\":\"Play framework（Play 框架）\"},\"6777\":{\"t\":\"SLF4J\"},\"6778\":{\"t\":\"jOOQ\"},\"6779\":{\"t\":\"Testing（测试）\"},\"6780\":{\"t\":\"jUnit 4\"},\"6781\":{\"t\":\"jMock\"},\"6782\":{\"t\":\"AssertJ\"},\"6783\":{\"t\":\"Tools（工具）\"},\"6784\":{\"t\":\"IntelliJ IDEA\"},\"6785\":{\"t\":\"Chronon\"},\"6786\":{\"t\":\"JRebel\"},\"6787\":{\"t\":\"The Checker Framework（检查框架）\"},\"6788\":{\"t\":\"Code Quality（代码质量）\"},\"6789\":{\"t\":\"Eclipse Memory Analyzer（Eclipse 内存分析）\"},\"6790\":{\"t\":\"Resources（资源）\"},\"6791\":{\"t\":\"Books（书）\"},\"6792\":{\"t\":\"Podcasts（播客）\"},\"6793\":{\"t\":\"Videos（视频）\"},\"6794\":{\"h\":\"Style\",\"a\":\"style\"},\"6795\":{\"t\":\"Java 传统的代码风格是被用来编写非常复杂的企业级 JavaBean。新的代码风格看起来会更加整洁，更加正确，并且更加简单。\"},\"6796\":{\"h\":\"Structs\",\"a\":\"structs\"},\"6797\":{\"t\":\"对我们程序员来说，包装数据是最简单的事情之一。下面是传统的通过定义一个 JavaBean 的实现方式：\"},\"6798\":{\"t\":\"public class DataHolder { private String data; public DataHolder() { } public void setData(String data) { this.data = data; } public String getData() { return this.data; } } \"},\"6799\":{\"t\":\"这种方式既繁琐又浪费代码。即使你的 IDE 可以自动生成这些代码，也是浪费。因此，别这么干.\"},\"6800\":{\"t\":\"相反，我更喜欢 C 语言保存数据的风格来写一个类：\"},\"6801\":{\"t\":\"public class DataHolder { public final String data; public DataHolder(String data) { this.data = data; } } \"},\"6802\":{\"t\":\"这样不仅减少了近一半的代码行数。并且，这个类里面保存的数据除了你去继承它，否则不会改变，由于它不可变性，我们可以认为这会更加简单。\"},\"6803\":{\"t\":\"如果你想保存很容易修改的对象数据，像 Map 或者 List，你应该使用 ImmutableMap 或者 ImmutableList，这些会在不变性那一部分讨论。\"},\"6804\":{\"h\":\"The Builder Pattern\",\"a\":\"the-builder-pattern\"},\"6805\":{\"t\":\"如果你想用这种构造的方式构造更复杂的对象，请考虑构建器模式。\"},\"6806\":{\"t\":\"你可以建一个静态内部类来构建你的对象。构建器构建对象的时候，对象的状态是可变的，但是一旦你调用了 build 方法之后，构建的对象就变成了不可变的了。\"},\"6807\":{\"t\":\"想象一下我们有一个更复杂的 DataHolder。那么它的构建器看起来应该是这样的：\"},\"6808\":{\"t\":\"public class ComplicatedDataHolder { public final String data; public final int num; // lots more fields and a constructor public static class Builder { private String data; private int num; public Builder data(String data) { this.data = data; return this; } public Builder num(int num) { this.num = num; return this; } public ComplicatedDataHolder build() { return new ComplicatedDataHolder(data, num); // etc } } } \"},\"6809\":{\"t\":\"然后调用它：\"},\"6810\":{\"t\":\"final ComplicatedDataHolder cdh = new ComplicatedDataHolder.Builder() .data(\\\"set this\\\") .num(523) .build(); \"},\"6811\":{\"t\":\"这有关于构建器更好的例子，他会让你感受到构建器到底是怎么回事。它没有使用许多我们尽力避免使用的样板，并且它会给你不可变的对象和非常好用的接口。\"},\"6812\":{\"t\":\"可以考虑下在众多的库中选择一个来帮你生成构建器，取代你亲手去写构建器的方式。\"},\"6813\":{\"h\":\"Immutable Object Generation\",\"a\":\"immutable-object-generation\"},\"6814\":{\"t\":\"如果你要手动创建许多不可变对象，请考虑用注解处理器的方式从它们的接口自动生成。它使样板代码减少到最小化，减少产生 bug 的可能性，促进了对象的不可变性。看这 presentation 有常见的 Java 设计模式中一些问题的有趣的讨论。\"},\"6815\":{\"t\":\"一些非常棒的代码生成库如 [immutables] (https://github.com/immutables/immutables), 谷歌的 auto-value 和 Lombok\"},\"6816\":{\"h\":\"Exceptions\",\"a\":\"exceptions\"},\"6817\":{\"t\":\"使用检查异常的时候一定要注意，或者干脆别用。它会强制你去用 try/catch 代码块包裹住可能抛出异常的部分。比较好的方式就是使你自定义的异常继承自运行时异常来取而代之。这样，可以让你的用户使用他们喜欢的方式去处理异常，而不是每次抛出异常的时候都强制它们去处理/声明，这样会污染代码。\"},\"6818\":{\"t\":\"一个比较漂亮的绝招是在你的方法异常声明中声明 RuntimeExceptions。这对编译器没有影响，但是可以通过文档告诉你的用户在这里可能会有异常抛出。\"},\"6819\":{\"h\":\"Dependency injection\",\"a\":\"dependency-injection\"},\"6820\":{\"t\":\"在软件工程领域，而不仅是在 Java 领域，使用依赖注入是编写可测试软件最好的方法之一。 由于 Java 强烈鼓励使用面向对象的设计，所以在 Java 中为了开发可测试软件，你不得不使用依赖注入。\"},\"6821\":{\"t\":\"在 Java 中，通常使用Spring 框架来完成依赖注入。Spring 有基于代码的和基于 XML 配置文件的两种连接方式。如果你使用基于 XML 配置文件的方式，注意不要过度使用 Spring，正是由于它使用的基于 XML 配置文件的格式。在 XML 配置文件中绝对不应该有逻辑或者控制结构。它应该仅仅被用来做依赖注入。\"},\"6822\":{\"t\":\"使用 Google 和 Square 的 Dagger 或者 Google 的 Guice 库是 Spring 比较好的替代品。它们不使用像 Spring 那样的 XML 配置文件的格式，相反它们把注入逻辑以注解的方式写到代码中。\"},\"6823\":{\"h\":\"Avoid Nulls\",\"a\":\"avoid-nulls\"},\"6824\":{\"t\":\"尽量避免使用空值。不要返回 null 的集合，你应该返回一个 empty 的集合。如果你确实准备使用 null 请考虑使用 @Nullable 注解。IntelliJ IDEA 内置支持 @Nullable 注解。\"},\"6825\":{\"t\":\"阅读计算机科学领域最糟糕的错误了解更多为何不使用 null。\"},\"6826\":{\"t\":\"如果你使用的是 Java 8，你可以用新出的优秀的 Optional 类型。如果有一个值你不确定是否存在，你可以像这样在类中用 Optional 包裹住它们：\"},\"6827\":{\"t\":\"public class FooWidget { private final String data; private final Optional<Bar> bar; public FooWidget(String data) { this(data, Optional.empty()); } public FooWidget(String data, Optional<Bar> bar) { this.data = data; this.bar = bar; } public Optional<Bar> getBar() { return bar; } } \"},\"6828\":{\"t\":\"这样，现在你可以清晰地知道 data 肯定不为 null，但是 bar 不清楚是不是存在。Optional 有如 isPresent 这样的方法，可以用来检查是否为 null，感觉和原来的方式并没有太大区别。但是它允许你可以这样写：\"},\"6829\":{\"t\":\"final Optional<FooWidget> fooWidget = maybeGetFooWidget(); final Baz baz = fooWidget.flatMap(FooWidget::getBar) .flatMap(BarWidget::getBaz) .orElse(defaultBaz); \"},\"6830\":{\"t\":\"这样比写一连串的判断是否为空的检查代码更好。使用 Optional 唯一不好的是标准库对 Optional 的支持并不是很好，所以对 null 的处理仍然是必要的。\"},\"6831\":{\"h\":\"Immutable-by-default\",\"a\":\"immutable-by-default\"},\"6832\":{\"t\":\"变量，类和集合应该设置为不可变的，除非你有很好的理由去修改他们。\"},\"6833\":{\"t\":\"变量可以用 final 关键字使起不可变：\"},\"6834\":{\"t\":\"final FooWidget fooWidget; if (condition()) { fooWidget = getWidget(); } else { try { fooWidget = cachedFooWidget.get(); } catch (CachingException e) { log.error(\\\"Couldn't get cached value\\\", e); throw e; } } // fooWidget is guaranteed to be set here \"},\"6835\":{\"t\":\"现在你可以确定 fooWidget 对象不会意外地被重新赋值了。final 关键词也可以在 if/else 和 try/catch 代码块中使用。当然，如果 fooWidget 对象本身不是不可变的，你可以很容易去修改它。\"},\"6836\":{\"t\":\"使用集合的时候，任何可能的情况下尽量使用 Guava 的 ImmutableMap, ImmutableList, 或者 ImmutableSet 类。这些类都有构建器，你可以很容易地动态构建集合，一旦你执行了 build 方法，集合就变成了不可变的。\"},\"6837\":{\"t\":\"类应该声明不可变的字段（通过 final 实现）和不可变的集合使该类不可变。或者，可以对类本身使用 final 关键词，这样这个类就不会被继承也不会被修改了。\"},\"6838\":{\"h\":\"Avoid lots of Util classes\",\"a\":\"avoid-lots-of-util-classes\"},\"6839\":{\"t\":\"如果你发现在你正在往工具类中添加很多方法，就要注意了。\"},\"6840\":{\"t\":\"public class MiscUtil { public static String frobnicateString(String base, int times) { // ... etc } public static void throwIfCondition(boolean condition, String msg) { // ... etc } } \"},\"6841\":{\"t\":\"乍一看这些工具类似乎很不错，因为里面的那些方法放在别处确实都不太合适。因此，你以可重用代码的名义全放这了。\"},\"6842\":{\"t\":\"这个想法比本身这么做还要糟糕。请把这些类放到它应该在的地方去并积极重构。不要命名一些像 \\\"MiscUtils\\\" 或者 \\\"ExtrasLibrary\\\" 这样的很普通的类，包或者库。这会鼓励产生无关代码。\"},\"6843\":{\"h\":\"Formatting\",\"a\":\"formatting\"},\"6844\":{\"t\":\"格式化代码对大多数程序员来说并没有它应有的那么重要。统一化你的代码格式对阅读你的代码的人有帮助吗？当然了。但是别在为了 if 代码块匹配添加空格上耗一天。\"},\"6845\":{\"t\":\"如果你确实需要一个代码格式风格的教程，我高度推荐 Google's Java Style 这个教程。写的最好的部分是 Programming Practices。绝对值得一读。\"},\"6846\":{\"h\":\"Javadoc\",\"a\":\"javadoc\"},\"6847\":{\"t\":\"文档对对你代码的阅读着来说也很重要。这意味着你要给出使用示例，并且给出你的变量，方法和类清晰地描述。\"},\"6848\":{\"t\":\"这样做的必然结果是不要对不需要写文档的地方填写文档。如果你对一个参数的含义没什么可说的，或者它本身已经很明显是什么意思了，就不要为其写文档了。统一样板的文档比没有文档更加糟糕，这样会让读你代码的人误以为那就是文档。\"},\"6849\":{\"h\":\"Streams\",\"a\":\"streams\"},\"6850\":{\"t\":\"Java 8 有很棒的 stream and lambda 语法。你可以像这样来写代码：\"},\"6851\":{\"t\":\"final List<String> filtered = list.stream() .filter(s -> s.startsWith(\\\"s\\\")) .map(s -> s.toUpperCase()) .collect(Collectors.toList()); \"},\"6852\":{\"t\":\"取代这样的写法:\"},\"6853\":{\"t\":\"final List<String> filtered = new ArrayList<>(); for (String str : list) { if (str.startsWith(\\\"s\\\") { filtered.add(str.toUpperCase()); } } \"},\"6854\":{\"t\":\"它让你可以写更多的流畅的代码，并且可读性更高。\"},\"6855\":{\"h\":\"Deploying\",\"a\":\"deploying\"},\"6856\":{\"t\":\"Java 的部署问题确实有点棘手。现如今有两种主流的方式：使用框架或者灵活性更高的内部研发的解决方案。\"},\"6857\":{\"h\":\"Frameworks\",\"a\":\"frameworks\"},\"6858\":{\"t\":\"由于 Java 的部署并不容易，所以使用框架还是很有帮助的。最好的两个框架是 Dropwizard 和 Spring Boot。Play 框架 也可以被看作为一种部署框架。\"},\"6859\":{\"t\":\"这些框架都是尽力地降低你部署代码的壁垒。它们对 Java 新手或者想提高效率的人尤有帮助。单独的 JAR 包部署会比复杂的 WAR 包或者 EAR 包部署更简单一点。\"},\"6860\":{\"t\":\"然而，这些框架并没有你想象的那么灵活，如果你的项目的开发者选择的框架并不合适，你不得不迁移到手动配置更多的部署方案上来。\"},\"6861\":{\"h\":\"Maven\",\"a\":\"maven\"},\"6862\":{\"t\":\"不错的替代工具: Gradle.\"},\"6863\":{\"t\":\"Maven 仍然是构建，打包和测试的标准。有很多不错的替代工具，如 Gradle，但是他们同样都没有像 Maven 那样的适应性。如果你是 Maven 新手，你应该从Maven 实例这里开始。\"},\"6864\":{\"t\":\"我喜欢用一个根 POM（Project Object Model，项目对象模型）来管理所有用到的外部依赖。它会像这个样子。这个根 POM 仅仅包含一个外部依赖，但是如果你的产品足够大，你将会有几十个外部依赖了。你的根 POM 应该像其他 Java 项目一样采用版本控制和发布的方式，有一个自己的项目。\"},\"6865\":{\"t\":\"如果你认为你的根 POM 每添加一个外部依赖都打上一个标签很麻烦，那你肯定没有遇到过为了排查依赖错误引起的问题，浪费一周的时间翻遍整个项目的情况。\"},\"6866\":{\"t\":\"你所有的 Maven 项目都应该包含你的根 POM，以及这些项目的所有版本信息。这样你会清除地了解到你们公司选择的每一个外部依赖的版本，以及所有正确的 Maven 插件。如果你要引入很多的外部依赖，它将会是这样子的：\"},\"6867\":{\"t\":\"<dependencies> <dependency> <groupId>org.third.party</groupId> <artifactId>some-artifact</artifactId> </dependency> </dependencies> \"},\"6868\":{\"t\":\"如果你想使用内部依赖，它应该被每一个单独项目的 部分来管理。否则那将会很难保持根 POM 的版本号是正常的。\"},\"6869\":{\"h\":\"Dependency Convergence\",\"a\":\"dependency-convergence\"},\"6870\":{\"t\":\"Java 最好的一方面就是拥有大量的第三方库可以做任何事。基本上每一个 API 或者工具包都有一个 Java SDK，可以很方便的用 Maven 引入。\"},\"6871\":{\"t\":\"并且这些第三方 Java 库本身依赖特定版本的其他的库。如果你引入足够多的库，你会发现有些库的版本是冲突的，像这样：\"},\"6872\":{\"t\":\"Foo library depends on Bar library v1.0 Widget library depends on Bar library v0.9 \"},\"6873\":{\"t\":\"你的项目到底要引入哪一个版本呢？\"},\"6874\":{\"t\":\"如果你的项目依赖于不同版本的同一个库，使用 Maven 依赖趋同插件构建时将会报错。然后你有两个方案来解决这个冲突：\"},\"6875\":{\"t\":\"在你的 dependencyManagement 部分明确地支出你所使用的 Bar 的版本号\"},\"6876\":{\"t\":\"在 FOO 或者 Widget 中排除对 Bar 的依赖。\"},\"6877\":{\"t\":\"这两个方案到底选哪一个要看你面对的是什么情况：如果你想跟踪一个项目的版本，那么选择排除的方案是不错的。另一方面，如果你想明确地指出它，你可以选择一个版本，尽管你在需要更新其他依赖的时候也需要更新它。\"},\"6878\":{\"h\":\"Continuous Integration\",\"a\":\"continuous-integration\"},\"6879\":{\"t\":\"很明显，你需要某种形式的持续集成服务器来帮你不断构建你的快照版本和基于 git 标签构建。\"},\"6880\":{\"t\":\"Jenkins 和 Travis-CI 就成了很自然的选择.\"},\"6881\":{\"t\":\"代码覆盖率非常有用，Cobertura 就有 一个很好的 Maven 插件a good Maven plugin 并且支持 CI。还有一些其他的支持 Java 的代码覆盖率工具，但是我只用过 Cobertura。\"},\"6882\":{\"h\":\"Maven repository\",\"a\":\"maven-repository\"},\"6883\":{\"t\":\"你需要一个地方存储你生成的 JAR 包，WAR 包或者 EAR 包，因此，你需要一个仓库。\"},\"6884\":{\"t\":\"一般选择有 Artifactory 和 Nexus 这两个。它们都可以用，但是它们都有着各自的优缺点。\"},\"6885\":{\"t\":\"你应该有自己的 Artifactory/Nexus 设备和镜像 使你的依赖基于此。这样就不会由于上游的 Maven 库宕机而使你的构建崩溃了。\"},\"6886\":{\"h\":\"Configuration management\",\"a\":\"configuration-management\"},\"6887\":{\"t\":\"现在，你的代码已经编译完了，你的仓库也跑起来了，最终你需要把你的代码从开发环境部署到生产环境了。到了这里，千万不要吝啬，因为将来很长一段时间，你会从这些自动化方式中尝到很多的甜头。\"},\"6888\":{\"t\":\"Chef，Puppet，和 Ansible 是很典型的选择。我曾经也写了一个叫 Squadron 的也可供选择，当然，我认为你应该仔细看看这个，因为它使用起来比其他的更为简单方便。\"},\"6889\":{\"t\":\"无论你选择了什么工具，不要忘了使你的部署实现自动化。\"},\"6890\":{\"h\":\"Libraries\",\"a\":\"libraries\"},\"6891\":{\"t\":\"对 Java 来说，拥有大量的扩展库也许是最大的特点了。下面这些一小部分的扩展库对大部分人来说很适用的。\"},\"6892\":{\"h\":\"Missing Features\",\"a\":\"missing-features\"},\"6893\":{\"t\":\"Java 标准库曾经作出过惊人的改进，但是现在来看，它仍然缺少一些关键的特性。\"},\"6894\":{\"h\":\"Apache Commons\",\"a\":\"apache-commons\"},\"6895\":{\"t\":\"Apache Commons 项目 拥有大量的有用的扩展库。\"},\"6896\":{\"t\":\"Commons Codec 对 Base64 和 16 进制字符串来说有很多有用的编/解码方法。不要再浪费时间重写这些东西了。\"},\"6897\":{\"t\":\"Commons Lang 有许多关于字符串的操作和创建，字符集和许多各种各样的实用的方法。\"},\"6898\":{\"t\":\"Commons IO 拥有所有你能想到的关于文件操作的方法。有 FileUtils.copyDirectory，FileUtils.writeStringToFile，IOUtils.readLines 和更多实用的方法。\"},\"6899\":{\"h\":\"Guava\",\"a\":\"guava\"},\"6900\":{\"t\":\"Guava 是谷歌优秀的对 Java 标准库缺少的特性进行补充的扩展库。虽然这很难提炼总结出我有多喜欢这个库，但是我会尽力的。\"},\"6901\":{\"t\":\"Cache 让你可以用很简单的方法，实现把网络访问，磁盘访问，缓存函数或者其他任何你想要缓存的内容，缓存到内存当中。你仅仅只需要实现 CacheBuilder 类并且告诉 Guava 怎么样构建你的缓存，一切就搞定了！\"},\"6902\":{\"t\":\"Immutable 集合。它有许多如：ImmutableMap，ImmutableList，或者甚至 ImmutableSortedMultiSet 等不可变集合可以使用，如果你喜欢用这种风格的话。\"},\"6903\":{\"t\":\"我也喜欢用 Guava 的方式来写一些可变的集合：\"},\"6904\":{\"t\":\"// Instead of final Map<String, Widget> map = new HashMap<>(); // You can use final Map<String, Widget> map = Maps.newHashMap(); \"},\"6905\":{\"t\":\"它还有一些静态类如 Lists，Maps和Sets 等。使用起来它们显得更整洁，并且可读性更强。\"},\"6906\":{\"t\":\"如果你坚持使用 Java 6 或者 7 的话，你可以使用 Collections2 这个类，它有一些像 filter 和 transform 这样的方法。能够让你没有 Java 8 的 Stream 的支持也能写出流畅的代码。\"},\"6907\":{\"t\":\"Guava 也可以做一些很简单的事情，比如 Joiner 类可以用来用分隔符把字符串拼接起来，并且可以用忽略的方式来处理打断程序的数据。\"},\"6908\":{\"h\":\"Gson\",\"a\":\"gson\"},\"6909\":{\"t\":\"谷歌的 Gson 库是一个简单快速的 JSON 解析库。可以这样用：\"},\"6910\":{\"t\":\"final Gson gson = new Gson(); final String json = gson.toJson(fooWidget); final FooWidget newFooWidget = gson.fromJson(json, FooWidget.class); \"},\"6911\":{\"t\":\"这用起来真的很简单，很愉悦。Gson 用户手册 有很多的使用示例。\"},\"6912\":{\"h\":\"Java Tuples\",\"a\":\"java-tuples\"},\"6913\":{\"t\":\"Java 令我比较烦恼的问题之一 Java 标准库中没有内置对元组的支持。幸运的是，Java tuples 项目解决了这个问题。\"},\"6914\":{\"t\":\"它使用用起来很简单，很棒：\"},\"6915\":{\"t\":\"Pair<String, Integer> func(String input) { // something... return Pair.with(stringResult, intResult); } \"},\"6916\":{\"h\":\"Javaslang\",\"a\":\"javaslang\"},\"6917\":{\"t\":\"Javaslang 是一个函数式编程库，它被设计用来弥补本应该出现在 Java 8 中但缺失的一些特性。它有这样的一些特点：\"},\"6918\":{\"t\":\"一个全新函数式集合库\"},\"6919\":{\"t\":\"紧密集成的元组功能\"},\"6920\":{\"t\":\"模式匹配\"},\"6921\":{\"t\":\"通过不可变性保证线程安全\"},\"6922\":{\"t\":\"饥汉式和懒汉式的数据类型\"},\"6923\":{\"t\":\"通过 Option 实现了 null 的安全性\"},\"6924\":{\"t\":\"通过 Try 更好的实现异常处理\"},\"6925\":{\"t\":\"有一些 Java 库依赖于原始的 Java 集合类。它们通过以面向对象和被设计为可变的方式来保证和其他的类的兼容性。而 Javaslang 的集合的设计灵感来源于 Haskell, Clojure 和 Scala，是一个全新的飞跃。它们被设计为函数式风格并且遵循不可变性的设计风格。\"},\"6926\":{\"t\":\"像下面这样的代码就可以自动实现线程安全，并且不用 try-catch 语句处理异常：\"},\"6927\":{\"t\":\"// Success/Failure containing the result/exception public static Try<User> getUser(int userId) { return Try.of(() -> DB.findUser(userId)) .recover(x -> Match.of(x) .whenType(RemoteException.class).then(e -> ...) .whenType(SQLException.class).then(e -> ...)); } // Thread-safe, reusable collections public static List<String> sayByeBye() { return List.of(\\\"bye, \\\"bye\\\", \\\"collect\\\", \\\"mania\\\") .map(String::toUpperCase) .intersperse(\\\" \\\"); } \"},\"6928\":{\"h\":\"Joda-Time\",\"a\":\"joda-time\"},\"6929\":{\"t\":\"Joda-Time 是我用过的最简单的时间处理库。简单，直接，并且很容易测试。夫复何求？\"},\"6930\":{\"t\":\"因为 Java 8 已经有了自己的新的 时间处理库， 所以如果你还没有用 Java 8，你需要这一个库足矣。\"},\"6931\":{\"h\":\"Lombok\",\"a\":\"lombok\"},\"6932\":{\"t\":\"Lombok 是一个很有意思的库。它可以让你以注解的方式减少 Java 中糟糕的样板代码。\"},\"6933\":{\"t\":\"想为你的类的变量添加 setter 和 getter 方法吗？像这样：\"},\"6934\":{\"t\":\"public class Foo { @Getter @Setter private int var; } \"},\"6935\":{\"t\":\"现在你就可以这么用了：\"},\"6936\":{\"t\":\"final Foo foo = new Foo(); foo.setVar(5); \"},\"6937\":{\"t\":\"这还有很多例子。我在之前的产品中还没有用过 Lombok，但是现在我等不急了。\"},\"6938\":{\"h\":\"Play framework\",\"a\":\"play-framework\"},\"6939\":{\"t\":\"好的替代品: Jersey 或者 Spark\"},\"6940\":{\"t\":\"在 Java 实现 RESTful web services 有两大主要阵营：JAX-RS 和其他。\"},\"6941\":{\"t\":\"JAX-RS 是传统的实现方式。你可以用像 Jersey 这样的框架，以注解的方式来实现接口及其实现的结合。这样你就可以很容易的根据接口类来开发客户端。\"},\"6942\":{\"t\":\"Play 框架 基于 JVM 的 web services 实现和其他根本框架不同：它有一个路由文件，你写的类要和路由文件中的路由信息关联起来。Play 框架其实是一个完整的 MVC 框架，但是你可以很简单地仅仅使用它的 REST web services 部分的功能。\"},\"6943\":{\"t\":\"它同时支持 Java 和 Scala。虽然对重点支持的 Scala 稍有不足，但是对 Java 的支持还是很好用的。\"},\"6944\":{\"t\":\"如果你在 Python 中用过像 Flask 这样的微框架，你对 Spark 肯定会很熟悉。它对 Java 8 的支持尤其的好。\"},\"6945\":{\"h\":\"SLF4J\",\"a\":\"slf4j\"},\"6946\":{\"t\":\"有很多 Java 日志解决方案。我最喜欢的是 SLF4J，因为它拥有非常棒的可插拔性，同时能够和很多的日志框架想结合。有没有做过同时使用 java.util.logging，JCL，和 log4j 的奇葩项目？SLF4J 就是为你而生。\"},\"6947\":{\"t\":\"这两页手册足够你可以开始入门使用 SLF4J 了。\"},\"6948\":{\"h\":\"jOOQ\",\"a\":\"jooq\"},\"6949\":{\"t\":\"我不喜欢重量级的 ORM 框架，因为我喜欢 SQL。所以我写了很多 JDBC 模板，但是很难去维护它。jOOQ 是一个更好的解决方案。\"},\"6950\":{\"t\":\"它让你在 Java 中用类型安全的方式编写 SQL：\"},\"6951\":{\"t\":\"// Typesafely execute the SQL statement directly with jOOQ Result<Record3<String, String, String>> result = create.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME) .from(BOOK) .join(AUTHOR) .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID)) .where(BOOK.PUBLISHED_IN.equal(1948)) .fetch(); \"},\"6952\":{\"t\":\"使用 jOOQ 和 DAO 的模式让你的数据库访问变得轻而易举。\"},\"6953\":{\"h\":\"Testing\",\"a\":\"testing\"},\"6954\":{\"t\":\"测试是软件的关键环节。下面这些软件包能够让你更容易地测试。\"},\"6955\":{\"h\":\"jUnit 4\",\"a\":\"junit-4\"},\"6956\":{\"t\":\"好的替代品：TestNG.\"},\"6957\":{\"t\":\"jUnit 就无需多言了。它是 Java 单元测试中的标准工具。\"},\"6958\":{\"t\":\"但是很可能你使用的 jUnit 并没有发挥它的全部潜力。jUnit 支持参数化测试，规则化测试，theories 可以随机测试特定代码，还有 assumptions，可以让你少写很多样板代码。\"},\"6959\":{\"h\":\"jMock\",\"a\":\"jmock\"},\"6960\":{\"t\":\"如果你完成了依赖注入，这是它的回报：可以 mock 出有副作用（比如和 REST 服务器交互）的代码，并且可以断言调用这段代码的行为。\"},\"6961\":{\"t\":\"jMock 是标准的 Java mock 工具。像这样使用：\"},\"6962\":{\"t\":\"public class FooWidgetTest { private Mockery context = new Mockery(); @Test public void basicTest() { final FooWidgetDependency dep = context.mock(FooWidgetDependency.class); context.checking(new Expectations() {{ oneOf(dep).call(with(any(String.class))); atLeast(0).of(dep).optionalCall(); }}); final FooWidget foo = new FooWidget(dep); Assert.assertTrue(foo.doThing()); context.assertIsSatisfied(); } } \"},\"6963\":{\"t\":\"这段代码通过 jMock 建立了一个 FooWidgetDependency，然后添加你所期望结果的条件。我们期望 dep 的 call 方法会被以一个字符串为参数的形式调用，并且会被调用 0 次或者多次。\"},\"6964\":{\"t\":\"如果你想一遍又一遍地设置相同的依赖，你应该把它放到 test fixture 中，并且把assertIsSatisfied 放在以 @After 注解的 fixture 中。\"},\"6965\":{\"h\":\"AssertJ\",\"a\":\"assertj\"},\"6966\":{\"t\":\"你曾经用 jUnit 干过这个吗？\"},\"6967\":{\"t\":\"final List<String> result = some.testMethod(); assertEquals(4, result.size()); assertTrue(result.contains(\\\"some result\\\")); assertTrue(result.contains(\\\"some other result\\\")); assertFalse(result.contains(\\\"shouldn't be here\\\")); \"},\"6968\":{\"t\":\"这是很恶心的样板代码。AssertJ 可以解决这个问题。你可以把相同的代码转换成这个样子：\"},\"6969\":{\"t\":\"assertThat(some.testMethod()).hasSize(4) .contains(\\\"some result\\\", \\\"some other result\\\") .doesNotContain(\\\"shouldn't be here\\\"); \"},\"6970\":{\"t\":\"这样的流畅接口让你的测试更具有可读性。你还想咋地？\"},\"6971\":{\"h\":\"Tools\",\"a\":\"tools\"},\"6972\":{\"h\":\"IntelliJ IDEA\",\"a\":\"intellij-idea\"},\"6973\":{\"t\":\"好的替代品: Eclipse 和 Netbeans\"},\"6974\":{\"t\":\"Java 最好的 IDE 是 IntelliJ IDEA。它有大量的牛逼的特性，它是真正的能让 Java 用来像不戴套做爱那么爽的工具。自动完成功能超棒，代码检查功能也是顶尖的，重构工具那是相当有帮助。\"},\"6975\":{\"t\":\"免费的社区版对我来说已经足够好了，但是它的旗舰版加载了更多的牛逼的特性，如数据库工具，Spring 框架的支持和对 Chronon 的支持。\"},\"6976\":{\"h\":\"Chronon\",\"a\":\"chronon\"},\"6977\":{\"t\":\"我最喜欢 GDB 7 的特性之一就是调试的时候能够按照时间跟踪回来。当你拥有了旗舰版的 IntelliJ，你可以通过安装 Chronon IntelliJ 插件实现。\"},\"6978\":{\"t\":\"你可以获取到变量的变化历史，后退，方法的历史以及更多的信息。如果你是第一次用会觉得有点怪，但是它真的能够帮你解决很复杂的 bug，诸如海森堡类的 bug。\"},\"6979\":{\"h\":\"JRebel\",\"a\":\"jrebel\"},\"6980\":{\"t\":\"好的替代品: DCEVM\"},\"6981\":{\"t\":\"持续集成往往以软件即服务为产品目标。想象一下如果你不用等待代码构建完成而能实时看到代码的变化会是怎样？\"},\"6982\":{\"t\":\"这就是 JRebel 所做的。一旦你将你的服务器和你的 JReble 以 hook 方式连接，你就可以从服务器看到实时变化。当你想快速试验的时候它能为你节省大量的时间。\"},\"6983\":{\"h\":\"The Checker Framework\",\"a\":\"the-checker-framework\"},\"6984\":{\"t\":\"Java 的类型系统很差劲。它不能够区分正常的字符串和正则表达式字符串，更不用说坏点检查了。不过 Checker Framework 可以完成这个功能并且能够实现更多的东西。\"},\"6985\":{\"t\":\"它使用像 @Nullable 这样的注解来检查类型。你甚至可以使用自定义注解来实现静态分析，甚至更强大的功能。\"},\"6986\":{\"h\":\"Code Quality\",\"a\":\"code-quality\"},\"6987\":{\"t\":\"即使遵循着最佳实践的原则，即使是最好的开发者，也都会犯错误。这有很多工具，你可以使用它们验证你的代码从而检查代码是否有问题。下面是选出的最流行的一部分工具。很多这些工具都可以和流行的 IDE 如 Eclipse 或者 IntelliJ 集成，可以让你更快地发现代码中的错误。\"},\"6988\":{\"t\":\"Checkstyle：一个静态代码分析工具，它主要着力于保证你的代码符合代码标准。检查规则在一个 XML 文件中定义，你可以把它检入你的版本控制工具，和你的代码放在一起。\"},\"6989\":{\"t\":\"FindBugs：主要集中于发现你的代码中可能导致产生 bug 或者错误的部分。虽然作为独立的进程运行，但是对流行的 IDE 和构建工具的支持也很好。\"},\"6990\":{\"t\":\"PMD：和 FindBugs 很相似，PMD 着力于发现你代码中的错误和整理的你的代码。你可以把针对你的代码的检查规则控制在 XML 文件中，和你的代码放在一块儿提交。\"},\"6991\":{\"t\":\"SonarQube：和前面所述的工具不同，它是在本地运行的，SonarQube 启动一个服务器，你把你代码提交到这个服务器来进行分析。它提供了 web 界面，你可以看到你的代码的健康状况信息，如不好的做法，潜在的 bug，测试覆盖率百分比，和你写代码的技术水平\"},\"6992\":{\"t\":\"除了在开发工程中使用这些工具，把它们用在你的构建阶段往往也是一个不错的想法。它可以和想 Maven 或者 Gradle 这样的构建工具绑定到一起，也可以和持续集成工具绑定使用。\"},\"6993\":{\"h\":\"Eclipse Memory Analyzer\",\"a\":\"eclipse-memory-analyzer\"},\"6994\":{\"t\":\"即使在 Java 中内存泄露也时有发生。幸运的是，我们有一些工具就是为此而生。Eclipse Memory Analyzer 是我用过的最好用的解决内存泄露问题的工具。它能够获取到堆栈信息让你查阅，去发现问题所在。\"},\"6995\":{\"t\":\"有几种方法可以获取到 JVM 进程的堆栈信息，但是我用 jmap 工具实现：\"},\"6996\":{\"t\":\"$ jmap -dump:live,format=b,file=heapdump.hprof -F 8152 Attaching to process ID 8152, please wait... Debugger attached successfully. Server compiler detected. JVM version is 23.25-b01 Dumping heap to heapdump.hprof ... ... snip ... Heap dump file created \"},\"6997\":{\"t\":\"然后你可以用内存分析器打开 heapdump.hprof 文件，快看看到底是怎么回事。\"},\"6998\":{\"h\":\"Resources\",\"a\":\"resources\"},\"6999\":{\"t\":\"这些资源能够帮你成为 Java 大牛。\"},\"7000\":{\"h\":\"Books\",\"a\":\"books\"},\"7001\":{\"t\":\"Effective Java\"},\"7002\":{\"t\":\"Java Concurrency in Practice\"},\"7003\":{\"t\":\"Clean Code\"},\"7004\":{\"h\":\"Podcasts\",\"a\":\"podcasts\"},\"7005\":{\"t\":\"The Java Posse (discontinued)\"},\"7006\":{\"t\":\"vJUG\"},\"7007\":{\"t\":\"Les Cast Codeurs (French)\"},\"7008\":{\"t\":\"Java Pub House\"},\"7009\":{\"t\":\"Java Off Heap\"},\"7010\":{\"t\":\"Enterprise Java Newscast\"},\"7011\":{\"h\":\"Videos\",\"a\":\"videos\"},\"7012\":{\"t\":\"Effective Java - Still Effective After All These Years\"},\"7013\":{\"t\":\"InfoQ - see especially presentations and interviews\"},\"7014\":{\"t\":\"Parleys\"},\"7015\":{\"h\":\"\"},\"7016\":{\"t\":\"docker\"},\"7017\":{\"h\":\"Me\"},\"7018\":{\"h\":\"Algorithms Structures\"},\"7019\":{\"h\":\"Develop\"},\"7020\":{\"h\":\"Design\"},\"7021\":{\"h\":\"Quality Assurance\"},\"7022\":{\"h\":\"Basic\"},\"7023\":{\"h\":\"Java\"},\"7024\":{\"h\":\"Others\"},\"7025\":{\"h\":\"Spring\"},\"7026\":{\"h\":\"Docker\"}},\"dirtCount\":0,\"index\":[[\"潜在的\",{\"1\":{\"6991\":1}}],[\"界面\",{\"1\":{\"6991\":1}}],[\"界面类\",{\"1\":{\"1124\":1}}],[\"着力于发现你代码中的错误和整理的你的代码\",{\"1\":{\"6990\":1}}],[\"诸如海森堡类的\",{\"1\":{\"6978\":1}}],[\"稍有不足\",{\"1\":{\"6943\":1}}],[\"夫复何求\",{\"1\":{\"6929\":1}}],[\"饥汉式和懒汉式的数据类型\",{\"1\":{\"6922\":1}}],[\"幸运的是\",{\"1\":{\"6913\":1,\"6994\":1}}],[\"令我比较烦恼的问题之一\",{\"1\":{\"6913\":1}}],[\"磁盘访问\",{\"1\":{\"6901\":1}}],[\"千万不要吝啬\",{\"1\":{\"6887\":1}}],[\"千万不要一开始就与具体的编程语言挂钩\",{\"1\":{\"2693\":1}}],[\"绝对值得一读\",{\"1\":{\"6845\":1}}],[\"乍一看这些工具类似乎很不错\",{\"1\":{\"6841\":1}}],[\"乍看起来没有太大问题\",{\"1\":{\"2700\":1}}],[\"谷歌的\",{\"1\":{\"6815\":1,\"6909\":1}}],[\"谷歌官方推出的json处理库\",{\"1\":{\"6458\":1}}],[\"促进了对象的不可变性\",{\"1\":{\"6814\":1}}],[\"视频\",{\"1\":{\"6793\":1}}],[\"视图的职责是展示\",{\"1\":{\"3245\":1}}],[\"视图模式\",{\"1\":{\"1668\":1}}],[\"视图\",{\"1\":{\"1570\":1}}],[\"书\",{\"1\":{\"6791\":1}}],[\"书上讲到\",{\"1\":{\"5468\":1}}],[\"库依赖于原始的\",{\"1\":{\"6925\":1}}],[\"库宕机而使你的构建崩溃了\",{\"1\":{\"6885\":1}}],[\"库本身依赖特定版本的其他的库\",{\"1\":{\"6871\":1}}],[\"库是一个简单快速的\",{\"1\":{\"6909\":1}}],[\"库是\",{\"1\":{\"6822\":1}}],[\"库\",{\"1\":{\"6767\":1}}],[\"库名与应用名称尽量一致\",{\"1\":{\"3362\":1}}],[\"仓库\",{\"1\":{\"6765\":1}}],[\"仓库内某二方库版本号从1\",{\"1\":{\"3427\":1}}],[\"虽作为最流行的编程语言之一\",{\"1\":{\"6744\":1}}],[\"虽然作为独立的进程运行\",{\"1\":{\"6989\":1}}],[\"虽然对重点支持的\",{\"1\":{\"6943\":1}}],[\"虽然这很难提炼总结出我有多喜欢这个库\",{\"1\":{\"6900\":1}}],[\"虽然\",{\"1\":{\"5670\":1}}],[\"虽然可以对两个\",{\"1\":{\"5573\":1}}],[\"虽然它们是java平台库迄今为止最常被重用的异常\",{\"1\":{\"4891\":1}}],[\"虽然它不强制要求所有的子类必须遵循这些契约\",{\"1\":{\"2098\":1}}],[\"虽然反编译后发现注解继承了annotation接口\",{\"1\":{\"4664\":1}}],[\"虽然示例代码是属于\",{\"1\":{\"3940\":1}}],[\"虽然在debug\",{\"1\":{\"3288\":1}}],[\"虽然共享该实例是线程安全的\",{\"1\":{\"3177\":1}}],[\"虽然继承有诸多作用\",{\"1\":{\"2723\":1}}],[\"虽然也违反了\",{\"1\":{\"1212\":1}}],[\"演讲者\",{\"1\":{\"6715\":1,\"6717\":1,\"6719\":1,\"6721\":1}}],[\"演示try\",{\"1\":{\"4786\":1}}],[\"演示\",{\"1\":{\"36\":1}}],[\"活跃讲师和作者\",{\"1\":{\"6713\":1}}],[\"活动反馈\",{\"1\":{\"3504\":1}}],[\"活动无法终止\",{\"1\":{\"3190\":1}}],[\"活动图是流程图的扩展\",{\"1\":{\"3455\":1}}],[\"活动图\",{\"1\":{\"2813\":1}}],[\"活动的四个状态转换关系图\",{\"1\":{\"2444\":1}}],[\"活动有四个状态\",{\"1\":{\"2443\":1}}],[\"创始人兼ceo\",{\"1\":{\"6712\":1}}],[\"创建新的\",{\"1\":{\"6109\":1}}],[\"创建新的对象比较复杂时\",{\"1\":{\"1802\":1}}],[\"创建新的对象\",{\"1\":{\"1739\":1,\"1871\":1,\"5521\":1}}],[\"创建user对象\",{\"1\":{\"5914\":1}}],[\"创建user\",{\"1\":{\"5914\":1}}],[\"创建的对象中添加整数会报错呢\",{\"1\":{\"5117\":1}}],[\"创建索引时避免有如下极端误解\",{\"1\":{\"3378\":1}}],[\"创建线程或线程池时请指定有意义的线程名称\",{\"1\":{\"3156\":1}}],[\"创建框架是一项投入重大且风险很高的工作\",{\"1\":{\"2794\":1}}],[\"创建bucke\",{\"1\":{\"2711\":1}}],[\"创建bucket\",{\"1\":{\"2711\":1}}],[\"创建活动对象\",{\"1\":{\"2456\":1}}],[\"创建环境\",{\"1\":{\"2438\":1}}],[\"创建完实例之后\",{\"1\":{\"2369\":1}}],[\"创建单例对象\",{\"1\":{\"2293\":1}}],[\"创建相关的审批人\",{\"1\":{\"1976\":1}}],[\"创建处理链\",{\"1\":{\"1946\":1}}],[\"创建子类对象\",{\"1\":{\"1903\":1}}],[\"创建增强器\",{\"1\":{\"1886\":1}}],[\"创建代理对象\",{\"1\":{\"1844\":1,\"1873\":1}}],[\"创建目标对象\",{\"1\":{\"1844\":1,\"1873\":1,\"1885\":1,\"1905\":1}}],[\"创建开销大的对象或需要安全控制的对象\",{\"1\":{\"1812\":1}}],[\"创建流对象\",{\"1\":{\"1795\":1}}],[\"创建观察者\",{\"1\":{\"1720\":1}}],[\"创建接入方\",{\"1\":{\"1704\":1}}],[\"创建游戏角色\",{\"1\":{\"1655\":1}}],[\"创建了一个\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"创建了\",{\"1\":{\"1605\":1}}],[\"创建学院\",{\"1\":{\"1541\":1}}],[\"创建那么多的对象将会耗费很多的系统资源\",{\"1\":{\"1372\":1}}],[\"创建哪些对象\",{\"1\":{\"1364\":1}}],[\"创建对象时耗时过多或耗费资源过多\",{\"1\":{\"2339\":1}}],[\"创建对象用到的主要技术点就是\",{\"1\":{\"1364\":1}}],[\"创建对象\",{\"1\":{\"1341\":1,\"1364\":2,\"5883\":1,\"6017\":1}}],[\"创建对象实例时\",{\"1\":{\"1320\":1}}],[\"创建对象的任务由多个具体子工厂中的某一个完成\",{\"1\":{\"1273\":1}}],[\"创建对应的实例\",{\"1\":{\"1315\":1}}],[\"创建抽象工厂和子工厂\",{\"1\":{\"1307\":1}}],[\"创建小米和华为的路由器\",{\"1\":{\"1305\":1}}],[\"创建小米和华为的手机\",{\"1\":{\"1303\":1}}],[\"创建伦敦口味的各种\",{\"1\":{\"1250\":1}}],[\"创建北京口味的各种\",{\"1\":{\"1250\":1}}],[\"创建不同的简单工厂类\",{\"1\":{\"1238\":1}}],[\"创建所需的产品对象\",{\"1\":{\"1184\":1}}],[\"创建各个子系统的对象\",{\"1\":{\"1122\":1}}],[\"创建各个学院下面的系\",{\"1\":{\"858\":1}}],[\"创建型单例模式\",{\"0\":{\"2256\":1}}],[\"创建型原型模式\",{\"0\":{\"1736\":1}}],[\"创建型模式\",{\"1\":{\"1170\":1,\"2600\":1,\"2604\":1}}],[\"创建型工厂模式\",{\"0\":{\"1156\":1}}],[\"创建型设计模式\",{\"0\":{\"947\":1}}],[\"创建型建造者模式\",{\"0\":{\"659\":1}}],[\"创建具体构件角色\",{\"1\":{\"894\":1}}],[\"创建\",{\"1\":{\"858\":1,\"1605\":2,\"1653\":1,\"1704\":1,\"2473\":1,\"2699\":1,\"2700\":1,\"2966\":1,\"4855\":1,\"6448\":1}}],[\"创建电灯相关的开关命令\",{\"1\":{\"783\":1}}],[\"创建命令接口\",{\"1\":{\"777\":1}}],[\"创建一个更加基础的基类\",{\"1\":{\"2124\":1}}],[\"创建一个请求\",{\"1\":{\"1976\":1}}],[\"创建一个增强器\",{\"1\":{\"1903\":1}}],[\"创建一个中介者对象\",{\"1\":{\"1605\":1}}],[\"创建一个工厂类\",{\"1\":{\"1431\":1}}],[\"创建一个\",{\"1\":{\"676\":1,\"1720\":1}}],[\"顾问\",{\"1\":{\"6700\":1}}],[\"顾客主要关心所选商品的性价比\",{\"1\":{\"2929\":1}}],[\"播客\",{\"0\":{\"6695\":1},\"1\":{\"6792\":1}}],[\"播放\",{\"1\":{\"1117\":1}}],[\"播放器\",{\"1\":{\"1116\":1,\"1133\":1,\"1134\":1}}],[\"问答平台\",{\"1\":{\"6685\":1}}],[\"问题就是\",{\"1\":{\"4862\":1}}],[\"问题等\",{\"1\":{\"3532\":1}}],[\"问题本身不需要设计模式\",{\"1\":{\"2591\":1}}],[\"问题又来了\",{\"1\":{\"2525\":1}}],[\"问题分析\",{\"0\":{\"1415\":1,\"1705\":1},\"1\":{\"2461\":1}}],[\"问题\",{\"1\":{\"908\":1,\"2100\":1,\"2306\":1,\"3520\":1}}],[\"社区\",{\"0\":{\"6683\":1}}],[\"社区开发者集体智慧的结晶\",{\"1\":{\"3520\":1}}],[\"致力于构建开发与业务分析人员之间的桥梁\",{\"1\":{\"6680\":1}}],[\"刮取\",{\"1\":{\"6661\":1}}],[\"验证\",{\"1\":{\"6647\":1}}],[\"验证码校验\",{\"1\":{\"3345\":1}}],[\"旨在简化java\",{\"1\":{\"6675\":1}}],[\"旨在提供一个高效开发环境\",{\"1\":{\"6668\":1}}],[\"旨在替换jsp\",{\"1\":{\"6622\":1}}],[\"旨在填补java\",{\"1\":{\"6417\":1}}],[\"健壮性好且适用性强\",{\"1\":{\"6612\":1}}],[\"微框架\",{\"1\":{\"6674\":1}}],[\"微服务网关鉴权\",{\"1\":{\"6603\":1}}],[\"微信信息\",{\"1\":{\"2082\":1}}],[\"微信\",{\"1\":{\"2079\":1}}],[\"微信公众号与微信用户\",{\"1\":{\"1667\":1}}],[\"认证\",{\"1\":{\"6597\":1}}],[\"认为唯一索引一律需要在应用层通过\",{\"1\":{\"3378\":1}}],[\"认为索引会消耗空间\",{\"1\":{\"3378\":1}}],[\"认为一个查询就需要建一个索引\",{\"1\":{\"3378\":1}}],[\"科学计算与分析\",{\"0\":{\"6586\":1}}],[\"国际化支持和gui控件\",{\"1\":{\"6667\":1}}],[\"国际化团队或海外部署的服务器由于字符集问题\",{\"1\":{\"3296\":1}}],[\"国人开发的一个轻量级的mvc框架\",{\"1\":{\"6585\":1,\"6677\":1}}],[\"偏向于自己使用的web框架\",{\"1\":{\"6576\":1}}],[\"偏抽象\",{\"1\":{\"2694\":1}}],[\"响应式开发库\",{\"0\":{\"6569\":1}}],[\"响应体body可放置多种数据类型\",{\"1\":{\"3224\":1}}],[\"响应体\",{\"1\":{\"3224\":2}}],[\"商业分析器\",{\"1\":{\"6565\":1,\"6568\":1}}],[\"商业版主要针对企业客户\",{\"1\":{\"6443\":1}}],[\"论坛\",{\"1\":{\"6550\":1}}],[\"论文模板\",{\"1\":{\"2637\":1}}],[\"免费的社区版对我来说已经足够好了\",{\"1\":{\"6975\":1}}],[\"免除了其它orm产品中的复杂性和开销\",{\"1\":{\"6549\":1}}],[\"免得不同服务的线程同归于尽\",{\"1\":{\"3447\":1}}],[\"广泛使用\",{\"1\":{\"6547\":1}}],[\"涵盖性能测试和基准测试工具\",{\"1\":{\"6625\":1}}],[\"涵盖了从基础的帮助函数到pgp\",{\"1\":{\"6599\":1}}],[\"涵盖了从集合到特定开发库的高性能计算相关工具\",{\"1\":{\"6429\":1}}],[\"涵盖\",{\"1\":{\"6541\":1}}],[\"异步流处理标准\",{\"1\":{\"6571\":1}}],[\"异步http和websocket客户端函数库\",{\"1\":{\"6536\":1}}],[\"异常是否耗时\",{\"0\":{\"4979\":1}}],[\"异常是一个事件\",{\"1\":{\"4708\":1}}],[\"异常表的后两个item的type为any\",{\"1\":{\"4964\":1}}],[\"异常表中包含了一个或多个异常处理者\",{\"1\":{\"4945\":1}}],[\"异常时\",{\"1\":{\"4897\":1}}],[\"异常也不例外\",{\"1\":{\"4871\":1}}],[\"异常机制的设计初衷是用于不正常的情况\",{\"1\":{\"4855\":1}}],[\"异常机制详解\",{\"0\":{\"4705\":1},\"1\":{\"5537\":1}}],[\"异常只应该被用于不正常的条件\",{\"1\":{\"4848\":1}}],[\"异常不仅仅是一个错误控制机制\",{\"1\":{\"4845\":1}}],[\"异常不就可以了吗\",{\"1\":{\"2725\":1}}],[\"异常实践\",{\"0\":{\"4841\":1}}],[\"异常代码之后的语句不再执行\",{\"1\":{\"4784\":1}}],[\"异常类越少\",{\"1\":{\"4875\":1}}],[\"异常类型可能有多种\",{\"1\":{\"4756\":1}}],[\"异常类命名使用exception结尾\",{\"1\":{\"2992\":1}}],[\"异常就被抛出\",{\"1\":{\"4736\":1}}],[\"异常关键字\",{\"0\":{\"4735\":1}}],[\"异常基础总结\",{\"0\":{\"4800\":1}}],[\"异常基础\",{\"0\":{\"4732\":1}}],[\"异常指不期而至的各种状况\",{\"1\":{\"4708\":1}}],[\"异常的illegalargumentexception\",{\"1\":{\"4902\":1}}],[\"异常的捕获\",{\"0\":{\"4761\":1}}],[\"异常的自定义\",{\"0\":{\"4758\":1}}],[\"异常的抛出\",{\"0\":{\"4752\":1}}],[\"异常的申明\",{\"0\":{\"4741\":1}}],[\"异常的层次结构\",{\"0\":{\"4707\":1}}],[\"异常的相关知识\",{\"1\":{\"4706\":1}}],[\"异常信息\",{\"1\":{\"4693\":1}}],[\"异常信息应该包括两类信息\",{\"1\":{\"3292\":1}}],[\"异常测试\",{\"0\":{\"4370\":1}}],[\"异常捕获处理的方法通常有\",{\"1\":{\"4762\":1}}],[\"异常捕获中的\",{\"1\":{\"4047\":1}}],[\"异常捕获后不要用来做流程控制\",{\"1\":{\"3266\":1}}],[\"异常流程\",{\"1\":{\"3314\":1}}],[\"异常或者重要的错误信息\",{\"1\":{\"3295\":1}}],[\"异常设计的初衷是解决程序运行中的各种意外情况\",{\"1\":{\"3266\":1}}],[\"异常处理者处理的异常的类信息\",{\"1\":{\"4949\":1}}],[\"异常处理\",{\"0\":{\"3264\":1}}],[\"异常\",{\"0\":{\"4719\":1,\"5532\":1,\"5702\":1},\"1\":{\"3215\":1,\"3388\":1,\"4693\":1,\"4713\":1,\"4877\":1,\"4902\":2,\"6752\":1}}],[\"异常退出\",{\"1\":{\"3058\":1}}],[\"异常日志\",{\"0\":{\"3249\":1},\"1\":{\"2982\":1}}],[\"斯坦佛corenlp提供了一组基础工具\",{\"1\":{\"6531\":1}}],[\"监控生产环境中应用程序的工具\",{\"1\":{\"6518\":1}}],[\"杂项\",{\"0\":{\"6508\":1}}],[\"杂乱无章\",{\"1\":{\"3015\":1}}],[\"融合了面向对象和函数式编程思想的静态类型编程语言\",{\"1\":{\"6469\":1}}],[\"受到sinatra启发的java\",{\"1\":{\"6583\":1}}],[\"受retrofit\",{\"1\":{\"6577\":1}}],[\"受smalltalk启发的集合框架\",{\"1\":{\"6433\":1}}],[\"受检查的异常必须在编译时被捕捉处理\",{\"1\":{\"5715\":1}}],[\"受检查的异常\",{\"1\":{\"5715\":1}}],[\"受检查异常和运行时异常\",{\"0\":{\"5714\":1}}],[\"受检异常\",{\"1\":{\"5534\":1}}],[\"纯java\",{\"1\":{\"6449\":1}}],[\"纯java的3d引擎\",{\"1\":{\"6423\":1}}],[\"纯豆浆不需要配料\",{\"1\":{\"2677\":1}}],[\"纯豆浆类\",{\"1\":{\"2677\":1}}],[\"游戏开发框架\",{\"1\":{\"6419\":1}}],[\"游戏开发\",{\"0\":{\"6418\":1}}],[\"游戏角色当前的攻击力\",{\"1\":{\"1653\":1}}],[\"游戏角色有攻击力和防御力\",{\"1\":{\"1638\":1}}],[\"游戏角色状态恢复问题\",{\"0\":{\"1637\":1}}],[\"轻量级工作流和业务流程管理框架\",{\"1\":{\"6681\":1}}],[\"轻量级\",{\"1\":{\"6614\":1,\"6615\":1}}],[\"轻量级开发包\",{\"1\":{\"6549\":1}}],[\"轻量级动态依赖注入框架\",{\"1\":{\"6366\":1}}],[\"轻松工作\",{\"1\":{\"3391\":2}}],[\"速度最快功能最全的csv开发库之一\",{\"1\":{\"6338\":1}}],[\"速度非常慢\",{\"1\":{\"3375\":1}}],[\"古董级工具\",{\"0\":{\"6279\":1}}],[\"古有赵高指鹿为马\",{\"1\":{\"433\":1}}],[\"懒加载的实现是\",{\"1\":{\"6258\":1}}],[\"懒汉式2\",{\"1\":{\"2304\":1,\"2310\":1}}],[\"懒汉式1\",{\"1\":{\"2298\":1}}],[\"懒汉式\",{\"0\":{\"2297\":1,\"2303\":1,\"2309\":1},\"1\":{\"2274\":1,\"2275\":1,\"2276\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1}}],[\"未分类其它资源\",{\"1\":{\"6509\":1}}],[\"未被实例化的服务提供者会被保存到缓存中去\",{\"1\":{\"6258\":1}}],[\"未来也不可能被其他实现方式替换\",{\"1\":{\"2718\":1}}],[\"号代表注释行\",{\"1\":{\"6258\":1}}],[\"厂商或者框架开发者开发具体的实现\",{\"1\":{\"6231\":1}}],[\"扫描每个插件的清单文件manifest\",{\"1\":{\"6215\":1}}],[\"启动一个服务器\",{\"1\":{\"6991\":1}}],[\"启动器等\",{\"1\":{\"6212\":1}}],[\"启用\",{\"1\":{\"49\":1}}],[\"名称\",{\"1\":{\"6212\":1}}],[\"名字\",{\"1\":{\"850\":1,\"1197\":1,\"1246\":1,\"1972\":1}}],[\"载meta\",{\"1\":{\"6201\":1}}],[\"尝试从classpath根目录下的commons\",{\"1\":{\"6201\":1}}],[\"尝试使用java\",{\"1\":{\"6201\":1}}],[\"尝试查找vm系统属性org\",{\"1\":{\"6201\":1}}],[\"尝试静下心来读书吧\",{\"1\":{\"144\":1}}],[\"咱们主要看这一句\",{\"1\":{\"6119\":1}}],[\"戳详情\",{\"1\":{\"6117\":1}}],[\"剩下就只有两个动作了\",{\"1\":{\"6091\":1}}],[\"剩下的最低位是原来的符号位\",{\"1\":{\"426\":1}}],[\"了\",{\"1\":{\"6084\":1,\"6947\":1}}],[\"了解即可\",{\"1\":{\"4621\":1}}],[\"了解每个服务大致的平均耗时\",{\"1\":{\"3447\":1}}],[\"权限认证\",{\"1\":{\"6603\":1}}],[\"权限认证框架\",{\"1\":{\"6603\":1}}],[\"权限检测\",{\"1\":{\"6067\":1}}],[\"权力第四\",{\"1\":{\"1972\":1}}],[\"权力第三\",{\"1\":{\"1972\":1}}],[\"权力第二\",{\"1\":{\"1972\":1}}],[\"权力最大\",{\"1\":{\"1972\":1}}],[\"圈圈\",{\"1\":{\"6017\":1,\"6019\":1}}],[\"倘若需要连带获取到父类的字段\",{\"1\":{\"5963\":1}}],[\"立即就进行了初始化\",{\"1\":{\"5861\":1}}],[\"乐器类\",{\"1\":{\"5775\":1}}],[\"乐观锁对冲突的解决策略有较复杂的要求\",{\"1\":{\"3175\":1}}],[\"乐观锁在获得锁的同时已经完成了更新操作\",{\"1\":{\"3175\":1}}],[\"乐观锁的重试次数不得小于\",{\"1\":{\"3173\":1}}],[\"量大\",{\"1\":{\"5745\":1}}],[\"量的提升是尽可能少踩坑\",{\"1\":{\"2983\":1}}],[\"断电\",{\"1\":{\"5713\":1}}],[\"断言预期数组和结果数组相等\",{\"1\":{\"4358\":1}}],[\"断言两个对象不是引用同一个对象\",{\"1\":{\"4356\":1}}],[\"断言两个对象引用相同的对象\",{\"1\":{\"4354\":1}}],[\"断言两个值相等\",{\"1\":{\"4344\":1}}],[\"断言一个对象为空\",{\"1\":{\"4352\":1}}],[\"断言一个对象不为空\",{\"1\":{\"4350\":1}}],[\"断言一个条件为假\",{\"1\":{\"4348\":1}}],[\"断言一个条件为真\",{\"1\":{\"4346\":1}}],[\"断言\",{\"1\":{\"4341\":1}}],[\"断言测试注解有哪些\",{\"1\":{\"4340\":1}}],[\"断言测试\",{\"0\":{\"4339\":1}}],[\"病毒\",{\"1\":{\"5713\":1}}],[\"管finally中的代码怎么样\",{\"1\":{\"5711\":1}}],[\"管理和应用数据库scheme变化的工具\",{\"1\":{\"6287\":1}}],[\"管理很多人\",{\"1\":{\"2964\":1}}],[\"管理学院员工的管理类\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"管理\",{\"1\":{\"1718\":1}}],[\"管理类\",{\"1\":{\"1650\":1,\"2963\":1}}],[\"管理者也能协调各个模块\",{\"1\":{\"2772\":1}}],[\"管理者\",{\"1\":{\"1632\":1,\"1636\":1}}],[\"管理对象集合\",{\"1\":{\"1556\":1}}],[\"管理复杂度\",{\"1\":{\"1265\":1}}],[\"管理工作由树枝构件完成\",{\"1\":{\"818\":1}}],[\"面试过程中关于\",{\"1\":{\"5673\":1}}],[\"面向开源社区提供免费服务\",{\"1\":{\"6400\":1}}],[\"面向切面编程\",{\"1\":{\"6370\":1}}],[\"面向对象编程\",{\"1\":{\"5814\":1}}],[\"面向对象编程三大特性\",{\"1\":{\"5812\":1}}],[\"面向对象设计的\",{\"1\":{\"5809\":1}}],[\"面向对象设计的最后一步是\",{\"1\":{\"1355\":1}}],[\"面向对象基础和相关类图\",{\"1\":{\"5749\":1}}],[\"面向对象思想\",{\"1\":{\"2983\":1}}],[\"面向对象\",{\"0\":{\"5748\":1},\"1\":{\"2578\":1}}],[\"面向对象软件构造\",{\"1\":{\"2127\":1}}],[\"面向对象技术的高峰会议\",{\"1\":{\"2103\":1}}],[\"面向接口编程\",{\"1\":{\"2064\":1}}],[\"历史上是一个开创新的版本\",{\"1\":{\"5672\":1}}],[\"历史日志名称为mppserver\",{\"1\":{\"3284\":1}}],[\"池某种程度上实现\",{\"1\":{\"5670\":1}}],[\"池中有多少个网站类型\",{\"1\":{\"1429\":1}}],[\"脆弱而且不安全\",{\"1\":{\"5668\":1}}],[\"技术允许使用\",{\"1\":{\"5661\":1}}],[\"始终false\",{\"1\":{\"5658\":1}}],[\"吗\",{\"0\":{\"5618\":1,\"5637\":1}}],[\"哪个会占用更多的内存\",{\"0\":{\"5614\":1}}],[\"哪个类包含\",{\"0\":{\"5602\":1}}],[\"拷贝对象和原始对象的引用类型引用不同对象\",{\"1\":{\"5465\":1}}],[\"拷贝对象和原始对象的引用类型引用同一个对象\",{\"1\":{\"5462\":1}}],[\"拥有所有你能想到的关于文件操作的方法\",{\"1\":{\"6898\":1}}],[\"拥有大量的有用的扩展库\",{\"1\":{\"6895\":1}}],[\"拥有大量的扩展库也许是最大的特点了\",{\"1\":{\"6891\":1}}],[\"拥有\",{\"1\":{\"5366\":1}}],[\"拥有执行命令的抽象方法\",{\"1\":{\"759\":1}}],[\"隐式的将加操作的结果类型强制转换为持有结果的类型\",{\"1\":{\"5607\":1}}],[\"隐式类型转换\",{\"0\":{\"5343\":1}}],[\"隐藏中间\",{\"1\":{\"3332\":1}}],[\"概览\",{\"0\":{\"5284\":1,\"5415\":1}}],[\"概念上更接近实现方\",{\"1\":{\"6248\":1}}],[\"概念上更依赖调用方\",{\"1\":{\"6243\":1}}],[\"概念解释\",{\"1\":{\"3385\":1}}],[\"概念是多线程开发中常使用到的\",{\"1\":{\"2315\":1}}],[\"装箱\",{\"1\":{\"5262\":1}}],[\"装饰模式\",{\"1\":{\"2614\":1}}],[\"装饰者代码\",{\"1\":{\"925\":1}}],[\"装饰者模式下的订单\",{\"1\":{\"928\":1}}],[\"装饰者模式解决订单项目\",{\"0\":{\"917\":1}}],[\"装饰者模式\",{\"1\":{\"916\":1,\"2744\":1}}],[\"装饰器是继承的有力补充\",{\"1\":{\"879\":1}}],[\"装饰器模式最著名的应用莫过于\",{\"1\":{\"943\":1}}],[\"装饰器模式通常在以下几种情况使用\",{\"1\":{\"939\":1}}],[\"装饰器模式主要包含以下角色\",{\"1\":{\"886\":1}}],[\"装饰器模式的应用场景\",{\"0\":{\"938\":1}}],[\"装饰器模式的结构图如图所示\",{\"1\":{\"891\":1}}],[\"装饰器模式的结构与实现\",{\"0\":{\"884\":1}}],[\"装饰器模式的定义与特点\",{\"0\":{\"874\":1}}],[\"装饰器模式会增加许多子类\",{\"1\":{\"883\":1}}],[\"装饰器模式完全遵守开闭原则\",{\"1\":{\"881\":1}}],[\"装饰器模式\",{\"1\":{\"877\":1,\"995\":1}}],[\"知名网站\",{\"0\":{\"6722\":1}}],[\"知名java博客作者\",{\"1\":{\"6711\":1}}],[\"知识体系\",{\"0\":{\"5589\":1}}],[\"知识点\",{\"0\":{\"5248\":1}}],[\"知道\",{\"1\":{\"5166\":1}}],[\"知道的越少越好\",{\"1\":{\"2157\":1}}],[\"顶级类型将返回null\",{\"1\":{\"5236\":1}}],[\"顶级类的类名和\",{\"1\":{\"3943\":1}}],[\"综述就是说java\",{\"1\":{\"5197\":1}}],[\"竟然有4个方法\",{\"1\":{\"5170\":1}}],[\"根本就没有这样的一个子类继承自父类的object类型参数的方法\",{\"1\":{\"5161\":1}}],[\"根本就不会是重写\",{\"1\":{\"5159\":1}}],[\"根据资源文件url解析properties文件\",{\"1\":{\"6219\":1}}],[\"根据第一步获取到的驱动列表来实例化具体实现类\",{\"1\":{\"6185\":1}}],[\"根据方法名和参数类型过滤指定方法返回\",{\"1\":{\"6100\":1}}],[\"根据方法名称和方法列表\",{\"1\":{\"6093\":1}}],[\"根据参数获取public的method\",{\"1\":{\"6013\":1}}],[\"根据全限定类名\",{\"1\":{\"5852\":1,\"5853\":1,\"5855\":1}}],[\"根据对象\",{\"1\":{\"5851\":1,\"5853\":1,\"5855\":1}}],[\"根据类名\",{\"1\":{\"5850\":1,\"5853\":1,\"5855\":1}}],[\"根据类型参数的上下界推断并替换所有的类型参数为原生态类型\",{\"1\":{\"5073\":1}}],[\"根据异常捕获的原则\",{\"1\":{\"5227\":1}}],[\"根据测试类型的不同\",{\"1\":{\"4460\":1}}],[\"根据用例数而定\",{\"1\":{\"4306\":1}}],[\"根据云栖社区的\",{\"1\":{\"3504\":1}}],[\"根据依赖倒置原则\",{\"1\":{\"3465\":1}}],[\"根据依赖关系图的复杂性来判断是否需要解耦重构\",{\"1\":{\"2758\":1}}],[\"根据经验表明\",{\"1\":{\"3441\":1}}],[\"根据业务架构实践\",{\"1\":{\"3409\":1}}],[\"根据墨菲定律\",{\"1\":{\"3368\":1}}],[\"根据国家法律\",{\"1\":{\"3285\":1}}],[\"根据mvc理论\",{\"1\":{\"3245\":1}}],[\"根据模式是用来完成什么工作来划分\",{\"1\":{\"2599\":1}}],[\"根据我们的业务流程处理\",{\"1\":{\"2471\":1}}],[\"根据原子和抽象编程可以提高代码的可复用性\",{\"1\":{\"2137\":1}}],[\"根据实际文本区分度决定索引长度\",{\"1\":{\"3370\":1}}],[\"根据实际情况\",{\"1\":{\"2454\":1}}],[\"根据实际情况拆分为三个接口\",{\"1\":{\"2056\":1}}],[\"根据实际业务\",{\"1\":{\"1267\":1}}],[\"根据采购金额来调用对应的\",{\"1\":{\"1961\":1}}],[\"根据得到消息\",{\"1\":{\"1601\":1}}],[\"根据网站的类型\",{\"1\":{\"1429\":1}}],[\"根据需要返回压一个网站\",{\"1\":{\"1429\":1}}],[\"根据需要实现模板中的操作\",{\"1\":{\"1029\":1}}],[\"根据这个结构来创建对象\",{\"1\":{\"1359\":1}}],[\"根据配置的函数名\",{\"1\":{\"6054\":1}}],[\"根据配置文件通过\",{\"1\":{\"1347\":1}}],[\"根据配置文件提供的信息来创建对象\",{\"1\":{\"1334\":1}}],[\"根据配置\",{\"1\":{\"1327\":1}}],[\"根据设计原则\",{\"1\":{\"1269\":1}}],[\"根据不同的状态做出不同的行为\",{\"1\":{\"1055\":1}}],[\"根据合成复用原则\",{\"1\":{\"544\":1}}],[\"根据\",{\"1\":{\"530\":1,\"1315\":1,\"1357\":1,\"1487\":1,\"2699\":1,\"2711\":1,\"5638\":1,\"5648\":1}}],[\"情感分析等\",{\"1\":{\"6532\":1}}],[\"情况\",{\"1\":{\"5128\":2}}],[\"情理可容的异常状况\",{\"1\":{\"4728\":1}}],[\"擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的\",{\"1\":{\"5085\":1}}],[\"擦除方法定义中的类型参数\",{\"1\":{\"5084\":1}}],[\"擦除类定义中的类型参数\",{\"1\":{\"5078\":1,\"5081\":1}}],[\"弄明白了类型擦除也就迎刃而解了\",{\"1\":{\"5070\":1}}],[\"疑难杂症\",{\"1\":{\"5070\":1}}],[\"讨巧的使用场景\",{\"1\":{\"5061\":1}}],[\"您的车票打八折\",{\"1\":{\"5055\":1}}],[\"您可以抽奖了\",{\"1\":{\"2454\":1}}],[\"恭喜你\",{\"1\":{\"5055\":1}}],[\"恭喜中奖了\",{\"1\":{\"2454\":1}}],[\"搞混了\",{\"1\":{\"5050\":1}}],[\"搞清楚这个类依赖了哪些外部类\",{\"1\":{\"2358\":1}}],[\"搞清楚了反射的原理\",{\"1\":{\"1365\":1}}],[\"迭代器中下一个实现类的全名\",{\"1\":{\"6258\":1}}],[\"迭代器\",{\"1\":{\"6258\":1}}],[\"迭代器返回的元素属于\",{\"1\":{\"5048\":1}}],[\"迭代器模式通常在以下几种情况使用\",{\"1\":{\"1559\":1}}],[\"迭代器模式提供了一种\",{\"1\":{\"1556\":1}}],[\"迭代器模式提供一个统一的方法遍历对象\",{\"1\":{\"1554\":1}}],[\"迭代器模式隐藏了聚合的内部结构\",{\"1\":{\"1555\":1}}],[\"迭代器模式的应用场景\",{\"0\":{\"1558\":1}}],[\"迭代器模式的注意事项和细节\",{\"0\":{\"1553\":1}}],[\"迭代器模式的结构与实现\",{\"0\":{\"1515\":1}}],[\"迭代器模式解决了不同集合\",{\"1\":{\"1552\":1}}],[\"迭代器模式应用实例\",{\"0\":{\"1526\":1}}],[\"迭代器模式主要包含以下角色\",{\"1\":{\"1517\":1}}],[\"迭代器模式是通过将聚合对象的遍历行为分离出来\",{\"1\":{\"1516\":1}}],[\"迭代器模式在生活中应用的比较广泛\",{\"1\":{\"1503\":1}}],[\"迭代器模式基本介绍\",{\"0\":{\"1502\":1}}],[\"迭代器模式\",{\"1\":{\"1044\":1,\"1504\":1,\"1506\":1,\"2624\":1}}],[\"姓名\",{\"1\":{\"5017\":1}}],[\"姓名为\",{\"1\":{\"1756\":1}}],[\"汤姆\",{\"1\":{\"5017\":1,\"5020\":1}}],[\"李兴华\",{\"1\":{\"5012\":1}}],[\"李院长\",{\"1\":{\"1976\":1}}],[\"尖括号中的内容\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"伪泛型\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"伪代码如下\",{\"1\":{\"2459\":1,\"3197\":1}}],[\"追求精确的读者可以再测一下空循环的耗时然后在对比前减掉这部分\",{\"1\":{\"4984\":1}}],[\"说出\",{\"0\":{\"5669\":1,\"5671\":1}}],[\"说用异常慢\",{\"1\":{\"4980\":1}}],[\"说明这就是在编译之前的检查\",{\"1\":{\"5121\":1}}],[\"说明泛型类型string和integer都被擦除掉了\",{\"1\":{\"5091\":1}}],[\"说明每个数据项的用途\",{\"1\":{\"3213\":1}}],[\"说明三\",{\"1\":{\"3167\":1}}],[\"说明二\",{\"1\":{\"3167\":1}}],[\"说明一下\",{\"1\":{\"5027\":1}}],[\"说明一\",{\"1\":{\"3167\":1}}],[\"说明需要提防的雷区\",{\"1\":{\"2982\":1}}],[\"说明如下\",{\"1\":{\"2665\":1}}],[\"说明\",{\"1\":{\"850\":1,\"1696\":1,\"1871\":1,\"2546\":1,\"2814\":1,\"2962\":1,\"2982\":1,\"2987\":1,\"2994\":1,\"2996\":1,\"3001\":1,\"3003\":1,\"3005\":1,\"3012\":1,\"3015\":1,\"3017\":1,\"3023\":1,\"3024\":1,\"3036\":1,\"3037\":1,\"3038\":1,\"3041\":1,\"3042\":1,\"3044\":1,\"3045\":1,\"3046\":1,\"3048\":1,\"3054\":1,\"3056\":1,\"3058\":1,\"3060\":1,\"3062\":1,\"3063\":1,\"3064\":1,\"3068\":1,\"3073\":1,\"3075\":1,\"3076\":1,\"3078\":1,\"3079\":1,\"3080\":1,\"3081\":1,\"3087\":1,\"3089\":1,\"3090\":1,\"3092\":1,\"3096\":1,\"3100\":1,\"3103\":1,\"3106\":1,\"3107\":1,\"3108\":1,\"3111\":1,\"3112\":1,\"3118\":1,\"3119\":1,\"3121\":1,\"3123\":1,\"3124\":1,\"3130\":1,\"3152\":1,\"3155\":1,\"3158\":1,\"3159\":1,\"3162\":1,\"3165\":1,\"3166\":1,\"3171\":1,\"3173\":1,\"3175\":1,\"3176\":1,\"3177\":1,\"3180\":1,\"3182\":1,\"3184\":1,\"3187\":1,\"3188\":1,\"3190\":1,\"3191\":1,\"3194\":1,\"3196\":1,\"3200\":1,\"3203\":1,\"3208\":1,\"3209\":1,\"3210\":1,\"3215\":1,\"3217\":1,\"3224\":1,\"3225\":1,\"3226\":1,\"3229\":1,\"3230\":1,\"3231\":1,\"3234\":1,\"3235\":1,\"3237\":1,\"3239\":1,\"3240\":1,\"3241\":1,\"3242\":1,\"3245\":1,\"3247\":1,\"3251\":1,\"3252\":1,\"3254\":1,\"3256\":1,\"3257\":1,\"3260\":1,\"3262\":1,\"3263\":1,\"3265\":1,\"3266\":1,\"3267\":1,\"3270\":1,\"3271\":1,\"3273\":1,\"3274\":1,\"3275\":1,\"3278\":1,\"3280\":1,\"3286\":1,\"3287\":1,\"3288\":1,\"3291\":1,\"3293\":1,\"3294\":1,\"3295\":1,\"3296\":1,\"3297\":1,\"3299\":1,\"3305\":1,\"3306\":1,\"3307\":1,\"3308\":1,\"3309\":1,\"3324\":1,\"3331\":1,\"3332\":1,\"3334\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"3345\":1,\"3346\":1,\"3351\":1,\"3352\":1,\"3353\":1,\"3355\":1,\"3356\":1,\"3359\":1,\"3360\":1,\"3365\":1,\"3368\":1,\"3369\":1,\"3370\":1,\"3371\":1,\"3373\":1,\"3374\":1,\"3375\":1,\"3376\":1,\"3380\":1,\"3383\":1,\"3385\":1,\"3388\":1,\"3389\":1,\"3391\":1,\"3392\":1,\"3394\":1,\"3395\":1,\"3396\":1,\"3398\":1,\"3426\":1,\"3427\":1,\"3428\":1,\"3429\":1,\"3431\":1,\"3432\":1,\"3433\":1,\"3436\":1,\"3438\":1,\"3441\":1,\"3443\":1,\"3444\":1,\"3445\":1,\"3450\":1,\"3452\":1,\"3453\":1,\"3454\":1,\"3455\":1,\"3456\":1,\"3463\":1,\"3464\":1,\"3465\":1,\"3466\":1,\"3467\":1,\"3469\":1,\"3470\":1,\"3471\":1,\"3472\":1,\"3473\":1,\"3555\":1,\"5858\":1}}],[\"弹栈处理\",{\"1\":{\"4955\":1}}],[\"纸牌对象的纸牌太少\",{\"1\":{\"4892\":1}}],[\"团队成员才能理解这些通用概念\",{\"1\":{\"4845\":1}}],[\"团体\",{\"1\":{\"2791\":1}}],[\"譬如\",{\"1\":{\"4820\":1,\"4821\":1}}],[\"譬如短信\",{\"1\":{\"3345\":1}}],[\"告知方法调用者\",{\"1\":{\"4804\":1}}],[\"退出程序\",{\"1\":{\"4788\":1}}],[\"隔开\",{\"1\":{\"4770\":1}}],[\"隔离变化和具体的实现\",{\"1\":{\"2778\":1}}],[\"隔离实现的易变性\",{\"1\":{\"2762\":1}}],[\"隔离开来执行\",{\"1\":{\"2362\":1}}],[\"隔离了客户与对象的生产过程\",{\"1\":{\"678\":1}}],[\"习惯上\",{\"1\":{\"4759\":1}}],[\"习惯性地声明在它们所属的代码块或者块状结构的起始位置\",{\"1\":{\"4111\":1}}],[\"栈溢出错误\",{\"1\":{\"4717\":1}}],[\"干过这个吗\",{\"1\":{\"6966\":1}}],[\"干扰了正常的指令流程\",{\"1\":{\"4708\":1}}],[\"干净清爽的形象会为你加分许多\",{\"1\":{\"148\":1}}],[\"干净清爽最重要\",{\"1\":{\"147\":1}}],[\"著作权归\",{\"1\":{\"4704\":1,\"4993\":1,\"5247\":1,\"6138\":1}}],[\"切点\",{\"1\":{\"4693\":2}}],[\"切实提升系统稳定性\",{\"1\":{\"2983\":1}}],[\"区别2\",{\"1\":{\"5683\":1}}],[\"区别1\",{\"1\":{\"5682\":1}}],[\"区别于注解的继承\",{\"1\":{\"4665\":1}}],[\"区分度最高的在最左边\",{\"1\":{\"3376\":1}}],[\"区分度会高达90\",{\"1\":{\"3370\":1}}],[\"拆箱\",{\"1\":{\"5262\":1}}],[\"拆箱操作时候的警告\",{\"1\":{\"4532\":1}}],[\"拆分为独立的几个接口\",{\"1\":{\"2038\":1,\"2055\":1}}],[\"抑制没被使用过的代码的警告\",{\"1\":{\"4583\":1}}],[\"抑制没有权限访问的域的警告\",{\"1\":{\"4580\":1}}],[\"抑制没有进行类型检查操作的警告\",{\"1\":{\"4577\":1}}],[\"抑制子类没有按最优方法访问内部类的警告\",{\"1\":{\"4574\":1}}],[\"抑制不正确的静态访问方式警告\",{\"1\":{\"4571\":1}}],[\"抑制与使用不建议或禁止参照相关的警告\",{\"1\":{\"4565\":1}}],[\"抑制与隐藏变数的区域变数相关的警告\",{\"1\":{\"4550\":1}}],[\"抑制finally模块没有返回的警告\",{\"1\":{\"4547\":1}}],[\"抑制确在switch中缺失breaks的警告\",{\"1\":{\"4544\":1}}],[\"抑制过期方法警告\",{\"1\":{\"4541\":1}}],[\"抑制启用注释的警告\",{\"1\":{\"4538\":1}}],[\"抑制映射相关的警告\",{\"1\":{\"4535\":1}}],[\"抑制装箱\",{\"1\":{\"4532\":1}}],[\"抑制所有警告\",{\"1\":{\"4529\":1}}],[\"废弃\",{\"1\":{\"4520\":1}}],[\"忽略第一个检查权限\",{\"1\":{\"6091\":1}}],[\"忽略符号位\",{\"1\":{\"5741\":1}}],[\"忽略在serializable类中没有声明serialversionuid变量\",{\"1\":{\"4568\":1}}],[\"忽略对null的操作\",{\"1\":{\"4559\":1}}],[\"忽略非nls格式的字符\",{\"1\":{\"4556\":1}}],[\"忽略没有完整的switch语句\",{\"1\":{\"4553\":1}}],[\"忽略告警\",{\"1\":{\"4507\":1}}],[\"忽略参数校验可能导致\",{\"1\":{\"3334\":1}}],[\"套件运行器\",{\"1\":{\"4487\":1}}],[\"套件测试\",{\"0\":{\"4409\":1},\"1\":{\"4410\":1}}],[\"几\",{\"1\":{\"4487\":1}}],[\"几种常见的代理模式介绍\",{\"0\":{\"1908\":1}}],[\"东西\",{\"1\":{\"4481\":1}}],[\"侧重于用于提供数据的假对象\",{\"1\":{\"4469\":1}}],[\"侧边栏\",{\"1\":{\"18\":1,\"131\":1}}],[\"粒度\",{\"1\":{\"4448\":1}}],[\"粒度越小\",{\"1\":{\"2137\":1}}],[\"值得关注的java技术站点\",{\"1\":{\"6723\":1}}],[\"值必须是相同的\",{\"1\":{\"5640\":1}}],[\"值的规定只是说如果两个对象相等\",{\"1\":{\"5636\":1}}],[\"值的全局变量\",{\"1\":{\"2375\":1}}],[\"值赋值给\",{\"0\":{\"5610\":1},\"1\":{\"5611\":1}}],[\"值也不可变\",{\"1\":{\"5290\":1}}],[\"值经常被使用\",{\"1\":{\"5290\":1}}],[\"值\",{\"1\":{\"5289\":1,\"5636\":2,\"5648\":1}}],[\"值类型可能是int\",{\"1\":{\"4344\":1}}],[\"暂不执行该方法\",{\"1\":{\"4336\":1}}],[\"官网api\",{\"1\":{\"6667\":1}}],[\"官网兼容junit框架\",{\"1\":{\"6640\":1}}],[\"官网github\",{\"1\":{\"6505\":1,\"6506\":1,\"6681\":1}}],[\"官网repository\",{\"1\":{\"6400\":1}}],[\"官网\",{\"1\":{\"6281\":1,\"6282\":1,\"6283\":1,\"6284\":1,\"6285\":1,\"6286\":1,\"6287\":1,\"6290\":1,\"6291\":1,\"6292\":1,\"6293\":1,\"6296\":1,\"6297\":1,\"6298\":1,\"6299\":1,\"6302\":1,\"6303\":1,\"6306\":1,\"6307\":1,\"6308\":1,\"6309\":1,\"6310\":1,\"6311\":1,\"6314\":1,\"6315\":1,\"6318\":1,\"6319\":1,\"6322\":1,\"6323\":1,\"6324\":1,\"6325\":1,\"6327\":1,\"6328\":1,\"6329\":1,\"6330\":1,\"6331\":1,\"6332\":1,\"6333\":1,\"6334\":1,\"6335\":1,\"6338\":1,\"6341\":1,\"6342\":1,\"6343\":1,\"6344\":1,\"6345\":1,\"6346\":1,\"6347\":1,\"6348\":1,\"6349\":1,\"6350\":1,\"6352\":1,\"6353\":1,\"6354\":1,\"6355\":1,\"6358\":1,\"6359\":1,\"6360\":1,\"6362\":1,\"6363\":1,\"6364\":1,\"6365\":1,\"6366\":1,\"6369\":1,\"6370\":1,\"6371\":1,\"6372\":1,\"6373\":1,\"6374\":1,\"6375\":1,\"6376\":1,\"6377\":1,\"6378\":1,\"6379\":1,\"6382\":1,\"6383\":1,\"6384\":1,\"6385\":1,\"6386\":1,\"6387\":1,\"6388\":1,\"6389\":1,\"6392\":1,\"6393\":1,\"6394\":1,\"6395\":1,\"6396\":1,\"6399\":1,\"6401\":1,\"6402\":1,\"6403\":1,\"6404\":1,\"6405\":1,\"6408\":1,\"6409\":1,\"6410\":1,\"6413\":1,\"6414\":1,\"6415\":1,\"6416\":1,\"6417\":1,\"6420\":1,\"6421\":1,\"6422\":1,\"6423\":1,\"6426\":1,\"6427\":1,\"6430\":1,\"6431\":1,\"6432\":1,\"6433\":1,\"6434\":1,\"6435\":1,\"6436\":1,\"6437\":1,\"6438\":1,\"6442\":1,\"6443\":1,\"6444\":1,\"6445\":1,\"6446\":1,\"6449\":1,\"6450\":1,\"6451\":1,\"6452\":1,\"6453\":1,\"6454\":1,\"6457\":1,\"6458\":1,\"6459\":1,\"6460\":1,\"6461\":1,\"6462\":1,\"6465\":1,\"6466\":1,\"6469\":1,\"6470\":1,\"6471\":1,\"6472\":1,\"6473\":1,\"6474\":1,\"6477\":1,\"6478\":1,\"6479\":1,\"6480\":1,\"6481\":1,\"6482\":1,\"6485\":1,\"6486\":1,\"6487\":1,\"6488\":1,\"6489\":1,\"6490\":1,\"6491\":1,\"6492\":1,\"6493\":1,\"6496\":1,\"6497\":1,\"6498\":1,\"6499\":1,\"6500\":1,\"6501\":1,\"6502\":1,\"6503\":1,\"6504\":1,\"6507\":1,\"6510\":1,\"6511\":1,\"6512\":1,\"6513\":1,\"6514\":1,\"6515\":1,\"6516\":1,\"6519\":1,\"6520\":1,\"6521\":1,\"6522\":1,\"6523\":1,\"6524\":1,\"6527\":1,\"6530\":1,\"6531\":1,\"6532\":1,\"6533\":1,\"6536\":1,\"6537\":1,\"6538\":1,\"6539\":1,\"6540\":1,\"6541\":1,\"6542\":1,\"6545\":1,\"6546\":1,\"6547\":1,\"6548\":1,\"6549\":1,\"6550\":1,\"6551\":1,\"6552\":1,\"6555\":1,\"6556\":1,\"6557\":1,\"6558\":1,\"6559\":1,\"6560\":1,\"6563\":1,\"6564\":1,\"6565\":1,\"6566\":1,\"6567\":1,\"6568\":1,\"6571\":1,\"6572\":1,\"6573\":1,\"6576\":1,\"6577\":1,\"6578\":1,\"6579\":1,\"6580\":1,\"6581\":1,\"6582\":1,\"6583\":1,\"6584\":1,\"6585\":1,\"6588\":1,\"6589\":1,\"6590\":1,\"6593\":1,\"6594\":1,\"6595\":1,\"6598\":1,\"6599\":1,\"6600\":1,\"6601\":1,\"6602\":1,\"6603\":1,\"6606\":1,\"6607\":1,\"6608\":1,\"6609\":1,\"6612\":1,\"6613\":1,\"6614\":1,\"6615\":1,\"6616\":1,\"6619\":1,\"6620\":1,\"6621\":1,\"6622\":1,\"6623\":1,\"6626\":1,\"6627\":1,\"6628\":1,\"6629\":1,\"6630\":1,\"6631\":1,\"6632\":1,\"6633\":1,\"6634\":1,\"6635\":1,\"6636\":1,\"6637\":1,\"6638\":1,\"6639\":1,\"6641\":1,\"6642\":1,\"6643\":1,\"6644\":1,\"6647\":1,\"6648\":1,\"6649\":1,\"6650\":1,\"6651\":1,\"6652\":1,\"6653\":1,\"6654\":1,\"6655\":1,\"6656\":1,\"6659\":1,\"6660\":1,\"6661\":1,\"6665\":1,\"6666\":1,\"6668\":1,\"6669\":1,\"6670\":1,\"6671\":1,\"6672\":1,\"6673\":1,\"6674\":1,\"6675\":1,\"6676\":1,\"6677\":1,\"6680\":1,\"6684\":1,\"6685\":1,\"6686\":1,\"6697\":1,\"6698\":1,\"6726\":1,\"6727\":1,\"6732\":1,\"6733\":1,\"6735\":1,\"6737\":1,\"6742\":1}}],[\"官网地址\",{\"1\":{\"4288\":1}}],[\"官方文档\",{\"1\":{\"5198\":1}}],[\"官方github\",{\"1\":{\"4290\":1}}],[\"官方入门文档\",{\"1\":{\"4289\":1}}],[\"官方资料\",{\"0\":{\"4286\":1}}],[\"官方给出的解释\",{\"1\":{\"3162\":1}}],[\"额外的\",{\"1\":{\"4258\":1}}],[\"摘要片段\",{\"0\":{\"4252\":1},\"1\":{\"4253\":1,\"4267\":1}}],[\"限定使用类\",{\"0\":{\"4234\":1}}],[\"典型的例子是\",{\"1\":{\"4906\":1}}],[\"典型的响应是打印日志\",{\"1\":{\"4229\":1}}],[\"典型的解耦框架\",{\"1\":{\"1222\":1}}],[\"近乎\",{\"1\":{\"4195\":1}}],[\"骆驼峰形式\",{\"0\":{\"4194\":1}}],[\"匹配到一个方法\",{\"1\":{\"6103\":1}}],[\"匹配\",{\"1\":{\"4162\":1}}],[\"混淆\",{\"1\":{\"4159\":1}}],[\"混乱\",{\"1\":{\"2759\":1}}],[\"永久代以及元空间是实际的存放位置\",{\"1\":{\"5315\":1}}],[\"永久代\",{\"1\":{\"5314\":1}}],[\"永久不用\",{\"1\":{\"3217\":1}}],[\"永远false\",{\"1\":{\"5658\":1}}],[\"永远与代码同步\",{\"1\":{\"4442\":1}}],[\"永远不要使用小写\",{\"1\":{\"4159\":1}}],[\"拒绝使用\",{\"0\":{\"4116\":1}}],[\"垂直空格\",{\"0\":{\"4060\":1}}],[\"紧密集成的元组功能\",{\"1\":{\"6919\":1}}],[\"紧接着写单元测试\",{\"1\":{\"4447\":1}}],[\"紧随着它之前的内容\",{\"1\":{\"4051\":1}}],[\"紧耦合\",{\"1\":{\"2174\":2}}],[\"逗号\",{\"1\":{\"4051\":1}}],[\"逗号后才是换行处\",{\"1\":{\"3033\":1}}],[\"赋值为\",{\"1\":{\"5194\":1}}],[\"赋值运算符时\",{\"1\":{\"4048\":1}}],[\"赋值点类似于人体的穴位\",{\"1\":{\"3200\":1}}],[\"倾向于在\",{\"1\":{\"4041\":1}}],[\"码位都算作一个字符\",{\"1\":{\"4029\":1}}],[\"码位\",{\"1\":{\"4028\":1}}],[\"码出高效\",{\"1\":{\"2983\":2,\"3048\":1}}],[\"码出质量\",{\"1\":{\"2983\":2}}],[\"块中捕获多个异常\",{\"1\":{\"5670\":1}}],[\"块中是否有发生异常\",{\"1\":{\"5662\":1}}],[\"块中清理资源或者使用\",{\"0\":{\"4858\":1}}],[\"块一定会被执行\",{\"1\":{\"5662\":1}}],[\"块处理所有\",{\"1\":{\"4902\":1}}],[\"块添加到列表的末尾\",{\"1\":{\"4901\":1}}],[\"块\",{\"1\":{\"4900\":1}}],[\"块会被执行\",{\"1\":{\"4900\":1}}],[\"块标签\",{\"0\":{\"4250\":1},\"1\":{\"4251\":1,\"4267\":1}}],[\"块缩进\",{\"0\":{\"4023\":1}}],[\"块状结构\",{\"1\":{\"4003\":1}}],[\"符\",{\"1\":{\"4076\":1,\"4077\":1}}],[\"符号或者类型转换的闭括号\",{\"1\":{\"4083\":1}}],[\"符号\",{\"1\":{\"4046\":1,\"4047\":1,\"5054\":1}}],[\"符号之前\",{\"1\":{\"3991\":1}}],[\"符号的\",{\"1\":{\"3991\":1}}],[\"符合预期\",{\"1\":{\"5197\":1}}],[\"符合预期逻辑\",{\"1\":{\"5197\":1}}],[\"符合自然逻辑的操作顺序如下\",{\"1\":{\"3477\":1}}],[\"符合表达习惯\",{\"1\":{\"3353\":1}}],[\"符合英文表达习惯\",{\"1\":{\"3227\":1}}],[\"符合单一职责原则\",{\"1\":{\"2938\":1}}],[\"符合类的单一职责原则\",{\"1\":{\"1937\":1}}],[\"符合依赖倒置原则\",{\"1\":{\"1671\":1}}],[\"符合迪米特原则\",{\"1\":{\"1608\":1}}],[\"符合迪米特法则\",{\"1\":{\"1572\":1}}],[\"符合\",{\"1\":{\"725\":1,\"2477\":1}}],[\"符合合成复用原则\",{\"1\":{\"593\":1}}],[\"符合开闭原则\",{\"1\":{\"592\":1,\"2644\":1}}],[\"顺序图\",{\"1\":{\"5811\":1}}],[\"顺序至少有一个不同\",{\"1\":{\"5412\":1}}],[\"顺序和间隔\",{\"0\":{\"3986\":1}}],[\"顺序\",{\"1\":{\"3971\":1}}],[\"报错\",{\"1\":{\"3969\":1,\"5888\":1}}],[\"μs\",{\"1\":{\"3959\":1,\"3961\":1}}],[\"∞\",{\"1\":{\"3954\":1}}],[\"者构造方法\",{\"1\":{\"3936\":1}}],[\"嵌套类\",{\"1\":{\"3936\":1}}],[\"嵌入其中web里面的html代码会被执行\",{\"1\":{\"3342\":1}}],[\"术语说明\",{\"0\":{\"3933\":1},\"1\":{\"4003\":1,\"4036\":1,\"4092\":1,\"4119\":1}}],[\"然而\",{\"1\":{\"3932\":1,\"3998\":1,\"4254\":1,\"6860\":1}}],[\"然后你可以用内存分析器打开\",{\"1\":{\"6997\":1}}],[\"然后你有两个方案来解决这个冲突\",{\"1\":{\"6874\":1}}],[\"然后添加你所期望结果的条件\",{\"1\":{\"6963\":1}}],[\"然后保存\",{\"1\":{\"6258\":1}}],[\"然后从文件中解析出key=factoryclass类名称的所有value值\",{\"1\":{\"6219\":1}}],[\"然后是调用driversiterator\",{\"1\":{\"6192\":1}}],[\"然后新建接口全限定名的文件\",{\"1\":{\"6154\":1}}],[\"然后参数类型匹配\",{\"1\":{\"6102\":1}}],[\"然后基于此我们如何通过反射获取class类以及类中的成员变量\",{\"1\":{\"5822\":1}}],[\"然后在循环中才能找到我们需要的实现\",{\"1\":{\"6266\":1}}],[\"然后在执行加法操作\",{\"1\":{\"5607\":1}}],[\"然后在进行类型擦除\",{\"1\":{\"5118\":1}}],[\"然后存储回内存\",{\"1\":{\"5605\":1}}],[\"然后组成一个\",{\"1\":{\"5446\":1}}],[\"然后返回实例对象\",{\"1\":{\"6261\":1}}],[\"然后返回这个对象引用\",{\"1\":{\"5310\":1}}],[\"然后返回放弃前offset行\",{\"1\":{\"3374\":1}}],[\"然后交给虚拟器去区别\",{\"1\":{\"5180\":1}}],[\"然后交由具体实现类自定义创建流程\",{\"1\":{\"732\":1}}],[\"然后我们想要一个子类继承它\",{\"1\":{\"5150\":1}}],[\"然后我们使用javap来分析这段代码\",{\"1\":{\"4942\":1}}],[\"然后才可以用泛型t作为方法的返回值\",{\"1\":{\"5027\":1}}],[\"然后才能调用\",{\"1\":{\"2369\":1}}],[\"然后把不同的异常抛到更高层\",{\"1\":{\"4812\":1}}],[\"然后把相同的异常重抛到更高层\",{\"1\":{\"4811\":1}}],[\"然后绕过异常发生的地方继续执行\",{\"1\":{\"4809\":1}}],[\"然后将解析properties文件\",{\"1\":{\"6218\":1}}],[\"然后将异常移交给catch语句块来处理\",{\"1\":{\"4802\":1}}],[\"然后将aqs子类作为同步组件的内部类\",{\"1\":{\"3544\":1}}],[\"然后禁止这么做\",{\"1\":{\"4239\":1}}],[\"然后只将以下内容的第一个字符转换为大写\",{\"1\":{\"4200\":1}}],[\"然后明确两两状态之间是否存在直接转换关系\",{\"1\":{\"3452\":1}}],[\"然后进行append操作\",{\"1\":{\"3073\":1}}],[\"然后用类来表示这些概念并定义其关系\",{\"1\":{\"2792\":1}}],[\"然后看实现类中有哪些方法\",{\"1\":{\"2712\":1}}],[\"然后使用\",{\"1\":{\"2416\":1}}],[\"然后根据不同需要分别创建它们\",{\"1\":{\"2609\":1}}],[\"然后根据\",{\"1\":{\"2144\":1,\"2149\":1}}],[\"然后根据得到\",{\"1\":{\"1489\":1}}],[\"然后和\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"然后缓存\",{\"1\":{\"1912\":1}}],[\"然后放进这个雏形\",{\"1\":{\"1896\":1}}],[\"然后给雏形找个父亲\",{\"1\":{\"1895\":1}}],[\"然后通过进行参数类型比较\",{\"1\":{\"6073\":1}}],[\"然后通过调用相同的方法来调用目标对象的方法\",{\"1\":{\"1838\":1}}],[\"然后通过putint方法写入一个1\",{\"1\":{\"467\":1}}],[\"然后调用它\",{\"1\":{\"6809\":1}}],[\"然后调用\",{\"1\":{\"6061\":1}}],[\"然后调用printdepartment\",{\"1\":{\"1539\":1}}],[\"然后调用解释器的解释方法\",{\"1\":{\"1472\":1}}],[\"然后传递给\",{\"1\":{\"1489\":1}}],[\"然后对该对象进行缓存\",{\"1\":{\"1446\":1}}],[\"然后\",{\"1\":{\"1357\":1,\"1368\":1,\"2738\":1,\"2962\":1}}],[\"然后再进行获取连接等的操作\",{\"1\":{\"6164\":1}}],[\"然后再子类中重写参数类型为date的那两个方法\",{\"1\":{\"5165\":1}}],[\"然后再手动地覆盖各种执行路径\",{\"1\":{\"4443\":1}}],[\"然后再对齐的例子\",{\"1\":{\"4094\":1}}],[\"然后再关联\",{\"1\":{\"3374\":1}}],[\"然后再使用\",{\"1\":{\"2403\":1}}],[\"然后再交给要买计算机的采购员\",{\"1\":{\"661\":1}}],[\"然后再运行上面的程序\",{\"1\":{\"439\":1}}],[\"风格的\",{\"1\":{\"4163\":1}}],[\"风格中\",{\"1\":{\"4163\":1}}],[\"风格\",{\"0\":{\"4008\":1},\"1\":{\"3931\":1,\"3940\":1,\"4009\":1,\"4019\":1,\"4024\":1,\"6748\":1}}],[\"风扇\",{\"1\":{\"768\":1}}],[\"列式数据库\",{\"1\":{\"6392\":1}}],[\"列限制\",{\"0\":{\"4027\":1},\"1\":{\"3980\":1,\"3985\":1}}],[\"列不存在\",{\"1\":{\"3905\":1}}],[\"列名\",{\"1\":{\"3370\":1,\"3380\":2}}],[\"蚂蚁森林浇水数或每天抽奖数\",{\"1\":{\"3745\":1}}],[\"账户余额不足\",{\"1\":{\"3736\":1}}],[\"账号被冻结\",{\"1\":{\"3655\":1}}],[\"金额超出限制\",{\"1\":{\"3694\":1}}],[\"金卡用户\",{\"1\":{\"652\":1}}],[\"缺失的特性\",{\"1\":{\"6768\":1}}],[\"缺少时间戳参数\",{\"1\":{\"3682\":1}}],[\"缺点是违反了设计模式的\",{\"1\":{\"2147\":1}}],[\"缺点是依赖性太强\",{\"1\":{\"1203\":1}}],[\"缺点\",{\"1\":{\"1212\":1,\"1806\":1,\"1847\":1,\"2289\":1}}],[\"签名错误\",{\"1\":{\"3667\":1}}],[\"邮箱格式校验失败\",{\"1\":{\"3608\":1}}],[\"邮件提醒服务失败\",{\"1\":{\"3927\":1}}],[\"邮件校验码输入错误\",{\"1\":{\"3588\":1}}],[\"邮件\",{\"1\":{\"3345\":1,\"6656\":1}}],[\"邮件消息\",{\"1\":{\"655\":1}}],[\"地域黑名单\",{\"1\":{\"3661\":1}}],[\"地址不在服务范围\",{\"1\":{\"3690\":1}}],[\"地址\",{\"1\":{\"3657\":1}}],[\"地址格式校验失败\",{\"1\":{\"3606\":1}}],[\"地球每天的自转是有些不规则的\",{\"1\":{\"3548\":1}}],[\"军官证编号校验非法\",{\"1\":{\"3600\":1}}],[\"护照编号校验非法\",{\"1\":{\"3598\":1}}],[\"短信提醒服务失败\",{\"1\":{\"3923\":1}}],[\"短信校验码输入错误\",{\"1\":{\"3586\":1}}],[\"短信等等\",{\"1\":{\"2079\":1}}],[\"校验码输入错误\",{\"1\":{\"3584\":1}}],[\"校验逻辑容易出现漏洞\",{\"1\":{\"3175\":1}}],[\"源代码生成器集合\",{\"1\":{\"6371\":1}}],[\"源代码路径\",{\"1\":{\"6213\":1}}],[\"源代码通过编译器编译为字节码\",{\"1\":{\"5835\":1}}],[\"源文件保留\",{\"1\":{\"4594\":1}}],[\"源文件按以下\",{\"1\":{\"3971\":1}}],[\"源文件结构\",{\"0\":{\"3970\":1},\"1\":{\"4065\":1}}],[\"源文件使用\",{\"1\":{\"3945\":1}}],[\"源文件的名称包含了区分大小写的\",{\"1\":{\"3943\":1}}],[\"源文件准则\",{\"0\":{\"3941\":1}}],[\"源文件当且仅当遵守本规范时\",{\"1\":{\"3931\":1}}],[\"源于java\",{\"1\":{\"3547\":1}}],[\"源码实现\",{\"0\":{\"6175\":1}}],[\"源码在哪里\",{\"1\":{\"3439\":1}}],[\"源码编译时会跳过此目录\",{\"1\":{\"3308\":1}}],[\"源码中建造者模式角色分析\",{\"1\":{\"717\":1}}],[\"源码分析的类图\",{\"1\":{\"630\":1}}],[\"魔法值的示例代码\",{\"1\":{\"3532\":1}}],[\"魔鬼细节\",{\"1\":{\"2702\":1}}],[\"黄山版\",{\"1\":{\"3530\":1}}],[\"黄豆和配料放到豆浆机去打碎\",{\"1\":{\"2677\":1}}],[\"黄豆和配料开始浸泡\",{\"1\":{\"2677\":1}}],[\"嵩山版\",{\"1\":{\"3526\":1}}],[\"闰月问题\",{\"1\":{\"3524\":1}}],[\"闰年的\",{\"1\":{\"3086\":1}}],[\"阻塞等待锁\",{\"1\":{\"3524\":1}}],[\"阻碍同事阅读你代码的有力武器之一\",{\"1\":{\"433\":1}}],[\"泰山版\",{\"1\":{\"3522\":1}}],[\"泰国插座用的是两孔的\",{\"1\":{\"509\":1}}],[\"卫语句示例\",{\"1\":{\"3520\":1}}],[\"处中断一行代码\",{\"1\":{\"4041\":1}}],[\"处\",{\"1\":{\"3520\":1,\"3524\":1,\"3532\":2}}],[\"处理对象持久化的api\",{\"1\":{\"6544\":1}}],[\"处理类似分词等常见任务的工具\",{\"1\":{\"6530\":1}}],[\"处理opendocument格式\",{\"1\":{\"6410\":1}}],[\"处理office文档的开发库\",{\"1\":{\"6407\":1}}],[\"处理时间和日期的开发库\",{\"1\":{\"6357\":1}}],[\"处理异常的小例子\",{\"1\":{\"4937\":1}}],[\"处理设置注解上的参数\",{\"1\":{\"4693\":1}}],[\"处理完请求后执行\",{\"1\":{\"4693\":1}}],[\"处理器不做任何操作\",{\"1\":{\"3541\":1}}],[\"处理不当容易造成系统压力或数据异常\",{\"1\":{\"3175\":1}}],[\"处理图片\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"处理请求\",{\"1\":{\"2438\":1}}],[\"处理请求的方法\",{\"1\":{\"1953\":1}}],[\"处理请求的流程回顾\",{\"1\":{\"569\":1}}],[\"处理人构成环形\",{\"1\":{\"1976\":1}}],[\"处理\",{\"1\":{\"1972\":4,\"2025\":1}}],[\"处理是子类完成\",{\"1\":{\"1972\":1}}],[\"处理审批请求的方法\",{\"1\":{\"1972\":1}}],[\"处理程序根据异常的类型决定自己是否处理该异常\",{\"1\":{\"1928\":1}}],[\"处理闹钟发出的消息\",{\"1\":{\"1601\":1}}],[\"处理相加\",{\"1\":{\"1487\":1}}],[\"鉴于手册是\",{\"1\":{\"3520\":1}}],[\"纪念版\",{\"1\":{\"3510\":1}}],[\"排版\",{\"1\":{\"3504\":1}}],[\"排队和对银行工作人员进行评分的业务对每个客户是一样的\",{\"1\":{\"2636\":1}}],[\"排队\",{\"1\":{\"2636\":1}}],[\"试读版本首次对外发布\",{\"1\":{\"3484\":1}}],[\"试想如果没有限速\",{\"1\":{\"2983\":1}}],[\"附\",{\"0\":{\"3478\":1,\"3533\":1,\"3552\":1}}],[\"附件等内容也各不相同\",{\"1\":{\"662\":1}}],[\"输入验证码\",{\"1\":{\"3477\":1}}],[\"输入密码\",{\"1\":{\"3477\":1}}],[\"输入用户名\",{\"1\":{\"3477\":1}}],[\"输入框的按钮都需要考虑tab键聚焦\",{\"1\":{\"3477\":1}}],[\"输出路径\",{\"1\":{\"6213\":1}}],[\"输出结果\",{\"1\":{\"5854\":1,\"5915\":1,\"5941\":1,\"5962\":1,\"5964\":1,\"6014\":1,\"6018\":1}}],[\"输出结果需要人工检查的测试不是一个好的单元测试\",{\"1\":{\"3303\":1}}],[\"输出学院员工的信息\",{\"1\":{\"2194\":1}}],[\"输出学院的员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"输出各个学院的系\",{\"1\":{\"1539\":1}}],[\"输出类\",{\"1\":{\"1538\":1}}],[\"输出被装饰者的信息\",{\"1\":{\"926\":1}}],[\"输出流程\",{\"1\":{\"713\":1}}],[\"输出的电压为=\",{\"1\":{\"540\":1}}],[\"输出\",{\"1\":{\"520\":1,\"540\":1,\"1539\":1,\"2090\":1,\"4615\":1,\"5062\":1}}],[\"登录认证\",{\"1\":{\"6603\":1}}],[\"登录场景中\",{\"1\":{\"3477\":1}}],[\"登录代码仓库即可\",{\"1\":{\"3217\":1}}],[\"准确\",{\"1\":{\"6502\":1}}],[\"准确地表达系统难点需要具备如下能力\",{\"1\":{\"3472\":1}}],[\"准备原材料\",{\"1\":{\"1197\":3,\"1246\":5}}],[\"准备创建房子的指挥者\",{\"1\":{\"713\":1}}],[\"识别和表达完全是两回事\",{\"1\":{\"3472\":1}}],[\"世间众多设计模式其实就是一种设计模式即隔离变化点的模式\",{\"1\":{\"3471\":1}}],[\"世上只有一个我\",{\"1\":{\"963\":1}}],[\"理想的散列函数应当具有均匀性\",{\"1\":{\"5446\":1}}],[\"理\",{\"1\":{\"3532\":1}}],[\"理顺逻辑\",{\"1\":{\"3470\":1}}],[\"理解和修改\",{\"1\":{\"5754\":1}}],[\"理解类型擦除对于用好泛型是很有帮助的\",{\"1\":{\"5070\":1}}],[\"理解反而费脑筋\",{\"1\":{\"3214\":1}}],[\"理解成本非常高\",{\"1\":{\"3196\":1}}],[\"理解不了\",{\"1\":{\"2745\":1}}],[\"理解这条原则的关键\",{\"1\":{\"2694\":1}}],[\"理解责任链模式应当理解其模式\",{\"1\":{\"1947\":1}}],[\"摒弃传统的审批流程\",{\"1\":{\"3469\":1}}],[\"极致扩展性的标志\",{\"1\":{\"3471\":1}}],[\"极端情况下\",{\"1\":{\"3466\":1}}],[\"极有可能被循环调用的方法\",{\"1\":{\"3206\":1}}],[\"欧元\",{\"1\":{\"3464\":1}}],[\"欧标\",{\"1\":{\"509\":1}}],[\"钱的子类美元\",{\"1\":{\"3464\":1}}],[\"忘记了类设计的初衷\",{\"1\":{\"3463\":1}}],[\"屏蔽弱依赖负面影响\",{\"1\":{\"3456\":1}}],[\"仅部分\",{\"1\":{\"5917\":1}}],[\"仅当抛出了异常\",{\"1\":{\"4750\":1}}],[\"仅包含用于对齐的前导星号\",{\"1\":{\"4249\":1}}],[\"仅仅包含一个外部依赖\",{\"1\":{\"6864\":1}}],[\"仅仅起到辅助性的作用\",{\"1\":{\"5542\":1}}],[\"仅仅当想要处理异常时才去捕获\",{\"1\":{\"4923\":1}}],[\"仅仅是为了填充参数列表的对象\",{\"1\":{\"4476\":1}}],[\"仅仅保证实例引用的不可变属性是不够的\",{\"1\":{\"4178\":1}}],[\"仅仅为了代码复用\",{\"1\":{\"2745\":1}}],[\"仅\",{\"1\":{\"4069\":1}}],[\"仅在右花括号结束一条语句或者方法\",{\"1\":{\"4013\":1}}],[\"仅影响信息展示\",{\"1\":{\"3456\":1}}],[\"肯定会很熟悉\",{\"1\":{\"6944\":1}}],[\"肯定不为\",{\"1\":{\"6828\":1}}],[\"肯定不是进入这里\",{\"1\":{\"3186\":1}}],[\"肯定需要详细的施工图\",{\"1\":{\"3454\":1}}],[\"淘宝订单状态有已下单\",{\"1\":{\"3452\":1}}],[\"曾经出现过线下调试是正确的\",{\"1\":{\"3433\":1}}],[\"序号直接紧跟在英文说明之后\",{\"1\":{\"3431\":1}}],[\"序号\",{\"1\":{\"3431\":1}}],[\"序列化类新增属性时\",{\"1\":{\"3060\":1}}],[\"序列化\",{\"0\":{\"5735\":1,\"6604\":1},\"1\":{\"1795\":1}}],[\"英文站点\",{\"0\":{\"6724\":1}}],[\"英文说明可以是部门简称\",{\"1\":{\"3431\":1}}],[\"英文说明\",{\"1\":{\"3431\":1}}],[\"英文单词形式的错误码不利于非英语母语国家\",{\"1\":{\"3262\":1}}],[\"升级\",{\"1\":{\"3427\":1}}],[\"级\",{\"1\":{\"3426\":1}}],[\"级联更新是强阻塞\",{\"1\":{\"3385\":1}}],[\"级联调用obj\",{\"1\":{\"3276\":1}}],[\"储\",{\"1\":{\"3418\":1}}],[\"浪费一周的时间翻遍整个项目的情况\",{\"1\":{\"6865\":1}}],[\"浪费时间\",{\"1\":{\"4443\":1}}],[\"浪费性能和存\",{\"1\":{\"3418\":1}}],[\"浪费磁盘空间\",{\"1\":{\"3290\":1}}],[\"件\",{\"1\":{\"3406\":1}}],[\"统计学自然语言处理\",{\"1\":{\"6533\":1}}],[\"统计修正等\",{\"1\":{\"3404\":1}}],[\"统一样板的文档比没有文档更加糟糕\",{\"1\":{\"6848\":1}}],[\"统一化你的代码格式对阅读你的代码的人有帮助吗\",{\"1\":{\"6844\":1}}],[\"统一代码格式化详解\",{\"0\":{\"4270\":1}}],[\"统一命名规范详解\",{\"0\":{\"4268\":1}}],[\"统一目录\",{\"1\":{\"3284\":1}}],[\"统一规定使用三个斜杠\",{\"1\":{\"3247\":1}}],[\"统一为gmt\",{\"1\":{\"3236\":1}}],[\"统一使用下划线\",{\"1\":{\"3224\":1}}],[\"统一建模语言\",{\"1\":{\"2808\":1}}],[\"统一\",{\"1\":{\"2807\":1}}],[\"统一遍历问题\",{\"1\":{\"1552\":1}}],[\"统一管理多个子工厂\",{\"1\":{\"1256\":1}}],[\"统一管理网状资源\",{\"1\":{\"1067\":1}}],[\"统一对集合的访问方式\",{\"1\":{\"1047\":1}}],[\"统一整体和个体\",{\"1\":{\"1008\":1}}],[\"统一访问入口\",{\"1\":{\"993\":1}}],[\"搜索引擎\",{\"0\":{\"6591\":1}}],[\"搜索引擎回滚\",{\"1\":{\"3404\":1}}],[\"搜索的实现可能是基于文件系统的搜索\",{\"1\":{\"6147\":1}}],[\"搜索其他类即可\",{\"1\":{\"2840\":1}}],[\"性之间的映射\",{\"1\":{\"3395\":1}}],[\"性能良好\",{\"1\":{\"6623\":1}}],[\"性能良好且可以实时调用\",{\"1\":{\"6458\":1}}],[\"性能剖析及基准测试工具\",{\"1\":{\"6562\":1}}],[\"性能分析\",{\"0\":{\"6561\":1},\"1\":{\"6562\":1}}],[\"性能监测和分析工具\",{\"1\":{\"6520\":1}}],[\"性能监测商业工具\",{\"1\":{\"6519\":1,\"6522\":1}}],[\"性能最好\",{\"1\":{\"3106\":1}}],[\"性能会受到影响\",{\"1\":{\"1981\":1}}],[\"性能以及维护等问题\",{\"1\":{\"1500\":1}}],[\"故不建议在开发代码中使用此语句\",{\"1\":{\"3392\":1}}],[\"抵制唯一索引\",{\"1\":{\"3378\":1}}],[\"严重拖慢记录的更新以及行的新增速度\",{\"1\":{\"3378\":1}}],[\"严控访问范围\",{\"1\":{\"3076\":1}}],[\"吝啬索引的创建\",{\"1\":{\"3378\":1}}],[\"章节的格式化规则\",{\"1\":{\"4267\":1}}],[\"章节以及\",{\"1\":{\"4267\":1}}],[\"章节单独介绍\",{\"1\":{\"4148\":1}}],[\"章节和\",{\"1\":{\"4065\":1}}],[\"章节所中描述的\",{\"1\":{\"4019\":1}}],[\"章节说明\",{\"1\":{\"4017\":1}}],[\"章节中介绍\",{\"1\":{\"4064\":1}}],[\"章节中介绍了不建议使用数量不确定的空格来与上一行代码中的某些单词\",{\"1\":{\"4058\":1}}],[\"章节中所描述的\",{\"1\":{\"4028\":1,\"4258\":1}}],[\"章节中\",{\"1\":{\"4003\":1}}],[\"章节\",{\"1\":{\"3980\":1,\"3985\":1,\"4024\":1,\"4032\":1,\"4065\":1,\"4103\":1,\"4135\":1,\"4193\":1,\"4267\":2}}],[\"章对应的那一页吗\",{\"1\":{\"3373\":1}}],[\"章是什么标题\",{\"1\":{\"3373\":1}}],[\"约束满足问题求解程序\",{\"0\":{\"6320\":1}}],[\"约\",{\"1\":{\"3366\":1}}],[\"约定\",{\"1\":{\"2694\":1}}],[\"约定解释器的解释操作\",{\"1\":{\"1468\":1}}],[\"约定优于配置\",{\"1\":{\"1017\":1}}],[\"太阳\",{\"1\":{\"3366\":1}}],[\"亿年\",{\"1\":{\"3366\":1}}],[\"亿\",{\"1\":{\"3366\":1}}],[\"恐龙化石\",{\"1\":{\"3366\":1}}],[\"龟\",{\"1\":{\"3366\":1}}],[\"岁之内\",{\"1\":{\"3366\":1}}],[\"冗余字段应遵循\",{\"1\":{\"3364\":1}}],[\"唯一不好的是标准库对\",{\"1\":{\"6830\":1}}],[\"唯一\",{\"1\":{\"3943\":1}}],[\"唯一索引\",{\"1\":{\"3373\":1}}],[\"唯一索引名为uk\",{\"1\":{\"3355\":1}}],[\"唯一递增生成器的例子\",{\"1\":{\"2378\":1}}],[\"疲劳度控制\",{\"1\":{\"3345\":1}}],[\"支付宝付款服务\",{\"1\":{\"3416\":1}}],[\"支付\",{\"1\":{\"3345\":1}}],[\"支持参数化测试\",{\"1\":{\"6958\":1}}],[\"支持代码热加载并在浏览器中显示错误\",{\"1\":{\"6671\":1}}],[\"支持代理和缓存功能的二进制管理工具\",{\"1\":{\"6404\":1}}],[\"支持基本类型\",{\"1\":{\"6651\":1}}],[\"支持基于服务器的部署服务\",{\"1\":{\"6332\":1}}],[\"支持单元测试和集成测试\",{\"1\":{\"6643\":1}}],[\"支持衍生的groovy范的语言\",{\"1\":{\"6640\":1}}],[\"支持模拟静态方法\",{\"1\":{\"6636\":1}}],[\"支持流式断言提高测试的可读性\",{\"1\":{\"6628\":1}}],[\"支持xml文件的工具\",{\"1\":{\"6622\":1}}],[\"支持语义扩展\",{\"1\":{\"6621\":1}}],[\"支持很多java\",{\"1\":{\"6616\":1}}],[\"支持jca提供者\",{\"1\":{\"6599\":1}}],[\"支持数学图论对象和算法的图形库\",{\"1\":{\"6589\":1}}],[\"支持非阻塞式反向压力\",{\"1\":{\"6571\":1}}],[\"支持许多持久化标准\",{\"1\":{\"6546\":1}}],[\"支持快速数据访问和编码的orm框架\",{\"1\":{\"6545\":1}}],[\"支持pos标签\",{\"1\":{\"6532\":1}}],[\"支持对jvm应用程序进行分布式事务追踪的性能监测商业工具\",{\"1\":{\"6523\":1}}],[\"支持静态类型和静态编译\",{\"1\":{\"6470\":1}}],[\"支持在对象与json之间双向序列化\",{\"1\":{\"6458\":1}}],[\"支持硬件加速的图像缩放开发库\",{\"1\":{\"6449\":1}}],[\"支持众多jvm语言\",{\"1\":{\"6443\":1}}],[\"支持一元\",{\"1\":{\"6413\":1}}],[\"支持ooxml规范\",{\"1\":{\"6408\":1}}],[\"支持虚拟角色\",{\"1\":{\"6388\":1}}],[\"支持分布式配置\",{\"1\":{\"6384\":1}}],[\"支持无限次重定义运行时类与资源\",{\"1\":{\"6373\":1}}],[\"支持外部配置的开发库\",{\"1\":{\"6317\":1}}],[\"支持自定义标签库的网站通用模板库\",{\"1\":{\"6286\":1}}],[\"支持自动垃圾回收\",{\"1\":{\"5571\":1}}],[\"支持多租户\",{\"1\":{\"6594\":1}}],[\"支持多种格式的一维\",{\"1\":{\"6452\":1}}],[\"支持多种插件和编程语言\",{\"1\":{\"6442\":1}}],[\"支持多重继承\",{\"1\":{\"5572\":1}}],[\"支持多态特性\",{\"1\":{\"2740\":1}}],[\"支持泛型数组初始化操作就是搬起石头砸自己的脚\",{\"1\":{\"5194\":1}}],[\"支持表示并发等\",{\"1\":{\"3455\":1}}],[\"支持增加任意产品\",{\"1\":{\"1165\":1}}],[\"支持不同平台和不同文件格式的媒体播放器等\",{\"1\":{\"587\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"86\":1}}],[\"攻击者可以利用上传漏洞\",{\"1\":{\"3346\":1}}],[\"攻击者可以事先构造好url\",{\"1\":{\"3343\":1}}],[\"攻击者通过恶意构造跳转的链接\",{\"1\":{\"3344\":1}}],[\"攻击力\",{\"1\":{\"1649\":1}}],[\"攻击力和防御力\",{\"1\":{\"1638\":1}}],[\"挂马等危害\",{\"1\":{\"3342\":1}}],[\"蠕虫\",{\"1\":{\"3342\":1}}],[\"钓鱼\",{\"1\":{\"3342\":1}}],[\"恶意order\",{\"1\":{\"3336\":1}}],[\"隶属于用户个人的页面或者功能必须进行权限控制校验\",{\"1\":{\"3331\":1}}],[\"凡是本文内容都是与开发同学强相关的\",{\"1\":{\"3326\":1}}],[\"业务流程管理套件\",{\"0\":{\"6678\":1}}],[\"业务规划与资源调度优化求解程序\",{\"1\":{\"6324\":1}}],[\"业务场景逻辑\",{\"1\":{\"3473\":1}}],[\"业务线\",{\"1\":{\"3426\":1}}],[\"业务对象\",{\"1\":{\"3422\":1,\"3538\":1}}],[\"业务上具有唯一特性的字段\",{\"1\":{\"3368\":1}}],[\"业务名称\",{\"1\":{\"3361\":1,\"3431\":1}}],[\"业务代码应避免以下情况\",{\"1\":{\"3320\":1}}],[\"业务允许外等\",{\"1\":{\"3314\":1}}],[\"业务方通知活动暂停\",{\"1\":{\"3248\":1}}],[\"边界值测试\",{\"1\":{\"3311\":1}}],[\"却不能调用2个\",{\"1\":{\"5728\":1}}],[\"却是是重写了\",{\"1\":{\"5161\":1}}],[\"却是非常关键的\",{\"1\":{\"3299\":1}}],[\"却可以存储字符串\",{\"1\":{\"5094\":1}}],[\"却要实现它们\",{\"1\":{\"823\":1}}],[\"案发现场信息和异常堆栈信息\",{\"1\":{\"3292\":1}}],[\"案例\",{\"1\":{\"2881\":1,\"2883\":1,\"2887\":1}}],[\"案例说明\",{\"1\":{\"562\":1}}],[\"务必在日志配置文件中设置additivity=false\",{\"1\":{\"3290\":1}}],[\"留存的日志不少于六个月\",{\"1\":{\"3285\":1}}],[\"周围代码的有效换行方式应与\",{\"1\":{\"4034\":1}}],[\"周\",{\"1\":{\"3284\":1}}],[\"周六结束\",{\"1\":{\"3078\":1}}],[\"足迹服务引入了高版本的spring\",{\"1\":{\"3274\":1}}],[\"仲裁机制可能导致引入非预期的版本使类的方法签名不匹配\",{\"1\":{\"3274\":1}}],[\"捕捉异常使用throwable类进行拦截\",{\"1\":{\"3274\":1}}],[\"捕获标准异常并包装为自定义异常是一个很常见的做法\",{\"1\":{\"4925\":1}}],[\"捕获多个异常中的\",{\"1\":{\"4077\":1}}],[\"捕获异常并处理\",{\"1\":{\"4774\":1}}],[\"捕获异常\",{\"0\":{\"4228\":1}}],[\"捕获异常与抛异常\",{\"1\":{\"3273\":1}}],[\"捕获异常是为了处理它\",{\"1\":{\"3268\":1}}],[\"捕获\",{\"1\":{\"1617\":1}}],[\"感觉和原来的方式并没有太大区别\",{\"1\":{\"6828\":1}}],[\"感觉像空气\",{\"1\":{\"3299\":1}}],[\"感觉只是和目标接口交互\",{\"1\":{\"506\":1}}],[\"感性认知+口口相传\",{\"1\":{\"3263\":1}}],[\"俄罗斯语等\",{\"1\":{\"3262\":1}}],[\"堆栈向上抛\",{\"1\":{\"3274\":1}}],[\"堆栈\",{\"1\":{\"3257\":1}}],[\"往往是用1个\",{\"1\":{\"4448\":1}}],[\"往往是业务逻辑出错\",{\"1\":{\"3254\":1}}],[\"往往有多处\",{\"1\":{\"1205\":1}}],[\"错在哪\",{\"1\":{\"3251\":1}}],[\"错误的严重程度等\",{\"1\":{\"4897\":1}}],[\"错误示例\",{\"1\":{\"4860\":1}}],[\"错误将引发异常\",{\"1\":{\"4708\":1}}],[\"错误条件\",{\"1\":{\"4708\":1}}],[\"错误简短信息\",{\"1\":{\"3278\":1}}],[\"错误信息\",{\"1\":{\"3257\":1}}],[\"错误产生来源分为a\",{\"1\":{\"3254\":1}}],[\"错误产生来源+四位数字编号\",{\"1\":{\"3254\":1}}],[\"错误等级由日志和错误码本身的释义来决定\",{\"1\":{\"3252\":1}}],[\"错误码列表\",{\"0\":{\"3552\":1}}],[\"错误码即人性\",{\"1\":{\"3263\":1}}],[\"错误码有利于不同文化背景的开发者进行交流与代码协作\",{\"1\":{\"3262\":1}}],[\"错误码有利于团队快速对错误原因达到一致认知\",{\"1\":{\"3251\":1}}],[\"错误码的后三位编号与http状态码没有任何关系\",{\"1\":{\"3261\":1}}],[\"错误码的制定原则\",{\"1\":{\"3251\":1}}],[\"错误码分为一级宏观错误码\",{\"1\":{\"3260\":1}}],[\"错误码之外的业务信息由error\",{\"1\":{\"3258\":1}}],[\"错误码不能直接输出给用户作为提示信息使用\",{\"1\":{\"3257\":1}}],[\"错误码不体现版本号和错误等级信息\",{\"1\":{\"3252\":1}}],[\"错误码使用者避免随意定义新的错误码\",{\"1\":{\"3256\":1}}],[\"错误码为字符串类型\",{\"1\":{\"3254\":1}}],[\"错误码以不断追加的方式进行兼容\",{\"1\":{\"3252\":1}}],[\"错误码必须能够进行清晰地比对\",{\"1\":{\"3251\":1}}],[\"错误码必须能够快速知晓错误来源\",{\"1\":{\"3251\":1}}],[\"错误码回答的问题是谁的错\",{\"1\":{\"3251\":1}}],[\"错误码想得过于完美和复杂\",{\"1\":{\"3251\":1}}],[\"错误码\",{\"0\":{\"3250\":1},\"1\":{\"3257\":1,\"3278\":1,\"3553\":1}}],[\"错误排查人员\",{\"1\":{\"3226\":1}}],[\"错误\",{\"0\":{\"4715\":1},\"1\":{\"3222\":1,\"3444\":1,\"4713\":1}}],[\"沟通标准化\",{\"1\":{\"3251\":1}}],[\"坚决清理干净\",{\"1\":{\"3247\":1}}],[\"坚持is\",{\"1\":{\"3351\":1}}],[\"坚持读书\",{\"1\":{\"143\":1}}],[\"坚持运动\",{\"1\":{\"139\":1}}],[\"括号内\",{\"1\":{\"3244\":1}}],[\"括号内的f与左括号\",{\"1\":{\"3025\":1}}],[\"≤\",{\"1\":{\"3243\":1}}],[\"$\",{\"1\":{\"3242\":2,\"3397\":1,\"3432\":1,\"6996\":1}}],[\"$proxy0\",{\"1\":{\"1873\":1}}],[\"精简\",{\"1\":{\"3235\":1}}],[\"位于\",{\"1\":{\"6242\":1,\"6247\":1}}],[\"位将会被丢弃\",{\"1\":{\"5599\":1}}],[\"位的\",{\"1\":{\"5599\":2}}],[\"位是错误来源\",{\"1\":{\"3263\":1}}],[\"位是错误等级\",{\"1\":{\"3263\":1}}],[\"位\",{\"1\":{\"3229\":2,\"3254\":1,\"3332\":1}}],[\"域名解析服务出错\",{\"1\":{\"3883\":1}}],[\"域名\",{\"1\":{\"3224\":1}}],[\"十一\",{\"0\":{\"3238\":1}}],[\"十\",{\"0\":{\"3223\":1}}],[\"预处理返回结果及转化异常信息\",{\"1\":{\"3414\":1}}],[\"预计处理时间\",{\"1\":{\"3222\":2}}],[\"预期原值和新值\",{\"1\":{\"3541\":1}}],[\"预期大于\",{\"1\":{\"3065\":1}}],[\"预期进入此代码块\",{\"1\":{\"3049\":2}}],[\"预期是true\",{\"1\":{\"3016\":1}}],[\"线上应用不要依赖snapshot版本\",{\"1\":{\"3428\":1}}],[\"线上因为这个原因曾经出现过oom\",{\"1\":{\"3398\":1}}],[\"线上查询语句出现出\",{\"1\":{\"3388\":1}}],[\"线上故障有时候就是来源于这些标记处的代码\",{\"1\":{\"3222\":1}}],[\"线程执行代码注意catch异常\",{\"1\":{\"3176\":1}}],[\"线程一需要对表a\",{\"1\":{\"3166\":1}}],[\"线程经常会被复用\",{\"1\":{\"3163\":1}}],[\"线程资源必须通过线程池提供\",{\"1\":{\"3158\":1}}],[\"线程间消息传递开发库\",{\"1\":{\"6431\":1}}],[\"线程间不唯一\",{\"1\":{\"2401\":1}}],[\"线程间都唯一\",{\"1\":{\"2394\":1}}],[\"线程间可以不唯一\",{\"1\":{\"2394\":1}}],[\"线程唯一\",{\"1\":{\"2393\":1,\"2394\":2,\"2399\":1,\"2401\":2}}],[\"线程池不允许使用executors去创建\",{\"1\":{\"3159\":1}}],[\"线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销\",{\"1\":{\"3158\":1}}],[\"线程池也确实没有设计成单例类\",{\"1\":{\"2363\":1}}],[\"线程池这类的资源池\",{\"1\":{\"2363\":1}}],[\"线程安全~\",{\"1\":{\"2304\":1,\"2310\":1}}],[\"线程安全\",{\"0\":{\"2303\":1,\"2309\":1},\"1\":{\"2275\":1,\"2276\":1,\"2304\":1,\"2306\":1,\"2310\":1,\"2311\":1,\"2313\":1,\"2317\":1,\"3135\":1,\"5296\":1,\"5303\":1,\"5688\":1}}],[\"线程不安全~\",{\"1\":{\"2298\":1}}],[\"线程不安全\",{\"0\":{\"2297\":1},\"1\":{\"2274\":1,\"2298\":1,\"3140\":1,\"3150\":1}}],[\"难以知晓注释动机\",{\"1\":{\"3217\":1}}],[\"难以维护\",{\"1\":{\"2462\":1}}],[\"谨慎使用继承的方式来进行扩展\",{\"1\":{\"3464\":1}}],[\"谨慎使用序列化\",{\"1\":{\"2184\":1}}],[\"谨慎地记录日志\",{\"1\":{\"3294\":1}}],[\"谨慎注释掉代码\",{\"1\":{\"3217\":1}}],[\"专注协同过滤\",{\"1\":{\"6487\":1}}],[\"专有名词解释\",{\"0\":{\"3533\":1}}],[\"专有名词与关键字保持英文原文即可\",{\"1\":{\"3214\":1}}],[\"专业系类\",{\"1\":{\"1532\":1}}],[\"专业\",{\"1\":{\"858\":1}}],[\"专业类\",{\"1\":{\"855\":1}}],[\"九\",{\"0\":{\"3207\":1}}],[\"底层基础技术框架\",{\"1\":{\"3434\":1}}],[\"底层调用频度比较高的方法\",{\"1\":{\"3206\":1}}],[\"底层实现原理也是基于下面代码中所示的\",{\"1\":{\"2396\":1}}],[\"敏捷成了产品经理催进度的借口\",{\"1\":{\"3469\":1}}],[\"敏捷开发是快速交付迭代可用的系统\",{\"1\":{\"3469\":1}}],[\"敏捷开发=讲故事+编码+发布\",{\"1\":{\"3469\":1}}],[\"敏捷软件开发\",{\"1\":{\"2001\":1,\"5808\":1}}],[\"敏感权限入口\",{\"1\":{\"3205\":1}}],[\"查找配置文件的目录\",{\"1\":{\"6258\":1}}],[\"查找classpath根目录commons\",{\"1\":{\"6205\":1}}],[\"查找无参构造器\",{\"1\":{\"6068\":1}}],[\"查找异常表\",{\"1\":{\"4952\":1}}],[\"查看每个构造方法需要的参数\",{\"1\":{\"5914\":1}}],[\"查看详情\",{\"1\":{\"65\":1,\"67\":1,\"71\":1,\"74\":1,\"77\":1,\"80\":1,\"84\":1,\"87\":1,\"89\":1,\"91\":1,\"93\":1,\"95\":1,\"97\":1,\"99\":1,\"101\":1,\"104\":1,\"106\":1}}],[\"查询的表别名限定\",{\"1\":{\"3524\":1}}],[\"查询信息后\",{\"1\":{\"3204\":1}}],[\"算术条件异常\",{\"1\":{\"4820\":1}}],[\"算术表达式中出现赋值操作\",{\"1\":{\"3201\":1}}],[\"算法的整体步骤很固定\",{\"1\":{\"2686\":1}}],[\"算法的变化\",{\"1\":{\"2489\":1}}],[\"算法只存在于一个地方\",{\"1\":{\"2681\":1}}],[\"算法\",{\"1\":{\"2578\":1}}],[\"算法族\",{\"1\":{\"2489\":1}}],[\"算法之间能互相替换\",{\"1\":{\"1035\":1}}],[\"贫贱夫妻百事哀\",{\"1\":{\"3195\":1}}],[\"终止程序\",{\"1\":{\"4813\":1}}],[\"终止发放奖品\",{\"1\":{\"3190\":1}}],[\"终极版\",{\"1\":{\"3506\":1}}],[\"终端显示层\",{\"1\":{\"3411\":1}}],[\"终结符表达式类\",{\"1\":{\"1476\":1}}],[\"终结符表达式\",{\"1\":{\"1469\":1}}],[\"击穿\",{\"1\":{\"3190\":1}}],[\"八个基本类型\",{\"1\":{\"5252\":1}}],[\"八\",{\"0\":{\"3183\":1}}],[\"悲观锁遵循一锁二判三更新四释放的原则\",{\"1\":{\"3175\":1}}],[\"资金相关的金融敏感信息\",{\"1\":{\"3175\":1}}],[\"资源\",{\"0\":{\"6682\":1},\"1\":{\"6790\":1}}],[\"资源和jvm打包成windows\",{\"1\":{\"6405\":1}}],[\"资源会在\",{\"1\":{\"4868\":1}}],[\"资源驱动类\",{\"1\":{\"3155\":1}}],[\"资源消耗大\",{\"1\":{\"1626\":1}}],[\"资源导航\",{\"0\":{\"155\":1}}],[\"锁\",{\"1\":{\"3520\":1}}],[\"锁的释放规则与锁的阻塞等待方式相同\",{\"1\":{\"3171\":1}}],[\"锁分段技术\",{\"1\":{\"3145\":1}}],[\"亦推荐如下处理\",{\"1\":{\"3160\":1}}],[\"七\",{\"0\":{\"3154\":1,\"3449\":1}}],[\"七大原则\",{\"0\":{\"1988\":1}}],[\"稳定代码指的是无论如何不会出错的代码\",{\"1\":{\"3267\":1}}],[\"稳定性指集合每次遍历的元素次序是一定的\",{\"1\":{\"3152\":1}}],[\"稳定数据结构\",{\"1\":{\"1080\":1}}],[\"合理使用\",{\"1\":{\"5063\":1}}],[\"合理的做法是至少要记录异常的信息\",{\"1\":{\"4913\":1}}],[\"合理利用好集合的有序性\",{\"1\":{\"3152\":1}}],[\"合适的字符存储长度\",{\"1\":{\"3366\":1}}],[\"合成复用原则的重要性\",{\"0\":{\"2214\":1}}],[\"合成复用原则\",{\"0\":{\"2198\":1},\"1\":{\"530\":1,\"1998\":1,\"2199\":1,\"2230\":1,\"2252\":1}}],[\"菱形操作符\",{\"1\":{\"5670\":1}}],[\"菱形泛型\",{\"1\":{\"3121\":1}}],[\"菱形指向整体\",{\"1\":{\"2874\":1,\"2880\":1}}],[\"毕竟是像纯净水过滤的最后一道\",{\"1\":{\"3206\":1}}],[\"毕竟泛型是在jdk5后才出现\",{\"1\":{\"3112\":1}}],[\"毕竟最初我们只考虑将图片存储在阿里云上\",{\"1\":{\"2704\":1}}],[\"泛型\",{\"0\":{\"5538\":1}}],[\"泛型作为java基础知识点之一\",{\"1\":{\"5238\":1}}],[\"泛型信息全都会被擦除掉\",{\"1\":{\"5218\":1}}],[\"泛型出现的原因\",{\"1\":{\"5143\":1}}],[\"泛型变量的类型为该方法中的几种类型的同一父类的最小级\",{\"1\":{\"5110\":1}}],[\"泛型中的引用传递的问题\",{\"1\":{\"5145\":1}}],[\"泛型中的类型在使用时指定\",{\"1\":{\"5004\":1}}],[\"泛型中参数话类型为什么不考虑继承关系\",{\"1\":{\"5135\":1}}],[\"泛型中类型擦除\",{\"0\":{\"5069\":1}}],[\"泛型数组\",{\"0\":{\"5056\":1,\"5191\":1,\"5202\":1}}],[\"泛型上下限的引入\",{\"1\":{\"5039\":1}}],[\"泛型类扩展throwable都不合法\",{\"1\":{\"5216\":1}}],[\"泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数\",{\"1\":{\"5208\":1}}],[\"泛型类\",{\"0\":{\"5013\":1},\"1\":{\"5012\":1}}],[\"泛型有三种使用方式\",{\"1\":{\"5012\":1}}],[\"泛型方法不是仅仅可以有一个参数class<t>\",{\"1\":{\"5031\":1}}],[\"泛型方法要求的参数是class<t>类型\",{\"1\":{\"5030\":1}}],[\"泛型方法\",{\"0\":{\"5021\":1},\"1\":{\"4997\":1,\"5012\":1,\"5022\":1}}],[\"泛型接口\",{\"0\":{\"5018\":1},\"1\":{\"4997\":1,\"5012\":1}}],[\"泛型的擦除机制\",{\"1\":{\"5194\":1}}],[\"泛型的桥接方法\",{\"0\":{\"5146\":1}}],[\"泛型的类型擦除原则是\",{\"1\":{\"5071\":1}}],[\"泛型的上下限\",{\"0\":{\"5033\":1}}],[\"泛型的基本使用\",{\"0\":{\"5010\":1}}],[\"泛型的本质是为了参数化类型\",{\"1\":{\"4997\":1}}],[\"泛型的相关知识\",{\"1\":{\"4995\":1}}],[\"泛型机制详解\",{\"0\":{\"4994\":1},\"1\":{\"5540\":1}}],[\"泛型集合使用时\",{\"1\":{\"3121\":1}}],[\"泛型通配符<\",{\"1\":{\"3111\":1}}],[\"泛化关系用\",{\"1\":{\"2894\":1}}],[\"泛化关系\",{\"0\":{\"2892\":1,\"5779\":1}}],[\"泛化关系和实现关系\",{\"1\":{\"2848\":1}}],[\"泛化\",{\"1\":{\"2809\":1,\"2834\":1,\"2893\":1}}],[\"泛化的设计思想\",{\"1\":{\"2693\":1}}],[\"负数高位补1\",{\"1\":{\"5740\":1}}],[\"负载因子\",{\"1\":{\"3123\":1}}],[\"负面影响与\",{\"1\":{\"3106\":1}}],[\"负责给出一个算法的轮廓和骨架\",{\"1\":{\"2652\":1}}],[\"负责两个不同职责\",{\"1\":{\"2002\":1}}],[\"负责存储发起人的内部状态\",{\"1\":{\"1631\":1}}],[\"负责创建和管理享元角色\",{\"1\":{\"1396\":1}}],[\"负责将配置文件解析为\",{\"1\":{\"1359\":1}}],[\"负责组装\",{\"1\":{\"1357\":1}}],[\"负责在程序启动的时候\",{\"1\":{\"1327\":1}}],[\"负责描述所有实例共有的公共接口\",{\"1\":{\"1185\":1}}],[\"负责实现创建所有实例的内部逻辑\",{\"1\":{\"1184\":1}}],[\"负责所有产品的创建\",{\"1\":{\"1179\":1}}],[\"负责任务的调用和分配\",{\"1\":{\"1085\":1,\"1086\":1}}],[\"负责控制产品对象的生产过程\",{\"1\":{\"678\":1}}],[\"均采用utf8字符集\",{\"1\":{\"3391\":1}}],[\"均会导致子列表的遍历\",{\"1\":{\"3103\":1}}],[\"均以最小货币单位且为整型类型进行存储\",{\"1\":{\"3047\":1}}],[\"抛出\",{\"1\":{\"4985\":1}}],[\"抛出并接住异常对象\",{\"1\":{\"4981\":1,\"4983\":1}}],[\"抛出并接住异常对象三者的耗时对比\",{\"1\":{\"4980\":1}}],[\"抛出去\",{\"1\":{\"4978\":1}}],[\"抛出错误\",{\"1\":{\"4906\":1}}],[\"抛出和捕获异常的开销是很昂贵的\",{\"1\":{\"4855\":1}}],[\"抛出该异常\",{\"1\":{\"4821\":1,\"4822\":1,\"4840\":1}}],[\"抛出一个异常\",{\"1\":{\"4805\":1}}],[\"抛出一个运行时异常\",{\"1\":{\"4754\":1}}],[\"抛出的仍然为原始异常\",{\"1\":{\"4799\":1}}],[\"抛出nosuchmethoderror错误\",{\"1\":{\"3274\":1}}],[\"抛出nosuchmethodexception\",{\"1\":{\"3274\":1}}],[\"抛出npe异常\",{\"1\":{\"3189\":1}}],[\"抛出nullpointerexception异常\",{\"1\":{\"3099\":1}}],[\"抛出illegalmonitorstateexception异常\",{\"1\":{\"3167\":1}}],[\"抛出illegalstateexception异常\",{\"1\":{\"3095\":1}}],[\"抛出异常被catch后\",{\"1\":{\"3269\":1}}],[\"抛出异常\",{\"1\":{\"2727\":1,\"3081\":2,\"4799\":1,\"6094\":1}}],[\"六\",{\"0\":{\"3088\":1,\"3407\":1}}],[\"硬性规定\",{\"1\":{\"3932\":1}}],[\"硬编码\",{\"1\":{\"3085\":1}}],[\"硬盘\",{\"1\":{\"661\":1}}],[\"慎用object的clone方法来拷贝对象\",{\"1\":{\"3075\":1}}],[\"循环的头部中声明多个变量\",{\"1\":{\"4109\":1}}],[\"循环体中的语句要考量性能\",{\"1\":{\"3202\":1}}],[\"循环体内\",{\"1\":{\"3071\":1}}],[\"循序渐进\",{\"1\":{\"140\":1}}],[\"首屏展示最好\",{\"1\":{\"3068\":1}}],[\"首先去掉注释校验\",{\"1\":{\"6258\":1}}],[\"首先调用driversiterator\",{\"1\":{\"6191\":1}}],[\"首先调用了\",{\"1\":{\"6058\":1}}],[\"首先看第二步\",{\"1\":{\"6186\":1}}],[\"首先在java中定义了接口java\",{\"1\":{\"6166\":1}}],[\"首先要找到其无参构造器\",{\"1\":{\"6065\":1}}],[\"首先要分清几个概念\",{\"1\":{\"4309\":1,\"4393\":1}}],[\"首先肯定是\",{\"1\":{\"6065\":1}}],[\"首先会将它们提升到\",{\"1\":{\"5607\":1}}],[\"首先把\",{\"1\":{\"5310\":1}}],[\"首先来看看异常慢在哪里\",{\"1\":{\"4980\":1}}],[\"首先明确对象有多少种状态\",{\"1\":{\"3452\":1}}],[\"首先其它鸭子都继承了\",{\"1\":{\"2523\":1}}],[\"首先创建手机和路由器的接口类\",{\"1\":{\"1301\":1}}],[\"首先通过allocatememory方法申请4字节的内存空间后\",{\"1\":{\"467\":1}}],[\"首先通过反射拿到boolean类中定义的true这个变量\",{\"1\":{\"440\":1}}],[\"首先\",{\"1\":{\"437\":1,\"1332\":1,\"2386\":1,\"2400\":1,\"2687\":1,\"2704\":1,\"2801\":1,\"5058\":1,\"5168\":1,\"6198\":1,\"6201\":1,\"6259\":1}}],[\"私有构造\",{\"1\":{\"5914\":1}}],[\"私有构造器\",{\"1\":{\"5825\":1,\"6258\":1}}],[\"私有方法以及移除静态初始化器的模拟工具\",{\"1\":{\"6636\":1}}],[\"私有方法\",{\"1\":{\"3068\":1}}],[\"私有云不需要支持\",{\"1\":{\"2711\":1}}],[\"神坑之一\",{\"1\":{\"3063\":1}}],[\"尾数+阶码\",{\"1\":{\"3048\":1}}],[\"浮点数的后缀统一为大写\",{\"1\":{\"3532\":1}}],[\"浮点数的比较\",{\"1\":{\"3520\":1}}],[\"浮点数采用\",{\"1\":{\"3048\":1}}],[\"浮点数之间的等值判断\",{\"1\":{\"3048\":1}}],[\"浮点数类型的数值后缀统一为大写的d或f\",{\"1\":{\"3013\":1}}],[\"绿叶逻辑单独出来成为额外方法\",{\"1\":{\"3036\":1}}],[\"绿色是\",{\"1\":{\"2903\":1}}],[\"回车及任何不可见字符的总行数不超过\",{\"1\":{\"3036\":1}}],[\"回忆一下当天发生的事\",{\"1\":{\"154\":1}}],[\"见反例\",{\"1\":{\"3030\":1}}],[\"见过的人\",{\"1\":{\"154\":1}}],[\"涉及上述中的\",{\"1\":{\"3024\":1}}],[\"详解\",{\"0\":{\"4273\":1,\"4426\":1,\"4427\":1}}],[\"详细参考附表3\",{\"1\":{\"3524\":1}}],[\"详细规定参考下方\",{\"1\":{\"3426\":1}}],[\"详尽版\",{\"1\":{\"3514\":1}}],[\"详见第\",{\"1\":{\"3021\":1}}],[\"详情容器\",{\"1\":{\"62\":1,\"64\":1}}],[\"左移运算符\",{\"1\":{\"5739\":1}}],[\"左花括号之后换行\",{\"1\":{\"4011\":1}}],[\"左花括号之前不能换行\",{\"1\":{\"4010\":1}}],[\"左右大括号\",{\"1\":{\"3036\":1}}],[\"左小括号和右边相邻字符之间不需要空格\",{\"1\":{\"3021\":1}}],[\"左大括号前加空格且不换行\",{\"1\":{\"3025\":1}}],[\"左大括号前不换行\",{\"1\":{\"3020\":1}}],[\"左大括号后换行\",{\"1\":{\"3020\":1,\"3025\":1}}],[\"右花括号之后才换行\",{\"1\":{\"4013\":1}}],[\"右花括号之前换行\",{\"1\":{\"4012\":1}}],[\"右括号与强制转换值之间不需要任何空格隔开\",{\"1\":{\"3028\":1}}],[\"右小括号和左边相邻字符之间也不需要空格\",{\"1\":{\"3021\":1}}],[\"右大括号后有else\",{\"1\":{\"3025\":1}}],[\"右大括号后还有else等代码则不换行\",{\"1\":{\"3020\":1}}],[\"右大括号前换行\",{\"1\":{\"3020\":1,\"3025\":1}}],[\"右边部分正好相反\",{\"1\":{\"2174\":1}}],[\"易扩展\",{\"1\":{\"6542\":1}}],[\"易产生npe\",{\"1\":{\"3276\":1}}],[\"易读的特点\",{\"1\":{\"3235\":1}}],[\"易懂常量也要统一定义成应用内共享常量\",{\"1\":{\"3016\":1}}],[\"易于上手且支持语法超前预测\",{\"1\":{\"6315\":1}}],[\"易于扩展\",{\"1\":{\"2551\":1}}],[\"易于理解\",{\"1\":{\"2551\":1}}],[\"跨平台im客户端\",{\"1\":{\"6506\":1}}],[\"跨平台xmpp客户端函数库\",{\"1\":{\"6504\":1}}],[\"跨站请求伪造是一类常见编程漏洞\",{\"1\":{\"3343\":1}}],[\"跨应用间rpc调用优先考虑使用result方式\",{\"1\":{\"3278\":1}}],[\"跨应用共享常量\",{\"1\":{\"3016\":2}}],[\"跨越两种观察者类型\",{\"1\":{\"1735\":1}}],[\"禁止这么做\",{\"1\":{\"4239\":1}}],[\"禁止出现数字开头禁止两个下划线中间只出现数字\",{\"1\":{\"3352\":1}}],[\"禁止向html页面输出未经安全过滤或未正确转义的用户数据\",{\"1\":{\"3342\":1}}],[\"禁止字符串拼接sql访问数据库\",{\"1\":{\"3333\":1}}],[\"禁止在catch子句中使用泛型变量\",{\"1\":{\"5227\":1}}],[\"禁止在子项目的pom依赖中出现相同的groupid\",{\"1\":{\"3433\":1}}],[\"禁止在程序中写死一年为\",{\"1\":{\"3082\":1}}],[\"禁止在pojo类中\",{\"1\":{\"3063\":1}}],[\"禁止使用map类来传输\",{\"1\":{\"3423\":1,\"3539\":1}}],[\"禁止使用存储过程\",{\"1\":{\"3386\":1}}],[\"禁止使用float和double\",{\"1\":{\"3356\":1}}],[\"禁止使用long类型\",{\"1\":{\"3229\":1}}],[\"禁止使用构造方法bigdecimal\",{\"1\":{\"3056\":1}}],[\"禁止使用tab字符\",{\"1\":{\"3024\":1}}],[\"禁止命名成xxxpojo\",{\"1\":{\"3006\":1}}],[\"禁用测试\",{\"0\":{\"4335\":1}}],[\"禁用\",{\"0\":{\"4237\":1}}],[\"禁用保留字\",{\"1\":{\"3354\":1}}],[\"禁用了如下功能\",{\"1\":{\"16\":1}}],[\"禁用展示\",{\"1\":{\"12\":1}}],[\"领域\",{\"1\":{\"6820\":1}}],[\"领域模型命名规约\",{\"1\":{\"3006\":1}}],[\"领取奖品\",{\"1\":{\"2452\":1}}],[\"​a\",{\"1\":{\"3016\":1}}],[\"​类b中\",{\"1\":{\"3016\":1}}],[\"​类a中\",{\"1\":{\"3016\":1}}],[\"​\",{\"1\":{\"3003\":1,\"3006\":11,\"3034\":1,\"3078\":1,\"3106\":4,\"3119\":3,\"3152\":1,\"3159\":6,\"3180\":3,\"3188\":2,\"3251\":3,\"3280\":1,\"3282\":1,\"3366\":5,\"3375\":3,\"3383\":3,\"3389\":2}}],[\"任意重定向\",{\"1\":{\"3339\":1}}],[\"任何可能的情况下尽量使用\",{\"1\":{\"6836\":1}}],[\"任何可以表达\",{\"1\":{\"4124\":1}}],[\"任何对它的改变都应该产生一个新的对象\",{\"1\":{\"5628\":1}}],[\"任何修改都会创建一个新的对象\",{\"1\":{\"5625\":1}}],[\"任何换行符之前都可以有任意数量的跟随着实现注释的空格\",{\"1\":{\"4149\":1}}],[\"任何的二元或三元操作符的两侧\",{\"1\":{\"4075\":1}}],[\"任何的左花括号\",{\"1\":{\"4072\":1}}],[\"任何超过此限制的代码行都必须被换行\",{\"1\":{\"4028\":1}}],[\"任何数组的初始化可以选择写成\",{\"1\":{\"4114\":1}}],[\"任何数组的初始化可以选择被认为是一个块状结构\",{\"1\":{\"4003\":1}}],[\"任何数据结构的构造或初始化\",{\"1\":{\"3246\":1}}],[\"任何字段如果为非负数\",{\"1\":{\"3351\":1}}],[\"任何\",{\"1\":{\"3229\":1}}],[\"任何类\",{\"1\":{\"3076\":1}}],[\"任何npe问题\",{\"1\":{\"3058\":1}}],[\"任何货币金额\",{\"1\":{\"3047\":1}}],[\"任何情形\",{\"1\":{\"3038\":1}}],[\"任何二目\",{\"1\":{\"3023\":1}}],[\"任何自定义编程元素在命名时\",{\"1\":{\"2999\":1}}],[\"任务列表\",{\"0\":{\"81\":1}}],[\"缩放\",{\"1\":{\"6342\":1}}],[\"缩进\",{\"0\":{\"4120\":1},\"1\":{\"3025\":1}}],[\"缩写\",{\"1\":{\"2998\":3,\"6197\":1}}],[\"缩小功能改动导致的代码改动范围\",{\"1\":{\"2774\":1}}],[\"杜绝完全不规范的英文缩写\",{\"1\":{\"2998\":1}}],[\"杜绝踩重复的坑\",{\"1\":{\"2983\":1}}],[\"误以为\",{\"1\":{\"2994\":1}}],[\"力求语义表达完整清楚\",{\"1\":{\"2991\":1}}],[\"福娃\",{\"1\":{\"2987\":1}}],[\"稿费所得收入均捐赠公益事情\",{\"1\":{\"2983\":1}}],[\"版的\",{\"1\":{\"5670\":1}}],[\"版本\",{\"1\":{\"6212\":1}}],[\"版本名\",{\"1\":{\"3480\":1}}],[\"版本号\",{\"1\":{\"3479\":1}}],[\"版本历史\",{\"0\":{\"3478\":1}}],[\"版本控制在http头信息中体现\",{\"1\":{\"3237\":1}}],[\"版\",{\"1\":{\"2983\":1}}],[\"娓娓道来\",{\"1\":{\"2983\":1}}],[\"秉持\",{\"1\":{\"2983\":1}}],[\"万行或者单表容量超过2gb\",{\"1\":{\"3365\":1}}],[\"万字的配套详解图书\",{\"1\":{\"2983\":1}}],[\"万人次\",{\"1\":{\"2983\":1}}],[\"万能充电器\",{\"1\":{\"1012\":1}}],[\"谁是一个引用\",{\"1\":{\"5134\":1}}],[\"谁还敢上路行驶\",{\"1\":{\"2983\":1}}],[\"谁都无法做到\",{\"1\":{\"452\":1}}],[\"制定交通法规表面上是要限制行车权\",{\"1\":{\"2983\":1}}],[\"制作纯豆浆\",{\"1\":{\"2679\":1}}],[\"制作花生豆浆\",{\"1\":{\"2679\":1}}],[\"制作红豆豆浆\",{\"1\":{\"2679\":2}}],[\"制作豆浆的流程\",{\"1\":{\"2666\":1}}],[\"五\",{\"0\":{\"3077\":1,\"3349\":1},\"1\":{\"5428\":1}}],[\"五花八门的错误码会人为地增加排查问题的难度\",{\"1\":{\"2982\":1}}],[\"五子棋\",{\"1\":{\"1385\":1}}],[\"众多社区开发者踊跃参与打磨完善\",{\"1\":{\"2982\":1}}],[\"阿里手册\",{\"1\":{\"4848\":1}}],[\"阿里开源的\",{\"1\":{\"3508\":1}}],[\"阿里云效也集成了代码规约扫描引擎\",{\"1\":{\"2983\":1}}],[\"阿里云的图片上传和下载的过程中\",{\"1\":{\"2705\":1}}],[\"阿里巴巴专指数据库表一\",{\"1\":{\"3535\":1}}],[\"阿里巴巴集团正式对外发布\",{\"1\":{\"3488\":1}}],[\"阿里巴巴\",{\"0\":{\"2980\":1},\"1\":{\"3520\":2}}],[\"脏数据\",{\"1\":{\"2974\":1}}],[\"固定\",{\"1\":{\"2974\":1}}],[\"拦截异常操作\",{\"1\":{\"4693\":1}}],[\"拦截器与过滤器\",{\"1\":{\"2970\":1}}],[\"拦截的类都实现统一接口\",{\"1\":{\"1040\":1}}],[\"考察\",{\"1\":{\"2968\":1}}],[\"考虑纸牌对象的情形\",{\"1\":{\"4892\":1}}],[\"考虑这样一种情况\",{\"1\":{\"4096\":1}}],[\"考虑到向前兼容\",{\"1\":{\"3112\":1}}],[\"考虑到用户可以添加多份调料时\",{\"1\":{\"915\":1}}],[\"考虑是否为final\",{\"1\":{\"3076\":1}}],[\"考虑\",{\"1\":{\"1595\":1}}],[\"考虑使用\",{\"1\":{\"916\":1}}],[\"男人给的评价是该歌手待定\",{\"1\":{\"2960\":1}}],[\"男人给的评价该歌手失败\",{\"1\":{\"2960\":1}}],[\"男人给的评价该歌手很成功\",{\"1\":{\"2960\":1}}],[\"女人给的评价是该歌手待定\",{\"1\":{\"2960\":1}}],[\"女人给的评价该歌手失败\",{\"1\":{\"2960\":1}}],[\"女人给的评价该歌手很成功\",{\"1\":{\"2960\":1}}],[\"女士在\",{\"1\":{\"2103\":1}}],[\"评价和操作图片的支持库\",{\"1\":{\"6448\":1}}],[\"评价有不同的种类\",{\"1\":{\"2955\":1}}],[\"评审内容包括存储介质选型\",{\"1\":{\"3450\":1}}],[\"评分\",{\"1\":{\"2987\":1}}],[\"评论\",{\"1\":{\"25\":1,\"129\":1,\"3348\":1}}],[\"确实是这样的一门编程语言\",{\"1\":{\"6744\":1}}],[\"确认订单超时\",{\"1\":{\"3714\":1}}],[\"确认无误才能执行更新语句\",{\"1\":{\"3387\":1}}],[\"确定非功能性需求\",{\"1\":{\"3461\":1}}],[\"确定指导后续设计与演化的原则\",{\"1\":{\"3460\":1}}],[\"确定模块之间的依赖关系及模块的宏观输入与输出\",{\"1\":{\"3459\":1}}],[\"确定系统内模块之间的关系\",{\"1\":{\"3459\":1}}],[\"确定系统在技术层面上的做与不做\",{\"1\":{\"3458\":1}}],[\"确定系统边界\",{\"1\":{\"3458\":1}}],[\"确定访问者访问一个元素时该做什么\",{\"1\":{\"2946\":1}}],[\"确保协议独立性的工具\",{\"1\":{\"6495\":1}}],[\"确保重新编译你的程序\",{\"1\":{\"5664\":1}}],[\"确保你的代码的健壮性\",{\"1\":{\"4441\":1}}],[\"确保countdown方法被执行到\",{\"1\":{\"3176\":1}}],[\"确保所有的代码都调用新接口之后\",{\"1\":{\"2769\":1}}],[\"破坏封装\",{\"1\":{\"2941\":1}}],[\"污染\",{\"1\":{\"2933\":1}}],[\"购物车\",{\"1\":{\"2929\":1}}],[\"购买火车票不一定要去火车站买\",{\"1\":{\"1809\":1}}],[\"药房工作人员根据处方单的内容进行抓药\",{\"1\":{\"2928\":1}}],[\"划分为编程规约\",{\"1\":{\"2982\":1}}],[\"划分访问的层次\",{\"1\":{\"1147\":1}}],[\"划价员根据处方单上面的药品名和数量进行划价\",{\"1\":{\"2928\":1}}],[\"査看它的划价员和药房工作人员对它的处理方式也不同\",{\"1\":{\"2928\":1}}],[\"医院医生开的处方单中包含多种药元素\",{\"1\":{\"2928\":1}}],[\"满\",{\"1\":{\"2924\":1}}],[\"满足开闭原则\",{\"1\":{\"1285\":1,\"1934\":1}}],[\"满足了开闭原则\",{\"1\":{\"2151\":1}}],[\"满足了\",{\"1\":{\"1251\":1}}],[\"满足迪米特法则\",{\"1\":{\"1222\":1}}],[\"满足\",{\"1\":{\"812\":1,\"2422\":1}}],[\"强烈鼓励使用面向对象的设计\",{\"1\":{\"6820\":1}}],[\"强健的\",{\"1\":{\"6665\":1}}],[\"强健的持久化框架\",{\"1\":{\"6547\":1}}],[\"强健的日期开发库\",{\"1\":{\"6479\":1}}],[\"强大的任务调度库\",{\"1\":{\"6516\":1}}],[\"强大且易于使用的java到json转换开发库\",{\"1\":{\"6457\":1}}],[\"强制转换为\",{\"0\":{\"5598\":1}}],[\"强制错误信息输入\",{\"1\":{\"3314\":1}}],[\"强制\",{\"1\":{\"2982\":1,\"2986\":1,\"2987\":1,\"2988\":1,\"2989\":1,\"2990\":1,\"2991\":1,\"2992\":1,\"2993\":1,\"2994\":1,\"2995\":1,\"2996\":1,\"2998\":1,\"3004\":1,\"3008\":1,\"3012\":1,\"3013\":1,\"3020\":1,\"3021\":1,\"3022\":1,\"3023\":1,\"3024\":1,\"3026\":1,\"3028\":1,\"3030\":1,\"3034\":1,\"3035\":1,\"3040\":1,\"3041\":1,\"3042\":1,\"3043\":1,\"3044\":1,\"3045\":1,\"3046\":1,\"3047\":1,\"3048\":1,\"3054\":1,\"3055\":1,\"3056\":1,\"3058\":2,\"3059\":1,\"3060\":1,\"3061\":1,\"3062\":1,\"3063\":1,\"3078\":1,\"3079\":1,\"3080\":1,\"3081\":1,\"3082\":1,\"3089\":1,\"3090\":1,\"3092\":1,\"3096\":1,\"3100\":1,\"3101\":1,\"3102\":1,\"3103\":1,\"3104\":1,\"3107\":1,\"3108\":1,\"3111\":1,\"3112\":1,\"3114\":1,\"3119\":1,\"3155\":1,\"3156\":1,\"3158\":1,\"3159\":1,\"3160\":1,\"3163\":1,\"3165\":1,\"3166\":1,\"3167\":1,\"3171\":1,\"3173\":1,\"3174\":1,\"3184\":1,\"3185\":1,\"3187\":1,\"3188\":1,\"3190\":1,\"3208\":1,\"3209\":1,\"3210\":1,\"3212\":1,\"3213\":1,\"3224\":1,\"3225\":1,\"3226\":1,\"3227\":1,\"3228\":1,\"3229\":1,\"3230\":1,\"3231\":1,\"3232\":1,\"3233\":1,\"3239\":1,\"3240\":1,\"3241\":1,\"3242\":1,\"3243\":1,\"3244\":1,\"3251\":1,\"3252\":1,\"3253\":1,\"3254\":1,\"3255\":1,\"3256\":1,\"3257\":1,\"3265\":1,\"3266\":1,\"3267\":1,\"3268\":1,\"3269\":1,\"3270\":1,\"3271\":1,\"3273\":1,\"3274\":1,\"3280\":1,\"3284\":1,\"3285\":1,\"3286\":1,\"3287\":1,\"3288\":1,\"3290\":1,\"3291\":1,\"3292\":1,\"3293\":1,\"3299\":1,\"3303\":1,\"3304\":1,\"3305\":1,\"3306\":1,\"3307\":1,\"3308\":1,\"3331\":1,\"3332\":1,\"3333\":1,\"3334\":1,\"3342\":1,\"3343\":1,\"3344\":1,\"3345\":1,\"3346\":1,\"3347\":1,\"3351\":1,\"3352\":1,\"3353\":1,\"3354\":1,\"3355\":1,\"3356\":1,\"3357\":1,\"3358\":1,\"3359\":1,\"3360\":1,\"3368\":1,\"3369\":1,\"3370\":1,\"3371\":1,\"3380\":1,\"3381\":1,\"3382\":1,\"3383\":1,\"3384\":1,\"3385\":1,\"3386\":1,\"3387\":1,\"3388\":1,\"3394\":1,\"3395\":1,\"3396\":1,\"3397\":1,\"3398\":1,\"3399\":1,\"3400\":1,\"3426\":1,\"3427\":1,\"3428\":1,\"3429\":1,\"3430\":1,\"3431\":1,\"3432\":1,\"3433\":1,\"3441\":1,\"3450\":1,\"3451\":1,\"3452\":1,\"3453\":1,\"3454\":1,\"3455\":1,\"3456\":1,\"4848\":1}}],[\"强\",{\"1\":{\"2924\":1}}],[\"强耦合\",{\"1\":{\"2778\":1}}],[\"积极的词\",{\"1\":{\"2924\":1}}],[\"积分\",{\"1\":{\"2441\":1}}],[\"聚类\",{\"1\":{\"6533\":1}}],[\"聚类和分类的可扩展算法\",{\"1\":{\"6487\":1}}],[\"聚能聊\",{\"1\":{\"3504\":1}}],[\"聚集在一起\",{\"1\":{\"2923\":1}}],[\"聚合及关联\",{\"1\":{\"5673\":1}}],[\"聚合及继承等行为让不同的类承担不同的职责\",{\"1\":{\"589\":1}}],[\"聚合通过方法参数\",{\"1\":{\"2890\":1}}],[\"聚合关系可以用\",{\"1\":{\"2874\":1}}],[\"聚合关系也是通过成员对象来实现的\",{\"1\":{\"2873\":1}}],[\"聚合关系和组合关系\",{\"1\":{\"2864\":1}}],[\"聚合关系\",{\"0\":{\"2871\":1,\"5787\":1},\"1\":{\"2848\":1}}],[\"聚合与组合\",{\"1\":{\"2834\":1}}],[\"聚合的方式引用其他类\",{\"1\":{\"2230\":1}}],[\"聚合的内容有\",{\"1\":{\"1525\":1}}],[\"聚合图\",{\"1\":{\"2204\":1}}],[\"聚合复用原则\",{\"1\":{\"2199\":1}}],[\"聚合等\",{\"1\":{\"2162\":1,\"2809\":1}}],[\"聚合或其他方式等\",{\"1\":{\"647\":1}}],[\"聚合\",{\"1\":{\"530\":1,\"540\":1,\"646\":1,\"2121\":1,\"2493\":1,\"2549\":1,\"2872\":1,\"2921\":1,\"2923\":1}}],[\"铁哥们\",{\"1\":{\"2920\":1}}],[\"若有异常\",{\"1\":{\"5706\":1}}],[\"若有若无表示一种使用关系\",{\"1\":{\"2919\":1}}],[\"若x\",{\"1\":{\"5654\":1,\"5656\":1}}],[\"若\",{\"1\":{\"4799\":1}}],[\"若覆盖一个方法\",{\"1\":{\"4751\":1}}],[\"若是父类的方法没有声明异常\",{\"1\":{\"4744\":1}}],[\"若是static成员变量\",{\"1\":{\"3076\":1}}],[\"若声明多个异常\",{\"1\":{\"4742\":1}}],[\"若方法中存在检查异常\",{\"1\":{\"4742\":1}}],[\"若程序元素为类\",{\"1\":{\"4632\":1}}],[\"若没有注解\",{\"1\":{\"4630\":1}}],[\"若没有特别配置的话\",{\"1\":{\"4478\":1}}],[\"若发现父类中不存在这个方法或是存在的方法签名不同\",{\"1\":{\"4516\":1}}],[\"若实在避免不了\",{\"1\":{\"3390\":1}}],[\"若count为\",{\"1\":{\"3384\":1}}],[\"若浮点数尾数位与指数位空间不限\",{\"1\":{\"3229\":1}}],[\"若强转其它类型数组将出现classcastexception错误\",{\"1\":{\"3104\":1}}],[\"若想实现深拷贝需覆写clone方法实现域对象的深度遍历式拷贝\",{\"1\":{\"3075\":1}}],[\"若即若离\",{\"1\":{\"2919\":1}}],[\"临时监控\",{\"1\":{\"3286\":1}}],[\"临时用一下\",{\"1\":{\"2919\":1}}],[\"临时变量\",{\"1\":{\"2389\":1}}],[\"临时变量和一个\",{\"1\":{\"2389\":1}}],[\"虚拟java用户组\",{\"1\":{\"6686\":1}}],[\"虚拟构造器\",{\"1\":{\"5877\":1}}],[\"虚拟机错误\",{\"1\":{\"5719\":1}}],[\"虚拟机巧妙的使用了桥方法\",{\"1\":{\"5171\":1}}],[\"虚拟机并不能将泛型类型变为date\",{\"1\":{\"5166\":1}}],[\"虚拟机运行错误\",{\"1\":{\"4717\":1}}],[\"虚拟代理\",{\"1\":{\"1921\":1}}],[\"虚无缥缈\",{\"1\":{\"2919\":1}}],[\"虚\",{\"1\":{\"2916\":1}}],[\"虚线表示依赖关系\",{\"1\":{\"2919\":1}}],[\"虚线表示实现\",{\"1\":{\"2916\":1}}],[\"虚线代表\",{\"1\":{\"2916\":1}}],[\"箭头关系表示可直接依赖\",{\"1\":{\"3409\":1}}],[\"箭头方向所指的类\",{\"1\":{\"2923\":1}}],[\"箭头方向\",{\"1\":{\"2910\":1}}],[\"箭头特征\",{\"1\":{\"2908\":1}}],[\"箭头从实现类指向接口\",{\"1\":{\"2900\":1}}],[\"箭头从子类指向父类\",{\"1\":{\"2894\":1}}],[\"箭头从使用类指向被关联的类\",{\"1\":{\"2867\":1}}],[\"箭头从使用类指向被依赖的类\",{\"1\":{\"2852\":1}}],[\"蓝色是\",{\"1\":{\"2896\":1}}],[\"鼠标可以和\",{\"1\":{\"2888\":1}}],[\"鼠标等部件组装而成的\",{\"1\":{\"661\":1}}],[\"么\",{\"0\":{\"5600\":1},\"1\":{\"2882\":1}}],[\"头\",{\"1\":{\"2881\":1}}],[\"头和嘴的关系\",{\"1\":{\"2879\":1}}],[\"身份证\",{\"1\":{\"2881\":1}}],[\"嘴也就不存在了\",{\"1\":{\"2879\":1}}],[\"带有存储过程或者sql语句的耦合对象\",{\"1\":{\"6548\":1}}],[\"带符号右移\",{\"1\":{\"5740\":1}}],[\"带来的负面影响\",{\"1\":{\"3152\":1}}],[\"带空心三角箭头的虚线\",{\"1\":{\"2900\":1}}],[\"带空心三角箭头的实线\",{\"1\":{\"2894\":1}}],[\"带空心菱形的实线\",{\"1\":{\"2874\":1}}],[\"带实心菱形的实线\",{\"1\":{\"2880\":1}}],[\"带一个箭头的实线\",{\"1\":{\"2867\":1}}],[\"带两个箭头或者没有箭头的实线\",{\"1\":{\"2867\":1}}],[\"带箭头的虚线\",{\"1\":{\"2852\":1}}],[\"双亲委托加载\",{\"1\":{\"6063\":1}}],[\"双精度浮点数的尾数位只有\",{\"1\":{\"3229\":1}}],[\"双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型\",{\"1\":{\"2967\":1}}],[\"双分派\",{\"1\":{\"2967\":1,\"2968\":1}}],[\"双向一对一关系\",{\"1\":{\"2868\":1}}],[\"双向的关联可以用\",{\"1\":{\"2867\":1}}],[\"双重检查\",{\"0\":{\"2312\":1},\"1\":{\"2277\":1,\"2313\":1}}],[\"丈夫和妻子等\",{\"1\":{\"2864\":1}}],[\"师傅和徒弟\",{\"1\":{\"2864\":1}}],[\"连续的单词直接拼接在一起\",{\"1\":{\"4166\":1}}],[\"连编绎都通过不了\",{\"1\":{\"2851\":1}}],[\"连接断开\",{\"1\":{\"3729\":1}}],[\"连接异常\",{\"1\":{\"3727\":1}}],[\"连接线和作为模型附加信息的文本\",{\"1\":{\"2818\":1}}],[\"连接池类\",{\"1\":{\"2350\":1}}],[\"连接池中的连接对象\",{\"1\":{\"1388\":1}}],[\"连接\",{\"1\":{\"1388\":1}}],[\"连接华为路由器\",{\"1\":{\"1306\":1}}],[\"连接小米路由器\",{\"1\":{\"1306\":1}}],[\"连接将军和士兵\",{\"1\":{\"744\":1}}],[\"字面量才是\",{\"1\":{\"5341\":1}}],[\"字面量属于\",{\"1\":{\"5339\":1}}],[\"字母和数字\",{\"1\":{\"4162\":1}}],[\"字符集和许多各种各样的实用的方法\",{\"1\":{\"6897\":1}}],[\"字符时\",{\"1\":{\"3955\":1}}],[\"字符\",{\"0\":{\"3953\":1},\"1\":{\"3954\":2,\"3969\":1,\"4028\":1}}],[\"字符串处理\",{\"1\":{\"6651\":1}}],[\"字符串常量池放在哪里\",{\"1\":{\"5319\":1}}],[\"字符串常量池属于虚拟机规范中的方法区\",{\"1\":{\"5315\":1}}],[\"字符串常量池\",{\"1\":{\"5310\":1,\"5325\":1,\"5326\":1,\"5329\":1}}],[\"字符串索引超出范围抛出的异常\",{\"1\":{\"4838\":1}}],[\"字符串转换为数字抛出的异常\",{\"1\":{\"4837\":1}}],[\"字符串\",{\"1\":{\"4178\":1}}],[\"字符串和字符字面量中的所有非空格字符都要进行转义\",{\"1\":{\"3949\":1}}],[\"字符串变量之间的拼接使用占位符的方式\",{\"1\":{\"3287\":1}}],[\"字符串的连接方式\",{\"1\":{\"3071\":1}}],[\"字段或实例字段\",{\"1\":{\"5944\":1}}],[\"字段或局部变量\",{\"1\":{\"4108\":1}}],[\"字段决不能是公有的\",{\"1\":{\"5366\":1}}],[\"字段以及方法\",{\"1\":{\"5360\":1}}],[\"字段未找到异常\",{\"1\":{\"4835\":1}}],[\"字段\",{\"1\":{\"3936\":1,\"4062\":1,\"4493\":1,\"4495\":1,\"5326\":1,\"5328\":1,\"5329\":1,\"5366\":1,\"5380\":1,\"5883\":1,\"5951\":1,\"5954\":1}}],[\"字段类型\",{\"1\":{\"3450\":1}}],[\"字段允许适当冗余\",{\"1\":{\"3364\":1}}],[\"字段名称\",{\"1\":{\"3450\":1}}],[\"字段名\",{\"1\":{\"3352\":1,\"3355\":3}}],[\"字段名必须使用小写字母或数字\",{\"1\":{\"3352\":1}}],[\"字段和方法返回值的数据类型非必需\",{\"1\":{\"2845\":1}}],[\"字节码操作\",{\"0\":{\"6294\":1}}],[\"字节码生成库\",{\"1\":{\"6282\":1}}],[\"字节码文件\",{\"1\":{\"5828\":1}}],[\"字节码内容如下\",{\"1\":{\"4599\":1}}],[\"字节是取所有浏览器的最小值\",{\"1\":{\"3230\":1}}],[\"字节\",{\"1\":{\"3230\":1,\"3366\":1}}],[\"字眼的方法\",{\"1\":{\"2704\":1}}],[\"真实系统的抽象\",{\"1\":{\"2822\":1}}],[\"真实主题\",{\"1\":{\"1829\":1}}],[\"光用文字能表达清楚建筑设计吗\",{\"1\":{\"2820\":1}}],[\"明显\",{\"1\":{\"4260\":1}}],[\"明确的方案\",{\"1\":{\"4195\":1}}],[\"明确数据库表示删除概念的字段名为\",{\"1\":{\"3504\":1}}],[\"明确各类的责任范围\",{\"1\":{\"1937\":1}}],[\"明明是一种图形\",{\"1\":{\"2819\":1}}],[\"企业机构或业务过程\",{\"1\":{\"2817\":1}}],[\"企鹅这些不会飞的鸟\",{\"1\":{\"2728\":1}}],[\"画类图时\",{\"1\":{\"2906\":1}}],[\"画\",{\"1\":{\"2810\":1}}],[\"们之间的关系\",{\"1\":{\"2809\":1}}],[\"平台上发布了一款游戏\",{\"1\":{\"2797\":1}}],[\"覆盖\",{\"1\":{\"5773\":1}}],[\"覆盖更广泛的潜在客户\",{\"1\":{\"2787\":1}}],[\"覆盖解决\",{\"1\":{\"2524\":1}}],[\"弱\",{\"1\":{\"2923\":1}}],[\"弱耦合\",{\"1\":{\"2778\":1}}],[\"弱点\",{\"1\":{\"154\":1}}],[\"持续集成往往以软件即服务为产品目标\",{\"1\":{\"6981\":1}}],[\"持续集成工具\",{\"1\":{\"6335\":1}}],[\"持续集成\",{\"0\":{\"6326\":1},\"1\":{\"6764\":1}}],[\"持续集成服务器\",{\"1\":{\"6284\":1}}],[\"持久化存储三个模块\",{\"1\":{\"2764\":1}}],[\"持有一个泛型t\",{\"1\":{\"5027\":1}}],[\"持有一个策略类的引用\",{\"1\":{\"2508\":1}}],[\"持有接收对象\",{\"1\":{\"745\":1}}],[\"持有\",{\"1\":{\"529\":1,\"576\":1}}],[\"配合\",{\"1\":{\"4315\":1,\"4399\":1}}],[\"配合间接的衡量标准一块来使用\",{\"1\":{\"2759\":1}}],[\"配置管理\",{\"1\":{\"6766\":1}}],[\"配置的功能\",{\"1\":{\"5542\":1}}],[\"配置织入点\",{\"1\":{\"4693\":1}}],[\"配置化到注解化的转变\",{\"1\":{\"4675\":1}}],[\"配置化到注解化\",{\"0\":{\"4674\":1}}],[\"配置服务超时\",{\"1\":{\"3896\":1}}],[\"配置服务出错\",{\"1\":{\"3875\":1}}],[\"配置映射关系\",{\"1\":{\"3396\":1}}],[\"配置文件的格式\",{\"1\":{\"6821\":1,\"6822\":1}}],[\"配置文件的方式\",{\"1\":{\"6821\":1}}],[\"配置文件的两种连接方式\",{\"1\":{\"6821\":1}}],[\"配置文件的解析比较繁琐\",{\"1\":{\"1359\":1}}],[\"配置文件中绝对不应该有逻辑或者控制结构\",{\"1\":{\"6821\":1}}],[\"配置文件中有接口的具体实现类名\",{\"1\":{\"6144\":1}}],[\"配置文件中的密码需要加密等\",{\"1\":{\"3532\":1}}],[\"配置文件中的密码需要加密\",{\"1\":{\"3347\":1}}],[\"配置文件解析主要包含\",{\"1\":{\"1359\":1}}],[\"配置文件解析\",{\"0\":{\"1358\":1},\"1\":{\"1347\":1}}],[\"配置文件\",{\"1\":{\"1337\":1,\"1350\":1}}],[\"配置解析\",{\"1\":{\"1331\":1}}],[\"配置\",{\"0\":{\"37\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"3\":1}}],[\"间接的衡量标准有很多\",{\"1\":{\"2758\":1}}],[\"间接地增加了系统实现的复杂度\",{\"1\":{\"2646\":1}}],[\"手动编写的类被编译后会产生一个class对象\",{\"1\":{\"5828\":1}}],[\"手册的愿景是码出高效\",{\"1\":{\"2983\":1}}],[\"手段有很多\",{\"1\":{\"2752\":1}}],[\"手机格式校验失败\",{\"1\":{\"3604\":1}}],[\"手机接口\",{\"1\":{\"1302\":1}}],[\"手机短信\",{\"1\":{\"655\":1}}],[\"手机代码\",{\"1\":{\"623\":1}}],[\"手机品牌代码\",{\"1\":{\"621\":1}}],[\"手机操作问题\",{\"0\":{\"606\":1}}],[\"手机类和测试类\",{\"1\":{\"521\":1,\"541\":1}}],[\"恰当地选择使用继承还是组合\",{\"1\":{\"2749\":1}}],[\"恰当使用继承可以把算法族的公共代码转移到父类里面\",{\"1\":{\"2496\":1}}],[\"长度超过限制\",{\"1\":{\"3867\":1,\"3869\":1}}],[\"长度为\",{\"1\":{\"3370\":1}}],[\"长度为0\",{\"1\":{\"3104\":1}}],[\"长度不要超过\",{\"1\":{\"3358\":1}}],[\"长方形和圆形实现这两个方法供访问类调用\",{\"1\":{\"2832\":1}}],[\"长期以来\",{\"1\":{\"2749\":1}}],[\"长时间占用数据库连接资源\",{\"1\":{\"2362\":1}}],[\"拼接和分割的功能\",{\"1\":{\"2745\":1}}],[\"达到控制网站服务器的目的\",{\"1\":{\"3346\":1}}],[\"达到代码复用的目的\",{\"1\":{\"2745\":1}}],[\"达到和主项目的依赖关系的解耦\",{\"1\":{\"1317\":1}}],[\"麻雀\",{\"1\":{\"2736\":1}}],[\"三大特性\",{\"0\":{\"5750\":1}}],[\"三大类\",{\"1\":{\"2982\":1}}],[\"三是编写完功能代码再写单元测试\",{\"1\":{\"4448\":1}}],[\"三是增加binlog存储\",{\"1\":{\"3402\":1}}],[\"三方库\",{\"1\":{\"3551\":1}}],[\"三目运算的自动拆箱\",{\"1\":{\"3524\":1}}],[\"三目运算符condition\",{\"1\":{\"3188\":1}}],[\"三目运算符的左右两边都需要加一个空格\",{\"1\":{\"3023\":1}}],[\"三级宏观错误码\",{\"1\":{\"3260\":1}}],[\"三\",{\"0\":{\"3019\":1,\"3279\":1,\"3298\":1,\"3379\":1,\"3440\":1},\"1\":{\"5423\":1}}],[\"三个条件如下\",{\"1\":{\"3119\":1}}],[\"三个模块只需要依赖数据存储一个模块即可\",{\"1\":{\"2764\":1}}],[\"三个模块都要依赖内存一级缓存\",{\"1\":{\"2764\":1}}],[\"三个技术手段\",{\"1\":{\"2734\":1}}],[\"三种工厂模式\",{\"1\":{\"1318\":1}}],[\"三种命名方式\",{\"1\":{\"574\":1}}],[\"委托三个技术手段\",{\"1\":{\"2740\":1}}],[\"委托\",{\"1\":{\"2734\":1,\"2739\":2}}],[\"委派模式\",{\"1\":{\"1084\":1}}],[\"鸟会不会叫\",{\"1\":{\"2729\":1}}],[\"鸟会不会飞\",{\"1\":{\"2729\":1}}],[\"鸟类\",{\"1\":{\"2724\":1}}],[\"乌鸦这些会飞的鸟都继承\",{\"1\":{\"2728\":1}}],[\"乌鸦等\",{\"1\":{\"2724\":1}}],[\"暴露出来的服务一定是接口\",{\"1\":{\"3004\":1}}],[\"暴露不该暴露的接口给外部\",{\"1\":{\"2727\":1}}],[\"暴露稳定的接口\",{\"1\":{\"2695\":1,\"2717\":1}}],[\"徒增了编码的工作量\",{\"1\":{\"2727\":1}}],[\"鸵鸟\",{\"1\":{\"2726\":1,\"2736\":1,\"2739\":1}}],[\"鸵鸟继承具有\",{\"1\":{\"2725\":1}}],[\"答案是finally会执行\",{\"1\":{\"4977\":1}}],[\"答案是异常发生的时候\",{\"1\":{\"4951\":1}}],[\"答案是否定的\",{\"1\":{\"2725\":1}}],[\"答案是后者\",{\"1\":{\"2387\":1}}],[\"鸽子\",{\"1\":{\"2724\":1}}],[\"投入不必要的开发时间\",{\"1\":{\"2719\":1}}],[\"投影仪\",{\"1\":{\"1116\":1,\"1133\":1,\"1134\":1}}],[\"度\",{\"1\":{\"2716\":1}}],[\"函数式编程支持库\",{\"1\":{\"6412\":1}}],[\"函数式编程\",{\"0\":{\"6411\":1}}],[\"函数访问父类的构造函数\",{\"1\":{\"5400\":1}}],[\"函数\",{\"1\":{\"2747\":1}}],[\"函数的命名不能暴露任何实现细节\",{\"1\":{\"2707\":1}}],[\"函数传递参数\",{\"1\":{\"2369\":1}}],[\"跟踪到drivermanager中之后\",{\"1\":{\"6193\":1}}],[\"跟\",{\"1\":{\"4301\":1}}],[\"跟随着大写字母\",{\"1\":{\"4193\":1}}],[\"跟null和非null无关\",{\"1\":{\"3380\":1}}],[\"跟数据库无关\",{\"1\":{\"3380\":1}}],[\"跟基于接口而非实现编程思想类似\",{\"1\":{\"2780\":1}}],[\"跟阿里云相关的特殊上传\",{\"1\":{\"2708\":1}}],[\"跟存储到私有云的流程\",{\"1\":{\"2705\":1}}],[\"跟单例模式概念相对应的还有一个多例模式\",{\"1\":{\"2408\":1}}],[\"照抄到接口定义中\",{\"1\":{\"2712\":1}}],[\"照抄到\",{\"1\":{\"2704\":1}}],[\"携带\",{\"1\":{\"2700\":1}}],[\"仍然要把这个异常抛出去\",{\"1\":{\"4969\":1}}],[\"仍然没有处理\",{\"1\":{\"4956\":1}}],[\"仍然能够在不破坏原有代码设计的情况下灵活应对\",{\"1\":{\"2696\":1}}],[\"仍然是构建\",{\"1\":{\"6863\":1}}],[\"仍然是之前保存的值\",{\"1\":{\"5711\":1}}],[\"仍然是可选的\",{\"1\":{\"4007\":1}}],[\"仍然是遵守单一职责\",{\"1\":{\"2024\":1}}],[\"仍然是\",{\"1\":{\"1487\":1}}],[\"越能应对未来的需求变化\",{\"1\":{\"2696\":1}}],[\"越能提高代码的灵活性\",{\"1\":{\"2696\":1}}],[\"越脱离具体某一实现的设计\",{\"1\":{\"2696\":1}}],[\"越顶层\",{\"1\":{\"2696\":1}}],[\"越抽象\",{\"1\":{\"2696\":1}}],[\"越是具体的异常要先处理\",{\"1\":{\"4971\":1}}],[\"越是不稳定的系统\",{\"1\":{\"2719\":1}}],[\"越是要勇于攀爬\",{\"1\":{\"152\":1}}],[\"越是艰难\",{\"1\":{\"152\":1}}],[\"甚至更强大的功能\",{\"1\":{\"6985\":1}}],[\"甚至你已经部署了一个新的jar\",{\"1\":{\"5664\":1}}],[\"甚至在编译时期该类的\",{\"1\":{\"5517\":1}}],[\"甚至其他的测试套件\",{\"1\":{\"4284\":1}}],[\"甚至不要求在已经水平对齐的地方继续保持水平对齐\",{\"1\":{\"4093\":1}}],[\"甚至不用\",{\"1\":{\"2723\":1}}],[\"甚至是词不达意的情况\",{\"1\":{\"3472\":1}}],[\"甚至是组件化\",{\"1\":{\"3467\":1}}],[\"甚至是一组通信的协议都可以叫作\",{\"1\":{\"2694\":1}}],[\"甚至相隔数月才出现一例\",{\"1\":{\"3445\":1}}],[\"甚至各种方法纵深调用\",{\"1\":{\"3196\":1}}],[\"甚至可以自定义迭代器的子类以支持新的遍历\",{\"1\":{\"1510\":1}}],[\"协作以及它们之间的静态结构和关系的一种静态模型\",{\"1\":{\"2831\":1}}],[\"协议\",{\"1\":{\"2694\":1,\"3224\":1,\"3512\":1}}],[\"协调各个具体的同事对象\",{\"1\":{\"1601\":1}}],[\"协调各个同事角色之间的交互关系\",{\"1\":{\"1580\":1}}],[\"供整个系统来使用\",{\"1\":{\"2698\":1}}],[\"供子类实现\",{\"1\":{\"2686\":1}}],[\"供扩展抽象化角色调用\",{\"1\":{\"601\":1}}],[\"既然类型被擦除了\",{\"1\":{\"5232\":1}}],[\"既然类型擦除了\",{\"1\":{\"5117\":1}}],[\"既然说类型变量会在编译的时候擦除掉\",{\"1\":{\"5117\":1}}],[\"既然是泛型方法\",{\"1\":{\"5029\":1}}],[\"既然单例类大部分情况下都用来表示全局类\",{\"1\":{\"2360\":1}}],[\"既有return\",{\"1\":{\"4975\":1}}],[\"既不是父子关系\",{\"1\":{\"2745\":1}}],[\"既统一了算法\",{\"1\":{\"2682\":1}}],[\"决定是否需要添加配料\",{\"1\":{\"2677\":1}}],[\"决胜千里之外\",{\"1\":{\"1051\":1}}],[\"钩子\",{\"1\":{\"2673\":1}}],[\"钩子方法\",{\"1\":{\"2657\":1,\"2677\":1}}],[\"花费时间较少\",{\"1\":{\"4282\":1}}],[\"花费的代码比较高\",{\"1\":{\"1251\":1}}],[\"花括号的使用方式遵循\",{\"1\":{\"4009\":1}}],[\"花括号\",{\"0\":{\"4004\":1}}],[\"花生类\",{\"1\":{\"2677\":1}}],[\"花生豆浆\",{\"1\":{\"2668\":1}}],[\"红豆类\",{\"1\":{\"2677\":1}}],[\"红豆\",{\"1\":{\"2668\":1}}],[\"浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的\",{\"1\":{\"2668\":1}}],[\"浸泡\",{\"1\":{\"2666\":1,\"2677\":1}}],[\"睡觉等\",{\"1\":{\"2637\":1}}],[\"睡前15分钟\",{\"1\":{\"154\":1}}],[\"吃饭\",{\"1\":{\"2637\":1}}],[\"办理具体业务\",{\"1\":{\"2636\":1}}],[\"70037927\",{\"1\":{\"5813\":1}}],[\"7开始支持\",{\"1\":{\"5690\":1}}],[\"74a14482\",{\"1\":{\"5334\":1}}],[\"748\",{\"1\":{\"4380\":1}}],[\"7中引入的\",{\"1\":{\"4793\":1}}],[\"79301241\",{\"1\":{\"4491\":1}}],[\"71799078\",{\"1\":{\"6133\":1}}],[\"71860633\",{\"1\":{\"4699\":1}}],[\"71\",{\"1\":{\"4374\":1}}],[\"7868820\",{\"1\":{\"5240\":1}}],[\"78\",{\"1\":{\"4374\":1}}],[\"768\",{\"1\":{\"4368\":1}}],[\"75\",{\"1\":{\"3123\":1}}],[\"7\",{\"0\":{\"5669\":1},\"1\":{\"2611\":1,\"2619\":1,\"3006\":1,\"3076\":1,\"3525\":1,\"3528\":1,\"3529\":1,\"4368\":1,\"4600\":1,\"4794\":1,\"4867\":1,\"4943\":1,\"4963\":3,\"4969\":3,\"4978\":3,\"5169\":1,\"5271\":1,\"5324\":1,\"5352\":1,\"5556\":1,\"5565\":1,\"5619\":1,\"5670\":1,\"6701\":1,\"6906\":1,\"6977\":1}}],[\"共有字段\",{\"1\":{\"5366\":1}}],[\"共同实现\",{\"1\":{\"5326\":1,\"5329\":1}}],[\"共性业务或公共行为抽取出来公共模块\",{\"1\":{\"3467\":1}}],[\"共性逻辑抽取\",{\"1\":{\"3036\":1}}],[\"共\",{\"1\":{\"2603\":1,\"3254\":1,\"3516\":1}}],[\"共享该对象可以节省内存\",{\"1\":{\"2348\":1}}],[\"共享的部分\",{\"1\":{\"1427\":1}}],[\"共享其相关的代码和数据\",{\"1\":{\"1417\":1}}],[\"共享资源池\",{\"1\":{\"1003\":1}}],[\"懂了设计模式\",{\"1\":{\"2596\":1}}],[\"苛能写一个简单的算法要比引入某种设计模式更加容易\",{\"1\":{\"2592\":1}}],[\"称为可维护\",{\"1\":{\"2584\":1}}],[\"架构类似python的scrapy\",{\"1\":{\"6662\":1}}],[\"架构\",{\"1\":{\"2578\":1,\"2753\":1}}],[\"怎样处理等等\",{\"1\":{\"4843\":1}}],[\"怎样创建对象\",{\"1\":{\"2600\":1}}],[\"怎样使用的\",{\"1\":{\"2577\":1}}],[\"怎么将\",{\"0\":{\"5594\":1}}],[\"怎么说呢\",{\"1\":{\"5174\":1}}],[\"怎么判断代码是否符合\",{\"1\":{\"2757\":1}}],[\"怎么办\",{\"1\":{\"2575\":1}}],[\"怎么会需要两个或者多个实例呢\",{\"1\":{\"2360\":1}}],[\"怎么造出新对象呢\",{\"1\":{\"1861\":1,\"1895\":1}}],[\"怎么实现我不管\",{\"1\":{\"1087\":1}}],[\"怎么搞定我不管\",{\"1\":{\"1066\":1}}],[\"怎么样构建你的缓存\",{\"1\":{\"6901\":1}}],[\"怎么样\",{\"1\":{\"421\":1,\"459\":1}}],[\"拿实际工作经历来说\",{\"1\":{\"2575\":1}}],[\"伽玛\",{\"1\":{\"2574\":1}}],[\"普遍存在\",{\"1\":{\"2574\":1}}],[\"普通类\",{\"1\":{\"5888\":1}}],[\"普通语句块\",{\"1\":{\"5504\":1,\"5510\":1,\"5512\":1}}],[\"普通的类\",{\"1\":{\"3935\":1}}],[\"普通索引三种\",{\"1\":{\"3373\":1}}],[\"普通索引名则为idx\",{\"1\":{\"3355\":1}}],[\"普通箭头表示关联或依赖\",{\"1\":{\"2918\":1}}],[\"普通方案解决天气预报需求\",{\"0\":{\"1692\":1}}],[\"普通房子\",{\"1\":{\"713\":1}}],[\"普通房子屋顶\",{\"1\":{\"709\":1}}],[\"普通房子封顶\",{\"1\":{\"695\":1}}],[\"普通房子砌墙\",{\"1\":{\"695\":1,\"709\":1}}],[\"普通房子打地基\",{\"1\":{\"695\":1,\"709\":1}}],[\"普通用户\",{\"1\":{\"652\":1}}],[\"俗称\",{\"1\":{\"2571\":1}}],[\"好吧\",{\"1\":{\"6744\":1}}],[\"好像是结束了一段代码块\",{\"1\":{\"4122\":1}}],[\"好的替代品\",{\"1\":{\"6939\":1,\"6956\":1,\"6973\":1,\"6980\":1}}],[\"好的单元测试能够最大限度地规避线上故障\",{\"1\":{\"3329\":1}}],[\"好的单元测试宏观上来说\",{\"1\":{\"3299\":1}}],[\"好的单元测试必须遵守air原则\",{\"1\":{\"3299\":1}}],[\"好的命名\",{\"1\":{\"3219\":1}}],[\"好的代码设计\",{\"1\":{\"2696\":1}}],[\"好处\",{\"1\":{\"2566\":1}}],[\"好了\",{\"1\":{\"481\":1}}],[\"阅读计算机科学领域最糟糕的错误了解更多为何不使用\",{\"1\":{\"6825\":1}}],[\"阅读了很多别人写的源码和框架\",{\"1\":{\"2566\":1}}],[\"阅读是自我提升最便捷的方式\",{\"1\":{\"144\":1}}],[\"听说过什么是设计模式\",{\"1\":{\"2563\":1}}],[\"刚刚调用该方法的调用处\",{\"1\":{\"4955\":1}}],[\"刚刚的设计实现方式\",{\"1\":{\"2702\":1}}],[\"刚刚对\",{\"1\":{\"2694\":1}}],[\"刚刚我们讲了\",{\"1\":{\"2399\":1}}],[\"刚刚我们讲了单例类对象是进程唯一的\",{\"1\":{\"2392\":1}}],[\"刚刚我们提到了单例的很多问题\",{\"1\":{\"2378\":1}}],[\"刚开始学编程不久\",{\"1\":{\"2563\":1}}],[\"层的if\",{\"1\":{\"3194\":1}}],[\"层\",{\"1\":{\"2563\":1,\"2564\":1,\"2565\":1,\"2566\":1,\"2567\":1,\"3194\":1}}],[\"掌握设计模式的层次\",{\"0\":{\"2562\":1}}],[\"降序排序\",{\"1\":{\"2546\":1}}],[\"降低沟通成本\",{\"1\":{\"2983\":1}}],[\"降低系统中对象间的耦合度\",{\"1\":{\"2626\":1}}],[\"降低系统的耦合度\",{\"1\":{\"748\":1}}],[\"降低系统的管理和维护成本\",{\"1\":{\"635\":1}}],[\"降低对象之间的耦合\",{\"1\":{\"2255\":1}}],[\"降低代码评审的速度\",{\"1\":{\"4096\":1}}],[\"降低代码耦合\",{\"1\":{\"2254\":1}}],[\"降低代码可读性\",{\"1\":{\"496\":1}}],[\"降低耦合度\",{\"1\":{\"2247\":1,\"4677\":1}}],[\"降低维护带来的新风险\",{\"1\":{\"2236\":1}}],[\"降低需求变更时引入的风险\",{\"1\":{\"2115\":1}}],[\"降低类对接口的依赖性\",{\"1\":{\"2043\":1}}],[\"降低类的复杂度\",{\"1\":{\"2009\":1,\"2027\":1}}],[\"降低它们之间的耦合性\",{\"1\":{\"2039\":1}}],[\"降低变更引起的风险\",{\"1\":{\"2029\":1}}],[\"降低大量内存空间的消耗\",{\"1\":{\"1446\":1}}],[\"降低内存消耗\",{\"1\":{\"1390\":1}}],[\"降低了构建大型系统的风险\",{\"1\":{\"5758\":1}}],[\"降低了阅读和修改代码的难度\",{\"1\":{\"2754\":1}}],[\"降低了类之间的耦合度\",{\"1\":{\"2159\":1}}],[\"降低了代码出错的可能性\",{\"1\":{\"2114\":1}}],[\"降低了系统的耦合性\",{\"1\":{\"2045\":1}}],[\"降低了对象之间的耦合度\",{\"1\":{\"1933\":1}}],[\"降低了对象之间的耦合性\",{\"1\":{\"1573\":1}}],[\"降低了目标与观察者之间的耦合关系\",{\"1\":{\"1671\":1}}],[\"降低了耦合\",{\"1\":{\"1608\":1}}],[\"降低了程序内存的占用\",{\"1\":{\"1441\":1}}],[\"降低了大型软件系统中的编译依赖性\",{\"1\":{\"1101\":1}}],[\"降低了子系统与客户端之间的耦合度\",{\"1\":{\"1099\":1}}],[\"匿名类\",{\"1\":{\"2546\":1}}],[\"叫声策略接口\",{\"1\":{\"2539\":1}}],[\"叫声策略模式类\",{\"1\":{\"2536\":1}}],[\"叫做单一责任原则\",{\"1\":{\"1556\":1}}],[\"玩具鸭不会飞翔~~~\",{\"1\":{\"2526\":1}}],[\"玩具鸭不会游泳~~\",{\"1\":{\"2526\":1,\"2539\":1}}],[\"玩具鸭不能叫~~\",{\"1\":{\"2526\":1,\"2539\":1}}],[\"玩具鸭\",{\"1\":{\"2526\":1,\"2539\":1}}],[\"玩游戏时的中间结果存档功能\",{\"1\":{\"1620\":1}}],[\"溢出效应\",{\"1\":{\"2523\":1}}],[\"尤其是一些看起来\",{\"1\":{\"5070\":1}}],[\"尤其是text类型的字段\",{\"1\":{\"3394\":1}}],[\"尤其是参数\",{\"1\":{\"3215\":1}}],[\"尤其是批量操作的接口\",{\"1\":{\"3204\":1}}],[\"尤其是条件表达式\",{\"1\":{\"3200\":1}}],[\"尤其是现阶段各种第三方sdk\",{\"1\":{\"1096\":1}}],[\"尤其在线程池场景下\",{\"1\":{\"3163\":1}}],[\"尤其超类的局部改动\",{\"1\":{\"2523\":1}}],[\"飞\",{\"1\":{\"2725\":1}}],[\"飞翔技术高超\",{\"1\":{\"2535\":1}}],[\"飞翔技术一般\",{\"1\":{\"2535\":1}}],[\"飞行策略接口\",{\"1\":{\"2539\":1}}],[\"飞行策略模式类\",{\"1\":{\"2534\":1}}],[\"飞行等\",{\"1\":{\"2515\":1}}],[\"飞机\",{\"1\":{\"2015\":1,\"2016\":1,\"2020\":1,\"2025\":1}}],[\"鸭子信息类\",{\"1\":{\"2538\":1}}],[\"鸭子会飞翔~~~\",{\"1\":{\"2521\":1}}],[\"鸭子会游泳~~\",{\"1\":{\"2521\":1,\"2539\":1}}],[\"鸭子嘎嘎叫~~\",{\"1\":{\"2521\":1,\"2539\":1}}],[\"鸭子有各种行为\",{\"1\":{\"2515\":1}}],[\"鸭子项目\",{\"0\":{\"2513\":1}}],[\"水平空格\",{\"0\":{\"4068\":1}}],[\"水平空格字符\",{\"1\":{\"3948\":1}}],[\"水平对齐有助于阅读代码\",{\"1\":{\"4096\":1}}],[\"水平对齐\",{\"0\":{\"4091\":1},\"1\":{\"4058\":1,\"4092\":1}}],[\"水鸭等\",{\"1\":{\"2515\":1}}],[\"水中运行\",{\"1\":{\"2020\":1}}],[\"北京鸭的实际飞翔能力\",{\"1\":{\"2541\":1}}],[\"北京鸭不能飞翔\",{\"1\":{\"2521\":1}}],[\"北京鸭\",{\"1\":{\"2515\":1,\"2541\":1}}],[\"北京的奶酪\",{\"1\":{\"1246\":2}}],[\"北京的胡椒\",{\"1\":{\"1236\":1,\"1246\":2}}],[\"少用if\",{\"1\":{\"3192\":1}}],[\"少用继承\",{\"1\":{\"2493\":1,\"2549\":1}}],[\"少使用继承\",{\"1\":{\"2253\":1}}],[\"策略接口\",{\"1\":{\"2546\":2}}],[\"策略方法\",{\"1\":{\"2512\":1}}],[\"策略组\",{\"1\":{\"2489\":1}}],[\"策略模式在很多地方用到\",{\"1\":{\"2554\":1}}],[\"策略模式将算法封装在独立的\",{\"1\":{\"2551\":1}}],[\"策略模式体现了\",{\"1\":{\"2550\":1}}],[\"策略模式解决鸭子项目\",{\"0\":{\"2528\":1}}],[\"策略模式的应用场景\",{\"0\":{\"2553\":1}}],[\"策略模式的核心思想是\",{\"1\":{\"2549\":1}}],[\"策略模式的关键是\",{\"1\":{\"2548\":1}}],[\"策略模式的注意事项和细节\",{\"0\":{\"2547\":1}}],[\"策略模式的主要角色如下\",{\"1\":{\"2505\":1}}],[\"策略模式的重心不是如何实现算法\",{\"1\":{\"2504\":1}}],[\"策略模式的结构与实现\",{\"0\":{\"2503\":1}}],[\"策略模式是准备一组算法\",{\"1\":{\"2504\":1}}],[\"策略模式造成很多的策略类\",{\"1\":{\"2502\":1}}],[\"策略模式把算法的使用放到环境类中\",{\"1\":{\"2499\":1}}],[\"策略模式提供了可以替换继承关系的办法\",{\"1\":{\"2551\":1}}],[\"策略模式提供了对开闭原则的完美支持\",{\"1\":{\"2498\":1}}],[\"策略模式提供了一系列的可供重用的算法族\",{\"1\":{\"2496\":1}}],[\"策略模式可以提供相同行为的不同实现\",{\"1\":{\"2497\":1}}],[\"策略模式属于对象行为模式\",{\"1\":{\"2489\":1}}],[\"策略模式基本介绍\",{\"0\":{\"2484\":1}}],[\"策略模式\",{\"1\":{\"1034\":1,\"2488\":1,\"2527\":1,\"2530\":1,\"2546\":1,\"2630\":1,\"2744\":1,\"3194\":1,\"3324\":1}}],[\"送积分等方法\",{\"1\":{\"2485\":1}}],[\"送商品\",{\"1\":{\"2485\":1}}],[\"超时规则\",{\"1\":{\"4381\":1}}],[\"超时设置生效顺序一般为\",{\"1\":{\"3442\":1}}],[\"超出最大长度后\",{\"1\":{\"3231\":1}}],[\"超出需要换行\",{\"1\":{\"3030\":1}}],[\"超过当前流行的模板引擎\",{\"1\":{\"6623\":1}}],[\"超过三个表禁止join\",{\"1\":{\"3369\":1}}],[\"超过操作系统大小限制\",{\"1\":{\"3291\":1}}],[\"超过integer的表示范围而溢出成为负数\",{\"1\":{\"3055\":1}}],[\"超过\",{\"1\":{\"3031\":1,\"3033\":1,\"3194\":1,\"3229\":1}}],[\"超过则不允许该链建立\",{\"1\":{\"1981\":1}}],[\"超类里放行为接口对象\",{\"1\":{\"2530\":1}}],[\"超市促销可以釆用打折\",{\"1\":{\"2485\":1}}],[\"骑自行车或自己开私家车等\",{\"1\":{\"2485\":1}}],[\"乘坐火车\",{\"1\":{\"2485\":1}}],[\"检测插件相同的\",{\"1\":{\"3512\":1}}],[\"检测失败时\",{\"1\":{\"2473\":1}}],[\"检查规则在一个\",{\"1\":{\"6988\":1}}],[\"检查框架\",{\"1\":{\"6787\":1}}],[\"检查是否是同一个类型\",{\"1\":{\"5437\":1}}],[\"检查是否为同一个对象的引用\",{\"1\":{\"5436\":1}}],[\"检查的方法用check做前缀\",{\"1\":{\"3006\":1}}],[\"检查\",{\"1\":{\"2315\":1}}],[\"待测试类\",{\"1\":{\"4404\":1}}],[\"待发货\",{\"1\":{\"3452\":1}}],[\"待办事宜\",{\"1\":{\"3222\":1}}],[\"待付款\",{\"1\":{\"2469\":1,\"3452\":1}}],[\"待付款状态类\",{\"1\":{\"2467\":1}}],[\"待会讲到\",{\"1\":{\"1341\":1}}],[\"付款\",{\"1\":{\"2465\":1}}],[\"定时任务\",{\"1\":{\"6656\":1}}],[\"定位异常\",{\"1\":{\"3805\":1}}],[\"定价发布\",{\"1\":{\"2465\":1}}],[\"定义标准\",{\"0\":{\"6228\":1},\"1\":{\"6229\":1}}],[\"定义泛型变量\",{\"1\":{\"5042\":1,\"5044\":1}}],[\"定义泛型方法时\",{\"1\":{\"5027\":1}}],[\"定义泛型方法语法格式\",{\"1\":{\"5023\":1}}],[\"定义泛型接口的子类\",{\"1\":{\"5020\":1}}],[\"定义属性\",{\"1\":{\"5020\":1}}],[\"定义抽象方法\",{\"1\":{\"5020\":1}}],[\"定义抽象类\",{\"1\":{\"599\":1}}],[\"定义两个泛型类型的对象\",{\"1\":{\"5017\":1}}],[\"定义自己的注解\",{\"1\":{\"4641\":1}}],[\"定义注解后\",{\"1\":{\"4623\":1}}],[\"定义在retentionpolicy枚举中\",{\"1\":{\"4593\":1}}],[\"定义\",{\"0\":{\"3994\":1,\"4194\":1},\"1\":{\"3931\":1,\"4611\":1}}],[\"定义依赖的时候\",{\"1\":{\"3432\":1}}],[\"定义gav遵从以下规则\",{\"1\":{\"3426\":1}}],[\"定义字段类型为text\",{\"1\":{\"3358\":1}}],[\"定义时区分unchecked\",{\"1\":{\"3277\":1}}],[\"定义线程组名称\",{\"1\":{\"3157\":1}}],[\"定义do\",{\"1\":{\"3059\":1}}],[\"定义数据对象do类时\",{\"1\":{\"3055\":1}}],[\"定义为基本数据类型boolean\",{\"1\":{\"2994\":1}}],[\"定义为一个抽象类\",{\"1\":{\"2724\":1}}],[\"定义整形数组int\",{\"1\":{\"2993\":1}}],[\"定义子类需要通过\",{\"1\":{\"2912\":1}}],[\"定义到父类中\",{\"1\":{\"2745\":1}}],[\"定义出一个接口叫状态接口\",{\"1\":{\"2448\":1}}],[\"定义环境类的初始状态\",{\"1\":{\"2438\":1}}],[\"定义中提到\",{\"1\":{\"2387\":1}}],[\"定义的所有程序\",{\"1\":{\"2104\":1}}],[\"定义接口\",{\"1\":{\"2082\":1}}],[\"定义同事类的接口\",{\"1\":{\"1581\":1}}],[\"定义访问和遍历聚合元素的接口\",{\"1\":{\"1520\":1}}],[\"定义存储\",{\"1\":{\"1518\":1}}],[\"定义表达式\",{\"1\":{\"1489\":1}}],[\"定义解释器的接口\",{\"1\":{\"1468\":1}}],[\"定义它的文法的一种表示\",{\"1\":{\"1455\":1}}],[\"定义它的语法表示\",{\"1\":{\"1070\":1}}],[\"定义了算法的骨架\",{\"1\":{\"2653\":1}}],[\"定义了一系列算法\",{\"1\":{\"2630\":1}}],[\"定义了一个公共接口\",{\"1\":{\"2506\":1}}],[\"定义了一个\",{\"1\":{\"1277\":1}}],[\"定义了一个创建对象的抽象方法\",{\"1\":{\"1227\":1}}],[\"定义了一个创建对象的类\",{\"1\":{\"1171\":1}}],[\"定义了策略接口\",{\"1\":{\"2492\":1}}],[\"定义了产品的规范\",{\"1\":{\"1231\":1,\"1291\":1}}],[\"定义了抽象方法\",{\"1\":{\"718\":1}}],[\"定义各个子系统对象\",{\"1\":{\"1136\":1}}],[\"定义新的操作行为\",{\"1\":{\"1080\":1}}],[\"定义一个异常类应包含两个构造函数\",{\"1\":{\"4759\":1}}],[\"定义一个测试方法变得简单很多\",{\"1\":{\"4293\":1}}],[\"定义一个访问具体元素的接口\",{\"1\":{\"2945\":1}}],[\"定义一个中介对象来简化原有对象之间的交互关系\",{\"1\":{\"2626\":1}}],[\"定义一个操作中的算法骨架\",{\"1\":{\"2621\":1}}],[\"定义一个用于创建产品的接口\",{\"1\":{\"2606\":1}}],[\"定义一个处理请求的接口\",{\"1\":{\"1944\":1}}],[\"定义一个接口\",{\"1\":{\"1834\":1,\"2433\":1}}],[\"定义一个\",{\"1\":{\"1580\":1,\"2725\":1}}],[\"定义一个抽象方法\",{\"1\":{\"1248\":1}}],[\"定义一个抽象接口以规范准备接收附加责任的对象\",{\"1\":{\"887\":1}}],[\"定义一个可以实例化\",{\"1\":{\"1208\":1}}],[\"定义一个高层接口\",{\"1\":{\"1123\":1}}],[\"定义一套流程模板\",{\"1\":{\"1029\":1}}],[\"定义一些通用的方法\",{\"1\":{\"818\":1}}],[\"定义实现化角色的接口\",{\"1\":{\"601\":1}}],[\"便捷的jdbc抽象\",{\"1\":{\"6346\":1}}],[\"便会发生极其严重的\",{\"1\":{\"2462\":1}}],[\"便于开发人员查看\",{\"1\":{\"3286\":1}}],[\"便于错误排查人员快速定位问题\",{\"1\":{\"3226\":1}}],[\"便于阅读\",{\"1\":{\"3066\":1}}],[\"便于排查问题\",{\"1\":{\"3062\":1}}],[\"便于复用和维护\",{\"1\":{\"3036\":1}}],[\"便于代码复用\",{\"1\":{\"2643\":1}}],[\"便于子类继续扩展\",{\"1\":{\"2642\":1}}],[\"便于其他程序员的阅读和理解\",{\"1\":{\"2583\":1}}],[\"便于其他第三方也能接入气象站获取数据\",{\"1\":{\"1689\":1}}],[\"便于理解\",{\"1\":{\"2242\":1}}],[\"便于控制细节风险\",{\"1\":{\"669\":1}}],[\"抢单逻辑\",{\"1\":{\"2460\":1}}],[\"抢单\",{\"1\":{\"2460\":1}}],[\"抢单等等步骤\",{\"1\":{\"2458\":1}}],[\"审批生效\",{\"1\":{\"3255\":1}}],[\"审批人\",{\"1\":{\"1961\":1,\"1965\":1}}],[\"审核逻辑\",{\"1\":{\"2460\":1}}],[\"审核\",{\"1\":{\"2460\":1}}],[\"项目解决了这个问题\",{\"1\":{\"6913\":1}}],[\"项目\",{\"1\":{\"6895\":1}}],[\"项目都应该包含你的根\",{\"1\":{\"6866\":1}}],[\"项目一样采用版本控制和发布的方式\",{\"1\":{\"6864\":1}}],[\"项目对象模型\",{\"1\":{\"6864\":1}}],[\"项目的编译配置信息\",{\"1\":{\"6213\":1}}],[\"项目基本配置信息\",{\"1\":{\"6212\":1}}],[\"项目中的这个模块实现就会使用到状态模式\",{\"1\":{\"2458\":1}}],[\"项目主页配置\",{\"1\":{\"3\":1}}],[\"项目主页\",{\"0\":{\"0\":1}}],[\"随意复制和粘贴代码\",{\"1\":{\"3467\":1}}],[\"随着代码的重复次数不断增加\",{\"1\":{\"3467\":1}}],[\"随着系统演进\",{\"1\":{\"3463\":1}}],[\"随着元素增加而被迫不断扩容\",{\"1\":{\"3123\":1}}],[\"随着id越来越大\",{\"1\":{\"3055\":1}}],[\"随着操作的不同\",{\"1\":{\"2458\":1}}],[\"随环境的改变而改变\",{\"1\":{\"1388\":1}}],[\"借贷平台的订单\",{\"1\":{\"2458\":1}}],[\"参见第六条\",{\"1\":{\"5677\":1}}],[\"参见定义pojo类以及数据库字段定义规定\",{\"1\":{\"3395\":1}}],[\"参考资料\",{\"0\":{\"5580\":1,\"5806\":1}}],[\"参考自\",{\"1\":{\"5077\":1}}],[\"参考下方代码\",{\"1\":{\"4925\":1}}],[\"参考文档\",{\"0\":{\"5585\":1}}],[\"参考文章\",{\"0\":{\"4421\":1,\"4488\":1,\"4698\":1,\"4987\":1,\"5237\":1,\"6131\":1,\"6269\":1}}],[\"参考文末附表\",{\"1\":{\"3254\":1}}],[\"参考jdk原生注释\",{\"1\":{\"3087\":1}}],[\"参考示例\",{\"1\":{\"3030\":1}}],[\"参考\",{\"1\":{\"2982\":1,\"3005\":1,\"3006\":1,\"3152\":1,\"3153\":1,\"3180\":1,\"3181\":1,\"3182\":1,\"3205\":1,\"3206\":1,\"3217\":1,\"3218\":1,\"3219\":1,\"3222\":1,\"3226\":1,\"3237\":1,\"3260\":1,\"3261\":1,\"3262\":1,\"3263\":1,\"3278\":1,\"3320\":1,\"3325\":1,\"3366\":1,\"3378\":1,\"3391\":1,\"3392\":1,\"3403\":1,\"3405\":1,\"3418\":1,\"3419\":1,\"3439\":1,\"3448\":1,\"3470\":1,\"3471\":1,\"3472\":1,\"3473\":1,\"3474\":1,\"6251\":1}}],[\"参加抽奖\",{\"1\":{\"2456\":1}}],[\"参数等\",{\"1\":{\"6216\":1}}],[\"参数传递\",{\"0\":{\"5331\":1}}],[\"参数传递等方式声明的类之间的依赖关系\",{\"1\":{\"2358\":1}}],[\"参数类型\",{\"1\":{\"5914\":1,\"5916\":3}}],[\"参数类型不一样\",{\"1\":{\"5159\":1}}],[\"参数类型避免定义为object\",{\"1\":{\"3042\":1}}],[\"参数的构造器来进行转换\",{\"1\":{\"5595\":1}}],[\"参数的状态不合适\",{\"1\":{\"4882\":1}}],[\"参数的值不合适\",{\"1\":{\"4880\":1}}],[\"参数不能为0\",{\"1\":{\"4754\":1}}],[\"参数化类型\",{\"1\":{\"5233\":1}}],[\"参数化测试允许开发人员使用不同的值反复运行同\",{\"1\":{\"4386\":1}}],[\"参数化测试\",{\"0\":{\"4385\":1}}],[\"参数化运行器\",{\"1\":{\"4315\":1,\"4399\":1}}],[\"参数和值\",{\"1\":{\"4693\":1}}],[\"参数和\",{\"1\":{\"4371\":1}}],[\"参数格式不匹配\",{\"1\":{\"3688\":1}}],[\"参数可以使用枚举类型\",{\"1\":{\"3430\":1}}],[\"参数异常说明外\",{\"1\":{\"3209\":1}}],[\"参数错误不太可能到底层才会暴露问题\",{\"1\":{\"3206\":1}}],[\"参数校验时间几乎可以忽略不计\",{\"1\":{\"3205\":1}}],[\"参数mergefunction的作用是当出现key重复时\",{\"1\":{\"3092\":1}}],[\"参数很多的方法调用可能超过\",{\"1\":{\"3033\":1}}],[\"参数名称\",{\"1\":{\"5940\":1,\"5942\":2}}],[\"参数名称tp\",{\"1\":{\"5940\":1,\"5942\":2}}],[\"参数名称与类成员变量名称一致\",{\"1\":{\"3069\":1}}],[\"参数名以\",{\"1\":{\"4185\":1}}],[\"参数名为mergefunction的方法\",{\"1\":{\"3092\":1}}],[\"参数名\",{\"0\":{\"4184\":1},\"1\":{\"2990\":1}}],[\"参数\",{\"1\":{\"1487\":1,\"1594\":1,\"3076\":1,\"3208\":1,\"3288\":1,\"4520\":1,\"4524\":1,\"4525\":1}}],[\"参数多\",{\"1\":{\"737\":1}}],[\"次或者多次\",{\"1\":{\"6963\":1}}],[\"次要目的用于指导编码\",{\"1\":{\"3470\":1}}],[\"次版本号\",{\"1\":{\"3427\":2}}],[\"次方\",{\"1\":{\"3366\":1}}],[\"次\",{\"1\":{\"3123\":1,\"3124\":1,\"3173\":1}}],[\"次抽奖\",{\"1\":{\"2456\":1}}],[\"次奖\",{\"1\":{\"2456\":1}}],[\"奖品有\",{\"1\":{\"2456\":1}}],[\"奖品发放完毕状态\",{\"1\":{\"2454\":1}}],[\"奖品发送完了\",{\"1\":{\"2454\":4}}],[\"奖品数量\",{\"1\":{\"2452\":1}}],[\"奖品数量固定\",{\"1\":{\"2442\":1}}],[\"正是由于它使用的基于\",{\"1\":{\"6821\":1}}],[\"正是因为它持有一堆对象\",{\"1\":{\"1327\":1}}],[\"正如名字表示的那样\",{\"1\":{\"6653\":1}}],[\"正如在\",{\"1\":{\"4019\":1,\"4028\":1,\"4258\":1}}],[\"正数高位补0\",{\"1\":{\"5740\":1}}],[\"正在授权中\",{\"1\":{\"3641\":1}}],[\"正在抽奖\",{\"1\":{\"2454\":1}}],[\"正式版\",{\"1\":{\"3486\":1}}],[\"正式发布的类库必须先去中央仓库进行查证\",{\"1\":{\"3428\":1}}],[\"正常运行两年后\",{\"1\":{\"3388\":1}}],[\"正则输入源串拒绝服务redos\",{\"1\":{\"3341\":1}}],[\"正确执行后的返回\",{\"1\":{\"3558\":1}}],[\"正确的程序在运行中\",{\"1\":{\"4728\":1}}],[\"正确的输入\",{\"1\":{\"3312\":1}}],[\"正确的英文拼写和语法可以让阅读者易于理解\",{\"1\":{\"2987\":1}}],[\"正确使用设计模式具有以下优点\",{\"1\":{\"2587\":1}}],[\"正例\",{\"1\":{\"2982\":1,\"2987\":1,\"2988\":1,\"2989\":1,\"2990\":1,\"2991\":1,\"2993\":1,\"2995\":1,\"2999\":1,\"3000\":1,\"3001\":1,\"3003\":1,\"3004\":2,\"3005\":1,\"3013\":1,\"3015\":1,\"3017\":1,\"3024\":1,\"3026\":1,\"3028\":1,\"3030\":1,\"3034\":1,\"3036\":1,\"3037\":1,\"3042\":1,\"3045\":1,\"3050\":1,\"3055\":1,\"3056\":1,\"3058\":1,\"3066\":1,\"3078\":1,\"3082\":1,\"3087\":1,\"3090\":1,\"3092\":1,\"3104\":1,\"3114\":1,\"3121\":1,\"3123\":1,\"3124\":1,\"3156\":1,\"3160\":1,\"3163\":1,\"3167\":1,\"3171\":1,\"3175\":1,\"3177\":1,\"3178\":1,\"3194\":1,\"3196\":1,\"3203\":1,\"3210\":1,\"3226\":1,\"3227\":1,\"3234\":1,\"3247\":1,\"3251\":1,\"3260\":1,\"3265\":1,\"3267\":1,\"3276\":1,\"3284\":1,\"3286\":1,\"3287\":1,\"3288\":1,\"3290\":1,\"3292\":1,\"3293\":1,\"3305\":1,\"3316\":1,\"3351\":1,\"3352\":1,\"3361\":1,\"3364\":1,\"3366\":1,\"3372\":1,\"3373\":1,\"3374\":1,\"3376\":1,\"3382\":1,\"3388\":1,\"3389\":1,\"3398\":1,\"3426\":2,\"3443\":1,\"3450\":1,\"3452\":1,\"3456\":1,\"3467\":1,\"3471\":1,\"3477\":1}}],[\"扣了积分才能抽奖喔\",{\"1\":{\"2454\":1}}],[\"扣除50积分成功\",{\"1\":{\"2454\":1}}],[\"扣除后\",{\"1\":{\"2454\":1}}],[\"扣除积分后改变其状态\",{\"1\":{\"2454\":1}}],[\"扣除积分\",{\"1\":{\"2454\":1}}],[\"扣分\",{\"1\":{\"2452\":1}}],[\"抽查表明\",{\"1\":{\"3103\":1}}],[\"抽取出来\",{\"1\":{\"2745\":1}}],[\"抽完奖后\",{\"1\":{\"2454\":1}}],[\"抽完就不能抽奖\",{\"1\":{\"2442\":1}}],[\"抽奖活动结束\",{\"1\":{\"2454\":1}}],[\"抽奖活动问题\",{\"0\":{\"2439\":1}}],[\"抽奖\",{\"1\":{\"2452\":1}}],[\"抽奖方法\",{\"1\":{\"2449\":1}}],[\"抽象以及更高级的一些概念\",{\"1\":{\"5673\":1}}],[\"抽象元素类\",{\"1\":{\"2953\":1}}],[\"抽象元素\",{\"1\":{\"2947\":1}}],[\"抽象访问者\",{\"1\":{\"2945\":1,\"2953\":1}}],[\"抽象思维和总结能力的局限性\",{\"1\":{\"3472\":1}}],[\"抽象思维\",{\"1\":{\"2704\":1}}],[\"抽象模板类\",{\"1\":{\"2652\":1}}],[\"抽象模板\",{\"1\":{\"2651\":1}}],[\"抽象策略类\",{\"1\":{\"2512\":1}}],[\"抽象策略\",{\"1\":{\"2506\":1}}],[\"抽象状态类\",{\"1\":{\"2438\":1}}],[\"抽象状态\",{\"1\":{\"2433\":1}}],[\"抽象指的是接口或抽象类\",{\"1\":{\"2065\":1}}],[\"抽象的东西要稳定的多\",{\"1\":{\"2065\":1}}],[\"抽象的方法\",{\"1\":{\"709\":1}}],[\"抽象不应该依赖细节\",{\"1\":{\"2063\":1}}],[\"抽象处理者角色\",{\"1\":{\"1953\":1}}],[\"抽象处理者\",{\"1\":{\"1944\":1}}],[\"抽象原型类\",{\"1\":{\"1751\":1}}],[\"抽象目标\",{\"1\":{\"1686\":1}}],[\"抽象观察者\",{\"1\":{\"1681\":1,\"1686\":1}}],[\"抽象主题\",{\"1\":{\"1679\":1,\"1828\":1}}],[\"抽象同事类\",{\"1\":{\"1581\":1,\"1586\":1}}],[\"抽象中介者\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"抽象迭代器\",{\"1\":{\"1520\":1,\"1525\":1}}],[\"抽象聚合\",{\"1\":{\"1518\":1,\"1525\":1}}],[\"抽象成迭代器类来实现的\",{\"1\":{\"1516\":1}}],[\"抽象运算符号解析器\",{\"1\":{\"1487\":1}}],[\"抽象表达式类\",{\"1\":{\"1476\":1}}],[\"抽象表达式\",{\"1\":{\"1468\":1}}],[\"抽象享元角色\",{\"1\":{\"1393\":1,\"1406\":1}}],[\"抽象工厂结构图\",{\"1\":{\"1293\":1}}],[\"抽象工厂增强了程序的可扩展性\",{\"1\":{\"1285\":1}}],[\"抽象工厂可以保证客户端始终只使用同一个产品的产品组\",{\"1\":{\"1284\":1}}],[\"抽象工厂\",{\"0\":{\"1275\":1},\"1\":{\"1229\":1,\"1280\":1,\"1289\":1,\"1308\":1}}],[\"抽象工厂模式应用实例\",{\"0\":{\"1297\":1}}],[\"抽象工厂模式有多个抽象产品\",{\"1\":{\"1291\":1}}],[\"抽象工厂模式就是对简单工厂模式的改进\",{\"1\":{\"1279\":1}}],[\"抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合\",{\"1\":{\"1278\":1}}],[\"抽象工厂模式实现对产品家族的创建\",{\"1\":{\"729\":1}}],[\"抽象工厂模式\",{\"1\":{\"728\":1,\"1166\":1,\"1226\":1,\"1277\":1,\"1318\":1,\"2607\":1}}],[\"抽象产品只能生产一种产品\",{\"1\":{\"1226\":1}}],[\"抽象产品\",{\"1\":{\"1185\":1,\"1231\":1,\"1291\":1}}],[\"抽象装饰角色\",{\"1\":{\"894\":1}}],[\"抽象装饰\",{\"1\":{\"889\":1}}],[\"抽象构件角色\",{\"1\":{\"894\":1}}],[\"抽象构件和树叶构件没有对子对象的管理方法\",{\"1\":{\"826\":1}}],[\"抽象构件\",{\"1\":{\"818\":1,\"832\":1,\"834\":1,\"887\":1}}],[\"抽象命令\",{\"1\":{\"766\":1}}],[\"抽象命令类\",{\"1\":{\"759\":1}}],[\"抽象必然会额外增加类的数量\",{\"1\":{\"755\":1}}],[\"抽象接口\",{\"1\":{\"748\":1}}],[\"抽象方法一定位于抽象类中\",{\"1\":{\"5374\":1}}],[\"抽象方法的返回值就是泛型类型\",{\"1\":{\"5020\":1}}],[\"抽象方法2的实现被调用\",{\"1\":{\"2663\":1}}],[\"抽象方法1的实现被调用\",{\"1\":{\"2663\":1}}],[\"抽象方法\",{\"1\":{\"718\":1,\"1248\":1,\"1427\":1,\"2089\":3,\"2152\":1,\"2655\":1,\"2663\":2,\"2677\":1}}],[\"抽象建造者\",{\"1\":{\"676\":1,\"682\":1}}],[\"抽象\",{\"0\":{\"2750\":1},\"1\":{\"637\":1,\"645\":1,\"2352\":1}}],[\"抽象类logfactory加载具体实现的步骤如下\",{\"1\":{\"6202\":1}}],[\"抽象类与oop三大特征\",{\"1\":{\"5815\":1}}],[\"抽象类与接口之间有什么不同\",{\"0\":{\"5676\":1}}],[\"抽象类与接口\",{\"0\":{\"5372\":1}}],[\"抽象类可以没有抽象方法\",{\"1\":{\"5696\":1,\"5700\":1}}],[\"抽象类可以有静态方法\",{\"1\":{\"5697\":1}}],[\"抽象类可以有普通方法\",{\"1\":{\"5696\":1}}],[\"抽象类可以有普通成员变量\",{\"1\":{\"5694\":1}}],[\"抽象类可以有构造方法\",{\"1\":{\"5693\":1}}],[\"抽象类可以很好的定义一个家族类的默认行为\",{\"1\":{\"5677\":1}}],[\"抽象类提供了一种\",{\"1\":{\"5384\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"5375\":1}}],[\"抽象类和最终类\",{\"0\":{\"5699\":1}}],[\"抽象类和接口都可有静态成员变量\",{\"1\":{\"5695\":1}}],[\"抽象类和接口有很多不同之处\",{\"1\":{\"5677\":1}}],[\"抽象类和普通类最大的区别是\",{\"1\":{\"5375\":1}}],[\"抽象类和抽象方法都使用\",{\"1\":{\"5374\":1}}],[\"抽象类一般会包含抽象方法\",{\"1\":{\"5374\":1}}],[\"抽象类命名使用abstract或base开头\",{\"1\":{\"2992\":1}}],[\"抽象类或抽象方法用斜体表示\",{\"1\":{\"2843\":1}}],[\"抽象类中的方法可以是public\",{\"1\":{\"5698\":1}}],[\"抽象类中的具体方法被调用\",{\"1\":{\"2663\":1}}],[\"抽象类中静态成员变量访问类型任意\",{\"1\":{\"5695\":1}}],[\"抽象类中\",{\"1\":{\"2725\":1}}],[\"抽象类表达式\",{\"1\":{\"1487\":1}}],[\"抽象类别\",{\"1\":{\"664\":1}}],[\"抽象类\",{\"1\":{\"624\":1,\"676\":1,\"2467\":1,\"2651\":1,\"2663\":1,\"2676\":1,\"2677\":1,\"5373\":1}}],[\"抽象化角色\",{\"1\":{\"605\":1}}],[\"抽象化\",{\"1\":{\"599\":1}}],[\"抽象与实现分离\",{\"1\":{\"591\":1}}],[\"条规则\",{\"1\":{\"4074\":1}}],[\"条新规约\",{\"1\":{\"3520\":1,\"3524\":1,\"3532\":1}}],[\"条件判断语句中使用\",{\"1\":{\"5352\":1}}],[\"条件判断语句会过于臃肿\",{\"1\":{\"2416\":1}}],[\"条件控制\",{\"1\":{\"3266\":1}}],[\"条件表达式中出现赋值操作\",{\"1\":{\"3201\":1}}],[\"条下方正例提示\",{\"1\":{\"3021\":1}}],[\"条\",{\"1\":{\"2994\":1,\"3516\":1,\"3528\":1,\"3532\":2}}],[\"条条大道通罗马\",{\"1\":{\"1036\":1}}],[\"释放对象\",{\"1\":{\"2406\":1}}],[\"入参省略\",{\"1\":{\"2406\":1}}],[\"集成\",{\"1\":{\"6987\":1}}],[\"集成java\",{\"1\":{\"6627\":1}}],[\"集成测试和功能行测试平台\",{\"1\":{\"6627\":1}}],[\"集成了spring的一些功能\",{\"1\":{\"4319\":1,\"4402\":1}}],[\"集群管理\",{\"0\":{\"6300\":1}}],[\"集群相当于多个进程构成的一个集合\",{\"1\":{\"2401\":1}}],[\"集群唯一\",{\"1\":{\"2399\":1,\"2400\":1,\"2401\":1}}],[\"集合就变成了不可变的\",{\"1\":{\"6836\":1}}],[\"集合的\",{\"1\":{\"3520\":1}}],[\"集合的组合模式剖析\",{\"0\":{\"859\":1}}],[\"集合里的元素即使isnotempty\",{\"1\":{\"3276\":1}}],[\"集合类\",{\"1\":{\"3126\":1,\"6925\":1}}],[\"集合初始化时\",{\"1\":{\"3123\":1}}],[\"集合处理\",{\"0\":{\"3088\":1}}],[\"集合中就使用了迭代器模式\",{\"1\":{\"1543\":1}}],[\"集合\",{\"1\":{\"1429\":1,\"1601\":1,\"1603\":1,\"6647\":1,\"6651\":1,\"6902\":1}}],[\"进制字符串来说有很多有用的编\",{\"1\":{\"6896\":1}}],[\"进制的整数\",{\"1\":{\"5446\":1}}],[\"进制的某一位\",{\"1\":{\"5446\":1}}],[\"进类加载\",{\"1\":{\"6062\":1}}],[\"进一步解读就是哪些代码需要有单元测试覆盖\",{\"1\":{\"4451\":1}}],[\"进一步缩短了设计时间\",{\"1\":{\"2816\":1}}],[\"进入业务代码块之前\",{\"1\":{\"3171\":1}}],[\"进而抛出异常\",{\"1\":{\"2994\":1}}],[\"进程的堆栈信息\",{\"1\":{\"6995\":1}}],[\"进程在使用这个单例对象的时候\",{\"1\":{\"2403\":1}}],[\"进程间也唯一\",{\"1\":{\"2401\":1}}],[\"进程间不唯一\",{\"1\":{\"2394\":1,\"2401\":1}}],[\"进程唯一\",{\"1\":{\"2393\":1,\"2394\":3,\"2399\":1,\"2401\":2}}],[\"进程执行到这条语句的时候会创建一个新的进程\",{\"1\":{\"2389\":1}}],[\"进程之间是不共享地址空间的\",{\"1\":{\"2389\":1}}],[\"进程就一条一条地执行可执行文件中包含的代码\",{\"1\":{\"2389\":1}}],[\"进行增量构建\",{\"1\":{\"6292\":1}}],[\"进行\",{\"1\":{\"6112\":1}}],[\"进行新创建\",{\"1\":{\"6108\":1}}],[\"进行调用的\",{\"1\":{\"6108\":1}}],[\"进行调用\",{\"1\":{\"6086\":1}}],[\"进行缓存保存\",{\"1\":{\"6080\":1}}],[\"进行方法调用\",{\"1\":{\"6054\":1}}],[\"进行动态加载类\",{\"1\":{\"6054\":1}}],[\"进行通信\",{\"1\":{\"5364\":1}}],[\"进行同步\",{\"1\":{\"5306\":1}}],[\"进行简化\",{\"1\":{\"4814\":1}}],[\"进行少许修补\",{\"1\":{\"4809\":1}}],[\"进行操作就会产生一条操作日志存入数据库\",{\"1\":{\"4695\":1}}],[\"进行数据库的连接等\",{\"1\":{\"4329\":1}}],[\"进行换行时\",{\"1\":{\"4056\":1}}],[\"进行<exclude>排除jar包\",{\"1\":{\"3429\":1}}],[\"进行dependency\",{\"1\":{\"3429\":1}}],[\"进行限定\",{\"1\":{\"3388\":1}}],[\"进行不必要的try\",{\"1\":{\"3202\":1}}],[\"进行遍历去重或者判断包含操作\",{\"1\":{\"3153\":1}}],[\"进行时间比较时\",{\"1\":{\"3081\":1}}],[\"进行比较\",{\"1\":{\"3048\":1,\"5051\":1}}],[\"进行判断\",{\"1\":{\"3046\":1}}],[\"进行多种操作时\",{\"1\":{\"2975\":1}}],[\"进行级联删除\",{\"1\":{\"2882\":1}}],[\"进行初始化时\",{\"1\":{\"3123\":1}}],[\"进行初始化\",{\"1\":{\"1871\":1}}],[\"进行单独处理\",{\"1\":{\"1795\":1}}],[\"进行拷贝\",{\"1\":{\"1786\":1}}],[\"进行解耦\",{\"1\":{\"1607\":1}}],[\"进行解释执行\",{\"1\":{\"1489\":1}}],[\"进行递归组合\",{\"1\":{\"1006\":1}}],[\"进行适配~~\",{\"1\":{\"540\":1}}],[\"进行引用\",{\"1\":{\"119\":1,\"120\":1}}],[\"道理是一样的\",{\"1\":{\"2383\":1}}],[\"寻找其他方式来实现全局唯一类\",{\"1\":{\"2383\":1}}],[\"针对servlet和jsp的应用服务器\",{\"1\":{\"6612\":1}}],[\"针对缓存的高并发键值对数据存储\",{\"1\":{\"6395\":1}}],[\"针对大数据的hadoop数据库\",{\"1\":{\"6393\":1}}],[\"针对大数据的分布式sql查询引擎\",{\"1\":{\"6349\":1}}],[\"针对大型分布式系统的协调服务\",{\"1\":{\"6384\":1}}],[\"针对代数数据类型的jsr\",{\"1\":{\"6369\":1}}],[\"针对jvm语言的配置库\",{\"1\":{\"6318\":1}}],[\"针对统计时间等场景\",{\"1\":{\"3080\":1}}],[\"针对\",{\"1\":{\"2735\":1}}],[\"针对这个问题\",{\"1\":{\"2368\":1}}],[\"针对接口编程而不是具体类\",{\"1\":{\"2492\":1}}],[\"针对接口编程\",{\"1\":{\"2212\":1}}],[\"希伯来语\",{\"1\":{\"3262\":1}}],[\"希望可以提升你对java中反射的认知效率\",{\"1\":{\"5817\":1}}],[\"希望可以提升你对java中泛型的认知效率\",{\"1\":{\"4995\":1}}],[\"希望可以提升你对java中异常的认知效率\",{\"1\":{\"4706\":1}}],[\"希望用技术情怀帮助到更多的人\",{\"1\":{\"2983\":1}}],[\"希望对这些对象实施一些依赖于其具体类型的操作\",{\"1\":{\"2979\":1}}],[\"希望通过实现类来反推接口的定义\",{\"1\":{\"2712\":1}}],[\"希望能通过\",{\"1\":{\"2365\":1}}],[\"希腊披萨工厂类\",{\"1\":{\"1251\":1}}],[\"希腊披萨类\",{\"1\":{\"1251\":1}}],[\"希腊披萨\",{\"1\":{\"1212\":3}}],[\"独立出来一张表\",{\"1\":{\"3358\":1}}],[\"独立性\",{\"1\":{\"3299\":1,\"3301\":1}}],[\"独立于\",{\"1\":{\"2489\":1}}],[\"独立为函数或者类\",{\"1\":{\"1253\":1}}],[\"独享另外一个数据库连接池\",{\"1\":{\"2362\":1}}],[\"独享一个数据库连接池\",{\"1\":{\"2362\":1}}],[\"慢\",{\"1\":{\"2362\":1}}],[\"慢慢提升专注力\",{\"1\":{\"150\":1}}],[\"替换掉\",{\"1\":{\"2703\":1}}],[\"替换掉继承\",{\"1\":{\"645\":1}}],[\"替换\",{\"1\":{\"2365\":1,\"5097\":1}}],[\"替换为下面一行代码\",{\"1\":{\"2355\":2}}],[\"特定结构\",{\"0\":{\"4099\":1}}],[\"特殊情况\",{\"0\":{\"4259\":1,\"4262\":1},\"1\":{\"4014\":1,\"4030\":1,\"4063\":1,\"4064\":1,\"4109\":1,\"4129\":1,\"4140\":1,\"4227\":1,\"4232\":1}}],[\"特殊转义序列\",{\"0\":{\"3951\":1},\"1\":{\"3952\":1}}],[\"特殊字符\",{\"0\":{\"3946\":1}}],[\"特殊时间点\",{\"1\":{\"3311\":1}}],[\"特殊取值\",{\"1\":{\"3311\":1}}],[\"特殊注释标记\",{\"1\":{\"3222\":1}}],[\"特性在新窗口打开\",{\"1\":{\"5566\":1}}],[\"特性\",{\"0\":{\"5544\":1},\"1\":{\"2382\":1,\"4863\":1}}],[\"特性的支持不友好\",{\"0\":{\"2351\":1}}],[\"特别是删除或修改记录操作\",{\"1\":{\"3387\":1}}],[\"特别是一些复杂的继承关系\",{\"1\":{\"2740\":1}}],[\"特别是运行多态比较频繁的时候\",{\"1\":{\"2120\":1}}],[\"特别是在链比较长的时候\",{\"1\":{\"1981\":1}}],[\"特别提醒\",{\"1\":{\"1838\":1}}],[\"尽可能地隐藏内部的细节\",{\"1\":{\"5752\":1}}],[\"尽可能带上参数和上下文信息\",{\"1\":{\"3418\":1}}],[\"尽可能在原有错误码附表中找到语义相同或者相近的错误码在代码中使用即可\",{\"1\":{\"3256\":1}}],[\"尽可能使加锁的代码块工作量尽可能的小\",{\"1\":{\"3165\":1}}],[\"尽管你在需要更新其他依赖的时候也需要更新它\",{\"1\":{\"6877\":1}}],[\"尽管目前tuple的概念还有留有争议\",{\"1\":{\"6653\":1}}],[\"尽管可以用this调用一个构造器\",{\"1\":{\"5728\":1}}],[\"尽管这当然是推荐的\",{\"1\":{\"4267\":1}}],[\"尽管http支持使用不同的输出格式\",{\"1\":{\"3235\":1}}],[\"尽管依赖注入无法将本应该有依赖关系的两个类\",{\"1\":{\"2780\":1}}],[\"尽管有些人说\",{\"1\":{\"2749\":1}}],[\"尽管我们鼓励多用组合少用继承\",{\"1\":{\"2742\":1}}],[\"尽管大部分鸟都会飞\",{\"1\":{\"2725\":1}}],[\"尽管概念理解起来比较复杂\",{\"1\":{\"2396\":1}}],[\"尽管单例是一个很常用的设计模式\",{\"1\":{\"2350\":1}}],[\"尽量避免使用空值\",{\"1\":{\"6824\":1}}],[\"尽量依赖抽象类与接口\",{\"1\":{\"3465\":1}}],[\"尽量是provided引入\",{\"1\":{\"3439\":1}}],[\"尽量加上友好的错误提示信息\",{\"1\":{\"3418\":1}}],[\"尽量用英文来描述日志错误信息\",{\"1\":{\"3296\":1}}],[\"尽量在代理中使用try\",{\"1\":{\"3163\":1}}],[\"尽量在自己的视线内\",{\"1\":{\"3076\":1}}],[\"尽量不要在接口里定义常量\",{\"1\":{\"3003\":1}}],[\"尽量不修改代码\",{\"1\":{\"2147\":1}}],[\"尽量只依赖必要的接口\",{\"1\":{\"2784\":1}}],[\"尽量使用标准的异常\",{\"0\":{\"4870\":1}}],[\"尽量使用业界稳定的二方工具包\",{\"1\":{\"3438\":1}}],[\"尽量使用组合或者聚合关系实现代码复用\",{\"1\":{\"2253\":1}}],[\"尽量使用合成\",{\"1\":{\"2230\":1}}],[\"尽量降低类成员的访问权限\",{\"1\":{\"2180\":1}}],[\"尽量\",{\"1\":{\"2130\":1}}],[\"尽量保证一个接口只能由一个或多个类共同使用的方法\",{\"1\":{\"2034\":1}}],[\"频繁访问数据库或文件的对象\",{\"1\":{\"2339\":1,\"2346\":1}}],[\"频繁的进行创建和销毁的对象\",{\"1\":{\"2339\":1}}],[\"节约索引存储\",{\"1\":{\"3366\":1}}],[\"节省了系统资源\",{\"1\":{\"2337\":1}}],[\"节点和叶子有很多差异性的话\",{\"1\":{\"868\":1}}],[\"起到说明\",{\"1\":{\"5542\":1}}],[\"起到了\",{\"1\":{\"2300\":1}}],[\"起到简化用户操作的作用\",{\"1\":{\"1127\":1}}],[\"机器学习\",{\"0\":{\"6483\":1}}],[\"机械工业出版社\",{\"1\":{\"5581\":1}}],[\"机械制造等行业\",{\"1\":{\"2772\":1}}],[\"机制\",{\"1\":{\"5819\":1}}],[\"机制来实现的\",{\"1\":{\"4697\":1}}],[\"机制避免了多线程的同步问题\",{\"1\":{\"2290\":1}}],[\"机箱\",{\"1\":{\"661\":1}}],[\"向上转型\",{\"1\":{\"5765\":1,\"5774\":1}}],[\"向上抛出允许本系统转义\",{\"1\":{\"3259\":1}}],[\"向下转型\",{\"1\":{\"5601\":1}}],[\"向外暴露一个静态的公共方法\",{\"1\":{\"2284\":1}}],[\"向多个处理者中的一个提交请求\",{\"1\":{\"1987\":1}}],[\"枚举均可用于switch\",{\"1\":{\"5690\":1}}],[\"枚举常量\",{\"1\":{\"4590\":1}}],[\"枚举常量之间的空行在\",{\"1\":{\"4064\":1}}],[\"枚举中\",{\"1\":{\"4589\":1}}],[\"枚举值\",{\"1\":{\"4589\":1}}],[\"枚举的属性字段必须是私\",{\"1\":{\"3532\":1}}],[\"枚举等\",{\"1\":{\"3439\":1}}],[\"枚举enum\",{\"1\":{\"3244\":1}}],[\"枚举名字为processstatusenum的成员名称\",{\"1\":{\"3005\":1}}],[\"枚举其实就是特殊的常量类\",{\"1\":{\"3005\":1}}],[\"枚举成员名称需要全大写\",{\"1\":{\"3005\":1}}],[\"枚举类\",{\"0\":{\"4100\":1,\"5622\":1},\"1\":{\"3935\":1,\"4017\":1,\"4064\":1,\"4590\":1}}],[\"枚举类名带上enum后缀\",{\"1\":{\"3005\":1}}],[\"枚举类型也相当于多例模式\",{\"1\":{\"2412\":1}}],[\"枚举\",{\"0\":{\"2327\":1},\"1\":{\"2279\":1,\"4589\":1}}],[\"饿汉式\",{\"0\":{\"2280\":1,\"2292\":1},\"1\":{\"2272\":1,\"2273\":1,\"2281\":1,\"2286\":1,\"2293\":1,\"2334\":1}}],[\"部门存在用户\",{\"1\":{\"4696\":1}}],[\"部门名称已存在\",{\"1\":{\"4696\":2}}],[\"部门管理\",{\"1\":{\"4696\":3}}],[\"部门\",{\"1\":{\"4695\":1}}],[\"部门经理等都属于单例模型\",{\"1\":{\"2261\":1}}],[\"部署\",{\"1\":{\"6760\":1}}],[\"部署在同一台服务器中\",{\"1\":{\"3206\":1}}],[\"部署图\",{\"1\":{\"2812\":1}}],[\"部分的功能\",{\"1\":{\"6942\":1}}],[\"部分明确地支出你所使用的\",{\"1\":{\"6875\":1}}],[\"部分来管理\",{\"1\":{\"6868\":1}}],[\"部分文本分析引擎\",{\"1\":{\"6595\":1}}],[\"部分提取finally代码\",{\"1\":{\"4969\":1}}],[\"部分描述\",{\"1\":{\"3494\":1}}],[\"部分对象不能脱离整体对象而存在\",{\"1\":{\"2879\":1}}],[\"部分对象也将不存在\",{\"1\":{\"2879\":1}}],[\"部分方法是由子类实现的\",{\"1\":{\"2644\":1}}],[\"部分整体模式\",{\"1\":{\"807\":1}}],[\"部分\",{\"1\":{\"806\":1,\"807\":1}}],[\"黑名单用户\",{\"1\":{\"3653\":1}}],[\"黑箱\",{\"1\":{\"2220\":1}}],[\"黑色\",{\"1\":{\"1774\":1}}],[\"白箱\",{\"1\":{\"2216\":1}}],[\"白色的箭头是聚合\",{\"1\":{\"2885\":1}}],[\"白色\",{\"1\":{\"1756\":1,\"1763\":1,\"1774\":1}}],[\"功能性测试和性能评测\",{\"1\":{\"6626\":1}}],[\"功能强大\",{\"1\":{\"6623\":1}}],[\"功能列表\",{\"1\":{\"2694\":1}}],[\"功能模块\",{\"1\":{\"2578\":1}}],[\"功能解耦\",{\"1\":{\"2245\":1}}],[\"功能\",{\"1\":{\"2184\":1,\"4690\":1}}],[\"功能大而全\",{\"1\":{\"2176\":1}}],[\"点分隔符\",{\"1\":{\"4044\":1,\"4082\":1}}],[\"点分隔符之间有且仅有一个自然语义的英语单词\",{\"1\":{\"2995\":1}}],[\"点击登录\",{\"1\":{\"3477\":1}}],[\"点击\",{\"1\":{\"2840\":1}}],[\"点\",{\"1\":{\"2178\":1,\"2706\":1,\"3024\":1}}],[\"点一份\",{\"1\":{\"928\":1}}],[\"清空缓存中所有已实例化的服务提供者\",{\"1\":{\"6258\":1}}],[\"清晰的代码只是文档的某个片断\",{\"1\":{\"3473\":1}}],[\"清晰立体地反映系统的调用纵深链路\",{\"1\":{\"3453\":1}}],[\"清晰\",{\"1\":{\"2177\":1,\"6502\":1}}],[\"清华大学\",{\"1\":{\"858\":1}}],[\"低位补0\",{\"1\":{\"5739\":1}}],[\"低层次模块依赖于高层次模块的抽象\",{\"1\":{\"3465\":1}}],[\"低层模块尽量都要有抽象类或接口\",{\"1\":{\"2093\":1}}],[\"低耦合\",{\"1\":{\"2245\":1,\"6542\":1}}],[\"低耦合的代码结构更加简单\",{\"1\":{\"2177\":1}}],[\"低内聚\",{\"1\":{\"2174\":2,\"2176\":1}}],[\"什么目的\",{\"1\":{\"3286\":1}}],[\"什么类型\",{\"1\":{\"3286\":1}}],[\"什么情况会抛出nosuchmethoderror呢\",{\"1\":{\"3274\":1}}],[\"什么是不可变对象\",{\"0\":{\"5624\":1}}],[\"什么是原始类型\",{\"1\":{\"5096\":1}}],[\"什么是单元测试\",{\"0\":{\"4431\":1}}],[\"什么是junit\",{\"0\":{\"4275\":1}}],[\"什么是线程唯一的单例\",{\"1\":{\"2393\":1}}],[\"什么是\",{\"1\":{\"2171\":1,\"2400\":1,\"2753\":1,\"4392\":1}}],[\"什么时候用spi\",{\"1\":{\"6241\":1}}],[\"什么时候写单元测试\",{\"0\":{\"4444\":1}}],[\"什么时候显示依赖关系\",{\"1\":{\"2857\":1}}],[\"什么时候不需要定义接口\",{\"1\":{\"2716\":1}}],[\"什么时候不应该使用继承\",{\"1\":{\"2106\":1}}],[\"什么时候该用工厂方法模式\",{\"0\":{\"1252\":1}}],[\"什么时候该用工厂模式\",{\"1\":{\"1161\":1}}],[\"松耦合\",{\"1\":{\"2168\":1,\"2171\":1,\"2174\":2,\"2753\":2,\"2754\":2,\"2755\":1,\"2757\":1,\"2774\":2}}],[\"局部变量运行时被分配在栈中\",{\"1\":{\"5745\":1}}],[\"局部变量是指类方法中的变量\",{\"1\":{\"5745\":1}}],[\"局部变量为什么要初始化\",{\"0\":{\"5744\":1}}],[\"局部变量等进行注解\",{\"1\":{\"4493\":1,\"4495\":1}}],[\"局部变量也不被认为是常量\",{\"1\":{\"4189\":1}}],[\"局部变量名以\",{\"1\":{\"4188\":1}}],[\"局部变量名\",{\"0\":{\"4187\":1}}],[\"局部变量声明通常具有初始值\",{\"1\":{\"4111\":1}}],[\"局部变量声明在它们第一次被使用的地方\",{\"1\":{\"4111\":1}}],[\"局部变量\",{\"1\":{\"4111\":1,\"4520\":1,\"4524\":1,\"4590\":1,\"5801\":1}}],[\"局部变量都统一使用lowercamelcase风格\",{\"1\":{\"2990\":1}}],[\"局部变量不是直接朋友\",{\"1\":{\"2167\":1}}],[\"局限在编程语言的\",{\"1\":{\"2693\":1}}],[\"局域网中的路由器\",{\"1\":{\"1373\":1}}],[\"陌生的类最好不要以局部变量的形式出现在类的内部\",{\"1\":{\"2162\":1}}],[\"四位数字编号从\",{\"1\":{\"3254\":1}}],[\"四个部分的涉众对象分别是浏览器\",{\"1\":{\"3226\":1}}],[\"四个属性\",{\"1\":{\"2452\":1}}],[\"四\",{\"0\":{\"3039\":1,\"3330\":1,\"3393\":1},\"1\":{\"5425\":1}}],[\"四人组\",{\"1\":{\"2571\":1}}],[\"四处\",{\"1\":{\"2148\":1}}],[\"四则运算问题\",{\"0\":{\"1477\":1}}],[\"绘制\",{\"1\":{\"5778\":1}}],[\"绘制其它图形\",{\"1\":{\"2152\":1}}],[\"绘制三角形\",{\"1\":{\"2149\":2,\"2152\":1}}],[\"绘制圆形\",{\"1\":{\"2144\":2,\"2149\":2,\"2152\":1}}],[\"绘制矩形\",{\"1\":{\"2144\":2,\"2149\":2,\"2152\":1}}],[\"已收货等\",{\"1\":{\"3452\":1}}],[\"已发货\",{\"1\":{\"3452\":1}}],[\"已发布\",{\"1\":{\"2469\":1}}],[\"已发布状态类\",{\"1\":{\"2467\":1}}],[\"已完结\",{\"1\":{\"2469\":1}}],[\"已完结状态类\",{\"1\":{\"2467\":1}}],[\"已付款\",{\"1\":{\"2469\":1,\"3452\":1}}],[\"已付款状态类\",{\"1\":{\"2467\":1}}],[\"已审核\",{\"1\":{\"2469\":1}}],[\"已审核状态类\",{\"1\":{\"2467\":1}}],[\"已有的代码来实现变化\",{\"1\":{\"2130\":1}}],[\"已经有了自己的新的\",{\"1\":{\"6930\":1}}],[\"已经说明了这是在干什么\",{\"1\":{\"3221\":1}}],[\"已经扣取过了积分\",{\"1\":{\"2454\":1}}],[\"已经扣除了积分\",{\"1\":{\"2454\":1}}],[\"已经实现\",{\"1\":{\"1539\":1}}],[\"已经存在\",{\"1\":{\"1406\":1}}],[\"已经是建造者\",{\"1\":{\"719\":1}}],[\"梅耶\",{\"1\":{\"2127\":1}}],[\"求和\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"求出left\",{\"1\":{\"1487\":1}}],[\"9的早期访问版本\",{\"1\":{\"6465\":1}}],[\"94483820\",{\"1\":{\"6134\":1}}],[\"945\",{\"1\":{\"4920\":1}}],[\"986f732ed2f1\",{\"1\":{\"5245\":1}}],[\"9829\",{\"1\":{\"309\":1}}],[\"9589080\",{\"1\":{\"4983\":1}}],[\"965\",{\"1\":{\"4920\":1}}],[\"9999\",{\"1\":{\"3254\":1}}],[\"997\",{\"1\":{\"2807\":1}}],[\"9f\",{\"1\":{\"3049\":2,\"3051\":2}}],[\"91\",{\"1\":{\"2193\":1}}],[\"90204111\",{\"1\":{\"4988\":1}}],[\"9007199254740992\",{\"1\":{\"3229\":1}}],[\"90\",{\"1\":{\"2187\":1,\"3524\":1}}],[\"9\",{\"1\":{\"2118\":2,\"2124\":2,\"2546\":1,\"2983\":1,\"3053\":1,\"3103\":1,\"4074\":1,\"4978\":4,\"6465\":1,\"6872\":1}}],[\"8152\",{\"1\":{\"6996\":2}}],[\"8发布前\",{\"1\":{\"6358\":1}}],[\"8新增\",{\"1\":{\"6049\":1}}],[\"88\",{\"1\":{\"5964\":2}}],[\"88243278\",{\"1\":{\"4423\":1}}],[\"8及之后\",{\"1\":{\"5327\":1}}],[\"857722\",{\"1\":{\"4986\":1}}],[\"8中提供了两个元注解\",{\"1\":{\"4586\":1}}],[\"8209\",{\"1\":{\"4489\":1}}],[\"8的运行器\",{\"1\":{\"4318\":1,\"4402\":1}}],[\"8f\",{\"1\":{\"3049\":1,\"3051\":1}}],[\"80\",{\"1\":{\"3036\":2}}],[\"8080\",{\"1\":{\"2409\":3}}],[\"8\",{\"0\":{\"3944\":1,\"5671\":1},\"1\":{\"2118\":3,\"2124\":2,\"2546\":1,\"3035\":1,\"3053\":1,\"3076\":1,\"3099\":1,\"3123\":1,\"3366\":1,\"3945\":1,\"4324\":1,\"4590\":2,\"4619\":1,\"4655\":1,\"4657\":1,\"4796\":1,\"4943\":1,\"4963\":4,\"4969\":4,\"4978\":3,\"5169\":2,\"5254\":1,\"5270\":1,\"5378\":1,\"5379\":2,\"5396\":1,\"5546\":1,\"5565\":1,\"5566\":1,\"5599\":1,\"5670\":1,\"5672\":2,\"5675\":1,\"6118\":56,\"6201\":1,\"6258\":1,\"6417\":1,\"6691\":1,\"6744\":1,\"6826\":1,\"6850\":1,\"6906\":1,\"6917\":1,\"6930\":2,\"6944\":1}}],[\"8=\",{\"1\":{\"2118\":2,\"2124\":1}}],[\"8462\",{\"1\":{\"1090\":1}}],[\"思考\",{\"1\":{\"3076\":1}}],[\"思考问题和解决思路\",{\"1\":{\"2117\":1}}],[\"思路\",{\"1\":{\"1206\":1,\"1237\":1,\"1239\":1,\"1884\":1,\"2151\":1}}],[\"思路分析和图解\",{\"1\":{\"846\":1}}],[\"思路分析和类图\",{\"1\":{\"773\":1,\"1483\":1,\"1597\":1,\"1645\":1,\"1968\":1,\"2447\":1,\"2670\":1,\"2956\":1}}],[\"思路分析图解\",{\"1\":{\"704\":1,\"1242\":1,\"1839\":1}}],[\"思路分析\",{\"1\":{\"517\":1,\"536\":1,\"690\":1,\"1194\":1,\"1758\":1,\"2529\":1}}],[\"假如需要查阅历史代码\",{\"1\":{\"3217\":1}}],[\"假如北京鸭可以飞翔\",{\"1\":{\"2539\":1}}],[\"假如每参加一次这个活动要扣除用户\",{\"1\":{\"2441\":1}}],[\"假如要访问集合\",{\"1\":{\"829\":1}}],[\"假设上面的编译可行\",{\"1\":{\"5218\":1}}],[\"假设调用者在这个参数中传递的值大于整副牌的剩余张数\",{\"1\":{\"4892\":1}}],[\"假设有一个用于发牌操作的方法\",{\"1\":{\"4892\":1}}],[\"假设我们的一个模块需要从\",{\"1\":{\"4467\":1}}],[\"假设我们的系统中有很多涉及图片处理和存储的业务逻辑\",{\"1\":{\"2698\":1}}],[\"假设我们要添加一个\",{\"1\":{\"2968\":1}}],[\"假设我们要设计一个关于鸟的类\",{\"1\":{\"2724\":1}}],[\"假设\",{\"1\":{\"2109\":1,\"2395\":1}}],[\"举例说明\",{\"1\":{\"5209\":1}}],[\"举例子\",{\"1\":{\"5132\":1}}],[\"举例\",{\"1\":{\"2108\":1}}],[\"举个例子\",{\"1\":{\"1389\":1}}],[\"举个简单的例子\",{\"1\":{\"422\":1}}],[\"换成\",{\"1\":{\"3118\":1}}],[\"换行的主要目的是为了拥有清晰的代码\",{\"1\":{\"4054\":1}}],[\"换行的典型原因是为了避免代码超出了列数的限制\",{\"1\":{\"4038\":1}}],[\"换行指令的主要内容是\",{\"1\":{\"4041\":1}}],[\"换行\",{\"0\":{\"4035\":1},\"1\":{\"3985\":1,\"4028\":1,\"4036\":1,\"4135\":1}}],[\"换行缩进至少\",{\"0\":{\"4055\":1}}],[\"换行缩进\",{\"1\":{\"3031\":1}}],[\"换行时遵循如下原则\",{\"1\":{\"3030\":1}}],[\"换句话说\",{\"1\":{\"2104\":1}}],[\"换个案例\",{\"1\":{\"1298\":1}}],[\"侵入性\",{\"1\":{\"2099\":1}}],[\"雪梨电视机\",{\"1\":{\"2089\":1,\"2091\":1}}],[\"冰糖电视机\",{\"1\":{\"2089\":1,\"2091\":1}}],[\"冰箱\",{\"1\":{\"768\":1}}],[\"行时\",{\"1\":{\"3191\":1}}],[\"行\",{\"1\":{\"3036\":2}}],[\"行代码\",{\"1\":{\"2187\":1,\"2193\":1}}],[\"行的参数类型\",{\"1\":{\"2083\":1}}],[\"行为类\",{\"1\":{\"2959\":1}}],[\"行为决定状态\",{\"1\":{\"1056\":1}}],[\"行为型访问者模式\",{\"0\":{\"2926\":1}}],[\"行为型模板方法模式\",{\"0\":{\"2633\":1}}],[\"行为型模式\",{\"1\":{\"2602\":1,\"2620\":1}}],[\"行为型策略模式\",{\"0\":{\"2483\":1}}],[\"行为型状态模式\",{\"0\":{\"2413\":1}}],[\"行为型职责链模式\",{\"0\":{\"1925\":1}}],[\"行为型观察者模式\",{\"0\":{\"1665\":1}}],[\"行为型备忘录模式\",{\"0\":{\"1615\":1}}],[\"行为型中介模式\",{\"0\":{\"1564\":1}}],[\"行为型迭代器模式\",{\"0\":{\"1501\":1}}],[\"行为型解释器模式\",{\"0\":{\"1452\":1}}],[\"行为型设计模式\",{\"0\":{\"1020\":1}}],[\"行为型命令模式\",{\"0\":{\"738\":1}}],[\"彼此无法分离\",{\"1\":{\"2077\":1}}],[\"细分成若干二级子目录\",{\"1\":{\"2982\":1}}],[\"细节的方法\",{\"1\":{\"2708\":1}}],[\"细节是魔鬼\",{\"1\":{\"2702\":1}}],[\"细节就是具体的实现类\",{\"1\":{\"2065\":1}}],[\"细节应该依赖抽象\",{\"1\":{\"2063\":1}}],[\"细粒度和共享对象\",{\"1\":{\"1386\":1}}],[\"遵从一致的上传功能协议\",{\"1\":{\"2709\":1}}],[\"遵守开闭原则的软件\",{\"1\":{\"2139\":1}}],[\"遵守了\",{\"1\":{\"1721\":1}}],[\"遵循如下规则\",{\"1\":{\"3089\":1}}],[\"遵循其它原则\",{\"1\":{\"2153\":1}}],[\"遵循里氏替换原则\",{\"1\":{\"2105\":1}}],[\"遵循接口隔离原则有以下\",{\"1\":{\"2043\":1}}],[\"按照实例化顺序返回已经缓存的服务提供者实例\",{\"1\":{\"6258\":1}}],[\"按照实例化的顺序存储\",{\"1\":{\"6258\":1}}],[\"按照声明顺序返回\",{\"1\":{\"6035\":1,\"6038\":1}}],[\"按照声明顺序返回一组\",{\"1\":{\"5926\":1,\"5932\":1}}],[\"按照java惯例\",{\"1\":{\"4718\":1}}],[\"按照迪米特法则\",{\"1\":{\"2192\":1}}],[\"按以下的顺序出现\",{\"1\":{\"4251\":1}}],[\"按时间顺序添加\",{\"1\":{\"3999\":1}}],[\"按某种顺序调用其包含的基本方法\",{\"1\":{\"2653\":1}}],[\"按隔离原则应当这样处理\",{\"1\":{\"2038\":1}}],[\"按下电视机的关按钮\",{\"1\":{\"783\":1}}],[\"按下电视机的开按钮\",{\"1\":{\"783\":1}}],[\"按下灯的关按钮\",{\"1\":{\"783\":1}}],[\"按下灯的开按钮\",{\"1\":{\"783\":1}}],[\"按下撤销按钮\",{\"1\":{\"781\":1,\"783\":2}}],[\"按下开按钮\",{\"1\":{\"781\":2}}],[\"才有永久代的概念\",{\"1\":{\"5316\":1}}],[\"才可能使用\",{\"1\":{\"5292\":1}}],[\"才可被描述为\",{\"1\":{\"3931\":1}}],[\"才可以\",{\"1\":{\"6102\":1}}],[\"才可以省略可选的分组括号\",{\"1\":{\"4098\":1}}],[\"才可以使用的可变参数\",{\"1\":{\"3042\":1}}],[\"才可以在代码级违反单一职责原则\",{\"1\":{\"2030\":1}}],[\"才会加载对应的配置文件去解析\",{\"1\":{\"6262\":1}}],[\"才会回来执行try或者catch块中的return或者throw语句\",{\"1\":{\"4738\":1}}],[\"才会关闭处于time\",{\"1\":{\"3443\":1}}],[\"才会装载\",{\"1\":{\"2323\":1}}],[\"才推荐进行分库分表\",{\"1\":{\"3365\":1}}],[\"才能写出有效的单元测试来验证正确性\",{\"1\":{\"4449\":1}}],[\"才能在尽量最小化代码修改的情况下\",{\"1\":{\"2703\":1}}],[\"才能知道这个类到底依赖了哪些单例类\",{\"1\":{\"2358\":1}}],[\"才去创建\",{\"1\":{\"2298\":1}}],[\"才被被创建\",{\"1\":{\"1344\":1}}],[\"轮船\",{\"1\":{\"2025\":1}}],[\"轮胎等部件也多种多样\",{\"1\":{\"662\":1}}],[\"天时\",{\"1\":{\"3085\":1}}],[\"天\",{\"1\":{\"3082\":1,\"3086\":1,\"3284\":1}}],[\"天空运行\",{\"1\":{\"2020\":1}}],[\"天气情况变化\",{\"1\":{\"1704\":1}}],[\"天气情况\",{\"1\":{\"1702\":1,\"1716\":2}}],[\"天气预报项目需求\",{\"0\":{\"1687\":1}}],[\"成本高\",{\"1\":{\"5668\":1}}],[\"成本和时间都是最重要的\",{\"1\":{\"2787\":1}}],[\"成1\",{\"1\":{\"3427\":1}}],[\"成为共性方法\",{\"1\":{\"3036\":1}}],[\"成fu\",{\"1\":{\"2998\":1}}],[\"成condi\",{\"1\":{\"2998\":1}}],[\"成absclass\",{\"1\":{\"2998\":1}}],[\"成功\",{\"1\":{\"2966\":1}}],[\"成员可见表示其它类可以用这个类的实例对象访问到该成员\",{\"1\":{\"5362\":1}}],[\"成员方法\",{\"1\":{\"4590\":1}}],[\"成员名=参数名\",{\"1\":{\"3069\":1}}],[\"成员变量\",{\"1\":{\"2165\":1,\"2366\":1,\"2990\":1,\"3074\":1,\"4589\":1,\"4590\":1,\"5821\":1}}],[\"成员变量有引用类型\",{\"1\":{\"1799\":1}}],[\"成员\",{\"1\":{\"2089\":1,\"3936\":1,\"4257\":1}}],[\"成三个\",{\"1\":{\"2019\":1}}],[\"摩托车\",{\"1\":{\"2016\":1,\"2020\":1}}],[\"摩斯密码\",{\"1\":{\"1073\":1}}],[\"陆地\",{\"1\":{\"2015\":1}}],[\"汽车\",{\"1\":{\"2015\":1,\"2016\":1,\"2020\":1,\"2025\":1}}],[\"至\",{\"1\":{\"3046\":1}}],[\"至少\",{\"1\":{\"4257\":1}}],[\"至少要达到range级别\",{\"1\":{\"3375\":1}}],[\"至少说明还有人关心它\",{\"1\":{\"2804\":1}}],[\"至少存在以下两个缺点\",{\"1\":{\"2004\":1}}],[\"至于该异常被捕获还是继续抛出都与它无关\",{\"1\":{\"4805\":1}}],[\"至于什么时候\",{\"1\":{\"2716\":1}}],[\"至于应该变成哪个状态\",{\"1\":{\"2467\":1}}],[\"至于都要加载哪些类\",{\"1\":{\"1364\":1}}],[\"至于c语言中的内存复制\",{\"1\":{\"472\":1}}],[\"至于这么写有什么好处\",{\"1\":{\"410\":1}}],[\"至于为啥要写出同事看不懂的代码\",{\"1\":{\"394\":1}}],[\"于\",{\"1\":{\"2001\":1}}],[\"于是jvm采用了一个特殊的方法\",{\"1\":{\"5167\":1}}],[\"于是这个一行代码的改动就导致了一个\",{\"1\":{\"4096\":1}}],[\"于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链\",{\"1\":{\"1929\":1}}],[\"于是新的对象更加全面\",{\"1\":{\"1862\":1,\"1896\":1}}],[\"于是需要\",{\"1\":{\"1860\":1,\"1894\":1}}],[\"于是我们需要重新造出一个对象\",{\"1\":{\"1859\":1,\"1893\":1}}],[\"于是很多人为了多睡一会\",{\"1\":{\"875\":1}}],[\"马丁\",{\"1\":{\"2001\":1}}],[\"倒置\",{\"1\":{\"1994\":1,\"2064\":1}}],[\"应以\",{\"1\":{\"4156\":1}}],[\"应以原文档为标准\",{\"1\":{\"3929\":1}}],[\"应当至于此处\",{\"1\":{\"3978\":1}}],[\"应当遵守的原则\",{\"1\":{\"1990\":1}}],[\"应直接返回\",{\"1\":{\"3384\":1}}],[\"应使用有业务含义的自定义异常\",{\"1\":{\"3277\":1}}],[\"应使用常量或确定有值的对象来调用equals\",{\"1\":{\"3045\":1}}],[\"应该像其他\",{\"1\":{\"6864\":1}}],[\"应该都能知道大概的流程了\",{\"1\":{\"6224\":1}}],[\"应该注意的是\",{\"1\":{\"5413\":1,\"5459\":1}}],[\"应该如何做呢\",{\"1\":{\"5189\":1}}],[\"应该会有会心一笑\",{\"1\":{\"4944\":1}}],[\"应该继续抛出\",{\"1\":{\"4750\":1}}],[\"应该捕获那些知道如何处理的异常\",{\"1\":{\"4745\":1}}],[\"应该出现在每个\",{\"1\":{\"4257\":1}}],[\"应该在注释中说明正当的理由\",{\"1\":{\"4230\":1}}],[\"应该选择json作为通信中使用的标准数据交换格式\",{\"1\":{\"3235\":1}}],[\"应该显示成中划线\",{\"1\":{\"3058\":1}}],[\"应该使用双参数\",{\"1\":{\"3044\":1}}],[\"应该尽量少用\",{\"1\":{\"2723\":1}}],[\"应该改为去掉\",{\"1\":{\"2707\":1}}],[\"应该将父类的方法\",{\"1\":{\"2227\":1}}],[\"应该避免类中出现这样非直接朋友关系的耦合\",{\"1\":{\"2192\":1}}],[\"应该创建弱耦合的类\",{\"1\":{\"2179\":1}}],[\"应用监控工具\",{\"0\":{\"6517\":1}}],[\"应用服务器\",{\"0\":{\"6610\":1},\"1\":{\"6283\":1}}],[\"应用该方法可在运行时发现一个对象完整的继承结构\",{\"1\":{\"5875\":1}}],[\"应用到测试类的所有测试用例\",{\"1\":{\"4382\":1}}],[\"应用分层\",{\"0\":{\"3408\":1}}],[\"应用中的扩展日志\",{\"1\":{\"3286\":1}}],[\"应用中不可直接使用日志系统\",{\"1\":{\"3280\":1}}],[\"应用名\",{\"1\":{\"3284\":2}}],[\"应用内部推荐异常抛出\",{\"1\":{\"3278\":1}}],[\"应用内共享常量\",{\"1\":{\"3016\":2}}],[\"应用工具类包名为com\",{\"1\":{\"2995\":1}}],[\"应用这条原则\",{\"1\":{\"2695\":1}}],[\"应用程序的开发库\",{\"1\":{\"6572\":1}}],[\"应用程序的日志对象\",{\"1\":{\"2258\":1}}],[\"应用程序类路径中的服务提供者将被忽略\",{\"1\":{\"6258\":1}}],[\"应用程序不应该去处理此类错误\",{\"1\":{\"4718\":1}}],[\"应用程序中的部分对象可能会根据不同的情况做出不同的行为\",{\"1\":{\"2415\":1}}],[\"应用程序中的对话框\",{\"1\":{\"2258\":1}}],[\"应用的配置对象\",{\"1\":{\"2258\":1}}],[\"应用的源码分析\",{\"0\":{\"1311\":1}}],[\"应用示例\",{\"0\":{\"2140\":1}}],[\"应用实例改进\",{\"0\":{\"2150\":1,\"2190\":1}}],[\"应用实例\",{\"0\":{\"2013\":1,\"2049\":1,\"2116\":1,\"2185\":1},\"1\":{\"1527\":1}}],[\"应用实例说明\",{\"1\":{\"516\":1,\"534\":1}}],[\"应用场景\",{\"0\":{\"2815\":1},\"1\":{\"1271\":1}}],[\"应用\",{\"0\":{\"714\":1},\"1\":{\"3417\":1}}],[\"佟校长\",{\"1\":{\"1976\":1}}],[\"王副校\",{\"1\":{\"1976\":1}}],[\"张主任\",{\"1\":{\"1976\":1}}],[\"班级管理者\",{\"1\":{\"1972\":1}}],[\"责任分担\",{\"1\":{\"1937\":1}}],[\"责任链模式通常在以下几种情况使用\",{\"1\":{\"1984\":1}}],[\"责任链模式的独到之处是将其节点处理者组合成了链式结构\",{\"1\":{\"1947\":1}}],[\"责任链模式的本质是\",{\"1\":{\"1947\":1}}],[\"责任链模式\",{\"1\":{\"1039\":1,\"1929\":1}}],[\"依然不会影响主干流程继续进行\",{\"1\":{\"3456\":1}}],[\"依据hashcode和equals进行判断\",{\"1\":{\"3089\":1}}],[\"依据约束力强弱及故障敏感性\",{\"1\":{\"2982\":1}}],[\"依此类推\",{\"1\":{\"1930\":1,\"3409\":1}}],[\"依赖趋同插件构建时将会报错\",{\"1\":{\"6874\":1}}],[\"依赖收敛\",{\"1\":{\"6763\":1}}],[\"依赖于特定的平台\",{\"1\":{\"5569\":1}}],[\"依赖于一个二方库群时\",{\"1\":{\"3432\":1}}],[\"依赖springframework\",{\"1\":{\"3432\":1}}],[\"依赖性强\",{\"1\":{\"2891\":1}}],[\"依赖关系是在运行过程中起作用的\",{\"1\":{\"5800\":1}}],[\"依赖关系使用\",{\"1\":{\"2852\":1}}],[\"依赖关系\",{\"0\":{\"2849\":1,\"5799\":1},\"1\":{\"2848\":1}}],[\"依赖关系简单\",{\"1\":{\"2755\":1}}],[\"依赖关系传递的三种方式和应用案例\",{\"0\":{\"2084\":1}}],[\"依赖具体的实现\",{\"1\":{\"2712\":1}}],[\"依赖注入也是将代码之间的强耦合变为弱耦合\",{\"1\":{\"2780\":1}}],[\"依赖注入\",{\"0\":{\"6361\":1},\"1\":{\"2381\":1,\"2778\":1,\"2779\":1,\"6753\":1}}],[\"依赖注入框架\",{\"1\":{\"1325\":1}}],[\"依赖来解决问题\",{\"1\":{\"2107\":1}}],[\"依赖类\",{\"1\":{\"2037\":2,\"2050\":2,\"2053\":2}}],[\"依赖倒置原则\",{\"1\":{\"2237\":1}}],[\"依赖倒置原则可以提高代码的可读性和可维护性\",{\"1\":{\"2073\":1}}],[\"依赖倒置原则可以提高系统的稳定性\",{\"1\":{\"2071\":1}}],[\"依赖倒置原则可以减少并行开发引起的风险\",{\"1\":{\"2072\":1}}],[\"依赖倒置原则可以降低类间的耦合性\",{\"1\":{\"2070\":1}}],[\"依赖倒置原则的主要作用如下\",{\"1\":{\"2069\":1}}],[\"依赖倒置原则和里氏替换原则\",{\"1\":{\"1222\":1}}],[\"依赖倒转原则的注意事项和细节\",{\"0\":{\"2092\":1}}],[\"依赖倒转原则的作用\",{\"0\":{\"2068\":1}}],[\"依赖倒转原则是基于这样的设计理念\",{\"1\":{\"2065\":1}}],[\"依赖倒转原则\",{\"0\":{\"2059\":1},\"1\":{\"2061\":1,\"2226\":1}}],[\"依赖倒转\",{\"1\":{\"1994\":1,\"2064\":1}}],[\"依赖\",{\"1\":{\"1335\":1,\"2052\":2,\"2058\":2,\"2162\":1,\"2809\":1,\"2834\":1,\"2850\":1,\"2917\":1}}],[\"员工必须根据需要请假的天数去找不同的领导签名\",{\"1\":{\"1927\":1}}],[\"副总经理\",{\"1\":{\"1927\":1}}],[\"公共代码\",{\"1\":{\"4455\":1}}],[\"公共方法等\",{\"1\":{\"3467\":1}}],[\"公共类\",{\"1\":{\"3467\":1}}],[\"公共配置\",{\"1\":{\"3467\":1}}],[\"公共抽象组件\",{\"1\":{\"849\":1}}],[\"公开接口需要进行入参保护\",{\"1\":{\"3204\":1}}],[\"公开到业界后\",{\"1\":{\"2982\":1}}],[\"公有方法是类的调用者和维护者最关心的方法\",{\"1\":{\"3068\":1}}],[\"公有方法或保护方法\",{\"1\":{\"3068\":1}}],[\"公园中存在多个景点\",{\"1\":{\"2928\":1}}],[\"公司没了部门就不存在了\",{\"1\":{\"5792\":1}}],[\"公司之外的开源库\",{\"1\":{\"3551\":1}}],[\"公司内部发布到中央仓库\",{\"1\":{\"3550\":1}}],[\"公司\",{\"1\":{\"2577\":1,\"3426\":2}}],[\"公司员工请假\",{\"1\":{\"1927\":1}}],[\"公路运行\",{\"1\":{\"2020\":1}}],[\"职责\",{\"1\":{\"2002\":2}}],[\"职责链类\",{\"1\":{\"1971\":1}}],[\"职责链建立的合理性要靠客户端来保证\",{\"1\":{\"1941\":1}}],[\"职责链简化了对象之间的连接\",{\"1\":{\"1936\":1}}],[\"职责链模式简化了对象\",{\"1\":{\"1980\":1}}],[\"职责链模式将请求和处理分开\",{\"1\":{\"1979\":1}}],[\"职责链模式的应用场景\",{\"0\":{\"1983\":1}}],[\"职责链模式的注意事项和细节\",{\"0\":{\"1978\":1}}],[\"职责链模式的结构与实现\",{\"0\":{\"1942\":1}}],[\"职责链模式解决采购审批项目\",{\"0\":{\"1967\":1}}],[\"职责链模式主要包含以下角色\",{\"1\":{\"1943\":1}}],[\"职责链模式\",{\"1\":{\"1929\":1,\"1966\":1,\"2631\":1}}],[\"职责链模式基本介绍\",{\"0\":{\"1926\":1}}],[\"职责过重\",{\"1\":{\"1179\":1}}],[\"延迟对目标的加载\",{\"1\":{\"1924\":1}}],[\"延迟加载\",{\"1\":{\"1924\":1,\"2317\":1}}],[\"延时消息\",{\"1\":{\"654\":1}}],[\"智能指引\",{\"1\":{\"1923\":1}}],[\"智能家具抽象类\",{\"1\":{\"1603\":1}}],[\"智能家具类\",{\"1\":{\"1602\":1}}],[\"智能家具包括各种设备\",{\"1\":{\"1588\":1}}],[\"智能家具项目\",{\"0\":{\"1587\":1}}],[\"消费和可视化restful\",{\"1\":{\"6584\":1}}],[\"消费者有下限\",{\"1\":{\"5046\":1}}],[\"消极的词\",{\"1\":{\"2923\":1}}],[\"消除类型参数声明\",{\"1\":{\"5072\":1}}],[\"消除了\",{\"1\":{\"2417\":1}}],[\"消除用户对服务器慢的感觉\",{\"1\":{\"1921\":1}}],[\"消息传递\",{\"0\":{\"6494\":1}}],[\"消息分组未查到\",{\"1\":{\"3863\":1}}],[\"消息分类\",{\"1\":{\"655\":1}}],[\"消息订阅出错\",{\"1\":{\"3861\":1}}],[\"消息消费出错\",{\"1\":{\"3859\":1}}],[\"消息投递超时\",{\"1\":{\"3892\":1}}],[\"消息投递超时等问题\",{\"1\":{\"3254\":1}}],[\"消息投递出错\",{\"1\":{\"3857\":1}}],[\"消息服务出错\",{\"1\":{\"3855\":1}}],[\"消息服务出错是三级\",{\"1\":{\"3260\":1}}],[\"消息补偿\",{\"1\":{\"3404\":1}}],[\"消息\",{\"1\":{\"655\":1}}],[\"消息类型\",{\"1\":{\"654\":1}}],[\"消息管理\",{\"1\":{\"653\":1}}],[\"远程调用返回对象时\",{\"1\":{\"3276\":1}}],[\"远程调用失败\",{\"1\":{\"3058\":1}}],[\"远程对象的本地代表\",{\"1\":{\"1914\":1}}],[\"远程代理通过网络和真正的远程对象沟通信息\",{\"1\":{\"1914\":1}}],[\"远程代理\",{\"1\":{\"1913\":1,\"1920\":1}}],[\"远近高低各不同\",{\"1\":{\"1081\":1}}],[\"缓存到内存当中\",{\"1\":{\"6901\":1}}],[\"缓存函数或者其他任何你想要缓存的内容\",{\"1\":{\"6901\":1}}],[\"缓存\",{\"1\":{\"6651\":1,\"6656\":1}}],[\"缓存已经被实例化的服务提供者\",{\"1\":{\"6258\":1}}],[\"缓存使用软引用进行保存\",{\"1\":{\"6079\":1}}],[\"缓存池的大小默认为\",{\"1\":{\"5270\":1}}],[\"缓存池\",{\"0\":{\"5263\":1}}],[\"缓存服务超时\",{\"1\":{\"3894\":1}}],[\"缓存服务出错\",{\"1\":{\"3865\":1}}],[\"缓存击穿\",{\"1\":{\"3337\":1}}],[\"缓存有利于减少交互次数\",{\"1\":{\"3234\":1}}],[\"缓存相关常量放在类cacheconsts下\",{\"1\":{\"3015\":1}}],[\"缓存代理\",{\"1\":{\"1911\":1}}],[\"缓冲池等等都是享元模式的应用\",{\"1\":{\"1377\":1}}],[\"防止动态运行时不匹配问题的出现\",{\"1\":{\"5747\":1}}],[\"防止程序员在管理内存时容易产生的错误\",{\"1\":{\"5747\":1}}],[\"防止因字段类型不同造成的隐式转换\",{\"1\":{\"3377\":1}}],[\"防止sql注入\",{\"1\":{\"3333\":1}}],[\"防止隐私泄露\",{\"1\":{\"3332\":1}}],[\"防止没有做水平权限校验就可随意访问\",{\"1\":{\"3331\":1}}],[\"防止npe\",{\"1\":{\"3276\":2}}],[\"防止子类重写模板方法\",{\"1\":{\"2683\":1}}],[\"防止继承泛滥\",{\"1\":{\"2251\":1}}],[\"防止\",{\"1\":{\"2109\":1,\"2282\":1}}],[\"防火墙代理\",{\"1\":{\"1909\":1}}],[\"防御力\",{\"1\":{\"1649\":1,\"1653\":1}}],[\"触发\",{\"1\":{\"1905\":1}}],[\"形式获取\",{\"1\":{\"6267\":1}}],[\"形式返回此\",{\"1\":{\"6041\":1}}],[\"形式参数只能用final修饰符\",{\"1\":{\"5743\":1}}],[\"形式参数可被视为local\",{\"1\":{\"5743\":1}}],[\"形式的变量声明是不允许的\",{\"1\":{\"4108\":1}}],[\"形参的值在调用时根据调用者更改\",{\"1\":{\"5743\":1}}],[\"形参和局部变量一样都不能离开方法\",{\"1\":{\"5743\":1}}],[\"形参\",{\"0\":{\"5742\":1}}],[\"形状\",{\"1\":{\"1895\":1,\"1896\":1}}],[\"形成一种链式触发机制\",{\"1\":{\"1735\":1}}],[\"父集合元素的增加或删除异常等\",{\"1\":{\"3532\":1}}],[\"父接口\",{\"1\":{\"1886\":1}}],[\"父类没有加载到时\",{\"1\":{\"6063\":1}}],[\"父类引用指向子类对象称为\",{\"1\":{\"5765\":1}}],[\"父类在后面\",{\"1\":{\"5227\":1}}],[\"父类\",{\"1\":{\"4330\":1,\"4331\":1,\"5508\":1,\"5510\":1,\"5511\":1,\"5883\":1}}],[\"父类成员变量名相同\",{\"1\":{\"2996\":1}}],[\"父类与子类高度耦合\",{\"1\":{\"2782\":1}}],[\"父类的父类的公共字段也打印出来了\",{\"1\":{\"5883\":1}}],[\"父类的父类的代码\",{\"1\":{\"2731\":1}}],[\"父类的类型是object\",{\"1\":{\"5159\":1}}],[\"父类的的泛型类型全部变为了原始类型object\",{\"1\":{\"5155\":1}}],[\"父类的\",{\"1\":{\"4329\":1}}],[\"父类的每一次改动都会影响所有的子类\",{\"1\":{\"2782\":1}}],[\"父类的模板方法确保了算法的结构保持不变\",{\"1\":{\"2682\":1}}],[\"父类的模板方法和已实现的某些步骤会被子类继承而直接使用\",{\"1\":{\"2682\":1}}],[\"父类的实现的任何改变都会导致子类的实现发生变化\",{\"1\":{\"2217\":1}}],[\"父类中的抽象方法由子类实现\",{\"1\":{\"2647\":1}}],[\"父类中凡是已经实现好的方法\",{\"1\":{\"2098\":1}}],[\"父类对子类是透明的\",{\"1\":{\"2216\":1}}],[\"父类代码侵入子类\",{\"1\":{\"646\":1}}],[\"父类封装共性\",{\"1\":{\"645\":1}}],[\"~~~\",{\"1\":{\"2535\":3}}],[\"~~~使用迪米特法则的改进~~~\",{\"1\":{\"2194\":1}}],[\"~~北京鸭~~~\",{\"1\":{\"2521\":1,\"2539\":1}}],[\"~~\",{\"1\":{\"1871\":1,\"1903\":4}}],[\"~modifier\",{\"1\":{\"438\":1}}],[\"事实上在设置值的方法上\",{\"1\":{\"5993\":1}}],[\"事实上\",{\"1\":{\"5216\":1}}],[\"事后编写的单元测试\",{\"1\":{\"4448\":1}}],[\"事务会影响数据库的qps\",{\"1\":{\"3403\":1}}],[\"事务场景中\",{\"1\":{\"3269\":1}}],[\"事情处理\",{\"1\":{\"1871\":1}}],[\"事先创建好对象\",{\"1\":{\"1327\":1}}],[\"造出新的对象\",{\"1\":{\"1862\":1}}],[\"造成获取用户cookie\",{\"1\":{\"3342\":1}}],[\"造成其它线程无法成功获取锁\",{\"1\":{\"3167\":1}}],[\"造成线上故障\",{\"1\":{\"3078\":1}}],[\"造成内存资源浪费\",{\"1\":{\"3073\":1}}],[\"造成内存浪费\",{\"1\":{\"2291\":1}}],[\"造成误解\",{\"1\":{\"3012\":1}}],[\"造成原有功能出现错误\",{\"1\":{\"2120\":1}}],[\"造成服务器的资源浪费\",{\"1\":{\"1416\":1}}],[\"造成工厂角色无法形成基于继承的等级结构\",{\"1\":{\"1182\":1}}],[\"研究旧对象和其父亲的基因\",{\"1\":{\"1862\":1}}],[\"母亲\",{\"1\":{\"1860\":1,\"1894\":1}}],[\"旧对象\",{\"1\":{\"1858\":1}}],[\"完整\",{\"1\":{\"3931\":1}}],[\"完整的写法是\",{\"1\":{\"1855\":1}}],[\"完善若干处示例\",{\"1\":{\"3520\":1,\"3524\":1}}],[\"完美版\",{\"1\":{\"3502\":1}}],[\"完全的实例和详解\",{\"1\":{\"6742\":1}}],[\"完全失去版本的语义信息\",{\"1\":{\"3427\":1}}],[\"完全没有注释的大段代码对于阅读者形同天书\",{\"1\":{\"3218\":1}}],[\"完全不依赖实现编程呢\",{\"1\":{\"2715\":1}}],[\"完全不支持\",{\"1\":{\"2356\":1}}],[\"完全能满足我们将图片存储在阿里云的业务需求\",{\"1\":{\"2700\":1}}],[\"完成第二次的分派\",{\"1\":{\"2962\":1}}],[\"完成两个数相加\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"完成审批\",{\"1\":{\"1961\":1}}],[\"完成多线程间同步工作\",{\"1\":{\"1916\":1}}],[\"完成深拷贝\",{\"1\":{\"1797\":2}}],[\"完成即可\",{\"1\":{\"1793\":1}}],[\"完成任务\",{\"1\":{\"1601\":1}}],[\"完成对应任务\",{\"1\":{\"1601\":1}}],[\"完成对聚合对象的遍历\",{\"1\":{\"1521\":1}}],[\"完成对按钮初始化\",{\"1\":{\"781\":1}}],[\"完成具体产品的创建\",{\"1\":{\"1230\":1,\"1290\":1}}],[\"完成披萨店订购功能\",{\"1\":{\"1193\":1}}],[\"完成通过遥控器\",{\"1\":{\"783\":1}}],[\"完成盖房子\",{\"1\":{\"713\":2}}],[\"完成复杂产品的各个部件的具体创建方法\",{\"1\":{\"683\":1}}],[\"完成\",{\"1\":{\"529\":1,\"720\":1,\"2669\":1}}],[\"完成被适配类到适配接口的适配\",{\"1\":{\"513\":1}}],[\"老牌开源项目\",{\"1\":{\"6442\":1}}],[\"老师依然存在\",{\"1\":{\"2873\":1}}],[\"老师授课中\",{\"1\":{\"1842\":1,\"1869\":1,\"1901\":1}}],[\"老手和\",{\"1\":{\"2597\":1}}],[\"老的使用方式\",{\"1\":{\"2381\":1}}],[\"老话说\",{\"1\":{\"142\":1}}],[\"授权\",{\"1\":{\"6598\":1}}],[\"授权或会话管理的函数库\",{\"1\":{\"6597\":1}}],[\"授权已过期\",{\"1\":{\"3647\":1}}],[\"授权委托书\",{\"1\":{\"1089\":1}}],[\"授课方法\",{\"1\":{\"1869\":1}}],[\"授课的方法\",{\"1\":{\"1842\":1}}],[\"找不到类异常\",{\"1\":{\"4822\":1}}],[\"找到指定名称的配置后返回\",{\"1\":{\"6218\":1}}],[\"找到匹配后\",{\"1\":{\"6074\":1}}],[\"找到与之对应的处理程序\",{\"1\":{\"4778\":1}}],[\"找到你按下的关的按钮\",{\"1\":{\"781\":1}}],[\"找到你按下的开的按钮\",{\"1\":{\"781\":1}}],[\"找出差异点\",{\"1\":{\"3429\":1}}],[\"找出应用中可能需要变化之处\",{\"1\":{\"2211\":1}}],[\"找工作等都可以通过找中介完成\",{\"1\":{\"1809\":1}}],[\"找保姆\",{\"1\":{\"1809\":1}}],[\"宋江\",{\"1\":{\"1797\":1}}],[\"引起社会高度关注\",{\"1\":{\"3456\":1}}],[\"引导用户进行下一步操作或解释错误原因\",{\"1\":{\"3226\":1}}],[\"引用调用\",{\"1\":{\"5775\":1}}],[\"引用\",{\"1\":{\"5765\":1}}],[\"引用皆在此列\",{\"1\":{\"5743\":1}}],[\"引用的是同一个字符串常量池的对象\",{\"1\":{\"5310\":1}}],[\"引用的对象放到\",{\"1\":{\"5310\":1}}],[\"引用的其他类\",{\"1\":{\"2157\":1}}],[\"引用这个特殊情况来证明省略典型的阅读者可能需要知道的相关信息是不合适的\",{\"1\":{\"4261\":1}}],[\"引用该版本\",{\"1\":{\"3432\":1}}],[\"引用类型\",{\"1\":{\"1795\":1,\"1799\":1}}],[\"引入的新特性\",{\"0\":{\"5671\":1}}],[\"引入hashcode\",{\"1\":{\"5650\":1}}],[\"引入泛型\",{\"1\":{\"5008\":1}}],[\"引入泛型的意义在于\",{\"1\":{\"4998\":1}}],[\"引入一个中间层\",{\"1\":{\"2766\":1}}],[\"引入一个抽象的接口\",{\"1\":{\"2080\":1}}],[\"引入中间层可以起到过渡的作用\",{\"1\":{\"2765\":1}}],[\"引入中间层能简化模块或类之间的依赖关系\",{\"1\":{\"2764\":1}}],[\"引入\",{\"1\":{\"2754\":1,\"6870\":1}}],[\"引入新的工厂类\",{\"1\":{\"1180\":1}}],[\"引入外观模式可将它们分离\",{\"1\":{\"1155\":1}}],[\"引入了一个新的功能参数化测试\",{\"1\":{\"4386\":1}}],[\"引入了请求方与抽象命令接口\",{\"1\":{\"755\":1}}],[\"引入了额外类型结构\",{\"1\":{\"755\":1}}],[\"推荐分层结构如图所示\",{\"1\":{\"3409\":1}}],[\"推荐对日志进行分类\",{\"1\":{\"3286\":1}}],[\"推荐业界已定义过的自定义异常\",{\"1\":{\"3277\":1}}],[\"推荐操作等\",{\"1\":{\"3226\":1}}],[\"推荐使用这些转义序列\",{\"1\":{\"3952\":1}}],[\"推荐使用这种单例设计模式\",{\"1\":{\"2318\":1}}],[\"推荐使用订单号\",{\"1\":{\"3297\":1}}],[\"推荐使用slf4j\",{\"1\":{\"3280\":1}}],[\"推荐使用复数\",{\"1\":{\"3224\":1}}],[\"推荐使用longadder对象\",{\"1\":{\"3180\":1}}],[\"推荐使用乐观锁\",{\"1\":{\"3173\":1}}],[\"推荐使用instant类\",{\"1\":{\"3080\":1}}],[\"推荐使用equals方法进行判断\",{\"1\":{\"3046\":1}}],[\"推荐使用jdk7引入的工具类java\",{\"1\":{\"3045\":1}}],[\"推荐使用\",{\"1\":{\"2313\":1,\"2320\":1,\"2326\":1,\"2332\":1}}],[\"推荐\",{\"0\":{\"4097\":1},\"1\":{\"1788\":1,\"1795\":1,\"1800\":1,\"2328\":1,\"2982\":1,\"2999\":1,\"3000\":1,\"3001\":1,\"3003\":1,\"3004\":1,\"3015\":1,\"3016\":1,\"3017\":1,\"3036\":1,\"3037\":1,\"3038\":1,\"3058\":1,\"3064\":1,\"3066\":1,\"3068\":1,\"3069\":1,\"3071\":1,\"3074\":1,\"3075\":1,\"3076\":1,\"3086\":1,\"3087\":1,\"3121\":1,\"3123\":1,\"3124\":1,\"3125\":1,\"3175\":1,\"3176\":1,\"3177\":1,\"3178\":1,\"3191\":1,\"3192\":1,\"3196\":1,\"3200\":1,\"3202\":1,\"3203\":1,\"3204\":1,\"3214\":1,\"3215\":1,\"3216\":1,\"3234\":1,\"3235\":1,\"3236\":1,\"3245\":1,\"3246\":1,\"3247\":1,\"3258\":1,\"3259\":1,\"3275\":1,\"3276\":1,\"3277\":1,\"3294\":1,\"3295\":1,\"3296\":1,\"3297\":1,\"3309\":1,\"3310\":1,\"3315\":1,\"3316\":1,\"3317\":1,\"3318\":1,\"3319\":1,\"3348\":1,\"3361\":1,\"3362\":1,\"3363\":1,\"3364\":1,\"3365\":1,\"3372\":1,\"3373\":1,\"3374\":1,\"3375\":1,\"3376\":1,\"3377\":1,\"3389\":1,\"3390\":1,\"3401\":1,\"3409\":1,\"3434\":1,\"3435\":1,\"3437\":1,\"3438\":1,\"3442\":1,\"3443\":1,\"3444\":1,\"3445\":1,\"3446\":1,\"3447\":1,\"3457\":1,\"3462\":1,\"3463\":1,\"3464\":1,\"3465\":1,\"3466\":1,\"3467\":1,\"3469\":1,\"4199\":1}}],[\"浅谈单元测试\",{\"0\":{\"4429\":1}}],[\"浅拷贝\",{\"1\":{\"5461\":1}}],[\"浅拷贝是使用默认的\",{\"1\":{\"1783\":1}}],[\"浅拷贝会直接进行值传递\",{\"1\":{\"1780\":1}}],[\"浅拷贝的介绍\",{\"1\":{\"1779\":1}}],[\"浅拷贝和深拷贝\",{\"0\":{\"1778\":1}}],[\"浅克隆需要运用得当\",{\"1\":{\"1748\":1}}],[\"深入理解\",{\"1\":{\"5397\":1}}],[\"深入理解泛型\",{\"0\":{\"5066\":1}}],[\"深入理解异常\",{\"0\":{\"4933\":1}}],[\"深入理解注解\",{\"0\":{\"4650\":1}}],[\"深入浅出的生动表达力\",{\"1\":{\"3472\":1}}],[\"深入浅出地将计算机基础\",{\"1\":{\"2983\":1}}],[\"深入讨论\",{\"0\":{\"1778\":1}}],[\"深拷贝\",{\"1\":{\"1795\":2,\"5464\":1}}],[\"深拷贝应用实例\",{\"1\":{\"1789\":1}}],[\"深拷贝实现方式\",{\"1\":{\"1787\":1,\"1788\":1}}],[\"深拷贝基本介绍\",{\"1\":{\"1784\":1}}],[\"深克隆\",{\"1\":{\"1748\":1}}],[\"蒙古羊\",{\"1\":{\"1772\":1}}],[\"效率就非常的低下\",{\"1\":{\"3374\":1}}],[\"效率更高\",{\"1\":{\"3124\":1}}],[\"效率高\",{\"1\":{\"2325\":1}}],[\"效率较高\",{\"1\":{\"2317\":1}}],[\"效率较低\",{\"1\":{\"1766\":1}}],[\"效率可能降低\",{\"1\":{\"1494\":1}}],[\"羊属性完全相同的\",{\"1\":{\"1756\":1}}],[\"颜色为\",{\"1\":{\"1756\":1}}],[\"规则化测试\",{\"1\":{\"6958\":1}}],[\"规则\",{\"1\":{\"3239\":1,\"6298\":1}}],[\"规则中相互联系和扩展\",{\"1\":{\"2818\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"3159\":1}}],[\"规避被辞退的风险\",{\"1\":{\"396\":1}}],[\"规约依次分为\",{\"1\":{\"2982\":1}}],[\"规范性\",{\"1\":{\"2576\":1}}],[\"规范\",{\"1\":{\"2066\":1,\"5648\":1}}],[\"规定了具体原型对象必须实现的接口\",{\"1\":{\"1751\":1}}],[\"声明为static和transient类型的数据不能被序列化\",{\"1\":{\"5736\":1}}],[\"声明类不允许被继承\",{\"1\":{\"5481\":1}}],[\"声明类型尽量是抽象类或接口\",{\"1\":{\"2094\":1}}],[\"声明方法不能被子类重写\",{\"1\":{\"5478\":1}}],[\"声明数据为常量\",{\"1\":{\"5473\":1}}],[\"声明object的泛型对象\",{\"1\":{\"5044\":1}}],[\"声明string的泛型对象\",{\"1\":{\"5044\":1}}],[\"声明integer的泛型对象\",{\"1\":{\"5042\":1}}],[\"声明接口对象\",{\"1\":{\"5020\":1}}],[\"声明\",{\"1\":{\"4895\":1,\"6817\":1}}],[\"声明的任何异常必须是被覆盖方法所声明异常的同类或子类\",{\"1\":{\"4751\":1}}],[\"声明变量\",{\"1\":{\"4407\":1}}],[\"声明一个异常\",{\"1\":{\"4804\":1}}],[\"声明一个包含接受操作\",{\"1\":{\"2947\":1}}],[\"声明一个克隆自己的接口\",{\"1\":{\"1751\":1}}],[\"声明执行命令的接口\",{\"1\":{\"759\":1}}],[\"允许像对象一样传递匿名函数\",{\"1\":{\"5672\":1}}],[\"允许你控制整个序列化过程\",{\"1\":{\"5668\":1}}],[\"允许你对代码做出任何改变\",{\"1\":{\"4437\":1}}],[\"允许在任何时候代码重构\",{\"1\":{\"4440\":1}}],[\"允许存在多个空格\",{\"1\":{\"4084\":1,\"4085\":1}}],[\"允许超过列限制\",{\"1\":{\"4034\":1}}],[\"允许\",{\"1\":{\"3962\":1,\"3964\":1,\"4096\":1,\"5670\":1}}],[\"允许的创建线程数量为integer\",{\"1\":{\"3159\":1}}],[\"允许的请求队列长度为integer\",{\"1\":{\"3159\":2}}],[\"允许为null\",{\"1\":{\"3138\":1,\"3147\":1,\"3148\":1}}],[\"允许使用者根据自己的需求去更新它\",{\"1\":{\"2637\":1}}],[\"允许一个对象在其内部状态发生改变时改变其行为能力\",{\"1\":{\"2629\":1}}],[\"允许一个对象再创建另外一个可定制的对象\",{\"1\":{\"1740\":1}}],[\"允许改变其行为\",{\"1\":{\"2419\":1}}],[\"允许状态对象在其内部状态发生改变时改变其行为\",{\"1\":{\"2418\":1}}],[\"允许对象组合实现与继承相同的代码重用\",{\"1\":{\"1085\":1,\"1086\":1}}],[\"包部署更简单一点\",{\"1\":{\"6859\":1}}],[\"包部署会比复杂的\",{\"1\":{\"6859\":1}}],[\"包或者\",{\"1\":{\"6859\":1,\"6883\":1}}],[\"包或者库\",{\"1\":{\"6842\":1}}],[\"包裹住它们\",{\"1\":{\"6826\":1}}],[\"包裹老的接口\",{\"1\":{\"2766\":1}}],[\"包等等信息\",{\"1\":{\"5821\":1}}],[\"包装数据是最简单的事情之一\",{\"1\":{\"6797\":1}}],[\"包装数据类型不能使用equals进行判断\",{\"1\":{\"3048\":1}}],[\"包装类型\",{\"0\":{\"5251\":1}}],[\"包装异常时不要抛弃原始的异常\",{\"0\":{\"4924\":1}}],[\"包\",{\"1\":{\"4520\":1,\"4590\":1,\"6005\":1,\"6242\":1,\"6247\":1,\"6883\":2}}],[\"包名只使用小写字母和数字\",{\"1\":{\"4166\":1}}],[\"包名\",{\"0\":{\"4165\":1}}],[\"包名统一使用单数形式\",{\"1\":{\"2995\":1}}],[\"包名统一使用小写\",{\"1\":{\"2995\":1}}],[\"包内共享常量\",{\"1\":{\"3016\":2}}],[\"包图\",{\"1\":{\"2812\":1}}],[\"包的底层是通过使用字节码处理框架\",{\"1\":{\"1882\":1}}],[\"包括若干前端组件\",{\"1\":{\"6672\":1}}],[\"包括清理\",{\"1\":{\"6514\":1}}],[\"包括从预处理到可视化的各个层次\",{\"1\":{\"6492\":1}}],[\"包括svg解析器\",{\"1\":{\"6454\":1}}],[\"包括java\",{\"1\":{\"6444\":1}}],[\"包括类型参数\",{\"1\":{\"6047\":1}}],[\"包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口\",{\"1\":{\"6011\":1}}],[\"包括公共\",{\"1\":{\"6005\":1}}],[\"包括抽象方法\",{\"1\":{\"5995\":1}}],[\"包括其一般类型\",{\"1\":{\"5983\":1}}],[\"包括其它部门rpc服务接口\",{\"1\":{\"3416\":1}}],[\"包括private\",{\"1\":{\"5906\":1,\"5909\":1}}],[\"包括继承自父类的所有公共字段\",{\"1\":{\"5879\":1}}],[\"包括包名\",{\"1\":{\"5865\":1,\"5869\":1}}],[\"包括字符串常量池\",{\"1\":{\"5322\":1}}],[\"包括需要处理哪些异常\",{\"1\":{\"4843\":1}}],[\"包括运行时异常\",{\"1\":{\"4731\":1}}],[\"包括注解类型\",{\"1\":{\"4659\":1}}],[\"包括注释标记\",{\"1\":{\"4247\":1}}],[\"包括注册\",{\"1\":{\"1721\":1}}],[\"包括首字母缩略词\",{\"1\":{\"4200\":1}}],[\"包括\",{\"1\":{\"3971\":1,\"4062\":1,\"4501\":1,\"4502\":1,\"4508\":1,\"4590\":1,\"6213\":1}}],[\"包括do\",{\"1\":{\"3534\":1}}],[\"包括缓存回滚\",{\"1\":{\"3404\":1}}],[\"包括循环边界\",{\"1\":{\"3311\":1}}],[\"包括请求和响应\",{\"1\":{\"3235\":1}}],[\"包括接口中的方法\",{\"1\":{\"3209\":1}}],[\"包括赋值运算符\",{\"1\":{\"3023\":1}}],[\"包括用于判断的逻辑方法和需要子类重写的空方法两种\",{\"1\":{\"2657\":1}}],[\"包括对象的引用类型\",{\"1\":{\"1786\":1}}],[\"包含在客户端将java代码转为javascript的编译器\",{\"1\":{\"6667\":1}}],[\"包含弹出菜单及点击菜单后对应的操作执行类等\",{\"1\":{\"6214\":1}}],[\"包含继承自父类的方法\",{\"1\":{\"6013\":1}}],[\"包含继承字段\",{\"1\":{\"5957\":1,\"5960\":1}}],[\"包含父类字段\",{\"1\":{\"5962\":1}}],[\"包含private字段\",{\"1\":{\"5962\":1}}],[\"包含private修饰的\",{\"1\":{\"5951\":1,\"5954\":1}}],[\"包含private\",{\"1\":{\"5846\":2}}],[\"包含两个子类\",{\"1\":{\"4713\":1}}],[\"包含了与类有关的信息\",{\"1\":{\"5515\":1}}],[\"包含了其线程创建时线程执行堆栈的快照\",{\"1\":{\"4714\":1}}],[\"包含了elementtype\",{\"1\":{\"4659\":1}}],[\"包含了关键字\",{\"1\":{\"1401\":1}}],[\"包含测试用例\",{\"1\":{\"4284\":1}}],[\"包含违禁敏感词\",{\"1\":{\"3704\":1}}],[\"包含非法恶意跳转\",{\"1\":{\"3672\":1}}],[\"包含以下几种类型\",{\"1\":{\"2654\":1}}],[\"包含以下主要角色\",{\"1\":{\"498\":1}}],[\"包含抽象处理方法和一个后继连接\",{\"1\":{\"1944\":1}}],[\"包含最新的天气情况信息\",{\"1\":{\"1718\":1}}],[\"包含的学院\",{\"1\":{\"852\":1,\"854\":1}}],[\"包含\",{\"1\":{\"53\":1}}],[\"移动端展示等\",{\"1\":{\"3411\":1}}],[\"移除一切不必要的api和依赖\",{\"1\":{\"3439\":1}}],[\"移除一个观察者\",{\"1\":{\"1718\":1}}],[\"移除\",{\"1\":{\"2964\":1,\"3520\":1}}],[\"移除和通知\",{\"1\":{\"1721\":1}}],[\"移位前先转化为它的补码\",{\"1\":{\"422\":1}}],[\"含有\",{\"1\":{\"1718\":1}}],[\"含有一个\",{\"1\":{\"1549\":1}}],[\"百度网站\",{\"1\":{\"1716\":3}}],[\"温度\",{\"1\":{\"1702\":1,\"1716\":2}}],[\"逻辑简单\",{\"1\":{\"6621\":1}}],[\"逻辑代数与优化问题最先进的求解程序\",{\"1\":{\"6325\":1}}],[\"逻辑复杂的\",{\"1\":{\"4452\":1}}],[\"逻辑复用\",{\"1\":{\"1032\":1}}],[\"逻辑分组\",{\"1\":{\"4063\":1}}],[\"逻辑分析\",{\"0\":{\"1693\":1}}],[\"逻辑排序\",{\"1\":{\"3999\":1}}],[\"逻辑删除在数据删除后可以追溯到行为操作\",{\"1\":{\"3360\":1}}],[\"逻辑运算符\",{\"1\":{\"3023\":1}}],[\"测量和报告延迟的工具\",{\"1\":{\"6566\":1}}],[\"测量代码指标和质量工具\",{\"1\":{\"6305\":1}}],[\"测量数据更新时\",{\"1\":{\"1691\":1}}],[\"测试覆盖率百分比\",{\"1\":{\"6991\":1}}],[\"测试是软件的关键环节\",{\"1\":{\"6954\":1}}],[\"测试框架\",{\"1\":{\"6641\":1}}],[\"测试内容从对象到接口\",{\"1\":{\"6625\":1}}],[\"测试对象为空\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"测试对象不为空\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"测试失败\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"测试有返回值的方法\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"测试没有返回值\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"测试方式通过test的前缀方法获取\",{\"1\":{\"4681\":1}}],[\"测试方法都必须以\",{\"1\":{\"4485\":1}}],[\"测试方法\",{\"1\":{\"4309\":1,\"4393\":1,\"6156\":1}}],[\"测试方法必须是public\",{\"1\":{\"4294\":1}}],[\"测试方法的命名没有一种唯一正确的方式\",{\"1\":{\"4175\":1}}],[\"测试方法名中\",{\"1\":{\"4175\":1}}],[\"测试的输出\",{\"1\":{\"4648\":1}}],[\"测试用例\",{\"0\":{\"4484\":1}}],[\"测试用例通常是被定期执行的\",{\"1\":{\"3303\":1}}],[\"测试替身有如下\",{\"1\":{\"4464\":1}}],[\"测试替身\",{\"0\":{\"4463\":1},\"1\":{\"4464\":1}}],[\"测试依赖组件\",{\"0\":{\"4461\":1}}],[\"测试顺序\",{\"0\":{\"4417\":1}}],[\"测试套件批量运行\",{\"1\":{\"4487\":1}}],[\"测试套件\",{\"0\":{\"4486\":1},\"1\":{\"4414\":1}}],[\"测试例子\",{\"1\":{\"4403\":1}}],[\"测试运行器则决定了用什么方式偏好去运行这些测试集\",{\"1\":{\"4313\":1,\"4397\":1}}],[\"测试运行器\",{\"1\":{\"4309\":1,\"4393\":1}}],[\"测试集运行器配合使用测试集功能\",{\"1\":{\"4316\":1,\"4400\":1}}],[\"测试集是一个suite\",{\"1\":{\"4312\":1,\"4396\":1}}],[\"测试集\",{\"1\":{\"4309\":1,\"4393\":1}}],[\"测试允许你编写代码更快\",{\"1\":{\"4281\":1}}],[\"测试粒度小才能在出错时尽快定位到出错的位置\",{\"1\":{\"3306\":1}}],[\"测试\",{\"0\":{\"4325\":1,\"4328\":1,\"4335\":1,\"4339\":1,\"4370\":1,\"4375\":1,\"4385\":1,\"4409\":1,\"4417\":1,\"6624\":1},\"1\":{\"1720\":2,\"2286\":1,\"2293\":1,\"5754\":1,\"6779\":1}}],[\"测试抽象工厂模式\",{\"1\":{\"1309\":1}}],[\"测试代码\",{\"1\":{\"625\":1,\"857\":1,\"927\":1}}],[\"测试类2\",{\"1\":{\"4412\":1}}],[\"测试类1\",{\"1\":{\"4410\":1}}],[\"测试类是包含一个或多个测试方法的一个\",{\"1\":{\"4395\":1}}],[\"测试类是包含一个或多个测试方法的一个test\",{\"1\":{\"4311\":1}}],[\"测试类的名称以\",{\"1\":{\"4171\":1}}],[\"测试类命名以它要测试的类的名称开始\",{\"1\":{\"2992\":1}}],[\"测试类\",{\"1\":{\"565\":1,\"712\":1,\"782\":1,\"1137\":1,\"1430\":1,\"1490\":1,\"1540\":1,\"1604\":1,\"1654\":1,\"1703\":1,\"1719\":1,\"1843\":1,\"1872\":1,\"1904\":1,\"1975\":1,\"2455\":1,\"2472\":1,\"2540\":1,\"2678\":1,\"2965\":1,\"4296\":1,\"4309\":1,\"4393\":1,\"4406\":1,\"4660\":1}}],[\"气温\",{\"1\":{\"1716\":1}}],[\"气压\",{\"1\":{\"1702\":1,\"1716\":3}}],[\"气压和湿度的接口\",{\"1\":{\"1690\":1}}],[\"气压等等以公告的形式发布出去\",{\"1\":{\"1688\":1}}],[\"气象站通过调用\",{\"1\":{\"1698\":1}}],[\"气象站可以将每天测量到的温度\",{\"1\":{\"1688\":1}}],[\"气象局的天气预报与听众\",{\"1\":{\"1667\":1}}],[\"湿度\",{\"1\":{\"1688\":1,\"1702\":1,\"1716\":3}}],[\"影响范围极小的api不兼容修改\",{\"1\":{\"3427\":1}}],[\"影响可读性\",{\"1\":{\"3383\":1}}],[\"影响查询性能\",{\"1\":{\"3372\":1}}],[\"影响到上层业务\",{\"1\":{\"3274\":1}}],[\"影响到其他\",{\"1\":{\"2362\":1}}],[\"影响的范围是非常有限的\",{\"1\":{\"2755\":1}}],[\"影响程序的效率\",{\"1\":{\"1675\":1}}],[\"影院的\",{\"1\":{\"1133\":1}}],[\"影院管理项目类图\",{\"1\":{\"1130\":1}}],[\"影院管理项目\",{\"0\":{\"1115\":1}}],[\"订购数量为空\",{\"1\":{\"3680\":1}}],[\"订阅模式\",{\"1\":{\"1668\":1}}],[\"订单已关闭\",{\"1\":{\"3716\":1}}],[\"订单生成\",{\"1\":{\"2469\":1}}],[\"订单生成状态类\",{\"1\":{\"2467\":1}}],[\"订单\",{\"1\":{\"2354\":1}}],[\"订单状态跟踪\",{\"1\":{\"1058\":1}}],[\"订单分析图\",{\"1\":{\"919\":1}}],[\"股票价格与股民\",{\"1\":{\"1667\":1}}],[\"遇到绿灯会行\",{\"1\":{\"1667\":1}}],[\"遇到红灯会停\",{\"1\":{\"1667\":1}}],[\"遇到困难时\",{\"1\":{\"152\":1}}],[\"遇到困难\",{\"1\":{\"151\":1}}],[\"许多容器类\",{\"1\":{\"5644\":1}}],[\"许多对象并不是独立存在的\",{\"1\":{\"1667\":1}}],[\"许多人晚睡的原因\",{\"1\":{\"138\":1}}],[\"势必会占用比较大的资源\",{\"1\":{\"1659\":1}}],[\"恢复现场\",{\"1\":{\"4301\":1}}],[\"恢复后的状态\",{\"1\":{\"1655\":1}}],[\"恢复\",{\"1\":{\"1653\":1}}],[\"恢复状态\",{\"1\":{\"1636\":2}}],[\"守护者对象\",{\"1\":{\"1651\":1}}],[\"出有副作用\",{\"1\":{\"6960\":1}}],[\"出来\",{\"1\":{\"6083\":1}}],[\"出于速度和安全性两个方面的综合考虑\",{\"1\":{\"5745\":1}}],[\"出现异常就停止执行下面的代码\",{\"1\":{\"4802\":1}}],[\"出现异常之后的语句也不会被执行\",{\"1\":{\"4778\":1}}],[\"出现问题\",{\"1\":{\"4717\":1}}],[\"出现在上一行代码中的另一些单词的正下方\",{\"1\":{\"4092\":1}}],[\"出现数组越界异常\",{\"1\":{\"3085\":1}}],[\"出错时的堆内信息对解决问题非常有帮助\",{\"1\":{\"3445\":1}}],[\"出对象\",{\"1\":{\"2891\":1}}],[\"出行旅游可以乘坐飞机\",{\"1\":{\"2485\":1}}],[\"出另外一个对象出来\",{\"1\":{\"1642\":1}}],[\"出该对象\",{\"1\":{\"1200\":1}}],[\"新手\",{\"1\":{\"6863\":1}}],[\"新手或者想提高效率的人尤有帮助\",{\"1\":{\"6859\":1}}],[\"新手的区别就是前者手背上有很多伤疤\",{\"1\":{\"2597\":1}}],[\"新特性教程例子\",{\"1\":{\"6687\":1}}],[\"新一代的模板引擎\",{\"1\":{\"6623\":1}}],[\"新建一个迭代器\",{\"1\":{\"6258\":1}}],[\"新建了两个等价的对象\",{\"1\":{\"5444\":1}}],[\"新创建缓存\",{\"1\":{\"6076\":1}}],[\"新方法和新技术\",{\"1\":{\"2816\":1}}],[\"新开发的代码依赖中间层提供的新接口\",{\"1\":{\"2767\":1}}],[\"新的代码风格看起来会更加整洁\",{\"1\":{\"6795\":1}}],[\"新的对象\",{\"1\":{\"5144\":1}}],[\"新的方法不是习惯性地添加到类的最后\",{\"1\":{\"3999\":1}}],[\"新的\",{\"1\":{\"2703\":1}}],[\"新的使用方式\",{\"1\":{\"2381\":1}}],[\"新的状态\",{\"1\":{\"1636\":1}}],[\"新对象可以动态地引用与成分对象类型相同的对象\",{\"1\":{\"2222\":1}}],[\"新对象可以调用已有对象的功能\",{\"1\":{\"2219\":1}}],[\"新对象存取成分对象的唯一方法是通过成分对象的接口\",{\"1\":{\"2221\":1}}],[\"新旧类之间的耦合度低\",{\"1\":{\"2221\":1}}],[\"新增部门\",{\"1\":{\"4696\":1}}],[\"新增保存部门\",{\"1\":{\"4696\":1}}],[\"新增扩展说明\",{\"1\":{\"3532\":1}}],[\"新增描述中的正反例\",{\"1\":{\"3532\":1}}],[\"新增涉及敏感操作的情况下日志需要保存六个月的约定\",{\"1\":{\"3528\":1}}],[\"新增禁止任何歧视性用语的约定\",{\"1\":{\"3528\":1}}],[\"新增前后端规约\",{\"1\":{\"3528\":1}}],[\"新增\",{\"1\":{\"3520\":1,\"3524\":1,\"3532\":1,\"4590\":2}}],[\"新增次要功能特性等\",{\"1\":{\"3427\":1}}],[\"新增代码及时补充单元测试\",{\"1\":{\"3307\":1}}],[\"新增或改变功能\",{\"1\":{\"2803\":1}}],[\"新增一个图形\",{\"1\":{\"2152\":1}}],[\"新增画三角形\",{\"1\":{\"2149\":1,\"2152\":1}}],[\"新功能出现\",{\"1\":{\"1859\":1,\"1893\":1}}],[\"新闻\",{\"1\":{\"1431\":1}}],[\"棋类游戏中的悔棋功能等都属于这类\",{\"1\":{\"1620\":1}}],[\"记忆技巧\",{\"1\":{\"2909\":1}}],[\"记事本\",{\"1\":{\"1620\":1,\"1664\":1}}],[\"记录应用程序行为日志的开发库\",{\"1\":{\"6476\":1}}],[\"记录日志并再次抛出的逻辑\",{\"1\":{\"4917\":1}}],[\"记录日志时请思考\",{\"1\":{\"3294\":1}}],[\"记录本地异常日志\",{\"1\":{\"4693\":1}}],[\"记录当前时刻的内部状态信息\",{\"1\":{\"1630\":1}}],[\"记录遍历的当前位置\",{\"1\":{\"1521\":1}}],[\"记录这次的操作\",{\"1\":{\"781\":2}}],[\"记录\",{\"1\":{\"740\":1}}],[\"闹铃响起\",{\"1\":{\"1589\":1}}],[\"闹钟\",{\"1\":{\"1078\":1,\"1588\":1,\"1603\":1}}],[\"窗帘\",{\"1\":{\"1603\":1}}],[\"窗帘自动落下\",{\"1\":{\"1589\":1}}],[\"窗帘等\",{\"1\":{\"1588\":1}}],[\"窗体程序中的简单控件与容器控件等\",{\"1\":{\"806\":1}}],[\"聊天程序的\",{\"1\":{\"1570\":1}}],[\"房屋中介\",{\"1\":{\"1569\":1}}],[\"房子\",{\"1\":{\"700\":1,\"706\":1,\"709\":1}}],[\"房子有各种各样的\",{\"1\":{\"688\":1}}],[\"星形结构\",{\"1\":{\"1569\":1}}],[\"星巴克咖啡订单项目\",{\"0\":{\"895\":1}}],[\"牵一发而动全身\",{\"1\":{\"1568\":1,\"2176\":1,\"2782\":1}}],[\"朋友中如果有人的电话修改了\",{\"1\":{\"1568\":1}}],[\"朋友圈\",{\"1\":{\"1068\":1}}],[\"她提出\",{\"1\":{\"2103\":1}}],[\"她\",{\"1\":{\"1568\":2}}],[\"索引等\",{\"1\":{\"3450\":1}}],[\"索引宁滥勿缺\",{\"1\":{\"3378\":1}}],[\"索引物理文件全扫描\",{\"1\":{\"3375\":1}}],[\"索引a\",{\"1\":{\"3372\":1}}],[\"索引如果存在范围查询\",{\"1\":{\"3372\":1}}],[\"索引文件具有b\",{\"1\":{\"3371\":1}}],[\"索引长度\",{\"1\":{\"3370\":1}}],[\"索引的长度与区分度是一对矛盾体\",{\"1\":{\"3370\":1}}],[\"索引规约\",{\"0\":{\"3367\":1}}],[\"索引\",{\"1\":{\"1537\":1,\"3372\":1}}],[\"服务的框架\",{\"1\":{\"6575\":1}}],[\"服务提供者也只会被实例化一次\",{\"1\":{\"6263\":1}}],[\"服务提供者接口\",{\"1\":{\"6258\":1}}],[\"服务提供者查找的迭代器\",{\"1\":{\"6258\":1}}],[\"服务提供发现机制\",{\"1\":{\"6140\":1,\"6141\":1}}],[\"服务未注册\",{\"1\":{\"3851\":1}}],[\"服务未找到\",{\"1\":{\"3849\":1}}],[\"服务出错\",{\"1\":{\"3846\":1}}],[\"服务已欠费\",{\"1\":{\"3663\":1}}],[\"服务\",{\"1\":{\"3305\":1}}],[\"服务端接口级别\",{\"1\":{\"3442\":1}}],[\"服务端special\",{\"1\":{\"3442\":1}}],[\"服务端返回的数据\",{\"1\":{\"3235\":1}}],[\"服务端一律使用string字符串类型返回\",{\"1\":{\"3229\":1}}],[\"服务端发生错误时\",{\"1\":{\"3226\":1}}],[\"服务器交互\",{\"1\":{\"6960\":1}}],[\"服务器编程交流平台是一个老牌的it信息网站\",{\"1\":{\"6737\":1}}],[\"服务器来提供此接口\",{\"1\":{\"4467\":1}}],[\"服务器开了点小差\",{\"1\":{\"3456\":1}}],[\"服务器端会因为处于time\",{\"1\":{\"3443\":1}}],[\"服务器返回信息必须被标记是否可以缓存\",{\"1\":{\"3234\":1}}],[\"服务器内部重定向必须使用forward\",{\"1\":{\"3233\":1,\"3448\":1}}],[\"服务器内部错误\",{\"1\":{\"3226\":1}}],[\"服务器无法取得所请求的网页\",{\"1\":{\"3226\":1}}],[\"服务器拒绝请求\",{\"1\":{\"3226\":1}}],[\"服务器集群\",{\"1\":{\"2578\":1}}],[\"服务器\",{\"0\":{\"3440\":1},\"1\":{\"1570\":1,\"6507\":1}}],[\"服务器安全专业\",{\"1\":{\"1535\":2}}],[\"服装\",{\"1\":{\"662\":1}}],[\"韶关学院\",{\"1\":{\"1525\":1}}],[\"华山版\",{\"1\":{\"3518\":1}}],[\"华南理工\",{\"1\":{\"1525\":1}}],[\"华为系列工厂\",{\"1\":{\"1310\":1}}],[\"华为工厂\",{\"1\":{\"1307\":1,\"1308\":1}}],[\"华为路由器\",{\"1\":{\"1298\":1,\"1306\":1}}],[\"华为手机打电话\",{\"1\":{\"1304\":1}}],[\"华为手机发送消息\",{\"1\":{\"1304\":1}}],[\"华为手机\",{\"1\":{\"1298\":1,\"1304\":1}}],[\"添加解释性的注释是非常有帮助的\",{\"1\":{\"3955\":1}}],[\"添加不同的配料\",{\"1\":{\"2677\":1}}],[\"添加配料\",{\"1\":{\"2666\":1}}],[\"添加\",{\"1\":{\"1518\":1,\"4895\":1}}],[\"访问控制上下文\",{\"1\":{\"6258\":1}}],[\"访问和私有方法\",{\"1\":{\"6005\":1}}],[\"访问父类的成员\",{\"1\":{\"5401\":1}}],[\"访问父类的构造函数\",{\"1\":{\"5400\":1}}],[\"访问权限\",{\"0\":{\"5358\":1}}],[\"访问权限异常\",{\"1\":{\"3636\":1}}],[\"访问null对象的属性\",{\"1\":{\"4821\":1}}],[\"访问未授权\",{\"1\":{\"3639\":1}}],[\"访问日志等\",{\"1\":{\"3286\":1}}],[\"访问者依赖的是具体元素\",{\"1\":{\"2971\":1}}],[\"访问者类\",{\"1\":{\"2961\":1}}],[\"访问者模式就是比较合适的\",{\"1\":{\"2972\":1}}],[\"访问者模式可以对功能进行统一\",{\"1\":{\"2970\":1}}],[\"访问者模式符合单一职责原则\",{\"1\":{\"2970\":1}}],[\"访问者模式的应用场景\",{\"0\":{\"2973\":1}}],[\"访问者模式的具体元素对访问者公布细节\",{\"1\":{\"2971\":1}}],[\"访问者模式的注意事项和细节\",{\"0\":{\"2969\":1}}],[\"访问者模式的结构与实现\",{\"0\":{\"2943\":1}}],[\"访问者模式应用实例\",{\"0\":{\"2954\":1}}],[\"访问者模式包含以下主要角色\",{\"1\":{\"2944\":1}}],[\"访问者模式依赖了具体类\",{\"1\":{\"2942\":1}}],[\"访问者模式中具体元素对访问者公布细节\",{\"1\":{\"2941\":1}}],[\"访问者模式把相关的行为封装在一起\",{\"1\":{\"2938\":1}}],[\"访问者模式将数据结构与作用于结构上的操作解耦\",{\"1\":{\"2937\":1}}],[\"访问者模式主要应用场景是\",{\"1\":{\"2933\":1}}],[\"访问者模式能把处理方法从数据结构中分离出来\",{\"1\":{\"2930\":1}}],[\"访问者模式基本介绍\",{\"0\":{\"2927\":1}}],[\"访问者模式\",{\"1\":{\"1079\":1,\"2623\":1,\"2930\":1,\"2931\":1,\"2932\":1}}],[\"访问凭证\",{\"1\":{\"2700\":1}}],[\"访问类\",{\"1\":{\"1753\":1}}],[\"访问一个聚合对象的内容而无须暴露它的内部表示\",{\"1\":{\"1508\":1}}],[\"物流系统中的传送带\",{\"1\":{\"1503\":1}}],[\"获得某个类的自己声明的字段\",{\"1\":{\"5881\":1}}],[\"获得某个类的所有的公共\",{\"1\":{\"5879\":1}}],[\"获得注解\",{\"1\":{\"4693\":1}}],[\"获得\",{\"1\":{\"2208\":1}}],[\"获得值映射\",{\"1\":{\"1491\":1}}],[\"获得表达式\",{\"1\":{\"1491\":1}}],[\"获取某个实现类的方式不够灵活\",{\"1\":{\"6267\":1}}],[\"获取迭代器\",{\"1\":{\"6190\":1,\"6236\":1,\"6258\":1}}],[\"获取保存的信息\",{\"1\":{\"6076\":1}}],[\"获取无参构造器\",{\"1\":{\"6065\":1}}],[\"获取信息\",{\"1\":{\"6061\":1}}],[\"获取调用进来的类信息\",{\"1\":{\"6059\":1}}],[\"获取类信息\",{\"1\":{\"6058\":1}}],[\"获取类名\",{\"1\":{\"5853\":1,\"5855\":1,\"5867\":1}}],[\"获取字段值\",{\"1\":{\"5964\":1}}],[\"获取父类public字段并赋值\",{\"1\":{\"5964\":1}}],[\"获取修饰符为public的字段\",{\"1\":{\"5960\":1}}],[\"获取指定参数的方法对象method\",{\"1\":{\"6017\":1}}],[\"获取指定字段名称的field类\",{\"1\":{\"5962\":2}}],[\"获取指定name名称\",{\"1\":{\"5957\":1}}],[\"获取指定name名称的\",{\"1\":{\"5951\":1}}],[\"获取指定某年的天数\",{\"1\":{\"3083\":1}}],[\"获取构造函数参数类型\",{\"1\":{\"5914\":1,\"5940\":1}}],[\"获取所有方法列表\",{\"1\":{\"6092\":1}}],[\"获取所有的构造器主要步骤\",{\"1\":{\"6077\":1}}],[\"获取所有构造器\",{\"1\":{\"6071\":1}}],[\"获取所有构造包含private\",{\"1\":{\"5914\":1}}],[\"获取所有public的方法\",{\"1\":{\"6013\":1}}],[\"获取所有修饰符为public的字段\",{\"1\":{\"5962\":1}}],[\"获取所有methods\",{\"1\":{\"4647\":1}}],[\"获取带string参数的public构造函数\",{\"1\":{\"5914\":1}}],[\"获取class对象引用\",{\"1\":{\"5964\":1}}],[\"获取class对象所表示的类或接口的所有\",{\"1\":{\"5954\":1}}],[\"获取class对象的引用\",{\"1\":{\"5914\":1}}],[\"获取class对象的一个引用\",{\"1\":{\"5860\":1,\"5863\":1}}],[\"获取class对象的三种方式\",{\"1\":{\"5853\":1}}],[\"获取class对象的方式的主要有三种\",{\"1\":{\"5849\":1}}],[\"获取constructor对象是通过class类中的方法获取的\",{\"1\":{\"5891\":1}}],[\"获取全限定的类名\",{\"1\":{\"5869\":1}}],[\"获取全限定类名\",{\"1\":{\"5853\":1,\"5855\":1}}],[\"获取泛型\",{\"1\":{\"5232\":1}}],[\"获取请求的参数\",{\"1\":{\"4693\":1}}],[\"获取参数的信息\",{\"1\":{\"4693\":1}}],[\"获取注解中对方法的描述信息\",{\"1\":{\"4693\":1}}],[\"获取当前类所有的构造方法\",{\"1\":{\"6076\":1}}],[\"获取当前类所字段\",{\"1\":{\"5962\":1}}],[\"获取当前类的所有方法包含private\",{\"1\":{\"6013\":1}}],[\"获取当前类的方法包含private\",{\"1\":{\"6013\":1}}],[\"获取当前的用户\",{\"1\":{\"4693\":1}}],[\"获取当前毫秒数\",{\"1\":{\"3080\":1}}],[\"获取mymethodannotation对象信息\",{\"1\":{\"4647\":1}}],[\"获取并遍历方法上的所有注解\",{\"1\":{\"4647\":1}}],[\"获取并保存一个对象的内部状态\",{\"1\":{\"2627\":1}}],[\"获取用户页面数据\",{\"1\":{\"3342\":1}}],[\"获取数据库连接\",{\"1\":{\"3202\":1}}],[\"获取单例对象需要保证线程安全\",{\"1\":{\"3155\":1}}],[\"获取单个对象的方法用get做前缀\",{\"1\":{\"3006\":1}}],[\"获取今年的天数\",{\"1\":{\"3083\":1}}],[\"获取纳秒级时间\",{\"1\":{\"3080\":1}}],[\"获取统计值的方法用count做前缀\",{\"1\":{\"3006\":1}}],[\"获取多个对象的方法用list做前缀\",{\"1\":{\"3006\":1}}],[\"获取状态\",{\"1\":{\"2465\":1}}],[\"获取加载器的方法固定\",{\"1\":{\"1871\":1}}],[\"获取网站分类的总数\",{\"1\":{\"1429\":1}}],[\"获取第一次创建的\",{\"1\":{\"1406\":3}}],[\"获取对象\",{\"1\":{\"1369\":1}}],[\"获取折叠式手机\",{\"1\":{\"626\":1}}],[\"获取\",{\"1\":{\"540\":1}}],[\"获取到的对象实例是不同的\",{\"1\":{\"2410\":1}}],[\"获取到的对象实例是相同的\",{\"1\":{\"2410\":1}}],[\"获取到学校总部员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"获取到学院员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"获取到代理对象\",{\"1\":{\"1905\":1}}],[\"获取到\",{\"1\":{\"520\":1,\"6084\":1}}],[\"数值的整数字面量会使用大写的\",{\"1\":{\"4159\":1}}],[\"数值后使用大写l\",{\"1\":{\"3012\":1}}],[\"数字字面量\",{\"0\":{\"4158\":1}}],[\"数字是一个整体\",{\"1\":{\"3263\":1}}],[\"数量超出限制\",{\"1\":{\"3696\":1}}],[\"数千万年\",{\"1\":{\"3366\":1}}],[\"数百岁\",{\"1\":{\"3366\":1}}],[\"数组等类型的表示形式就不同了\",{\"1\":{\"5887\":1}}],[\"数组同样也被映射为class\",{\"1\":{\"5824\":1}}],[\"数组的方法\",{\"1\":{\"5286\":1}}],[\"数组存储数据\",{\"1\":{\"5286\":1}}],[\"数组类型\",{\"1\":{\"5233\":1}}],[\"数组类型可能是int\",{\"1\":{\"4358\":1}}],[\"数组中包含不兼容的值抛出的异常\",{\"1\":{\"4824\":1,\"4833\":1}}],[\"数组长度为负异常\",{\"1\":{\"4823\":1}}],[\"数组索引越界异常\",{\"1\":{\"4819\":1}}],[\"数组初始化之后就不能再引用其它数组\",{\"1\":{\"5286\":1}}],[\"数组初始化\",{\"0\":{\"4113\":1},\"1\":{\"4003\":1,\"4103\":1}}],[\"数组创建完成之后\",{\"1\":{\"3106\":1}}],[\"数组空间大小的length\",{\"1\":{\"3106\":1}}],[\"数组\",{\"0\":{\"4112\":1},\"1\":{\"1537\":1,\"2546\":1,\"5888\":1}}],[\"数组后\",{\"1\":{\"1489\":1}}],[\"数据分析及数据可视化的开发环境\",{\"1\":{\"6588\":1}}],[\"数据搜索\",{\"1\":{\"6153\":1}}],[\"数据被保护在抽象数据类型的内部\",{\"1\":{\"5752\":1}}],[\"数据量大怎么解决\",{\"1\":{\"5650\":1}}],[\"数据量小还可以接受\",{\"1\":{\"5650\":1}}],[\"数据查询对象\",{\"1\":{\"3423\":1,\"3539\":1}}],[\"数据存储服务提供的接口\",{\"1\":{\"3417\":1}}],[\"数据访问层\",{\"1\":{\"3415\":1}}],[\"数据订正\",{\"1\":{\"3387\":1}}],[\"数据顺序等\",{\"1\":{\"3311\":1}}],[\"数据序列化和传输的性能损耗也是问题\",{\"1\":{\"3278\":1}}],[\"数据传输对象\",{\"1\":{\"3006\":1,\"3421\":1,\"3537\":1}}],[\"数据对象\",{\"1\":{\"3006\":1}}],[\"数据结构变更\",{\"1\":{\"3450\":1}}],[\"数据结构与集合\",{\"1\":{\"2983\":1}}],[\"数据结构\",{\"0\":{\"6351\":1},\"1\":{\"2578\":1,\"2964\":1}}],[\"数据\",{\"1\":{\"2389\":1,\"5472\":1}}],[\"数据源\",{\"1\":{\"2339\":1}}],[\"数据抽象和层次\",{\"1\":{\"2103\":1}}],[\"数据类型进行存储\",{\"1\":{\"5760\":1}}],[\"数据类型\",{\"0\":{\"5250\":1}}],[\"数据类型中引用太阳系年龄问题\",{\"1\":{\"3494\":1}}],[\"数据类型保持绝对一致\",{\"1\":{\"3369\":1}}],[\"数据类型是unsigned\",{\"1\":{\"3351\":1}}],[\"数据类\",{\"1\":{\"1717\":1}}],[\"数据初始化\",{\"1\":{\"1476\":1}}],[\"数据库操作\",{\"1\":{\"6656\":1}}],[\"数据库访问\",{\"1\":{\"6444\":1}}],[\"数据库搜索实现\",{\"1\":{\"6152\":1}}],[\"数据库连接代码时\",{\"1\":{\"4785\":1}}],[\"数据库连接池\",{\"1\":{\"1377\":1,\"1444\":1,\"2363\":1}}],[\"数据库死锁\",{\"1\":{\"3909\":1}}],[\"数据库服务出错\",{\"1\":{\"3900\":1}}],[\"数据库服务超时\",{\"1\":{\"3898\":1}}],[\"数据库名\",{\"1\":{\"3352\":1}}],[\"数据库字段名的修改代价很大\",{\"1\":{\"3352\":1}}],[\"数据库字段的bigint必须与类属性的long类型相对应\",{\"1\":{\"3055\":1}}],[\"数据库表示是与否的值\",{\"1\":{\"3351\":1}}],[\"数据库表\",{\"1\":{\"3166\":1}}],[\"数据库的查询结果可能为null\",{\"1\":{\"3276\":1}}],[\"数据库的查询结果可能是null\",{\"1\":{\"3058\":1}}],[\"数据库的表结构和索引设计缺陷带来的系统架构缺陷或性能风险\",{\"1\":{\"2982\":1}}],[\"数据库的连接池等\",{\"1\":{\"2348\":1}}],[\"数据库的连接池\",{\"1\":{\"2258\":1}}],[\"数据库中的连接池等也都是单例模式\",{\"1\":{\"2261\":1}}],[\"数据库与操作系统的备份操作\",{\"1\":{\"1620\":1}}],[\"数据库事务管理中的回滚操作\",{\"1\":{\"1620\":1}}],[\"数据库空间等服务器资源\",{\"1\":{\"1417\":1}}],[\"数据库\",{\"0\":{\"6\":1,\"7\":1,\"6339\":1}}],[\"取代这样的写法\",{\"1\":{\"6852\":1}}],[\"取代你亲手去写构建器的方式\",{\"1\":{\"6812\":1}}],[\"取全限定的类名\",{\"1\":{\"5865\":1}}],[\"取消永久代\",{\"1\":{\"5328\":1}}],[\"取得资源文件的url\",{\"1\":{\"6219\":1}}],[\"取得指定带int和string参数构造函数\",{\"1\":{\"5914\":1}}],[\"取得信息\",{\"1\":{\"5017\":2}}],[\"取得字符串的长度\",{\"1\":{\"5015\":1}}],[\"取值为string\",{\"1\":{\"4524\":1}}],[\"取决于\",{\"1\":{\"3954\":1}}],[\"取决于具体实现类\",{\"1\":{\"3167\":1,\"3171\":1}}],[\"取反逻辑不利于快速理解\",{\"1\":{\"3203\":1}}],[\"取反混合运算\",{\"1\":{\"3196\":1}}],[\"取对应的形容词为接口名\",{\"1\":{\"3004\":1}}],[\"取款或者转账等\",{\"1\":{\"2636\":1}}],[\"取号\",{\"1\":{\"2636\":1}}],[\"取出的数据元素也可能为null\",{\"1\":{\"3276\":1}}],[\"取出一个学院\",{\"1\":{\"1539\":1}}],[\"取出所有学院\",{\"1\":{\"1539\":1}}],[\"取出右表达式\",{\"1\":{\"1489\":1}}],[\"取出\",{\"1\":{\"1489\":1}}],[\"取他人之长\",{\"1\":{\"142\":1}}],[\"减轻维护的负担\",{\"1\":{\"5755\":1}}],[\"减法解释器\",{\"1\":{\"1487\":1}}],[\"减少产生\",{\"1\":{\"6814\":1}}],[\"减少冗余的代码生成器\",{\"1\":{\"6377\":1}}],[\"减少冗余配置属性\",{\"1\":{\"6319\":1}}],[\"减少耦合\",{\"1\":{\"5754\":1}}],[\"减少交互的平均延迟\",{\"1\":{\"3234\":1}}],[\"减少前端很多琐碎的null判断\",{\"1\":{\"3225\":1}}],[\"减少乐观锁的重试次数\",{\"1\":{\"3180\":1}}],[\"减少开发成本\",{\"1\":{\"2816\":1}}],[\"减少对象间的相互依赖\",{\"1\":{\"2423\":1}}],[\"减少\",{\"1\":{\"2342\":1}}],[\"减少代码臃肿\",{\"1\":{\"2248\":1}}],[\"减少了内存的开销\",{\"1\":{\"2263\":1}}],[\"减少了对外交互\",{\"1\":{\"2045\":1}}],[\"减少了客户处理的对象数目\",{\"1\":{\"1100\":1}}],[\"减少服务器资源\",{\"1\":{\"1417\":1}}],[\"减少重复浪费\",{\"1\":{\"1002\":1}}],[\"键值对\",{\"1\":{\"1487\":1}}],[\"键盘\",{\"1\":{\"661\":1}}],[\"环境角色使用这个接口调用不同的算法\",{\"1\":{\"2506\":1}}],[\"环境上下文\",{\"1\":{\"2471\":1}}],[\"环境上下文类\",{\"1\":{\"2470\":1}}],[\"环境类\",{\"1\":{\"1476\":1,\"2432\":1,\"2438\":1,\"2512\":1}}],[\"环境\",{\"1\":{\"1471\":1,\"2508\":1}}],[\"环绕立体声\",{\"1\":{\"1116\":1,\"1133\":1,\"1134\":1}}],[\"汉语中的句子有很多\",{\"1\":{\"1456\":1}}],[\"句子\",{\"1\":{\"1456\":1}}],[\"表不存在\",{\"1\":{\"3903\":1}}],[\"表或字段之间的辩证关系\",{\"1\":{\"3450\":1}}],[\"表结构设计能否满足技术方案\",{\"1\":{\"3450\":1}}],[\"表的作用\",{\"1\":{\"3361\":1}}],[\"表的命名最好是遵循\",{\"1\":{\"3361\":1}}],[\"表必备三字段\",{\"1\":{\"3359\":1}}],[\"表名应该仅仅表示表里面的实体内容\",{\"1\":{\"3353\":1}}],[\"表名不使用复数名词\",{\"1\":{\"3353\":1}}],[\"表名\",{\"1\":{\"3352\":2}}],[\"表单\",{\"1\":{\"3343\":1}}],[\"表明该请求被成功地完成\",{\"1\":{\"3226\":1}}],[\"表达规则和表达工具的熟练性\",{\"1\":{\"3472\":1}}],[\"表达只是自然而然的事情\",{\"1\":{\"3472\":1}}],[\"表达逻辑删除的字段名is\",{\"1\":{\"3351\":1}}],[\"表达是与否概念的字段\",{\"1\":{\"3351\":1}}],[\"表达是与否的变量采用is\",{\"1\":{\"2994\":1}}],[\"表达到位\",{\"1\":{\"3219\":1}}],[\"表达异常的分支时\",{\"1\":{\"3192\":1}}],[\"表达式的匹配器\",{\"1\":{\"6632\":1}}],[\"表达式中的箭头\",{\"1\":{\"4079\":1}}],[\"表达式中的花括号\",{\"1\":{\"4007\":1}}],[\"表达式实现\",{\"1\":{\"2546\":1}}],[\"表达式拆分成字符数组\",{\"1\":{\"1489\":1}}],[\"表达式相减后的结果\",{\"1\":{\"1487\":1}}],[\"表达式\",{\"1\":{\"1455\":2,\"1487\":1,\"3188\":6,\"5672\":1}}],[\"表胜于言\",{\"1\":{\"2983\":1}}],[\"表示要被加载的服务的类或接口\",{\"1\":{\"6258\":1}}],[\"表示要操作的数据是\",{\"1\":{\"5052\":1}}],[\"表示的字段的值\",{\"1\":{\"5974\":1}}],[\"表示class对象所引用的类所继承的直接基类\",{\"1\":{\"5875\":1}}],[\"表示class对象所引用的类所实现的所有接口\",{\"1\":{\"5873\":1}}],[\"表示不同类对象之间有关联\",{\"1\":{\"5796\":1}}],[\"表示整体由部分组成\",{\"1\":{\"5788\":1}}],[\"表示在继承体系中成员对于子类可见\",{\"1\":{\"5363\":1}}],[\"表示包级可见\",{\"1\":{\"5359\":1}}],[\"表示参数化的类型可能是指定的类型\",{\"1\":{\"5046\":1}}],[\"表示参数化的类型可能是所指定的类型\",{\"1\":{\"5046\":1}}],[\"表示运行应用程序中出现了严重的错误\",{\"1\":{\"4716\":1}}],[\"表示关闭编译器警告信息\",{\"1\":{\"4511\":1}}],[\"表示代码被弃用\",{\"1\":{\"4510\":1}}],[\"表示当前的方法定义将覆盖父类中的方法\",{\"1\":{\"4509\":1}}],[\"表示正在被测试的系统\",{\"1\":{\"4460\":1}}],[\"表示可以接受\",{\"1\":{\"4222\":1}}],[\"表示此定制包的顺序号\",{\"1\":{\"3431\":1}}],[\"表示相等时带上此条\",{\"1\":{\"3405\":1}}],[\"表示范围\",{\"1\":{\"3366\":1}}],[\"表示未删除\",{\"1\":{\"3351\":1}}],[\"表示删除\",{\"1\":{\"3351\":1}}],[\"表示否\",{\"1\":{\"3351\":1}}],[\"表示是\",{\"1\":{\"3351\":1}}],[\"表示是否要添加相应的调料\",{\"1\":{\"912\":1}}],[\"表示原理与取值范围等同于java中的double\",{\"1\":{\"3229\":1}}],[\"表示api具体的请求地址\",{\"1\":{\"3224\":1}}],[\"表示需要实现\",{\"1\":{\"3222\":1}}],[\"表示分钟则是小写的m\",{\"1\":{\"3079\":1}}],[\"表示月份是大写的m\",{\"1\":{\"3079\":1}}],[\"表示日期和时间的格式如下所示\",{\"1\":{\"3078\":1}}],[\"表示终止的右大括号后必须换行\",{\"1\":{\"3020\":1}}],[\"表示类型的名词放在词尾\",{\"1\":{\"3000\":1}}],[\"表示一年中的第几个季节\",{\"1\":{\"3017\":1}}],[\"表示一个类对象和另一个类对象有关联通常一个类中有另一个类对象作为属性\",{\"1\":{\"2920\":1}}],[\"表示一般与特殊的关系\",{\"1\":{\"2893\":1}}],[\"表示扩展\",{\"1\":{\"2915\":1}}],[\"表示至少\",{\"1\":{\"2866\":1}}],[\"表示有且仅有一个\",{\"1\":{\"2866\":1}}],[\"表示\",{\"1\":{\"2740\":1,\"2826\":1,\"2866\":3,\"3935\":1,\"3936\":1,\"3937\":1}}],[\"表示豆浆\",{\"1\":{\"2677\":1}}],[\"表示四种状态\",{\"1\":{\"2452\":1}}],[\"表示活动当前的状态\",{\"1\":{\"2452\":1}}],[\"表示接收者\",{\"1\":{\"2080\":1}}],[\"表示对象\",{\"1\":{\"1438\":1}}],[\"表示返回单例对象\",{\"1\":{\"1343\":1}}],[\"表示返回新创建的对象\",{\"1\":{\"1343\":1}}],[\"表示饮料\",{\"1\":{\"903\":1}}],[\"元组\",{\"1\":{\"6772\":1}}],[\"元注解和获取注解的反射接口后\",{\"1\":{\"4640\":1}}],[\"元注解是用于定义注解的注解\",{\"1\":{\"4502\":1}}],[\"元注解\",{\"0\":{\"4585\":1,\"4587\":1,\"4591\":1,\"4604\":1,\"4608\":1,\"4618\":1,\"4620\":1},\"1\":{\"4502\":1}}],[\"元\",{\"1\":{\"1438\":1}}],[\"享\",{\"1\":{\"1438\":1}}],[\"享元工厂角色\",{\"1\":{\"1406\":1}}],[\"享元工厂检査系统中是否存在符合要求的享元对象\",{\"1\":{\"1396\":1}}],[\"享元工厂\",{\"1\":{\"1396\":1}}],[\"享元模式是通过减少内存中对象的数量来节省内存空间的\",{\"1\":{\"1448\":1}}],[\"享元模式是池技术的重要实现方式\",{\"1\":{\"1377\":1}}],[\"享元模式同样要求创建一个或一组对象\",{\"1\":{\"1447\":1}}],[\"享元模式其实是\",{\"1\":{\"1447\":1}}],[\"享元模式经典的应用场景是需要缓冲池的场景\",{\"1\":{\"1444\":1}}],[\"享元模式经典的应用场景就是池技术了\",{\"1\":{\"1377\":1}}],[\"享元模式提高了系统的复杂度\",{\"1\":{\"1442\":1}}],[\"享元模式大大减少了对象的创建\",{\"1\":{\"1441\":1}}],[\"享元模式解决网站展现项目\",{\"0\":{\"1420\":1}}],[\"享元模式的应用场景\",{\"0\":{\"1445\":1}}],[\"享元模式的注意事项和细节\",{\"0\":{\"1437\":1}}],[\"享元模式的主要角色有如下\",{\"1\":{\"1392\":1}}],[\"享元模式的本质是缓存共享对象\",{\"1\":{\"1390\":1}}],[\"享元模式的定义提出了两个要求\",{\"1\":{\"1386\":1}}],[\"享元模式的结构与实现\",{\"0\":{\"1383\":1}}],[\"享元模式能够解决重复对象的内存浪费的问题\",{\"1\":{\"1376\":1}}],[\"享元模式基本介绍\",{\"0\":{\"1371\":1}}],[\"享元模式\",{\"1\":{\"1000\":1,\"1374\":1,\"1419\":1,\"2617\":1}}],[\"快看看到底是怎么回事\",{\"1\":{\"6997\":1}}],[\"快速和高效\",{\"1\":{\"6669\":1}}],[\"快速\",{\"1\":{\"6462\":1,\"6485\":1,\"6501\":1,\"6607\":1}}],[\"快速紧凑的特定类型集合\",{\"1\":{\"6432\":1}}],[\"快速溯源\",{\"1\":{\"3251\":1}}],[\"快捷键是空格\",{\"1\":{\"2840\":1}}],[\"快照模式\",{\"1\":{\"1617\":1}}],[\"快\",{\"1\":{\"1436\":1}}],[\"范围爆炸\",{\"1\":{\"4096\":1}}],[\"范围在\",{\"1\":{\"1436\":1}}],[\"范围类\",{\"1\":{\"1436\":1}}],[\"否则那将会很难保持根\",{\"1\":{\"6868\":1}}],[\"否则不会改变\",{\"1\":{\"6802\":1}}],[\"否则不能用动态代理\",{\"1\":{\"1850\":1}}],[\"否则调用\",{\"1\":{\"6109\":1}}],[\"否则测查当前已被其他线程更新的情况\",{\"1\":{\"6076\":1}}],[\"否则抛出\",{\"1\":{\"6075\":1}}],[\"否则抛nosuchfieldexception\",{\"1\":{\"5962\":1}}],[\"否则返回对应方法\",{\"1\":{\"6094\":1}}],[\"否则返回\",{\"1\":{\"5980\":1}}],[\"否则返回false\",{\"1\":{\"4626\":1}}],[\"否则编译不通过\",{\"1\":{\"5726\":1,\"5729\":1}}],[\"否则编译不会通过\",{\"1\":{\"4729\":1}}],[\"否则程序会提前退出\",{\"1\":{\"5712\":1}}],[\"否则为false\",{\"1\":{\"5685\":1}}],[\"否则使用预定义精度的\",{\"1\":{\"5593\":1}}],[\"否则使用悲观锁\",{\"1\":{\"3173\":1}}],[\"否则就会出现下面的问题\",{\"1\":{\"4971\":1}}],[\"否则只需要在方法签名中声明让调用者去处理\",{\"1\":{\"4923\":1}}],[\"否则失败将显示在junit窗口和中止测试\",{\"1\":{\"4366\":1}}],[\"否则失败显示在junit的窗口测试将中止\",{\"1\":{\"4362\":1}}],[\"否则因线上采用https协议而导致浏览器提示\",{\"1\":{\"3448\":1}}],[\"否则公共二方库的行为不应该发生变化\",{\"1\":{\"3439\":1}}],[\"否则容易产生歧义\",{\"1\":{\"3296\":1}}],[\"否则容易被打的很惨\",{\"1\":{\"445\":1}}],[\"否则可能出现死锁\",{\"1\":{\"3166\":1}}],[\"否则可能会造成死锁\",{\"1\":{\"3166\":1}}],[\"否则会使用平台默认编码\",{\"1\":{\"5595\":1}}],[\"否则会导致编译错误\",{\"1\":{\"4749\":1}}],[\"否则会因线上采用https协议而导致浏览器提示\",{\"1\":{\"3233\":1}}],[\"否则会抛出unsupportedoperationexception异常\",{\"1\":{\"3101\":1}}],[\"否则会抛出classcastexception异常\",{\"1\":{\"3100\":1}}],[\"否则会有抛indexoutofboundsexception的风险\",{\"1\":{\"3064\":1}}],[\"否则当出现相同key时会抛出\",{\"1\":{\"3092\":1}}],[\"否则部分框架解析会引起序列化错误\",{\"1\":{\"2994\":1}}],[\"否则无法切换到新增状态\",{\"1\":{\"2428\":1}}],[\"否则代码会抛出异常\",{\"1\":{\"2369\":1}}],[\"否则类应该被拆分\",{\"1\":{\"2001\":1}}],[\"否则将抛异常\",{\"1\":{\"5914\":1}}],[\"否则将该请求转给它的后继者\",{\"1\":{\"1945\":1}}],[\"否则将使两者之间紧密耦合起来\",{\"1\":{\"1677\":1}}],[\"否则报错\",{\"1\":{\"1906\":1}}],[\"否则\",{\"1\":{\"1436\":1,\"3541\":1,\"4925\":1,\"6044\":1}}],[\"先定义好接口\",{\"1\":{\"6148\":1}}],[\"先尝试从缓存中获取\",{\"1\":{\"6078\":1}}],[\"先使用cas更新\",{\"1\":{\"6076\":1}}],[\"先获取\",{\"1\":{\"6089\":1}}],[\"先获取所有的constructors\",{\"1\":{\"6073\":1}}],[\"先获取锁\",{\"1\":{\"6063\":1}}],[\"先通过反射\",{\"1\":{\"6059\":1}}],[\"先来分析setvalue方法\",{\"1\":{\"5159\":1}}],[\"先来看下它的定义\",{\"1\":{\"4522\":1}}],[\"先来创建几个测试类\",{\"1\":{\"4410\":1}}],[\"先看个例子\",{\"1\":{\"6053\":1}}],[\"先看下如下的代码\",{\"1\":{\"5034\":1}}],[\"先看下下面的代码\",{\"1\":{\"4506\":1,\"5000\":1}}],[\"先看一下怎样获取类声明的所有方法\",{\"1\":{\"6095\":1}}],[\"先看一个简单的\",{\"1\":{\"4937\":1}}],[\"先看一张图\",{\"1\":{\"2035\":1}}],[\"先写少量功能代码\",{\"1\":{\"4447\":1}}],[\"先到中央仓库去查证一下\",{\"1\":{\"3426\":1}}],[\"先到缓存代理取\",{\"1\":{\"1912\":1}}],[\"先查后插\",{\"1\":{\"3378\":1}}],[\"先快速定位需要获取的id段\",{\"1\":{\"3374\":1}}],[\"先直接手动增加一行作为删除目标\",{\"1\":{\"3315\":1}}],[\"先把实现类写好\",{\"1\":{\"2712\":1}}],[\"先\",{\"1\":{\"2370\":1}}],[\"先输入表达式的形式\",{\"1\":{\"1478\":1}}],[\"先判断值是否在\",{\"1\":{\"1436\":1}}],[\"先检查出自己身上的缺点\",{\"1\":{\"154\":1}}],[\"博客\",{\"1\":{\"1431\":3}}],[\"充分利用现代多核\",{\"1\":{\"5672\":1}}],[\"充当具体实现迭代器\",{\"1\":{\"1548\":1}}],[\"充当池的作用\",{\"1\":{\"1429\":1}}],[\"充电\",{\"1\":{\"522\":1,\"542\":1}}],[\"充电器\",{\"1\":{\"520\":1,\"540\":1}}],[\"充电器需要\",{\"1\":{\"520\":1,\"540\":1}}],[\"充电器本身相当于\",{\"1\":{\"516\":1,\"535\":1}}],[\"维护相对困难\",{\"1\":{\"6290\":1}}],[\"维护成本指数级上升\",{\"1\":{\"3467\":1}}],[\"维护了一个集合\",{\"1\":{\"2964\":1}}],[\"维护性上下功夫\",{\"1\":{\"2719\":1}}],[\"维护性\",{\"1\":{\"2576\":1}}],[\"维护难度也大\",{\"1\":{\"2416\":1}}],[\"维护一个目标对象\",{\"1\":{\"1871\":1,\"1903\":1}}],[\"维护和扩展都更加容易\",{\"1\":{\"1418\":1}}],[\"维护方便\",{\"1\":{\"898\":1}}],[\"小巧的应用服务器\",{\"1\":{\"6614\":1}}],[\"小型\",{\"1\":{\"6670\":1}}],[\"小型sql数据库\",{\"1\":{\"6344\":1}}],[\"小型的外包项目\",{\"1\":{\"1408\":1}}],[\"小议\",{\"1\":{\"6253\":1}}],[\"小\",{\"1\":{\"4448\":1}}],[\"小骆峰\",{\"1\":{\"4173\":1,\"4175\":1,\"4182\":1,\"4185\":1,\"4188\":1}}],[\"小数类型为decimal\",{\"1\":{\"3356\":1}}],[\"小时制的则是小写的h\",{\"1\":{\"3079\":1}}],[\"小时制的是大写的h\",{\"1\":{\"3079\":1}}],[\"小写容易跟数字混淆\",{\"1\":{\"3012\":1}}],[\"小小\",{\"1\":{\"2803\":1}}],[\"小牛\",{\"1\":{\"1797\":1}}],[\"小偷与警察等\",{\"1\":{\"1667\":1}}],[\"小结\",{\"0\":{\"2856\":1},\"1\":{\"1436\":1,\"5045\":1}}],[\"小米系列工厂\",{\"1\":{\"1310\":1}}],[\"小米工厂\",{\"1\":{\"1307\":1,\"1308\":1}}],[\"小米路由器\",{\"1\":{\"1298\":1,\"1306\":1}}],[\"小米手机发送消息\",{\"1\":{\"1304\":1}}],[\"小米手机\",{\"1\":{\"1304\":1}}],[\"小米手机和小米路由器称为\",{\"1\":{\"1300\":1}}],[\"小米手机和华为手机称为\",{\"1\":{\"1300\":1}}],[\"小米手机打电话\",{\"1\":{\"622\":1,\"1304\":1}}],[\"小米手机关机\",{\"1\":{\"622\":1}}],[\"小米手机开机\",{\"1\":{\"622\":1}}],[\"第七章\",{\"1\":{\"4239\":1}}],[\"第四阶段\",{\"1\":{\"2769\":1}}],[\"第四步\",{\"1\":{\"2677\":1}}],[\"第三\",{\"1\":{\"6201\":1}}],[\"第三方功能降级\",{\"1\":{\"3918\":1}}],[\"第三方系统限流\",{\"1\":{\"3916\":1}}],[\"第三方系统执行超时\",{\"1\":{\"3887\":1}}],[\"第三方容灾系统被\",{\"1\":{\"3913\":1}}],[\"第三方服务\",{\"1\":{\"3416\":1}}],[\"第三阶段\",{\"1\":{\"2768\":1}}],[\"第三步\",{\"1\":{\"2677\":1}}],[\"第三种解决思路是\",{\"1\":{\"2375\":1}}],[\"第一点\",{\"1\":{\"5687\":1}}],[\"第一个spi和api的区别\",{\"1\":{\"6241\":1}}],[\"第一个参数代表调用的对象\",{\"1\":{\"6020\":1}}],[\"第一个参数是一个可选字符串消息\",{\"1\":{\"4344\":1}}],[\"第一个\",{\"1\":{\"4902\":1}}],[\"第一行\",{\"1\":{\"4056\":1}}],[\"第一\",{\"1\":{\"3218\":1}}],[\"第一种方法\",{\"1\":{\"5914\":1}}],[\"第一种\",{\"1\":{\"5128\":1}}],[\"第一种情况\",{\"1\":{\"3085\":1,\"3110\":1}}],[\"第一种解决思路是\",{\"1\":{\"2369\":1}}],[\"第一次分派\",{\"1\":{\"2962\":1}}],[\"第一阶段\",{\"1\":{\"2766\":1}}],[\"第一步\",{\"1\":{\"2677\":1,\"6089\":1}}],[\"第一步点击扣除积分\",{\"1\":{\"2456\":1}}],[\"第\",{\"1\":{\"2456\":1,\"2563\":1,\"2564\":1,\"2565\":1,\"2566\":1,\"2567\":1,\"2983\":1,\"3081\":3,\"3263\":2}}],[\"第二步\",{\"1\":{\"6100\":1}}],[\"第二步抽奖\",{\"1\":{\"2456\":1}}],[\"第二个什么时候用api\",{\"1\":{\"6241\":1}}],[\"第二个参数传递的调用方法的参数\",{\"1\":{\"6020\":1}}],[\"第二个处理所有非\",{\"1\":{\"4902\":1}}],[\"第二点\",{\"1\":{\"5688\":1}}],[\"第二\",{\"1\":{\"3218\":1,\"6201\":1}}],[\"第二种则没有效果\",{\"1\":{\"5130\":1}}],[\"第二种\",{\"1\":{\"5128\":1}}],[\"第二种情况\",{\"1\":{\"3085\":1,\"3110\":1}}],[\"第二种解决思路是\",{\"1\":{\"2371\":1}}],[\"第二行相对第一行缩进\",{\"1\":{\"3030\":1}}],[\"第二阶段\",{\"1\":{\"2767\":1}}],[\"第二次的参数\",{\"1\":{\"2373\":1}}],[\"第二天就会精神饱满\",{\"1\":{\"138\":1}}],[\"第2次调用b\",{\"1\":{\"1406\":1}}],[\"第2次调用a\",{\"1\":{\"1406\":1}}],[\"第1次调用b\",{\"1\":{\"1406\":1}}],[\"第1次调用a\",{\"1\":{\"1406\":1}}],[\"第3次调用a\",{\"1\":{\"1406\":1}}],[\"初始化顺序为\",{\"1\":{\"5507\":1}}],[\"初始化顺序\",{\"1\":{\"5502\":1}}],[\"初始化是通过override父类方法来进行\",{\"1\":{\"4681\":1}}],[\"初始化时传入活动引用\",{\"1\":{\"2454\":3}}],[\"初始化奖品的数量\",{\"1\":{\"2452\":1}}],[\"初始化当前的状态为\",{\"1\":{\"2452\":1}}],[\"初始化类的实例\",{\"1\":{\"2295\":1}}],[\"初始化一个对象特别复杂\",{\"1\":{\"737\":1}}],[\"初始状态\",{\"1\":{\"1636\":1}}],[\"初始\",{\"1\":{\"1406\":2}}],[\"个主要的特性\",{\"1\":{\"5672\":1}}],[\"个数\",{\"1\":{\"5412\":1}}],[\"个步骤来创建参数化测试\",{\"1\":{\"4386\":1}}],[\"个缩进级别\",{\"1\":{\"4122\":1}}],[\"个人开发的高性能并发库官网\",{\"1\":{\"6439\":1}}],[\"个人英语水平有限\",{\"1\":{\"3929\":1}}],[\"个人敏感信息操作等相关记录\",{\"1\":{\"3285\":1}}],[\"个参数的查询封装\",{\"1\":{\"3423\":1,\"3539\":1}}],[\"个之内\",{\"1\":{\"3390\":1}}],[\"个元素扩容的次数\",{\"1\":{\"3528\":1}}],[\"个元素\",{\"1\":{\"3123\":1}}],[\"个在构造方法super\",{\"1\":{\"3081\":1}}],[\"个不记录日期\",{\"1\":{\"3081\":1}}],[\"个不记录时间\",{\"1\":{\"3081\":1}}],[\"个字符\",{\"1\":{\"3033\":1,\"4028\":1}}],[\"个字符的情况下\",{\"1\":{\"3031\":1,\"3033\":1}}],[\"个tab为\",{\"1\":{\"3024\":1}}],[\"个空格的缩进\",{\"1\":{\"4024\":1}}],[\"个空格时\",{\"1\":{\"3024\":1}}],[\"个空格\",{\"0\":{\"4023\":1,\"4055\":1},\"1\":{\"3024\":1,\"3025\":1,\"3030\":1,\"3031\":1,\"4056\":1,\"4057\":1,\"4121\":1}}],[\"个空格缩进\",{\"1\":{\"3024\":1}}],[\"个空位可以放棋子\",{\"1\":{\"1389\":1}}],[\"个都可以\",{\"1\":{\"2866\":1}}],[\"个或者一个\",{\"1\":{\"2866\":1}}],[\"个或者多个\",{\"1\":{\"2866\":1}}],[\"个矩形拼接表示\",{\"1\":{\"2841\":1}}],[\"个\",{\"0\":{\"5671\":1},\"1\":{\"2803\":1,\"2866\":1,\"3030\":1,\"3451\":1,\"3452\":1,\"3453\":1,\"3454\":1}}],[\"个奖品\",{\"1\":{\"2456\":1}}],[\"个对象之间存在协作关系\",{\"1\":{\"3455\":1}}],[\"个对象\",{\"1\":{\"2408\":1}}],[\"个员工到\",{\"1\":{\"2188\":2,\"2194\":2}}],[\"个优点\",{\"1\":{\"2043\":1}}],[\"个接口\",{\"1\":{\"2038\":1}}],[\"个性和共性\",{\"1\":{\"3036\":1}}],[\"个性\",{\"1\":{\"662\":1}}],[\"密码强度不够\",{\"1\":{\"3582\":1}}],[\"密码长度不够\",{\"1\":{\"3580\":1}}],[\"密码校验失败\",{\"1\":{\"3578\":1}}],[\"密码\",{\"1\":{\"1388\":1}}],[\"密码加密的文章\",{\"0\":{\"28\":1}}],[\"落子颜色是定的\",{\"1\":{\"1385\":1}}],[\"跳棋颜色多一点\",{\"1\":{\"1385\":1}}],[\"跳棋\",{\"1\":{\"1385\":1}}],[\"读取一行\",{\"1\":{\"6258\":1}}],[\"读取\",{\"1\":{\"5605\":1}}],[\"读取文件等\",{\"1\":{\"4298\":1}}],[\"读取状态\",{\"1\":{\"2438\":1}}],[\"读取享元模式的外部状态会使得运行时间稍微变长\",{\"1\":{\"1382\":1}}],[\"读书\",{\"1\":{\"138\":1}}],[\"避免过多的工具类\",{\"1\":{\"6756\":1}}],[\"避免空值\",{\"1\":{\"6754\":1}}],[\"避免空指针\",{\"1\":{\"3276\":1}}],[\"避免每次重新从jvm获取带来的开销\",{\"1\":{\"6127\":1}}],[\"避免与数字\",{\"1\":{\"4159\":1}}],[\"避免为了设计而设计\",{\"1\":{\"3470\":1}}],[\"避免如下误解\",{\"1\":{\"3469\":1}}],[\"避免版本号不一致\",{\"1\":{\"3432\":1}}],[\"避免随意发布此类定制包\",{\"1\":{\"3431\":1}}],[\"避免执行后面的分页语句\",{\"1\":{\"3384\":1}}],[\"避免回表\",{\"1\":{\"3373\":1}}],[\"避免查询时需要调用ic服务获取\",{\"1\":{\"3364\":1}}],[\"避免影响其它字段索引率\",{\"1\":{\"3358\":1}}],[\"避免节外生枝\",{\"1\":{\"3352\":1}}],[\"避免被滥刷而导致资损\",{\"1\":{\"3345\":1}}],[\"避免频繁报警\",{\"1\":{\"3295\":1}}],[\"避免用户投诉时\",{\"1\":{\"3295\":1}}],[\"避免用apachebeanutils进行属性的copy\",{\"1\":{\"3240\":1}}],[\"避免把服务器磁盘撑爆\",{\"1\":{\"3294\":1}}],[\"避免重复创建string\",{\"1\":{\"6101\":1}}],[\"避免重复打印日志\",{\"1\":{\"3290\":1}}],[\"避免重新创建\",{\"1\":{\"1375\":1}}],[\"避免直接抛出new\",{\"1\":{\"3277\":1}}],[\"避免程序过度臃肿\",{\"1\":{\"3247\":1}}],[\"避免数据结构无限增长吃光内存\",{\"1\":{\"3246\":1}}],[\"避免出现误删除的情况\",{\"1\":{\"3387\":1}}],[\"避免出现filesort的情况\",{\"1\":{\"3372\":1}}],[\"避免出现注释的另一个极端\",{\"1\":{\"3219\":1}}],[\"避免出现超长链无意识地破坏系统性能\",{\"1\":{\"1981\":1}}],[\"避免采用取反逻辑运算符\",{\"1\":{\"3203\":1}}],[\"避免后续代码维护困难\",{\"1\":{\"3194\":1}}],[\"避免使用\",{\"1\":{\"3190\":1,\"4239\":1}}],[\"避免使用list的contains\",{\"1\":{\"3153\":1}}],[\"避免random实例被多线程使用\",{\"1\":{\"3177\":1}}],[\"避免主线程无法执行至await方法\",{\"1\":{\"3176\":1}}],[\"避免更新丢失\",{\"1\":{\"3173\":1}}],[\"避免加锁成功后\",{\"1\":{\"3167\":1}}],[\"避免集合的无序性\",{\"1\":{\"3152\":1}}],[\"避免抛出classcastexception异常\",{\"1\":{\"3112\":1}}],[\"避免公历闰年\",{\"1\":{\"3086\":1}}],[\"避免在gc后调整堆大小带来的压力\",{\"1\":{\"3446\":1}}],[\"避免在锁代码块中调用rpc方法\",{\"1\":{\"3165\":1}}],[\"避免在公历闰年时出现日期转换错误或程序逻辑错误\",{\"1\":{\"3082\":1}}],[\"避免在子父类的成员变量之间\",{\"1\":{\"2996\":1}}],[\"避免上下文重复使用一个变量\",{\"1\":{\"3074\":1}}],[\"避免反序列化混乱\",{\"1\":{\"3060\":1}}],[\"避免反序列失败\",{\"1\":{\"3060\":1}}],[\"避免对接口调用方产生影响\",{\"1\":{\"3043\":1}}],[\"避免通过一个类的对象引用访问此类的静态变量或静态方法\",{\"1\":{\"3040\":1}}],[\"避免望文不知义\",{\"1\":{\"2998\":1}}],[\"避免歧义\",{\"1\":{\"2987\":1}}],[\"避免了使用多重转移语句\",{\"1\":{\"2550\":1}}],[\"避免了线程不安全\",{\"1\":{\"2325\":1}}],[\"避免了线程同步问题\",{\"1\":{\"2288\":1}}],[\"避免其他进程再将其获取\",{\"1\":{\"2404\":1}}],[\"避免大量同一对象的多次创建\",{\"1\":{\"1446\":1}}],[\"避免团队协作不当引入\",{\"1\":{\"395\":1}}],[\"蝇量模式\",{\"1\":{\"1374\":1}}],[\"教室里的桌子和凳子等\",{\"1\":{\"1373\":1}}],[\"围棋理论上有\",{\"1\":{\"1389\":1}}],[\"围棋和五子棋只有黑白两色\",{\"1\":{\"1385\":1}}],[\"围棋和五子棋中的黑白棋子\",{\"1\":{\"1373\":1}}],[\"围绕一个超级工厂创建其他工厂\",{\"1\":{\"1167\":1}}],[\"帮实现依赖翻转范式的开发库\",{\"1\":{\"6362\":1}}],[\"帮助解决约束满足问题的开发库\",{\"1\":{\"6321\":1}}],[\"帮助程序员正确地进行选择以防止系统的崩溃\",{\"1\":{\"5747\":1}}],[\"帮助你更深入地理解代码\",{\"1\":{\"4439\":1}}],[\"帮助我们快速地定位出问题\",{\"1\":{\"3228\":1}}],[\"帮助我们保证了线程的安全性\",{\"1\":{\"2324\":1}}],[\"帮助人们简化对软件系统的理解\",{\"1\":{\"2831\":1}}],[\"帮助同事治疗好多年的低血压\",{\"1\":{\"397\":1}}],[\"帮忙\",{\"1\":{\"1569\":1}}],[\"帮我们自动完成了\",{\"1\":{\"1364\":1}}],[\"格式化代码对大多数程序员来说并没有它应有的那么重要\",{\"1\":{\"6844\":1}}],[\"格式化\",{\"0\":{\"4002\":1,\"4241\":1}}],[\"格式地支持\",{\"1\":{\"2802\":1}}],[\"格式\",{\"1\":{\"1357\":1,\"3208\":1,\"6757\":1}}],[\"格式的配置文件\",{\"1\":{\"1357\":1}}],[\"串联执行流程\",{\"1\":{\"1357\":1}}],[\"两次提到了原始类型\",{\"1\":{\"5096\":1}}],[\"两次失败就郁郁寡欢\",{\"1\":{\"146\":1}}],[\"两者都是由应用程序控制之外的情况引起的\",{\"1\":{\"4906\":1}}],[\"两者在接口调用赋值的场景中容易出错\",{\"1\":{\"3111\":1}}],[\"两者具有相同的生命周期\",{\"1\":{\"2924\":1}}],[\"两者有独立的生命周期\",{\"1\":{\"2923\":1}}],[\"两者高度耦合\",{\"1\":{\"2731\":1}}],[\"两者的区别等到我们讲到享元模式的时候再来分析\",{\"1\":{\"2412\":1}}],[\"两者之间是抽象耦合关系\",{\"1\":{\"1671\":1}}],[\"两个accessor详情\",{\"1\":{\"6110\":1}}],[\"两个使用\",{\"1\":{\"5648\":1}}],[\"两个相同的对象会有不同的\",{\"0\":{\"5637\":1}}],[\"两个不相等的对象可能会有相同的\",{\"1\":{\"5636\":1}}],[\"两个注解\",{\"1\":{\"4487\":1}}],[\"两个连续字段\",{\"1\":{\"4063\":1}}],[\"两个浮点数的差值在此范围之内\",{\"1\":{\"3050\":1}}],[\"两个程序员在两个类中分别定义了表示\",{\"1\":{\"3016\":1}}],[\"两个行为搭配起来会产生四种情况\",{\"1\":{\"2730\":1}}],[\"两个字\",{\"1\":{\"2694\":1}}],[\"两个院系的迭代器类\",{\"1\":{\"1536\":1}}],[\"两个类\",{\"1\":{\"1357\":1}}],[\"两个类具体实现如下所示\",{\"1\":{\"1355\":1}}],[\"示例中代码的风格不应被作为执行的准则\",{\"1\":{\"3940\":1}}],[\"示例等\",{\"1\":{\"3520\":1}}],[\"示例\",{\"1\":{\"3520\":1}}],[\"示例代码如下所示\",{\"1\":{\"1352\":1}}],[\"示意图\",{\"1\":{\"1128\":1}}],[\"核心数据管理平台\",{\"1\":{\"3434\":1}}],[\"核心模块的语句覆盖率和分支覆盖率都要达到100\",{\"1\":{\"3309\":1}}],[\"核心模块的增量代码确保单元测试通过\",{\"1\":{\"3307\":1}}],[\"核心应用\",{\"1\":{\"3307\":1}}],[\"核心业务代码\",{\"1\":{\"4456\":1}}],[\"核心业务\",{\"1\":{\"3307\":1}}],[\"核心逻辑等\",{\"1\":{\"3215\":1}}],[\"核心逻辑只需要包括这样两个部分\",{\"1\":{\"1347\":1}}],[\"核心工厂类设计\",{\"0\":{\"1361\":1}}],[\"核心思路\",{\"1\":{\"549\":1}}],[\"语音提醒服务失败\",{\"1\":{\"3925\":1}}],[\"语音校验码输入错误\",{\"1\":{\"3590\":1}}],[\"语义不重复不遗漏\",{\"1\":{\"3426\":1}}],[\"语义清晰的代码不需要额外的注释\",{\"1\":{\"3221\":1}}],[\"语言保存数据的风格来写一个类\",{\"1\":{\"6800\":1}}],[\"语言中所有错误与异常的超类\",{\"1\":{\"4712\":1}}],[\"语言规范建议的顺序出现\",{\"1\":{\"4156\":1}}],[\"语言式的声明\",{\"0\":{\"4116\":1}}],[\"语言编程规范的\",{\"1\":{\"3931\":1}}],[\"语言是包括文字和图形的\",{\"1\":{\"2820\":1}}],[\"语言\",{\"1\":{\"2693\":1}}],[\"语言本身提供了\",{\"1\":{\"2396\":1}}],[\"语言来实现一个简单的\",{\"1\":{\"1347\":1}}],[\"语句处理异常\",{\"1\":{\"6926\":1}}],[\"语句捕获并进行处理\",{\"1\":{\"5534\":1}}],[\"语句明确包含了覆盖所有可能性的枚举值\",{\"1\":{\"4129\":1}}],[\"语句都包含了一个\",{\"1\":{\"4128\":1}}],[\"语句块以一个简短的\",{\"1\":{\"4253\":1}}],[\"语句块\",{\"1\":{\"4247\":1}}],[\"语句块中可以捕获多个异常类型\",{\"1\":{\"4768\":1}}],[\"语句块中的任何内容不做处理确实是合适的时候\",{\"1\":{\"4230\":1}}],[\"语句块中的内容缩进\",{\"1\":{\"4121\":1}}],[\"语句块中\",{\"1\":{\"4124\":1}}],[\"语句块的基本格式如这个例子所示\",{\"1\":{\"4243\":1}}],[\"语句块的花括号内是一个或多个\",{\"1\":{\"4119\":1}}],[\"语句块的缩进规则适用于所有代码和注释\",{\"1\":{\"4024\":1}}],[\"语句组\",{\"1\":{\"4119\":1,\"4128\":1,\"4129\":1}}],[\"语句的例子\",{\"1\":{\"4902\":1}}],[\"语句的箭头立即出现的情况下\",{\"1\":{\"4052\":1}}],[\"语句的主体仅是一个不带括号的表达式\",{\"1\":{\"4052\":1}}],[\"语句中的冒号\",{\"1\":{\"4078\":1}}],[\"语句中\",{\"1\":{\"4049\":1,\"4052\":1}}],[\"语句中不允许使用其它空行\",{\"1\":{\"3990\":1}}],[\"语句和\",{\"1\":{\"4032\":1}}],[\"语句内部\",{\"1\":{\"4014\":1}}],[\"语句以\",{\"1\":{\"3991\":1}}],[\"语句应按以下方式排序\",{\"1\":{\"3987\":1}}],[\"语句不允许换行\",{\"1\":{\"3980\":1}}],[\"语句覆盖率达到70\",{\"1\":{\"3309\":1}}],[\"语句删除了\",{\"1\":{\"2476\":1}}],[\"语句来做状态判断\",{\"1\":{\"2416\":1}}],[\"语句在执行的时候\",{\"1\":{\"2362\":1}}],[\"语句运行得非常慢\",{\"1\":{\"2362\":1}}],[\"语句\",{\"0\":{\"3979\":1,\"3981\":1,\"4118\":1,\"4858\":1},\"1\":{\"1936\":1,\"2389\":1,\"2416\":1,\"2476\":1,\"2495\":2,\"3973\":1,\"3974\":1,\"3980\":1,\"3985\":2,\"4006\":1,\"4032\":3,\"4065\":1,\"5670\":1}}],[\"语法中\",{\"1\":{\"2693\":1}}],[\"语法来创建对象\",{\"1\":{\"1347\":1}}],[\"语法\",{\"0\":{\"96\":1},\"1\":{\"47\":1,\"4867\":1,\"6850\":1}}],[\"语法进行了扩展\",{\"1\":{\"44\":1}}],[\"语法扩展\",{\"1\":{\"42\":1}}],[\"反映的是class\",{\"1\":{\"5890\":1}}],[\"反过来\",{\"1\":{\"3396\":1}}],[\"反复重建哈希表和数据迁移\",{\"1\":{\"3123\":1}}],[\"反复出现\",{\"1\":{\"2574\":1}}],[\"反编译出的字节码文件显示每次循环都会new出一个stringbuilder对象\",{\"1\":{\"3073\":1}}],[\"反例中的执行结果肯定会出乎大家的意料\",{\"1\":{\"3118\":1}}],[\"反例\",{\"1\":{\"2982\":1,\"2986\":1,\"2987\":1,\"2988\":1,\"2989\":1,\"2991\":1,\"2993\":1,\"2994\":1,\"2996\":1,\"2998\":1,\"2999\":1,\"3000\":1,\"3003\":1,\"3008\":1,\"3016\":1,\"3021\":1,\"3032\":1,\"3045\":1,\"3048\":1,\"3055\":1,\"3058\":1,\"3059\":1,\"3069\":1,\"3071\":1,\"3078\":1,\"3081\":1,\"3084\":1,\"3094\":1,\"3098\":1,\"3102\":1,\"3104\":1,\"3112\":1,\"3116\":1,\"3119\":1,\"3123\":1,\"3151\":1,\"3169\":1,\"3185\":1,\"3187\":1,\"3188\":1,\"3190\":1,\"3198\":1,\"3200\":1,\"3203\":1,\"3204\":1,\"3214\":1,\"3219\":1,\"3227\":1,\"3229\":1,\"3230\":1,\"3263\":1,\"3265\":1,\"3271\":1,\"3274\":1,\"3276\":1,\"3304\":1,\"3315\":1,\"3333\":1,\"3352\":1,\"3372\":1,\"3375\":1,\"3383\":1,\"3388\":1,\"3399\":1,\"3427\":1,\"3456\":1,\"3469\":1}}],[\"反之亦然\",{\"1\":{\"3110\":1}}],[\"反之\",{\"1\":{\"2743\":1}}],[\"反馈\",{\"1\":{\"2465\":1}}],[\"反序列化需要一个无参构造函数\",{\"1\":{\"5736\":1}}],[\"反序列化注入\",{\"1\":{\"3340\":1}}],[\"反序列化\",{\"1\":{\"1795\":1}}],[\"反应\",{\"1\":{\"1686\":1}}],[\"反射调用多次生成新代理accessor\",{\"1\":{\"6128\":1}}],[\"反射调用流程小结\",{\"0\":{\"6122\":1}}],[\"反射使用软引用relectiondata缓存class信息\",{\"1\":{\"6127\":1}}],[\"反射也是考虑了线程安全的\",{\"1\":{\"6126\":1}}],[\"反射类及反射方法的获取\",{\"1\":{\"6124\":1}}],[\"反射获取方法\",{\"0\":{\"6088\":1}}],[\"反射获取类信息\",{\"1\":{\"6060\":1}}],[\"反射获取类实例\",{\"0\":{\"6057\":1}}],[\"反射的字段可能是一个类\",{\"1\":{\"5944\":1}}],[\"反射的使用\",{\"0\":{\"5843\":1}}],[\"反射的相关知识\",{\"1\":{\"5817\":1}}],[\"反射就是把java类中的各种成分映射成一个个的java对象\",{\"1\":{\"5820\":1}}],[\"反射基础\",{\"0\":{\"5818\":1}}],[\"反射机制执行的流程\",{\"0\":{\"6051\":1}}],[\"反射机制详解\",{\"0\":{\"5816\":1},\"1\":{\"5531\":1}}],[\"反射机制调用目标对象的方法\",{\"1\":{\"1871\":1}}],[\"反射可以提供运行时的类信息\",{\"1\":{\"5517\":1}}],[\"反射包java\",{\"1\":{\"4623\":1}}],[\"反射\",{\"0\":{\"5514\":1},\"1\":{\"1341\":1,\"1347\":1,\"5819\":1}}],[\"反思自己的行为是否妥当\",{\"1\":{\"154\":1}}],[\"反思\",{\"1\":{\"153\":1}}],[\"框架其实是一个完整的\",{\"1\":{\"6942\":1}}],[\"框架来完成依赖注入\",{\"1\":{\"6821\":1}}],[\"框架在调用属性xxx的提取方法时\",{\"1\":{\"3063\":1}}],[\"框架在反向解析时\",{\"1\":{\"2994\":1}}],[\"框架通常比单个类的颗粒度要大\",{\"1\":{\"2792\":1}}],[\"框架位于最高层\",{\"1\":{\"2792\":1}}],[\"框架代码\",{\"1\":{\"2748\":1}}],[\"框架代码跟应用代码应该是高度解耦的\",{\"1\":{\"1333\":1}}],[\"框架\",{\"1\":{\"2578\":1,\"2798\":1,\"4675\":1,\"6642\":1,\"6761\":1,\"6776\":1,\"6858\":1,\"6942\":2,\"6949\":1}}],[\"框架应用中的\",{\"1\":{\"2261\":1}}],[\"框架非常类似\",{\"1\":{\"1352\":1}}],[\"框架这样的\",{\"1\":{\"1349\":1}}],[\"框架中\",{\"1\":{\"1343\":1}}],[\"框架的支持和对\",{\"1\":{\"6975\":1}}],[\"框架的演进\",{\"0\":{\"4674\":1}}],[\"框架的原型模式\",{\"0\":{\"1775\":1}}],[\"框架的外观模式剖析\",{\"0\":{\"1139\":1}}],[\"框架的\",{\"1\":{\"785\":1}}],[\"容量不足\",{\"1\":{\"3742\":1}}],[\"容器集成平台\",{\"1\":{\"6330\":1}}],[\"容器最核心的一个类了\",{\"1\":{\"1362\":1}}],[\"容器会主动调用\",{\"1\":{\"1345\":1}}],[\"容器在创建好对象之后\",{\"1\":{\"1345\":1}}],[\"容器中\",{\"1\":{\"1340\":1}}],[\"容器读取这个配置文件\",{\"1\":{\"1335\":1}}],[\"容器读取配置文件\",{\"1\":{\"1334\":1}}],[\"容器的详细讲解\",{\"1\":{\"2384\":1}}],[\"容器的最小原型\",{\"1\":{\"1349\":1}}],[\"容器的具体实现的时候\",{\"1\":{\"1341\":1}}],[\"容器的配置文件\",{\"1\":{\"1335\":1}}],[\"容器的核心功能一般有三个\",{\"1\":{\"1331\":1}}],[\"容器的核心功能有哪些\",{\"0\":{\"1330\":1},\"1\":{\"1325\":1}}],[\"容器来创建的类对象和创建类对象的必要信息\",{\"1\":{\"1334\":1}}],[\"容器要创建哪些对象\",{\"1\":{\"1333\":1}}],[\"容器事先并不知道应用会创建哪些对象\",{\"1\":{\"1333\":1}}],[\"容器应该包含哪些核心功能\",{\"1\":{\"1329\":1}}],[\"容器负责的事情要比单纯的工厂模式要多\",{\"1\":{\"1329\":1}}],[\"容器负责的是整个应用中所有类对象的创建\",{\"1\":{\"1328\":1}}],[\"容器相对于我们上面讲的工厂模式的例子来说\",{\"1\":{\"1328\":1}}],[\"容器相当于一个大的工厂类\",{\"1\":{\"1327\":1}}],[\"容器底层最基本的设计思路就是基于工厂模式的\",{\"1\":{\"1327\":1}}],[\"容器有何区别\",{\"0\":{\"1326\":1}}],[\"容器跟我们讲的工厂模式又有何区别和联系\",{\"1\":{\"1325\":1}}],[\"容器\",{\"0\":{\"1346\":1},\"1\":{\"1325\":2,\"1327\":1,\"1347\":1,\"1349\":1,\"2383\":2,\"2791\":1}}],[\"容易出现类型转型异常\",{\"1\":{\"5601\":1}}],[\"容易出错的\",{\"1\":{\"4453\":1}}],[\"容易忘记去更新这些测试方法\",{\"1\":{\"4296\":1}}],[\"容易遗漏\",{\"1\":{\"3467\":1}}],[\"容易导致持续集成机制的不可用\",{\"1\":{\"3305\":1}}],[\"容易造成文件大小\",{\"1\":{\"3291\":1}}],[\"容易误认为是sync\",{\"1\":{\"3201\":1}}],[\"容易忽略count值已经被改变\",{\"1\":{\"3201\":1}}],[\"容易产生等值判断被\",{\"1\":{\"3190\":1}}],[\"容易做到插拔替换\",{\"1\":{\"2780\":1}}],[\"容易\",{\"1\":{\"2754\":1}}],[\"容易修改\",{\"1\":{\"2681\":1}}],[\"容易增删状态\",{\"1\":{\"2477\":1}}],[\"容易混乱\",{\"1\":{\"1594\":1}}],[\"容易实现\",{\"1\":{\"1460\":1}}],[\"容易实现对请求的撤销和重做\",{\"1\":{\"794\":1}}],[\"容易添加节点或者叶子从而创建出复杂的\",{\"1\":{\"866\":1}}],[\"容易设计一个命令队列\",{\"1\":{\"794\":1}}],[\"另外需要注意\",{\"1\":{\"5184\":1}}],[\"另外使用事务的地方需要考虑各\",{\"1\":{\"3403\":1}}],[\"另外\",{\"1\":{\"3041\":1,\"3175\":1,\"3368\":1,\"3428\":1,\"5747\":1,\"6080\":1}}],[\"另外具体元素中可能还包含本身业务逻辑的相关操作\",{\"1\":{\"2948\":1}}],[\"另外实现\",{\"1\":{\"790\":1}}],[\"另一个ssh\",{\"1\":{\"6550\":1}}],[\"另一个值得一提的特性是改善异常处理\",{\"1\":{\"5670\":1}}],[\"另一个线程也通过了这个判断语句\",{\"1\":{\"2301\":1}}],[\"另一次是从hashmap中取出key所对应的value\",{\"1\":{\"3124\":1}}],[\"另一方面\",{\"1\":{\"2705\":1,\"2727\":1,\"2731\":1,\"6877\":1}}],[\"另一种是\",{\"1\":{\"5819\":1}}],[\"另一种是每次都返回同一个事先创建好的对象\",{\"1\":{\"1343\":1}}],[\"另一种是对象创建需要组装多个其他类对象或者需要复杂的初始化过程\",{\"1\":{\"1324\":1}}],[\"呢\",{\"1\":{\"1324\":1,\"1341\":1,\"2169\":1,\"2757\":1}}],[\"kryo\",{\"1\":{\"6607\":1}}],[\"kamon用来监测在jvm上运行的应用程序\",{\"1\":{\"6521\":1}}],[\"kamon\",{\"1\":{\"6521\":1}}],[\"kafka\",{\"1\":{\"6499\":1}}],[\"kaikeba等bu一级\",{\"1\":{\"3426\":1}}],[\"kaikeba\",{\"1\":{\"2987\":1}}],[\"kibana\",{\"1\":{\"6478\":1}}],[\"kind\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"king\",{\"1\":{\"1431\":1}}],[\"kotlin\",{\"1\":{\"6473\":1}}],[\"koloboke\",{\"1\":{\"6437\":1}}],[\"kyro\",{\"1\":{\"6462\":1}}],[\"k++\",{\"1\":{\"5271\":1}}],[\"kname\",{\"1\":{\"4163\":1}}],[\"knowledge\",{\"1\":{\"2727\":1}}],[\"knownproviders\",{\"1\":{\"6258\":4}}],[\"knowntonotexist\",{\"1\":{\"6063\":1}}],[\"known\",{\"1\":{\"1315\":1}}],[\"k\",{\"0\":{\"4008\":1},\"1\":{\"4019\":1,\"4024\":1,\"5017\":3,\"5267\":2,\"5271\":3,\"5382\":1}}],[\"kkb\",{\"1\":{\"3095\":1}}],[\"kunlun\",{\"1\":{\"2995\":1}}],[\"kept\",{\"1\":{\"5527\":1}}],[\"kernighan\",{\"1\":{\"4009\":1}}],[\"kele\",{\"1\":{\"2089\":5}}],[\"keycloak\",{\"1\":{\"6601\":1}}],[\"keyboard\",{\"1\":{\"5790\":2}}],[\"keyword\",{\"1\":{\"5403\":1,\"6149\":1,\"6151\":1,\"6153\":1}}],[\"keyset\",{\"1\":{\"3124\":1}}],[\"keyset其实是遍历了\",{\"1\":{\"3124\":1}}],[\"key=value1\",{\"1\":{\"6219\":1}}],[\"key=c\",{\"1\":{\"1487\":1}}],[\"key=b\",{\"1\":{\"1487\":1}}],[\"key=a\",{\"1\":{\"1487\":1}}],[\"key\",{\"1\":{\"1401\":1,\"1402\":1,\"1406\":11,\"1487\":6,\"2396\":1,\"2469\":5,\"3009\":2,\"3011\":2,\"3127\":1,\"3355\":2,\"3867\":1,\"5017\":5,\"5290\":1,\"6201\":2}}],[\"kpi考核\",{\"1\":{\"1083\":1}}],[\"zxing\",{\"1\":{\"6452\":1}}],[\"zookeeper\",{\"1\":{\"6384\":1}}],[\"zone\",{\"1\":{\"1315\":9}}],[\"zhuanlan\",{\"1\":{\"6272\":1}}],[\"zhaoguhong\",{\"1\":{\"6135\":1}}],[\"zhihu\",{\"1\":{\"4701\":1,\"6272\":1}}],[\"zeromq的纯java实现\",{\"1\":{\"6503\":1}}],[\"zero\",{\"1\":{\"4374\":1}}],[\"zero=integer\",{\"1\":{\"428\":1}}],[\"z比较结果相同\",{\"1\":{\"3119\":1}}],[\"z比较结果和y\",{\"1\":{\"3119\":1}}],[\"z\",{\"1\":{\"1436\":2,\"3119\":2,\"5267\":2,\"5382\":1,\"5402\":4,\"5424\":2,\"5440\":6,\"5448\":1,\"5656\":2,\"6118\":2}}],[\"秒后\",{\"1\":{\"3443\":1}}],[\"秒\",{\"1\":{\"1313\":1,\"3443\":1}}],[\"静态导包\",{\"1\":{\"5499\":1}}],[\"静态语句块在类初始化时运行一次\",{\"1\":{\"5493\":1}}],[\"静态语句块\",{\"1\":{\"5492\":1,\"5504\":1,\"5508\":1,\"5509\":1}}],[\"静态变量prefix就是\",{\"1\":{\"6260\":1}}],[\"静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序\",{\"1\":{\"5503\":1}}],[\"静态变量和静态语句块优先于实例变量和普通语句块\",{\"1\":{\"5503\":1}}],[\"静态变量在内存中只存在一份\",{\"1\":{\"5484\":1}}],[\"静态变量仍在堆中\",{\"1\":{\"5328\":1}}],[\"静态变量\",{\"1\":{\"5326\":1,\"5329\":1,\"5483\":1,\"5484\":1,\"5486\":1,\"5504\":1,\"5508\":1,\"5509\":1}}],[\"静态变量移除\",{\"1\":{\"5325\":1}}],[\"静态变量存放在永久代上\",{\"1\":{\"5322\":1}}],[\"静态\",{\"1\":{\"4299\":1,\"4302\":1,\"5944\":1}}],[\"静态样式检查详解\",{\"0\":{\"4269\":1}}],[\"静态成员\",{\"0\":{\"4234\":1}}],[\"静态或者其它形式\",{\"1\":{\"4182\":1}}],[\"静态初始化代码块\",{\"1\":{\"4062\":1}}],[\"静态类或静态方法加下划线\",{\"1\":{\"2846\":1}}],[\"静态结构图\",{\"1\":{\"2812\":1}}],[\"静态内部类不能访问外部类的非静态成员\",{\"1\":{\"5734\":1}}],[\"静态内部类不能访问外部类的非静态的变量和方法\",{\"1\":{\"5498\":1}}],[\"静态内部类不需要有指向外部类的引用\",{\"1\":{\"5734\":1}}],[\"静态内部类与顶级类有什么区别\",{\"0\":{\"5665\":1}}],[\"静态内部类以常规方式导入\",{\"1\":{\"3993\":1}}],[\"静态内部类特点实现延迟加载\",{\"1\":{\"2325\":1}}],[\"静态内部类方式在\",{\"1\":{\"2323\":1}}],[\"静态内部类完成\",{\"1\":{\"2320\":1}}],[\"静态内部类\",{\"0\":{\"2319\":1},\"1\":{\"2278\":1,\"5495\":1}}],[\"静态代码块\",{\"0\":{\"2292\":1},\"1\":{\"2273\":1,\"2293\":1}}],[\"静态代理和\",{\"1\":{\"1876\":1}}],[\"静态代理优缺点\",{\"0\":{\"1845\":1}}],[\"静态代理应用实例\",{\"0\":{\"1833\":1}}],[\"静态代理在使用时\",{\"1\":{\"1826\":1}}],[\"静态代理基本介绍\",{\"0\":{\"1825\":1}}],[\"静态代理\",{\"0\":{\"1824\":1},\"1\":{\"1813\":1,\"1842\":1}}],[\"静态常量\",{\"0\":{\"2280\":1},\"1\":{\"2272\":1,\"2281\":1,\"2286\":1,\"2334\":1}}],[\"静态方法在类加载的时候就存在了\",{\"1\":{\"5488\":1}}],[\"静态方法这种实现思路\",{\"1\":{\"2380\":1}}],[\"静态方法实现方式\",{\"1\":{\"2379\":1}}],[\"静态方法\",{\"1\":{\"1313\":1,\"2259\":1,\"5487\":1}}],[\"静态工厂模式\",{\"1\":{\"1212\":1,\"1214\":1}}],[\"静态工厂方法模式\",{\"1\":{\"1172\":1}}],[\"路径禁止携带表示请求内容类型的后缀\",{\"1\":{\"3224\":1}}],[\"路径\",{\"1\":{\"3224\":2}}],[\"路径导航\",{\"1\":{\"19\":1,\"125\":1}}],[\"路由器接口\",{\"1\":{\"1302\":1}}],[\"放心使用\",{\"1\":{\"6126\":1}}],[\"放在以\",{\"1\":{\"6964\":1}}],[\"放在try语句块之内\",{\"1\":{\"4736\":1}}],[\"放在一个方法里\",{\"1\":{\"4298\":1}}],[\"放在一个代码块里\",{\"1\":{\"1301\":1,\"1303\":1,\"1305\":1,\"1307\":1}}],[\"放置在一方库中\",{\"1\":{\"3016\":1}}],[\"放置在二方库中\",{\"1\":{\"3016\":1}}],[\"放右边\",{\"1\":{\"2546\":1}}],[\"放左边\",{\"1\":{\"2546\":1}}],[\"放入所有的同事对象\",{\"1\":{\"1601\":1}}],[\"放到log中\",{\"1\":{\"4693\":1}}],[\"放到豆浆机打碎\",{\"1\":{\"2666\":1}}],[\"放到一个抽象类\",{\"1\":{\"2227\":1}}],[\"放到一个类中统一管理和维护\",{\"1\":{\"1317\":1}}],[\"放到同一个类中\",{\"1\":{\"2170\":1}}],[\"放到配置文件中\",{\"1\":{\"1334\":1}}],[\"放着好好的0不用\",{\"1\":{\"427\":1}}],[\"放着简单的代码不用\",{\"1\":{\"419\":1}}],[\"除java外\",{\"1\":{\"6468\":1}}],[\"除下面详细说明的情况外\",{\"1\":{\"4010\":1}}],[\"除非你有很好的理由去修改他们\",{\"1\":{\"6832\":1}}],[\"除非你确定自己处于一种特殊的情况下能够处理错误\",{\"1\":{\"4907\":1}}],[\"除非是采用通配符的方式且要做显式类型转换才可以\",{\"1\":{\"5201\":1}}],[\"除非\",{\"1\":{\"4052\":1}}],[\"除非另有说明\",{\"1\":{\"3934\":1,\"4028\":1,\"4229\":1}}],[\"除非用户主动升级版本\",{\"1\":{\"3439\":1}}],[\"除常用方法\",{\"1\":{\"3196\":1}}],[\"除注释之外的方法签名\",{\"1\":{\"3036\":1}}],[\"除了在开发工程中使用这些工具\",{\"1\":{\"6992\":1}}],[\"除了在字面量\",{\"1\":{\"4069\":1}}],[\"除了clone和finalize其他均为公共方法\",{\"1\":{\"5679\":1}}],[\"除了简单的try\",{\"1\":{\"4960\":1}}],[\"除了runtimeexception及其子类以外\",{\"1\":{\"4729\":1}}],[\"除了\",{\"1\":{\"4260\":1}}],[\"除了第一个以外的每个段落\",{\"1\":{\"4249\":1}}],[\"除了第一个以外的每个单词\",{\"1\":{\"4202\":1}}],[\"除了以下两种特殊情况\",{\"1\":{\"4072\":1}}],[\"除了编程语言或者编程规范的要求之外\",{\"1\":{\"4069\":1}}],[\"除了换行符\",{\"1\":{\"3948\":1}}],[\"除了返回值\",{\"1\":{\"3209\":1}}],[\"除了上面讲到的这些设计思想和原则之外\",{\"1\":{\"2784\":1}}],[\"除了模板方法模式和解释器模式是类行为型模式\",{\"1\":{\"2632\":1}}],[\"除了适配器模式分为类结构型模式和对象结构型模式两种\",{\"1\":{\"2619\":1}}],[\"除了工厂方法模式属于类创建型模式\",{\"1\":{\"2610\":1}}],[\"除了使用单例\",{\"1\":{\"2378\":1}}],[\"除了创建它的发起人之外\",{\"1\":{\"1623\":1}}],[\"除了具有工厂方法模式的优点外\",{\"1\":{\"1282\":1}}],[\"除此之外还可以使用基于sql的语法跨集群查询\",{\"1\":{\"6342\":1}}],[\"除此之外\",{\"1\":{\"1161\":1,\"1255\":1,\"1329\":1,\"1344\":1,\"2177\":1,\"2356\":1,\"2366\":1,\"2412\":1,\"2712\":1,\"2719\":1,\"2744\":1,\"2755\":1,\"2758\":1,\"2765\":1,\"3990\":1,\"5690\":1}}],[\"海信电视工厂等\",{\"1\":{\"1272\":1}}],[\"剥离之后能让代码更加清晰\",{\"1\":{\"1253\":1}}],[\"之类的\",{\"1\":{\"4260\":1}}],[\"之类的单词本身并不是驼峰形式\",{\"1\":{\"4199\":1}}],[\"之类块标签的情况\",{\"1\":{\"4247\":1}}],[\"之后不需要注释\",{\"1\":{\"4126\":1}}],[\"之后的\",{\"1\":{\"4122\":1}}],[\"之后的每行代码至少比之前的那行多缩进\",{\"1\":{\"4056\":1}}],[\"之后\",{\"1\":{\"4083\":1}}],[\"之前被称作jboss\",{\"1\":{\"6616\":1}}],[\"之前是通过\",{\"1\":{\"4481\":1}}],[\"之前\",{\"1\":{\"4072\":1,\"4249\":1,\"5378\":1,\"5379\":1}}],[\"之前你的客户对当前版本的程序感到满意\",{\"1\":{\"2803\":1}}],[\"之外\",{\"1\":{\"4069\":1}}],[\"之中不包含任何字符或者换行符\",{\"1\":{\"4019\":1}}],[\"之所以我们能搭建出如此复杂的系统\",{\"1\":{\"2772\":1}}],[\"之所以\",{\"1\":{\"2749\":1}}],[\"之所以这么说\",{\"1\":{\"2695\":1}}],[\"之所以将某个代码块剥离出来\",{\"1\":{\"1253\":1}}],[\"之间不需要使用空格\",{\"1\":{\"4074\":1}}],[\"之间\",{\"1\":{\"3087\":1,\"4089\":1}}],[\"之间的空行是可选的\",{\"1\":{\"4063\":1}}],[\"之间的开发者互相协作\",{\"1\":{\"3262\":1}}],[\"之间的赋值\",{\"1\":{\"3046\":1}}],[\"之间的各种静态关系\",{\"1\":{\"2833\":1}}],[\"之间的关系\",{\"1\":{\"2173\":1}}],[\"之间的解耦是通过命令对象实现的\",{\"1\":{\"793\":1}}],[\"之间经常存在紧密的耦合关系\",{\"1\":{\"740\":1}}],[\"伦敦的奶酪\",{\"1\":{\"1246\":4}}],[\"伦敦的胡椒\",{\"1\":{\"1236\":1}}],[\"披萨类代码\",{\"1\":{\"1245\":1}}],[\"披萨项目新的需求\",{\"1\":{\"1236\":1}}],[\"披萨的制作有\",{\"1\":{\"1192\":1}}],[\"披萨的种类很多\",{\"1\":{\"1191\":1}}],[\"灵活增加新算法\",{\"1\":{\"2498\":1}}],[\"灵活性非常高\",{\"1\":{\"2970\":1}}],[\"灵活性好\",{\"1\":{\"2590\":1,\"2937\":1}}],[\"灵活性\",{\"1\":{\"2363\":1,\"2581\":1,\"2696\":1}}],[\"灵活性降低\",{\"1\":{\"2046\":1}}],[\"灵活性增强\",{\"1\":{\"1221\":1}}],[\"灵活扩展\",{\"1\":{\"998\":1}}],[\"全文本搜索引擎\",{\"1\":{\"6594\":1}}],[\"全面的跨平台高级框架\",{\"1\":{\"6421\":1}}],[\"全限定类名\",{\"1\":{\"5852\":1}}],[\"全大写\",{\"1\":{\"4177\":1}}],[\"全角字符\",{\"1\":{\"4029\":1}}],[\"全省略方式\",{\"1\":{\"3122\":1}}],[\"全部正常\",{\"1\":{\"3253\":1}}],[\"全部使用equals方法比较\",{\"1\":{\"3046\":1}}],[\"全部替换成\",{\"1\":{\"1212\":1}}],[\"全局变量引用其他类\",{\"1\":{\"2229\":1}}],[\"全国社保联网\",{\"1\":{\"1004\":1}}],[\"奶酪披萨\",{\"1\":{\"1212\":3}}],[\"修饰变量\",{\"1\":{\"5660\":1}}],[\"修饰的\",{\"1\":{\"4390\":1,\"4407\":1}}],[\"修饰的字段\",{\"1\":{\"4178\":1}}],[\"修饰符\",{\"0\":{\"4155\":1}}],[\"修饰者\",{\"1\":{\"934\":1}}],[\"修复\",{\"1\":{\"3969\":1}}],[\"修复bug\",{\"1\":{\"3427\":1}}],[\"修正嵩山版中部分代码格式错误和描述错误\",{\"1\":{\"3532\":1}}],[\"修正泰山版中部分格式错误和描述错误\",{\"1\":{\"3528\":1}}],[\"修正架构分层规范与相关说明\",{\"1\":{\"3528\":1}}],[\"修正部分描述\",{\"1\":{\"3512\":1}}],[\"修正页码总数和部分示例\",{\"1\":{\"3500\":1}}],[\"修正关于异常和方法签名的部分描述\",{\"1\":{\"3494\":1}}],[\"修正成\",{\"1\":{\"3491\":1}}],[\"修正\",{\"1\":{\"3491\":2,\"3494\":1,\"3528\":2}}],[\"修订号\",{\"1\":{\"3427\":2}}],[\"修改私有方法的访问标识\",{\"1\":{\"6017\":1}}],[\"修改部门\",{\"1\":{\"4696\":2}}],[\"修改描述\",{\"1\":{\"3520\":1,\"3524\":1,\"3532\":1}}],[\"修改\",{\"1\":{\"3331\":1,\"5605\":1}}],[\"修改了相应的方法签名\",{\"1\":{\"3274\":1}}],[\"修改了单例类中的同一个成员变量的值\",{\"1\":{\"2366\":1}}],[\"修改注释又是相当大的负担\",{\"1\":{\"3219\":1}}],[\"修改的方法用update做前缀\",{\"1\":{\"3006\":1}}],[\"修改的地方较多\",{\"1\":{\"2148\":1}}],[\"修改代码不至于牵一发而动全身\",{\"1\":{\"2754\":1}}],[\"修改代码可以接受\",{\"1\":{\"1205\":1}}],[\"修改会比较集中\",{\"1\":{\"2170\":1}}],[\"修改关闭\",{\"1\":{\"2129\":1}}],[\"改变\",{\"1\":{\"5295\":1}}],[\"改变成\",{\"1\":{\"2454\":1}}],[\"改变状态为奖品发送完毕\",{\"1\":{\"2454\":1}}],[\"改变状态为不能抽奖\",{\"1\":{\"2454\":2}}],[\"改变活动状态为发放奖品\",{\"1\":{\"2454\":1}}],[\"改成新的状态\",{\"1\":{\"2454\":1}}],[\"改动的代码会比较少\",{\"1\":{\"2021\":1}}],[\"改动方便\",{\"1\":{\"898\":1}}],[\"改进方案\",{\"1\":{\"2122\":1}}],[\"改进\",{\"1\":{\"2017\":1,\"2021\":1,\"2539\":1}}],[\"改进的思路分析\",{\"1\":{\"1204\":1,\"1768\":1}}],[\"改为更加抽象的命名方式\",{\"1\":{\"2707\":1}}],[\"改为\",{\"1\":{\"1569\":1}}],[\"省略set和get方法\",{\"1\":{\"5962\":2}}],[\"省略多余的设计方案\",{\"1\":{\"3469\":1}}],[\"省略其他代码\",{\"1\":{\"2748\":1}}],[\"省略其他属性和方法\",{\"1\":{\"2726\":2,\"2736\":2,\"2739\":1}}],[\"省略其他无关代码\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"省略参数\",{\"1\":{\"2699\":1}}],[\"省略属性和方法\",{\"1\":{\"2746\":1}}],[\"省略属性\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"省略必要的\",{\"1\":{\"1360\":2}}],[\"省略\",{\"1\":{\"1197\":1,\"1246\":1,\"2739\":1}}],[\"省去选择安装目录\",{\"1\":{\"1126\":1}}],[\"整洁轻量级协议缓存\",{\"1\":{\"6355\":1}}],[\"整数除零等\",{\"1\":{\"4820\":1}}],[\"整个上传流程包含三个步骤\",{\"1\":{\"2700\":1}}],[\"整个系统就会受到影响\",{\"1\":{\"1609\":1}}],[\"整个系统将受影响\",{\"1\":{\"1179\":1}}],[\"整合到一个网站中\",{\"1\":{\"1417\":1}}],[\"整体不存在了部分也不存在了\",{\"1\":{\"5792\":1}}],[\"整体不存在了部分还是会存在\",{\"1\":{\"5788\":1}}],[\"整体和局部的关系\",{\"1\":{\"2923\":1}}],[\"整体和部分的关系\",{\"1\":{\"2872\":1}}],[\"整体对象可以控制部分对象的生命周期\",{\"1\":{\"2879\":1}}],[\"整体与部分可以分开\",{\"1\":{\"2872\":1}}],[\"整体\",{\"1\":{\"806\":1,\"807\":1}}],[\"某中方法的\",{\"1\":{\"5801\":1}}],[\"某团队为了业务快速发展\",{\"1\":{\"3469\":1}}],[\"某同学为避免写一个\",{\"1\":{\"3399\":1}}],[\"某系统签名大量被恶意修改\",{\"1\":{\"3333\":1}}],[\"某业务将退货的商品id列表放在url中作为参数传递\",{\"1\":{\"3230\":1}}],[\"某业务系统\",{\"1\":{\"3204\":1}}],[\"某业务的do的createtime默认值为new\",{\"1\":{\"3059\":1}}],[\"某业务的交易报表上显示成交总额涨跌情况\",{\"1\":{\"3058\":1}}],[\"某业务的数据库表id字段定义类型为bigint\",{\"1\":{\"3055\":1}}],[\"某程序员因使用yyyy\",{\"1\":{\"3078\":1}}],[\"某个疫情相关的二维码出错\",{\"1\":{\"3456\":1}}],[\"某个接口设计得有问题\",{\"1\":{\"2765\":1}}],[\"某个功能只有一种实现方式\",{\"1\":{\"2718\":1}}],[\"某个类的方法通过局部变量\",{\"1\":{\"2850\":1}}],[\"某个类的对象等\",{\"1\":{\"1781\":1}}],[\"某个类只能生成一个实例\",{\"1\":{\"2605\":1}}],[\"某些类创建实例时占用资源较多\",{\"1\":{\"2344\":1}}],[\"某些类具有两个或多个维度的变化\",{\"1\":{\"586\":1}}],[\"某类问题的通用解决方案\",{\"1\":{\"2569\":1}}],[\"某类需要频繁实例化\",{\"1\":{\"2345\":1}}],[\"某类只要求生成一个对象的时候\",{\"1\":{\"2343\":1}}],[\"某类或者某批对象时\",{\"1\":{\"1173\":1}}],[\"某种商品的物价上涨时会导致部分商家高兴\",{\"1\":{\"1667\":1}}],[\"本质this指向本对象的指针\",{\"1\":{\"5731\":1}}],[\"本质上是将对象的地址以值的方式传递到形参中\",{\"1\":{\"5333\":1}}],[\"本应该使用if语句进行条件判断的情况下\",{\"1\":{\"4928\":1}}],[\"本章节介绍\",{\"1\":{\"4148\":1}}],[\"本工程内部子项目模块依赖的库\",{\"1\":{\"3549\":1}}],[\"本文主要介绍java\",{\"1\":{\"5749\":1}}],[\"本文主要对java基础知识体系小结\",{\"1\":{\"5584\":1}}],[\"本文主要对java基础知识点进行总结\",{\"1\":{\"5249\":1}}],[\"本文主要综合了网络上比较好的文章\",{\"1\":{\"5238\":1}}],[\"本文主要针对junit4要点进行梳理总结\",{\"1\":{\"4274\":1}}],[\"本文综合多篇文章后\",{\"1\":{\"4706\":1,\"4995\":1,\"5817\":1}}],[\"本文档其它章节中所要求的\",{\"1\":{\"4065\":1}}],[\"本文档中的示例代是\",{\"1\":{\"3940\":1}}],[\"本文档侧重于讨论我们普遍遵循的\",{\"1\":{\"3932\":1}}],[\"本文档讨论的不仅涉及代码对齐的美观问题\",{\"1\":{\"3932\":1}}],[\"本文档是\",{\"1\":{\"3931\":1}}],[\"本文泛指ibatis\",{\"1\":{\"3545\":1}}],[\"本文泛指类\",{\"1\":{\"3543\":1}}],[\"本文是开发手册\",{\"1\":{\"3326\":1}}],[\"本文mysql规约中的建表约定第\",{\"1\":{\"2994\":1}}],[\"本规约明确防止npe是调用者的责任\",{\"1\":{\"3275\":1}}],[\"本姑娘是外貌协会的资深会员\",{\"1\":{\"3195\":1}}],[\"本书紧扣学以致用\",{\"1\":{\"2983\":1}}],[\"本身的组成和类\",{\"1\":{\"2833\":1}}],[\"本身是一套符号的规定\",{\"1\":{\"2809\":1}}],[\"本类内部创建对象实例\",{\"1\":{\"2286\":1,\"2293\":1}}],[\"本内容讲解的重点也不是原理和实现\",{\"1\":{\"1161\":1}}],[\"本页面就是一个示例\",{\"1\":{\"16\":1}}],[\"利于程序扩展和优化\",{\"1\":{\"2094\":1}}],[\"利于维护为目的\",{\"1\":{\"1150\":1}}],[\"利用它可以在运行时动态创建对象\",{\"1\":{\"5846\":1}}],[\"利用反射技术可以对一个类进行解剖\",{\"1\":{\"5821\":1}}],[\"利用反射创建对象\",{\"1\":{\"1368\":1}}],[\"利用抽象数据类型将数据和基于数据的操作封装在一起\",{\"1\":{\"5752\":1}}],[\"利用先进先出队列实现的底层同步工具类\",{\"1\":{\"3544\":1}}],[\"利用延迟关联或者子查询优化超多分页场景\",{\"1\":{\"3374\":1}}],[\"利用覆盖索引来进行查询操作\",{\"1\":{\"3373\":1}}],[\"利用好其预编译功能\",{\"1\":{\"3239\":1}}],[\"利用set元素唯一的特性\",{\"1\":{\"3153\":1}}],[\"利用组合来替换继承\",{\"1\":{\"2782\":1}}],[\"利用继承特性\",{\"1\":{\"2745\":1}}],[\"利用\",{\"1\":{\"2325\":1}}],[\"利用了序列化和反序列化\",{\"1\":{\"1800\":1}}],[\"利用方法代替\",{\"1\":{\"1212\":1}}],[\"利用程序维护\",{\"1\":{\"617\":1}}],[\"步骤五\",{\"1\":{\"4407\":1}}],[\"步骤四\",{\"1\":{\"4407\":1}}],[\"步骤三\",{\"1\":{\"4407\":1}}],[\"步骤二\",{\"1\":{\"4407\":1}}],[\"步骤一\",{\"1\":{\"4407\":1}}],[\"步骤如下\",{\"1\":{\"2281\":1}}],[\"步长为\",{\"1\":{\"3359\":1}}],[\"步\",{\"1\":{\"1136\":1}}],[\"安卓和浏览器提供的静态类型编程语言\",{\"1\":{\"6473\":1}}],[\"安卓图片下载和图片缓存开发库\",{\"1\":{\"6450\":1}}],[\"安排运算先后顺序\",{\"1\":{\"1489\":1}}],[\"安装的组件等等\",{\"1\":{\"1126\":1}}],[\"安全\",{\"0\":{\"6596\":1}}],[\"安全性是简单而纯粹的\",{\"1\":{\"5688\":1}}],[\"安全性\",{\"1\":{\"5294\":1}}],[\"安全性异常\",{\"1\":{\"4825\":1}}],[\"安全包除外\",{\"1\":{\"3428\":1}}],[\"安全规约\",{\"0\":{\"3330\":1},\"1\":{\"2982\":1}}],[\"安全代理\",{\"1\":{\"1922\":1}}],[\"安全方式\",{\"0\":{\"825\":1}}],[\"安全的在\",{\"1\":{\"51\":1,\"64\":1}}],[\"观察错误的信息\",{\"1\":{\"4373\":1,\"4379\":1}}],[\"观察者集合\",{\"1\":{\"1718\":2}}],[\"观察者接口\",{\"1\":{\"1716\":1}}],[\"观察者类\",{\"1\":{\"1715\":1}}],[\"观察者模式解决天气预报需求\",{\"0\":{\"1711\":1}}],[\"观察者模式的应用场景\",{\"0\":{\"1729\":1}}],[\"观察者模式的结构图如下所示\",{\"1\":{\"1683\":1}}],[\"观察者模式的结构与实现\",{\"0\":{\"1676\":1}}],[\"观察者模式的主要角色如下\",{\"1\":{\"1678\":1}}],[\"观察者模式是一种对象行为型模式\",{\"1\":{\"1669\":1}}],[\"观察者模式基本介绍\",{\"0\":{\"1666\":1}}],[\"观察者模式\",{\"1\":{\"1074\":1,\"1668\":1,\"1710\":1,\"2625\":1}}],[\"观影结束后\",{\"1\":{\"1117\":1}}],[\"去发现问题所在\",{\"1\":{\"6994\":1}}],[\"去存储\",{\"1\":{\"5366\":1}}],[\"去永久代\",{\"1\":{\"5325\":1}}],[\"去调用我们重写的setvalue方法\",{\"1\":{\"5169\":1}}],[\"去调用我们重写的getvalue方法\",{\"1\":{\"5169\":1}}],[\"去除\",{\"1\":{\"3494\":1}}],[\"去除文底水印\",{\"1\":{\"3494\":1}}],[\"去银行办理业务一般要经过以下4个流程\",{\"1\":{\"2636\":1}}],[\"去覆盖重写\",{\"1\":{\"2525\":1}}],[\"去更新数据\",{\"1\":{\"1698\":1}}],[\"去订购需要的各种披萨\",{\"1\":{\"1198\":1}}],[\"去创建\",{\"1\":{\"1140\":1}}],[\"去维护对子系统的操作\",{\"1\":{\"1122\":1}}],[\"去拿爆米花\",{\"1\":{\"1117\":1}}],[\"去掉它的final修饰符\",{\"1\":{\"442\":1}}],[\"灯光类\",{\"1\":{\"1133\":1}}],[\"灯光\",{\"1\":{\"1116\":1,\"1134\":1}}],[\"灯的遥控器\",{\"1\":{\"779\":1}}],[\"灯的关闭类\",{\"1\":{\"777\":1}}],[\"灯的开启类\",{\"1\":{\"777\":1}}],[\"爆米花机\",{\"1\":{\"1116\":1,\"1133\":1,\"1134\":1}}],[\"违反依赖倒转原则\",{\"1\":{\"2076\":1}}],[\"违反接口隔离原则\",{\"1\":{\"2035\":1}}],[\"违反\",{\"1\":{\"1708\":1}}],[\"违反了依赖倒置原则\",{\"1\":{\"2942\":1}}],[\"违反了\",{\"1\":{\"1212\":1,\"2187\":1,\"2188\":1}}],[\"违反了单一职责原则\",{\"1\":{\"614\":1,\"2015\":1}}],[\"违背开闭原则\",{\"1\":{\"2267\":1,\"2487\":1}}],[\"违背高聚合原则\",{\"1\":{\"1179\":1}}],[\"违背了异常捕获的原则\",{\"1\":{\"5227\":1}}],[\"违背了泛型设计的初衷\",{\"1\":{\"5144\":1}}],[\"违背了依赖倒转原则\",{\"1\":{\"2971\":1}}],[\"违背了开闭原则\",{\"1\":{\"1747\":1}}],[\"违背了\",{\"1\":{\"1104\":1,\"1806\":1}}],[\"外界只能通过\",{\"1\":{\"5759\":1}}],[\"外键影响数据库的插入速度\",{\"1\":{\"3385\":1}}],[\"外键与级联更新适用于单机低并发\",{\"1\":{\"3385\":1}}],[\"外部配置工具\",{\"0\":{\"6316\":1}}],[\"外部部重定向地址必须使用url\",{\"1\":{\"3448\":1}}],[\"外部\",{\"1\":{\"3417\":1}}],[\"外部数据接口\",{\"1\":{\"3417\":1}}],[\"外部重定向地址必须使用url统一代理模块生成\",{\"1\":{\"3233\":1}}],[\"外部正在调用的接口或者二方库依赖的接口\",{\"1\":{\"3043\":1}}],[\"外部依赖的模块或者类\",{\"1\":{\"2754\":1}}],[\"外部调用demofunction\",{\"1\":{\"2381\":1}}],[\"外部能new\",{\"1\":{\"2293\":1}}],[\"外部能\",{\"1\":{\"2286\":1}}],[\"外部状态指对象得以依赖的一个标记\",{\"1\":{\"1388\":1}}],[\"外部应用程序不用关心内部子系统的具体细节\",{\"1\":{\"1095\":1}}],[\"外观角色\",{\"1\":{\"1114\":1}}],[\"外观\",{\"1\":{\"1097\":1,\"1106\":1,\"1108\":1,\"1109\":1}}],[\"外观模式可以为系统设计一个简单的接口供外界访问\",{\"1\":{\"1154\":1}}],[\"外观模式可以理解为转换一群接口\",{\"1\":{\"1126\":1}}],[\"外观模式对客户端与子系统的耦合关系\",{\"1\":{\"1146\":1}}],[\"外观模式的应用场景\",{\"0\":{\"1151\":1}}],[\"外观模式的注意事项和细节\",{\"0\":{\"1144\":1}}],[\"外观模式的结构与实现\",{\"0\":{\"1105\":1}}],[\"外观模式就是解决多个复杂接口带来的使用困难\",{\"1\":{\"1127\":1}}],[\"外观模式解决影院管理\",{\"0\":{\"1125\":1}}],[\"外观模式基本介绍\",{\"0\":{\"1092\":1}}],[\"外观模式\",{\"1\":{\"990\":1,\"1095\":1,\"1124\":1,\"1145\":1,\"2616\":1}}],[\"该迭代器会从头查找和实例化服务提供者\",{\"1\":{\"6258\":1}}],[\"该目录下会有一个名字为java\",{\"1\":{\"6168\":1}}],[\"该对象描述了此\",{\"1\":{\"6029\":1}}],[\"该对象反映此\",{\"1\":{\"6002\":1}}],[\"该对象表示声明由此\",{\"1\":{\"5923\":1}}],[\"该条可以归为第一条中的一个特例\",{\"1\":{\"5632\":1}}],[\"该文件内容保存着\",{\"1\":{\"5515\":1}}],[\"该数组被声明为\",{\"1\":{\"5286\":1}}],[\"该注解才能是运行时可见\",{\"1\":{\"4623\":1}}],[\"该操作中的参数类型标识了被访问的具体元素\",{\"1\":{\"2945\":1}}],[\"该为某个类定义接口\",{\"1\":{\"2716\":1}}],[\"该策略类并没有提供实现类\",{\"1\":{\"2536\":1}}],[\"该类或接口声明由此\",{\"1\":{\"5989\":1}}],[\"该类的第一个对象没有生成\",{\"1\":{\"5860\":1}}],[\"该类的所有方法\",{\"1\":{\"2467\":1}}],[\"该类提供了一个全局访问点供外部获取该实例\",{\"1\":{\"2605\":1}}],[\"该类中有一个静态属性\",{\"1\":{\"2320\":1}}],[\"该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类\",{\"1\":{\"940\":1}}],[\"该方法无法获取继承自父类的method\",{\"1\":{\"6013\":2}}],[\"该方法是私有构造private\",{\"1\":{\"5914\":1}}],[\"该方法会返回一个\",{\"1\":{\"5516\":1}}],[\"该方法将忽略继承的注解\",{\"1\":{\"4638\":1}}],[\"该方法将忽略继承的注释\",{\"1\":{\"4634\":1,\"4636\":1}}],[\"该方法的几种类型必须是该泛型的实例的类型或者其子类\",{\"1\":{\"5111\":1}}],[\"该方法的调用者才必须处理或者重新抛出该异常\",{\"1\":{\"4750\":1}}],[\"该方法的调用者可以随意修改返回的数组\",{\"1\":{\"4632\":1,\"4638\":1}}],[\"该方法的名字不做要求\",{\"1\":{\"4407\":1}}],[\"该方法没有参数\",{\"1\":{\"4407\":1}}],[\"该方法必须返回collection类型\",{\"1\":{\"4407\":1}}],[\"该方法必须为public\",{\"1\":{\"4407\":1}}],[\"该方法必须由parameters注解修饰\",{\"1\":{\"4407\":1}}],[\"该方法最终都会被执行\",{\"1\":{\"4332\":1}}],[\"该方法要用static修饰\",{\"1\":{\"4329\":1,\"4332\":1}}],[\"该方法称为\",{\"1\":{\"2673\":1}}],[\"该方法完成输出学校总部和学院员工信息\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"该方法可以将一个\",{\"1\":{\"1768\":1}}],[\"该原则提出对象不应该承担太多职责\",{\"1\":{\"2004\":1}}],[\"该请求可能一直传到链的末端都得不到处理\",{\"1\":{\"1939\":1}}],[\"该模式的不足之处\",{\"1\":{\"2683\":1}}],[\"该模式定义了一系列算法\",{\"1\":{\"2488\":1}}],[\"该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构\",{\"1\":{\"1933\":1}}],[\"该模式对外有一个统一接口\",{\"1\":{\"1095\":1}}],[\"该接口表示该类能够复制且具有复制的能力\",{\"1\":{\"1768\":1}}],[\"该接口解释一个特定的上下文\",{\"1\":{\"1455\":1}}],[\"该超级工厂又称为其他工厂的工厂\",{\"1\":{\"1167\":1}}],[\"门面模式\",{\"1\":{\"1095\":1}}],[\"迪米特法则讲的是\",{\"1\":{\"2784\":1}}],[\"迪米特法则的核心是降低类之间的耦合\",{\"1\":{\"2196\":1}}],[\"迪米特法则注意事项和细节\",{\"0\":{\"2195\":1}}],[\"迪米特法则能够帮我们实现代码的\",{\"1\":{\"2168\":1}}],[\"迪米特法则还有个更简单的定义\",{\"1\":{\"2161\":1}}],[\"迪米特法则\",{\"0\":{\"2154\":1},\"1\":{\"1094\":1,\"1097\":1,\"1997\":1,\"2157\":1,\"2187\":1,\"2188\":2,\"2189\":1,\"2229\":1,\"2246\":1,\"2783\":1}}],[\"子句中使用\",{\"1\":{\"4906\":1}}],[\"子句中使用它\",{\"1\":{\"4905\":1}}],[\"子句中打开资源\",{\"1\":{\"4868\":1}}],[\"子业务线可选\",{\"1\":{\"3426\":1}}],[\"子业务线\",{\"1\":{\"3426\":1}}],[\"子线程抛出异常堆栈\",{\"1\":{\"3176\":1}}],[\"子工程内部共享常量\",{\"1\":{\"3016\":1}}],[\"子工程内共享常量\",{\"1\":{\"3016\":1}}],[\"子工厂\",{\"1\":{\"1256\":1}}],[\"子系统03的method3\",{\"1\":{\"1114\":1}}],[\"子系统02的method2\",{\"1\":{\"1114\":1}}],[\"子系统01的method1\",{\"1\":{\"1114\":1}}],[\"子系统角色\",{\"1\":{\"1114\":3}}],[\"子系统\",{\"1\":{\"1110\":1}}],[\"子系统会越来越多\",{\"1\":{\"1094\":1}}],[\"子类对象必须能够替换掉所有父类对象\",{\"1\":{\"5764\":1}}],[\"子类方法的返回类型必须是父类方法返回类型或为其子类型\",{\"1\":{\"5409\":1}}],[\"子类方法的访问权限必须大于等于父类方法\",{\"1\":{\"5408\":1}}],[\"子类中的桥方法object\",{\"1\":{\"5180\":1}}],[\"子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法\",{\"1\":{\"5170\":1}}],[\"子类中尽量不要重写父类的方法\",{\"1\":{\"2105\":1,\"2227\":1}}],[\"子类即可在客户端调用即可\",{\"1\":{\"2968\":1}}],[\"子类复用父类中的属性和方法\",{\"1\":{\"2745\":1}}],[\"子类的实现依赖父类的实现\",{\"1\":{\"2731\":1}}],[\"子类就会继承这些修改\",{\"1\":{\"2681\":1}}],[\"子类具体实现\",{\"1\":{\"2677\":1}}],[\"子类可以视情况要不要覆盖它\",{\"1\":{\"2673\":1}}],[\"子类执行的结果会影响父类的结果\",{\"1\":{\"2647\":1}}],[\"子类实现\",{\"1\":{\"2537\":1}}],[\"子类实现特性\",{\"1\":{\"645\":1}}],[\"子类重写方法功能发生改变\",{\"1\":{\"2250\":1}}],[\"子类与父类的耦合度高\",{\"1\":{\"2217\":1}}],[\"子类决定要实例化的类\",{\"1\":{\"1227\":1}}],[\"子类\",{\"1\":{\"933\":1,\"934\":1,\"935\":1,\"2996\":1,\"5509\":1,\"5512\":1,\"5513\":1}}],[\"子类来实现\",{\"1\":{\"922\":1}}],[\"子类会很膨胀\",{\"1\":{\"885\":1}}],[\"子类都需要实现\",{\"1\":{\"850\":1}}],[\"子类也会继承得到\",{\"1\":{\"646\":1}}],[\"横看成岭侧成峰\",{\"1\":{\"1081\":1}}],[\"联系方式我给你\",{\"1\":{\"1066\":1}}],[\"联合使用\",{\"1\":{\"657\":1}}],[\"草稿箱\",{\"1\":{\"1063\":1}}],[\"后退\",{\"1\":{\"6978\":1}}],[\"后缀\",{\"1\":{\"4159\":1}}],[\"后期维护\",{\"1\":{\"3470\":1}}],[\"后期维护成本较大\",{\"1\":{\"672\":1}}],[\"后续的行从\",{\"1\":{\"4251\":1}}],[\"后续的行中必须以\",{\"1\":{\"4151\":1}}],[\"后续可能恢复使用的代码片断\",{\"1\":{\"3247\":1}}],[\"后续会恢复此段代码逻辑\",{\"1\":{\"3217\":1}}],[\"后台运行\",{\"1\":{\"6303\":1}}],[\"后台便在用户不知情的情况下对数据库中用户参数进行相应修改\",{\"1\":{\"3343\":1}}],[\"后台输送给页面的变量必须加\",{\"1\":{\"3242\":1}}],[\"后台的数据仍是数组\",{\"1\":{\"3108\":1}}],[\"后端发现用户输入的参数大于总页数\",{\"1\":{\"3232\":1}}],[\"后端解析会出错\",{\"1\":{\"3231\":1}}],[\"后端传输的\",{\"1\":{\"3229\":1}}],[\"后者过去分词表示被动式更新\",{\"1\":{\"3359\":1}}],[\"后者建议直接删掉即可\",{\"1\":{\"3217\":1}}],[\"后者的表述方式其实更能体现这条原则的设计初衷\",{\"1\":{\"2696\":1}}],[\"后文迪米特法则有介绍\",{\"1\":{\"2753\":1}}],[\"后面再说\",{\"1\":{\"6209\":1}}],[\"后面再次访问时\",{\"1\":{\"2316\":1}}],[\"后面接上要声明的异常\",{\"1\":{\"4742\":1}}],[\"后面我们就不可以抽奖\",{\"1\":{\"2454\":1}}],[\"后面就会讲到\",{\"1\":{\"2412\":1}}],[\"后面的数值为散列码的无符号十六进制表示\",{\"1\":{\"5450\":1}}],[\"后面的日志也没有附加更有用的信息\",{\"1\":{\"4921\":1}}],[\"后面的想获得该类实例\",{\"1\":{\"2307\":1}}],[\"后面的解释器可以从这里获取这些值\",{\"1\":{\"1471\":1}}],[\"后面的很多架构设计\",{\"1\":{\"1158\":1}}],[\"后攻击力和防御力下降\",{\"1\":{\"1638\":1}}],[\"后悔机制\",{\"1\":{\"1062\":1}}],[\"备注\",{\"1\":{\"3482\":1}}],[\"备忘录类\",{\"1\":{\"1648\":1}}],[\"备忘录\",{\"1\":{\"1631\":1,\"1636\":1}}],[\"备忘录对象主要用来记录一个对象的某种状态\",{\"1\":{\"1619\":1}}],[\"备忘录模式可以和原型模式配合使用\",{\"1\":{\"1660\":1}}],[\"备忘录模式实现了信息的封装\",{\"1\":{\"1658\":1}}],[\"备忘录模式给用户提供了一种可以恢复状态的机制\",{\"1\":{\"1657\":1}}],[\"备忘录模式解决游戏角色恢复\",{\"0\":{\"1644\":1}}],[\"备忘录模式的应用场景\",{\"0\":{\"1661\":1}}],[\"备忘录模式的注意事项和细节\",{\"0\":{\"1656\":1}}],[\"备忘录模式的结构图如下图所示\",{\"1\":{\"1633\":1}}],[\"备忘录模式的结构与实现\",{\"0\":{\"1627\":1}}],[\"备忘录模式的主要角色如下\",{\"1\":{\"1629\":1}}],[\"备忘录模式的核心是设计备忘录类以及用于管理备忘录的管理者类\",{\"1\":{\"1628\":1}}],[\"备忘录模式有着相同的含义\",{\"1\":{\"1619\":1}}],[\"备忘录模式属于行为型模式\",{\"1\":{\"1618\":1}}],[\"备忘录模式基本介绍\",{\"0\":{\"1616\":1}}],[\"备忘录模式\",{\"1\":{\"751\":1,\"1059\":1,\"1617\":1,\"1643\":1,\"2627\":1}}],[\"备份\",{\"1\":{\"1062\":1}}],[\"失去了本意\",{\"1\":{\"5189\":1}}],[\"失败等\",{\"1\":{\"2955\":1}}],[\"失败会抛出异常\",{\"1\":{\"2699\":1,\"2711\":2}}],[\"失败\",{\"1\":{\"2473\":1,\"4696\":3}}],[\"失败反而能给我们更多启发和教训\",{\"1\":{\"146\":1}}],[\"失足不成千古恨\",{\"1\":{\"1061\":1}}],[\"保护\",{\"1\":{\"6005\":1}}],[\"保护当前系统主干功能可用\",{\"1\":{\"3456\":1}}],[\"保护方法虽然只是子类关心\",{\"1\":{\"3068\":1}}],[\"保持对齐\",{\"1\":{\"4151\":1}}],[\"保持除功能点之外的其它jar包仲裁结果不变\",{\"1\":{\"3429\":1}}],[\"保持完全兼容性\",{\"1\":{\"3427\":1}}],[\"保持相对兼容性\",{\"1\":{\"3427\":1}}],[\"保持单元测试的独立性\",{\"1\":{\"3304\":1}}],[\"保持代码的简洁性\",{\"1\":{\"3003\":1}}],[\"保持不变\",{\"1\":{\"2546\":1}}],[\"保存实现类的全名\",{\"1\":{\"6258\":1}}],[\"保存实现类的url\",{\"1\":{\"6258\":1}}],[\"保存反射信息\",{\"1\":{\"6076\":1}}],[\"保存\",{\"1\":{\"4696\":1}}],[\"保存数据库\",{\"1\":{\"4693\":1}}],[\"保存日期\",{\"1\":{\"3284\":1}}],[\"保存在堆中\",{\"1\":{\"5325\":1}}],[\"保存在\",{\"1\":{\"3284\":1}}],[\"保存在连接对象中的用户名\",{\"1\":{\"1388\":1}}],[\"保存游戏角色的状态\",{\"1\":{\"1651\":1}}],[\"保存状态\",{\"1\":{\"1636\":1}}],[\"保存中介者对象\",{\"1\":{\"1581\":1}}],[\"保存当前数组的对象个数\",{\"1\":{\"1535\":1}}],[\"保存对象的状态\",{\"1\":{\"1060\":1}}],[\"保证内存可用\",{\"1\":{\"6079\":1}}],[\"保证等价的两个对象散列值也相等\",{\"1\":{\"5443\":1}}],[\"保证锁一定被释放\",{\"1\":{\"4786\":1}}],[\"保证程序代码更加优雅\",{\"1\":{\"4706\":1}}],[\"保证核心系统正常可用\",{\"1\":{\"3456\":1}}],[\"保证被关联的字段需要有索引\",{\"1\":{\"3369\":1}}],[\"保证代码松耦合\",{\"1\":{\"2752\":1}}],[\"保证独一无二\",{\"1\":{\"964\":1}}],[\"保证一个类仅有一个实例\",{\"1\":{\"962\":1}}],[\"保证能让你写出同事看不懂的代码~\",{\"1\":{\"393\":1}}],[\"绑定状态和行为\",{\"1\":{\"1057\":1}}],[\"状态就不能再改变\",{\"1\":{\"5625\":1}}],[\"状态码\",{\"1\":{\"3224\":1}}],[\"状态图的核心是对象状态\",{\"1\":{\"3452\":1}}],[\"状态图\",{\"1\":{\"2813\":1}}],[\"状态枚举类\",{\"1\":{\"2468\":1}}],[\"状态抽象类\",{\"1\":{\"2454\":1}}],[\"状态类\",{\"1\":{\"2453\":1,\"2464\":1}}],[\"状态类职责明确\",{\"1\":{\"2424\":1}}],[\"状态之间可以相互转换\",{\"1\":{\"2418\":1}}],[\"状态和行为是一一对应的\",{\"1\":{\"2418\":1}}],[\"状态发生改变时通知观察者\",{\"1\":{\"1075\":1}}],[\"状态驱动行为\",{\"1\":{\"1056\":1}}],[\"状态模式等方式重构\",{\"1\":{\"3324\":1}}],[\"状态模式等来实现\",{\"1\":{\"3194\":1}}],[\"状态模式方便维护\",{\"1\":{\"2476\":1}}],[\"状态模式将每个状态的行为封装到对应的一个类\",{\"1\":{\"2475\":1}}],[\"状态模式将与特定状态相关的行为局部化到一个状态中\",{\"1\":{\"2422\":1}}],[\"状态模式在实际项目源码\",{\"0\":{\"2457\":1}}],[\"状态模式测试类\",{\"1\":{\"2456\":1}}],[\"状态模式解决抽奖活动问题\",{\"0\":{\"2446\":1}}],[\"状态模式包含以下主要角色\",{\"1\":{\"2431\":1}}],[\"状态模式把受环境改变的对象行为包装在不同的状态对象里\",{\"1\":{\"2430\":1}}],[\"状态模式对开闭原则的支持并不太好\",{\"1\":{\"2428\":1}}],[\"状态模式的应用场景\",{\"0\":{\"2479\":1}}],[\"状态模式的代码有很强的可读性\",{\"1\":{\"2475\":1}}],[\"状态模式的注意事项和细节\",{\"0\":{\"2474\":1}}],[\"状态模式的结构与实现\",{\"0\":{\"2429\":1}}],[\"状态模式的结构与实现都较为复杂\",{\"1\":{\"2427\":1}}],[\"状态模式的使用必然会增加系统的类与对象的个数\",{\"1\":{\"2426\":1}}],[\"状态模式的解决思想是\",{\"1\":{\"2417\":1}}],[\"状态模式是一种对象行为型模式\",{\"1\":{\"2420\":1}}],[\"状态模式基本介绍\",{\"0\":{\"2414\":1}}],[\"状态模式\",{\"1\":{\"1054\":1,\"2417\":1,\"2418\":1,\"2629\":1}}],[\"遥控器\",{\"1\":{\"1053\":1}}],[\"逐个检票进站\",{\"1\":{\"1048\":1}}],[\"流\",{\"1\":{\"6759\":1}}],[\"流对象进行关闭\",{\"1\":{\"3270\":1}}],[\"流水线上坐一天\",{\"1\":{\"1046\":1}}],[\"流程驱动的软件系统构建\",{\"1\":{\"6679\":1}}],[\"流程进行封装\",{\"1\":{\"2708\":1}}],[\"流程不应该暴露给调用者\",{\"1\":{\"2708\":1}}],[\"流程正常\",{\"1\":{\"2473\":1}}],[\"流程全部标准化\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"流程图\",{\"0\":{\"92\":1,\"158\":1}}],[\"踢皮球\",{\"1\":{\"1043\":1}}],[\"莫管他们瓦上霜\",{\"1\":{\"1041\":1}}],[\"选出符合要求的方法\",{\"1\":{\"6093\":1}}],[\"选材料\",{\"1\":{\"2677\":1}}],[\"选材\",{\"1\":{\"2666\":1,\"2668\":1}}],[\"选择重用哪一种异常并没有必须遵循的规则\",{\"1\":{\"4892\":1}}],[\"选择\",{\"1\":{\"3954\":1}}],[\"选择好的新鲜黄豆\",{\"1\":{\"2677\":1}}],[\"选择排序\",{\"1\":{\"2486\":1}}],[\"选择支付方式\",{\"1\":{\"1038\":1}}],[\"选\",{\"1\":{\"1117\":1}}],[\"选配\",{\"1\":{\"975\":1}}],[\"模块之间只通过它们的\",{\"1\":{\"5364\":1}}],[\"模块层面上的依赖关系网\",{\"1\":{\"3473\":1}}],[\"模块名\",{\"1\":{\"3426\":1}}],[\"模块或者类的职责设计得单一\",{\"1\":{\"2776\":1}}],[\"模块或类之间的耦合小\",{\"1\":{\"2755\":1}}],[\"模块\",{\"1\":{\"2762\":1,\"4690\":1}}],[\"模块的设计\",{\"1\":{\"2753\":1}}],[\"模块化测试函数库\",{\"1\":{\"6643\":1}}],[\"模块化应用服务器\",{\"1\":{\"6615\":1}}],[\"模块化是构建复杂系统常用的手段\",{\"1\":{\"2772\":1}}],[\"模块化\",{\"0\":{\"2750\":1},\"1\":{\"2771\":1,\"6502\":1}}],[\"模块和函数应该\",{\"1\":{\"2129\":1}}],[\"模板\",{\"1\":{\"6949\":1}}],[\"模板引擎\",{\"0\":{\"6617\":1},\"1\":{\"6656\":1}}],[\"模板引擎会自动按规范调用pojo的getxxx\",{\"1\":{\"3241\":1}}],[\"模板设计模式\",{\"1\":{\"3068\":1}}],[\"模板方法只在特定点调用钩子操作\",{\"1\":{\"2688\":1}}],[\"模板方法可以做成final\",{\"1\":{\"2677\":1}}],[\"模板方法\",{\"1\":{\"2653\":1,\"2663\":1,\"2677\":1}}],[\"模板方法模式通常适用于以下场景\",{\"1\":{\"2685\":1}}],[\"模板方法模式的应用场景\",{\"0\":{\"2684\":1}}],[\"模板方法模式的注意事项和细节\",{\"0\":{\"2680\":1}}],[\"模板方法模式的钩子方法\",{\"0\":{\"2672\":1}}],[\"模板方法模式的结构图如下\",{\"1\":{\"2660\":1}}],[\"模板方法模式解决豆浆制作问题\",{\"0\":{\"2664\":1}}],[\"模板方法模式包含以下主要角色\",{\"1\":{\"2650\":1}}],[\"模板方法模式结构与实现\",{\"0\":{\"2649\":1}}],[\"模板方法模式定义一个操作中的算法的骨架\",{\"1\":{\"2639\":1}}],[\"模板方法模式基本介绍\",{\"0\":{\"2634\":1}}],[\"模板方法模式\",{\"1\":{\"2621\":1,\"2638\":1,\"2669\":1}}],[\"模板模式\",{\"1\":{\"1028\":1,\"2638\":1}}],[\"模型是现实的简化\",{\"1\":{\"2822\":1}}],[\"模型大多以图表的方式表现出来\",{\"1\":{\"2818\":1}}],[\"模型\",{\"1\":{\"1570\":1,\"1668\":1}}],[\"模式匹配\",{\"1\":{\"6413\":1,\"6920\":1}}],[\"模式与实践\",{\"1\":{\"5808\":1}}],[\"模式则能让你独立于具体代码来复用设计思想和理念\",{\"1\":{\"2794\":1}}],[\"模式不是代码\",{\"1\":{\"2569\":1}}],[\"模式和实践\",{\"1\":{\"2001\":1}}],[\"模式和工厂模式的关注点不同\",{\"1\":{\"673\":1}}],[\"模式\",{\"1\":{\"1148\":1,\"1570\":1,\"2621\":1,\"2976\":1}}],[\"模式是\",{\"1\":{\"1097\":1}}],[\"模式的实现\",{\"0\":{\"828\":1,\"1113\":1}}],[\"模式的实现化角色的接口与现有类的接口不一致时\",{\"1\":{\"657\":1}}],[\"模式的主要角色如下\",{\"1\":{\"680\":1}}],[\"模式的结构比较简单\",{\"1\":{\"1106\":1}}],[\"模式的结构\",{\"0\":{\"497\":1,\"1107\":1,\"1391\":1}}],[\"模式可与\",{\"1\":{\"657\":1}}],[\"模式包含以下主要角色\",{\"1\":{\"598\":1,\"1108\":1}}],[\"模式最大的作用还是将原本不兼容的接口融合在一起工作\",{\"1\":{\"578\":1}}],[\"桥\",{\"1\":{\"1019\":1}}],[\"桥接方法\",{\"1\":{\"5075\":1}}],[\"桥接\",{\"1\":{\"598\":1}}],[\"桥接模式模式的扩展\",{\"0\":{\"656\":1}}],[\"桥接模式通常适用于以下场景\",{\"1\":{\"641\":1}}],[\"桥接模式尤为适用\",{\"1\":{\"640\":1}}],[\"桥接模式要求正确识别出系统中两个独立变化的维度\",{\"1\":{\"637\":1}}],[\"桥接模式替代多层继承方案\",{\"1\":{\"635\":1}}],[\"桥接模式的一个常见使用场景就是\",{\"1\":{\"645\":1}}],[\"桥接模式的应用场景\",{\"0\":{\"638\":1}}],[\"桥接模式的引入增加了系统的理解和设计难度\",{\"1\":{\"636\":1}}],[\"桥接模式的注意事项和细节\",{\"0\":{\"632\":1}}],[\"桥接模式的结构与实现\",{\"0\":{\"597\":1}}],[\"桥接模式解决手机操作问题\",{\"0\":{\"616\":1}}],[\"桥接模式\",{\"1\":{\"588\":1,\"589\":1,\"1015\":1,\"2613\":1}}],[\"桥接模式基本介绍\",{\"0\":{\"585\":1}}],[\"兼容转换\",{\"1\":{\"1013\":1}}],[\"组件图\",{\"1\":{\"2812\":1}}],[\"组件间紧密的耦合\",{\"1\":{\"2789\":1}}],[\"组件\",{\"1\":{\"2762\":1}}],[\"组织上位于实现方所在的包中\",{\"1\":{\"6249\":1}}],[\"组织上位于调用方所在的包中\",{\"1\":{\"6244\":1}}],[\"组织在一起\",{\"1\":{\"2388\":1}}],[\"组织架构树\",{\"1\":{\"1009\":1}}],[\"组装数据\",{\"1\":{\"6219\":1}}],[\"组装责任链\",{\"1\":{\"1953\":1}}],[\"组装类并提供执行入口\",{\"1\":{\"1355\":1}}],[\"组建一个家庭影院\",{\"1\":{\"1116\":1}}],[\"组合中整体和部分是强依赖的\",{\"1\":{\"5792\":1}}],[\"组合的方式来实现\",{\"1\":{\"3464\":1}}],[\"组合是直接\",{\"1\":{\"2891\":1}}],[\"组合关系用\",{\"1\":{\"2880\":1}}],[\"组合关系\",{\"0\":{\"2877\":1,\"5791\":1},\"1\":{\"2848\":1}}],[\"组合关系是一种弱依赖关系\",{\"1\":{\"2782\":1}}],[\"组合并不完美\",{\"1\":{\"2749\":1}}],[\"组合相比继承有哪些优势\",{\"0\":{\"2733\":1},\"1\":{\"2721\":1}}],[\"组合优于继承\",{\"1\":{\"2721\":1}}],[\"组合图\",{\"1\":{\"2207\":1}}],[\"组合或者聚合\",{\"1\":{\"2199\":1}}],[\"组合等\",{\"1\":{\"2121\":1}}],[\"组合键\",{\"1\":{\"1664\":1}}],[\"组合键时能撤销当前操作\",{\"1\":{\"1620\":1}}],[\"组合\",{\"1\":{\"926\":1,\"2107\":1,\"2162\":1,\"2199\":1,\"2739\":2,\"2746\":2,\"2809\":1,\"2878\":1,\"2921\":1,\"2924\":1}}],[\"组合能让客户以一致的方式处理个别对象以及组合对象\",{\"1\":{\"809\":1}}],[\"组合模式的应用场景\",{\"0\":{\"869\":1}}],[\"组合模式的注意事项和细节\",{\"0\":{\"863\":1}}],[\"组合模式解决学校院系展示\",{\"0\":{\"845\":1}}],[\"组合模式分为透明式的组合模式和安全式的组合模式\",{\"1\":{\"821\":1}}],[\"组合模式结构与实现\",{\"0\":{\"817\":1}}],[\"组合模式使得客户端代码可以一致地处理单个对象和组合对象\",{\"1\":{\"811\":1}}],[\"组合模式使得用户对单个对象和组合对象的访问具有一致性\",{\"1\":{\"809\":1}}],[\"组合模式依据树形结构来组合对象\",{\"1\":{\"808\":1}}],[\"组合模式基本介绍\",{\"0\":{\"805\":1}}],[\"组合模式\",{\"1\":{\"750\":1,\"807\":1,\"844\":1,\"1005\":1,\"1466\":1,\"2615\":1,\"2744\":1}}],[\"组合品牌\",{\"1\":{\"624\":1}}],[\"心在一起叫团队\",{\"1\":{\"1007\":1}}],[\"人民币等都可以出现\",{\"1\":{\"3464\":1}}],[\"人的大脑不会主动地拆开并分辨每位数字的不同含义\",{\"1\":{\"3263\":1}}],[\"人\",{\"1\":{\"2881\":1,\"3366\":1}}],[\"人处理复杂性的能力是有限的\",{\"1\":{\"2752\":1}}],[\"人性化解释\",{\"1\":{\"1857\":1,\"1891\":1}}],[\"人才交流中心\",{\"1\":{\"1569\":1}}],[\"人在一起叫团伙\",{\"1\":{\"1007\":1}}],[\"人生就是起起伏伏\",{\"1\":{\"146\":1}}],[\"优质代码\",{\"1\":{\"6742\":1}}],[\"优化\",{\"1\":{\"5754\":1}}],[\"优化资源配置\",{\"1\":{\"1002\":1}}],[\"优雅的设计\",{\"1\":{\"6585\":1,\"6677\":1}}],[\"优雅简洁\",{\"1\":{\"4282\":1}}],[\"优雅性\",{\"1\":{\"2983\":1}}],[\"优先捕获最具体的异常\",{\"0\":{\"4898\":1}}],[\"优先使用聚合\",{\"1\":{\"3464\":1}}],[\"优先调用getxxx\",{\"1\":{\"3241\":1}}],[\"优先推荐入参为string的构造方法\",{\"1\":{\"3056\":1}}],[\"优先考虑将一个类设置成不变类\",{\"1\":{\"2181\":1}}],[\"优缺点和上面\",{\"1\":{\"2295\":1}}],[\"优缺点说明\",{\"1\":{\"2287\":1,\"2294\":1,\"2299\":1,\"2305\":1,\"2314\":1,\"2321\":1,\"2329\":1}}],[\"优点\",{\"1\":{\"1281\":1,\"1846\":1,\"2288\":1,\"2325\":1,\"5753\":1}}],[\"优点是比较好理解\",{\"1\":{\"699\":1,\"1202\":1,\"1765\":1,\"2146\":1}}],[\"优势模式\",{\"1\":{\"1258\":1}}],[\"煎饼\",{\"1\":{\"999\":1}}],[\"煎饼中可以加鸡蛋\",{\"1\":{\"875\":1}}],[\"他会让你感受到构建器到底是怎么回事\",{\"1\":{\"6811\":1}}],[\"他是依赖关系的特例\",{\"1\":{\"2901\":1}}],[\"他是属于动态代理的范畴\",{\"1\":{\"1813\":1}}],[\"他在\",{\"1\":{\"2127\":1}}],[\"他们的方法签名是一样的\",{\"1\":{\"5180\":1}}],[\"他们各自实现\",{\"1\":{\"2080\":1}}],[\"他们之间没有继承的关系\",{\"1\":{\"844\":1}}],[\"他\",{\"1\":{\"1568\":1}}],[\"他大舅他二舅都是他舅\",{\"1\":{\"997\":1}}],[\"媒婆\",{\"1\":{\"989\":1}}],[\"增减字段容易与resultmap配置不一致\",{\"1\":{\"3394\":1}}],[\"增强或修改该对象的一些特性\",{\"1\":{\"2618\":1}}],[\"增强了给对象指派职责的灵活性\",{\"1\":{\"1935\":1}}],[\"增强了系统的可扩展性\",{\"1\":{\"1934\":1}}],[\"增强额外的功能操作\",{\"1\":{\"1811\":1}}],[\"增强职责\",{\"1\":{\"988\":1}}],[\"增加安全机制\",{\"1\":{\"5668\":1}}],[\"增加设计规约大类\",{\"1\":{\"3516\":1}}],[\"增加单元测试规约\",{\"1\":{\"3508\":1}}],[\"增加卫语句的示例代码\",{\"1\":{\"3504\":1}}],[\"增加关于锁的粒度的说明\",{\"1\":{\"3504\":1}}],[\"增加专有名词解释\",{\"1\":{\"3497\":1}}],[\"增加版本历史\",{\"1\":{\"3497\":1}}],[\"增加<\",{\"1\":{\"3497\":1}}],[\"增加前言\",{\"1\":{\"3497\":1}}],[\"增加主要功能特性\",{\"1\":{\"3427\":1}}],[\"增加查询分析器解析成本\",{\"1\":{\"3394\":1}}],[\"增加gc负担\",{\"1\":{\"3106\":1}}],[\"增加\",{\"1\":{\"3103\":1,\"3504\":2,\"4024\":1,\"5605\":1}}],[\"增加排查问题的难度\",{\"1\":{\"3069\":1}}],[\"增加builder这个变量\",{\"1\":{\"3037\":1}}],[\"增加到\",{\"1\":{\"2964\":1}}],[\"增加维护难度\",{\"1\":{\"2502\":1}}],[\"增加程序的可复用性\",{\"1\":{\"2255\":1}}],[\"增加对象间的耦合性\",{\"1\":{\"2099\":1}}],[\"增加微信\",{\"1\":{\"2082\":1}}],[\"增加计算真实对象的引用次数的功能\",{\"1\":{\"1923\":1}}],[\"增加或者减少属性\",{\"1\":{\"1804\":1}}],[\"增加或删除命令非常方便\",{\"1\":{\"749\":1}}],[\"增加观察者方法\",{\"1\":{\"1686\":1}}],[\"增加系的方法\",{\"1\":{\"1535\":1}}],[\"增加系统的复杂度和理解难度\",{\"1\":{\"1180\":1}}],[\"增加复杂度\",{\"1\":{\"1224\":1}}],[\"增加新的元素类很困难\",{\"1\":{\"2940\":1}}],[\"增加新的状态类需要修改那些负责状态转换的源码\",{\"1\":{\"2428\":1}}],[\"增加新的聚合类和迭代器类都很方便\",{\"1\":{\"1511\":1}}],[\"增加新的子系统可能需要修改外观类或客户端的源代码\",{\"1\":{\"1104\":1}}],[\"增加新的具体建造者无须修改原有类库的代码\",{\"1\":{\"725\":1}}],[\"增加了能够体现协作关系的对象泳道\",{\"1\":{\"3455\":1}}],[\"增加了类使用过程中被误用的概率\",{\"1\":{\"2727\":1}}],[\"增加了类的个数\",{\"1\":{\"1514\":1}}],[\"增加了一个新功能\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"增加了客户端的复杂性\",{\"1\":{\"1941\":1}}],[\"增加了程序的可扩展性\",{\"1\":{\"1817\":1}}],[\"增加了系统的抽象性和理解难度\",{\"1\":{\"1225\":1,\"1287\":1}}],[\"增加了系统的复杂度\",{\"1\":{\"795\":1,\"1821\":1}}],[\"增加了理解上的困难\",{\"1\":{\"755\":1}}],[\"增加额外功能\",{\"1\":{\"752\":1}}],[\"增加代码阅读难度\",{\"1\":{\"496\":1}}],[\"得不偿失\",{\"1\":{\"3469\":1}}],[\"得到对应的一组\",{\"1\":{\"6219\":1}}],[\"得到对应迭代器\",{\"1\":{\"1539\":1}}],[\"得到以下实现\",{\"1\":{\"5456\":1}}],[\"得到不正确的结果\",{\"1\":{\"3356\":1}}],[\"得到女性的测评\",{\"1\":{\"2960\":1}}],[\"得到男性的测评\",{\"1\":{\"2960\":1}}],[\"得到他们对该歌手不同的评价\",{\"1\":{\"2955\":1}}],[\"得到一个请求\",{\"1\":{\"1972\":1}}],[\"得到\",{\"1\":{\"1436\":2}}],[\"得到的还是原数值\",{\"1\":{\"430\":1}}],[\"得找别人来帮忙\",{\"1\":{\"986\":1,\"987\":1}}],[\"代替\",{\"1\":{\"4481\":2}}],[\"代表了java中的所有类型\",{\"1\":{\"5233\":1}}],[\"代表了最佳的实践\",{\"1\":{\"2569\":1}}],[\"代表一种资源\",{\"1\":{\"3224\":1}}],[\"代表器皿里已经有实体结构的存在\",{\"1\":{\"2924\":1}}],[\"代表空器皿里可以放很多相同的东西\",{\"1\":{\"2923\":1}}],[\"代表两种不同的角色\",{\"1\":{\"2867\":1}}],[\"代表\",{\"1\":{\"2328\":1}}],[\"代理附加一些额外的处理功能\",{\"1\":{\"1923\":1}}],[\"代理不需要接口\",{\"1\":{\"1901\":1}}],[\"代理归属到动态代理\",{\"1\":{\"1877\":1}}],[\"代理也叫作子类代理\",{\"1\":{\"1877\":1}}],[\"代理基本介绍\",{\"0\":{\"1875\":1}}],[\"代理提交\",{\"1\":{\"1871\":1}}],[\"代理开始\",{\"1\":{\"1871\":1}}],[\"代理类所在包\",{\"1\":{\"1854\":1}}],[\"代理对象的生成\",{\"1\":{\"1851\":1}}],[\"代理对象再去调用目标对象的方法\",{\"1\":{\"1844\":1}}],[\"代理对象\",{\"1\":{\"1842\":1,\"1850\":1}}],[\"代理对象与目标对象要实现相同的接口\",{\"1\":{\"1838\":1}}],[\"代理对象可以扩展目标对象的功能\",{\"1\":{\"1816\":1}}],[\"代理\",{\"0\":{\"1874\":1},\"1\":{\"1813\":2,\"1830\":1,\"1852\":1,\"1876\":1,\"1880\":1,\"1881\":1}}],[\"代理模式实现\",{\"1\":{\"1898\":1}}],[\"代理模式应用实例\",{\"0\":{\"1897\":1}}],[\"代理模式都要求目标对象是实现一个接口\",{\"1\":{\"1876\":1}}],[\"代理模式的应用场景\",{\"0\":{\"1917\":1}}],[\"代理模式的主要角色如下\",{\"1\":{\"1827\":1}}],[\"代理模式的基本介绍\",{\"0\":{\"1808\":1}}],[\"代理模式示意图\",{\"1\":{\"1822\":1}}],[\"代理模式会造成系统设计中类的数量增加\",{\"1\":{\"1819\":1}}],[\"代理模式能将客户端与目标对象分离\",{\"1\":{\"1817\":1}}],[\"代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用\",{\"1\":{\"1815\":1}}],[\"代理模式有不同的形式\",{\"1\":{\"1813\":1}}],[\"代理模式\",{\"1\":{\"984\":1,\"1811\":1,\"1865\":1,\"1903\":4,\"2618\":1}}],[\"代码检查功能也是顶尖的\",{\"1\":{\"6974\":1}}],[\"代码覆盖率非常有用\",{\"1\":{\"6881\":1}}],[\"代码编写规范和标准静态分析工具\",{\"1\":{\"6306\":1}}],[\"代码编制更加工程化\",{\"1\":{\"2589\":1}}],[\"代码分析\",{\"0\":{\"6304\":1}}],[\"代码重用是值得提倡的\",{\"1\":{\"4871\":1}}],[\"代码重用性\",{\"1\":{\"2582\":1}}],[\"代码2\",{\"1\":{\"4852\":1}}],[\"代码1\",{\"1\":{\"4850\":1}}],[\"代码很简单\",{\"1\":{\"4640\":1}}],[\"代码规约检测插件\",{\"1\":{\"3508\":1}}],[\"代码即文档的观点是错误的\",{\"1\":{\"3473\":1}}],[\"代码冗余\",{\"1\":{\"3247\":1}}],[\"代码结构是自解释的\",{\"1\":{\"3219\":1}}],[\"代码结构清晰\",{\"1\":{\"2755\":1}}],[\"代码被注释掉有两种可能性\",{\"1\":{\"3217\":1}}],[\"代码与注释更新不同步\",{\"1\":{\"3215\":1}}],[\"代码修改的同时\",{\"1\":{\"3215\":1}}],[\"代码修改量可能就会很大\",{\"1\":{\"2704\":1}}],[\"代码格式\",{\"0\":{\"3019\":1}}],[\"代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语\",{\"1\":{\"2988\":1}}],[\"代码质量\",{\"1\":{\"6788\":1}}],[\"代码质量不怎么高\",{\"1\":{\"2755\":1}}],[\"代码质\",{\"1\":{\"2983\":1}}],[\"代码耦合也就相应的降低了\",{\"1\":{\"2776\":1}}],[\"代码是否需要解耦\",{\"0\":{\"2756\":1}}],[\"代码改动比较集中\",{\"1\":{\"2754\":1}}],[\"代码复用是减少开发成本最常用的方式之一\",{\"1\":{\"2788\":1}}],[\"代码复用我们可以通过组合和委托来实现\",{\"1\":{\"2740\":1}}],[\"代码复用\",{\"0\":{\"2786\":1},\"1\":{\"2740\":1,\"4999\":1}}],[\"代码复杂度\",{\"1\":{\"1261\":1}}],[\"代码中写分页查询逻辑时\",{\"1\":{\"3384\":1}}],[\"代码中容易equals\",{\"1\":{\"3251\":1}}],[\"代码中用到了\",{\"1\":{\"2705\":1}}],[\"代码中有一个\",{\"1\":{\"2389\":1}}],[\"代码逻辑分清红花和绿叶\",{\"1\":{\"3036\":1}}],[\"代码逻辑\",{\"1\":{\"2699\":1}}],[\"代码写着写着\",{\"1\":{\"2567\":1}}],[\"代码解释\",{\"1\":{\"2545\":1}}],[\"代码更有层次性\",{\"1\":{\"2417\":1}}],[\"代码低耦合\",{\"1\":{\"2175\":1}}],[\"代码容易维护\",{\"1\":{\"2170\":1}}],[\"代码类\",{\"1\":{\"1902\":1}}],[\"代码的缩进可以根据实际需要超过\",{\"1\":{\"4057\":1}}],[\"代码的列限制为\",{\"1\":{\"4028\":1}}],[\"代码的深度调用\",{\"1\":{\"3473\":1}}],[\"代码的逻辑一旦修改\",{\"1\":{\"3219\":1}}],[\"代码的字里行间流淌的是软件系统的血液\",{\"1\":{\"2983\":1}}],[\"代码的话\",{\"1\":{\"2735\":1}}],[\"代码的可读性非常重要\",{\"1\":{\"2358\":1}}],[\"代码的可维护性\",{\"1\":{\"1595\":1}}],[\"代码的内聚性更好\",{\"1\":{\"2175\":1}}],[\"代码的维护量很大\",{\"1\":{\"914\":1}}],[\"代码说明\",{\"1\":{\"1435\":1}}],[\"代码量跟创建对象的个数成正比\",{\"1\":{\"1341\":1}}],[\"代码抽离肯定比代码聚合更加难理解\",{\"1\":{\"755\":1}}],[\"代码示例请见\",{\"1\":{\"4024\":1}}],[\"代码示例\",{\"1\":{\"620\":1,\"848\":1,\"921\":1,\"1132\":1,\"2014\":1,\"2018\":1,\"2022\":1,\"2451\":1}}],[\"代码如下\",{\"1\":{\"556\":1,\"2525\":1}}],[\"代码实现非常简单\",{\"1\":{\"2700\":1}}],[\"代码实现\",{\"0\":{\"1701\":1},\"1\":{\"519\":1,\"539\":1,\"765\":1,\"775\":1,\"893\":1,\"1244\":1,\"1405\":1,\"1423\":1,\"1475\":1,\"1485\":1,\"1524\":1,\"1531\":1,\"1585\":1,\"1599\":1,\"1635\":1,\"1647\":1,\"1685\":1,\"1714\":1,\"1841\":1,\"1868\":1,\"1900\":1,\"1952\":1,\"1970\":1,\"2285\":1,\"2437\":1,\"2511\":1,\"2533\":1,\"2662\":1,\"2675\":1,\"2952\":1,\"2958\":1,\"4795\":1}}],[\"代码演示如下\",{\"1\":{\"5939\":1,\"5963\":1}}],[\"代码演示\",{\"0\":{\"100\":1},\"1\":{\"2143\":1}}],[\"代码块匹配添加空格上耗一天\",{\"1\":{\"6844\":1}}],[\"代码块包裹住可能抛出异常的部分\",{\"1\":{\"6817\":1}}],[\"代码块执行后或异常处理后自动关闭\",{\"1\":{\"4868\":1}}],[\"代码块中使用\",{\"1\":{\"6835\":1}}],[\"代码块中处理完异常后都会执行\",{\"1\":{\"4865\":1}}],[\"代码块中不同的是\",{\"1\":{\"4799\":1}}],[\"代码块成功执行之后还是你在\",{\"1\":{\"4865\":1}}],[\"代码块总是会被执行\",{\"1\":{\"4865\":1}}],[\"代码块不同\",{\"1\":{\"4865\":1}}],[\"代码块的最后部分\",{\"1\":{\"4862\":1}}],[\"代码块是有原因的\",{\"1\":{\"4862\":1}}],[\"代码块内代码会正常执行\",{\"1\":{\"4862\":1}}],[\"代码块退出时\",{\"1\":{\"4799\":1}}],[\"代码块\",{\"0\":{\"66\":1},\"1\":{\"4864\":1}}],[\"代码\",{\"1\":{\"53\":1,\"63\":1,\"397\":1,\"1171\":1,\"2755\":1}}],[\"克隆该实例\",{\"1\":{\"1772\":1}}],[\"克隆是会如何处理\",{\"1\":{\"1772\":1}}],[\"克隆羊案例\",{\"0\":{\"1755\":1}}],[\"克隆\",{\"1\":{\"970\":1,\"1774\":4}}],[\"高度模块化的类sinatra框架\",{\"1\":{\"6670\":1}}],[\"高度可扩展的web应用程序\",{\"1\":{\"6665\":1}}],[\"高度注意表达式\",{\"1\":{\"3188\":1}}],[\"高度注意map类集合k\",{\"1\":{\"3125\":1}}],[\"高度注意对父集合元素的增加或删除\",{\"1\":{\"3103\":1}}],[\"高吞吐量分布式消息系统\",{\"1\":{\"6499\":1}}],[\"高效的对象图形序列化框架\",{\"1\":{\"6607\":1}}],[\"高效利用内存的序列化函数库\",{\"1\":{\"6606\":1}}],[\"高效可扩展的单播\",{\"1\":{\"6496\":1}}],[\"高效机器学习库\",{\"1\":{\"6493\":1}}],[\"高效\",{\"1\":{\"6449\":1,\"6462\":1,\"6673\":1}}],[\"高效创建对象\",{\"1\":{\"969\":1}}],[\"高性能\",{\"1\":{\"6542\":1}}],[\"高性能应用中常见的数据结构和工具方法\",{\"1\":{\"6430\":1}}],[\"高性能计算\",{\"0\":{\"6428\":1}}],[\"高性能jdbc连接工具\",{\"1\":{\"6345\":1}}],[\"高可扩展内存数据网格\",{\"1\":{\"6385\":1}}],[\"高级时间和日期库\",{\"1\":{\"6359\":1}}],[\"高德地图服务等\",{\"1\":{\"3416\":1}}],[\"高并发服务器建议调小tcp协议的time\",{\"1\":{\"3443\":1}}],[\"高并发集群\",{\"1\":{\"3385\":1}}],[\"高并发时\",{\"1\":{\"3165\":1}}],[\"高聚合\",{\"1\":{\"2245\":1}}],[\"高层不应该依赖低层\",{\"1\":{\"2238\":1}}],[\"高层模块不应该依赖低层模块\",{\"1\":{\"2062\":1}}],[\"高层模块只需要知道产品的抽象类\",{\"1\":{\"1222\":1}}],[\"高内聚会让代码更加松耦合\",{\"1\":{\"2776\":1}}],[\"高内聚\",{\"1\":{\"2168\":1,\"2169\":1,\"2174\":2,\"2177\":1,\"2752\":1,\"2753\":2,\"2754\":2,\"2755\":1,\"2757\":1,\"2774\":2}}],[\"高配中配和低配\",{\"1\":{\"973\":1}}],[\"高楼的透明屋顶\",{\"1\":{\"709\":1}}],[\"高楼的砌墙\",{\"1\":{\"709\":1}}],[\"高楼的打地基\",{\"1\":{\"709\":1}}],[\"高楼\",{\"1\":{\"688\":1,\"713\":1}}],[\"吹出千万个\",{\"1\":{\"968\":1}}],[\"拔一根猴毛\",{\"1\":{\"968\":1}}],[\"原生开发库\",{\"0\":{\"6525\":1}}],[\"原始类型为object\",{\"1\":{\"5121\":1}}],[\"原始类型也变为object\",{\"1\":{\"5103\":1}}],[\"原始类型都是object\",{\"1\":{\"5102\":1}}],[\"原始类型object\",{\"1\":{\"5098\":1}}],[\"原始类型\",{\"1\":{\"5097\":1,\"5233\":1}}],[\"原始类型相等\",{\"1\":{\"5089\":1}}],[\"原始单词的大小写几乎完全被忽略\",{\"1\":{\"4204\":1}}],[\"原文链接\",{\"1\":{\"4704\":1,\"4993\":1,\"5247\":1,\"6138\":1}}],[\"原描述\",{\"1\":{\"4527\":1}}],[\"原来程序员离职\",{\"1\":{\"2576\":1}}],[\"原来的父类和子类都继承一个更通俗的基类\",{\"1\":{\"2121\":1}}],[\"原有的继承关系去掉\",{\"1\":{\"2121\":1}}],[\"原因是这样的\",{\"1\":{\"5163\":1}}],[\"原因是这个代码块的逻辑过于复杂\",{\"1\":{\"1253\":1}}],[\"原因可能为调用的外部依赖服务rt过高而导致系统假死\",{\"1\":{\"3456\":1}}],[\"原因就是类\",{\"1\":{\"2120\":1}}],[\"原型接口\",{\"1\":{\"1751\":1}}],[\"原型模式的注意事项和细节\",{\"0\":{\"1801\":1}}],[\"原型模式完成对象的创建\",{\"1\":{\"1774\":1}}],[\"原型模式解决克隆羊实例\",{\"0\":{\"1769\":1}}],[\"原型模式包含以下主要角色\",{\"1\":{\"1750\":1}}],[\"原型模式原理结构图\",{\"0\":{\"1749\":1}}],[\"原型模式是一种创建型设计模式\",{\"1\":{\"1740\":1}}],[\"原型模式基本介绍\",{\"0\":{\"1737\":1}}],[\"原型模式\",{\"1\":{\"966\":1,\"1739\":1,\"1768\":1,\"2608\":1}}],[\"原则在新窗口打开\",{\"1\":{\"5809\":1}}],[\"原则就是\",{\"1\":{\"2530\":1}}],[\"原则\",{\"1\":{\"571\":1,\"1212\":3,\"1215\":1,\"1708\":1,\"1721\":1,\"1806\":1,\"1994\":1,\"2001\":1,\"2147\":1,\"2550\":1,\"3111\":1,\"5808\":1}}],[\"单独的\",{\"1\":{\"6859\":1}}],[\"单独的对象\",{\"1\":{\"1876\":1}}],[\"单点登录\",{\"1\":{\"6603\":1}}],[\"单元就是人为规定的最小的被测功能模块\",{\"1\":{\"4433\":1}}],[\"单元测试中的标准工具\",{\"1\":{\"6957\":1}}],[\"单元测试不是越多越好\",{\"1\":{\"4451\":1}}],[\"单元测试不负责检查跨类或者跨系统的交互逻辑\",{\"1\":{\"3306\":1}}],[\"单元测试要写多细\",{\"0\":{\"4450\":1}}],[\"单元测试也差不多完成了\",{\"1\":{\"4447\":1}}],[\"单元测试就是一种无价的文档\",{\"1\":{\"4442\":1}}],[\"单元测试可以有效地降低程序出现bug的机率\",{\"1\":{\"4438\":1}}],[\"单元测试是在软件开发过程中要进行的最低级别的测试活动\",{\"1\":{\"4433\":1}}],[\"单元测试是可以重复执行的\",{\"1\":{\"3305\":1}}],[\"单元测试与线上故障没有辩证关系\",{\"1\":{\"3329\":1}}],[\"单元测试代码有助于理解代码的功能和需求\",{\"1\":{\"4454\":1}}],[\"单元测试代码不需要维护\",{\"1\":{\"3328\":1}}],[\"单元测试代码是多余的\",{\"1\":{\"3327\":1}}],[\"单元测试代码必须写在如下工程目录\",{\"1\":{\"3308\":1}}],[\"单元测试作为一种质量保障手段\",{\"1\":{\"3319\":1}}],[\"单元测试最好覆盖所有测试用例\",{\"1\":{\"3318\":1}}],[\"单元测试通常会被放到持续集成中\",{\"1\":{\"3305\":1}}],[\"单元测试用例之间决不能互相调用\",{\"1\":{\"3304\":1}}],[\"单元测试必须使用assert来验证\",{\"1\":{\"3303\":1}}],[\"单元测试应该是全自动执行的\",{\"1\":{\"3303\":1}}],[\"单元测试在线上运行时\",{\"1\":{\"3299\":1}}],[\"单元测试等知识丰富立体地呈现出来\",{\"1\":{\"2983\":1}}],[\"单元测试\",{\"0\":{\"3298\":1},\"1\":{\"2982\":1,\"4430\":1,\"4433\":1}}],[\"单行格式可以被替换\",{\"1\":{\"4247\":1}}],[\"单行字符限制\",{\"1\":{\"3980\":1,\"3985\":1}}],[\"单行字符数限制不超过\",{\"1\":{\"3030\":1}}],[\"单个\",{\"1\":{\"4069\":1}}],[\"单个空行也可以出现在任何需要提高代码可读性的地方\",{\"1\":{\"4066\":1}}],[\"单个空行总是出现在以下情况中\",{\"1\":{\"4061\":1}}],[\"单个方法的总行数不超过\",{\"1\":{\"3036\":1}}],[\"单一原则最易理解却是最难实现的一条规则\",{\"1\":{\"3463\":1}}],[\"单一职责原则主要是约束类\",{\"1\":{\"2041\":1}}],[\"单一职责原则注重的是职责\",{\"1\":{\"2040\":1}}],[\"单一职责原则注意事项和细节\",{\"0\":{\"2026\":1}}],[\"单一职责原则的核心就是控制类的粒度大小\",{\"1\":{\"2008\":1}}],[\"单一职责原则的优点\",{\"0\":{\"2007\":1}}],[\"单一职责原则规定一个类应该有且仅有一个引起它变化的原因\",{\"1\":{\"2001\":1}}],[\"单一职责原则\",{\"0\":{\"1999\":1},\"1\":{\"1992\":1,\"2001\":1,\"2224\":1,\"2240\":1,\"2422\":1,\"2775\":1}}],[\"单位\",{\"1\":{\"3442\":1}}],[\"单表行数超过\",{\"1\":{\"3365\":1}}],[\"单表时自增\",{\"1\":{\"3359\":1}}],[\"单测的基本目标\",{\"1\":{\"3309\":1}}],[\"单测粒度至多是类级别\",{\"1\":{\"3306\":1}}],[\"单词之间以下划线分隔\",{\"1\":{\"4177\":1}}],[\"单词如果需要分隔\",{\"1\":{\"3224\":1}}],[\"单词间用下划线隔开\",{\"1\":{\"2991\":1,\"3005\":1}}],[\"单向的关联用\",{\"1\":{\"2867\":1}}],[\"单例工厂类都需要注意\",{\"1\":{\"3155\":1}}],[\"单例\",{\"1\":{\"2408\":1}}],[\"单例除了我们之前讲到的使用方法之外\",{\"1\":{\"2380\":1}}],[\"单例不支持有参数的构造函数\",{\"0\":{\"2367\":1},\"1\":{\"2368\":1}}],[\"单例类中对象的唯一性的作用范围是进程内的\",{\"1\":{\"2390\":1}}],[\"单例类在老进程中存在且只能存在一个对象\",{\"1\":{\"2390\":1}}],[\"单例类在某些情况下会影响代码的扩展性\",{\"1\":{\"2363\":1}}],[\"单例类只能有一个对象实例\",{\"1\":{\"2360\":1}}],[\"单例类不需要显示创建\",{\"1\":{\"2358\":1}}],[\"单例类也可以被继承\",{\"1\":{\"2356\":1}}],[\"单例会隐藏类之间的依赖关系\",{\"0\":{\"2357\":1}}],[\"单例这种设计模式对于其中的抽象\",{\"1\":{\"2352\":1}}],[\"单例对代码的可测试性不友好\",{\"0\":{\"2364\":1}}],[\"单例对代码的扩展性不友好\",{\"0\":{\"2359\":1}}],[\"单例对继承\",{\"1\":{\"2356\":1}}],[\"单例对\",{\"0\":{\"2351\":1}}],[\"单例存在哪些问题\",{\"0\":{\"2349\":1}}],[\"单例设计模式八种方式\",{\"0\":{\"2270\":1}}],[\"单例设计模式\",{\"1\":{\"2259\":1}}],[\"单例设计模式介绍\",{\"0\":{\"2257\":1}}],[\"单例模式创建的对象是进程唯一的\",{\"1\":{\"2387\":1}}],[\"单例模式书写简洁\",{\"1\":{\"2350\":1}}],[\"单例模式可以保证在一个\",{\"1\":{\"2341\":1}}],[\"单例模式可以保证内存里只有一个实例\",{\"1\":{\"2263\":1}}],[\"单例模式的使用会影响到代码的可测试性\",{\"1\":{\"2365\":1}}],[\"单例模式的应用场景主要有以下几个方面\",{\"1\":{\"2341\":1}}],[\"单例模式的应用场景\",{\"0\":{\"2340\":1}}],[\"单例模式的功能代码通常写在一个类中\",{\"1\":{\"2269\":1}}],[\"单例模式使用的场景\",{\"1\":{\"2339\":1}}],[\"单例模式保证了\",{\"1\":{\"2337\":1}}],[\"单例模式注意事项和细节说明\",{\"0\":{\"2336\":1}}],[\"单例模式jdk应用\",{\"0\":{\"2333\":1}}],[\"单例模式有八种方式\",{\"1\":{\"2271\":1}}],[\"单例模式不利于代码调试\",{\"1\":{\"2268\":1}}],[\"单例模式一般没有接口\",{\"1\":{\"2267\":1}}],[\"单例模式设置全局访问点\",{\"1\":{\"2265\":1}}],[\"单例模式在现实生活中的应用也非常广泛\",{\"1\":{\"2261\":1}}],[\"单例模式\",{\"1\":{\"961\":1,\"2605\":1}}],[\"单品咖啡\",{\"1\":{\"896\":1}}],[\"体现了封装的思想\",{\"1\":{\"2039\":1}}],[\"体系中\",{\"1\":{\"937\":1}}],[\"体型\",{\"1\":{\"662\":1}}],[\"费用\",{\"1\":{\"928\":5}}],[\"费用1=\",{\"1\":{\"928\":1}}],[\"份巧克力\",{\"1\":{\"928\":1}}],[\"牛奶\",{\"1\":{\"926\":1}}],[\"巧克力\",{\"1\":{\"926\":1}}],[\"69912579\",{\"1\":{\"6273\":1}}],[\"6937364\",{\"1\":{\"6135\":1}}],[\"6012105\",{\"1\":{\"5815\":1}}],[\"6及之前\",{\"1\":{\"5321\":1}}],[\"6155636\",{\"1\":{\"4989\":1}}],[\"63\",{\"1\":{\"4920\":1}}],[\"62\",{\"1\":{\"4374\":1,\"4380\":1}}],[\"628\",{\"1\":{\"3203\":4}}],[\"68\",{\"1\":{\"4374\":1}}],[\"6475334\",{\"1\":{\"5814\":1}}],[\"64\",{\"1\":{\"3427\":1,\"5259\":1,\"5260\":1}}],[\"6f\",{\"1\":{\"3051\":1}}],[\"666\",{\"1\":{\"2997\":1}}],[\"65535\",{\"1\":{\"3366\":1}}],[\"65\",{\"1\":{\"2193\":1,\"4920\":2}}],[\"6\",{\"1\":{\"924\":1,\"2178\":1,\"2469\":1,\"2848\":1,\"3006\":1,\"3076\":1,\"3093\":1,\"3276\":1,\"3504\":1,\"3521\":1,\"3528\":1,\"4088\":2,\"4407\":1,\"4943\":2,\"4957\":1,\"4963\":4,\"4969\":4,\"4978\":2,\"5062\":1,\"5502\":1,\"6168\":2,\"6193\":2,\"6701\":1,\"6906\":1}}],[\"咖啡机开始\",{\"1\":{\"1589\":1}}],[\"咖啡机\",{\"1\":{\"1588\":1,\"1603\":1}}],[\"咖啡代码\",{\"1\":{\"923\":1}}],[\"咖啡种类\",{\"1\":{\"896\":1}}],[\"描述了出现在一段编码中的\",{\"1\":{\"4708\":1}}],[\"描述了产品的主要特性和功能\",{\"1\":{\"1231\":1,\"1291\":1}}],[\"描述在使用\",{\"1\":{\"4605\":1}}],[\"描述注解保留的时间范围\",{\"1\":{\"4592\":1}}],[\"描述注解的使用范围\",{\"1\":{\"4588\":1}}],[\"描述进行修正\",{\"1\":{\"3504\":1}}],[\"描述错误\",{\"1\":{\"3491\":1}}],[\"描述=\",{\"1\":{\"928\":1}}],[\"描述\",{\"1\":{\"922\":1,\"928\":5,\"3494\":1,\"4342\":1}}],[\"较高语法级别\",{\"1\":{\"4041\":1}}],[\"较低的开发成本意味着能够留出更多的营销资金\",{\"1\":{\"2787\":1}}],[\"较少的开发时间意味着可以比竞争对手更早进入市场\",{\"1\":{\"2787\":1}}],[\"较好\",{\"0\":{\"909\":1}}],[\"较差\",{\"0\":{\"900\":1},\"1\":{\"3966\":1}}],[\"豆浆\",{\"1\":{\"897\":1,\"926\":1}}],[\"调度作业和一次性任务\",{\"1\":{\"6303\":1}}],[\"调度反射方法\",{\"1\":{\"6130\":1}}],[\"调整附近代码行中的空格\",{\"1\":{\"4096\":1}}],[\"调大服务器所支持的最大文件句柄数\",{\"1\":{\"3444\":1}}],[\"调试多租户系统的框架和环境\",{\"1\":{\"6652\":1}}],[\"调试时很有用\",{\"1\":{\"4759\":1}}],[\"调试时逻辑可能比较复杂\",{\"1\":{\"1982\":1}}],[\"调试不方便\",{\"1\":{\"1982\":1}}],[\"调停模式\",{\"1\":{\"1566\":1}}],[\"调暗灯光\",{\"1\":{\"1117\":1}}],[\"调味品的价格\",{\"1\":{\"926\":1}}],[\"调料组合会造成类的倍增\",{\"1\":{\"910\":1}}],[\"调料组合\",{\"1\":{\"899\":1}}],[\"调料\",{\"1\":{\"897\":1,\"907\":1}}],[\"调用hasnext方法的时候会去加载配置文件进行解析\",{\"1\":{\"6262\":1}}],[\"调用时\",{\"1\":{\"6112\":1}}],[\"调用method\",{\"0\":{\"6106\":1}}],[\"调用具体方法的无参构造方法\",{\"1\":{\"6069\":1}}],[\"调用具体构件角色的方法\",{\"1\":{\"894\":1}}],[\"调用无参构造器\",{\"1\":{\"6065\":1}}],[\"调用无参构造器创建此\",{\"1\":{\"5912\":1}}],[\"调用next方法的时候进行实例化并缓存\",{\"1\":{\"6262\":1}}],[\"调用native方法\",{\"1\":{\"6086\":1}}],[\"调用native方法进行获取class信息\",{\"1\":{\"6059\":1}}],[\"调用null对象的实例方法\",{\"1\":{\"4821\":1}}],[\"调用super\",{\"1\":{\"5726\":1}}],[\"调用父类构造\",{\"1\":{\"5723\":1}}],[\"调用泛型方法语法格式\",{\"1\":{\"5025\":1}}],[\"调用14位置的异常处理者\",{\"1\":{\"4965\":1}}],[\"调用第三方服务出\",{\"1\":{\"3841\":1}}],[\"调用第三方服务出错是一级\",{\"1\":{\"3260\":1}}],[\"调用第三方服务出错\",{\"1\":{\"3260\":1}}],[\"调用远程操作必须有超时设置\",{\"1\":{\"3441\":1}}],[\"调用方\",{\"1\":{\"6242\":1}}],[\"调用方法必须遵循任何可查异常的处理和声明规则\",{\"1\":{\"4751\":1}}],[\"调用方如果没有捕获到就会产生运行时错误\",{\"1\":{\"3278\":1}}],[\"调用方一旦在返回的集合中进行了添加元素的操作\",{\"1\":{\"3102\":1}}],[\"调用频次低的方法\",{\"1\":{\"3205\":1}}],[\"调用不成功时\",{\"1\":{\"3058\":1}}],[\"调用当前状态的\",{\"1\":{\"2452\":1}}],[\"调用完成的功能就会很明确\",{\"1\":{\"2124\":1}}],[\"调用多个类只需要一个接口类\",{\"1\":{\"2083\":1}}],[\"调用目标对象的方法\",{\"1\":{\"1873\":1}}],[\"调用到被代理对象的方法\",{\"1\":{\"1844\":1}}],[\"调用的rpc服务\",{\"1\":{\"3058\":1}}],[\"调用的时候通过调用代理对象的方法来调用目标对象\",{\"1\":{\"1837\":1}}],[\"调用的中介者对象的\",{\"1\":{\"1603\":1}}],[\"调用引用类型的\",{\"1\":{\"1799\":1}}],[\"调用接入方的\",{\"1\":{\"1702\":1}}],[\"调用相关表达式类的解释方法\",{\"1\":{\"1476\":1}}],[\"调用\",{\"1\":{\"770\":1,\"789\":1,\"1702\":1,\"1718\":2,\"2152\":1,\"2323\":1,\"2748\":1,\"5429\":1,\"6076\":1,\"6112\":1}}],[\"调用者通过它访问具体工厂的工厂方法\",{\"1\":{\"1229\":1}}],[\"调用者只要调用命令对象的\",{\"1\":{\"793\":1}}],[\"调用者类\",{\"1\":{\"780\":1}}],[\"调用者执行命令command\",{\"1\":{\"766\":1}}],[\"调用者\",{\"1\":{\"762\":1,\"766\":1}}],[\"调用下面的方法\",{\"1\":{\"442\":1}}],[\"美式咖啡\",{\"1\":{\"896\":1}}],[\"意味着该变量的值在初始化后不能被改变\",{\"1\":{\"5660\":1}}],[\"意味着内存占用越小\",{\"1\":{\"4875\":1}}],[\"意味着任意的\",{\"1\":{\"4028\":1}}],[\"意思是直接访问并调用父类中的方法\",{\"1\":{\"5722\":1}}],[\"意思是获取父类中xxx的变量或引用\",{\"1\":{\"5721\":1}}],[\"意思是在测试类里所有用例运行之前\",{\"1\":{\"4298\":1}}],[\"意思是当天所在的周属于的年份\",{\"1\":{\"3078\":1}}],[\"意思的注释都是可行的\",{\"1\":{\"4124\":1}}],[\"意大利咖啡\",{\"1\":{\"924\":1}}],[\"意大利浓咖啡\",{\"1\":{\"896\":1}}],[\"意不意外\",{\"1\":{\"456\":1}}],[\"耦合小\",{\"1\":{\"2754\":1}}],[\"耦合关系\",{\"1\":{\"2197\":1}}],[\"耦合\",{\"1\":{\"2173\":1}}],[\"耦合的方式很多\",{\"1\":{\"2162\":1}}],[\"耦合度越大\",{\"1\":{\"2156\":1}}],[\"耦合度高\",{\"1\":{\"885\":1}}],[\"耦合性\",{\"1\":{\"1569\":1,\"2581\":1}}],[\"耦合性增强了\",{\"1\":{\"700\":1}}],[\"耦合松散\",{\"1\":{\"1566\":1}}],[\"比gson与jackson组合方式效果更好\",{\"1\":{\"6460\":1}}],[\"比较好的替代品\",{\"1\":{\"6822\":1}}],[\"比较好的方式就是使你自定义的异常继承自运行时异常来取而代之\",{\"1\":{\"6817\":1}}],[\"比较时的区别\",{\"1\":{\"5683\":1}}],[\"比较\",{\"1\":{\"5383\":1}}],[\"比较合适\",{\"1\":{\"5354\":1}}],[\"比较容易想到\",{\"1\":{\"2077\":1}}],[\"比atomiclong性能更好\",{\"1\":{\"3180\":1}}],[\"比继承灵活\",{\"1\":{\"879\":1}}],[\"比如和\",{\"1\":{\"6960\":1}}],[\"比如配置\",{\"1\":{\"6647\":1}}],[\"比如配置信息类\",{\"1\":{\"2350\":1}}],[\"比如me\",{\"1\":{\"6232\":1}}],[\"比如接口java\",{\"1\":{\"6229\":1}}],[\"比如java\",{\"1\":{\"6141\":1,\"6232\":1}}],[\"比如学生和学校就是一种关联关系\",{\"1\":{\"5796\":1}}],[\"比如公司和部门\",{\"1\":{\"5792\":1}}],[\"比如空指针\",{\"1\":{\"5717\":1}}],[\"比如方法区\",{\"1\":{\"5316\":1}}],[\"比如说调用add方法\",{\"1\":{\"5131\":1}}],[\"比如说成员变量是某个数组\",{\"1\":{\"1781\":1}}],[\"比如形如<t\",{\"1\":{\"5082\":1}}],[\"比如这样的代码\",{\"1\":{\"4960\":1}}],[\"比如上面用到的自定义myexception\",{\"1\":{\"4759\":1}}],[\"比如自定义的所有http请求都会经过的拦截器\",{\"1\":{\"4455\":1}}],[\"比如按照方法的名字顺序\",{\"1\":{\"4418\":1}}],[\"比如数据库连接的关闭等\",{\"1\":{\"4332\":1}}],[\"比如两个用例都需要读取数据库里的用户a信息\",{\"1\":{\"4305\":1}}],[\"比如已下单与已收货这两种状态之间是不可能有直接转换关系的\",{\"1\":{\"3452\":1}}],[\"比如查看他人的私信内容\",{\"1\":{\"3331\":1}}],[\"比如cdn服务出错\",{\"1\":{\"3254\":1}}],[\"比如参数错误\",{\"1\":{\"3254\":1}}],[\"比如修改helper的属性声明为private\",{\"1\":{\"3178\":1}}],[\"比如成功\",{\"1\":{\"2955\":1}}],[\"比如类\",{\"1\":{\"2809\":1}}],[\"比如以下几种场景\",{\"1\":{\"2796\":1}}],[\"比如观察者模式\",{\"1\":{\"2784\":1}}],[\"比如系统\",{\"1\":{\"2762\":1}}],[\"比如下面这样一段代码\",{\"1\":{\"2747\":1}}],[\"比如企鹅\",{\"1\":{\"2727\":1}}],[\"比如鸵鸟就不会飞\",{\"1\":{\"2725\":1}}],[\"比如麻雀\",{\"1\":{\"2724\":1}}],[\"比如服务端与客户端之间的\",{\"1\":{\"2694\":1}}],[\"比如叫\",{\"1\":{\"2515\":1}}],[\"比如野鸭\",{\"1\":{\"2515\":1}}],[\"比如只能创建\",{\"1\":{\"2408\":1}}],[\"比如文件地址\",{\"1\":{\"2406\":1}}],[\"比如文件\",{\"1\":{\"2403\":1}}],[\"比如对\",{\"1\":{\"2382\":1}}],[\"比如对学院\",{\"1\":{\"843\":1}}],[\"比如我们创建一个连接池的单例对象\",{\"1\":{\"2368\":1}}],[\"比如我们这时要新增加一个图形种类三角形\",{\"1\":{\"2148\":1}}],[\"比如使用继承会给程序带来\",{\"1\":{\"2099\":1}}],[\"比如发布到自己的网站或第三方\",{\"1\":{\"1688\":1}}],[\"比如流程为\",{\"1\":{\"1589\":1}}],[\"比如围棋\",{\"1\":{\"1385\":1}}],[\"比如释放数据库连接池\",{\"1\":{\"1345\":1}}],[\"比如北京的奶酪\",{\"1\":{\"1236\":1}}],[\"比如在高层接口提供四个方法\",{\"1\":{\"1123\":1}}],[\"比如咖啡的名字\",{\"1\":{\"904\":1}}],[\"比如很多方法和属性都不一样\",{\"1\":{\"868\":1}}],[\"比如新增\",{\"1\":{\"818\":1}}],[\"比如日志记录\",{\"1\":{\"752\":1}}],[\"比如普通房\",{\"1\":{\"688\":1}}],[\"比如\",{\"1\":{\"607\":1,\"645\":1,\"783\":2,\"1126\":1,\"1191\":1,\"1238\":1,\"1329\":1,\"1340\":1,\"1344\":1,\"1345\":1,\"1388\":1,\"1444\":1,\"1478\":1,\"1503\":1,\"1570\":1,\"1912\":1,\"1962\":1,\"2260\":1,\"2339\":1,\"2354\":1,\"2365\":1,\"2366\":1,\"2378\":1,\"2380\":1,\"2383\":1,\"2388\":1,\"2389\":3,\"2674\":1,\"2693\":2,\"2704\":1,\"2705\":1,\"2707\":2,\"2708\":1,\"2712\":1,\"2740\":1,\"2743\":1,\"2744\":1,\"2745\":1,\"2758\":1,\"2765\":1,\"2802\":1,\"2982\":1,\"2983\":1,\"3156\":1,\"3224\":1,\"3229\":1,\"3265\":2,\"3274\":1,\"3456\":1,\"3464\":1,\"3520\":3,\"3524\":3,\"3532\":4,\"3544\":1,\"4717\":1,\"4848\":1,\"4849\":1,\"5105\":1,\"5182\":1,\"5630\":1,\"6907\":1}}],[\"动的字段\",{\"1\":{\"3402\":1}}],[\"动态添加新插件和停止现有插件\",{\"1\":{\"6210\":1}}],[\"动态链接失败等\",{\"1\":{\"5719\":1}}],[\"动态创建或修改类时\",{\"1\":{\"3274\":1}}],[\"动态创建与size相同的数组\",{\"1\":{\"3106\":1}}],[\"动态行为图\",{\"1\":{\"2813\":1}}],[\"动态改变某个对象的行为\",{\"1\":{\"2541\":1}}],[\"动态的在内存中构建代理对象\",{\"1\":{\"1851\":1}}],[\"动态的给一个对象扩展功能\",{\"1\":{\"879\":1}}],[\"动态代理类\",{\"1\":{\"1870\":1}}],[\"动态代理应用实例\",{\"0\":{\"1864\":1}}],[\"动态代理也叫做\",{\"1\":{\"1852\":1}}],[\"动态代理基本介绍\",{\"0\":{\"1849\":1}}],[\"动态代理\",{\"0\":{\"1848\":1},\"1\":{\"1813\":1,\"1860\":1,\"1894\":1}}],[\"动态地给对象增加一些职责\",{\"1\":{\"2614\":1}}],[\"动态地给该对象增加一些职责\",{\"1\":{\"877\":1}}],[\"动态地根据配置文件来加载类\",{\"1\":{\"1364\":1}}],[\"动态地加载类\",{\"1\":{\"1341\":1}}],[\"动作的执行者是每个厂商的一个家电产品\",{\"1\":{\"772\":1}}],[\"动作的执行者\",{\"1\":{\"771\":1}}],[\"动作的请求者是手机\",{\"1\":{\"772\":1}}],[\"动作的请求者\",{\"1\":{\"771\":1}}],[\"指向当前\",{\"1\":{\"6083\":1}}],[\"指向的是堆中的同一个对象才会返回\",{\"1\":{\"5646\":1}}],[\"指针\",{\"1\":{\"5743\":1}}],[\"指一个方法与已经存在的方法名称上相同\",{\"1\":{\"5412\":1}}],[\"指子类实现了一个与父类在方法声明上完全相同的一个方法\",{\"1\":{\"5406\":1}}],[\"指出不应该由应用程序处理的严重问题\",{\"1\":{\"4906\":1}}],[\"指代的内容也不同\",{\"1\":{\"4460\":1}}],[\"指类或者普通方法或者构造方法的主体\",{\"1\":{\"4003\":1}}],[\"指南说明\",{\"0\":{\"3939\":1}}],[\"指位于英国伦敦郊区的皇家格林尼治天文台的标准时间\",{\"1\":{\"3548\":1}}],[\"指定特定的二进制格式\",{\"1\":{\"5668\":1}}],[\"指定为number\",{\"1\":{\"5112\":1}}],[\"指定了integer\",{\"1\":{\"5112\":2}}],[\"指定泛型的时候\",{\"1\":{\"5112\":1}}],[\"指定上限\",{\"1\":{\"5052\":1}}],[\"指定类型的注解数组\",{\"1\":{\"4632\":1}}],[\"指定类型的注解\",{\"1\":{\"4628\":1}}],[\"指定一个特殊的运行器\",{\"1\":{\"4487\":1}}],[\"指定一个误差范围\",{\"1\":{\"3050\":1}}],[\"指定定参数运行器\",{\"1\":{\"4407\":1}}],[\"指定集合大小\",{\"1\":{\"3504\":1}}],[\"指定集合初始值大小\",{\"1\":{\"3123\":1}}],[\"指定具体的处理方式\",{\"1\":{\"2546\":1}}],[\"指定当前目标对象使用的类加载器\",{\"1\":{\"1871\":1}}],[\"指的就是\",{\"1\":{\"2408\":1}}],[\"指的是\",{\"1\":{\"2408\":1}}],[\"指的是线程内唯一\",{\"1\":{\"2394\":1,\"2401\":1}}],[\"指的是进程内唯一\",{\"1\":{\"2394\":1,\"2401\":1}}],[\"指为了提高系统的性能\",{\"1\":{\"1924\":1}}],[\"指多个对象间存在一对多的依赖关系\",{\"1\":{\"1668\":1}}],[\"指语言的语法规则\",{\"1\":{\"1456\":1}}],[\"指\",{\"1\":{\"877\":1}}],[\"指挥者类针对抽象建造者类编程\",{\"1\":{\"725\":1}}],[\"指挥者\",{\"1\":{\"678\":1,\"684\":1}}],[\"所做的\",{\"1\":{\"6982\":1}}],[\"所在的\",{\"1\":{\"6242\":1,\"6247\":1}}],[\"所反映的方法可能是类方法或实例方法\",{\"1\":{\"5995\":1}}],[\"所花费时间大约是建立异常对象的4倍\",{\"1\":{\"4984\":1}}],[\"所提倡的\",{\"1\":{\"4446\":1}}],[\"所提出的\",{\"1\":{\"2574\":1}}],[\"所请求的资源发送到客户端\",{\"1\":{\"3226\":1}}],[\"所谓\",{\"1\":{\"4481\":1}}],[\"所谓双分派是指不管类怎么变化\",{\"1\":{\"2967\":1}}],[\"所谓类的\",{\"1\":{\"2259\":1}}],[\"所谓松耦合是说\",{\"1\":{\"2172\":1}}],[\"所谓高内聚\",{\"1\":{\"2170\":1}}],[\"所有声明的\",{\"1\":{\"5906\":1}}],[\"所有具有相同元素类型和维数的数组都共享该\",{\"1\":{\"5824\":1}}],[\"所有非静态导入归一组\",{\"1\":{\"3989\":1}}],[\"所有静态导入归一组\",{\"1\":{\"3988\":1}}],[\"所有可交互的控件元素必须能被tab键聚焦\",{\"1\":{\"3475\":1}}],[\"所有版本仲裁放在<dependencymanagement>语句块中\",{\"1\":{\"3435\":1}}],[\"所有pom文件中的依赖声明放在<dependencies>语句块中\",{\"1\":{\"3435\":1}}],[\"所有此类的对象\",{\"1\":{\"3182\":1}}],[\"所有此类实例共享此静态变量\",{\"1\":{\"3182\":1}}],[\"所有service和dao的getter\",{\"1\":{\"3068\":1}}],[\"所有整型包装类对象之间值的比较\",{\"1\":{\"3046\":1}}],[\"所有编程相关的命名严禁使用拼音与英文混合的方式\",{\"1\":{\"2987\":1}}],[\"所有编程相关的命名均不能以下划线或美元符号开始\",{\"1\":{\"2986\":1}}],[\"所有的配置文件只会加载一次\",{\"1\":{\"6263\":1}}],[\"所有的对象都继承自\",{\"1\":{\"5568\":1}}],[\"所有的字符存储与表示\",{\"1\":{\"3391\":1}}],[\"所有的key必须为小写字母开始的lowercamelcase风格\",{\"1\":{\"3227\":1}}],[\"所有的枚举类型字段必须要有注释\",{\"1\":{\"3213\":1}}],[\"所有的类都必须添加创建者和创建日期\",{\"1\":{\"3210\":1}}],[\"所有的抽象方法\",{\"1\":{\"3209\":1}}],[\"所有的局部变量使用基本数据类型\",{\"1\":{\"3058\":1}}],[\"所有的pojo类属性必须使用包装数据类型\",{\"1\":{\"3058\":1}}],[\"所有的覆写方法\",{\"1\":{\"3041\":1}}],[\"所有的描述由事物\",{\"1\":{\"2822\":1}}],[\"所有的工厂类都需要进行修改\",{\"1\":{\"1287\":1}}],[\"所有调用这个接口的代码都要做相应的改动\",{\"1\":{\"2765\":1}}],[\"所有更细分的鸟\",{\"1\":{\"2724\":1}}],[\"所有引用基类的地方必须能透明地使用其子类的对象\",{\"1\":{\"2104\":1}}],[\"所有涉及到子类的功能都有可能产生故障\",{\"1\":{\"2099\":1}}],[\"所有依赖于它的对象都得到通知并被自动更新\",{\"1\":{\"1668\":1}}],[\"所有状态信息都保存在备忘录中\",{\"1\":{\"1624\":1}}],[\"所有这些都可以考虑使用职责链模式来实现\",{\"1\":{\"1928\":1}}],[\"所有这些都可以釆用装饰器模式来实现\",{\"1\":{\"876\":1}}],[\"所有这些\",{\"1\":{\"1570\":1}}],[\"所有朋友的电话\",{\"1\":{\"1568\":1}}],[\"所以我写了很多\",{\"1\":{\"6949\":1}}],[\"所以我们可以看到serviceloader不是实例化以后\",{\"1\":{\"6262\":1}}],[\"所以我们可以看到\",{\"1\":{\"4697\":1}}],[\"所以我们可以使用\",{\"1\":{\"1710\":1}}],[\"所以对\",{\"1\":{\"6830\":1}}],[\"所以对于频繁改变内容的字符串避免使用string\",{\"1\":{\"5687\":1}}],[\"所以推荐使用我所说的建议的某些部分\",{\"1\":{\"6744\":1}}],[\"所以会使用独立的类加载器\",{\"1\":{\"6128\":1}}],[\"所以会有很多代理类\",{\"1\":{\"1847\":1}}],[\"所以查找性能会随类的大小方法多少而变化\",{\"1\":{\"6124\":1}}],[\"所以使用框架还是很有帮助的\",{\"1\":{\"6858\":1}}],[\"所以使用其独立的类加载器\",{\"1\":{\"6121\":1}}],[\"所以使用反射来初始化泛型数组算是优雅实现\",{\"1\":{\"5206\":1}}],[\"所以反射是保证线程安全的\",{\"1\":{\"6076\":1}}],[\"所以函数返回值是在finally执行前确定的\",{\"1\":{\"5711\":1}}],[\"所以通常需要重写该方法来提供逻辑一致性的比较\",{\"1\":{\"5646\":1}}],[\"所以通过反射我们就可以存储字符串了\",{\"1\":{\"5103\":1}}],[\"所以占用的空间更少\",{\"1\":{\"5615\":1}}],[\"所以必须要进行强制转换\",{\"1\":{\"5611\":1}}],[\"所以将\",{\"1\":{\"5609\":1}}],[\"所以静态方法必须有实现\",{\"1\":{\"5488\":1}}],[\"所以从这个角度\",{\"1\":{\"5315\":1}}],[\"所以java为了避免这样的情况\",{\"1\":{\"5227\":1}}],[\"所以java不允许这么干\",{\"1\":{\"5144\":1}}],[\"所以当然是错误的\",{\"1\":{\"5211\":1}}],[\"所以如果你还没有用\",{\"1\":{\"6930\":1}}],[\"所以如果\",{\"1\":{\"5194\":1}}],[\"所以就会出现\",{\"1\":{\"5194\":1}}],[\"所以上面代码可以给\",{\"1\":{\"5194\":1}}],[\"所以自然就不行了\",{\"1\":{\"5189\":1}}],[\"所以编译器为了实现泛型的多态允许自己做这个看起来\",{\"1\":{\"5180\":1}}],[\"所以父类编译之后会变成下面的样子\",{\"1\":{\"5155\":1}}],[\"所以为了避免这种极易出现的错误\",{\"1\":{\"5140\":1}}],[\"所以list1引用能完成泛型类型的检查\",{\"1\":{\"5131\":1}}],[\"所以可以用于两个不同对象\",{\"1\":{\"5646\":1}}],[\"所以可以为integer和float\",{\"1\":{\"5112\":1}}],[\"所以可以愉快地将string对象作为key来使用\",{\"1\":{\"3089\":1}}],[\"所以只能为integer类型或者其子类\",{\"1\":{\"5112\":1}}],[\"所以取同一父类的最小级\",{\"1\":{\"5112\":2}}],[\"所以取月份要+1\",{\"1\":{\"1313\":1}}],[\"所以t为integer类型\",{\"1\":{\"5112\":1}}],[\"所以用object替换\",{\"1\":{\"5102\":1}}],[\"所以很少会会jvm实现试图对它们的性能进行优化\",{\"1\":{\"4855\":1}}],[\"所以一般都是捕获异常或者再往上抛\",{\"1\":{\"4755\":1}}],[\"所以程序通过反射获取了某个类的annotatedelement对象之后\",{\"1\":{\"4624\":1}}],[\"所以围绕着单元测试\",{\"1\":{\"4430\":1}}],[\"所以也没有必要人工梳理测试结果的报告\",{\"1\":{\"4283\":1}}],[\"所以此处的注释是不必要的\",{\"1\":{\"4232\":1}}],[\"所以方法名\",{\"1\":{\"4223\":1}}],[\"所以设计结果需要进行分类归档保存\",{\"1\":{\"3470\":1}}],[\"所以设置为静态变量\",{\"1\":{\"3182\":1}}],[\"所以字段名称需要慎重考虑\",{\"1\":{\"3352\":1}}],[\"所以dao的参数校验\",{\"1\":{\"3206\":1}}],[\"所以赋值语句需要清晰地单独成为一行\",{\"1\":{\"3200\":1}}],[\"所以资金相关的金融敏感信息不建议使用乐观锁更新\",{\"1\":{\"3175\":1}}],[\"所以set存储的对象必须覆写这两种方法\",{\"1\":{\"3089\":1}}],[\"所以包装数据类型的null值\",{\"1\":{\"3058\":1}}],[\"所以需要用\",{\"1\":{\"5051\":1}}],[\"所以需要在服务器上调小此等待值\",{\"1\":{\"3443\":1}}],[\"所以需要在<resultmap>设置从is\",{\"1\":{\"2994\":1}}],[\"所以需要将类\",{\"1\":{\"2002\":1}}],[\"所以本手册以java开发者为中心视角\",{\"1\":{\"2982\":1}}],[\"所以他具有关联的\",{\"1\":{\"2872\":1}}],[\"所以之前的代码现在看上去可能会显得很糟糕\",{\"1\":{\"2801\":1}}],[\"所以解决思路\",{\"1\":{\"2527\":1}}],[\"所以北京鸭类为了改进不能飞问题\",{\"1\":{\"2524\":1}}],[\"所以在\",{\"1\":{\"6820\":1}}],[\"所以在取出集合元素时需要人为的强制类型转化到具体的目标类型\",{\"1\":{\"5007\":1}}],[\"所以在这里\",{\"1\":{\"2324\":1}}],[\"所以在多线程环境下不可使用这种方式\",{\"1\":{\"2301\":1}}],[\"所以在运行时不可能发生变化\",{\"1\":{\"2218\":1}}],[\"所以每个类被依赖的类就会比较少\",{\"1\":{\"2175\":1}}],[\"所以告诉我们什么时候应该使用继承\",{\"1\":{\"2106\":1}}],[\"所以职责链将请求的发送者和请求的处理者解耦了\",{\"1\":{\"1930\":1}}],[\"所以大多数语言在实现聚合类时都提供了迭代器类\",{\"1\":{\"1563\":1}}],[\"所以实现其文法较为容易\",{\"1\":{\"1460\":1}}],[\"所以应当在有足够多的享元实例时才值得使用享元模式\",{\"1\":{\"1451\":1}}],[\"所以以下几种情形适合采用享元模式\",{\"1\":{\"1448\":1}}],[\"所以不行\",{\"1\":{\"5131\":1}}],[\"所以不要省略它的文档\",{\"1\":{\"4261\":1}}],[\"所以不能保证它一定会被处理\",{\"1\":{\"1939\":1}}],[\"所以不可避免地会使对象数量多且性质相近\",{\"1\":{\"1386\":1}}],[\"所以不满足if中的任意一个条件\",{\"1\":{\"458\":1}}],[\"所以棋子坐标就是棋子的外部状态\",{\"1\":{\"1385\":1}}],[\"所以棋子颜色就是棋子的内部状态\",{\"1\":{\"1385\":1}}],[\"所以这里我们需要借助一把神兵利器\",{\"1\":{\"4941\":1}}],[\"所以这里我只给出两个类的大致设计思路\",{\"1\":{\"1359\":1}}],[\"所以这与单纯的按\",{\"1\":{\"3991\":1}}],[\"所以这种复用又称为\",{\"1\":{\"2216\":1,\"2220\":1}}],[\"所以这种模式很少被使用到\",{\"1\":{\"1464\":1}}],[\"所以这个框架才被称为\",{\"1\":{\"1327\":1}}],[\"所以经常被使用\",{\"1\":{\"1215\":1}}],[\"所以工厂模式只被分成了工厂方法和抽象工厂两类\",{\"1\":{\"1159\":1}}],[\"所以有必要为多个子系统提供一个统一的接口\",{\"1\":{\"1094\":1}}],[\"所以失去了透明性\",{\"1\":{\"826\":1}}],[\"所以客户端无须区别树叶对象和树枝对象\",{\"1\":{\"823\":1}}],[\"所以它有迭代器的属性\",{\"1\":{\"6259\":1}}],[\"所以它解决了类适配器必须继承\",{\"1\":{\"544\":1}}],[\"所以它可以根据需求重写\",{\"1\":{\"526\":1}}],[\"所以类适配器需要继承\",{\"1\":{\"524\":1}}],[\"所以获取unsafe实例也比较麻烦\",{\"1\":{\"463\":1}}],[\"所以最终会得到0\",{\"1\":{\"429\":1}}],[\"所以\",{\"1\":{\"426\":1,\"1159\":1,\"1333\":1,\"1341\":1,\"1349\":1,\"2178\":1,\"2356\":1,\"2362\":1,\"2363\":1,\"2383\":1,\"2390\":1,\"2395\":1,\"2523\":1,\"2723\":1,\"2740\":1,\"2742\":1,\"2782\":1,\"3351\":1,\"3450\":1,\"4855\":1,\"4863\":1,\"4907\":1,\"4971\":1,\"5050\":1,\"5145\":1,\"5154\":1,\"5171\":1,\"5599\":1,\"6065\":1,\"6095\":1}}],[\"所以说采用通配符的方式初始化泛型数组是允许的\",{\"1\":{\"5197\":1}}],[\"所以说精度损失是一个概率问题\",{\"1\":{\"3229\":1}}],[\"所以说\",{\"1\":{\"405\":1,\"5161\":1}}],[\"加密解密\",{\"1\":{\"6656\":1}}],[\"加密和会话管理\",{\"1\":{\"6598\":1}}],[\"加密展示\",{\"1\":{\"13\":1}}],[\"加载类对象\",{\"1\":{\"6261\":1}}],[\"加载类则是回调\",{\"1\":{\"6061\":1}}],[\"加载\",{\"1\":{\"6258\":1}}],[\"加载到系统里就好了\",{\"1\":{\"6216\":1}}],[\"加上访问修饰符\",{\"1\":{\"5360\":1}}],[\"加上两个有意义的变量名称elephant和fridge\",{\"1\":{\"3221\":1}}],[\"加深印象\",{\"1\":{\"5047\":1}}],[\"加剧代码合并的冲突\",{\"1\":{\"4096\":1}}],[\"加\",{\"1\":{\"3041\":1}}],[\"加减乘除符号等\",{\"1\":{\"3023\":1}}],[\"加大维护难度\",{\"1\":{\"2478\":1}}],[\"加强程序的健壮性\",{\"1\":{\"2115\":1}}],[\"加法解释器\",{\"1\":{\"1487\":1}}],[\"加入自己的理解的error\",{\"1\":{\"3278\":1}}],[\"加入上好的花生\",{\"1\":{\"2677\":1}}],[\"加入上好的红豆\",{\"1\":{\"2677\":1}}],[\"加入双重检查代码\",{\"1\":{\"2313\":1}}],[\"加入同步处理的代码\",{\"1\":{\"2304\":1,\"2310\":1}}],[\"加入新的第三方\",{\"1\":{\"1702\":1,\"1718\":1}}],[\"加入到集合中\",{\"1\":{\"1601\":1}}],[\"加入\",{\"1\":{\"1489\":1}}],[\"加入2份巧克力\",{\"1\":{\"928\":2}}],[\"加入两份巧克力\",{\"1\":{\"928\":1}}],[\"加入一份巧克力\",{\"1\":{\"928\":3}}],[\"加入一份牛奶\",{\"1\":{\"928\":9}}],[\"加码\",{\"1\":{\"875\":1}}],[\"前一章节\",{\"1\":{\"4138\":1}}],[\"前端拿到的值却是\",{\"1\":{\"3229\":1}}],[\"前端开发\",{\"1\":{\"3226\":1}}],[\"前后端的时间格式统一为\",{\"1\":{\"3236\":1}}],[\"前后端数据列表相关的接口返回\",{\"1\":{\"3225\":1}}],[\"前后端交互的api\",{\"1\":{\"3224\":1}}],[\"前后端规约\",{\"0\":{\"3223\":1}}],[\"前者采用了过程式管理\",{\"1\":{\"6290\":1}}],[\"前者现在时表示主动式创建\",{\"1\":{\"3359\":1}}],[\"前者如果没有备注信息\",{\"1\":{\"3217\":1}}],[\"前者的时间复杂度为o\",{\"1\":{\"3090\":1}}],[\"前言\",{\"0\":{\"2981\":1}}],[\"前保存自身的状态\",{\"1\":{\"1638\":1}}],[\"前面已分析过\",{\"1\":{\"6048\":1}}],[\"前面提到的\",{\"1\":{\"2707\":1}}],[\"前面我们讲到了一些\",{\"1\":{\"2758\":1}}],[\"前面我们讲到继承可以实现代码复用\",{\"1\":{\"2745\":1}}],[\"前面我们也提到\",{\"1\":{\"2717\":1}}],[\"前面我们提到\",{\"1\":{\"2695\":1}}],[\"前面我们克隆羊案例就是浅拷贝\",{\"1\":{\"1782\":1}}],[\"前面设计的问题在于\",{\"1\":{\"2191\":1}}],[\"前面也提到\",{\"1\":{\"2174\":1}}],[\"前面学习了备忘录模式的定义与特点\",{\"1\":{\"1662\":1}}],[\"前面介绍了关于迭代器模式的结构与特点\",{\"1\":{\"1559\":1}}],[\"前面介绍了解释器模式的结构与特点\",{\"1\":{\"1496\":1}}],[\"前面一种分类方法更加常见\",{\"1\":{\"1159\":1}}],[\"前面分析了代理模式的结构与特点\",{\"1\":{\"1919\":1}}],[\"前面分析了中介者模式的结构与特点\",{\"1\":{\"1612\":1}}],[\"前面分析了享元模式的结构与特点\",{\"1\":{\"1448\":1}}],[\"前面分析了组合模式的结构与特点\",{\"1\":{\"870\":1}}],[\"前面分析到方案\",{\"1\":{\"910\":1}}],[\"前台\",{\"1\":{\"994\":1}}],[\"前方的路才会越走越顺\",{\"1\":{\"146\":1}}],[\"非xml\",{\"1\":{\"6292\":1}}],[\"非静态内部类能够访问外部类的静态和非静态成员\",{\"1\":{\"5734\":1}}],[\"非静态内部类依赖于外部类的实例\",{\"1\":{\"5496\":1}}],[\"非受检异常\",{\"1\":{\"5535\":1}}],[\"非运行时异常\",{\"1\":{\"4724\":1}}],[\"非代码性错误\",{\"1\":{\"4718\":1}}],[\"非商业性使用\",{\"1\":{\"4458\":1}}],[\"非必需的\",{\"0\":{\"4264\":1},\"1\":{\"4258\":1,\"4267\":1}}],[\"非赋值运算符时\",{\"1\":{\"4042\":1}}],[\"非空语句块\",{\"0\":{\"4008\":1},\"1\":{\"4019\":1,\"4024\":1}}],[\"非\",{\"0\":{\"3953\":1},\"1\":{\"5763\":1}}],[\"非法创建\",{\"1\":{\"5059\":2,\"5200\":2}}],[\"非法参数异常\",{\"1\":{\"4826\":1}}],[\"非法参数等\",{\"1\":{\"4708\":1}}],[\"非法的时间戳参数\",{\"1\":{\"3684\":1}}],[\"非法\",{\"1\":{\"3657\":1}}],[\"非法数据\",{\"1\":{\"3314\":1}}],[\"非功能性需求等问题要相应的文档来完整地呈现\",{\"1\":{\"3473\":1}}],[\"非功能性需求是指安全性\",{\"1\":{\"3461\":1}}],[\"非setter\",{\"1\":{\"2997\":1}}],[\"非得给每个类都定义接口\",{\"1\":{\"2716\":1}}],[\"非直接朋友\",{\"1\":{\"2166\":1}}],[\"非对终结符表达式的处理\",{\"1\":{\"1476\":1}}],[\"非终结符表达式类\",{\"1\":{\"1476\":1}}],[\"非终结符表达式\",{\"1\":{\"1470\":1}}],[\"非享元角色\",{\"1\":{\"1406\":1}}],[\"非享元信息是\",{\"1\":{\"1406\":1}}],[\"非享元的外部状态以参数的形式通过该方法传入\",{\"1\":{\"1400\":1}}],[\"非享元的外部状态以参数的形式通过方法传入\",{\"1\":{\"1393\":1}}],[\"非享元\",{\"1\":{\"1395\":1}}],[\"非常灵活的业务流程管理框架\",{\"1\":{\"6680\":1}}],[\"非常稳固\",{\"1\":{\"6669\":1}}],[\"非常罕见\",{\"1\":{\"4238\":1}}],[\"非常量字段名通常是名词或者名词短语\",{\"1\":{\"4183\":1}}],[\"非常量字段名\",{\"0\":{\"4181\":1},\"1\":{\"4182\":1}}],[\"非常长的标识符\",{\"1\":{\"4034\":1}}],[\"非常有帮助\",{\"1\":{\"3157\":1}}],[\"非常累赘的事情\",{\"1\":{\"3037\":1}}],[\"非常的方便\",{\"1\":{\"2584\":1}}],[\"非常复杂\",{\"1\":{\"1568\":1}}],[\"非常\",{\"1\":{\"867\":1}}],[\"非要写成下面这样\",{\"1\":{\"419\":1}}],[\"网关服务出错\",{\"1\":{\"3885\":1}}],[\"网关访问受限\",{\"1\":{\"3659\":1}}],[\"网关控制层等\",{\"1\":{\"3410\":1}}],[\"网上找了个例子\",{\"1\":{\"6146\":1}}],[\"网上知识点比较多也比较散\",{\"1\":{\"5238\":1}}],[\"网上很多标注解的原理文章根本没有说到点子上\",{\"1\":{\"4667\":1}}],[\"网上有很多争议\",{\"1\":{\"2723\":1}}],[\"网上转账\",{\"1\":{\"651\":1}}],[\"网状结构\",{\"1\":{\"1568\":1,\"1569\":1}}],[\"网络爬虫\",{\"0\":{\"6657\":1}}],[\"网络编程函数库\",{\"1\":{\"6535\":1}}],[\"网络连接和磁盘文件\",{\"1\":{\"4738\":1}}],[\"网络连接失败\",{\"1\":{\"4708\":1}}],[\"网络连接池等\",{\"1\":{\"2345\":1}}],[\"网络资源服务出错\",{\"1\":{\"3877\":1}}],[\"网络\",{\"0\":{\"6534\":1},\"1\":{\"3305\":1}}],[\"网络安全事件\",{\"1\":{\"3285\":1}}],[\"网络安全专业\",{\"1\":{\"1535\":2}}],[\"网络运行状态\",{\"1\":{\"3285\":1}}],[\"网络工程不错\",{\"1\":{\"858\":1}}],[\"网络工程\",{\"1\":{\"858\":1}}],[\"网站\",{\"1\":{\"3343\":1}}],[\"网站或者去火车票代售点买\",{\"1\":{\"1809\":1}}],[\"网站的计数器\",{\"1\":{\"2258\":1}}],[\"网站的分类共=\",{\"1\":{\"1431\":1}}],[\"网站的发布形式为\",{\"1\":{\"1427\":1}}],[\"网站工厂类\",{\"1\":{\"1428\":1,\"1429\":1}}],[\"网站发布的形式\",{\"1\":{\"1427\":1}}],[\"网站类和其子类\",{\"1\":{\"1426\":1}}],[\"软件的独立单元将在与程序的其他部分相隔离的情况下进行测试\",{\"1\":{\"4433\":1}}],[\"软件的维护性\",{\"1\":{\"2570\":1}}],[\"软件设计与开发最重要的工作之一就是应对复杂性\",{\"1\":{\"2752\":1}}],[\"软件设计也是这样\",{\"1\":{\"1094\":1}}],[\"软件开发中唯一不变的就是变化\",{\"1\":{\"2701\":1}}],[\"软件\",{\"1\":{\"2581\":1}}],[\"软件具有很好的扩展性\",{\"1\":{\"2575\":1}}],[\"软件测试时只需要对扩展的代码进行测试就可以了\",{\"1\":{\"2135\":1}}],[\"软件遵守开闭原则的话\",{\"1\":{\"2135\":1}}],[\"软件实体应当对扩展开放\",{\"1\":{\"2127\":1}}],[\"软件工程中\",{\"1\":{\"2574\":1}}],[\"软件工程不错\",{\"1\":{\"858\":1}}],[\"软件工程\",{\"1\":{\"858\":1}}],[\"软件是具备现实场景的\",{\"1\":{\"647\":1}}],[\"信息就会丢失\",{\"1\":{\"5446\":1}}],[\"信息\",{\"0\":{\"3977\":1}}],[\"信息安全专业\",{\"1\":{\"1535\":2}}],[\"信息工程好学\",{\"1\":{\"858\":1}}],[\"信息工程\",{\"1\":{\"858\":1}}],[\"信息工程学院是以\",{\"1\":{\"1537\":1}}],[\"信息工程学院\",{\"1\":{\"858\":2,\"1535\":1}}],[\"信息容器\",{\"1\":{\"53\":1,\"64\":1}}],[\"存入\",{\"1\":{\"6109\":1}}],[\"存入缓存\",{\"1\":{\"6076\":1}}],[\"存取性能和存储空间能否满足业务发展\",{\"1\":{\"3450\":1}}],[\"存在缓存时\",{\"1\":{\"6109\":1}}],[\"存在缓存\",{\"1\":{\"6076\":1}}],[\"存在两个类\",{\"0\":{\"5600\":1}}],[\"存在继承的情况下\",{\"1\":{\"5507\":1}}],[\"存在于jdk的java\",{\"1\":{\"5824\":1}}],[\"存在于同一个类中\",{\"1\":{\"5412\":1}}],[\"存在于继承体系中\",{\"1\":{\"5406\":1}}],[\"存在下级部门\",{\"1\":{\"4696\":1}}],[\"存在则返回true\",{\"1\":{\"4626\":1}}],[\"存在数据库更新风暴的风险\",{\"1\":{\"3385\":1}}],[\"存在数据错乱风险\",{\"1\":{\"3237\":1}}],[\"存在非等号和等号混合判断条件时\",{\"1\":{\"3376\":1}}],[\"存在过多的条件语句\",{\"1\":{\"3324\":1}}],[\"存在过多的外部依赖\",{\"1\":{\"3323\":1}}],[\"存在过多的全局变量和静态方法\",{\"1\":{\"3322\":1}}],[\"存在抛出异常的情况\",{\"1\":{\"3293\":1}}],[\"存在npe隐患\",{\"1\":{\"3106\":1}}],[\"存在精度损失风险\",{\"1\":{\"3056\":1}}],[\"存在大量相同或相似对象的创建问题\",{\"1\":{\"1738\":1}}],[\"存在很多\",{\"1\":{\"806\":1}}],[\"存储格式\",{\"1\":{\"6352\":1}}],[\"存储的是对象的地址\",{\"1\":{\"5333\":1}}],[\"存储容量已满\",{\"1\":{\"3871\":1}}],[\"存储方案和数据结构需要认真地进行设计和评审\",{\"1\":{\"3450\":1}}],[\"存储方案和底层数据结构的设计获得评审一致通过\",{\"1\":{\"3450\":1}}],[\"存储过程难以调试和扩展\",{\"1\":{\"3386\":1}}],[\"存储null值时会抛出npe异常\",{\"1\":{\"3151\":1}}],[\"存储\",{\"1\":{\"1440\":1}}],[\"存储在享元信息内部\",{\"1\":{\"1387\":1}}],[\"存放的\",{\"1\":{\"854\":1}}],[\"遍历使用spi获取到的具体实现\",{\"1\":{\"6184\":1,\"6189\":1}}],[\"遍历所有的url\",{\"1\":{\"6219\":1}}],[\"遍历所有的驱动实现\",{\"1\":{\"6190\":1}}],[\"遍历所有的观察者\",{\"1\":{\"1718\":1}}],[\"遍历所有学院\",{\"1\":{\"1539\":1}}],[\"遍历对象集合\",{\"1\":{\"1556\":1}}],[\"遍历的位置\",{\"1\":{\"1537\":1}}],[\"遍历任务交由迭代器完成\",{\"1\":{\"1509\":1}}],[\"遍历我们的字符数组\",{\"1\":{\"1489\":1}}],[\"遍历组织机构\",{\"1\":{\"867\":1}}],[\"遍历\",{\"1\":{\"852\":1,\"854\":1,\"1535\":1,\"4647\":1,\"6236\":1}}],[\"遍历等\",{\"1\":{\"843\":1}}],[\"院系管理者\",{\"1\":{\"1972\":1}}],[\"院\",{\"1\":{\"844\":1}}],[\"系列虽然挺全\",{\"1\":{\"6278\":1}}],[\"系列\",{\"1\":{\"5811\":1}}],[\"系\",{\"1\":{\"1539\":1}}],[\"系都看做是组织结构\",{\"1\":{\"844\":1}}],[\"系的添加\",{\"1\":{\"843\":1}}],[\"系是学院的子类\",{\"1\":{\"842\":1}}],[\"系统到底做了什么事情\",{\"1\":{\"4985\":1}}],[\"系统读取磁盘文件\",{\"1\":{\"3839\":1}}],[\"系统线程池耗尽\",{\"1\":{\"3835\":1}}],[\"系统连接池耗尽\",{\"1\":{\"3833\":1}}],[\"系统内存耗尽\",{\"1\":{\"3829\":1}}],[\"系统内存中该类只存在一个对象\",{\"1\":{\"2337\":1}}],[\"系统磁盘空间耗尽\",{\"1\":{\"3827\":1}}],[\"系统资源访问异常\",{\"1\":{\"3837\":1}}],[\"系统资源耗尽\",{\"1\":{\"3825\":1}}],[\"系统资源异常\",{\"1\":{\"3822\":1}}],[\"系统功能降级\",{\"1\":{\"3820\":1}}],[\"系统限流\",{\"1\":{\"3818\":1}}],[\"系统容灾功能被触发\",{\"1\":{\"3815\":1}}],[\"系统订单处理超时\",{\"1\":{\"3813\":1}}],[\"系统执行超时\",{\"1\":{\"3810\":1}}],[\"系统执行出错\",{\"1\":{\"3260\":1,\"3807\":1}}],[\"系统出现的严重状况\",{\"1\":{\"3547\":1}}],[\"系统设计文档有助于后期的系统维护和重构\",{\"1\":{\"3470\":1}}],[\"系统设计阶段\",{\"1\":{\"3465\":1,\"3466\":1,\"3467\":1}}],[\"系统设计时要准确识别出弱依赖\",{\"1\":{\"3456\":1}}],[\"系统架构设计时明确以下目标\",{\"1\":{\"3457\":1}}],[\"系统自动进行降级或熔断操作\",{\"1\":{\"3456\":1}}],[\"系统依赖的第三方服务被降级或屏蔽后\",{\"1\":{\"3456\":1}}],[\"系统的整体功能与各单元部件的测试正常与否是强相关的\",{\"1\":{\"3327\":1}}],[\"系统的采购审批项目\",{\"0\":{\"1954\":1}}],[\"系统配置相关常量放在类systemconfigconsts下\",{\"1\":{\"3015\":1}}],[\"系统化地整理成册\",{\"1\":{\"2982\":1}}],[\"系统越不稳定\",{\"1\":{\"2743\":1}}],[\"系统更加庞大\",{\"1\":{\"2646\":1}}],[\"系统要求使用算法的客户不应该知道其操作的数据时\",{\"1\":{\"2559\":1}}],[\"系统处于哪种情况\",{\"1\":{\"2417\":1}}],[\"系统性能将受到一定影响\",{\"1\":{\"1940\":1}}],[\"系统中均是勉强能运行但像面条一样的代码\",{\"1\":{\"3469\":1}}],[\"系统中各算法彼此完全独立\",{\"1\":{\"2558\":1}}],[\"系统中有些\",{\"1\":{\"2362\":1}}],[\"系统中有大量对象\",{\"1\":{\"1439\":1}}],[\"系统中的缓存等常常被设计成单例\",{\"1\":{\"2258\":1}}],[\"系统中感兴趣的对象会自动接收该广播\",{\"1\":{\"1734\":1}}],[\"系统中存在大量相同或相似的对象\",{\"1\":{\"1449\":1}}],[\"系统扩展困难\",{\"1\":{\"1181\":1}}],[\"系统扩展方便\",{\"1\":{\"725\":1}}],[\"系统随机请求命令或经常增加\",{\"1\":{\"801\":1}}],[\"需做最后一个分隔符后有无内容的检查\",{\"1\":{\"3064\":1}}],[\"需注意以下几点\",{\"1\":{\"2842\":1}}],[\"需求分析与系统设计在考虑主干功能的同时\",{\"1\":{\"3462\":1}}],[\"需求变化是程序员生命中唯一不变的事情\",{\"1\":{\"2796\":1}}],[\"需求变更而改变\",{\"1\":{\"2002\":1}}],[\"需求\",{\"1\":{\"2075\":1,\"2186\":1}}],[\"需求是这样\",{\"1\":{\"836\":1}}],[\"需要与具体的实现配合使用\",{\"1\":{\"6482\":1}}],[\"需要遍历所有的实现\",{\"1\":{\"6266\":1}}],[\"需要特别注意的是被final关键字修饰的field字段是安全的\",{\"1\":{\"5993\":1}}],[\"需要特别声明的是\",{\"1\":{\"2594\":1}}],[\"需要时查api文档即可\",{\"1\":{\"5993\":1}}],[\"需要深入理解\",{\"1\":{\"5817\":1}}],[\"需要程序员自己分析代码决定是否捕获和处理\",{\"1\":{\"5717\":1}}],[\"需要转换为其对应的包装类型\",{\"1\":{\"5684\":1}}],[\"需要遵循以下几个原则\",{\"1\":{\"5627\":1}}],[\"需要手动回收\",{\"1\":{\"5571\":1}}],[\"需要用\",{\"1\":{\"5534\":1}}],[\"需要用户输入内容的场景\",{\"1\":{\"3348\":1}}],[\"需要继承非静态和非常量字段\",{\"1\":{\"5395\":1}}],[\"需要继承抽象类才能实例化其子类\",{\"1\":{\"5375\":1}}],[\"需要能控制继承来的成员的访问权限\",{\"1\":{\"5394\":1}}],[\"需要让不相关的类都实现一个方法\",{\"1\":{\"5390\":1}}],[\"需要强转类型\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"需要是可比较的类\",{\"1\":{\"5050\":1}}],[\"需要先使用javac编译\",{\"1\":{\"4942\":1}}],[\"需要先从外部共享存储区中将它读取到内存\",{\"1\":{\"2403\":1}}],[\"需要尽可能精确地描述问题和相关信息\",{\"1\":{\"4897\":1}}],[\"需要测试方法为public\",{\"1\":{\"4327\":1}}],[\"需要存储对象的元数据\",{\"1\":{\"5615\":1}}],[\"需要存储的元素个数\",{\"1\":{\"3123\":1}}],[\"需要存在\",{\"0\":{\"4127\":1}}],[\"需要注意的点是要使用的正确的编码\",{\"1\":{\"5595\":1}}],[\"需要注意的是\",{\"1\":{\"2369\":1,\"2552\":1,\"6218\":1}}],[\"需要注释\",{\"0\":{\"4123\":1}}],[\"需要考虑到\",{\"1\":{\"3474\":1}}],[\"需要充分评估异常流程与业务边界\",{\"1\":{\"3462\":1}}],[\"需要哪些字段必须明确写明\",{\"1\":{\"3394\":1}}],[\"需要仔细评估in后边的集合元素数量\",{\"1\":{\"3390\":1}}],[\"需要join的字段\",{\"1\":{\"3369\":1}}],[\"需要及时更新字段注释\",{\"1\":{\"3363\":1}}],[\"需要及时纠正的情况\",{\"1\":{\"3222\":1}}],[\"需要根据情况来酌情解决\",{\"1\":{\"3360\":1}}],[\"需要在classpath下的meta\",{\"1\":{\"6144\":1}}],[\"需要在几个相关的类中共享代码\",{\"1\":{\"5393\":1}}],[\"需要在该运算符之后换行\",{\"1\":{\"4048\":1}}],[\"需要在该运算符之前换行\",{\"1\":{\"4042\":1}}],[\"需要在<resultmap>设置从is\",{\"1\":{\"3351\":1}}],[\"需要在不明确指定请求处理者的情况下\",{\"1\":{\"1987\":1}}],[\"需要明确协议\",{\"1\":{\"3224\":1}}],[\"需要极高稳定性和可用性的方法\",{\"1\":{\"3205\":1}}],[\"需要进行处理\",{\"1\":{\"4742\":1}}],[\"需要进行double\",{\"1\":{\"3450\":1}}],[\"需要进行参数校验\",{\"1\":{\"3205\":1}}],[\"需要进行instanceof判断\",{\"1\":{\"3112\":1}}],[\"需要编码保证每个线程持有一个单独的random实例\",{\"1\":{\"3177\":1}}],[\"需要编写较为复杂的代码\",{\"1\":{\"1748\":1}}],[\"需要加锁的代码\",{\"1\":{\"4786\":1}}],[\"需要加锁\",{\"1\":{\"3173\":1}}],[\"需要保持一致的加锁顺序\",{\"1\":{\"3166\":1}}],[\"需要保存与恢复数据的场景\",{\"1\":{\"1663\":1}}],[\"需要采用通用的符号语言\",{\"1\":{\"2822\":1}}],[\"需要生产\",{\"1\":{\"2705\":1}}],[\"需要3小时\",{\"1\":{\"2677\":1}}],[\"需要重写父类的所有方法\",{\"1\":{\"2526\":1,\"2539\":1}}],[\"需要对于文件大小\",{\"1\":{\"3346\":1}}],[\"需要对iterator对象加锁\",{\"1\":{\"3114\":1}}],[\"需要对一个对象结构中的对象进行很多不同操作\",{\"1\":{\"2933\":1}}],[\"需要对外输出不同的行为的问题\",{\"1\":{\"2418\":1}}],[\"需要对对象加锁\",{\"1\":{\"2404\":1}}],[\"需要频繁创建的一些类\",{\"1\":{\"2342\":1}}],[\"需要父类接口\",{\"1\":{\"1871\":1}}],[\"需要类加载器\",{\"1\":{\"1871\":1}}],[\"需要定义接口或者父类\",{\"1\":{\"1826\":1}}],[\"需要定义语言文法的应用实例非常少\",{\"1\":{\"1464\":1}}],[\"需要修改所有的副本\",{\"1\":{\"3467\":1}}],[\"需要修改算法时\",{\"1\":{\"2681\":1}}],[\"需要修改其源代码\",{\"1\":{\"1806\":1}}],[\"需要修改代码\",{\"1\":{\"1747\":1}}],[\"需要为每一个类配备一个克隆方法\",{\"1\":{\"1806\":1}}],[\"需要为每一个类都配置一个\",{\"1\":{\"1746\":1}}],[\"需要设计开放型\",{\"1\":{\"1689\":1}}],[\"需要提供一个可回滚操作的场景\",{\"1\":{\"1664\":1}}],[\"需要分离出内部状态和外部状态\",{\"1\":{\"1442\":1}}],[\"需要的网站结构相似度很高\",{\"1\":{\"1416\":1}}],[\"需要将上面一行代码\",{\"1\":{\"2355\":2}}],[\"需要将各个审批级别的下一个设置好\",{\"1\":{\"1976\":1}}],[\"需要将一些不能共享的状态外部化\",{\"1\":{\"1381\":1}}],[\"需要将插排的\",{\"1\":{\"520\":1,\"540\":1}}],[\"需要缓冲池时\",{\"1\":{\"1376\":1}}],[\"需要什么类型的披萨\",{\"1\":{\"1200\":1}}],[\"需要覆盖已有代码\",{\"1\":{\"1163\":1}}],[\"需要微调请覆盖\",{\"1\":{\"1030\":1,\"1031\":1}}],[\"需要\",{\"1\":{\"867\":1,\"2205\":1,\"2208\":1,\"2339\":1}}],[\"需要一个遥控器\",{\"1\":{\"783\":1}}],[\"需要建房子\",{\"1\":{\"687\":1,\"703\":1}}],[\"需要调用的时候就得不断是使用\",{\"1\":{\"571\":1}}],[\"需要使用顶级类的名称来引用嵌套静态类\",{\"1\":{\"5666\":1}}],[\"需要使用多重继承\",{\"1\":{\"5391\":1}}],[\"需要使用\",{\"1\":{\"566\":1,\"2124\":1}}],[\"需要开发的具有某种业务功能的组件在现有的组件库中已经存在\",{\"1\":{\"486\":1}}],[\"需要通过反射获取\",{\"1\":{\"463\":1}}],[\"编辑器以及构建知识系统的框架\",{\"1\":{\"6655\":1}}],[\"编辑此页链接\",{\"1\":{\"22\":1}}],[\"编译期没法确定泛型参数化类型\",{\"1\":{\"5189\":1}}],[\"编译期保留\",{\"1\":{\"4594\":1}}],[\"编译错误\",{\"1\":{\"5059\":3,\"5112\":1,\"5120\":1,\"5133\":2,\"5137\":2,\"5139\":1,\"5142\":1,\"5160\":1,\"5200\":3,\"5210\":2,\"5224\":1,\"5226\":1}}],[\"编译仍能顺利通过\",{\"1\":{\"4748\":1}}],[\"编译异常\",{\"1\":{\"4724\":1}}],[\"编译通过\",{\"1\":{\"4660\":1,\"5133\":4}}],[\"编译器生成工具\",{\"0\":{\"6312\":1}}],[\"编译器知道类型参数的范围\",{\"1\":{\"5037\":1}}],[\"编译器不要求强制处置的异常\",{\"1\":{\"4730\":1}}],[\"编译器要求必须处置的异常\",{\"1\":{\"4727\":1}}],[\"编译器会自动进行这个优化\",{\"1\":{\"5447\":1}}],[\"编译器会自动继承java\",{\"1\":{\"4663\":1}}],[\"编译器会在缓冲池范围内的基本类型自动装箱过程调用\",{\"1\":{\"5272\":1}}],[\"编译器会检查类型\",{\"1\":{\"5004\":1}}],[\"编译器会对此做出检查\",{\"1\":{\"4516\":1}}],[\"编译器分别使用了\",{\"1\":{\"4603\":1}}],[\"编译器并没有记录下\",{\"1\":{\"4602\":1}}],[\"编译器是允许非泛型集合与泛型集合互相赋值\",{\"1\":{\"3112\":1}}],[\"编译时注入框架\",{\"1\":{\"6364\":1}}],[\"编译时多态主要指方法的重载\",{\"1\":{\"5769\":1}}],[\"编译时由编译器生成的桥方法\",{\"1\":{\"5169\":2}}],[\"编译时擦除到类型a\",{\"1\":{\"5037\":1}}],[\"编译时通过代码里标识的元数据动态处理\",{\"1\":{\"4498\":1}}],[\"编译时动态处理\",{\"1\":{\"4498\":1}}],[\"编译检查\",{\"1\":{\"4497\":1}}],[\"编码排序略有不同\",{\"1\":{\"3991\":1}}],[\"编码排在\",{\"1\":{\"3991\":1}}],[\"编码顺序先后出现\",{\"1\":{\"3991\":1}}],[\"编码\",{\"1\":{\"3945\":1,\"4197\":1}}],[\"编号即被永久固定\",{\"1\":{\"3255\":1}}],[\"编号不与公司业务架构\",{\"1\":{\"3255\":1}}],[\"编程方式操作字节码的开发库\",{\"1\":{\"6295\":1}}],[\"编程思想\",{\"1\":{\"5581\":1,\"5586\":1,\"5587\":1,\"5588\":1,\"5807\":1}}],[\"编程实践\",{\"0\":{\"4224\":1}}],[\"编程风格指定了以下\",{\"1\":{\"4195\":1}}],[\"编程风格指南\",{\"0\":{\"3928\":1}}],[\"编程风格不同\",{\"1\":{\"4042\":1}}],[\"编程规范中却不是必须的\",{\"1\":{\"4093\":1}}],[\"编程规范性\",{\"1\":{\"2583\":1}}],[\"编程规约\",{\"0\":{\"2984\":1}}],[\"编程的\",{\"1\":{\"2925\":1}}],[\"编程能力和设计能力\",{\"1\":{\"2588\":1}}],[\"编程中遵循其它原则\",{\"1\":{\"2131\":1}}],[\"编程中如何选择代理模式\",{\"1\":{\"1879\":1}}],[\"编程复杂度\",{\"1\":{\"1263\":1}}],[\"编写完成之后\",{\"1\":{\"4443\":1}}],[\"编写测试方法\",{\"1\":{\"4391\":1,\"4407\":1}}],[\"编写单元测试\",{\"0\":{\"4321\":1}}],[\"编写单元测试代码遵守bcde原则\",{\"1\":{\"3310\":1}}],[\"编写制作豆浆的程序\",{\"1\":{\"2665\":1}}],[\"编写制作披萨的过程类\",{\"1\":{\"1196\":1}}],[\"编写软件过程中\",{\"1\":{\"2581\":1}}],[\"编写代码的应用实例\",{\"1\":{\"2050\":1}}],[\"编写\",{\"1\":{\"1198\":1}}],[\"编写程序展示一个学校院系结构\",{\"1\":{\"836\":1}}],[\"被0除\",{\"1\":{\"5717\":1}}],[\"被改变\",{\"1\":{\"5295\":1}}],[\"被声明为\",{\"1\":{\"5285\":1}}],[\"被声明成private只会被自己代码所调用的方法\",{\"1\":{\"3206\":1}}],[\"被擦除为\",{\"1\":{\"5189\":1}}],[\"被抑制的异常会由\",{\"1\":{\"4799\":1}}],[\"被注解的子类继承父类注解可以用\",{\"1\":{\"4665\":1}}],[\"被它修饰的annotation将具有继承性\",{\"1\":{\"4609\":1}}],[\"被描述的注解在它所修饰的类中可以被保留到何时\",{\"1\":{\"4592\":1}}],[\"被修饰的注解可以用在什么地方\",{\"1\":{\"4588\":1}}],[\"被弃用的方法\",{\"1\":{\"4507\":1}}],[\"被测试类\",{\"1\":{\"4678\":1}}],[\"被测对象所需要的依赖对象等\",{\"1\":{\"4481\":1}}],[\"被测系统所依赖的组件\",{\"1\":{\"4462\":1}}],[\"被测系统\",{\"0\":{\"4459\":1},\"1\":{\"4460\":1}}],[\"被接受的访问者对象作为\",{\"1\":{\"2947\":1}}],[\"被依赖类\",{\"1\":{\"2850\":1}}],[\"被国际对象管理组织\",{\"1\":{\"2807\":1}}],[\"被所有的代码共享\",{\"1\":{\"2366\":1}}],[\"被复用的可能性就越大\",{\"1\":{\"2137\":1}}],[\"被迫设计冗余的代码\",{\"1\":{\"2048\":1}}],[\"被\",{\"1\":{\"1972\":4}}],[\"被代理对象的方法\",{\"1\":{\"1842\":1}}],[\"被代理对象\",{\"1\":{\"1826\":1,\"1842\":1,\"1844\":1}}],[\"被代理的对象可以是远程对象\",{\"1\":{\"1812\":1}}],[\"被成功获取\",{\"1\":{\"1406\":1}}],[\"被创建\",{\"1\":{\"1406\":1}}],[\"被调用\",{\"1\":{\"1114\":3,\"1406\":1}}],[\"被访问\",{\"1\":{\"832\":1,\"834\":1}}],[\"被适配的类\",{\"1\":{\"520\":1,\"540\":1}}],[\"被适配类\",{\"1\":{\"513\":1,\"524\":1}}],[\"及时清理不再使用的代码段或配置信息\",{\"1\":{\"3247\":1}}],[\"及\",{\"1\":{\"823\":1}}],[\"透明方式\",{\"0\":{\"822\":1}}],[\"树形结构\",{\"1\":{\"866\":1,\"1006\":1}}],[\"树叶\",{\"1\":{\"832\":1,\"834\":1}}],[\"树叶构件本来没有\",{\"1\":{\"823\":1}}],[\"树叶构件\",{\"1\":{\"819\":1,\"832\":1,\"834\":1}}],[\"树枝构件\",{\"1\":{\"820\":1,\"832\":1,\"834\":1}}],[\"删除了阻止异常抛出的代码\",{\"1\":{\"4912\":1}}],[\"删除记录时\",{\"1\":{\"3388\":1}}],[\"删除别人的数据\",{\"1\":{\"3331\":1}}],[\"删除某一行数据的单元测试\",{\"1\":{\"3315\":1}}],[\"删除等操作\",{\"1\":{\"3315\":1}}],[\"删除元素的条件\",{\"1\":{\"3115\":1}}],[\"删除产生concurrentmodificationexception异常\",{\"1\":{\"3103\":1}}],[\"删除一下\",{\"1\":{\"3076\":1}}],[\"删除掉老的接口\",{\"1\":{\"2769\":1}}],[\"删除或更换算法要修改原代码\",{\"1\":{\"2487\":1}}],[\"删除观察者方法\",{\"1\":{\"1686\":1}}],[\"删除观察者对象的方法\",{\"1\":{\"1679\":1}}],[\"删除的方法用remove\",{\"1\":{\"3006\":1}}],[\"删除的方法\",{\"1\":{\"1537\":1}}],[\"删除聚合对象以及创建迭代器对象的接口\",{\"1\":{\"1518\":1}}],[\"删除\",{\"1\":{\"818\":1,\"843\":1,\"4696\":1}}],[\"删除命令时\",{\"1\":{\"801\":1}}],[\"总的来说\",{\"1\":{\"4433\":1}}],[\"总的抽象类或接口\",{\"1\":{\"818\":1}}],[\"总是只有一个\",{\"1\":{\"5642\":1}}],[\"总是优先捕获最具体的异常类\",{\"1\":{\"4901\":1}}],[\"总是使用\",{\"0\":{\"4225\":1}}],[\"总是需要重新初始化对象\",{\"1\":{\"1767\":1}}],[\"总是需要重新获取原始对象的属性\",{\"1\":{\"1766\":1}}],[\"总代码的行数\",{\"1\":{\"4054\":1}}],[\"总之\",{\"1\":{\"2732\":1,\"2817\":1}}],[\"总经理等\",{\"1\":{\"1927\":1}}],[\"总结了java\",{\"1\":{\"4706\":1,\"4995\":1,\"5817\":1}}],[\"总结一下\",{\"1\":{\"1331\":1,\"2713\":1}}],[\"总结\",{\"0\":{\"945\":1,\"2223\":1}}],[\"总公司中的部门与分公司\",{\"1\":{\"806\":1}}],[\"属于行为型模式\",{\"1\":{\"1504\":1}}],[\"属于结构型模式\",{\"1\":{\"807\":1}}],[\"属性使用的数据类型时\",{\"1\":{\"5760\":1}}],[\"属性使用\",{\"1\":{\"5760\":1}}],[\"属性可以供\",{\"1\":{\"5759\":1}}],[\"属性和\",{\"1\":{\"5759\":1}}],[\"属性去记录了classpolicy\",{\"1\":{\"4603\":1}}],[\"属性类型要与数据库字段类型相匹配\",{\"1\":{\"3055\":1}}],[\"属性一样\",{\"1\":{\"1753\":1}}],[\"属性是\",{\"1\":{\"1363\":2,\"1368\":1}}],[\"属性指定的方法来做一些清理工作\",{\"1\":{\"1345\":1}}],[\"属性指定的方法来初始化对象\",{\"1\":{\"1345\":1}}],[\"属性\",{\"1\":{\"664\":1,\"1343\":1,\"1795\":2,\"2328\":1,\"2539\":1,\"2731\":1,\"4520\":1,\"4524\":1,\"5759\":2}}],[\"学生表中的student\",{\"1\":{\"3385\":1}}],[\"学以精进的目标\",{\"1\":{\"2983\":1}}],[\"学习过了设计模式\",{\"1\":{\"2565\":1}}],[\"学习用品中的书与书包\",{\"1\":{\"806\":1}}],[\"学院员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学院员工id=\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学院的员工类\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学院输出\",{\"1\":{\"1539\":1}}],[\"学院集合\",{\"1\":{\"1539\":1}}],[\"学院\",{\"1\":{\"858\":1}}],[\"学院类\",{\"1\":{\"853\":1}}],[\"学校包含老师\",{\"1\":{\"2873\":1}}],[\"学校与老师的关系\",{\"1\":{\"2873\":1}}],[\"学校管理类\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学校管理者\",{\"1\":{\"1972\":1}}],[\"学校总部员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学校总部员工id=\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学校总部员工类\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学校总部的员工信息\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"学校副管理者\",{\"1\":{\"1972\":1}}],[\"学校\",{\"0\":{\"1954\":1},\"1\":{\"858\":2}}],[\"学校院系展示需求\",{\"0\":{\"835\":1}}],[\"学会用欣赏的眼光看他人\",{\"1\":{\"142\":1}}],[\"大概意思看得明白\",{\"1\":{\"6102\":1}}],[\"大概率会出现前后端订单数据不一致的情况\",{\"1\":{\"3229\":1}}],[\"大大减少查询匹配次数\",{\"1\":{\"5650\":1}}],[\"大头\",{\"1\":{\"4985\":1}}],[\"大多数情况下和getname一样\",{\"1\":{\"5887\":1}}],[\"大多数\",{\"1\":{\"4899\":1}}],[\"大多数的\",{\"1\":{\"4868\":1}}],[\"大多数格式化程序不会重新包装\",{\"1\":{\"4154\":1}}],[\"大\",{\"1\":{\"4448\":1}}],[\"大骆峰\",{\"1\":{\"4168\":1}}],[\"大陆身份证编号校验\",{\"1\":{\"3596\":1}}],[\"大量地输出无效日志\",{\"1\":{\"3294\":1}}],[\"大类之间的步长间距预留\",{\"1\":{\"3254\":1}}],[\"大于size\",{\"1\":{\"3106\":1}}],[\"大于\",{\"1\":{\"3106\":1}}],[\"大写的h和小写的h分别指代的意义\",{\"1\":{\"3079\":1}}],[\"大括号中间无需换行和空格\",{\"1\":{\"3020\":1}}],[\"大而全的常量类\",{\"1\":{\"3015\":1}}],[\"大厂\",{\"1\":{\"2577\":1}}],[\"大牛\",{\"1\":{\"1797\":1,\"6999\":1}}],[\"大战后\",{\"1\":{\"1655\":1}}],[\"大数据专业\",{\"1\":{\"1535\":2}}],[\"大部分鸟都会飞\",{\"1\":{\"2725\":1}}],[\"大部分情况下都不需要手动抛出异常\",{\"1\":{\"4755\":1}}],[\"大部分情况下\",{\"1\":{\"2350\":1}}],[\"大部分的对象可以按照内部状态进行分组\",{\"1\":{\"1450\":1}}],[\"大部分估计都以为这是一段乱码\",{\"1\":{\"412\":1}}],[\"大小写有区别\",{\"1\":{\"3210\":1}}],[\"大小\",{\"1\":{\"1436\":1}}],[\"大工程\",{\"1\":{\"1324\":2,\"1325\":1}}],[\"大学接口及其实现类\",{\"1\":{\"1534\":1}}],[\"大学类\",{\"1\":{\"851\":1}}],[\"大学中的部门与学院\",{\"1\":{\"806\":1}}],[\"空位都以0补齐\",{\"1\":{\"5741\":1}}],[\"空语句块\",{\"0\":{\"4018\":1}}],[\"空指针异常\",{\"1\":{\"3546\":1,\"4722\":1,\"4821\":1}}],[\"空间浪费\",{\"1\":{\"3106\":1}}],[\"空集合对象\",{\"1\":{\"3102\":1}}],[\"空行\",{\"1\":{\"3036\":1}}],[\"空格字符\",{\"0\":{\"3947\":1}}],[\"空格\",{\"0\":{\"4059\":1},\"1\":{\"3021\":1,\"4069\":1,\"4251\":1}}],[\"空\",{\"1\":{\"2923\":1}}],[\"空心菱形\",{\"1\":{\"2923\":1}}],[\"空心三角箭头表示继承或实现\",{\"1\":{\"2914\":1}}],[\"空实现\",{\"1\":{\"1537\":1,\"2677\":1}}],[\"空实现或抛异常\",{\"1\":{\"823\":1}}],[\"空命令\",{\"1\":{\"796\":1}}],[\"空方法\",{\"1\":{\"549\":1}}],[\"等不可变集合可以使用\",{\"1\":{\"6902\":1}}],[\"等一系列权限相关问题\",{\"1\":{\"6603\":1}}],[\"等多种语言\",{\"1\":{\"6541\":1}}],[\"等多方面的挑战\",{\"1\":{\"2581\":1}}],[\"等属性\",{\"1\":{\"5759\":1}}],[\"等预处理命令从而实现条件编译\",{\"1\":{\"5575\":1}}],[\"等价的两个对象散列值一定相同\",{\"1\":{\"5442\":1}}],[\"等价关系\",{\"1\":{\"5418\":1}}],[\"等价于\",{\"1\":{\"1903\":1}}],[\"等接口用于获取堆栈跟踪数据等信息\",{\"1\":{\"4714\":1}}],[\"等框架\",{\"1\":{\"3545\":1}}],[\"等外不要在条件判断中执行其它复杂的语句\",{\"1\":{\"3196\":1}}],[\"等于size\",{\"1\":{\"3106\":1}}],[\"等于\",{\"1\":{\"3106\":1,\"3190\":1}}],[\"等都是immutable\",{\"1\":{\"3102\":1}}],[\"等都使用了组合关系\",{\"1\":{\"2744\":1}}],[\"等聚合类实现\",{\"1\":{\"2949\":1}}],[\"等生成\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"等人在\",{\"1\":{\"2574\":1}}],[\"等冗余语句\",{\"1\":{\"2417\":1}}],[\"等关联关系来实现\",{\"1\":{\"2199\":1}}],[\"等软件在编辑时按\",{\"1\":{\"1620\":1,\"1664\":1}}],[\"等来设计\",{\"1\":{\"1500\":1}}],[\"等信息\",{\"1\":{\"1388\":1}}],[\"等等方法\",{\"1\":{\"5993\":1}}],[\"等等属于接收的范围\",{\"1\":{\"2080\":1}}],[\"等等\",{\"1\":{\"1238\":1}}],[\"等方法获取class对象\",{\"1\":{\"5824\":1}}],[\"等方法\",{\"1\":{\"820\":1,\"1520\":1}}],[\"等\",{\"1\":{\"790\":1,\"935\":1,\"943\":1,\"1191\":1,\"1928\":1,\"2339\":1,\"3534\":1,\"4717\":1,\"4722\":1,\"6905\":1}}],[\"等处理都很不方便\",{\"1\":{\"740\":1}}],[\"给你展示下如何通过注解实现解耦的\",{\"1\":{\"4688\":1}}],[\"给jvm环境参数设置\",{\"1\":{\"3445\":1}}],[\"给依赖的模块提供稳定且易用的抽象接口\",{\"1\":{\"2762\":1}}],[\"给调用者使用\",{\"1\":{\"2708\":1}}],[\"给子类具体实现\",{\"1\":{\"2535\":1}}],[\"给子系统中的一组接口提供一个一致的界面\",{\"1\":{\"1123\":1}}],[\"给整体项目带来无法预料的风险\",{\"1\":{\"2046\":1}}],[\"给目标对象\",{\"1\":{\"1871\":1,\"1873\":1}}],[\"给每个网站租用一个空间\",{\"1\":{\"1413\":1}}],[\"给客户\",{\"1\":{\"1408\":1}}],[\"给希腊披萨\",{\"1\":{\"1197\":1}}],[\"给制作奶酪披萨\",{\"1\":{\"1197\":1}}],[\"给定一个语言\",{\"1\":{\"1070\":1}}],[\"给我们的遥控器设置命令\",{\"1\":{\"783\":2}}],[\"给我们的按钮设置你需要的命令\",{\"1\":{\"781\":1}}],[\"给出实现化角色接口的具体实现\",{\"1\":{\"602\":1}}],[\"控制在1000\",{\"1\":{\"3390\":1}}],[\"控制语句\",{\"0\":{\"3183\":1}}],[\"控制或扩展真实主题的功能\",{\"1\":{\"1830\":1}}],[\"控制器\",{\"1\":{\"1570\":1}}],[\"控制器类\",{\"1\":{\"778\":1}}],[\"控制所有智能家电的需要\",{\"1\":{\"770\":1}}],[\"电话集成和强大安全性能\",{\"1\":{\"6506\":1}}],[\"电话\",{\"1\":{\"3345\":1}}],[\"电话和地址等信息\",{\"1\":{\"1927\":1}}],[\"电影或电视剧中的人物角色\",{\"1\":{\"2929\":1}}],[\"电审失败\",{\"1\":{\"2465\":1}}],[\"电审\",{\"1\":{\"2465\":1}}],[\"电子邮件信息\",{\"1\":{\"2078\":1,\"2082\":1}}],[\"电源适配\",{\"1\":{\"1014\":1}}],[\"电视工厂\",{\"1\":{\"1272\":1}}],[\"电视机开始播放\",{\"1\":{\"1589\":1}}],[\"电视机\",{\"1\":{\"1588\":1,\"1603\":1}}],[\"电视机关闭了\",{\"1\":{\"779\":1}}],[\"电视机打开了\",{\"1\":{\"779\":1}}],[\"电视的遥控器\",{\"1\":{\"779\":1}}],[\"电视的关机类\",{\"1\":{\"777\":1}}],[\"电视的开机类\",{\"1\":{\"777\":1}}],[\"电灯关闭了\",{\"1\":{\"779\":1}}],[\"电灯打开了\",{\"1\":{\"779\":1}}],[\"电压大于5v\",{\"1\":{\"522\":1,\"542\":1}}],[\"电压为5v\",{\"1\":{\"522\":1,\"542\":1}}],[\"电压\",{\"1\":{\"520\":1,\"540\":1}}],[\"电压=\",{\"1\":{\"520\":1,\"540\":1}}],[\"洗衣机\",{\"1\":{\"768\":1}}],[\"解码方法\",{\"1\":{\"6896\":1}}],[\"解释成\",{\"1\":{\"3214\":1}}],[\"解释公式和数值\",{\"1\":{\"1487\":1}}],[\"解释器或编译器的框架\",{\"1\":{\"6313\":1}}],[\"解释器类\",{\"1\":{\"1486\":1}}],[\"解释器模式在实际的软件开发中使用比较少\",{\"1\":{\"1500\":1}}],[\"解释器模式采用递归调用方法\",{\"1\":{\"1494\":1}}],[\"解释器模式会引起类膨胀\",{\"1\":{\"1494\":1}}],[\"解释器模式的应用场景\",{\"0\":{\"1495\":1}}],[\"解释器模式的注意事项和细节\",{\"0\":{\"1492\":1}}],[\"解释器模式的结构图如下图所示\",{\"1\":{\"1473\":1}}],[\"解释器模式的结构与\",{\"1\":{\"1466\":1}}],[\"解释器模式的结构与实现\",{\"0\":{\"1465\":1}}],[\"解释器模式来实现四则\",{\"0\":{\"1482\":1}}],[\"解释器模式包含以下主要角色\",{\"1\":{\"1467\":1}}],[\"解释器模式中的每条规则至少需要定义一个类\",{\"1\":{\"1463\":1}}],[\"解释器模式中通常使用大量的循环和递归调用\",{\"1\":{\"1462\":1}}],[\"解释器模式是一种类行为型模式\",{\"1\":{\"1457\":1}}],[\"解释器模式基本介绍\",{\"0\":{\"1453\":1}}],[\"解释器模式\",{\"1\":{\"1069\":1,\"1455\":1,\"2628\":1}}],[\"解释方法\",{\"1\":{\"1476\":1}}],[\"解析库\",{\"1\":{\"6909\":1}}],[\"解析\",{\"1\":{\"6661\":1}}],[\"解析指定的url配置文件\",{\"1\":{\"6258\":1}}],[\"解析配置文件和实例化服务提供者的工作由迭代器本身完成\",{\"1\":{\"6258\":1}}],[\"解析配置文件\",{\"1\":{\"6258\":1}}],[\"解析服务提供者配置文件中的一行\",{\"1\":{\"6258\":1}}],[\"解析失败处理的方法\",{\"1\":{\"6258\":1}}],[\"解析失败\",{\"1\":{\"3700\":1}}],[\"解析成biginteger\",{\"1\":{\"3399\":1}}],[\"解析为统一的\",{\"1\":{\"1357\":1}}],[\"解析出要创建的两个对象\",{\"1\":{\"1335\":1}}],[\"解耦为没有依赖关系\",{\"1\":{\"2780\":1}}],[\"解耦为了弱依赖关系\",{\"1\":{\"2778\":1}}],[\"解耦为何如此重要\",{\"0\":{\"2751\":1}}],[\"解耦\",{\"1\":{\"1146\":1,\"6141\":1}}],[\"解耦数据结构和数据操作\",{\"1\":{\"1082\":1}}],[\"解耦观察者与被观察者\",{\"1\":{\"1077\":1}}],[\"解耦请求与处理\",{\"1\":{\"1947\":1}}],[\"解耦请求与实现\",{\"1\":{\"755\":1}}],[\"解耦请求和处理\",{\"1\":{\"1052\":1}}],[\"解耦处理逻辑\",{\"1\":{\"1042\":1}}],[\"解决问题并且重新调用产生异常的方法\",{\"1\":{\"4808\":1}}],[\"解决多线程并行情况下使用锁造成性能损耗的一种机制\",{\"1\":{\"3541\":1}}],[\"解决资源不足的问题\",{\"1\":{\"3158\":1}}],[\"解决这个问题的根本方法就是\",{\"1\":{\"2706\":1}}],[\"解决了什么问题\",{\"1\":{\"2577\":1}}],[\"解决了\",{\"1\":{\"2306\":1}}],[\"解决了目标类和适配者类接口不一致的问题\",{\"1\":{\"492\":1}}],[\"解决线程安全问题\",{\"1\":{\"2304\":1,\"2310\":1,\"2313\":1}}],[\"解决方法\",{\"1\":{\"2119\":1}}],[\"解决方案就是虚拟机不初始化\",{\"1\":{\"5745\":1}}],[\"解决方案\",{\"1\":{\"615\":1,\"701\":1,\"844\":1,\"1643\":1,\"1966\":1,\"2574\":1}}],[\"解决系统的性能问题\",{\"1\":{\"1375\":1}}],[\"解决\",{\"1\":{\"1226\":1}}],[\"解决思路\",{\"1\":{\"1123\":1,\"1417\":1,\"2080\":1}}],[\"操作和清理html\",{\"1\":{\"6661\":1}}],[\"操作和流操作工具类\",{\"1\":{\"6413\":1}}],[\"操作和恢复\",{\"1\":{\"803\":1}}],[\"操作字节码进行测试和故障排除\",{\"1\":{\"6298\":1}}],[\"操作会将\",{\"1\":{\"5609\":1}}],[\"操作符是线程安全的吗\",{\"0\":{\"5604\":1}}],[\"操作的数据类型被指定为一个参数\",{\"1\":{\"4997\":1}}],[\"操作数据库异常类\",{\"1\":{\"4834\":1}}],[\"操作输入流和输出流时可能出现的异常\",{\"1\":{\"4828\":1}}],[\"操作日志\",{\"1\":{\"4693\":1}}],[\"操作人类别\",{\"1\":{\"4690\":1}}],[\"操作流程不允许\",{\"1\":{\"2467\":1}}],[\"操作系统默认\",{\"1\":{\"3443\":1}}],[\"操作系统会给新进程分配新的地址空间\",{\"1\":{\"2389\":1}}],[\"操作系统会启动一个进程\",{\"1\":{\"2389\":1}}],[\"操作系统中的文件系统\",{\"1\":{\"2258\":1}}],[\"操作分成\",{\"1\":{\"1136\":1}}],[\"操作时\",{\"1\":{\"803\":1}}],[\"操作\",{\"1\":{\"751\":1,\"777\":2,\"2948\":1}}],[\"方括号是类型而非变量的一部分\",{\"1\":{\"4117\":1}}],[\"方面的回滚方案\",{\"1\":{\"3404\":1}}],[\"方式连接\",{\"1\":{\"6982\":1}}],[\"方式编写\",{\"1\":{\"4168\":1,\"4173\":1,\"4175\":1,\"4182\":1,\"4185\":1,\"4188\":1}}],[\"方式解决\",{\"1\":{\"3378\":1}}],[\"方式表达逻辑\",{\"1\":{\"3194\":1}}],[\"方式传递\",{\"1\":{\"2088\":1}}],[\"方式二\",{\"1\":{\"1800\":1,\"2081\":1}}],[\"方式一\",{\"1\":{\"1799\":1,\"2076\":1}}],[\"方式\",{\"1\":{\"1795\":2,\"1797\":2,\"2082\":1,\"2089\":3,\"2546\":2,\"3287\":1,\"3418\":1}}],[\"方式存放系\",{\"1\":{\"1537\":1}}],[\"方言\",{\"1\":{\"1071\":1}}],[\"方案\",{\"0\":{\"900\":1,\"909\":1},\"1\":{\"913\":1}}],[\"方便部署和操作\",{\"1\":{\"6303\":1}}],[\"方便你快速学习\",{\"1\":{\"5238\":1}}],[\"方便系统间的解耦\",{\"1\":{\"3465\":1}}],[\"方便维护\",{\"1\":{\"3396\":1}}],[\"方便出错时回溯\",{\"1\":{\"3156\":1}}],[\"方便更好地进行重构\",{\"1\":{\"3074\":1}}],[\"方便客户端访问\",{\"1\":{\"1920\":1}}],[\"方便创建出复杂的层次结构\",{\"1\":{\"866\":1}}],[\"方便实现\",{\"1\":{\"751\":1}}],[\"方法吗\",{\"1\":{\"6933\":1}}],[\"方法之后\",{\"1\":{\"6806\":1}}],[\"方法返回类型是org\",{\"1\":{\"6207\":1}}],[\"方法返回值\",{\"1\":{\"2165\":1,\"5892\":1,\"5918\":1,\"5946\":1,\"5966\":1,\"5997\":1,\"6021\":1}}],[\"方法返回值中的类为直接的朋友\",{\"1\":{\"2162\":1}}],[\"方法创建的\",{\"1\":{\"6198\":1}}],[\"方法创建一个类的实例\",{\"1\":{\"4840\":1}}],[\"方法后返回\",{\"1\":{\"6105\":1}}],[\"方法列表需要进行过滤\",{\"1\":{\"6098\":1}}],[\"方法说明\",{\"1\":{\"5894\":1,\"5920\":1,\"5948\":1,\"5968\":1,\"5999\":1,\"6023\":1}}],[\"方法获取一个\",{\"1\":{\"5759\":1}}],[\"方法获取他们的类的信息\",{\"1\":{\"5091\":1}}],[\"方法和类清晰地描述\",{\"1\":{\"6847\":1}}],[\"方法和类\",{\"1\":{\"5660\":1}}],[\"方法关系特别紧密\",{\"1\":{\"5648\":1}}],[\"方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作\",{\"1\":{\"5661\":1}}],[\"方法在\",{\"1\":{\"5603\":1}}],[\"方法读取和修改\",{\"1\":{\"5519\":1}}],[\"方法签名相同\",{\"1\":{\"5479\":1}}],[\"方法签名可以是任意的\",{\"1\":{\"4485\":1}}],[\"方法隐式地被指定为\",{\"1\":{\"5479\":1}}],[\"方法并不是\",{\"1\":{\"5459\":1}}],[\"方法结果不变\",{\"1\":{\"5426\":1}}],[\"方法区逻辑上规范\",{\"1\":{\"5320\":1}}],[\"方法区还是堆区\",{\"1\":{\"5314\":1}}],[\"方法取得一个对象引用\",{\"1\":{\"5310\":1}}],[\"方法取值的时候\",{\"1\":{\"5140\":1}}],[\"方法只能存储整形\",{\"1\":{\"5093\":1}}],[\"方法未找到抛出的异常\",{\"1\":{\"4836\":1}}],[\"方法添加到原来的异常\",{\"1\":{\"4799\":1}}],[\"方法添加监听器\",{\"1\":{\"552\":1}}],[\"方法放在\",{\"1\":{\"4799\":1}}],[\"方法也可能抛出\",{\"1\":{\"4794\":1}}],[\"方法会被以一个字符串为参数的形式调用\",{\"1\":{\"6963\":1}}],[\"方法会打印这些详细信息\",{\"1\":{\"4759\":1}}],[\"方法会比较值和精度\",{\"1\":{\"3054\":1}}],[\"方法头中使用关键字throws\",{\"1\":{\"4742\":1}}],[\"方法上是否有mymethodannotation注解\",{\"1\":{\"4647\":1}}],[\"方法完成\",{\"1\":{\"4481\":1}}],[\"方法测试if条件或变量是true还是false\",{\"1\":{\"4365\":1}}],[\"方法测试一个变量是否为空或不为空\",{\"1\":{\"4364\":1}}],[\"方法测试两个对象引用指向完全相同的对象\",{\"1\":{\"4363\":1}}],[\"方法是field类本身的方法\",{\"1\":{\"5965\":1}}],[\"方法是相应对象整型的\",{\"1\":{\"5648\":1}}],[\"方法是一个本地方法\",{\"1\":{\"5603\":1}}],[\"方法是\",{\"1\":{\"4238\":1}}],[\"方法总会被标记\",{\"1\":{\"4226\":1}}],[\"方法总共会调用\",{\"1\":{\"3123\":1}}],[\"方法引用中的两个冒号\",{\"1\":{\"4045\":1,\"4081\":1}}],[\"方法重载\",{\"0\":{\"4000\":1}}],[\"方法或者构造方法的名称紧随着与它相连的开括号\",{\"1\":{\"4050\":1}}],[\"方法或\",{\"1\":{\"3936\":1}}],[\"方法使用\",{\"1\":{\"5759\":1}}],[\"方法使用注意等\",{\"1\":{\"3524\":1}}],[\"方法使用了设计模式\",{\"1\":{\"3001\":1}}],[\"方法内部类\",{\"1\":{\"5743\":1}}],[\"方法内部通过throw抛出异常\",{\"1\":{\"5705\":1}}],[\"方法内部多行注释使用\",{\"1\":{\"3212\":1}}],[\"方法内部单行注释\",{\"1\":{\"3212\":1}}],[\"方法内代码\",{\"1\":{\"3036\":1}}],[\"方法转为map集合时\",{\"1\":{\"3092\":1,\"3096\":1}}],[\"方法打印其属性值\",{\"1\":{\"3062\":1}}],[\"方法调用与\",{\"1\":{\"5520\":1}}],[\"方法调用了几次等\",{\"1\":{\"4473\":1}}],[\"方法调用时传递了哪些参数\",{\"1\":{\"4473\":1}}],[\"方法调用\",{\"1\":{\"3288\":1,\"6017\":1}}],[\"方法调用中的多个参数需要换行时\",{\"1\":{\"3030\":1}}],[\"方法调用的点符号与下文一起换行\",{\"1\":{\"3030\":1}}],[\"方法名称\",{\"1\":{\"5893\":1,\"5919\":1,\"5947\":1,\"5967\":1,\"5998\":1,\"6022\":1}}],[\"方法名可以任意\",{\"1\":{\"4299\":1}}],[\"方法名通常是动词或者动词短语\",{\"1\":{\"4174\":1}}],[\"方法名以\",{\"1\":{\"4173\":1}}],[\"方法名put\",{\"1\":{\"3221\":1}}],[\"方法名\",{\"0\":{\"4172\":1},\"1\":{\"2990\":1,\"5857\":1}}],[\"方法呢\",{\"1\":{\"2725\":1}}],[\"方法不能照抄到\",{\"1\":{\"2705\":1}}],[\"方法不能既负责摩托车\",{\"1\":{\"2015\":1}}],[\"方法省略\",{\"1\":{\"2452\":1}}],[\"方法进行同步效率太低\",{\"1\":{\"2307\":1}}],[\"方法进行依赖传递\",{\"1\":{\"2089\":1}}],[\"方法都要进行同步\",{\"1\":{\"2307\":1}}],[\"方法参数和本地变量\",{\"1\":{\"4589\":1}}],[\"方法参数在定义和传入时\",{\"1\":{\"3034\":1}}],[\"方法参数\",{\"1\":{\"2162\":1,\"2165\":1,\"4493\":1,\"4495\":1,\"4590\":1}}],[\"方法即可\",{\"1\":{\"2151\":1}}],[\"方法传递\",{\"1\":{\"2089\":1}}],[\"方法竟然直接引用\",{\"1\":{\"2077\":1}}],[\"方法赋值给成员变量即可\",{\"1\":{\"1799\":1}}],[\"方法里返回成员变量\",{\"1\":{\"1799\":1}}],[\"方法实现深拷贝\",{\"1\":{\"1790\":1}}],[\"方法来判断相等的对象\",{\"1\":{\"5648\":1}}],[\"方法来拷贝一个对象即复杂又有风险\",{\"1\":{\"5468\":1}}],[\"方法来替换公有字段\",{\"1\":{\"5368\":1}}],[\"方法来创建一个具有指定类型和维度的数组\",{\"1\":{\"5204\":1}}],[\"方法来获取\",{\"1\":{\"4799\":1}}],[\"方法来解决\",{\"1\":{\"2524\":1}}],[\"方法来实现深拷贝\",{\"1\":{\"1787\":1}}],[\"方法来实现\",{\"1\":{\"1783\":1}}],[\"方法来完成\",{\"1\":{\"1772\":1}}],[\"方法位于类的内部\",{\"1\":{\"1747\":1}}],[\"方法得到一个\",{\"1\":{\"1436\":1}}],[\"方法二\",{\"1\":{\"1212\":1,\"4867\":1}}],[\"方法一\",{\"1\":{\"1212\":1,\"4864\":1}}],[\"方法就是计算费用\",{\"1\":{\"905\":1}}],[\"方法就可以让接收者工作\",{\"1\":{\"793\":1}}],[\"方法中使用父类\",{\"1\":{\"5775\":1}}],[\"方法中使用到\",{\"1\":{\"2862\":1}}],[\"方法中不能有\",{\"1\":{\"5490\":1}}],[\"方法中传入的是user类的完整路径\",{\"1\":{\"5030\":1}}],[\"方法中的参数是何种类型\",{\"1\":{\"5030\":1}}],[\"方法中的条件\",{\"1\":{\"458\":1}}],[\"方法中应该避免使用一个字符的参数名\",{\"1\":{\"4186\":1}}],[\"方法中判断是否已经超过阀值\",{\"1\":{\"1981\":1}}],[\"方法中\",{\"1\":{\"789\":1,\"1122\":1,\"1436\":1,\"2371\":1}}],[\"方法被调用\",{\"1\":{\"766\":1}}],[\"方法的历史以及更多的信息\",{\"1\":{\"6978\":1}}],[\"方法的实现比较简单\",{\"1\":{\"5268\":1}}],[\"方法的实现者\",{\"1\":{\"740\":1}}],[\"方法的时候需要重写\",{\"0\":{\"5643\":1}}],[\"方法的时候\",{\"1\":{\"5094\":1}}],[\"方法的返回值也是class<t>\",{\"1\":{\"5030\":1}}],[\"方法的返回值可以为null\",{\"1\":{\"3275\":1}}],[\"方法的注解信息\",{\"1\":{\"4602\":1}}],[\"方法的假对象\",{\"1\":{\"4467\":1}}],[\"方法的参数\",{\"1\":{\"2947\":1}}],[\"方法的参数或者对静态方法的调用来访问另一个类\",{\"1\":{\"2850\":1}}],[\"方法的\",{\"1\":{\"2738\":3}}],[\"方法的父类\",{\"1\":{\"2725\":1}}],[\"方法的对象\",{\"1\":{\"2019\":1}}],[\"方法的请求者\",{\"1\":{\"740\":1}}],[\"方法的条件下\",{\"1\":{\"452\":1}}],[\"方法\",{\"0\":{\"5602\":1,\"5643\":1,\"6106\":1},\"1\":{\"457\":1,\"571\":1,\"718\":1,\"766\":1,\"789\":1,\"823\":1,\"850\":1,\"852\":1,\"854\":1,\"906\":1,\"1172\":1,\"1197\":1,\"1246\":1,\"1345\":1,\"1436\":1,\"1549\":1,\"1697\":1,\"1746\":1,\"1768\":1,\"1795\":1,\"1799\":1,\"1842\":2,\"1855\":1,\"1903\":1,\"1905\":1,\"2052\":2,\"2058\":2,\"2151\":1,\"2152\":1,\"2157\":1,\"2183\":1,\"2290\":1,\"2323\":1,\"2369\":2,\"2373\":1,\"2703\":1,\"2705\":1,\"2712\":1,\"2725\":1,\"2727\":1,\"2737\":1,\"3054\":2,\"3063\":1,\"3074\":1,\"3076\":1,\"3090\":1,\"3241\":1,\"3278\":1,\"3293\":1,\"4062\":1,\"4313\":1,\"4397\":1,\"4467\":1,\"4481\":2,\"4520\":1,\"4524\":1,\"4589\":1,\"4603\":2,\"4799\":1,\"5094\":1,\"5272\":1,\"5326\":1,\"5328\":1,\"5329\":1,\"5380\":1,\"5390\":1,\"5432\":1,\"5443\":1,\"5444\":1,\"5454\":2,\"5459\":2,\"5477\":1,\"5646\":1,\"5775\":2,\"5821\":1,\"5822\":1,\"5845\":1,\"6011\":1,\"6061\":1,\"6065\":1,\"6114\":1,\"6191\":1,\"6192\":1,\"6200\":1,\"6836\":1}}],[\"方法时应当总是覆盖\",{\"1\":{\"5443\":1}}],[\"方法时\",{\"1\":{\"457\":1,\"3107\":1,\"5775\":1}}],[\"结尾\",{\"1\":{\"4171\":1}}],[\"结尾的单个语句的地方\",{\"1\":{\"4014\":1}}],[\"结果都为\",{\"1\":{\"5429\":1}}],[\"结果如下\",{\"1\":{\"5168\":1}}],[\"结果就是\",{\"1\":{\"4862\":1}}],[\"结果出现\",{\"1\":{\"3399\":1}}],[\"结果等于\",{\"1\":{\"3065\":1}}],[\"结论\",{\"1\":{\"2291\":1,\"2296\":1,\"2302\":1,\"2308\":1,\"2318\":1,\"2326\":1,\"2332\":1}}],[\"结构清晰\",{\"1\":{\"2422\":1}}],[\"结构与实现\",{\"1\":{\"1662\":1}}],[\"结构复杂度\",{\"1\":{\"1259\":1}}],[\"结构图\",{\"1\":{\"1187\":1}}],[\"结构图如下所示\",{\"1\":{\"1522\":1}}],[\"结构图如下\",{\"1\":{\"763\":1,\"2950\":1}}],[\"结构\",{\"1\":{\"930\":1,\"1359\":1,\"6749\":1}}],[\"结构型模式\",{\"1\":{\"2601\":1,\"2611\":1}}],[\"结构型模式和行为型模式\",{\"1\":{\"2599\":1}}],[\"结构型代理模式\",{\"0\":{\"1807\":1}}],[\"结构型享元模式\",{\"0\":{\"1370\":1}}],[\"结构型外观模式\",{\"0\":{\"1091\":1}}],[\"结构型设计模式\",{\"0\":{\"976\":1}}],[\"结构型装饰者模式\",{\"0\":{\"873\":1}}],[\"结构型组合模式\",{\"0\":{\"804\":1}}],[\"结构型桥接模式\",{\"0\":{\"584\":1}}],[\"结构型适配器模式\",{\"0\":{\"483\":1}}],[\"结合了传统的rdbms和nosql的最佳特性\",{\"1\":{\"6396\":1}}],[\"结合业界分层规范与流行技术框架分析\",{\"1\":{\"3409\":1}}],[\"结合一线开发的实践经验和故障案例\",{\"1\":{\"2983\":1}}],[\"结合装饰器模式会更加灵活\",{\"1\":{\"752\":1}}],[\"结合\",{\"1\":{\"750\":1,\"751\":1}}],[\"且只能被接口类直接调用\",{\"1\":{\"5697\":1}}],[\"且只执行一次\",{\"1\":{\"4329\":1}}],[\"且很容易出现java\",{\"1\":{\"5007\":1}}],[\"且未处理异常\",{\"1\":{\"4957\":1}}],[\"且该注解为可继承的\",{\"1\":{\"4632\":1}}],[\"且必须是\",{\"1\":{\"4485\":1}}],[\"且也只执行一次\",{\"1\":{\"4332\":1}}],[\"且所有的测试类必须继承junit的测试基类\",{\"1\":{\"4293\":1}}],[\"且存在复杂的依赖关系\",{\"1\":{\"3454\":1}}],[\"且版本号不允许覆盖升级\",{\"1\":{\"3428\":1}}],[\"且使用的系统和事务日志资源少\",{\"1\":{\"3392\":1}}],[\"且扩大了表示范围\",{\"1\":{\"3366\":1}}],[\"且异常的处理效率比条件判断方式要低很多\",{\"1\":{\"3266\":1}}],[\"且表意完整\",{\"1\":{\"3227\":1}}],[\"且在size处插入null值\",{\"1\":{\"3106\":1}}],[\"且构造方法被默认强制是私有\",{\"1\":{\"3005\":1}}],[\"且不用修改原来的程序代码与数据结构\",{\"1\":{\"2930\":1}}],[\"且不具备扩展性\",{\"1\":{\"2416\":1}}],[\"且每种元素也存在多种不同的访问者和处理方式\",{\"1\":{\"2928\":1}}],[\"且这种耦合关系非常脆弱\",{\"1\":{\"2782\":1}}],[\"且这两个维度都需要进行扩展时\",{\"1\":{\"642\":1}}],[\"且算法的改变不会影响使用算法的客户\",{\"1\":{\"2630\":1}}],[\"且算法的变化不会影响使用算法的客户\",{\"1\":{\"2488\":1}}],[\"且要求对客户隐藏具体算法的实现细节时\",{\"1\":{\"2558\":1}}],[\"且减少对象间的相互依赖\",{\"1\":{\"2423\":1}}],[\"且增加新的状态时要添加新的\",{\"1\":{\"2416\":1}}],[\"且经常使用\",{\"1\":{\"2344\":1}}],[\"且加入到\",{\"1\":{\"1605\":1}}],[\"且可以用一种简单的语言来进行表达时\",{\"1\":{\"1498\":1}}],[\"且可将不同部分外部化\",{\"1\":{\"1450\":1}}],[\"且执行效率不是关键问题时\",{\"1\":{\"1497\":1}}],[\"且代码的调试过程也比较麻烦\",{\"1\":{\"1462\":1}}],[\"且工厂类代码会非常臃肿\",{\"1\":{\"1179\":1}}],[\"且命令实现不稳定\",{\"1\":{\"798\":1}}],[\"且满足\",{\"1\":{\"749\":1}}],[\"餐厅提供的菜单就相当于把请求和处理进行了解耦\",{\"1\":{\"746\":1}}],[\"客户就要求新增电话订单的功能\",{\"1\":{\"2799\":1}}],[\"客户通过组合方式使用策略模式\",{\"1\":{\"2493\":1}}],[\"客户类\",{\"1\":{\"1946\":1}}],[\"客户不用再考虑聚合的类型\",{\"1\":{\"1554\":1}}],[\"客户不关心创建产品的细节\",{\"1\":{\"1274\":1}}],[\"客户要一个以博客形式发布的网站\",{\"1\":{\"1431\":3}}],[\"客户要一个以新闻形式发布的网站\",{\"1\":{\"1431\":1}}],[\"客户只需要将请求发送到职责链上即可\",{\"1\":{\"1930\":1}}],[\"客户只知道创建产品的工厂名\",{\"1\":{\"1272\":1}}],[\"客户只要调用一个接口\",{\"1\":{\"1126\":1}}],[\"客户在点披萨时\",{\"1\":{\"1236\":1}}],[\"客户角色通过享元工厂获取具体享元\",{\"1\":{\"1403\":1}}],[\"客户角色\",{\"1\":{\"1114\":1}}],[\"客户\",{\"1\":{\"1111\":1,\"1408\":1}}],[\"客户可以根据不同时间或空间要求选择不同的\",{\"1\":{\"2497\":1}}],[\"客户可以通过外观角色访问它\",{\"1\":{\"1110\":1}}],[\"客户可以点单品咖啡\",{\"1\":{\"899\":1}}],[\"客户对系统的访问也变得越来越复杂\",{\"1\":{\"1094\":1}}],[\"客户访问调用者的call\",{\"1\":{\"766\":1}}],[\"客户端使用ajax\",{\"1\":{\"6676\":1}}],[\"客户端接口级别\",{\"1\":{\"3442\":1}}],[\"客户端special\",{\"1\":{\"3442\":1}}],[\"客户端设置远程接口方法的具体超时时间\",{\"1\":{\"3442\":1}}],[\"客户端增加行为不用修改原有代码\",{\"1\":{\"2550\":1}}],[\"客户端必须理解所有策略算法的区别\",{\"1\":{\"2501\":1}}],[\"客户端必须明确的知道有多少个审批级别和访问\",{\"1\":{\"1964\":1}}],[\"客户端无需改变\",{\"1\":{\"2082\":1}}],[\"客户端无需知道所创建具体产品的类名\",{\"1\":{\"1176\":1}}],[\"客户端这里会使用到分支判断\",{\"1\":{\"1962\":1}}],[\"客户端可能会重用之前的请求结果\",{\"1\":{\"3234\":1}}],[\"客户端可按下图所示设置职责链\",{\"1\":{\"1950\":1}}],[\"客户端可以对其随意修改\",{\"1\":{\"5366\":1}}],[\"客户端可以免除直接创建产品对象的职责\",{\"1\":{\"1175\":1}}],[\"客户端可以通过它访问各个子系统的功能\",{\"1\":{\"1106\":1}}],[\"客户端要遍历聚合的时候只能取到迭代器\",{\"1\":{\"1555\":1}}],[\"客户端也要跟着改变\",{\"1\":{\"1094\":1}}],[\"客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题\",{\"1\":{\"864\":1}}],[\"客户端在调用时要知道树叶对象和树枝对象的存在\",{\"1\":{\"826\":1}}],[\"客户端需要花更多时间理清类之间的层次关系\",{\"1\":{\"814\":1}}],[\"客户端不应该依赖它不需要的接口\",{\"1\":{\"2033\":1}}],[\"客户端不用理会组合里面的组成细节\",{\"1\":{\"866\":1}}],[\"客户端不用做出任何改动\",{\"1\":{\"865\":1}}],[\"客户端不会因为加入了新的对象而更改源代码\",{\"1\":{\"812\":1}}],[\"客户端不必知道产品内部组成的细节\",{\"1\":{\"669\":1}}],[\"客户端\",{\"1\":{\"722\":1,\"1472\":1,\"2188\":1,\"2194\":1}}],[\"客户端通过适配器可以透明地调用目标接口\",{\"1\":{\"490\":1}}],[\"客人来了就只需要点菜\",{\"1\":{\"746\":1}}],[\"菜单不是等到客人来了之后才定制的\",{\"1\":{\"746\":1}}],[\"士兵\",{\"1\":{\"744\":1,\"745\":1}}],[\"士兵去执行\",{\"1\":{\"744\":1}}],[\"命名为checked\",{\"1\":{\"5715\":1}}],[\"命名\",{\"0\":{\"4160\":1}}],[\"命名方式\",{\"1\":{\"3286\":1}}],[\"命名风格\",{\"0\":{\"2985\":1}}],[\"命名模式使得\",{\"1\":{\"742\":1}}],[\"命令行参数解析器\",{\"1\":{\"6648\":1,\"6654\":1}}],[\"命令对象起到了纽带桥梁的作用\",{\"1\":{\"793\":1}}],[\"命令对象会负责让接收者执行请求的动作\",{\"1\":{\"793\":1}}],[\"命令接口的子类还有\",{\"1\":{\"790\":1}}],[\"命令调用者是\",{\"1\":{\"789\":1}}],[\"命令类\",{\"1\":{\"776\":1}}],[\"命令\",{\"1\":{\"744\":1}}],[\"命令的具体执行者\",{\"1\":{\"744\":1}}],[\"命令发布者\",{\"1\":{\"744\":1}}],[\"命令模式通常适用于以下场景\",{\"1\":{\"799\":1}}],[\"命令模式不足\",{\"1\":{\"795\":1}}],[\"命令模式的应用场景\",{\"0\":{\"797\":1}}],[\"命令模式的注意事项和细节\",{\"0\":{\"792\":1}}],[\"命令模式的结构与实现\",{\"0\":{\"756\":1}}],[\"命令模式的结果其实就是接收方的执行结果\",{\"1\":{\"755\":1}}],[\"命令模式可以定义宏命令来实现该功能\",{\"1\":{\"802\":1}}],[\"命令模式可以方便地实现这些功能\",{\"1\":{\"801\":1}}],[\"命令模式可以使调用者和接收者不直接交互\",{\"1\":{\"800\":1}}],[\"命令模式可以与\",{\"1\":{\"750\":1,\"751\":1}}],[\"命令模式可将\",{\"1\":{\"771\":1}}],[\"命令模式解决智能生活项目\",{\"0\":{\"767\":1}}],[\"命令模式包含以下主要角色\",{\"1\":{\"758\":1}}],[\"命令模式\",{\"1\":{\"741\":1,\"770\":1,\"1049\":1,\"2622\":1}}],[\"命令模式就能很好地解决这个问题\",{\"1\":{\"740\":1}}],[\"命令模式基本介绍\",{\"0\":{\"739\":1}}],[\"撤销动作\",{\"1\":{\"777\":1}}],[\"撤销\",{\"1\":{\"740\":1}}],[\"或log打印\",{\"1\":{\"5887\":1}}],[\"或接口\",{\"1\":{\"5824\":1}}],[\"或等价的\",{\"1\":{\"3954\":1}}],[\"或消息通知等非关键功能\",{\"1\":{\"3456\":1}}],[\"或近硬件端系统谨慎引入第三方实现\",{\"1\":{\"3434\":1}}],[\"或表名\",{\"1\":{\"3388\":3}}],[\"或count\",{\"1\":{\"3380\":1}}],[\"或动态生成类的相关方法时\",{\"1\":{\"3274\":1}}],[\"或用户输入密码过于简单\",{\"1\":{\"3267\":1}}],[\"或用户名称已存在\",{\"1\":{\"3267\":1}}],[\"或程序健壮性差等问题\",{\"1\":{\"3254\":1}}],[\"或空集合\",{\"1\":{\"3225\":1}}],[\"或使用bigdecimal的valueof方法\",{\"1\":{\"3056\":1}}],[\"或作为返回值\",{\"1\":{\"2919\":1}}],[\"或下载\",{\"1\":{\"2708\":3}}],[\"或实例化耗时较长\",{\"1\":{\"2344\":1}}],[\"或添加新的处理者\",{\"1\":{\"1986\":1}}],[\"或\",{\"1\":{\"1500\":1,\"2416\":1,\"3188\":2,\"3196\":1,\"4001\":1,\"4089\":1,\"4249\":1,\"4473\":1,\"5603\":2}}],[\"或者甚至\",{\"1\":{\"6902\":1}}],[\"或者工具包都有一个\",{\"1\":{\"6870\":1}}],[\"或者它本身已经很明显是什么意思了\",{\"1\":{\"6848\":1}}],[\"或者干脆别用\",{\"1\":{\"6817\":1}}],[\"或者某些类实例化很耗时\",{\"1\":{\"6266\":1}}],[\"或者某些数据\",{\"1\":{\"1619\":1}}],[\"或者在方法签名里通过throws子句声明\",{\"1\":{\"5715\":1}}],[\"或者在字节码修改框架\",{\"1\":{\"3274\":1}}],[\"或者a的子类类型\",{\"1\":{\"5037\":1}}],[\"或者无法确定这里的代码未来是不是会改动\",{\"1\":{\"4912\":1}}],[\"或者使用\",{\"1\":{\"4863\":1}}],[\"或者使用dateutils工具类\",{\"1\":{\"3160\":1}}],[\"或者更多\",{\"1\":{\"4251\":1}}],[\"或者如这个单行例子所示\",{\"1\":{\"4245\":1}}],[\"或者如果打印日志是\",{\"1\":{\"4229\":1}}],[\"或者以此为开头\",{\"1\":{\"4232\":1}}],[\"或者抛出异常\",{\"1\":{\"4124\":1}}],[\"或者会在声明之后立即初始化\",{\"1\":{\"4111\":1}}],[\"或者分组括号不会更有助于阅读代码的情况下\",{\"1\":{\"4098\":1}}],[\"或者最后一个成员或初始化方法的之后\",{\"1\":{\"4066\":1}}],[\"或者偶尔使用实际的\",{\"1\":{\"3955\":1}}],[\"或者抽象公共类\",{\"1\":{\"3467\":1}}],[\"或者架构不兼容升级\",{\"1\":{\"3427\":1}}],[\"或者大规模api不兼容\",{\"1\":{\"3427\":1}}],[\"或者不复用的业务简单处理等\",{\"1\":{\"3412\":1}}],[\"或者不同代码块的局部变量之间采用完全相同的命名\",{\"1\":{\"2996\":1}}],[\"或者对单元测试产生的数据有明确的前后缀标识\",{\"1\":{\"3316\":1}}],[\"或者对着空白处右键\",{\"1\":{\"2840\":1}}],[\"或者直接操作数据库把数据插入进去\",{\"1\":{\"3315\":1}}],[\"或者空对象等\",{\"1\":{\"3275\":1}}],[\"或者捕获异常是抛异常的父类\",{\"1\":{\"3273\":1}}],[\"或者用户端的日志中\",{\"1\":{\"3228\":1}}],[\"或者调用注意事项\",{\"1\":{\"3209\":1}}],[\"或者错误的部分\",{\"1\":{\"6989\":1}}],[\"或者错误\",{\"1\":{\"3205\":1}}],[\"或者多个同名方法\",{\"1\":{\"3066\":1}}],[\"或者入库检查\",{\"1\":{\"3058\":1}}],[\"或者很少需要\",{\"1\":{\"2754\":1}}],[\"或者说\",{\"1\":{\"2757\":1}}],[\"或者说某些步骤的实现与具体的环境相关\",{\"1\":{\"2635\":1}}],[\"或者说提前写好的\",{\"1\":{\"1364\":1}}],[\"或者行为\",{\"1\":{\"2550\":1}}],[\"或者实例\",{\"1\":{\"2386\":1}}],[\"或者从系统上来讲应当是单一控制逻辑的操作\",{\"1\":{\"2347\":1}}],[\"或者其他的静态方法\",{\"1\":{\"2290\":1}}],[\"或者尽可能少修改代码\",{\"1\":{\"2147\":1}}],[\"或者两者都有\",{\"1\":{\"2093\":1}}],[\"或者是此类型的父类\",{\"1\":{\"5046\":1}}],[\"或者是此类型的子类\",{\"1\":{\"5046\":1}}],[\"或者是鼓励的\",{\"1\":{\"4067\":1}}],[\"或者是依照表在sql语句中出现的顺序\",{\"1\":{\"3389\":1}}],[\"或者是记录已经达成的共同意见的事情\",{\"1\":{\"1619\":1}}],[\"或者是伦敦的奶酪\",{\"1\":{\"1236\":1}}],[\"或者执行流程改变时\",{\"1\":{\"1595\":1}}],[\"或者\",{\"0\":{\"3977\":1},\"1\":{\"1569\":1,\"1936\":1,\"2694\":1,\"3952\":1,\"3972\":1,\"4019\":1,\"4031\":1,\"4119\":2,\"4166\":1,\"4169\":1,\"4174\":1,\"4183\":1,\"4201\":1,\"4254\":1,\"4257\":1,\"4906\":1,\"5380\":1,\"5607\":1,\"6099\":1,\"6803\":2,\"6822\":1,\"6836\":1,\"6837\":1,\"6842\":1,\"6876\":1,\"6906\":1,\"6939\":1,\"6987\":1,\"6992\":1}}],[\"或者遍历一组相同对象时使用\",{\"1\":{\"1557\":1}}],[\"或者还有其他方式\",{\"1\":{\"1505\":1}}],[\"或者叫依赖注入容器\",{\"1\":{\"1325\":1}}],[\"或者称为进一步的抽象\",{\"1\":{\"1279\":1}}],[\"或者一个新的调料\",{\"1\":{\"908\":1}}],[\"或者处理的对象具有树形结构时\",{\"1\":{\"867\":1}}],[\"或者产品类中不同的调用顺序产生不同的作用\",{\"1\":{\"736\":1}}],[\"或缺省适配器模式\",{\"1\":{\"548\":1}}],[\"多途加密开发库\",{\"1\":{\"6599\":1}}],[\"多协议\",{\"1\":{\"6542\":1}}],[\"多播消息传递工具\",{\"1\":{\"6496\":1}}],[\"多语言事件驱动应用框架\",{\"1\":{\"6379\":1}}],[\"多对多这种关联关系来表示\",{\"1\":{\"5796\":1}}],[\"多对\",{\"1\":{\"5796\":1}}],[\"多次调用\",{\"1\":{\"5426\":1}}],[\"多次调用会取得同一个对象的引用\",{\"1\":{\"5266\":1}}],[\"多元泛型\",{\"1\":{\"5016\":1}}],[\"多用于在多系统集成时\",{\"1\":{\"4756\":1}}],[\"多用组合少用继承\",{\"0\":{\"2720\":1},\"1\":{\"2721\":1,\"2749\":1,\"2781\":1}}],[\"多用组合\",{\"1\":{\"2493\":1,\"2549\":1}}],[\"多块语句\",{\"1\":{\"4019\":1}}],[\"多表关联中存在多\",{\"1\":{\"3907\":1}}],[\"多表关联查询时\",{\"1\":{\"3369\":1}}],[\"多见于数据迁移场景中\",{\"1\":{\"3417\":1}}],[\"多层条件语句建议使用卫语句\",{\"1\":{\"3324\":1}}],[\"多层级嵌套使用\",{\"1\":{\"1735\":1}}],[\"多线程并行处理定时任务时\",{\"1\":{\"3174\":1}}],[\"多线程中的线程池\",{\"1\":{\"2258\":1}}],[\"多重条件语句不易维护\",{\"1\":{\"2495\":1}}],[\"多例模式创建的对象都是同一个类的对象\",{\"1\":{\"2412\":1}}],[\"多例\",{\"1\":{\"2408\":1}}],[\"多态在新窗口打开\",{\"1\":{\"5812\":1}}],[\"多态分为编译时多态和运行时多态\",{\"1\":{\"5768\":1}}],[\"多态性\",{\"1\":{\"5075\":1}}],[\"多态特性我们可以利用接口来实现\",{\"1\":{\"2740\":1}}],[\"多态特性的支持也不友好\",{\"1\":{\"2356\":1}}],[\"多态都支持得不好\",{\"1\":{\"2352\":1}}],[\"多态\",{\"0\":{\"5767\":1},\"1\":{\"2352\":1,\"5673\":1}}],[\"多态等\",{\"1\":{\"645\":1}}],[\"多个并发多线程使用\",{\"1\":{\"6268\":1}}],[\"多个限制\",{\"1\":{\"5053\":1}}],[\"多个注解\",{\"1\":{\"4143\":1}}],[\"多个连续的空行是允许的\",{\"1\":{\"4067\":1}}],[\"多个构造方法次序\",{\"1\":{\"3532\":1}}],[\"多个参数逗号后面必须加空格\",{\"1\":{\"3034\":1}}],[\"多个对象间存在一对多关系\",{\"1\":{\"2625\":1}}],[\"多个对象可以处理一个请求\",{\"1\":{\"1985\":1}}],[\"多个类只区别在表现行为不同\",{\"1\":{\"2560\":1}}],[\"多个部件或零件\",{\"1\":{\"735\":1}}],[\"产生的异常类型有很多\",{\"1\":{\"3418\":1}}],[\"产生的后果与说明二相同\",{\"1\":{\"3167\":1}}],[\"产生不同的结果\",{\"1\":{\"734\":1}}],[\"产品运行时错误监测及调试商业工具\",{\"1\":{\"6524\":1}}],[\"产品方向改变\",{\"1\":{\"3427\":1}}],[\"产品簇\",{\"1\":{\"1300\":1}}],[\"产品线名\",{\"1\":{\"3426\":1}}],[\"产品线\",{\"1\":{\"1300\":1}}],[\"产品标准化\",{\"1\":{\"958\":1}}],[\"产品类非常复杂\",{\"1\":{\"736\":1}}],[\"产品角色\",{\"1\":{\"675\":1,\"681\":1}}],[\"产品的组成部分必须相同\",{\"1\":{\"671\":1}}],[\"采取前两种方案的结果可能是用10个\",{\"1\":{\"4448\":1}}],[\"采取一定的方法保证在整个的软件系统中\",{\"1\":{\"2259\":1}}],[\"采纳为面向对象的建模语言的国际标准\",{\"1\":{\"2807\":1}}],[\"采购员采购教学器材\",{\"1\":{\"1955\":1}}],[\"采购员不可能自己去组装计算机\",{\"1\":{\"661\":1}}],[\"采购审批流程\",{\"1\":{\"1927\":1}}],[\"采用java编程语言开发的实时协作服务器\",{\"1\":{\"6505\":1}}],[\"采用约定优于配置方式进行管理\",{\"1\":{\"6290\":1}}],[\"采用署名\",{\"1\":{\"4458\":1}}],[\"采用和\",{\"1\":{\"3512\":1}}],[\"采用\",{\"1\":{\"3024\":1,\"5310\":1}}],[\"采用不同的\",{\"1\":{\"2354\":1}}],[\"采用组合或聚合复用时\",{\"1\":{\"2219\":1}}],[\"采用依赖\",{\"1\":{\"2121\":1}}],[\"采用了类似递归的方式\",{\"1\":{\"1982\":1}}],[\"采用继承关系很难实现\",{\"1\":{\"941\":1}}],[\"采用备忘录模式来实现\",{\"1\":{\"803\":1}}],[\"采用命令模式增加与删除命令不会影响其他类\",{\"1\":{\"749\":1}}],[\"采用抽象工厂模式不需要关心构建过程\",{\"1\":{\"729\":1}}],[\"具有广泛影响且值得阅读的java经典书籍\",{\"1\":{\"6689\":1}}],[\"具有public修饰的字段\",{\"1\":{\"5957\":1}}],[\"具有public访问权限的构造函数对象\",{\"1\":{\"5900\":1}}],[\"具有和\",{\"1\":{\"5570\":1}}],[\"具有回归性\",{\"1\":{\"4443\":1}}],[\"具有自动化\",{\"1\":{\"3299\":1}}],[\"具有实用\",{\"1\":{\"3235\":1}}],[\"具有实时要求的工业系统或工业过程等\",{\"1\":{\"2817\":1}}],[\"具有很宽的应用领域\",{\"1\":{\"2817\":1}}],[\"具有更好的\",{\"1\":{\"2581\":1}}],[\"具有更好的维护性和扩展性\",{\"1\":{\"2504\":1}}],[\"具有良好的扩展性\",{\"1\":{\"898\":1}}],[\"具有较强的扩展性\",{\"1\":{\"865\":1}}],[\"具有不同分类维度的产品组合\",{\"1\":{\"729\":1}}],[\"具备良好的扩展性\",{\"1\":{\"798\":1}}],[\"具体厂商或者框架开发者实现\",{\"0\":{\"6230\":1},\"1\":{\"6226\":1}}],[\"具体日志库相关可以看这篇\",{\"1\":{\"6197\":1}}],[\"具体看如下表格\",{\"1\":{\"5317\":1}}],[\"具体可以查看后文解释\",{\"1\":{\"5065\":1}}],[\"具体可以参考下文中关于泛型数组的理解\",{\"1\":{\"5057\":1}}],[\"具体错误原因请参考后文\",{\"1\":{\"5034\":1}}],[\"具体原理参考\",{\"1\":{\"3048\":1}}],[\"具体原型类\",{\"1\":{\"1752\":1}}],[\"具体元素b的操作\",{\"1\":{\"2953\":1}}],[\"具体元素a的操作\",{\"1\":{\"2953\":1}}],[\"具体元素\",{\"1\":{\"2948\":1}}],[\"具体访问者b访问\",{\"1\":{\"2953\":2}}],[\"具体访问者a访问\",{\"1\":{\"2953\":2}}],[\"具体访问者\",{\"1\":{\"2946\":1,\"2953\":2}}],[\"具体来讲\",{\"1\":{\"2706\":1}}],[\"具体来说\",{\"1\":{\"2133\":1,\"2403\":1}}],[\"具体子类\",{\"1\":{\"2658\":1,\"2663\":1}}],[\"具体方法\",{\"1\":{\"2656\":1,\"2663\":1,\"2962\":1}}],[\"具体策略b的策略方法被访问\",{\"1\":{\"2512\":1}}],[\"具体策略a的策略方法被访问\",{\"1\":{\"2512\":1}}],[\"具体策略类\",{\"1\":{\"2512\":2}}],[\"具体策略\",{\"1\":{\"2507\":1}}],[\"具体要求如下\",{\"1\":{\"2440\":1}}],[\"具体要怎么做呢\",{\"1\":{\"463\":1}}],[\"具体状态\",{\"1\":{\"2434\":1,\"2438\":2}}],[\"具体代码如下所示\",{\"1\":{\"2410\":1}}],[\"具体代码实现如下所示\",{\"1\":{\"1365\":1}}],[\"具体如下所示\",{\"1\":{\"2405\":1}}],[\"具体处理者2负责处理该请求\",{\"1\":{\"1953\":1}}],[\"具体处理者1负责处理该请求\",{\"1\":{\"1953\":1}}],[\"具体处理者角色\",{\"1\":{\"1953\":2}}],[\"具体处理者\",{\"1\":{\"1945\":1}}],[\"具体目标发生改变\",{\"1\":{\"1686\":1}}],[\"具体目标\",{\"1\":{\"1686\":1}}],[\"具体观察者2作出反应\",{\"1\":{\"1686\":1}}],[\"具体观察者1作出反应\",{\"1\":{\"1686\":1}}],[\"具体观察者1\",{\"1\":{\"1686\":1}}],[\"具体观察者\",{\"1\":{\"1682\":1,\"1686\":1}}],[\"具体主题\",{\"1\":{\"1680\":1}}],[\"具体同事类2发出请求\",{\"1\":{\"1586\":1}}],[\"具体同事类2收到请求\",{\"1\":{\"1586\":1}}],[\"具体同事类1发出请求\",{\"1\":{\"1586\":1}}],[\"具体同事类1收到请求\",{\"1\":{\"1586\":1}}],[\"具体同事类\",{\"1\":{\"1582\":1,\"1586\":2}}],[\"具体中介者的核心方法\",{\"1\":{\"1601\":1}}],[\"具体中介者\",{\"1\":{\"1580\":1,\"1586\":1}}],[\"具体迭代器\",{\"1\":{\"1521\":1,\"1525\":1}}],[\"具体聚合\",{\"1\":{\"1519\":1,\"1525\":1}}],[\"具体网站\",{\"1\":{\"1427\":1}}],[\"具体享元角色\",{\"1\":{\"1406\":1}}],[\"具体享元\",{\"1\":{\"1394\":1,\"1406\":3}}],[\"具体的实现都是由不同厂商来提供的\",{\"1\":{\"6166\":1}}],[\"具体的实现类都依赖统一的接口定义\",{\"1\":{\"2709\":1}}],[\"具体的状态类\",{\"1\":{\"2467\":1}}],[\"具体的代码如下所示\",{\"1\":{\"2380\":1}}],[\"具体的代码实现如下\",{\"1\":{\"2375\":1}}],[\"具体的代码实现如下所示\",{\"1\":{\"2369\":1,\"2371\":1,\"2698\":1,\"2725\":1,\"2738\":1,\"2745\":1}}],[\"具体的代码框架如下所示\",{\"1\":{\"1359\":1}}],[\"具体的中介者类\",{\"1\":{\"1601\":1}}],[\"具体的同事对象发出\",{\"1\":{\"1601\":1}}],[\"具体的修饰者\",{\"1\":{\"935\":1}}],[\"具体工厂\",{\"1\":{\"1230\":1,\"1290\":1}}],[\"具体产品\",{\"1\":{\"1186\":1,\"1232\":1,\"1292\":1}}],[\"具体哪条你来定\",{\"1\":{\"1036\":1}}],[\"具体装饰角色\",{\"1\":{\"894\":1}}],[\"具体装饰\",{\"1\":{\"890\":1}}],[\"具体构件角色\",{\"1\":{\"894\":1}}],[\"具体构件\",{\"1\":{\"888\":1}}],[\"具体命令\",{\"1\":{\"766\":1}}],[\"具体命令类\",{\"1\":{\"760\":1}}],[\"具体建造者\",{\"1\":{\"677\":1,\"683\":1}}],[\"具体实现化角色\",{\"1\":{\"605\":1}}],[\"具体实现化\",{\"1\":{\"602\":1,\"605\":1}}],[\"具体实现类\",{\"1\":{\"560\":1,\"2659\":1}}],[\"具体实现\",{\"1\":{\"555\":1,\"561\":1,\"2658\":1}}],[\"重载\",{\"1\":{\"5411\":1}}],[\"重载父类的test方法\",{\"1\":{\"4507\":1}}],[\"重用现有的异常有几个好处\",{\"1\":{\"4872\":1}}],[\"重用性\",{\"1\":{\"2581\":1}}],[\"重复的配置项和已经被实例化的配置项不会被保存\",{\"1\":{\"6258\":1}}],[\"重复注解\",{\"1\":{\"4619\":1,\"4655\":1,\"5672\":1}}],[\"重复这两个过程\",{\"1\":{\"4447\":1}}],[\"重要\",{\"1\":{\"4261\":1}}],[\"重要的是\",{\"1\":{\"3999\":1}}],[\"重要的内容\",{\"1\":{\"79\":1}}],[\"重新加载配置文件可使用reload方法\",{\"1\":{\"6263\":1}}],[\"重新加载\",{\"1\":{\"6258\":1}}],[\"重新创建大小等于size的数组\",{\"1\":{\"3106\":1}}],[\"重新拷贝一份到新进程的地址空间中\",{\"1\":{\"2389\":1}}],[\"重构工具那是相当有帮助\",{\"1\":{\"6974\":1}}],[\"重构时单测的改动不大\",{\"1\":{\"4448\":1}}],[\"重构成本也会因历史数据迁移和系统平滑过渡而陡然增加\",{\"1\":{\"3450\":1}}],[\"重构跟开发冲突的概率也变小了\",{\"1\":{\"2770\":1}}],[\"重构后的代码如下所示\",{\"1\":{\"2710\":1}}],[\"重量级对象\",{\"1\":{\"2339\":1}}],[\"重点看下泛型的方法\",{\"1\":{\"5022\":1}}],[\"重点讲解原理\",{\"1\":{\"1349\":1}}],[\"重点还是要搞清楚应用场景\",{\"1\":{\"1161\":1}}],[\"重写有以下两个限制\",{\"1\":{\"5407\":1}}],[\"重写与重载\",{\"0\":{\"5404\":1}}],[\"重写了\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"重写remove\",{\"1\":{\"854\":1}}],[\"重写\",{\"0\":{\"4262\":1},\"1\":{\"852\":2,\"854\":1,\"1787\":1,\"1790\":1,\"1903\":1,\"2748\":1,\"4238\":1,\"5405\":1,\"5456\":1,\"5773\":1}}],[\"重做\",{\"1\":{\"740\":1}}],[\"重置建造者\",{\"1\":{\"713\":1}}],[\"盖高楼\",{\"1\":{\"713\":1}}],[\"盖普通房子\",{\"1\":{\"713\":1}}],[\"盖房案例\",{\"0\":{\"686\":1}}],[\"交付的代码是不可修改的\",{\"1\":{\"3466\":1}}],[\"交换两个对象判断结果并不互反\",{\"1\":{\"3119\":1}}],[\"交换机和集线器\",{\"1\":{\"1373\":1}}],[\"交互图\",{\"1\":{\"2813\":1}}],[\"交给指挥者\",{\"1\":{\"711\":1}}],[\"交流电相当于\",{\"1\":{\"516\":1,\"535\":1}}],[\"米\",{\"1\":{\"709\":2}}],[\"返回遍历服务提供者的迭代器\",{\"1\":{\"6258\":1}}],[\"返回下一行行号\",{\"1\":{\"6258\":1}}],[\"返回构造器的实例后\",{\"1\":{\"6087\":1}}],[\"返回表示由此\",{\"1\":{\"6032\":1}}],[\"返回表示类或接口的\",{\"1\":{\"5989\":1}}],[\"返回表示该对象的实际类型的class引用\",{\"1\":{\"5863\":1}}],[\"返回此\",{\"1\":{\"5986\":1}}],[\"返回指定对象上此\",{\"1\":{\"5974\":1}}],[\"返回指定参数类型\",{\"1\":{\"5900\":1,\"5906\":1}}],[\"返回描述此\",{\"1\":{\"5938\":1,\"5940\":1,\"6047\":1}}],[\"返回所有声明的\",{\"1\":{\"5909\":1}}],[\"返回所有具有public访问权限的构造函数的constructor对象数组\",{\"1\":{\"5903\":1}}],[\"返回所属类型\",{\"1\":{\"5236\":1}}],[\"返回与带有给定字符串名的类或接口相关联的\",{\"1\":{\"5897\":1}}],[\"返回更容易理解的表示\",{\"1\":{\"5887\":1}}],[\"返回class对象\",{\"1\":{\"5875\":1}}],[\"返回class对象数组\",{\"1\":{\"5873\":1}}],[\"返回collections\",{\"1\":{\"3102\":1}}],[\"返回该对象的一个拷贝\",{\"1\":{\"5632\":1}}],[\"返回该程序元素上存在的所有注解\",{\"1\":{\"4630\":1}}],[\"返回该程序元素上存在的\",{\"1\":{\"4628\":1,\"4632\":1}}],[\"返回散列值\",{\"1\":{\"5442\":1}}],[\"返回当前class或interface声明的类型\",{\"1\":{\"5236\":1}}],[\"返回确切的泛型参数\",{\"1\":{\"5234\":1,\"5236\":1}}],[\"返回类型就是object\",{\"1\":{\"5133\":1}}],[\"返回类型就是string\",{\"1\":{\"5133\":2}}],[\"返回类型为基本数据类型\",{\"1\":{\"3276\":1}}],[\"返回泛型数组\",{\"1\":{\"5062\":2}}],[\"返回error字符串\",{\"1\":{\"4978\":1}}],[\"返回ok字符串\",{\"1\":{\"4978\":1}}],[\"返回参数\",{\"1\":{\"4693\":1}}],[\"返回对象\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"返回对应值\",{\"1\":{\"1487\":1}}],[\"返回字符串\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"返回直接存在于此元素上的所有注解及注解对应的重复注解容器\",{\"1\":{\"4638\":1}}],[\"返回直接存在于此元素上的所有注解\",{\"1\":{\"4634\":1,\"4636\":1}}],[\"返回长度为0的数组\",{\"1\":{\"4630\":1,\"4632\":1}}],[\"返回至上一级别的缩进\",{\"1\":{\"4024\":1}}],[\"返回为\",{\"1\":{\"3391\":2}}],[\"返回n行\",{\"1\":{\"3374\":1}}],[\"返回给前端的响应信息必须包含http状态码\",{\"1\":{\"3226\":1}}],[\"返回值不是try或catch中保存的返回值\",{\"1\":{\"5712\":1}}],[\"返回值不同\",{\"1\":{\"5413\":1}}],[\"返回值的类型由外部决定\",{\"1\":{\"5015\":1}}],[\"返回值的意义\",{\"1\":{\"3208\":1}}],[\"返回值为\",{\"1\":{\"4390\":1,\"4407\":1}}],[\"返回值\",{\"1\":{\"3215\":1}}],[\"返回集合对象时\",{\"1\":{\"3101\":1}}],[\"返回的就参数类型信息\",{\"1\":{\"6048\":1}}],[\"返回的就是\",{\"1\":{\"5926\":1}}],[\"返回的值都不会改变\",{\"1\":{\"5711\":1}}],[\"返回的都是string类型的对象\",{\"1\":{\"5140\":1}}],[\"返回的class<t>就是何种类型\",{\"1\":{\"5030\":1}}],[\"返回的结果是2\",{\"1\":{\"4932\":1}}],[\"返回的结果是\",{\"1\":{\"3272\":1}}],[\"返回的是k\",{\"1\":{\"3124\":1}}],[\"返回的是k值集合\",{\"1\":{\"3124\":1}}],[\"返回的是v值集合\",{\"1\":{\"3124\":1}}],[\"返回的是arraylist的内部类sublist\",{\"1\":{\"3100\":1}}],[\"返回的是默认值\",{\"1\":{\"3058\":1}}],[\"返回的却是\",{\"1\":{\"3085\":1}}],[\"返回的yyyy就是下一年\",{\"1\":{\"3078\":1}}],[\"返回string对象\",{\"1\":{\"3073\":1}}],[\"返回结果为\",{\"1\":{\"3054\":1}}],[\"返回图片的ur\",{\"1\":{\"2711\":1}}],[\"返回图片在阿里云上的地址\",{\"1\":{\"2711\":1}}],[\"返回图片存储在阿里云上的地址\",{\"1\":{\"2699\":1}}],[\"返回实例对象\",{\"1\":{\"2286\":1,\"2293\":1}}],[\"返回学校总部的员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"返回学院的所有员工\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"返回两个数的差\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"返回前\",{\"1\":{\"1799\":1}}],[\"返回一个包含某些\",{\"1\":{\"6011\":1}}],[\"返回一个指定参数的method对象\",{\"1\":{\"6002\":1}}],[\"返回一个描述此\",{\"1\":{\"5983\":1}}],[\"返回一个\",{\"1\":{\"5977\":1,\"6008\":1,\"6029\":1}}],[\"返回一个oject对象\",{\"1\":{\"5877\":1}}],[\"返回一个代理对象\",{\"1\":{\"1903\":1}}],[\"返回一个迭代器对象\",{\"1\":{\"1549\":1}}],[\"返回一个迭代器\",{\"1\":{\"1535\":1}}],[\"返回一个具体迭代器的实例\",{\"1\":{\"1519\":1}}],[\"返回一个网站\",{\"1\":{\"1429\":1}}],[\"返回一个对应\",{\"1\":{\"915\":1}}],[\"返回产品\",{\"1\":{\"713\":2}}],[\"返回\",{\"1\":{\"709\":1,\"2546\":1,\"5923\":1,\"6005\":1,\"6044\":1}}],[\"返回顶部按钮\",{\"1\":{\"27\":1,\"133\":1}}],[\"建立了一个\",{\"1\":{\"6963\":1}}],[\"建立一个异常对象\",{\"1\":{\"4984\":1}}],[\"建立\",{\"1\":{\"4981\":1,\"4983\":1}}],[\"建立对象\",{\"1\":{\"4981\":1,\"4983\":1}}],[\"建立异常对象\",{\"1\":{\"4980\":1,\"4981\":1,\"4983\":1}}],[\"建表的小数类型等\",{\"1\":{\"3524\":1}}],[\"建表规约\",{\"0\":{\"3350\":1}}],[\"建组合索引的时候\",{\"1\":{\"3376\":1}}],[\"建议\",{\"1\":{\"4449\":1}}],[\"建议将linux服务器所支持的最大句柄数调高数倍\",{\"1\":{\"3444\":1}}],[\"建议将数据拆成整数和小数并分开存储\",{\"1\":{\"3356\":1}}],[\"建议进行npe检查\",{\"1\":{\"3276\":1}}],[\"建议开发者尽量不用可变参数编程\",{\"1\":{\"3042\":1}}],[\"建模的核心是模型\",{\"1\":{\"2822\":1}}],[\"建造方法的实现是由\",{\"1\":{\"720\":1}}],[\"建造房子好\",{\"1\":{\"709\":1}}],[\"建造者类以及子类\",{\"1\":{\"708\":1}}],[\"建造者\",{\"1\":{\"673\":1,\"680\":1,\"728\":1}}],[\"建造者可以对创建过程逐步细化\",{\"1\":{\"669\":1}}],[\"建造者模式主要适用于以下应用场景\",{\"1\":{\"733\":1}}],[\"建造者模式唯一区别于工厂模式的是针对复杂对象的创建\",{\"1\":{\"731\":1}}],[\"建造者模式所创建的产品一般具有较多的共同点\",{\"1\":{\"726\":1}}],[\"建造者模式的应用场景\",{\"0\":{\"730\":1}}],[\"建造者模式的注意事项和细节\",{\"0\":{\"721\":1}}],[\"建造者模式的\",{\"0\":{\"714\":1}}],[\"建造者模式的四个角色\",{\"0\":{\"674\":1}}],[\"建造者模式解决盖房案例\",{\"0\":{\"702\":1}}],[\"建造者模式结构图\",{\"0\":{\"679\":1}}],[\"建造者模式注重零部件的组装过程\",{\"1\":{\"673\":1}}],[\"建造者模式\",{\"1\":{\"664\":1,\"665\":1,\"701\":1,\"971\":1,\"2609\":1}}],[\"建造者模式基本介绍\",{\"0\":{\"660\":1}}],[\"建房子流程\",{\"1\":{\"700\":1}}],[\"过api中throwable类的众多子类描述各种不同的异常\",{\"1\":{\"4708\":1}}],[\"过往日志格式为\",{\"1\":{\"3284\":1}}],[\"过多过滥的注释\",{\"1\":{\"3219\":1}}],[\"过多使用适配器会使系统代码变得凌乱\",{\"1\":{\"496\":1}}],[\"过度切换\",{\"1\":{\"3158\":1}}],[\"过度使用这条原则\",{\"1\":{\"2716\":1}}],[\"过度使用会增加程序得复杂性\",{\"1\":{\"883\":1}}],[\"过于宽泛的访问范围\",{\"1\":{\"3076\":1}}],[\"过于复杂的代码往往在可读性\",{\"1\":{\"2752\":1}}],[\"过于简单\",{\"1\":{\"700\":1}}],[\"过复杂\",{\"1\":{\"2723\":1}}],[\"过了一段时间后\",{\"1\":{\"2701\":1}}],[\"过大的大接口里面通常放置许多不用的方法\",{\"1\":{\"2048\":1}}],[\"过程\",{\"1\":{\"1117\":1}}],[\"过程模式\",{\"1\":{\"1095\":1}}],[\"设备和镜像\",{\"1\":{\"6885\":1}}],[\"设置可访问\",{\"1\":{\"5964\":1}}],[\"设置第二个内容\",{\"1\":{\"5017\":1}}],[\"设置第一个内容\",{\"1\":{\"5017\":1}}],[\"设置字符串\",{\"1\":{\"5015\":1}}],[\"设置的类型也由外部决定\",{\"1\":{\"5015\":1}}],[\"设置操作人类别\",{\"1\":{\"4693\":1}}],[\"设置标题\",{\"1\":{\"4693\":1}}],[\"设置action动作\",{\"1\":{\"4693\":1}}],[\"设置请求方式\",{\"1\":{\"4693\":1}}],[\"设置方法名称\",{\"1\":{\"4693\":1}}],[\"设置新状态\",{\"1\":{\"2438\":1}}],[\"设置回调\",{\"1\":{\"1903\":1}}],[\"设置回调函数\",{\"1\":{\"1903\":1}}],[\"设置回调方法\",{\"1\":{\"1888\":1}}],[\"设置父类\",{\"1\":{\"1903\":1}}],[\"设置要生成代理对象的目标对象的类\",{\"1\":{\"1887\":1}}],[\"设置华为路由器\",{\"1\":{\"1306\":1}}],[\"设置小米路由器\",{\"1\":{\"1306\":1}}],[\"设置它没有任何效果\",{\"1\":{\"103\":1}}],[\"设计为易于使用\",{\"1\":{\"6631\":1}}],[\"设计良好的模块会隐藏所有的实现细节\",{\"1\":{\"5364\":1}}],[\"设计的本质就是识别和表达系统难点\",{\"1\":{\"3472\":1}}],[\"设计的程序结构\",{\"1\":{\"700\":1}}],[\"设计文档的作用是明确需求\",{\"1\":{\"3470\":1}}],[\"设计规约\",{\"0\":{\"3449\":1}}],[\"设计规约七个维度\",{\"1\":{\"2982\":1}}],[\"设计也更加抽象\",{\"1\":{\"2646\":1}}],[\"设计一个系统时知道了算法所需的关键步骤\",{\"1\":{\"2635\":1}}],[\"设计原则\",{\"1\":{\"2231\":1,\"6253\":1}}],[\"设计原则核心思想\",{\"0\":{\"2210\":1}}],[\"设计思想\",{\"0\":{\"2689\":1},\"1\":{\"1556\":1}}],[\"设计思路分析\",{\"1\":{\"1529\":1}}],[\"设计模式中一些问题的有趣的讨论\",{\"1\":{\"6814\":1}}],[\"设计模式比框架更小且更抽象\",{\"1\":{\"2793\":1}}],[\"设计模式类型\",{\"0\":{\"2598\":1}}],[\"设计模式包含了面向对象的精髓\",{\"1\":{\"2596\":1}}],[\"设计模式从来都不是单个设计模式独立使用的\",{\"1\":{\"2594\":1}}],[\"设计模式要活学活用\",{\"1\":{\"2593\":1}}],[\"设计模式只是一个引导\",{\"1\":{\"2592\":1}}],[\"设计模式解决的是设计不足的问题\",{\"1\":{\"2591\":1}}],[\"设计模式是为了让程序\",{\"1\":{\"2581\":1}}],[\"设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验\",{\"1\":{\"2569\":1}}],[\"设计模式在软件中哪里\",{\"1\":{\"2578\":1}}],[\"设计模式并不局限于某种语言\",{\"1\":{\"2572\":1}}],[\"设计模式的问题\",{\"1\":{\"5673\":1}}],[\"设计模式的本质是面向对象设计原则的实际运用\",{\"1\":{\"2587\":1}}],[\"设计模式的本质提高\",{\"1\":{\"2570\":1}}],[\"设计模式的目的\",{\"0\":{\"2580\":1}}],[\"设计模式的重要性\",{\"0\":{\"2573\":1}}],[\"设计模式的依赖抽象原则\",{\"1\":{\"1319\":1}}],[\"设计模式介绍\",{\"0\":{\"2568\":1}}],[\"设计模式概述\",{\"0\":{\"2561\":1}}],[\"设计模式常用的七大原则有\",{\"1\":{\"1991\":1}}],[\"设计模式为什么\",{\"1\":{\"1990\":1}}],[\"设计模式原则\",{\"1\":{\"1990\":1}}],[\"设计模式七大原则\",{\"0\":{\"1989\":1}}],[\"设计模式\",{\"1\":{\"949\":1,\"978\":1,\"1022\":1,\"1159\":1,\"2569\":1,\"2571\":1,\"2574\":1,\"2578\":1,\"2693\":1}}],[\"设计模式总结\",{\"0\":{\"944\":1}}],[\"设计较复杂\",{\"1\":{\"814\":1}}],[\"打包和测试的标准\",{\"1\":{\"6863\":1}}],[\"打包github仓库的便捷工具\",{\"1\":{\"6402\":1}}],[\"打印日志时仅打印出业务相关属性值或者调用其对象的tostring\",{\"1\":{\"3293\":1}}],[\"打印异常堆栈\",{\"1\":{\"3291\":1}}],[\"打印机的后台处理服务\",{\"1\":{\"2258\":1}}],[\"打折\",{\"1\":{\"2987\":1}}],[\"打开\",{\"1\":{\"2089\":3,\"2091\":3}}],[\"打开华为路由器\",{\"1\":{\"1306\":1}}],[\"打开华为手机\",{\"1\":{\"1304\":1}}],[\"打开小米路由器\",{\"1\":{\"1306\":1}}],[\"打开小米手机\",{\"1\":{\"1304\":1}}],[\"打开一扇门\",{\"1\":{\"992\":1}}],[\"打地基\",{\"1\":{\"693\":1}}],[\"打电话等\",{\"1\":{\"607\":1}}],[\"各版本的新特性\",{\"0\":{\"5545\":1}}],[\"各层接收上层的查询请求\",{\"1\":{\"3423\":1,\"3539\":1}}],[\"各层命名规约\",{\"1\":{\"3006\":1}}],[\"各类基本参数校验\",{\"1\":{\"3412\":1}}],[\"各类参数或者对象tostring\",{\"1\":{\"3292\":1}}],[\"各业务线经常冗余存储商品名称\",{\"1\":{\"3364\":1}}],[\"各种引用传值之间\",{\"1\":{\"5127\":1}}],[\"各种类型的标识符的规则\",{\"0\":{\"4164\":1}}],[\"各种不同的算法以不同的方式实现这个接口\",{\"1\":{\"2506\":1}}],[\"各种状态子类\",{\"1\":{\"2466\":1}}],[\"各种房子的过程虽然一样\",{\"1\":{\"688\":1}}],[\"各人自扫门前雪\",{\"1\":{\"1041\":1}}],[\"各个端的模板渲染并执行显示的层\",{\"1\":{\"3411\":1}}],[\"各个电器对象之间所传递的消息\",{\"1\":{\"1594\":1}}],[\"各个电器对象彼此联系\",{\"1\":{\"1593\":1}}],[\"各个设备可以协同工作\",{\"1\":{\"1589\":1}}],[\"各个具体的建造者相互独立\",{\"1\":{\"668\":1}}],[\"各个部件可以灵活选择\",{\"1\":{\"663\":1}}],[\"别这么干\",{\"1\":{\"6799\":1}}],[\"别名前加as使别名更容易识别\",{\"1\":{\"3389\":1}}],[\"别名可以是表的简称\",{\"1\":{\"3389\":1}}],[\"别给我们打电话\",{\"1\":{\"2792\":1}}],[\"别的线程是无法进入的\",{\"1\":{\"2324\":1}}],[\"别墅也好都需要经历这些过程\",{\"1\":{\"703\":1}}],[\"别墅\",{\"1\":{\"688\":1}}],[\"别人看到这多少得琢磨一会这块到底写了个啥玩意\",{\"1\":{\"421\":1}}],[\"封顶\",{\"1\":{\"687\":1,\"693\":1,\"703\":1}}],[\"封装使得用户注意不到这种实现细节\",{\"1\":{\"5760\":1}}],[\"封装issuccess\",{\"1\":{\"3278\":1}}],[\"封装和抽象可以有效地隐藏实现的复杂性\",{\"1\":{\"2762\":1}}],[\"封装和抽象作为两个非常通用的设计思想\",{\"1\":{\"2762\":1}}],[\"封装与抽象\",{\"1\":{\"2761\":1}}],[\"封装意识\",{\"1\":{\"2713\":1}}],[\"封装具体的实现细节\",{\"1\":{\"2708\":1}}],[\"封装不稳定的实现\",{\"1\":{\"2695\":1,\"2717\":1}}],[\"封装不同的算法\",{\"1\":{\"1035\":1}}],[\"封装接口\",{\"1\":{\"2530\":1}}],[\"封装接收方具体命令的实现细节\",{\"1\":{\"798\":1}}],[\"封装到\",{\"1\":{\"2194\":1}}],[\"封装性良好\",{\"1\":{\"1512\":1}}],[\"封装性好\",{\"1\":{\"667\":1}}],[\"封装创建对象的代码\",{\"1\":{\"1208\":1}}],[\"封装创建细节\",{\"1\":{\"959\":1}}],[\"封装在一起\",{\"1\":{\"700\":1}}],[\"封装\",{\"0\":{\"5751\":1},\"1\":{\"645\":2,\"5673\":1,\"5812\":1}}],[\"砌墙\",{\"1\":{\"687\":1,\"693\":1,\"703\":1}}],[\"二维码\",{\"1\":{\"6656\":1}}],[\"二维条形码图片处理开发库\",{\"1\":{\"6452\":1}}],[\"二方库\",{\"1\":{\"3550\":1}}],[\"二方库由谁维护\",{\"1\":{\"3439\":1}}],[\"二方库发布者应当遵循以下原则\",{\"1\":{\"3439\":1}}],[\"二方库不要有配置项\",{\"1\":{\"3437\":1}}],[\"二方库定制包的命名方式\",{\"1\":{\"3431\":1}}],[\"二方库里可以定义枚举类型\",{\"1\":{\"3430\":1}}],[\"二方库的新增或升级\",{\"1\":{\"3429\":1}}],[\"二方库版本号命名方式\",{\"1\":{\"3427\":1}}],[\"二方库依赖\",{\"0\":{\"3425\":1}}],[\"二方包在类冲突时\",{\"1\":{\"3274\":1}}],[\"二方包\",{\"1\":{\"3274\":1}}],[\"二级\",{\"1\":{\"3610\":1}}],[\"二级宏观错误码\",{\"1\":{\"3260\":1,\"3564\":1,\"3637\":1,\"3670\":1,\"3719\":1,\"3734\":1,\"3748\":1,\"3761\":1,\"3778\":1,\"3795\":1,\"3811\":1,\"3816\":1,\"3823\":1,\"3847\":1,\"3888\":1,\"3901\":1,\"3914\":1,\"3921\":1}}],[\"二级缓存\",{\"1\":{\"2764\":1}}],[\"二进制无法精确表示大部分的十进制小数\",{\"1\":{\"3048\":1}}],[\"二进制的所有位上全部是0\",{\"1\":{\"429\":1}}],[\"二\",{\"0\":{\"3007\":1,\"3249\":1,\"3264\":1,\"3367\":1,\"3425\":1},\"1\":{\"5421\":1}}],[\"二字\",{\"0\":{\"2692\":1}}],[\"二叉树排序等\",{\"1\":{\"2486\":1}}],[\"二者都应该依赖其抽象\",{\"1\":{\"2062\":1}}],[\"二是与具体实现代码同步进行\",{\"1\":{\"4447\":1}}],[\"二是效率低\",{\"1\":{\"3402\":1}}],[\"二是增强目标对象\",{\"1\":{\"1918\":1}}],[\"二是\",{\"1\":{\"678\":1}}],[\"工资低于2500元的上斑族并且站立的乘客车票打8折\",{\"1\":{\"5055\":1}}],[\"工具实现\",{\"1\":{\"6995\":1}}],[\"工具\",{\"1\":{\"6783\":1,\"6961\":1}}],[\"工具为类生成帮助文档时是否要保留其注解信息\",{\"1\":{\"4605\":1}}],[\"工具类等\",{\"1\":{\"4455\":1}}],[\"工具类不允许有public或default构造方法\",{\"1\":{\"3076\":1}}],[\"工具类\",{\"1\":{\"2396\":1,\"3155\":1}}],[\"工具类对象\",{\"1\":{\"2339\":1}}],[\"工程调用方法时\",{\"1\":{\"3208\":1}}],[\"工程结构\",{\"0\":{\"3407\":1},\"1\":{\"2982\":1}}],[\"工程结构混乱导致后续项目维护艰难\",{\"1\":{\"2982\":1}}],[\"工厂\",{\"1\":{\"2339\":1}}],[\"工厂簇\",{\"1\":{\"1280\":1}}],[\"工厂类代码都是一样的\",{\"1\":{\"1341\":1}}],[\"工厂类要创建哪个类对象是事先确定好的\",{\"1\":{\"1333\":1}}],[\"工厂类的创建产品类的方法可以被外界直接调用\",{\"1\":{\"1184\":1}}],[\"工厂类包含必要的逻辑判断\",{\"1\":{\"1175\":1}}],[\"工厂和产品的职责区分明确\",{\"1\":{\"1175\":1}}],[\"工厂方法\",{\"0\":{\"1216\":1},\"1\":{\"1182\":1}}],[\"工厂方法原理比较简单\",{\"1\":{\"1160\":1}}],[\"工厂方法和抽象工厂\",{\"1\":{\"1159\":1}}],[\"工厂方法模式只生产一个等级的产品\",{\"1\":{\"1278\":1}}],[\"工厂方法模式可以理解为在多个简单工厂模式\",{\"1\":{\"1256\":1}}],[\"工厂方法模式代码\",{\"1\":{\"1247\":1}}],[\"工厂方法模式设计方案\",{\"1\":{\"1241\":1}}],[\"工厂方法模式完成案例\",{\"0\":{\"1235\":1}}],[\"工厂方法模式将\",{\"1\":{\"1227\":1}}],[\"工厂方法模式介绍\",{\"0\":{\"1217\":1}}],[\"工厂方法模式\",{\"1\":{\"673\":1,\"1164\":1,\"1218\":1,\"1227\":1,\"1270\":1,\"1318\":1,\"1447\":1,\"2606\":1}}],[\"工厂生产物品\",{\"1\":{\"957\":1}}],[\"工厂模式和\",{\"0\":{\"1326\":1}}],[\"工厂模式的意义将实例化对象的代码提取出来\",{\"1\":{\"1317\":1}}],[\"工厂模式小结\",{\"0\":{\"1316\":1}}],[\"工厂模式在\",{\"0\":{\"1311\":1}}],[\"工厂模式家族\",{\"1\":{\"1170\":1}}],[\"工厂模式分为三种更加细分的类型\",{\"1\":{\"1159\":1}}],[\"工厂模式很重要\",{\"1\":{\"1158\":1}}],[\"工厂模式概述\",{\"0\":{\"1157\":1}}],[\"工厂模式\",{\"1\":{\"955\":1}}],[\"工作原理是\",{\"1\":{\"1741\":1}}],[\"工作原理\",{\"0\":{\"502\":1}}],[\"则从jvm中获取\",{\"1\":{\"6097\":1}}],[\"则从jvm中重新获取\",{\"1\":{\"6079\":1}}],[\"则也算是成功了\",{\"1\":{\"6076\":1}}],[\"则立即返回\",{\"1\":{\"6076\":1}}],[\"则需使用class类的getdeclaredfield\",{\"1\":{\"5963\":1}}],[\"则属于严重错误\",{\"1\":{\"5719\":1}}],[\"则y\",{\"1\":{\"5654\":1}}],[\"则就变成了\",{\"1\":{\"5189\":1}}],[\"则就不会跳回执行\",{\"1\":{\"4738\":1}}],[\"则执行输出finally操作\",{\"1\":{\"4969\":2}}],[\"则执行完try块就执行finally语句\",{\"1\":{\"4784\":1}}],[\"则抛给当前的thread\",{\"1\":{\"4956\":1}}],[\"则抛出illegalmonitorstateexception异常\",{\"1\":{\"3171\":1}}],[\"则向上查找\",{\"1\":{\"4955\":1}}],[\"则继续查找异常表中的剩余条目\",{\"1\":{\"4954\":1}}],[\"则jvm调用位于target的调用者来处理\",{\"1\":{\"4953\":1}}],[\"则在此直接返回\",{\"1\":{\"4930\":1}}],[\"则在类名上方加\",{\"1\":{\"2844\":1}}],[\"则永远不会到达应该处理更具体的\",{\"1\":{\"4900\":1}}],[\"则不要犹豫\",{\"1\":{\"4891\":1}}],[\"则不能声明与覆盖方法不同的异常\",{\"1\":{\"4751\":1}}],[\"则不适合使用建造者模式\",{\"1\":{\"726\":1}}],[\"则子类继承方法后\",{\"1\":{\"4744\":1}}],[\"则表示这个变量可以被本地代码引用\",{\"1\":{\"4621\":1}}],[\"则其子类将自动具有该注解\",{\"1\":{\"4609\":1,\"4665\":1}}],[\"则该方法将继续进行不会发出错误\",{\"1\":{\"4366\":1}}],[\"则变成红色\",{\"1\":{\"4285\":1}}],[\"则它的名称是该类的名称加上\",{\"1\":{\"4171\":1}}],[\"则除外\",{\"1\":{\"4146\":1}}],[\"则除了修改原来的代码\",{\"1\":{\"2267\":1}}],[\"则应使用空行分隔它们\",{\"1\":{\"3990\":1}}],[\"则采用与service一致的处理方式\",{\"1\":{\"3418\":1}}],[\"则可能会因为打印日志而影响正常业务流程的执行\",{\"1\":{\"3293\":1}}],[\"则可以精确表示任何整数\",{\"1\":{\"3229\":1}}],[\"则可以省略文本定义\",{\"1\":{\"162\":1}}],[\"则前端返回第一页参数给后端\",{\"1\":{\"3232\":1}}],[\"则返回\",{\"1\":{\"6044\":1}}],[\"则返回o<t>\",{\"1\":{\"5236\":1}}],[\"则返回长度为零的一个数组\",{\"1\":{\"4638\":1}}],[\"则返回null\",{\"1\":{\"4628\":1,\"4634\":1}}],[\"则返回空数组\",{\"1\":{\"3225\":1}}],[\"则返回这个唯一标识码所标识的对象\",{\"1\":{\"1440\":1}}],[\"则删除\",{\"1\":{\"3217\":1}}],[\"则是获取字段的值\",{\"1\":{\"5965\":1}}],[\"则是件令人爽心悦目的事情\",{\"1\":{\"3196\":1}}],[\"则是浅拷贝\",{\"1\":{\"1799\":1}}],[\"则直接返回\",{\"1\":{\"6076\":1}}],[\"则直接执行finally代码块\",{\"1\":{\"3170\":1}}],[\"则直接抛出异常\",{\"1\":{\"3107\":1}}],[\"则x\",{\"1\":{\"3119\":2,\"5656\":1}}],[\"则使用逗号分割\",{\"1\":{\"4742\":1}}],[\"则使用system\",{\"1\":{\"3080\":1}}],[\"则使用钩子方法\",{\"1\":{\"2674\":1}}],[\"则会导致jvm终止运行\",{\"1\":{\"4957\":1}}],[\"则会被抑制\",{\"1\":{\"4799\":1}}],[\"则会去父类上检测对应的注解\",{\"1\":{\"4632\":1}}],[\"则会报错\",{\"1\":{\"4516\":1}}],[\"则会严重影响当前调用者\",{\"1\":{\"3456\":1}}],[\"则会在此直接返回\",{\"1\":{\"3271\":1}}],[\"则会忽略精度\",{\"1\":{\"3054\":1}}],[\"则会造成接口数量过多\",{\"1\":{\"2046\":1}}],[\"则认为是相等的\",{\"1\":{\"3050\":1}}],[\"则给one\",{\"1\":{\"3037\":1}}],[\"则必须换行\",{\"1\":{\"3025\":1}}],[\"则必须严格遵循里氏替换原则\",{\"1\":{\"2200\":1}}],[\"则所有子类都要改一遍\",{\"1\":{\"2648\":1}}],[\"则系统会完全乱套\",{\"1\":{\"2347\":1}}],[\"则\",{\"1\":{\"2289\":1,\"3020\":1,\"5646\":1}}],[\"则很容易违背单一职责原则\",{\"1\":{\"2269\":1}}],[\"则把这些方法放到一个抽象类\",{\"1\":{\"2109\":1}}],[\"则当这个类需要修改时\",{\"1\":{\"2099\":1}}],[\"则新增类\",{\"1\":{\"2079\":1}}],[\"则仍然\",{\"1\":{\"1436\":1}}],[\"则创建\",{\"1\":{\"1406\":2}}],[\"则创建一个新的享元对象\",{\"1\":{\"1396\":1}}],[\"则创建一个\",{\"1\":{\"1375\":1}}],[\"则能节省大量的系统资源\",{\"1\":{\"1373\":1}}],[\"则只需要新增两个类\",{\"1\":{\"1251\":1}}],[\"则每个智能家电厂家都要提供一个统一的接口给\",{\"1\":{\"770\":1}}],[\"则建造者也要同步修改\",{\"1\":{\"672\":1}}],[\"构成一个访问者\",{\"1\":{\"2938\":1}}],[\"构造静态内部类的对象\",{\"1\":{\"5733\":1}}],[\"构造内部类对象需要外部类的引用\",{\"1\":{\"5733\":1}}],[\"构造内部类和静态内部类对象\",{\"0\":{\"5732\":1}}],[\"构造方法的类\",{\"1\":{\"5940\":1,\"5942\":1}}],[\"构造方法等\",{\"1\":{\"5822\":1,\"5845\":1}}],[\"构造方法\",{\"1\":{\"4013\":1,\"4062\":1,\"4589\":1,\"4590\":1,\"5821\":1}}],[\"构造方法中做的事情过多\",{\"1\":{\"3321\":1}}],[\"构造方法里面禁止加入任何业务逻辑\",{\"1\":{\"3061\":1}}],[\"构造方法传递\",{\"1\":{\"2087\":1}}],[\"构造函数对象\",{\"1\":{\"5906\":1,\"5909\":1}}],[\"构造函数\",{\"1\":{\"5506\":1,\"5511\":1,\"5513\":1,\"5914\":1,\"5916\":3,\"6636\":1}}],[\"构造函数等\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"构造函数传参\",{\"1\":{\"1489\":1}}],[\"构造器私有化\",{\"1\":{\"2282\":1,\"2286\":1,\"2293\":1,\"2320\":1}}],[\"构造器传入\",{\"1\":{\"711\":1}}],[\"构造器\",{\"1\":{\"624\":3,\"781\":1,\"850\":1,\"852\":1,\"854\":1,\"1136\":1,\"1248\":1,\"1427\":1,\"1603\":1,\"1793\":1,\"1842\":1,\"1871\":1,\"1903\":1,\"1974\":1,\"2089\":1,\"2205\":1,\"2226\":1,\"2452\":1,\"2539\":1,\"2890\":1,\"4524\":1}}],[\"构建的对象就变成了不可变的了\",{\"1\":{\"6806\":1}}],[\"构建器构建对象的时候\",{\"1\":{\"6806\":1}}],[\"构建器模式\",{\"1\":{\"6750\":1}}],[\"构建异步和基于事件的程序\",{\"1\":{\"6573\":1}}],[\"构建响应式快速数据\",{\"1\":{\"6572\":1}}],[\"构建高性能网络应用程序开发框架\",{\"1\":{\"6538\":1}}],[\"构建及应用依赖关系处理工具\",{\"1\":{\"6289\":1}}],[\"构建工具\",{\"0\":{\"6288\":1}}],[\"构建\",{\"1\":{\"1489\":1,\"6652\":1}}],[\"构建一个使用\",{\"1\":{\"678\":1}}],[\"构建和装配各个部件\",{\"1\":{\"677\":1}}],[\"构建和表示分离\",{\"1\":{\"667\":1}}],[\"构建模式\",{\"1\":{\"664\":1}}],[\"生命周期短\",{\"1\":{\"5745\":1}}],[\"生命周期\",{\"0\":{\"4328\":1}}],[\"生死与共整体与局部的关系\",{\"1\":{\"2924\":1}}],[\"生硬地抽象出一个父类出来\",{\"1\":{\"2745\":1}}],[\"生成及处理图像的工具集\",{\"1\":{\"6454\":1}}],[\"生成实例并返回\",{\"1\":{\"6069\":1}}],[\"生成文档\",{\"1\":{\"4496\":1}}],[\"生成的方式相同\",{\"1\":{\"4034\":1}}],[\"生成的map集合中只有一个键值对\",{\"1\":{\"3093\":1}}],[\"生成javadoc可以正确输出相应注释\",{\"1\":{\"3208\":1}}],[\"生成\",{\"1\":{\"2700\":1}}],[\"生成算法\",{\"1\":{\"2354\":1}}],[\"生成器来生成\",{\"1\":{\"2354\":1}}],[\"生成器类\",{\"1\":{\"2350\":1}}],[\"生成器模式\",{\"1\":{\"664\":1}}],[\"生成一个代理对象\",{\"1\":{\"1871\":1}}],[\"生产\",{\"1\":{\"6584\":1}}],[\"生产者有上限\",{\"1\":{\"5046\":1}}],[\"生产者或者消费者\",{\"1\":{\"5046\":1}}],[\"生产环境提交执行后\",{\"1\":{\"3450\":1}}],[\"生产环境禁止输出debug日志\",{\"1\":{\"3294\":1}}],[\"生产环境禁止使用system\",{\"1\":{\"3291\":1}}],[\"生产环境必须使用https\",{\"1\":{\"3224\":1}}],[\"生产小米手机\",{\"1\":{\"1298\":1}}],[\"生产更高效\",{\"1\":{\"958\":1}}],[\"生活案例\",{\"1\":{\"954\":1,\"983\":1,\"1027\":1}}],[\"生活用品中的衣服与衣柜\",{\"1\":{\"806\":1}}],[\"生活中这样的例子很多\",{\"1\":{\"662\":1}}],[\"又称为类变量\",{\"1\":{\"5484\":1}}],[\"又称单一功能原则\",{\"1\":{\"2001\":1}}],[\"又有finally\",{\"1\":{\"4975\":1}}],[\"又有经常变化的功能需求\",{\"1\":{\"2972\":1}}],[\"又负责飞机\",{\"1\":{\"2015\":1}}],[\"又如找女朋友\",{\"1\":{\"1809\":1}}],[\"又不想生成新的子类时\",{\"1\":{\"1614\":1}}],[\"又叫作\",{\"1\":{\"1172\":1}}],[\"又叫\",{\"1\":{\"664\":1,\"807\":1,\"1566\":1,\"1617\":1,\"1929\":1,\"2157\":1,\"2199\":1,\"2638\":1}}],[\"又可按颜色分\",{\"1\":{\"586\":1}}],[\"收件人\",{\"1\":{\"662\":1}}],[\"车架\",{\"1\":{\"662\":1}}],[\"发生了exception类型的异常\",{\"1\":{\"4965\":1}}],[\"发生异常\",{\"1\":{\"4682\":1}}],[\"发生依赖\",{\"1\":{\"2080\":1}}],[\"发送等即时消息\",{\"1\":{\"3348\":1}}],[\"发送者和接收者也无须拥有对方的明确信息\",{\"1\":{\"1933\":1}}],[\"发贴\",{\"1\":{\"3348\":1}}],[\"发挥它们各自的优势\",{\"1\":{\"2749\":1}}],[\"发现org\",{\"1\":{\"6204\":1}}],[\"发现\",{\"1\":{\"2745\":1}}],[\"发现自己已经在使用了\",{\"1\":{\"2565\":1}}],[\"发现消息\",{\"1\":{\"1601\":1}}],[\"发布可立即使用的组件\",{\"1\":{\"6402\":1}}],[\"发布二进制文件版本控制工具\",{\"1\":{\"6399\":1}}],[\"发布错误码统一解决方案\",{\"1\":{\"3524\":1}}],[\"发布日期\",{\"1\":{\"3481\":1}}],[\"发布到线上却出故障的先例\",{\"1\":{\"3433\":1}}],[\"发布逻辑\",{\"1\":{\"2460\":1}}],[\"发布\",{\"0\":{\"6397\":1},\"1\":{\"2458\":1,\"2460\":1}}],[\"发放奖品后改变其状态\",{\"1\":{\"2454\":1}}],[\"发放奖品的状态\",{\"1\":{\"2454\":1}}],[\"发放奖品\",{\"1\":{\"2454\":2}}],[\"发放奖品方法\",{\"1\":{\"2449\":1}}],[\"发放奖品和奖品领完\",{\"1\":{\"2443\":1}}],[\"发起人类\",{\"1\":{\"1652\":1}}],[\"发起人\",{\"1\":{\"1630\":1,\"1636\":1}}],[\"发起人不需要管理和保存其内部状态的各个备份\",{\"1\":{\"1624\":1}}],[\"发起请求的对象是调用者\",{\"1\":{\"793\":1}}],[\"发动机\",{\"1\":{\"662\":1}}],[\"发型等特性都有所差异\",{\"1\":{\"662\":1}}],[\"脸型\",{\"1\":{\"662\":1}}],[\"显然是不合适的\",{\"1\":{\"2704\":1}}],[\"显然就无法适应这样的需求变更\",{\"1\":{\"2363\":1}}],[\"显示层对象\",{\"1\":{\"3424\":1,\"3540\":1}}],[\"显示测评情况\",{\"1\":{\"2964\":1}}],[\"显示鸭子信息\",{\"1\":{\"2521\":1,\"2539\":1}}],[\"显示鸭子的信息\",{\"1\":{\"2516\":1}}],[\"显示\",{\"1\":{\"1702\":1,\"1716\":2}}],[\"显示当前游戏角色的状态\",{\"1\":{\"1653\":1}}],[\"显示器可以和\",{\"1\":{\"2888\":1}}],[\"显示器\",{\"1\":{\"661\":1}}],[\"显卡的驱动程序对象\",{\"1\":{\"2258\":1}}],[\"显卡\",{\"1\":{\"661\":1}}],[\"计算null对象的长度\",{\"1\":{\"4821\":1}}],[\"计算该列除null之外的不重复行数\",{\"1\":{\"3381\":1}}],[\"计算长方形和圆形的周长与面积\",{\"1\":{\"2832\":1}}],[\"计算类\",{\"1\":{\"1488\":1}}],[\"计算费用的抽象方法\",{\"1\":{\"922\":1}}],[\"计算机科学与技术是老牌的专业\",{\"1\":{\"858\":1}}],[\"计算机科学与技术\",{\"1\":{\"858\":1}}],[\"计算机学院\",{\"1\":{\"858\":2,\"1535\":1}}],[\"计算机销售公司安排技术人员去组装计算机\",{\"1\":{\"661\":1}}],[\"计算机是由\",{\"1\":{\"661\":1}}],[\"计划\",{\"1\":{\"82\":1,\"83\":1}}],[\"q\",{\"0\":{\"5583\":1,\"5591\":1}}],[\"quickml\",{\"1\":{\"6493\":1}}],[\"quickcheckmemberaccess\",{\"1\":{\"6065\":1,\"6086\":1,\"6107\":1}}],[\"quality\",{\"0\":{\"6986\":1,\"7021\":1},\"1\":{\"6788\":1}}],[\"qualified\",{\"1\":{\"5523\":1}}],[\"quartz\",{\"1\":{\"6516\":1}}],[\"quasar\",{\"1\":{\"6389\":1}}],[\"quanke\",{\"1\":{\"5586\":1,\"5587\":1}}],[\"quackbehavior\",{\"1\":{\"2537\":1,\"2539\":12}}],[\"quack\",{\"1\":{\"2521\":1,\"2526\":1,\"2537\":1,\"2539\":2}}],[\"querydsl\",{\"1\":{\"6350\":1}}],[\"query\",{\"1\":{\"3423\":1,\"3539\":1}}],[\"querystatementcallback\",{\"1\":{\"788\":1,\"790\":1}}],[\"questions\",{\"1\":{\"6271\":1}}],[\"question\",{\"1\":{\"3361\":1,\"4701\":1}}],[\"queueofwork\",{\"1\":{\"3000\":1}}],[\"quot\",{\"1\":{\"309\":1}}],[\"quote\",{\"1\":{\"309\":1,\"310\":1}}],[\"quotes\",{\"1\":{\"304\":1,\"335\":1}}],[\"qq\",{\"1\":{\"655\":1,\"1570\":2,\"4423\":1,\"4669\":1,\"4700\":1,\"6134\":1}}],[\"银河有多远\",{\"1\":{\"3195\":1}}],[\"银卡用户\",{\"1\":{\"652\":1}}],[\"银行转账系统\",{\"1\":{\"650\":1}}],[\"柜台转账\",{\"1\":{\"651\":1}}],[\"驱动程序\",{\"1\":{\"649\":1}}],[\"常规语法\",{\"1\":{\"4773\":1}}],[\"常见于机密信息或复制其它登录用户链接访问服务器的情况\",{\"1\":{\"3226\":1}}],[\"常见对于需要登录而用户未登录的情况\",{\"1\":{\"3226\":1}}],[\"常见的例子是\",{\"1\":{\"6246\":1}}],[\"常见的runtime\",{\"1\":{\"5718\":1}}],[\"常见的checked\",{\"1\":{\"5716\":1}}],[\"常见的运行器有\",{\"1\":{\"4314\":1,\"4398\":1}}],[\"常见的http状态码如下\",{\"1\":{\"3226\":1}}],[\"常见的请求方法如下\",{\"1\":{\"3224\":1}}],[\"常见的方法内变量为int\",{\"1\":{\"2999\":1}}],[\"常见的应用场景\",{\"0\":{\"648\":1}}],[\"常量保存在本地内存的元空间\",{\"1\":{\"5328\":1}}],[\"常量的内容是深不可变的\",{\"1\":{\"4178\":1}}],[\"常量的复用层次有五层\",{\"1\":{\"3016\":1}}],[\"常量是\",{\"1\":{\"4178\":1}}],[\"常量使用\",{\"1\":{\"4177\":1}}],[\"常量名通常是名词或者名词短语\",{\"1\":{\"4180\":1}}],[\"常量名\",{\"0\":{\"4176\":1}}],[\"常量\",{\"1\":{\"3380\":1,\"3439\":1,\"5326\":1,\"5329\":1}}],[\"常量定义\",{\"0\":{\"3007\":1}}],[\"常量命名应该全部大写\",{\"1\":{\"2991\":1}}],[\"常量池\",{\"1\":{\"1377\":1,\"1444\":1}}],[\"常用的方法\",{\"1\":{\"5853\":1}}],[\"常用的异常\",{\"0\":{\"4816\":1}}],[\"常用于回收资源\",{\"1\":{\"4803\":1}}],[\"常用于系统底层开发\",{\"1\":{\"1375\":1}}],[\"常用注解\",{\"0\":{\"4291\":1}}],[\"常用搜索\",{\"0\":{\"156\":1}}],[\"常常被代码生成工具使用\",{\"1\":{\"4621\":1}}],[\"常常会出现好多对象之间存在复杂的交互关系\",{\"1\":{\"1568\":1}}],[\"常常存在办事较复杂的例子\",{\"1\":{\"1093\":1}}],[\"常常需要对现有产品增加新的功能或美化其外观\",{\"1\":{\"875\":1}}],[\"无限定的变量用object\",{\"1\":{\"5097\":1}}],[\"无限制类型擦除\",{\"1\":{\"5078\":1}}],[\"无限制通配符\",{\"1\":{\"5046\":1}}],[\"无限制的到处跑\",{\"1\":{\"3076\":1}}],[\"无返回\",{\"1\":{\"4299\":1,\"4302\":1}}],[\"无返回数据\",{\"1\":{\"4294\":1}}],[\"无效的用户输入\",{\"1\":{\"3674\":1}}],[\"无权限使用\",{\"1\":{\"3649\":1}}],[\"无泛型限制\",{\"1\":{\"3520\":1}}],[\"无数次的故障都是因为没有设置超时时间\",{\"1\":{\"3441\":1}}],[\"无log具体实现\",{\"1\":{\"3439\":1}}],[\"无用字段增加网络消耗\",{\"1\":{\"3394\":1}}],[\"无符号右移\",{\"1\":{\"5741\":1}}],[\"无符号右移一位后变成下面的形式\",{\"1\":{\"424\":1}}],[\"无符号值\",{\"1\":{\"3366\":4}}],[\"无符号值可以避免误存负数\",{\"1\":{\"3366\":1}}],[\"无所适从\",{\"1\":{\"3295\":1}}],[\"无谓浪费方法调用的开销\",{\"1\":{\"3288\":1}}],[\"无谓增加编译器解析成本\",{\"1\":{\"3040\":1}}],[\"无情丢弃掉try块中的返回点\",{\"1\":{\"3271\":1,\"4930\":1}}],[\"无规范难以协同\",{\"1\":{\"2983\":1}}],[\"无规矩不成方圆\",{\"1\":{\"2983\":1}}],[\"无实体\",{\"1\":{\"2916\":1}}],[\"无人接单失效\",{\"1\":{\"2465\":1}}],[\"无意中重写了父类的方法\",{\"1\":{\"2120\":1}}],[\"无法获取父类的私有字段\",{\"1\":{\"5963\":1}}],[\"无法约束其中的类型\",{\"1\":{\"5007\":1}}],[\"无法处理的错误\",{\"1\":{\"5533\":1}}],[\"无法处理\",{\"1\":{\"4906\":1}}],[\"无法遵守列限制的代码行\",{\"1\":{\"4031\":1}}],[\"无法用细粒度的异常进行catch\",{\"1\":{\"3418\":1}}],[\"无法通过预检查的异常除外\",{\"1\":{\"3265\":1}}],[\"无法解锁\",{\"1\":{\"3167\":1}}],[\"无法提供定制服务\",{\"1\":{\"2046\":1}}],[\"无法在运行时动态的添加第三方\",{\"1\":{\"1707\":1}}],[\"无需解包和解析即可高效访问序列化数据\",{\"1\":{\"6606\":1}}],[\"无需其他第三方库支持\",{\"1\":{\"6507\":1}}],[\"无需重新部署\",{\"1\":{\"6376\":1}}],[\"无需修改代码\",{\"1\":{\"1804\":1}}],[\"无需知道如何创建的细节\",{\"1\":{\"1740\":1}}],[\"无论你选择了什么工具\",{\"1\":{\"6889\":1}}],[\"无论创建多少个实例对象\",{\"1\":{\"5829\":1}}],[\"无论在\",{\"1\":{\"5662\":1}}],[\"无论调用多少次结果不变\",{\"1\":{\"5657\":1}}],[\"无论何时定义一个泛型\",{\"1\":{\"5097\":1}}],[\"无论何种类型\",{\"1\":{\"1487\":1}}],[\"无论发生什么异常\",{\"1\":{\"4966\":1}}],[\"无论测试用例里的其他方法有没有抛出异常\",{\"1\":{\"4332\":1}}],[\"无论加锁是否成功\",{\"1\":{\"3170\":1}}],[\"无论是开发哪种软件产品\",{\"1\":{\"2787\":1}}],[\"无论子类需不需要\",{\"1\":{\"646\":1}}],[\"无须修改原有代码\",{\"1\":{\"1511\":1}}],[\"无须关心请求的处理细节和请求的传递过程\",{\"1\":{\"1930\":1}}],[\"无须关心其他实现类\",{\"1\":{\"1222\":1}}],[\"无须关心自己处理的是单个对象\",{\"1\":{\"811\":1}}],[\"无须知道产品的具体创建过程\",{\"1\":{\"1220\":1}}],[\"无因咖啡\",{\"1\":{\"896\":1,\"924\":1,\"928\":4}}],[\"品牌\",{\"1\":{\"626\":1}}],[\"样式中的注释块\",{\"1\":{\"4154\":1}}],[\"样式或\",{\"1\":{\"4151\":1}}],[\"样式\",{\"1\":{\"626\":1,\"4151\":1,\"4154\":1}}],[\"样式化\",{\"0\":{\"102\":1}}],[\"直至执行got到41位置\",{\"1\":{\"4969\":1}}],[\"直至goto到41位置\",{\"1\":{\"4969\":1}}],[\"直到object\",{\"1\":{\"5110\":1}}],[\"直到完成功能代码开发\",{\"1\":{\"4447\":1}}],[\"直到超时才返回结果\",{\"1\":{\"3176\":1}}],[\"直到请求被响应为止\",{\"1\":{\"2631\":1}}],[\"直到该对象\",{\"1\":{\"1786\":1}}],[\"直到有对象处理它为止\",{\"1\":{\"1040\":1,\"1929\":1}}],[\"直接获取连接就可以了\",{\"1\":{\"6164\":1}}],[\"直接访问\",{\"1\":{\"5371\":1}}],[\"直接赋值给\",{\"1\":{\"5339\":1}}],[\"直接会报错\",{\"1\":{\"5121\":1}}],[\"直接打印\",{\"1\":{\"5042\":1,\"5044\":1}}],[\"直接执行finally语句\",{\"1\":{\"4784\":1}}],[\"直接停止\",{\"1\":{\"4738\":1}}],[\"直接用类名来访问即可\",{\"1\":{\"3040\":1}}],[\"直接在类内部private\",{\"1\":{\"3016\":1}}],[\"直接出现在代码中\",{\"1\":{\"3008\":1}}],[\"直接使用hashtable来接收数据库返回结果\",{\"1\":{\"3399\":1}}],[\"直接使用random对象的nextint或者nextlong方法\",{\"1\":{\"3243\":1}}],[\"直接使用属性名取值即可\",{\"1\":{\"3241\":1}}],[\"直接使用<>来指代前边已经指定的类型\",{\"1\":{\"3121\":1}}],[\"直接使用toarray无参方法存在问题\",{\"1\":{\"3104\":1}}],[\"直接使用实现类就可以了\",{\"1\":{\"2718\":1}}],[\"直接使用实现类编程\",{\"1\":{\"2716\":1}}],[\"直接使用相应的状态类对象进行处理\",{\"1\":{\"2417\":1}}],[\"直接返回最后一页\",{\"1\":{\"3232\":1}}],[\"直接返回\",{\"1\":{\"2320\":1,\"5437\":1}}],[\"直接通过类似\",{\"1\":{\"2350\":1}}],[\"直接通过\",{\"1\":{\"2208\":1}}],[\"直接朋友和非直接朋友举例\",{\"1\":{\"2163\":1}}],[\"直接的朋友\",{\"1\":{\"2162\":1}}],[\"直接继承\",{\"1\":{\"2109\":1,\"2202\":1}}],[\"直接修改\",{\"1\":{\"2021\":1}}],[\"直接\",{\"1\":{\"1436\":1,\"2307\":1,\"2316\":1,\"6929\":1}}],[\"直接从\",{\"1\":{\"1363\":1}}],[\"直接从容器中获取即可\",{\"1\":{\"1327\":1}}],[\"直立样式手机\",{\"1\":{\"624\":4}}],[\"直流电\",{\"1\":{\"516\":1,\"535\":1}}],[\"折叠样式手机\",{\"1\":{\"624\":3}}],[\"折叠式手机类\",{\"1\":{\"624\":1}}],[\"旋转式\",{\"1\":{\"613\":1}}],[\"传递性\",{\"1\":{\"5423\":1,\"5656\":1}}],[\"传递给调用处\",{\"1\":{\"4969\":1}}],[\"传递异常可以在方法签名处使用\",{\"1\":{\"4745\":1}}],[\"传递到后端的参数被截断\",{\"1\":{\"3230\":1}}],[\"传递到\",{\"1\":{\"1704\":1}}],[\"传输控制协议连接超时\",{\"1\":{\"3214\":1}}],[\"传统的代码风格是被用来编写非常复杂的企业级\",{\"1\":{\"6795\":1}}],[\"传统的\",{\"1\":{\"5819\":1}}],[\"传统的设计方案\",{\"1\":{\"2518\":1}}],[\"传统的设计方案初步设计出一个\",{\"1\":{\"1694\":1}}],[\"传统的解决方案是\",{\"1\":{\"2416\":1}}],[\"传统的方法\",{\"1\":{\"1763\":1}}],[\"传统的方式是简单地做备份\",{\"1\":{\"1642\":1}}],[\"传统的方式的优缺点\",{\"0\":{\"1764\":1},\"1\":{\"1201\":1}}],[\"传统下多个类相互耦合\",{\"1\":{\"1607\":1}}],[\"传统方案题分析\",{\"1\":{\"1960\":1}}],[\"传统方案解决游戏角色恢复\",{\"0\":{\"1639\":1}}],[\"传统方案解决智能家具项目\",{\"0\":{\"1590\":1}}],[\"传统方案解决网站展现项目\",{\"0\":{\"1412\":1}}],[\"传统方案解决学校院系展示\",{\"0\":{\"838\":1}}],[\"传统方案解决手机操作问题分析\",{\"0\":{\"612\":1}}],[\"传统方案解决手机操作问题\",{\"0\":{\"609\":1}}],[\"传统方式问题分析和解决方案\",{\"0\":{\"2522\":1}}],[\"传统方式代码实现\",{\"0\":{\"2520\":1}}],[\"传统方式是\",{\"1\":{\"1961\":1}}],[\"传统方式完成披萨案例\",{\"0\":{\"1189\":1}}],[\"传统方式解决鸭子项目\",{\"0\":{\"2517\":1}}],[\"传统方式解决克隆羊实例\",{\"0\":{\"1757\":1}}],[\"传统方式解决问题分析\",{\"0\":{\"1121\":1}}],[\"传统方式解决问题图\",{\"0\":{\"1119\":1}}],[\"传统方式解决影院管理\",{\"0\":{\"1118\":1}}],[\"传统方式解决盖房案例\",{\"0\":{\"689\":1}}],[\"传统方式的问题分析\",{\"0\":{\"698\":1},\"1\":{\"1962\":1}}],[\"传统方法对应的类图\",{\"1\":{\"610\":1}}],[\"传入到数据库中\",{\"1\":{\"4693\":1}}],[\"传入为pojo类\",{\"1\":{\"3401\":1}}],[\"传入的是类型完全一致\",{\"1\":{\"3104\":1}}],[\"传入pattern中表示年份统一使用小写的y\",{\"1\":{\"3078\":1}}],[\"传入对象\",{\"1\":{\"2890\":1}}],[\"传入idgenerator\",{\"1\":{\"2381\":1}}],[\"传入\",{\"1\":{\"711\":1,\"2205\":1,\"2539\":1}}],[\"传入一个被代理的对象\",{\"1\":{\"1903\":1}}],[\"传入一个\",{\"1\":{\"540\":1}}],[\"开头\",{\"1\":{\"4253\":1,\"4254\":1}}],[\"开头并且与上一行中的\",{\"1\":{\"4151\":1}}],[\"开头的注释符和注释文本之间\",{\"1\":{\"4085\":1}}],[\"开头的注释之间\",{\"1\":{\"4084\":1}}],[\"开源黑客\",{\"1\":{\"6717\":1}}],[\"开源数据分析集群计算框架\",{\"1\":{\"6488\":1}}],[\"开源分布式htap数据库\",{\"1\":{\"6396\":1}}],[\"开源\",{\"1\":{\"3512\":1}}],[\"开源类库\",{\"1\":{\"1096\":1}}],[\"开放接口层要将异常处理成错误码和错误信息方式返回\",{\"1\":{\"3418\":1}}],[\"开放api层\",{\"1\":{\"3410\":1}}],[\"开放api层可以依赖于web层\",{\"1\":{\"3409\":1}}],[\"开放个性配置步骤\",{\"1\":{\"974\":1}}],[\"开发javafx应用的可视化布局工具\",{\"1\":{\"6427\":1}}],[\"开发流程增强工具\",{\"0\":{\"6367\":1}}],[\"开发人员需要和测试人员一起确定单元测试范围\",{\"1\":{\"3318\":1}}],[\"开发者很有自信不会抛出异常\",{\"1\":{\"4910\":1}}],[\"开发者b使用缓存时直接复制少了下划线\",{\"1\":{\"3010\":1}}],[\"开发者a定义了缓存的key\",{\"1\":{\"3008\":1}}],[\"开发手册\",{\"0\":{\"2980\":1},\"1\":{\"3520\":1}}],[\"开关的接口\",{\"1\":{\"2089\":1}}],[\"开销也很大\",{\"1\":{\"1641\":1}}],[\"开\",{\"1\":{\"1117\":1}}],[\"开音响\",{\"1\":{\"1117\":1}}],[\"开投影仪\",{\"1\":{\"1117\":1}}],[\"开爆米花机\",{\"1\":{\"1117\":2}}],[\"开按钮的命令数组\",{\"1\":{\"781\":1}}],[\"开闭原则是面向对象程序设计的终极目标\",{\"1\":{\"2133\":1}}],[\"开闭原则的作用\",{\"0\":{\"2132\":1}}],[\"开闭原则\",{\"0\":{\"2125\":1},\"1\":{\"725\":1,\"749\":1,\"812\":1,\"1094\":1,\"1104\":1,\"1251\":1,\"1996\":1,\"2127\":1,\"2128\":1,\"2131\":1,\"2153\":1,\"2228\":1,\"2234\":1,\"2416\":1,\"2477\":1,\"2940\":1}}],[\"开机\",{\"1\":{\"607\":1}}],[\"开始下课\",{\"1\":{\"1871\":1}}],[\"开始上课\",{\"1\":{\"1871\":1}}],[\"开始代理\",{\"1\":{\"1842\":1}}],[\"开始\",{\"1\":{\"1313\":1,\"1903\":2,\"5352\":1,\"5379\":1,\"5396\":1,\"5619\":1,\"6744\":1}}],[\"开始时\",{\"1\":{\"150\":1}}],[\"开始运动吧\",{\"1\":{\"140\":1}}],[\"现如今有两种主流的方式\",{\"1\":{\"6856\":1}}],[\"现代图形化用户界面开发库\",{\"1\":{\"6425\":1}}],[\"现代3d游戏开发引擎\",{\"1\":{\"6420\":1}}],[\"现代软件架构的复杂性需要协同开发完成\",{\"1\":{\"2983\":1}}],[\"现代软件行业的高速发展对开发者的综合素质要求越来越高\",{\"1\":{\"2982\":1}}],[\"现要求打印出学校总部员工\",{\"1\":{\"2186\":1}}],[\"现在你就可以这么用了\",{\"1\":{\"6935\":1}}],[\"现在你可以确定\",{\"1\":{\"6835\":1}}],[\"现在你可以清晰地知道\",{\"1\":{\"6828\":1}}],[\"现在你可以将相同的注解在同一类型上使用多次\",{\"1\":{\"5672\":1}}],[\"现在驱动就被找到并实例化了\",{\"1\":{\"6192\":1}}],[\"现在使用spi扩展来加载具体的驱动\",{\"1\":{\"6172\":1}}],[\"现在这种方式就是使用了java的spi扩展机制来实现\",{\"1\":{\"6164\":1}}],[\"现在有这样一个泛型类\",{\"1\":{\"5148\":1}}],[\"现在有一只羊\",{\"1\":{\"1756\":1}}],[\"现在的写法\",{\"1\":{\"5125\":1}}],[\"现在的标准时间是协调世界时\",{\"1\":{\"3548\":1}}],[\"现在让我们看看\",{\"1\":{\"4371\":1}}],[\"现在将所有内容转换为小写\",{\"1\":{\"4200\":1}}],[\"现在人们想要\",{\"1\":{\"2797\":1}}],[\"现在我们来分析其基本结构和实现方法\",{\"1\":{\"2430\":1,\"2504\":1}}],[\"现在我们来分析其基本结构与实现方法\",{\"1\":{\"1516\":1}}],[\"现在\",{\"1\":{\"2399\":1,\"5672\":1,\"6887\":1}}],[\"现在来分析以下的应用场景\",{\"1\":{\"1919\":1}}],[\"现在来分析其基本结构和实现方法\",{\"1\":{\"1106\":1}}],[\"现在来看该模式的以下应用场景\",{\"1\":{\"1662\":1}}],[\"现在对不同手机类型的不同品牌实现操作编程\",{\"1\":{\"607\":1}}],[\"现实生活中的备忘录是用来记录某些要去做的事情\",{\"1\":{\"1619\":1}}],[\"现实生活中的适配器例子\",{\"0\":{\"508\":1}}],[\"现实生活中\",{\"1\":{\"1093\":1}}],[\"现实角度可能会提供更加开阔的思路\",{\"1\":{\"647\":1}}],[\"角色被访问\",{\"1\":{\"605\":2}}],[\"角色\",{\"1\":{\"599\":1,\"600\":1,\"601\":1,\"602\":1,\"759\":1,\"760\":1,\"761\":1,\"762\":1,\"818\":1,\"819\":1,\"820\":1,\"887\":1,\"888\":1,\"889\":1,\"890\":1,\"1109\":1,\"1110\":1,\"1111\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1518\":1,\"1519\":1,\"1520\":1,\"1521\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1630\":1,\"1631\":1,\"1632\":1,\"1679\":1,\"1680\":1,\"1681\":1,\"1682\":1,\"1944\":1,\"1945\":1,\"1946\":1,\"2432\":1,\"2433\":1,\"2434\":1,\"2945\":1,\"2946\":1,\"2947\":1,\"2948\":1,\"2949\":1}}],[\"能不能采用具体的泛型类型进行初始化\",{\"0\":{\"5191\":1}}],[\"能不能给问题排查带来好处\",{\"1\":{\"3294\":1}}],[\"能用对象锁\",{\"1\":{\"3165\":1}}],[\"能用无锁数据结构\",{\"1\":{\"3165\":1}}],[\"能锁区块\",{\"1\":{\"3165\":1}}],[\"能为软件开发的所有阶段提供模型化和可视化支持\",{\"1\":{\"2816\":1}}],[\"能表达软件设计中的动态与静态信息\",{\"1\":{\"2807\":1}}],[\"能减少项目工程中的代码冗余\",{\"1\":{\"2048\":1}}],[\"能够让你没有\",{\"1\":{\"6906\":1}}],[\"能够让开发和重构同步进行\",{\"1\":{\"2765\":1}}],[\"能够将其代码转换为简洁高效的java代码\",{\"1\":{\"6474\":1}}],[\"能够更加清晰的知道它能够被用来修饰哪些对象\",{\"1\":{\"4589\":1}}],[\"能够修饰构造方法\",{\"1\":{\"4520\":1}}],[\"能够保留到运行时\",{\"1\":{\"4520\":1}}],[\"能够保证系统的稳定性\",{\"1\":{\"2046\":1}}],[\"能够识别并执行它们\",{\"1\":{\"4327\":1}}],[\"能够建立索引的种类分为主键索引\",{\"1\":{\"3373\":1}}],[\"能够取到零值\",{\"1\":{\"3243\":1}}],[\"能够描述业务含义\",{\"1\":{\"3218\":1}}],[\"能够准确反映设计思想和代码逻辑\",{\"1\":{\"3218\":1}}],[\"能够表示额外的信息\",{\"1\":{\"3058\":1}}],[\"能够在不修改对象结构中的元素的情况下\",{\"1\":{\"2935\":1}}],[\"能够有效提高代码的可读性和可维护性\",{\"1\":{\"2774\":1}}],[\"能够撤销与重做\",{\"1\":{\"1050\":1}}],[\"能通过代理对象对目标功能扩展\",{\"1\":{\"1846\":1}}],[\"能力\",{\"1\":{\"662\":1}}],[\"能正确地识别出系统中两个独立变化的维度\",{\"1\":{\"596\":1}}],[\"能画不同形状和不同颜色的图形呢\",{\"1\":{\"586\":1}}],[\"分词等一系列工具类\",{\"1\":{\"6656\":1}}],[\"分组配置文件\",{\"1\":{\"6656\":1}}],[\"分组括号\",{\"0\":{\"4097\":1}}],[\"分布式多线程深度学习开发库\",{\"1\":{\"6490\":1}}],[\"分布式数据库\",{\"0\":{\"6390\":1}}],[\"分布式应用\",{\"0\":{\"6380\":1}}],[\"分片\",{\"1\":{\"6342\":1}}],[\"分三步\",{\"1\":{\"6072\":1}}],[\"分为两种\",{\"1\":{\"5533\":2}}],[\"分为一般关联关系\",{\"1\":{\"2864\":1}}],[\"分隔任何的保留关键字\",{\"1\":{\"4070\":1,\"4071\":1}}],[\"分隔开来以提升可读性\",{\"1\":{\"3038\":1}}],[\"分层领域模型规约\",{\"1\":{\"3419\":1}}],[\"分层异常处理规约\",{\"1\":{\"3418\":1}}],[\"分层和模块化合理\",{\"1\":{\"2755\":1}}],[\"分成两个部分\",{\"1\":{\"3254\":1}}],[\"分开维护\",{\"1\":{\"3015\":1}}],[\"分享金句\",{\"1\":{\"2595\":1}}],[\"分解成不同类即可\",{\"1\":{\"2017\":1}}],[\"分钟后下课\",{\"1\":{\"1842\":1}}],[\"分别为\",{\"1\":{\"5012\":1}}],[\"分别被称为泛型类\",{\"1\":{\"4997\":1}}],[\"分别使用三种策略各定义一个注解类做测试\",{\"1\":{\"4595\":1}}],[\"分别用于标明重写某个方法\",{\"1\":{\"4501\":1}}],[\"分别用于存放期望值和测试所用数据\",{\"1\":{\"4388\":1}}],[\"分别是\",{\"1\":{\"3260\":1}}],[\"分别封装行为接口\",{\"1\":{\"2530\":1}}],[\"分别与他们需要的接口建立依赖关系\",{\"1\":{\"2038\":1,\"2055\":1}}],[\"分别输入\",{\"1\":{\"1478\":1}}],[\"分别控制\",{\"1\":{\"769\":1}}],[\"分支\",{\"0\":{\"4127\":1}}],[\"分支判断\",{\"1\":{\"1324\":1}}],[\"分支逻辑\",{\"1\":{\"1255\":1}}],[\"分支逻辑的实现方式\",{\"1\":{\"1255\":1}}],[\"分\",{\"1\":{\"1313\":1}}],[\"分类\",{\"1\":{\"950\":1,\"979\":1,\"1023\":1,\"2907\":1}}],[\"分类为\",{\"1\":{\"114\":1}}],[\"分析及可视化日志文件\",{\"1\":{\"6478\":1}}],[\"分析其factory\",{\"1\":{\"6200\":1}}],[\"分析项目中变化部分与不变部分\",{\"1\":{\"2548\":1}}],[\"分析问题\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"分析得出在\",{\"1\":{\"937\":1}}],[\"分析\",{\"1\":{\"841\":1,\"1205\":1,\"2188\":1,\"2191\":1,\"5155\":1}}],[\"分离变化部分\",{\"1\":{\"2530\":1}}],[\"分离了创建与表示\",{\"1\":{\"732\":1}}],[\"分离开来\",{\"1\":{\"589\":1}}],[\"种类型\",{\"1\":{\"4464\":1}}],[\"种类时\",{\"1\":{\"1206\":1}}],[\"种行为型模式\",{\"1\":{\"2632\":1}}],[\"种结构型模式\",{\"1\":{\"2619\":1}}],[\"种创建型模式\",{\"1\":{\"2610\":1}}],[\"种设计模式表格总结\",{\"1\":{\"946\":1}}],[\"种\",{\"1\":{\"586\":1,\"2599\":1,\"2603\":1,\"2604\":1,\"2611\":1,\"2620\":1,\"2848\":1}}],[\"种颜色的图形就有\",{\"1\":{\"586\":1}}],[\"种形状和\",{\"1\":{\"586\":1}}],[\"通配符类型\",{\"1\":{\"5233\":1}}],[\"通配符导入\",{\"1\":{\"3983\":1}}],[\"通用注解\",{\"1\":{\"6651\":1}}],[\"通用工具类函数库\",{\"1\":{\"6646\":1}}],[\"通用工具库\",{\"0\":{\"6645\":1}}],[\"通用测试框架\",{\"1\":{\"6634\":1}}],[\"通用模板引擎\",{\"1\":{\"6620\":1}}],[\"通用底层字节码操作和分析开发库\",{\"1\":{\"6296\":1}}],[\"通用方法\",{\"0\":{\"5414\":1}}],[\"通用业务处理层\",{\"1\":{\"3414\":1}}],[\"通用性和扩展性\",{\"1\":{\"2570\":1}}],[\"通用的做法是\",{\"1\":{\"2121\":1}}],[\"通知服务出错\",{\"1\":{\"3920\":1}}],[\"通知\",{\"1\":{\"1735\":1}}],[\"通知各个注册的观察者\",{\"1\":{\"1720\":2}}],[\"通知所有的\",{\"1\":{\"1718\":1}}],[\"通知所有注册过的观察者对象\",{\"1\":{\"1680\":1}}],[\"通知观察者方法\",{\"1\":{\"1686\":1}}],[\"通知的发布会花费很多时间\",{\"1\":{\"1675\":1}}],[\"通信录\",{\"1\":{\"1569\":1}}],[\"通信工程不好学\",{\"1\":{\"858\":1}}],[\"通信工程\",{\"1\":{\"858\":1}}],[\"通向全世界\",{\"1\":{\"992\":1}}],[\"通俗易懂的理解\",{\"1\":{\"744\":1}}],[\"通常使用spring\",{\"1\":{\"6821\":1}}],[\"通常用作开源项目的托管服务\",{\"1\":{\"6334\":1}}],[\"通常用于定义用户定制的顺序\",{\"1\":{\"5642\":1}}],[\"通常用来对资源进行释放\",{\"1\":{\"4332\":1}}],[\"通常用来为后面测试方法的准备工作\",{\"1\":{\"4329\":1}}],[\"通常\",{\"1\":{\"4745\":1}}],[\"通常有\",{\"1\":{\"4717\":1}}],[\"通常只有一个\",{\"1\":{\"4101\":1}}],[\"通常会嵌入到项目中\",{\"1\":{\"6614\":1}}],[\"通常会用class\",{\"1\":{\"6164\":1}}],[\"通常会提示编码人员\",{\"1\":{\"4096\":1}}],[\"通常会有多种有效可行的换行方法\",{\"1\":{\"4037\":1}}],[\"通常命名为sync\",{\"1\":{\"3544\":1}}],[\"通常在订单号或交易号大于等于\",{\"1\":{\"3229\":1}}],[\"通常在以下情况可以考虑使用访问者\",{\"1\":{\"2976\":1}}],[\"通常在以下情况下可以考虑使用状态模式\",{\"1\":{\"2480\":1}}],[\"通常在以下情况下可以考虑使用外观模式\",{\"1\":{\"1152\":1}}],[\"通常在以下几种情况中使用策略模式较多\",{\"1\":{\"2555\":1}}],[\"通常是连字符\",{\"1\":{\"4198\":1}}],[\"通常是web向模板渲染引擎层传输的对象\",{\"1\":{\"3424\":1,\"3540\":1}}],[\"通常是子模块中的constant目录下\",{\"1\":{\"3016\":1}}],[\"通常是client\",{\"1\":{\"3016\":1}}],[\"通常是\",{\"1\":{\"3004\":1}}],[\"通常由\",{\"1\":{\"2949\":1}}],[\"通常多个设计模式混合使用\",{\"1\":{\"2594\":1}}],[\"通常通过\",{\"1\":{\"2459\":1}}],[\"通常类的复用分为继承复用和合成复用两种\",{\"1\":{\"2215\":1}}],[\"通常每个接收者都包含对另一个接收者的引用\",{\"1\":{\"1930\":1}}],[\"通常情况下\",{\"1\":{\"885\":1,\"2030\":1}}],[\"通常包含各个解释器需要的数据或是公共的功能\",{\"1\":{\"1471\":1}}],[\"通常包含\",{\"1\":{\"820\":1,\"1520\":1}}],[\"通常都是使用工厂模式进行创建\",{\"1\":{\"731\":1}}],[\"通常还包含一个返回复杂产品的方法\",{\"1\":{\"682\":1}}],[\"通常适用于以下场景\",{\"1\":{\"581\":1}}],[\"通过不可变性保证线程安全\",{\"1\":{\"6921\":1}}],[\"通过企业级整合模式\",{\"1\":{\"6498\":1}}],[\"通过jvm可观察序列\",{\"1\":{\"6573\":1}}],[\"通过jvm或者缓存\",{\"1\":{\"6076\":1}}],[\"通过jmx或http发布参数\",{\"1\":{\"6481\":1}}],[\"通过groovy提供很多有趣的选项\",{\"1\":{\"6479\":1}}],[\"通过插件集成其它分析组件\",{\"1\":{\"6311\":1}}],[\"通过字节码静态分析查找隐藏bug\",{\"1\":{\"6308\":1}}],[\"通过上面\",{\"1\":{\"6084\":1}}],[\"通过上面的解析\",{\"1\":{\"6265\":1}}],[\"通过上面的例子\",{\"1\":{\"5134\":1}}],[\"通过上面的知识\",{\"1\":{\"429\":1}}],[\"通过method对象的invoke\",{\"1\":{\"6017\":1}}],[\"通过它可以动态调用对象的方法\",{\"1\":{\"5846\":1}}],[\"通过它可以在运行时动态修改成员变量的属性值\",{\"1\":{\"5846\":1}}],[\"通过它可以把远程对象当本地对象来调用\",{\"1\":{\"1914\":1}}],[\"通过集成的面向对象的例外处理机制\",{\"1\":{\"5747\":1}}],[\"通过迭代使用equals方法来判断\",{\"1\":{\"5650\":1}}],[\"通过虚拟机从而实现跨平台特性\",{\"1\":{\"5569\":1}}],[\"通过反射方法class\",{\"1\":{\"6261\":1}}],[\"通过反射添加其它类型元素\",{\"1\":{\"5092\":1}}],[\"通过反射机制来调用方法\",{\"1\":{\"3274\":1}}],[\"通过子类实例化对象\",{\"1\":{\"5020\":1}}],[\"通过泛型\",{\"1\":{\"5002\":1}}],[\"通过泛型指定的不同类型来控制形参具体限制的类型\",{\"1\":{\"4997\":1}}],[\"通过finally可以保证锁会被释放\",{\"1\":{\"4785\":1}}],[\"通过注解+aop最终的目标是为了实现模块的解耦\",{\"1\":{\"4697\":1}}],[\"通过切面实现解耦\",{\"0\":{\"4687\":1}}],[\"通过定义\",{\"1\":{\"4684\":1}}],[\"通过定义新的子类很容易地增加新的状态和转换\",{\"1\":{\"2424\":1}}],[\"通过执行\",{\"1\":{\"4599\":1}}],[\"通过代码里标识的元数据让编译器在编译期间进行检查验证\",{\"1\":{\"4497\":1}}],[\"通过代码里标识的元数据生成javadoc文档\",{\"1\":{\"4496\":1}}],[\"通过代理对象\",{\"1\":{\"1844\":1,\"1873\":1}}],[\"通过模块或类的扩展来实现\",{\"1\":{\"3466\":1}}],[\"通过dao层向上传输数据源对象\",{\"1\":{\"3420\":1,\"3535\":1,\"3536\":1}}],[\"通过web封装成http接口\",{\"1\":{\"3410\":1}}],[\"通过文件名就可知道日志文件属于什么应用\",{\"1\":{\"3286\":1}}],[\"通过accept头表达即可\",{\"1\":{\"3224\":1}}],[\"通过标记扫描\",{\"1\":{\"3222\":1}}],[\"通过双重检查锁\",{\"1\":{\"3178\":1}}],[\"通过封装\",{\"0\":{\"2750\":1}}],[\"通过组合\",{\"1\":{\"2740\":1}}],[\"通过组合和委托技术来消除代码重复\",{\"1\":{\"2738\":1}}],[\"通过添加不同的配料\",{\"1\":{\"2667\":1}}],[\"通过这种方式去除对象之间的耦合\",{\"1\":{\"2631\":1}}],[\"通过对其进行复制而克隆出多个和原型类似的新实例\",{\"1\":{\"2608\":1}}],[\"通过对象的序列化实现\",{\"1\":{\"1795\":1}}],[\"通过编译\",{\"1\":{\"2388\":1}}],[\"通过修改jvm在运行时支持对已加载的类进行无限次重定义\",{\"1\":{\"6372\":1}}],[\"通过修改\",{\"1\":{\"2130\":1}}],[\"通过扩展软件\",{\"1\":{\"2130\":1}}],[\"通过构造方法设置属性内容\",{\"1\":{\"5020\":1}}],[\"通过构造方法依赖传递\",{\"1\":{\"2089\":1}}],[\"通过构造函数\",{\"1\":{\"2358\":1}}],[\"通过构造器进行依赖传递\",{\"1\":{\"2089\":1}}],[\"通过构造器\",{\"1\":{\"540\":1}}],[\"通过接口传递实现依赖\",{\"1\":{\"2089\":1}}],[\"通过接口\",{\"1\":{\"2037\":2,\"2050\":2,\"2053\":2,\"2226\":1}}],[\"通过接口来聚合\",{\"1\":{\"1842\":1}}],[\"通过接口或抽象类声明真实主题和代理对象实现的业务方法\",{\"1\":{\"1828\":1}}],[\"通过将一个原型对象传给那个要发动创建的对象\",{\"1\":{\"1741\":1}}],[\"通过前面的分析与应用实例可知观察者模式适合以下几种情形\",{\"1\":{\"1731\":1}}],[\"通过刚刚的最小原型使用示例代码\",{\"1\":{\"1355\":1}}],[\"通过合理的使用外观模式\",{\"1\":{\"1147\":1}}],[\"通过一个外观角色访问各个子系统的功能\",{\"1\":{\"1111\":1}}],[\"通过拷贝原型创建新的对象\",{\"1\":{\"967\":1}}],[\"通过装饰角色为其添加一些职责\",{\"1\":{\"888\":1}}],[\"通过使用不用装饰类及这些装饰类的排列组合\",{\"1\":{\"880\":1}}],[\"通过使用封装\",{\"1\":{\"589\":1}}],[\"通过引入中间件\",{\"1\":{\"748\":1}}],[\"通过继承来实现观察者模式\",{\"1\":{\"1728\":1}}],[\"通过继承\",{\"1\":{\"513\":1,\"4681\":1}}],[\"通过继承或引用适配者的对象\",{\"1\":{\"501\":1}}],[\"通过reallocatememory方法重新分配了一块8字节长度的内存空间\",{\"1\":{\"474\":1}}],[\"通过setmemory方法向每个字节写入byte类型的1\",{\"1\":{\"470\":1}}],[\"通过\",{\"1\":{\"38\":1,\"47\":1,\"711\":1,\"1357\":1,\"1487\":1,\"1697\":1,\"1788\":1,\"2089\":2,\"4487\":3,\"5575\":1,\"6074\":1,\"6837\":1,\"6923\":1,\"6924\":1}}],[\"作家\",{\"1\":{\"6700\":1,\"6701\":1,\"6715\":1,\"6717\":1,\"6720\":1}}],[\"作用\",{\"1\":{\"4526\":1}}],[\"作者和演讲者\",{\"1\":{\"6706\":1}}],[\"作者yongshun\",{\"1\":{\"4458\":1}}],[\"作者是\",{\"1\":{\"2571\":1}}],[\"作者设置为\",{\"1\":{\"112\":1}}],[\"作为参数\",{\"1\":{\"4925\":1,\"5030\":1}}],[\"作为参数传入\",{\"1\":{\"2962\":1}}],[\"作为参数传递给函数\",{\"1\":{\"2382\":1}}],[\"作为查询的字段列表\",{\"1\":{\"3394\":1}}],[\"作为调用方来说\",{\"1\":{\"3044\":1}}],[\"作为\",{\"1\":{\"1548\":1}}],[\"作为一个抽象策略类的子类\",{\"1\":{\"2504\":1}}],[\"作为一个通用的框架来说\",{\"1\":{\"1333\":1}}],[\"作为一个接口\",{\"1\":{\"577\":1}}],[\"作为一个对象\",{\"1\":{\"576\":1}}],[\"继承应该遵循里氏替换原则\",{\"1\":{\"5764\":1}}],[\"继承实现了\",{\"1\":{\"5763\":1}}],[\"继承实现到注解实现\",{\"0\":{\"4676\":1}}],[\"继承是一种强依赖关系\",{\"1\":{\"2782\":1}}],[\"继承是面向对象的四大特性之一\",{\"1\":{\"2723\":1}}],[\"继承也不是一无是处\",{\"1\":{\"2749\":1}}],[\"继承也并非一无是处\",{\"1\":{\"2742\":1}}],[\"继承层次很深\",{\"1\":{\"2743\":1}}],[\"继承层次比较浅\",{\"1\":{\"2743\":1}}],[\"继承层次过深\",{\"1\":{\"2732\":1}}],[\"继承改写成组合意味着要做更细粒度的类的拆分\",{\"1\":{\"2742\":1}}],[\"继承关系复杂\",{\"1\":{\"2743\":1}}],[\"继承关系不复杂\",{\"1\":{\"2743\":1}}],[\"继承关系过于复杂会影响到代码的可读性和可维护性\",{\"1\":{\"2732\":1}}],[\"继承关系会越来越复杂\",{\"1\":{\"2731\":1}}],[\"继承最大的问题就在于\",{\"1\":{\"2732\":1}}],[\"继承性和多态性以及类的关联关系和组合关系的充分理解\",{\"1\":{\"2587\":1}}],[\"继承复用破坏了类的封装性\",{\"1\":{\"2216\":1}}],[\"继承复用虽然有简单和易实现的优点\",{\"1\":{\"2215\":1}}],[\"继承图\",{\"1\":{\"2201\":1}}],[\"继承必须确保超类所拥有的性质在子类中仍然成立\",{\"1\":{\"2103\":1}}],[\"继承在给程序设计带来便利的同时\",{\"1\":{\"2099\":1}}],[\"继承包含这样一层含义\",{\"1\":{\"2098\":1}}],[\"继承时遵循\",{\"1\":{\"2095\":1}}],[\"继承自同一抽象类或者接口的子类\",{\"1\":{\"1328\":1}}],[\"继承抽象构件\",{\"1\":{\"889\":1}}],[\"继承了\",{\"1\":{\"720\":1}}],[\"继承具备强侵入性\",{\"1\":{\"646\":1}}],[\"继承可以很好的实现代码复用\",{\"1\":{\"645\":1}}],[\"继承拥有很多优点\",{\"1\":{\"645\":1}}],[\"继承\",{\"0\":{\"5357\":1,\"5600\":2,\"5762\":1},\"1\":{\"575\":1,\"624\":1,\"906\":1,\"1251\":2,\"2352\":2,\"2834\":1,\"2913\":1,\"5673\":1,\"5772\":1,\"5812\":1}}],[\"里去\",{\"1\":{\"4863\":1}}],[\"里氏替换原是继承复用的基础\",{\"1\":{\"2106\":1}}],[\"里氏替换原则是实现开闭原则的重要方式之一\",{\"1\":{\"2112\":1}}],[\"里氏替换原则的主要作用如下\",{\"1\":{\"2111\":1}}],[\"里氏替换原则的作用\",{\"0\":{\"2110\":1}}],[\"里氏替换原则\",{\"0\":{\"2096\":1},\"1\":{\"1995\":1,\"2095\":1,\"2103\":1,\"2106\":1,\"2227\":1,\"2249\":1}}],[\"里提出来的\",{\"1\":{\"2103\":1}}],[\"里面加上我们需要用到的实现类\",{\"1\":{\"6154\":1}}],[\"里面的key为string\",{\"1\":{\"5017\":1}}],[\"里面的var类型为string类型\",{\"1\":{\"5015\":1}}],[\"里面的值既可以像下面的代码那样通过静态常量来定义\",{\"1\":{\"2375\":1}}],[\"里面还不是很多图形\",{\"1\":{\"2820\":1}}],[\"里面指定生成目标对象的过程\",{\"1\":{\"1888\":1}}],[\"里面包含了享元方法\",{\"1\":{\"1400\":1}}],[\"里面包含了非共享的外部状态信息\",{\"1\":{\"1399\":1}}],[\"里面都是创建好的连接对象\",{\"1\":{\"1375\":1}}],[\"里\",{\"1\":{\"575\":1,\"576\":1,\"577\":1,\"1896\":1}}],[\"里的形式\",{\"1\":{\"574\":1}}],[\"程序猿使用\",{\"0\":{\"6234\":1},\"1\":{\"6227\":1}}],[\"程序提前终止如调用了system\",{\"1\":{\"5713\":1}}],[\"程序所在的线程死亡\",{\"1\":{\"4790\":1}}],[\"程序将跳到catch语句块\",{\"1\":{\"4778\":1}}],[\"程序将跳过catch语句块\",{\"1\":{\"4776\":1}}],[\"程序就不能编译通过\",{\"1\":{\"4725\":1}}],[\"程序就可以调用该对象的方法来访问annotation信息\",{\"1\":{\"4624\":1}}],[\"程序应该从逻辑角度尽可能避免这类异常的发生\",{\"1\":{\"4722\":1}}],[\"程序中可以选择捕获处理\",{\"1\":{\"4722\":1}}],[\"程序中无法处理的错误\",{\"1\":{\"4716\":1}}],[\"程序本身可以捕获并且可以处理的异常\",{\"1\":{\"4720\":1}}],[\"程序\",{\"1\":{\"2104\":1,\"4124\":1}}],[\"程序的可移植性降低\",{\"1\":{\"2099\":1}}],[\"程序的扩展和维护不好\",{\"1\":{\"700\":1}}],[\"程序稳定性更好\",{\"1\":{\"2093\":1}}],[\"程序员常常会遇到这种情况\",{\"1\":{\"2635\":1}}],[\"程序员面临着来自\",{\"1\":{\"2581\":1}}],[\"程序员可以根据创建对象类型使用对应的工厂子类\",{\"1\":{\"1280\":1}}],[\"程序员不需要修改原有代码而重用现有的适配者类\",{\"1\":{\"491\":1}}],[\"程序里的匿名内部类就是\",{\"1\":{\"560\":1}}],[\"默认不可变\",{\"1\":{\"6755\":1}}],[\"默认但是不包括父类声明的任何字段\",{\"1\":{\"5881\":1}}],[\"默认\",{\"1\":{\"5695\":1,\"6005\":1}}],[\"默认返回\",{\"1\":{\"5450\":1}}],[\"默认都是\",{\"1\":{\"5380\":1}}],[\"默认值\",{\"1\":{\"4594\":1}}],[\"默认上层依赖于下层\",{\"1\":{\"3409\":1}}],[\"默认为0\",{\"1\":{\"3123\":1}}],[\"默认方法\",{\"1\":{\"2546\":1,\"5672\":1}}],[\"默认空实现\",{\"1\":{\"1537\":1}}],[\"默认实现了\",{\"1\":{\"2467\":1}}],[\"默认实现\",{\"1\":{\"557\":1,\"564\":1,\"850\":2}}],[\"默认节点\",{\"0\":{\"159\":1}}],[\"适合用<\",{\"1\":{\"3111\":2}}],[\"适合使用迭代器模式\",{\"1\":{\"1557\":1}}],[\"适合使用组合模式\",{\"1\":{\"867\":1}}],[\"适当的规范和标准绝不是消灭代码内容的创造性\",{\"1\":{\"2983\":1}}],[\"适用于多种数据类型执行相同的代码\",{\"1\":{\"4999\":1}}],[\"适用于所有标识符的通用规则\",{\"0\":{\"4161\":1}}],[\"适用于数据结构相对稳定的系统\",{\"1\":{\"2970\":1}}],[\"适用于一个接口不想使用其所有的方法的情况\",{\"1\":{\"550\":1}}],[\"适配上层接口\",{\"1\":{\"3414\":1}}],[\"适配完成\",{\"1\":{\"540\":1}}],[\"适配接口\",{\"1\":{\"513\":1,\"520\":1,\"524\":1,\"540\":1}}],[\"适配者\",{\"1\":{\"500\":1}}],[\"适配器类\",{\"1\":{\"520\":1,\"540\":1}}],[\"适配器再调用被适配者的相关接口方法\",{\"1\":{\"505\":1}}],[\"适配器\",{\"1\":{\"501\":1,\"509\":1}}],[\"适配器编写过程需要结合业务场景全面考虑\",{\"1\":{\"495\":1}}],[\"适配器模式的应用场景\",{\"0\":{\"580\":1}}],[\"适配器模式的注意事项和细节\",{\"0\":{\"573\":1}}],[\"适配器模式属于结构型模式\",{\"1\":{\"488\":1}}],[\"适配器模式\",{\"1\":{\"487\":1,\"498\":1,\"503\":1,\"548\":1,\"581\":1,\"657\":1,\"1010\":1,\"2612\":1}}],[\"更好的实现异常处理\",{\"1\":{\"6924\":1}}],[\"更好\",{\"1\":{\"6744\":1}}],[\"更多语法及使用请参考\",{\"1\":{\"5778\":1}}],[\"更多测试\",{\"1\":{\"4367\":1}}],[\"更简洁的代码\",{\"1\":{\"5670\":1}}],[\"更详细的内容参见答案\",{\"1\":{\"5617\":1}}],[\"更进一步的\",{\"1\":{\"5199\":1}}],[\"更没有了今天文章要谈论的内容\",{\"1\":{\"4940\":1}}],[\"更没有移植性\",{\"1\":{\"3386\":1}}],[\"更少冗余\",{\"1\":{\"4298\":1}}],[\"更容易阅读和理解\",{\"1\":{\"3954\":1}}],[\"更容易在组合体内加入新的对象\",{\"1\":{\"812\":1}}],[\"更通用的术语\",{\"1\":{\"3937\":1}}],[\"更重要的是提升检索速度\",{\"1\":{\"3366\":1}}],[\"更不用说坏点检查了\",{\"1\":{\"6984\":1}}],[\"更不能是text字段\",{\"1\":{\"3364\":1}}],[\"更不允许抛出exception或者throwable\",{\"1\":{\"3277\":1}}],[\"更不允许直接使用中文的方式\",{\"1\":{\"2987\":1}}],[\"更不与组织架构挂钩\",{\"1\":{\"3255\":1}}],[\"更加正确\",{\"1\":{\"6795\":1}}],[\"更加方便\",{\"1\":{\"4685\":1}}],[\"更加灵活\",{\"1\":{\"2745\":1,\"5032\":1}}],[\"更加可读\",{\"1\":{\"1253\":1}}],[\"更利于代码结构的升级扩展\",{\"1\":{\"2239\":1}}],[\"更利于代码的维护和扩展\",{\"1\":{\"1280\":1}}],[\"更新数据表记录时\",{\"1\":{\"3400\":1}}],[\"更新记录\",{\"1\":{\"3388\":1}}],[\"更新天气情况\",{\"1\":{\"1704\":1}}],[\"更新\",{\"1\":{\"1702\":1,\"1716\":2,\"3315\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"128\":1}}],[\"更新时间\",{\"1\":{\"23\":1}}],[\"更注重零部件的创建过程\",{\"1\":{\"673\":1}}],[\"更灵活\",{\"1\":{\"545\":1}}],[\"关于驱动的查找其实都在drivermanager中\",{\"1\":{\"6177\":1}}],[\"关于constructor类本身一些常用方法如下\",{\"1\":{\"5917\":1}}],[\"关于反射稍后分析\",{\"1\":{\"5831\":1}}],[\"关于finally\",{\"0\":{\"5707\":1}}],[\"关于枚举类的一些特殊情况\",{\"1\":{\"4017\":1}}],[\"关于\",{\"1\":{\"3528\":1}}],[\"关于rpc方法返回方式使用result方式的理由\",{\"1\":{\"3278\":1}}],[\"关于hashcode和equals的处理\",{\"1\":{\"3089\":1}}],[\"关于基本数据类型与包装数据类型的使用标准如下\",{\"1\":{\"3058\":1}}],[\"关于这一点\",{\"1\":{\"2174\":1,\"2412\":1}}],[\"关于这些扩展\",{\"1\":{\"45\":1}}],[\"关键词\",{\"1\":{\"6837\":1}}],[\"关键词也可以在\",{\"1\":{\"6835\":1}}],[\"关键词if与括号之间必须有一个空格\",{\"1\":{\"3025\":1}}],[\"关键在于思路和条理\",{\"1\":{\"2810\":1}}],[\"关键字使起不可变\",{\"1\":{\"6833\":1}}],[\"关键字来引用父类的方法实现\",{\"1\":{\"5401\":1}}],[\"关键字进行声明\",{\"1\":{\"5374\":1}}],[\"关键字声明了类型的下界\",{\"1\":{\"5046\":1}}],[\"关键字声明了类型的上界\",{\"1\":{\"5046\":1}}],[\"关键字声明可能会抛出的异常\",{\"1\":{\"4745\":1}}],[\"关键字指定父类子类一定是知道父类定义的\",{\"1\":{\"2912\":1}}],[\"关键字\",{\"0\":{\"5470\":1},\"1\":{\"2683\":1,\"4124\":1,\"5490\":1,\"5780\":1,\"5784\":1}}],[\"关联可以是双向的\",{\"1\":{\"2867\":1}}],[\"关联具有多重性\",{\"1\":{\"2866\":1}}],[\"关联具有\",{\"1\":{\"2865\":1}}],[\"关联\",{\"1\":{\"2162\":1,\"2834\":1,\"2864\":1,\"2917\":1}}],[\"关联关系的特例\",{\"1\":{\"2872\":1}}],[\"关联关系是类与类之间最常用的一种关系\",{\"1\":{\"2864\":1}}],[\"关联关系\",{\"0\":{\"2863\":1,\"5795\":1},\"1\":{\"530\":1,\"540\":1,\"2848\":1}}],[\"关闭cpu\",{\"1\":{\"4791\":1}}],[\"关闭连接操作等等\",{\"1\":{\"4785\":1}}],[\"关闭相应资源\",{\"1\":{\"4785\":1}}],[\"关闭流\",{\"1\":{\"1795\":1}}],[\"关闭文件\",{\"1\":{\"1345\":1}}],[\"关闭华为路由器\",{\"1\":{\"1306\":1}}],[\"关闭华为手机\",{\"1\":{\"1304\":1}}],[\"关闭小米路由器\",{\"1\":{\"1306\":1}}],[\"关闭小米手机\",{\"1\":{\"1304\":1}}],[\"关闭各种设备\",{\"1\":{\"1117\":1}}],[\"关注服务器端编程的\",{\"1\":{\"6737\":1}}],[\"关注对象之间的通信\",{\"1\":{\"1021\":1}}],[\"关注类和对象的组合\",{\"1\":{\"977\":1}}],[\"关机\",{\"1\":{\"607\":1}}],[\"关系更加强烈\",{\"1\":{\"2924\":1}}],[\"关系稳定\",{\"1\":{\"2920\":1}}],[\"关系也是关联关系的一种\",{\"1\":{\"2878\":1}}],[\"关系是接口与实现类之间的关系\",{\"1\":{\"2899\":1}}],[\"关系是对象之间耦合度最大的一种关系\",{\"1\":{\"2893\":1}}],[\"关系是对象之间的一种引用关系\",{\"1\":{\"2864\":1}}],[\"关系是关联关系的一种\",{\"1\":{\"2872\":1}}],[\"关系是一种使用关系\",{\"1\":{\"2850\":1}}],[\"关系和图这些构件组成\",{\"1\":{\"2822\":1}}],[\"关系来替代\",{\"1\":{\"2740\":1}}],[\"关系代替\",{\"1\":{\"2121\":1}}],[\"关系\",{\"1\":{\"530\":1,\"2723\":1,\"2740\":2,\"2878\":1,\"5384\":3,\"5763\":2}}],[\"到了这里\",{\"1\":{\"6887\":1}}],[\"到这我们也就可以得出以下几点信息\",{\"1\":{\"5826\":1}}],[\"到头来\",{\"1\":{\"5144\":1}}],[\"到junit4的演化就是最好的一个例子\",{\"1\":{\"4677\":1}}],[\"到约\",{\"1\":{\"3366\":2}}],[\"到点就通知我\",{\"1\":{\"1076\":1}}],[\"到\",{\"1\":{\"529\":1,\"1489\":1,\"2866\":1,\"3087\":1,\"3254\":1,\"3366\":2,\"5599\":1}}],[\"即返回实例了\",{\"1\":{\"6085\":1}}],[\"即返回方法的名称\",{\"1\":{\"6041\":1}}],[\"即返回方法的参数类型组成的数组\",{\"1\":{\"6035\":1}}],[\"即返回constructor\",{\"1\":{\"5932\":1}}],[\"即方法的返回类型\",{\"1\":{\"6029\":1}}],[\"即设置其可访问性\",{\"1\":{\"5992\":1}}],[\"即包括public\",{\"1\":{\"5881\":1}}],[\"即类的完整名字\",{\"1\":{\"5865\":1}}],[\"即类的扩展不会给已有的系统引入新的错误\",{\"1\":{\"2114\":1}}],[\"即支持面向对象也支持面向过程\",{\"1\":{\"5568\":1}}],[\"即子类对象必须能够替换掉所有父类对象\",{\"1\":{\"5384\":1}}],[\"即形如<t>和<\",{\"1\":{\"5079\":1}}],[\"即父类\",{\"1\":{\"5073\":1}}],[\"即用a类型代替类型参数\",{\"1\":{\"5037\":1}}],[\"即java在语法上支持泛型\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"即catch部分\",{\"1\":{\"4967\":1}}],[\"即如果一个方法可能出现受可查异常\",{\"1\":{\"4749\":1}}],[\"即如果我们没有重写\",{\"1\":{\"4479\":1}}],[\"即error\",{\"1\":{\"4748\":1}}],[\"即对注解了\",{\"1\":{\"4692\":1}}],[\"即对被测对象进行测试时锁需要的一切东西\",{\"1\":{\"4481\":1}}],[\"即对扩展开放\",{\"1\":{\"2147\":1}}],[\"即公开\",{\"1\":{\"4299\":1,\"4302\":1}}],[\"即公共\",{\"1\":{\"4294\":1}}],[\"即每行一个注解\",{\"1\":{\"4135\":1}}],[\"即每个元素有多个访问者对象访问\",{\"1\":{\"2623\":1}}],[\"即除初始化方法和注释之外\",{\"1\":{\"3936\":1}}],[\"即dry原则\",{\"1\":{\"3467\":1}}],[\"即diamond\",{\"1\":{\"3121\":1}}],[\"即一个连接对应于一个fd\",{\"1\":{\"3444\":1}}],[\"即一个类\",{\"1\":{\"2157\":1}}],[\"即一个类应该只负责一项职责\",{\"1\":{\"2002\":1}}],[\"即为级联更新\",{\"1\":{\"3385\":1}}],[\"即建立组合索引idx\",{\"1\":{\"3376\":1}}],[\"即index的简称\",{\"1\":{\"3355\":1}}],[\"即unique\",{\"1\":{\"3355\":1}}],[\"即primary\",{\"1\":{\"3355\":1}}],[\"即是因为对于危险字符\",{\"1\":{\"3333\":1}}],[\"即默认值\",{\"1\":{\"3123\":1}}],[\"即loaderfactor\",{\"1\":{\"3123\":1}}],[\"即<>\",{\"1\":{\"3122\":1}}],[\"即频繁往外读取内容的\",{\"1\":{\"3111\":1}}],[\"即正负x\",{\"1\":{\"3058\":1}}],[\"即在当前包下单独的constant目录下\",{\"1\":{\"3016\":1}}],[\"即在当前子工程的constant目录下\",{\"1\":{\"3016\":1}}],[\"即key是\",{\"1\":{\"3010\":1}}],[\"即未经预先定义的常量\",{\"1\":{\"3008\":1}}],[\"即首先在客户端程序中\",{\"1\":{\"2962\":1}}],[\"即删除<>及其包围的部分\",{\"1\":{\"5072\":1}}],[\"即删除\",{\"1\":{\"2882\":1}}],[\"即双向关系或单向关系\",{\"1\":{\"2865\":1}}],[\"即便某个具体的类或者模块设计得不怎么合理\",{\"1\":{\"2755\":1}}],[\"即便单例有这么多问题\",{\"1\":{\"2378\":1}}],[\"即解释器\",{\"1\":{\"2628\":1}}],[\"即客户端通过代理间接地访问该对象\",{\"1\":{\"2618\":1}}],[\"即增加其额外的功能\",{\"1\":{\"2614\":1}}],[\"即增加其额外功能\",{\"1\":{\"877\":1}}],[\"即定义\",{\"1\":{\"2489\":1}}],[\"即硬编码\",{\"1\":{\"2487\":1}}],[\"即不相等的对象应当均匀分布到所有可能的散列值上\",{\"1\":{\"5446\":1}}],[\"即不能抽奖的状态\",{\"1\":{\"2452\":1}}],[\"即不会执行目标对象额外的业务方法\",{\"1\":{\"1907\":1}}],[\"即懒汉式\",{\"1\":{\"2298\":1,\"2304\":1,\"2310\":1}}],[\"即使在\",{\"1\":{\"6994\":1}}],[\"即使在应用层做了非常完善的校验控制\",{\"1\":{\"3368\":1}}],[\"即使遵循着最佳实践的原则\",{\"1\":{\"6987\":1}}],[\"即使你的\",{\"1\":{\"6799\":1}}],[\"即使你在使用该静态方法的使用t是arrayindexoutofbounds\",{\"1\":{\"5227\":1}}],[\"即使整个系统不可用\",{\"1\":{\"5758\":1}}],[\"即使一些有经验的开发者也需要花费很多时间来思考如何处理异常\",{\"1\":{\"4843\":1}}],[\"即使没有用try\",{\"1\":{\"4723\":1}}],[\"即使java的接口可以实现多继承\",{\"1\":{\"4664\":1}}],[\"即使student类没有显示地被注解\",{\"1\":{\"4617\":1}}],[\"即使它不包含任何代码\",{\"1\":{\"4128\":1}}],[\"即使它们的语句主体是空的或者仅包含一条语句\",{\"1\":{\"4006\":1}}],[\"即使它什么代码也没有\",{\"1\":{\"3184\":1}}],[\"即使这些方法之间的修饰符\",{\"1\":{\"4001\":1}}],[\"即使所有类属性名与数据库字段一一对应\",{\"1\":{\"3396\":1}}],[\"即使双表join也要注意表索引\",{\"1\":{\"3369\":1}}],[\"即使是最好的开发者\",{\"1\":{\"6987\":1}}],[\"即使是自己过段时间也会遗忘的\",{\"1\":{\"4454\":1}}],[\"即使是\",{\"1\":{\"4189\":1}}],[\"即使是组合字段\",{\"1\":{\"3368\":1}}],[\"即使是public也是能够通过编译\",{\"1\":{\"2996\":1}}],[\"即使被调用方法返回空集合或者空对象\",{\"1\":{\"3275\":1}}],[\"即使代码编译期是正确的\",{\"1\":{\"3274\":1}}],[\"即使隔很长时间\",{\"1\":{\"3218\":1}}],[\"即使只有一行代码\",{\"1\":{\"3187\":1}}],[\"即使纯拼音命名方式也要避免采用\",{\"1\":{\"2987\":1}}],[\"即使两个类有依赖关系\",{\"1\":{\"2172\":1}}],[\"即使用\",{\"1\":{\"844\":1,\"1124\":1}}],[\"即当我们给类增加新功能的时候\",{\"1\":{\"2147\":1}}],[\"即将\",{\"1\":{\"2019\":1}}],[\"即代理对象\",{\"1\":{\"1903\":1}}],[\"即扩展目标对象的功能\",{\"1\":{\"1811\":1}}],[\"即通过代理对象访问目标对象\",{\"1\":{\"1811\":1}}],[\"即管理\",{\"1\":{\"1726\":1}}],[\"即根据当前的状态得到\",{\"1\":{\"1653\":1}}],[\"即遍历\",{\"1\":{\"1489\":1}}],[\"即满足开闭原则\",{\"1\":{\"1218\":1}}],[\"即可\",{\"1\":{\"1212\":1,\"2550\":1,\"3020\":1,\"3123\":1}}],[\"即含被装饰者\",{\"1\":{\"936\":1}}],[\"即装饰对象\",{\"1\":{\"885\":1}}],[\"即插即用\",{\"1\":{\"879\":1}}],[\"即空执行\",{\"1\":{\"777\":1}}],[\"即宏命令\",{\"1\":{\"750\":1}}],[\"即命名\",{\"1\":{\"743\":1}}],[\"即充当了指挥者角色\",{\"1\":{\"720\":1}}],[\"即时消息\",{\"1\":{\"654\":1}}],[\"即需要有这样的应用场景\",{\"1\":{\"637\":1}}],[\"即目标对象\",{\"1\":{\"1826\":1}}],[\"即目标\",{\"1\":{\"535\":1}}],[\"即\",{\"1\":{\"529\":1,\"700\":2,\"718\":1,\"809\":1,\"1206\":1,\"1506\":1,\"1741\":1,\"1844\":1,\"1865\":1,\"1990\":1,\"2033\":1,\"2339\":1,\"2524\":1,\"2582\":1,\"2583\":1,\"2584\":1,\"2585\":1,\"2586\":1,\"2788\":1,\"4588\":1,\"4592\":1,\"5015\":1,\"5051\":1,\"6113\":1}}],[\"即被适配者\",{\"1\":{\"516\":1,\"535\":1}}],[\"只获取当前类的字段\",{\"1\":{\"5964\":1}}],[\"只获取类名\",{\"1\":{\"5885\":1}}],[\"只保留一些对外接口使之与外部发生联系\",{\"1\":{\"5752\":1}}],[\"只保留了原始类型\",{\"1\":{\"5094\":1}}],[\"只在集合中添加一个对象\",{\"1\":{\"5444\":1}}],[\"只剩下原始类型\",{\"1\":{\"5091\":1}}],[\"只针对不正常的情况才使用异常\",{\"0\":{\"4847\":1}}],[\"只展示主要代码\",{\"1\":{\"4688\":1}}],[\"只声明一个变量\",{\"1\":{\"4108\":1}}],[\"只依赖日志框架\",{\"1\":{\"3439\":1}}],[\"只包含service\",{\"1\":{\"3439\":1}}],[\"只分配一块存储空间\",{\"1\":{\"3182\":1}}],[\"只可以被子类实现\",{\"1\":{\"2825\":1}}],[\"只能通过\",{\"1\":{\"6267\":1}}],[\"只能通过实现多个接口来达到相同目的\",{\"1\":{\"5572\":1}}],[\"只能找到并加载已经安装到当前java虚拟机中的服务提供者\",{\"1\":{\"6258\":1}}],[\"只能访问外部类的静态成员\",{\"1\":{\"5734\":1}}],[\"只能访问所属类的静态字段和静态方法\",{\"1\":{\"5490\":1}}],[\"只能是通配符的形式\",{\"1\":{\"5197\":1}}],[\"只能是try\",{\"1\":{\"4801\":1}}],[\"只能引用integer的值\",{\"1\":{\"5183\":1}}],[\"只能变为了重载\",{\"1\":{\"5166\":1}}],[\"只能将类型擦除掉\",{\"1\":{\"5166\":1}}],[\"只能存储整数\",{\"1\":{\"5091\":1}}],[\"只能存储字符串\",{\"1\":{\"5091\":1}}],[\"只能存活在源码时\",{\"1\":{\"4524\":1}}],[\"只能接收string或object类型的泛型\",{\"1\":{\"5044\":1}}],[\"只能直接抛错给用户\",{\"1\":{\"3456\":1}}],[\"只能有一个版本号出现在最后的lib目录中\",{\"1\":{\"3433\":1}}],[\"只能为名词\",{\"1\":{\"3224\":1}}],[\"只能应用于类\",{\"1\":{\"3222\":1}}],[\"只能采用继承来实现\",{\"1\":{\"2747\":1}}],[\"只能说我们把简单问题复杂化了\",{\"1\":{\"2591\":1}}],[\"只让会飞的鸟去实现这个接口\",{\"1\":{\"2735\":1}}],[\"只和朋友交流\",{\"1\":{\"2248\":1}}],[\"只会影响到一个依赖类的代码改动\",{\"1\":{\"2175\":1}}],[\"只与直接的朋友通信\",{\"1\":{\"2161\":1}}],[\"只有自己类声明的字段\",{\"1\":{\"5883\":1}}],[\"只有jvm才能调用创建class对象\",{\"1\":{\"5825\":1}}],[\"只有当\",{\"1\":{\"5646\":1}}],[\"只有当开发人员和评审人员都同意\",{\"1\":{\"4098\":1}}],[\"只有\",{\"1\":{\"5292\":1,\"5316\":1}}],[\"只有在特殊情况下\",{\"1\":{\"5743\":1}}],[\"只有在方法中使用\",{\"1\":{\"5743\":1}}],[\"只有在运行时才会出错\",{\"1\":{\"5194\":1}}],[\"只有在语句组之后才需要使用注释\",{\"1\":{\"4126\":1}}],[\"只有arraylist<integer>\",{\"1\":{\"5182\":1}}],[\"只有匹配异常的第一个\",{\"1\":{\"4900\":1}}],[\"只有没有异常抛出的时候\",{\"1\":{\"4862\":1}}],[\"只有这样\",{\"1\":{\"4845\":1}}],[\"只有finally块\",{\"1\":{\"4738\":1}}],[\"只有注解被定义为runtime后\",{\"1\":{\"4623\":1}}],[\"只有对需求有一定的理解后才能知道什么是代码的正确性\",{\"1\":{\"4449\":1}}],[\"只有类中方法数量足够少\",{\"1\":{\"2030\":1}}],[\"只有逻辑足够简单\",{\"1\":{\"2030\":1}}],[\"只有建造者模式可以很好地描述该类产品的创建\",{\"1\":{\"663\":1}}],[\"只羊\",{\"1\":{\"1756\":1}}],[\"只影响到了迭代器\",{\"1\":{\"1556\":1}}],[\"只影响到聚合对象\",{\"1\":{\"1556\":1}}],[\"只不过这个文件只会在classpath下的jar包中\",{\"1\":{\"6218\":1}}],[\"只不过这个时候的泛型为object\",{\"1\":{\"5113\":1}}],[\"只不过前者返回的class类型后者返回的type\",{\"1\":{\"6048\":1}}],[\"只不过将类实例化的过程放在了静态代码块中\",{\"1\":{\"2295\":1}}],[\"只不过享元模式为工厂方法模式增加了缓存这一功能\",{\"1\":{\"1447\":1}}],[\"只不过实现方式不同\",{\"1\":{\"544\":1}}],[\"只关心产品的品牌\",{\"1\":{\"1274\":1}}],[\"只关心什么产品由什么工厂生产即可\",{\"1\":{\"729\":1}}],[\"只对结果负责\",{\"1\":{\"1088\":1}}],[\"只要x\",{\"1\":{\"5657\":1}}],[\"只要在每个测试方法标注\",{\"1\":{\"4485\":1}}],[\"只要在网上建立一个每个朋友都可以访问的\",{\"1\":{\"1569\":1}}],[\"只要涉及多个表\",{\"1\":{\"3388\":1}}],[\"只要没有唯一索引\",{\"1\":{\"3368\":1}}],[\"只要受害者用户一访问\",{\"1\":{\"3343\":1}}],[\"只要其中之一没有捕获抛出的异常\",{\"1\":{\"3174\":1}}],[\"只要覆写equals\",{\"1\":{\"3089\":1}}],[\"只要本周跨年\",{\"1\":{\"3078\":1}}],[\"只要是合法的\",{\"1\":{\"4226\":1}}],[\"只要是这个线程内定义的\",{\"1\":{\"3182\":1}}],[\"只要是在类中用到了对方\",{\"1\":{\"2851\":1}}],[\"只要是高层模块需要调度多个子系统\",{\"1\":{\"1096\":1}}],[\"只要我们控制好它们的副作用\",{\"1\":{\"2749\":1}}],[\"只要搞清楚了这条原则是为了解决什么样的问题而产生的\",{\"1\":{\"2716\":1}}],[\"只要修改父类的模板方法或者已经实现的某些步骤\",{\"1\":{\"2681\":1}}],[\"只要添加一种策略\",{\"1\":{\"2550\":1}}],[\"只要两个对象之间有耦合关系\",{\"1\":{\"2162\":1}}],[\"只要把命令对象放到列队\",{\"1\":{\"794\":1}}],[\"只要大家了解布尔类型就知道这不符合逻辑\",{\"1\":{\"436\":1}}],[\"只是在内存中开辟了一个存储空间\",{\"1\":{\"5131\":1}}],[\"只是new自定义异常\",{\"1\":{\"3278\":1}}],[\"只是转换接口\",{\"1\":{\"3108\":1}}],[\"只是因为\",{\"1\":{\"2749\":1}}],[\"只是简单替换而已\",{\"1\":{\"2702\":1}}],[\"只是实现起来会非常奇怪\",{\"1\":{\"2356\":1}}],[\"只是增加方法\",{\"1\":{\"2023\":1}}],[\"只是\",{\"1\":{\"1728\":1,\"2820\":1}}],[\"只是不能实例化\",{\"1\":{\"719\":1}}],[\"只是将实现类的方法搬移到接口定义中的时候\",{\"1\":{\"2712\":1}}],[\"只是将\",{\"1\":{\"529\":1}}],[\"只需增加一个\",{\"1\":{\"2968\":1}}],[\"只需分发广播\",{\"1\":{\"1734\":1}}],[\"只需多写一个相应的工厂类\",{\"1\":{\"1221\":1}}],[\"只需知道参数即可\",{\"1\":{\"1176\":1}}],[\"只需要在启动的时候根据配置文件解析\",{\"1\":{\"6216\":1}}],[\"只需要在方法前加上\",{\"1\":{\"4293\":1}}],[\"只需要让新的图形类继承\",{\"1\":{\"2151\":1}}],[\"只需要修改该类就可\",{\"1\":{\"1206\":1}}],[\"只需要知道抽象部分和实现部分的接口就可以了\",{\"1\":{\"634\":1}}],[\"只需要去覆盖我们\",{\"1\":{\"566\":1}}],[\"只需修改适配器即可\",{\"1\":{\"537\":1}}],[\"使你的依赖基于此\",{\"1\":{\"6885\":1}}],[\"使引用不变\",{\"1\":{\"5475\":1}}],[\"使数值不变\",{\"1\":{\"5474\":1}}],[\"使后续的子系统或模块设计在一个既定的框架内和技术方向上继续演化\",{\"1\":{\"3460\":1}}],[\"使release版本号有延续性\",{\"1\":{\"3428\":1}}],[\"使字段与do类解耦\",{\"1\":{\"3396\":1}}],[\"使代码变得可测避免为了达到测试要求而书写不规范测试代码\",{\"1\":{\"3317\":1}}],[\"使代码易于维护\",{\"1\":{\"1567\":1}}],[\"使程序无法根据不同的异常做出正确的应激反应\",{\"1\":{\"3267\":1}}],[\"使程序设计更加标准化\",{\"1\":{\"2589\":1}}],[\"使别的程序员能够迅速了解到代码背后的信息\",{\"1\":{\"3218\":1}}],[\"使主干代码更加晰\",{\"1\":{\"3036\":1}}],[\"使可理解性降低\",{\"1\":{\"2996\":1}}],[\"使每一个访问者的功能都比较单一\",{\"1\":{\"2938\":1}}],[\"使其构成一个不可分割的独立实体\",{\"1\":{\"5752\":1}}],[\"使其能够快速接替自己的工作\",{\"1\":{\"3218\":1}}],[\"使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作\",{\"1\":{\"2931\":1}}],[\"使其可完成原始计划阶段中完全没有提到的功能\",{\"1\":{\"2803\":1}}],[\"使软件设计人员沟通更简明\",{\"1\":{\"2816\":1}}],[\"使软件开发效率大大提高\",{\"1\":{\"2589\":1}}],[\"使原有对象之间不必相互了解\",{\"1\":{\"2626\":1}}],[\"使发出请求的责任和执行请求的责任分割开\",{\"1\":{\"2622\":1}}],[\"使这些子系统更加容易被访问\",{\"1\":{\"2616\":1}}],[\"使这个抽象过程的不同实现方法可以构造出不同表现\",{\"1\":{\"664\":1}}],[\"使设计的代码可重用性高\",{\"1\":{\"2590\":1}}],[\"使设计复杂化\",{\"1\":{\"2046\":1}}],[\"使它们可以独立变化\",{\"1\":{\"2613\":1}}],[\"使它们可以相互替换\",{\"1\":{\"2488\":1,\"2630\":1}}],[\"使它易于切换\",{\"1\":{\"2551\":1}}],[\"使之成为新对象的一部分\",{\"1\":{\"2219\":1}}],[\"使对象不需要知道链的结构\",{\"1\":{\"1980\":1}}],[\"使文档恢复到之前的状态\",{\"1\":{\"1620\":1}}],[\"使调用者与实现者相关分离\",{\"1\":{\"757\":1}}],[\"使创建产品的灵活性大大增加\",{\"1\":{\"732\":1}}],[\"使高层代码架构稳定\",{\"1\":{\"639\":1}}],[\"使两个层次可以独立改变\",{\"1\":{\"588\":1}}],[\"使用起来它们显得更整洁\",{\"1\":{\"6905\":1}}],[\"使用框架或者灵活性更高的内部研发的解决方案\",{\"1\":{\"6856\":1}}],[\"使用集合的时候\",{\"1\":{\"6836\":1}}],[\"使用集合转数组的方法\",{\"1\":{\"3104\":1}}],[\"使用依赖注入是编写可测试软件最好的方法之一\",{\"1\":{\"6820\":1}}],[\"使用检查异常的时候一定要注意\",{\"1\":{\"6817\":1}}],[\"使用服务端架构\",{\"1\":{\"6676\":1}}],[\"使用约定而非配置\",{\"1\":{\"6668\":1,\"6671\":1}}],[\"使用简单的持久化数据管理框架\",{\"1\":{\"6552\":1}}],[\"使用简单工厂模式2\",{\"1\":{\"1212\":1}}],[\"使用简单工厂模式\",{\"1\":{\"1212\":1,\"1238\":1}}],[\"使用简单工厂模式会增加系统中类的个数\",{\"1\":{\"1180\":1}}],[\"使用web\",{\"1\":{\"6514\":1}}],[\"使用强大的插件和配置架构进行完全重写\",{\"1\":{\"6477\":1}}],[\"使用第三方转换器进行文档格式转换\",{\"1\":{\"6409\":1}}],[\"使用第三方提供的组件\",{\"1\":{\"583\":1}}],[\"使用基于neo4j查询语言进行代码静态分析\",{\"1\":{\"6309\":1}}],[\"使用流式api进一步简化字节码生成\",{\"1\":{\"6297\":1}}],[\"使用groovy\",{\"1\":{\"6292\":1}}],[\"使用generics时忽略没有指定相应的类型\",{\"1\":{\"4562\":1}}],[\"使用扩展类加载器为指定的服务创建serviceloader\",{\"1\":{\"6258\":1}}],[\"使用线程上下文的类加载器来创建serviceloader\",{\"1\":{\"6258\":1}}],[\"使用parseline方法进行解析\",{\"1\":{\"6258\":1}}],[\"使用系统类加载器\",{\"1\":{\"6258\":1}}],[\"使用指定的类加载器和服务创建服务加载器\",{\"1\":{\"6258\":1}}],[\"使用指南\",{\"1\":{\"114\":1,\"115\":1}}],[\"使用规范\",{\"0\":{\"6237\":1}}],[\"使用默认factory实现\",{\"1\":{\"6206\":1}}],[\"使用默认的\",{\"1\":{\"1772\":1}}],[\"使用后备factory实现\",{\"1\":{\"6201\":1}}],[\"使用常量池\",{\"1\":{\"6101\":1}}],[\"使用native方法从jvm获取构造器\",{\"1\":{\"6076\":1}}],[\"使用软引用保存\",{\"1\":{\"6076\":1}}],[\"使用外部配置的实现\",{\"1\":{\"6054\":1}}],[\"使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系\",{\"1\":{\"1153\":1}}],[\"使用外观模式好\",{\"1\":{\"1150\":1}}],[\"使用此\",{\"1\":{\"5935\":1}}],[\"使用此标注的时候不能与其它标注一起使用\",{\"1\":{\"4296\":1}}],[\"使用该方法创建的类\",{\"1\":{\"5877\":1}}],[\"使用该解释器来解释语言中的句子\",{\"1\":{\"1455\":1}}],[\"使用它又什么风险\",{\"0\":{\"5663\":1}}],[\"使用bigdecimal\",{\"1\":{\"5593\":1}}],[\"使用bigdecimal来定义值\",{\"1\":{\"3052\":1}}],[\"使用抽象类\",{\"1\":{\"5392\":1}}],[\"使用抽象命令接口使请求方的代码架构稳定\",{\"1\":{\"798\":1}}],[\"使用接口\",{\"1\":{\"5389\":1}}],[\"使用接口隔离原则代码\",{\"1\":{\"2054\":1}}],[\"使用选择\",{\"1\":{\"5388\":1}}],[\"使用add方法添加一个整型\",{\"1\":{\"5121\":1}}],[\"使用的规则就是\",{\"1\":{\"5046\":1}}],[\"使用原则\",{\"1\":{\"5046\":1}}],[\"使用原型模式改进传统方式\",{\"1\":{\"1770\":1}}],[\"使用原型模式将对象复制一份\",{\"1\":{\"1744\":1}}],[\"使用就可以\",{\"1\":{\"4891\":1}}],[\"使用场合\",{\"1\":{\"4878\":1}}],[\"使用lock对象保证线程同步\",{\"1\":{\"4785\":1}}],[\"使用注解\",{\"1\":{\"4643\":1}}],[\"使用这个注解\",{\"1\":{\"4613\":1}}],[\"使用这种方式\",{\"1\":{\"2308\":1}}],[\"使用类型的任何地方\",{\"1\":{\"4590\":1}}],[\"使用类图来表达并且明确类之间的关系\",{\"1\":{\"3454\":1}}],[\"使用单元测试可以有效地降低程序出错的机率\",{\"1\":{\"4435\":1}}],[\"使用单例可以降低系统的内存压力\",{\"1\":{\"2342\":1}}],[\"使用单例模式可以提高系统性能\",{\"1\":{\"2337\":1}}],[\"使用单例模式\",{\"1\":{\"1134\":1}}],[\"使用自定义变量进行测试\",{\"1\":{\"4407\":1}}],[\"使用定义的变量作为参数进行测试\",{\"1\":{\"4391\":1}}],[\"使用花括号来配对\",{\"1\":{\"4006\":1}}],[\"使用活动图来表示\",{\"1\":{\"3455\":1}}],[\"使用时序图来表达并且明确各调用环节的输入与输出\",{\"1\":{\"3453\":1}}],[\"使用状态图来表达并且明确状态变化的各个触发条件\",{\"1\":{\"3452\":1}}],[\"使用状态模式完成借贷平台项目的审核模块\",{\"1\":{\"2463\":1}}],[\"使用用例图来表达更加清晰的结构化需求\",{\"1\":{\"3451\":1}}],[\"使用cas保证更新的线程安全性\",{\"1\":{\"6076\":1}}],[\"使用catch\",{\"1\":{\"3418\":1}}],[\"使用char定长字符串类型\",{\"1\":{\"3357\":1}}],[\"使用countdownlatch进行异步转同步操作\",{\"1\":{\"3176\":1}}],[\"使用collection接口任何实现类的addall\",{\"1\":{\"3107\":1}}],[\"使用throw语句抛出null等等\",{\"1\":{\"4821\":1}}],[\"使用type\",{\"1\":{\"4660\":2}}],[\"使用tinyint类型\",{\"1\":{\"3351\":1}}],[\"使用toarray带参方法\",{\"1\":{\"3106\":1}}],[\"使用foundation\",{\"1\":{\"3316\":1}}],[\"使用final关键字可以强制重新定义一个变量\",{\"1\":{\"3074\":1}}],[\"使用全英文来注释和描述日志错误信息\",{\"1\":{\"3296\":1}}],[\"使用占位符仅是替换动作\",{\"1\":{\"3287\":1}}],[\"使用门面模式的日志框架\",{\"1\":{\"3280\":1}}],[\"使用抛异常返回方式\",{\"1\":{\"3278\":1}}],[\"使用java创建动态\",{\"1\":{\"6665\":1}}],[\"使用java编写的模板引擎\",{\"1\":{\"6621\":1}}],[\"使用jcl\",{\"1\":{\"3282\":1}}],[\"使用jdk8的optional类来防止npe问题\",{\"1\":{\"3276\":1}}],[\"使用json格式而非xml\",{\"1\":{\"3235\":1}}],[\"使用纯数字来进行错误码编排不利于感性记忆和分类\",{\"1\":{\"3263\":1}}],[\"使用大于或小于的区间判断条件来代替\",{\"1\":{\"3190\":1}}],[\"使用如下类实现\",{\"1\":{\"3180\":1}}],[\"使用悲观锁策略\",{\"1\":{\"3175\":1}}],[\"使用spi服务发现机制\",{\"1\":{\"6204\":1}}],[\"使用spi来获取驱动的实现\",{\"1\":{\"6183\":1,\"6186\":1}}],[\"使用spi的serviceloader来加载接口的实现\",{\"1\":{\"6180\":1}}],[\"使用slf4j\",{\"1\":{\"3280\":1}}],[\"使用scheduledexecutorservice则没有这个问题\",{\"1\":{\"3174\":1}}],[\"使用stringbuilder的append方法进行扩展\",{\"1\":{\"3071\":1}}],[\"使用string\",{\"1\":{\"2993\":1}}],[\"使用version作为更新依据\",{\"1\":{\"3173\":1}}],[\"使用dateutils\",{\"1\":{\"3160\":1}}],[\"使用diamond语法或全省略\",{\"1\":{\"3121\":1}}],[\"使用map\",{\"1\":{\"3124\":1}}],[\"使用map的方法keyset\",{\"1\":{\"3101\":1}}],[\"使用entryset遍历map类集合kv\",{\"1\":{\"3124\":1}}],[\"使用工具类arrays\",{\"1\":{\"3108\":1}}],[\"使用工厂模式\",{\"1\":{\"1240\":1}}],[\"使用isnull\",{\"1\":{\"3383\":1}}],[\"使用isempty\",{\"1\":{\"3090\":1}}],[\"使用if\",{\"1\":{\"3203\":2}}],[\"使用ide中的工具source\",{\"1\":{\"3062\":1}}],[\"使用索引访问用string的split方法得到的数组时\",{\"1\":{\"3064\":1}}],[\"使用查找功能才能定位到要修改的常量\",{\"1\":{\"3015\":1}}],[\"使用完整的单词组合来表达\",{\"1\":{\"2999\":1}}],[\"使用完成之后还需要再存储回外部共享存储区\",{\"1\":{\"2403\":1}}],[\"使用访问者模式\",{\"1\":{\"2975\":1}}],[\"使用面向对象的继承机制来实现泛化关系\",{\"1\":{\"2894\":1}}],[\"使用者依赖接口\",{\"1\":{\"2709\":1}}],[\"使用者是\",{\"1\":{\"1427\":1}}],[\"使用户对单个对象和组合对象具有一致的访问性\",{\"1\":{\"2615\":1}}],[\"使用到的任何标准\",{\"1\":{\"4251\":1}}],[\"使用到多种设计模式\",{\"1\":{\"2578\":1}}],[\"使用到了享元模式\",{\"1\":{\"1433\":1}}],[\"使用过什么设计模式\",{\"1\":{\"2577\":1}}],[\"使用设计模式是增加软件组件灵活性并使其易于复用的方式之一\",{\"1\":{\"2790\":1}}],[\"使用设计模式\",{\"1\":{\"2575\":1}}],[\"使用策略对象\",{\"1\":{\"2546\":2}}],[\"使用算法的客户\",{\"1\":{\"2489\":1}}],[\"使用举例\",{\"1\":{\"2379\":1}}],[\"使用枚举值来指代月份\",{\"1\":{\"3087\":1}}],[\"使用枚举\",{\"1\":{\"2328\":1}}],[\"使用静态或者其它形式的\",{\"1\":{\"3983\":1}}],[\"使用静态内部类完成单例模式\",{\"1\":{\"2320\":1}}],[\"使用静态代理方式\",{\"1\":{\"1836\":1}}],[\"使用方法\",{\"0\":{\"6171\":1}}],[\"使用方便\",{\"1\":{\"2350\":1}}],[\"使用方的代码就不需要修\",{\"1\":{\"2151\":1}}],[\"使用方\",{\"1\":{\"2144\":1,\"2147\":1,\"2149\":1,\"2152\":1}}],[\"使用看看存在的问题\",{\"1\":{\"2144\":1,\"2149\":1,\"2152\":1}}],[\"使用组合就更加合理\",{\"1\":{\"2745\":1}}],[\"使用组合关系\",{\"1\":{\"2124\":1}}],[\"使用组合仍然可以使用到\",{\"1\":{\"2124\":1}}],[\"使用组合替代继承\",{\"1\":{\"544\":1}}],[\"使用里氏替原则\",{\"1\":{\"2101\":1}}],[\"使用一把\",{\"1\":{\"2058\":1}}],[\"使用一种方法就可以遍历对象了\",{\"1\":{\"1554\":1}}],[\"使用多个专门的接口还能够体现对象的层次\",{\"1\":{\"2047\":1}}],[\"使用代理模式主要有两个目的\",{\"1\":{\"1918\":1}}],[\"使用代理模式的例子也很多\",{\"1\":{\"1810\":1}}],[\"使用泛型方法确认类型\",{\"1\":{\"1871\":1}}],[\"使用序列化来实现深拷贝\",{\"1\":{\"1791\":1}}],[\"使用备忘录对象恢复到站前\",{\"1\":{\"1655\":1}}],[\"使用中介者模式将网状结构分离为星型结构\",{\"1\":{\"1607\":1}}],[\"使用解释器可能带来的问题\",{\"1\":{\"1494\":1}}],[\"使用享元模式时\",{\"1\":{\"1443\":1}}],[\"使用哪个构造函数以及对应的构造函数参数都是什么等等\",{\"1\":{\"1334\":1}}],[\"使用饿汉式\",{\"1\":{\"1134\":1}}],[\"使用对象池来减少重复对象的创建\",{\"1\":{\"1001\":1}}],[\"使用对象适配器\",{\"1\":{\"540\":1}}],[\"使用对象适配器模式完成\",{\"1\":{\"535\":1}}],[\"使用命令设计模式\",{\"1\":{\"783\":1}}],[\"使用程序\",{\"1\":{\"722\":1}}],[\"使用了jetty\",{\"1\":{\"6576\":1}}],[\"使用了约束规划技术\",{\"1\":{\"6322\":1}}],[\"使用了method类的invoke\",{\"1\":{\"6020\":1}}],[\"使用了m1的方法\",{\"1\":{\"566\":1}}],[\"使用了继承关系\",{\"1\":{\"2744\":1}}],[\"使用了观察者模式设计后\",{\"1\":{\"1721\":1}}],[\"使用了建造者模式\",{\"1\":{\"715\":1}}],[\"使用桥接模式可以解耦这些变化的维度\",{\"1\":{\"639\":1}}],[\"使用桥接模式对应的类图\",{\"1\":{\"618\":1}}],[\"使用桥接模式改进传统方式\",{\"1\":{\"617\":1}}],[\"使用桥接模式\",{\"1\":{\"615\":1}}],[\"使用\",{\"1\":{\"570\":1,\"899\":1,\"1718\":1,\"1768\":1,\"1790\":1,\"1795\":1,\"2052\":2,\"2058\":3,\"2066\":1,\"2527\":1,\"3208\":1,\"3212\":1,\"4124\":1,\"4159\":1,\"4166\":1,\"4266\":1,\"4470\":1,\"4621\":1,\"4694\":1,\"4862\":1,\"4864\":1,\"5046\":1,\"5054\":1,\"5309\":1,\"5410\":1,\"5468\":1,\"5754\":1,\"6063\":1,\"6080\":1,\"6822\":1,\"6830\":1,\"6874\":1,\"6952\":1}}],[\"使用成本更低\",{\"1\":{\"545\":1}}],[\"使得修改接口的成本也变的很低\",{\"1\":{\"5396\":1}}],[\"使得无法拿到足够的错误信息来定位问题\",{\"1\":{\"4912\":1}}],[\"使得操作集合可相对自由地演化而不影响系统的数据结构\",{\"1\":{\"2937\":1}}],[\"使得复用这些代码变得更加困难\",{\"1\":{\"2789\":1}}],[\"使得系统更加庞大\",{\"1\":{\"2683\":1}}],[\"使得系统易于维护和扩展\",{\"1\":{\"1574\":1}}],[\"使得子类可以不改变一个算法的结构\",{\"1\":{\"2639\":1}}],[\"使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤\",{\"1\":{\"2621\":1}}],[\"使得子系统的变化不会影响调用它的客户类\",{\"1\":{\"1099\":1}}],[\"使得原本由于接口不兼容而不能一起工作的那些类能一起工作\",{\"1\":{\"2612\":1}}],[\"使得可以独立于其\",{\"1\":{\"2551\":1}}],[\"使得以\",{\"1\":{\"2104\":1}}],[\"使得事件具备跨域\",{\"1\":{\"1735\":1}}],[\"使得一方的变动可以通知到感兴趣的另一方对象\",{\"1\":{\"1730\":1}}],[\"使得用户不需要关心状态的保存细节\",{\"1\":{\"1658\":1}}],[\"使得对象易于独立地被复用\",{\"1\":{\"1573\":1}}],[\"使得调用端只需跟这个接口发生调用\",{\"1\":{\"1124\":1}}],[\"使得同样的创建行为可以生产出不同的产品\",{\"1\":{\"732\":1}}],[\"使得创建过程更加清晰\",{\"1\":{\"724\":1}}],[\"使得相同的创建过程可以创建不同的产品对象\",{\"1\":{\"722\":1}}],[\"使得\",{\"1\":{\"526\":1}}],[\"由red\",{\"1\":{\"6616\":1}}],[\"由ibm开发\",{\"1\":{\"6615\":1}}],[\"由sun公司提出基于xml的文档格式\",{\"1\":{\"6410\":1}}],[\"由oracle开发\",{\"1\":{\"6285\":1}}],[\"由oracle赞助支持的java\",{\"1\":{\"6283\":1}}],[\"由jvm进行调用业务方法\",{\"1\":{\"6114\":1}}],[\"由哪些实际的部分实现的\",{\"1\":{\"5320\":1}}],[\"由外部指定\",{\"1\":{\"5015\":1}}],[\"由c转为b\",{\"1\":{\"3259\":1}}],[\"由content\",{\"1\":{\"3224\":1}}],[\"由子类决定生产什么产品\",{\"1\":{\"2606\":1}}],[\"由父类和子类共同继承\",{\"1\":{\"2227\":1}}],[\"由勃兰特\",{\"1\":{\"2127\":1}}],[\"由麻省理工学院计算机科学实验室的里斯科夫\",{\"1\":{\"2103\":1}}],[\"由罗伯特\",{\"1\":{\"2001\":1}}],[\"由副校长审批\",{\"1\":{\"1958\":1}}],[\"由院长审批\",{\"1\":{\"1957\":1}}],[\"由教学主任审批\",{\"1\":{\"1956\":1}}],[\"由中介者对象负责后续的交互\",{\"1\":{\"1582\":1}}],[\"由工厂方法模式创建的子类\",{\"1\":{\"1249\":1}}],[\"由工厂子类完成\",{\"1\":{\"1248\":1}}],[\"由具体子类实现\",{\"1\":{\"2655\":1}}],[\"由具体工厂来创建\",{\"1\":{\"1232\":1,\"1292\":1}}],[\"由具体建造者来创建其各个零部件\",{\"1\":{\"681\":1}}],[\"由\",{\"1\":{\"1227\":1}}],[\"由这个类来封装实例化对象的行为\",{\"1\":{\"1171\":1}}],[\"由于它不可变性\",{\"1\":{\"6802\":1}}],[\"由于是private必须设置可访问\",{\"1\":{\"5914\":1}}],[\"由于是一份实例\",{\"1\":{\"1418\":1}}],[\"由于一些问题在新窗口打开的存在\",{\"1\":{\"5317\":1}}],[\"由于一个请求没有明确的接收者\",{\"1\":{\"1939\":1}}],[\"由于\",{\"1\":{\"5194\":1,\"6820\":1,\"6858\":1}}],[\"由于枚举类也是类\",{\"1\":{\"4105\":1}}],[\"由于多表关联查询语句没有加表的别名\",{\"1\":{\"3388\":1}}],[\"由于hashmap的干扰\",{\"1\":{\"3151\":1}}],[\"由于没有设置容量初始大小\",{\"1\":{\"3123\":1}}],[\"由于使用了\",{\"1\":{\"2968\":1}}],[\"由于继承关系自身的缺点\",{\"1\":{\"2648\":1}}],[\"由于单例模式只允许创建一个对象\",{\"1\":{\"2348\":1}}],[\"由于每个类都减少了不必要的依赖\",{\"1\":{\"2197\":1}}],[\"由于亲合度降低\",{\"1\":{\"2160\":1}}],[\"由于聚合与迭代器的关系非常密切\",{\"1\":{\"1563\":1}}],[\"由于聚合关联关系建立在抽象层\",{\"1\":{\"636\":1}}],[\"由于聚合关系建立在抽象层\",{\"1\":{\"596\":1}}],[\"由于在解释器模式中使用类来表示语言的文法规则\",{\"1\":{\"1459\":1}}],[\"由于享元模式需要额外维护一个保存享元的数据结构\",{\"1\":{\"1451\":1}}],[\"由于抽象构件声明了所有子类中的全部方法\",{\"1\":{\"823\":1}}],[\"由于其继承了\",{\"1\":{\"526\":1}}],[\"由内而外\",{\"1\":{\"144\":1}}],[\"必为true\",{\"1\":{\"5656\":1}}],[\"必执行的代码\",{\"1\":{\"4774\":1}}],[\"必要时插入强制类型转换代码\",{\"1\":{\"5074\":1}}],[\"必要时抽取共性方法\",{\"1\":{\"3467\":1}}],[\"必要的领域模型对象\",{\"1\":{\"3439\":1}}],[\"必然可以构建一个松耦合的日志系统\",{\"1\":{\"6207\":1}}],[\"必然会出现如下的情况\",{\"1\":{\"5127\":1}}],[\"必然会导致代码的重复\",{\"1\":{\"3467\":1}}],[\"必然有脏数据产生\",{\"1\":{\"3368\":1}}],[\"必须用getname\",{\"1\":{\"5888\":1}}],[\"必须带有无参的构造器\",{\"1\":{\"5877\":1}}],[\"必须初始化\",{\"1\":{\"5745\":1}}],[\"必须写在子类构造方法的第一行\",{\"1\":{\"5726\":1}}],[\"必须true\",{\"1\":{\"5655\":1}}],[\"必须具有相同的\",{\"1\":{\"5648\":1}}],[\"必须有相同的hashcode\",{\"1\":{\"5636\":1}}],[\"必须在返回值前边加一个<t>\",{\"1\":{\"5027\":1}}],[\"必须在try代码块之外\",{\"1\":{\"3167\":1}}],[\"必须声明方法可抛出的任何可查异常\",{\"1\":{\"4749\":1}}],[\"必须符合里氏代换原则\",{\"1\":{\"3464\":1}}],[\"必须采取相应降级措施\",{\"1\":{\"3456\":1}}],[\"必须定义一个统一的版本变量\",{\"1\":{\"3432\":1}}],[\"必须明确评估和验证\",{\"1\":{\"3429\":1}}],[\"必须记录出错日志到磁盘\",{\"1\":{\"3418\":1}}],[\"必须同时更新记录对应的update\",{\"1\":{\"3400\":1}}],[\"必须指定索引长度\",{\"1\":{\"3370\":1}}],[\"必须使用is\",{\"1\":{\"3351\":1}}],[\"必须使用集合的toarray\",{\"1\":{\"3104\":1}}],[\"必须实现防刷\",{\"1\":{\"3348\":1}}],[\"必须实现正确的防重放的机制\",{\"1\":{\"3345\":1}}],[\"必须对展示数据进行脱敏\",{\"1\":{\"3332\":1}}],[\"必须进行日志级别的开关判断\",{\"1\":{\"3288\":1}}],[\"必须考虑到远程调用失败\",{\"1\":{\"3275\":1}}],[\"必须考虑到所有的子类\",{\"1\":{\"2099\":1}}],[\"必须添加注释充分说明什么情况下会返回null值\",{\"1\":{\"3275\":1}}],[\"必须处理异常\",{\"1\":{\"3268\":1}}],[\"必须控制长度\",{\"1\":{\"3231\":1}}],[\"必须要用javadoc注释\",{\"1\":{\"3209\":1}}],[\"必须要记住使用相应的获取对象的方法\",{\"1\":{\"2338\":1}}],[\"必须先进行null判断\",{\"1\":{\"3185\":1}}],[\"必须先判断当前线程是否持有锁\",{\"1\":{\"3171\":1}}],[\"必须回收自定义的threadlocal变量\",{\"1\":{\"3163\":1}}],[\"必须是public\",{\"1\":{\"4306\":1}}],[\"必须是private\",{\"1\":{\"3076\":3}}],[\"必须是protected\",{\"1\":{\"3076\":1}}],[\"必须是unsigned\",{\"1\":{\"3351\":1}}],[\"必须是完全匹配\",{\"1\":{\"3273\":1}}],[\"必须是接口\",{\"1\":{\"524\":1,\"544\":1}}],[\"必须自己显式地进行赋值\",{\"1\":{\"3058\":1}}],[\"必须加锁\",{\"1\":{\"3160\":1}}],[\"必须加\",{\"1\":{\"3041\":1}}],[\"必须勾选insert\",{\"1\":{\"3024\":1}}],[\"必须设置\",{\"1\":{\"3024\":1}}],[\"必须阅读父类的代码\",{\"1\":{\"2731\":1}}],[\"必须根据设计的应用系统的特点和要求来恰当选择\",{\"1\":{\"2592\":1}}],[\"必须去实现他们不需要的方法\",{\"1\":{\"2037\":1,\"2053\":1}}],[\"必须让其他所有的朋友一起修改\",{\"1\":{\"1568\":1}}],[\"必会经历失败\",{\"1\":{\"146\":1}}],[\"转换\",{\"1\":{\"6514\":1}}],[\"转换为\",{\"0\":{\"5594\":1,\"5596\":1,\"5600\":1}}],[\"转义字符用于非打印字符时\",{\"1\":{\"3968\":1}}],[\"转义字符的情况下\",{\"1\":{\"3955\":1}}],[\"转义字符\",{\"1\":{\"3952\":1,\"3954\":2}}],[\"转载并翻译自\",{\"1\":{\"3929\":1}}],[\"转发\",{\"1\":{\"1586\":1}}],[\"转账用户类型\",{\"1\":{\"652\":1}}],[\"转账\",{\"1\":{\"651\":1}}],[\"转账分类\",{\"1\":{\"651\":1}}],[\"转成类似ms\",{\"1\":{\"6409\":1}}],[\"转成\",{\"1\":{\"520\":1}}],[\"转为实际需要的\",{\"1\":{\"520\":1,\"540\":1}}],[\"转化为十进制的long类型后正好对应4294967297\",{\"1\":{\"476\":1}}],[\"伏\",{\"1\":{\"520\":1,\"540\":1}}],[\"+keyword\",{\"1\":{\"6151\":1,\"6153\":1}}],[\"+m\",{\"1\":{\"6013\":2}}],[\"+method1\",{\"1\":{\"6013\":1}}],[\"+method\",{\"1\":{\"6013\":1}}],[\"+f\",{\"1\":{\"5962\":2}}],[\"+field2\",{\"1\":{\"5962\":1}}],[\"+field\",{\"1\":{\"5962\":1}}],[\"+cs3\",{\"1\":{\"5940\":2}}],[\"+claz\",{\"1\":{\"5940\":1}}],[\"+count\",{\"1\":{\"6013\":1,\"6017\":1}}],[\"+cons\",{\"1\":{\"5914\":1}}],[\"+college\",{\"1\":{\"1539\":1}}],[\"+tp\",{\"1\":{\"5940\":1}}],[\"+uclazz\",{\"1\":{\"5940\":1}}],[\"+user2\",{\"1\":{\"5914\":1}}],[\"+user1\",{\"1\":{\"5914\":1}}],[\"+i+\",{\"1\":{\"5914\":2}}],[\"+4\",{\"0\":{\"4055\":1},\"1\":{\"4056\":1,\"4057\":1}}],[\"+2\",{\"0\":{\"4023\":1},\"1\":{\"4121\":1,\"4122\":1}}],[\"+heapdumponoutofmemoryerror参数\",{\"1\":{\"3445\":1}}],[\"++numnewmembers\",{\"1\":{\"6099\":1}}],[\"++numinvocations\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"++\",{\"0\":{\"5604\":1}}],[\"++x\",{\"1\":{\"3272\":2,\"4932\":2}}],[\"++index\",{\"1\":{\"1525\":1}}],[\"++i\",{\"1\":{\"1366\":1,\"1489\":2}}],[\"+whatfeatureofgroup\",{\"1\":{\"3157\":1}}],[\"+1\",{\"1\":{\"2409\":1}}],[\"+=\",{\"0\":{\"5606\":1},\"1\":{\"1535\":1,\"1537\":2,\"4383\":2,\"5346\":1,\"5347\":1,\"5350\":1,\"5607\":1,\"5608\":1,\"6118\":3,\"6258\":1}}],[\"+\",{\"0\":{\"5606\":1},\"1\":{\"520\":2,\"540\":3,\"626\":1,\"832\":2,\"834\":2,\"852\":2,\"854\":2,\"899\":1,\"907\":1,\"910\":1,\"926\":5,\"928\":13,\"1313\":7,\"1356\":2,\"1366\":2,\"1406\":7,\"1427\":3,\"1431\":1,\"1436\":1,\"1478\":3,\"1487\":2,\"1489\":3,\"1491\":6,\"1525\":2,\"1539\":1,\"1636\":3,\"1653\":3,\"1702\":6,\"1716\":12,\"1761\":6,\"1772\":8,\"1774\":12,\"1797\":12,\"1869\":1,\"1873\":1,\"1905\":1,\"1972\":16,\"2016\":1,\"2020\":3,\"2025\":3,\"2118\":7,\"2124\":8,\"2188\":2,\"2194\":2,\"2286\":2,\"2293\":2,\"2298\":2,\"2304\":2,\"2310\":2,\"2313\":2,\"2320\":2,\"2456\":3,\"2471\":1,\"2546\":1,\"2578\":1,\"2953\":4,\"3009\":1,\"3010\":1,\"3011\":1,\"3029\":1,\"3070\":1,\"3072\":1,\"3123\":1,\"3157\":2,\"3234\":1,\"3967\":1,\"4326\":1,\"4407\":1,\"4647\":3,\"4693\":3,\"4696\":6,\"4914\":1,\"4981\":3,\"5001\":21,\"5003\":7,\"5017\":2,\"5020\":1,\"5044\":1,\"5062\":1,\"5269\":1,\"5271\":1,\"5345\":1,\"5348\":1,\"5349\":1,\"5369\":1,\"5380\":1,\"5448\":3,\"5579\":1,\"5608\":1,\"5761\":2,\"5853\":10,\"5914\":7,\"6013\":2,\"6054\":1,\"6071\":2,\"6090\":3,\"6118\":36,\"6180\":4,\"6201\":36,\"6258\":16,\"6551\":1}}],[\"插入赋值语句\",{\"1\":{\"3200\":1}}],[\"插入的方法用save\",{\"1\":{\"3006\":1}}],[\"插入排序\",{\"1\":{\"2486\":1}}],[\"插排的\",{\"1\":{\"520\":1,\"540\":1}}],[\"插件实现\",{\"1\":{\"6977\":1}}],[\"插件a\",{\"1\":{\"6881\":1}}],[\"插件\",{\"1\":{\"6866\":1}}],[\"插件模式的插件\",{\"1\":{\"6246\":1}}],[\"插件开发者遵循这些规则去开发自己的插件\",{\"1\":{\"6216\":1}}],[\"插件的操作配置信息\",{\"1\":{\"6214\":1}}],[\"插件的文件结构必须在指定目录下包含以下三个文件\",{\"1\":{\"6211\":1}}],[\"插件的所有功能\",{\"1\":{\"49\":1}}],[\"插件体系\",{\"0\":{\"6208\":1}}],[\"插件来实现\",{\"1\":{\"42\":1}}],[\"实践和工具等相关资料\",{\"1\":{\"6744\":1}}],[\"实时和嵌入式系统的开发库\",{\"1\":{\"6435\":1}}],[\"实时和历史olap数据存储\",{\"1\":{\"6394\":1}}],[\"实时计算系统\",{\"1\":{\"6383\":1}}],[\"实参则用自身的值更改形参的值\",{\"1\":{\"5743\":1}}],[\"实参\",{\"0\":{\"5742\":1}}],[\"实心菱形\",{\"1\":{\"2924\":1}}],[\"实打实的关系\",{\"1\":{\"2920\":1}}],[\"实线表示关联关系\",{\"1\":{\"2920\":1}}],[\"实线表示继承\",{\"1\":{\"2915\":1}}],[\"实体名识别和情感分析这样的任务\",{\"1\":{\"6531\":1}}],[\"实体中定义了对\",{\"1\":{\"2882\":1}}],[\"实体的行为来实现变化\",{\"1\":{\"2130\":1}}],[\"实体工厂\",{\"1\":{\"960\":1}}],[\"实际接到的是铅球\",{\"1\":{\"3273\":1}}],[\"实际的存储位置是有差异的\",{\"1\":{\"5317\":1}}],[\"实际的存储值为\",{\"1\":{\"3056\":1}}],[\"实际的文章内容\",{\"1\":{\"29\":1}}],[\"实际类对象属性为integer\",{\"1\":{\"3055\":1}}],[\"实际是空心的虚线\",{\"1\":{\"2903\":1}}],[\"实际是空心的\",{\"1\":{\"2896\":1}}],[\"实际访问的对象\",{\"1\":{\"1842\":1}}],[\"实际上这些变量在编译时会被替换掉\",{\"1\":{\"5664\":1}}],[\"实际上hashcode扮演的角色就是寻址\",{\"1\":{\"5650\":1}}],[\"实际上差距会比这个数字更大一些\",{\"1\":{\"4984\":1}}],[\"实际上是这样的吗\",{\"1\":{\"5154\":1}}],[\"实际上是保障公众的人身安全\",{\"1\":{\"2983\":1}}],[\"实际上是在设定规范和契约\",{\"1\":{\"2098\":1}}],[\"实际上就是在原代码逻辑前后增加一些代码逻辑\",{\"1\":{\"1832\":1}}],[\"实际上并不会\",{\"1\":{\"1341\":1}}],[\"实际上\",{\"1\":{\"1159\":1,\"1327\":1,\"1364\":1,\"2170\":1,\"2172\":1,\"2255\":1,\"2361\":1,\"2363\":1,\"2375\":1,\"2380\":2,\"2383\":1,\"2394\":1,\"2396\":1,\"2410\":1,\"2412\":2,\"2694\":1,\"2696\":1,\"2702\":1,\"2734\":1,\"2753\":1,\"2774\":1,\"2778\":1,\"4473\":1,\"5140\":1,\"5154\":1,\"5155\":1}}],[\"实际上我们的要求是\",{\"1\":{\"843\":1}}],[\"实际开发中\",{\"1\":{\"579\":1}}],[\"实例这里开始\",{\"1\":{\"6863\":1}}],[\"实例变量\",{\"1\":{\"5485\":1,\"5486\":1,\"5504\":1,\"5510\":1,\"5512\":1}}],[\"实例使用自动装箱来创建并且值相同\",{\"1\":{\"5272\":1}}],[\"实例初始化代码块\",{\"1\":{\"4062\":1}}],[\"实例化服务提供者\",{\"1\":{\"6258\":1}}],[\"实例化各个实现类\",{\"1\":{\"6184\":1,\"6189\":1}}],[\"实例化默认构造方法\",{\"1\":{\"5914\":1}}],[\"实例化\",{\"1\":{\"5853\":1,\"5855\":1}}],[\"实例化对象\",{\"1\":{\"2316\":1}}],[\"实例化代码只用执行一次\",{\"1\":{\"2316\":1}}],[\"实例\",{\"1\":{\"540\":1,\"1436\":3}}],[\"实现和其他根本框架不同\",{\"1\":{\"6942\":1}}],[\"实现和接口在一个包中\",{\"1\":{\"6250\":1}}],[\"实现把网络访问\",{\"1\":{\"6901\":1}}],[\"实现并解释了最常见的设计模式\",{\"1\":{\"6510\":1}}],[\"实现jms的开源消息代理\",{\"1\":{\"6497\":1}}],[\"实现方\",{\"1\":{\"6247\":1}}],[\"实现方法拦截\",{\"1\":{\"1878\":1}}],[\"实现位于独立的包中\",{\"1\":{\"6245\":1}}],[\"实现多态\",{\"1\":{\"5166\":1}}],[\"实现继承中的多态\",{\"1\":{\"5165\":1}}],[\"实现日志的切面\",{\"1\":{\"4691\":1}}],[\"实现ut\",{\"1\":{\"4680\":1,\"4683\":1}}],[\"实现注释\",{\"1\":{\"3937\":1,\"4148\":1}}],[\"实现或者mock实现\",{\"1\":{\"3305\":1}}],[\"实现什么功能\",{\"1\":{\"3209\":1}}],[\"实现延迟初始化需要将目标属性声明为volatile型\",{\"1\":{\"3178\":1}}],[\"实现关系实际上就是\",{\"1\":{\"2901\":1}}],[\"实现关系使用\",{\"1\":{\"2900\":1}}],[\"实现关系\",{\"0\":{\"2898\":1,\"5783\":1}}],[\"实现基于接口的编程\",{\"1\":{\"2716\":1}}],[\"实现降序排序\",{\"1\":{\"2546\":1}}],[\"实现算法族\",{\"1\":{\"2530\":1}}],[\"实现对总接口的定义\",{\"1\":{\"2047\":1}}],[\"实现对公网的访问\",{\"1\":{\"1910\":1}}],[\"实现任何的接口\",{\"1\":{\"1876\":1}}],[\"实现代理只需要使用\",{\"1\":{\"1855\":1}}],[\"实现深拷贝\",{\"1\":{\"1788\":1}}],[\"实现一个克隆自己的操作\",{\"1\":{\"1752\":1}}],[\"实现原型接口的原型类\",{\"1\":{\"1752\":1}}],[\"实现起来会比较麻烦\",{\"1\":{\"1748\":1}}],[\"实现起来不拘泥于我们讲解的三种经典形式\",{\"1\":{\"579\":1}}],[\"实现观察者模式时要注意具体目标对象和具体观察者对象之间不能直接调用\",{\"1\":{\"1677\":1}}],[\"实现其他业务功能\",{\"1\":{\"1630\":1}}],[\"实现所有相互影响的同事类的公共功能\",{\"1\":{\"1581\":1}}],[\"实现中介者接口\",{\"1\":{\"1580\":1}}],[\"实现类要单一\",{\"1\":{\"2241\":1}}],[\"实现类似广播机制的功能\",{\"1\":{\"1734\":1}}],[\"实现类\",{\"1\":{\"1359\":1}}],[\"实现系统的部分功能\",{\"1\":{\"1110\":1}}],[\"实现特定语法解析\",{\"1\":{\"1072\":1}}],[\"实现抽象元素角色提供的\",{\"1\":{\"2948\":1}}],[\"实现抽象访问者角色中声明的各个访问操作\",{\"1\":{\"2946\":1}}],[\"实现抽象类中所定义的抽象方法和钩子方法\",{\"1\":{\"2659\":1}}],[\"实现抽象状态所对应的行为\",{\"1\":{\"2434\":1}}],[\"实现抽象处理者的处理方法\",{\"1\":{\"1945\":1}}],[\"实现抽象观察者中定义的抽象方法\",{\"1\":{\"1682\":1}}],[\"实现抽象迭代器接口中所定义的方法\",{\"1\":{\"1521\":1}}],[\"实现抽象聚合类\",{\"1\":{\"1519\":1}}],[\"实现抽象享元角色中所规定的接口\",{\"1\":{\"1394\":1}}],[\"实现抽象装饰的相关方法\",{\"1\":{\"890\":1}}],[\"实现抽象构件\",{\"1\":{\"888\":1}}],[\"实现者\",{\"1\":{\"761\":1}}],[\"实现命令的撤销与恢复\",{\"1\":{\"751\":1}}],[\"实现解耦\",{\"1\":{\"742\":1,\"1979\":1}}],[\"实现了多种基础和高级编程抽象\",{\"1\":{\"6415\":1}}],[\"实现了数据同步\",{\"1\":{\"6342\":1}}],[\"实现了简单功能的一个假对象\",{\"1\":{\"4469\":1}}],[\"实现了最大化代码复用\",{\"1\":{\"2682\":1}}],[\"实现了二者的分离\",{\"1\":{\"2499\":1}}],[\"实现了内部状态的封装\",{\"1\":{\"1623\":1}}],[\"实现了抽象策略定义的接口\",{\"1\":{\"2507\":1}}],[\"实现了抽象主题中的具体业务\",{\"1\":{\"1829\":1}}],[\"实现了抽象产品角色所定义的接口\",{\"1\":{\"1232\":1,\"1292\":1}}],[\"实现了抽象和实现部分的分离\",{\"1\":{\"633\":1}}],[\"实现了命令接口\",{\"1\":{\"788\":1}}],[\"实现了\",{\"1\":{\"719\":1,\"745\":1,\"1550\":1,\"2052\":10,\"2058\":6,\"2546\":1,\"2738\":3,\"6552\":1,\"6923\":1}}],[\"实现接口\",{\"1\":{\"677\":1,\"1835\":1}}],[\"实现化角色\",{\"1\":{\"605\":1}}],[\"实现化\",{\"1\":{\"601\":1}}],[\"实现父类中的业务方法\",{\"1\":{\"600\":1}}],[\"实现\",{\"1\":{\"513\":1,\"529\":1,\"577\":1,\"683\":1,\"2809\":1,\"2834\":1,\"2899\":1,\"2913\":1,\"5435\":1,\"6837\":1,\"6940\":1}}],[\"如不好的做法\",{\"1\":{\"6991\":1}}],[\"如不同颜色和字体的文字\",{\"1\":{\"587\":1}}],[\"如上\",{\"1\":{\"6077\":1}}],[\"如上的输出结果\",{\"1\":{\"6016\":1}}],[\"如上所示\",{\"1\":{\"4921\":1}}],[\"如setint\",{\"1\":{\"5993\":1}}],[\"如stats\",{\"1\":{\"3286\":1}}],[\"如系统崩溃\",{\"1\":{\"5719\":1}}],[\"如组合\",{\"1\":{\"5673\":1}}],[\"如允许在同一个\",{\"1\":{\"5670\":1}}],[\"如读取变量值\",{\"1\":{\"5605\":1}}],[\"如list<\",{\"1\":{\"5236\":1}}],[\"如map<string\",{\"1\":{\"5234\":1,\"5236\":1}}],[\"如pair<string>或pair<integer>\",{\"1\":{\"5102\":1}}],[\"如同泛型加入java语言之前的已经实现的样子\",{\"1\":{\"5102\":1}}],[\"如ioexception\",{\"1\":{\"4725\":1}}],[\"如nullpointerexception\",{\"1\":{\"4722\":1}}],[\"如循环变量\",{\"1\":{\"4589\":1}}],[\"如c语言中单元指一个函数\",{\"1\":{\"4433\":1}}],[\"如加载配置\",{\"1\":{\"4329\":1}}],[\"如有自定义标签实现的控件设置控件类型可使用role属性\",{\"1\":{\"3477\":1}}],[\"如在原有表中新增字段\",{\"1\":{\"3450\":1}}],[\"如淘宝开放平台\",{\"1\":{\"3416\":1}}],[\"如缓存方案\",{\"1\":{\"3414\":1}}],[\"如desc\",{\"1\":{\"3354\":1}}],[\"如注册时发送验证码到手机\",{\"1\":{\"3345\":1}}],[\"如数据库工具\",{\"1\":{\"6975\":1}}],[\"如数据库连接\",{\"1\":{\"4738\":1}}],[\"如数据排序策略有冒泡排序\",{\"1\":{\"2486\":1}}],[\"如数量限制\",{\"1\":{\"3345\":1}}],[\"如非必要\",{\"1\":{\"3295\":1}}],[\"如打点\",{\"1\":{\"3286\":1}}],[\"如阿拉伯语\",{\"1\":{\"3262\":1}}],[\"如定义对象\",{\"1\":{\"3202\":1}}],[\"如getxxx\",{\"1\":{\"3196\":1}}],[\"如使用tab缩进\",{\"1\":{\"3024\":1}}],[\"如盘子\",{\"1\":{\"2922\":1}}],[\"如老师和学生\",{\"1\":{\"2864\":1}}],[\"如机械系统\",{\"1\":{\"2817\":1}}],[\"如右图\",{\"1\":{\"2809\":1}}],[\"如人都有高兴和伤心的时候\",{\"1\":{\"2415\":1}}],[\"如多线程的线程池\",{\"1\":{\"2345\":1}}],[\"如一个班中的班长\",{\"1\":{\"2343\":1}}],[\"如代码中所示\",{\"1\":{\"2315\":1}}],[\"如类\",{\"1\":{\"2002\":1,\"5673\":1}}],[\"如可能会造成循环调用\",{\"1\":{\"1941\":1}}],[\"如总线网中数据报传送\",{\"1\":{\"1928\":1}}],[\"如某单位的内部数据库等\",{\"1\":{\"1810\":1}}],[\"如视频或大图像等\",{\"1\":{\"1810\":1}}],[\"如新浪网站\",{\"1\":{\"1707\":1}}],[\"如玩游戏时的中间结果的存档功能\",{\"1\":{\"1663\":1}}],[\"如前面所说的\",{\"1\":{\"1569\":1}}],[\"如\",{\"0\":{\"5600\":1},\"1\":{\"1272\":1,\"1499\":1,\"1620\":1,\"1664\":1,\"2284\":1,\"2348\":1,\"2495\":1,\"2554\":1,\"2866\":1,\"3006\":1,\"3056\":1,\"3058\":1,\"3074\":3,\"3102\":1,\"3152\":1,\"3277\":1,\"3286\":1,\"3314\":1,\"3372\":1,\"3376\":1,\"3409\":1,\"4001\":1,\"4296\":1,\"4708\":1,\"5040\":1,\"5236\":1,\"5607\":1,\"5625\":1,\"5644\":1,\"5648\":1,\"5666\":1,\"5670\":1,\"5675\":1,\"6863\":1,\"6987\":1}}],[\"如办房产证或注册一家公司\",{\"1\":{\"1093\":1}}],[\"如房子装修\",{\"1\":{\"875\":1}}],[\"如何保证set不重复呢\",{\"1\":{\"5650\":1}}],[\"如何保证我们只能使用泛型变量限定的类型呢\",{\"1\":{\"5117\":1}}],[\"如何在java中写出immutable的类\",{\"1\":{\"5626\":1}}],[\"如何获取泛型的参数类型\",{\"0\":{\"5231\":1}}],[\"如何获取注解中的内容呢\",{\"1\":{\"4623\":1}}],[\"如何确定这个泛型参数是何种类型\",{\"1\":{\"5211\":1}}],[\"如何正确的初始化泛型数组实例\",{\"0\":{\"5202\":1}}],[\"如何正确的使用继承\",{\"1\":{\"2100\":1}}],[\"如何证明类型的擦除呢\",{\"0\":{\"5087\":1}}],[\"如何高效地协同呢\",{\"1\":{\"2983\":1}}],[\"如何给代码解耦\",{\"0\":{\"2760\":1}}],[\"如何判断系统是否需要解耦重构呢\",{\"1\":{\"2757\":1}}],[\"如何判断该用组合还是继承\",{\"0\":{\"2741\":1},\"1\":{\"2721\":1}}],[\"如何将这条原则应用到实战中\",{\"0\":{\"2697\":1}}],[\"如何将方法的请求者与实现者解耦\",{\"1\":{\"740\":1}}],[\"如何解读原则中的\",{\"0\":{\"2692\":1}}],[\"如何理解异常中使用泛型\",{\"0\":{\"5215\":1}}],[\"如何理解泛型类中的静态方法和静态变量\",{\"0\":{\"5207\":1}}],[\"如何理解泛型类型不能实例化\",{\"0\":{\"5185\":1}}],[\"如何理解泛型的多态\",{\"0\":{\"5146\":1}}],[\"如何理解泛型的编译期检查\",{\"0\":{\"5116\":1}}],[\"如何理解基本类型不能作为泛型类型\",{\"0\":{\"5181\":1}}],[\"如何理解类型擦除后保留的原始类型\",{\"0\":{\"5095\":1}}],[\"如何理解java中的泛型是伪泛型\",{\"0\":{\"5069\":1}}],[\"如何理解呢\",{\"1\":{\"2410\":1}}],[\"如何理解单例模式中的唯一性\",{\"0\":{\"2385\":1}}],[\"如何实现一个多例模式\",{\"0\":{\"2407\":1}}],[\"如何实现一个简单的\",{\"0\":{\"1346\":1}}],[\"如何实现集群环境下的单例\",{\"0\":{\"2398\":1}}],[\"如何实现线程唯一的单例\",{\"0\":{\"2391\":1}}],[\"如何设计实现一个dependency\",{\"0\":{\"1323\":1}}],[\"如何设计类似于\",{\"1\":{\"586\":1}}],[\"如何处理建造房子的流程\",{\"1\":{\"711\":1}}],[\"如游戏中的不同角色\",{\"1\":{\"662\":1}}],[\"如下fund方法会报错\",{\"1\":{\"5035\":1}}],[\"如下两个方法不会报错\",{\"1\":{\"5035\":1}}],[\"如下是一个反例\",{\"1\":{\"4931\":1}}],[\"如下是一个首先未对齐\",{\"1\":{\"4094\":1}}],[\"如下是大学和教师的代码和关系图\",{\"1\":{\"2874\":1}}],[\"如下的代码输出是什么\",{\"1\":{\"3185\":1}}],[\"如下表格\",{\"1\":{\"3125\":1,\"4876\":1}}],[\"如下所示是\",{\"1\":{\"2832\":1}}],[\"如下所示是图形类接口的\",{\"1\":{\"2826\":1}}],[\"如下所示\",{\"1\":{\"2396\":1,\"4742\":1,\"4753\":1}}],[\"如下图\",{\"1\":{\"790\":1,\"2594\":1,\"2885\":1,\"2903\":1}}],[\"如下\",{\"1\":{\"537\":1,\"2141\":1,\"4917\":1,\"4919\":1,\"5204\":1}}],[\"如图形既可按形状分\",{\"1\":{\"586\":1}}],[\"如图\",{\"1\":{\"506\":1,\"607\":1,\"836\":1,\"910\":1,\"1480\":1}}],[\"如果企业内部部署im使用openfire+spark是最佳的组合\",{\"1\":{\"6506\":1}}],[\"如果日志实现提供者只要实现该接口\",{\"1\":{\"6207\":1}}],[\"如果日志中的错误信息用英文描述不清楚的话使用中文描述即可\",{\"1\":{\"3296\":1}}],[\"如果和自己想要更新的状态一致\",{\"1\":{\"6076\":1}}],[\"如果更新成功\",{\"1\":{\"6076\":1}}],[\"如果更新学生表中的student\",{\"1\":{\"3385\":1}}],[\"如果已经加载了的话\",{\"1\":{\"6063\":1}}],[\"如果将此方法声明为带有可变数量的参数\",{\"1\":{\"6044\":1}}],[\"如果此字段表示枚举类型的元素则返回\",{\"1\":{\"5980\":1}}],[\"如果此处存在return语句\",{\"1\":{\"3271\":1,\"4930\":1}}],[\"如果此处抛出异常\",{\"1\":{\"3170\":1}}],[\"如果虚拟机给每个局部变量都初始化一下\",{\"1\":{\"5745\":1}}],[\"如果两个整型相加\",{\"1\":{\"5607\":1}}],[\"如果强制转化是\",{\"1\":{\"5599\":1}}],[\"如果该值大于\",{\"0\":{\"5598\":1}}],[\"如果该类型注解不存在\",{\"1\":{\"4628\":1}}],[\"如果子类重写了父类的中某个方法的实现\",{\"1\":{\"5401\":1}}],[\"如果子类的方法重写了父类的方法\",{\"1\":{\"5365\":1}}],[\"如果值过于复杂\",{\"1\":{\"5354\":1}}],[\"如果这是一个普通的继承关系\",{\"1\":{\"5174\":1}}],[\"如果这个全局变量是一个可变全局变量\",{\"1\":{\"2366\":1}}],[\"如果真的不能的话\",{\"1\":{\"5166\":1}}],[\"如果真的发生这种情况\",{\"1\":{\"3969\":1}}],[\"如果直接调用add\",{\"1\":{\"5094\":1}}],[\"如果直接调用引用类型的\",{\"1\":{\"1799\":1}}],[\"如果既是生产又是消费\",{\"1\":{\"5046\":1}}],[\"如果参数化类型表示一个\",{\"1\":{\"5046\":1}}],[\"如果传入的实例类型b是在这个范围内的话允许转换\",{\"1\":{\"5037\":1}}],[\"如果catch有未处理的异常\",{\"1\":{\"4978\":1}}],[\"如果异常没有被catch捕获\",{\"1\":{\"4969\":1}}],[\"如果14到19之间\",{\"1\":{\"4967\":1}}],[\"如果0到3之间\",{\"1\":{\"4965\":1,\"4966\":1}}],[\"如果所有的栈帧被弹出\",{\"1\":{\"4956\":1}}],[\"如果上一条未找到合理的处理者\",{\"1\":{\"4954\":1}}],[\"如果首先捕获\",{\"1\":{\"4900\":1}}],[\"如果finally中使用了return或者throw等终止方法的语句\",{\"1\":{\"4738\":1}}],[\"如果它表示一个\",{\"1\":{\"5046\":1}}],[\"如果它们相等\",{\"1\":{\"4366\":1}}],[\"如果它覆盖了一整个类\",{\"1\":{\"4171\":1}}],[\"如果比较的两个对象是相等的\",{\"1\":{\"4362\":1}}],[\"如果运行失败\",{\"1\":{\"4285\":1}}],[\"如果运行良好则是绿色\",{\"1\":{\"4285\":1}}],[\"如果捕获的异常名称是\",{\"1\":{\"4232\":1}}],[\"如果任何单词在普遍用法中已经具有常规的驼峰形式\",{\"1\":{\"4199\":1}}],[\"如果实例的任何外在状态是可变的\",{\"1\":{\"4178\":1}}],[\"如果注解是用于类型的注解\",{\"1\":{\"4146\":1}}],[\"如果遗漏了任何情况\",{\"1\":{\"4129\":1}}],[\"如果同时存在静态导入和非静态导入\",{\"1\":{\"3990\":1}}],[\"如果同台服务器再打日志\",{\"1\":{\"3418\":1}}],[\"如果文件中包含许可证和版权信息\",{\"1\":{\"3978\":1}}],[\"如果内存位置的值与预期原值相匹配\",{\"1\":{\"3541\":1}}],[\"如果下游服务耗时过长\",{\"1\":{\"3456\":1}}],[\"如果搭平房\",{\"1\":{\"3454\":1}}],[\"如果系统中超过\",{\"1\":{\"3455\":1}}],[\"如果系统中模型类超过\",{\"1\":{\"3454\":1}}],[\"如果系统中某个功能的调用链路上的涉及对象超过\",{\"1\":{\"3453\":1}}],[\"如果与系统交互的user超过一类并且相关的usercase超过\",{\"1\":{\"3451\":1}}],[\"如果依赖其它二方库\",{\"1\":{\"3439\":1}}],[\"如果依赖关系复杂\",{\"1\":{\"2759\":1}}],[\"如果仲裁结果完全不一致\",{\"1\":{\"3429\":1}}],[\"如果意识到这个异常将导致页面无法正常渲染\",{\"1\":{\"3418\":1}}],[\"如果其中一列全为null\",{\"1\":{\"3381\":1}}],[\"如果where\",{\"1\":{\"3376\":1}}],[\"如果可以进行泛型数组的声明则上面说的这种情况在编译期不会出现任何警告和错误\",{\"1\":{\"5194\":1}}],[\"如果可以\",{\"1\":{\"5189\":1}}],[\"如果可以是const最好\",{\"1\":{\"3375\":1}}],[\"如果可以处理请求则处理\",{\"1\":{\"1945\":1}}],[\"如果左边的值未确定\",{\"1\":{\"3371\":1}}],[\"如果预计三年后的数据量根本达不到这个级别\",{\"1\":{\"3365\":1}}],[\"如果预期对方抛的是绣球\",{\"1\":{\"3273\":1}}],[\"如果修改字段含义或对字段表示的状态追加时\",{\"1\":{\"3363\":1}}],[\"如果存储长度大于此值\",{\"1\":{\"3358\":1}}],[\"如果存储的字符串长度几乎相等\",{\"1\":{\"3357\":1}}],[\"如果存储的数据范围超过decimal的范围\",{\"1\":{\"3356\":1}}],[\"如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型\",{\"1\":{\"5073\":1}}],[\"如果存在就获取\",{\"1\":{\"4693\":1}}],[\"如果存在名称之外的延伸属性应使用enum类型\",{\"1\":{\"3017\":1}}],[\"如果存在则提供给客户\",{\"1\":{\"1396\":1}}],[\"如果大量输出送往这两个文件\",{\"1\":{\"3291\":1}}],[\"如果大括号内为空\",{\"1\":{\"3020\":1}}],[\"如果判断为真\",{\"1\":{\"3289\":1}}],[\"如果debug\",{\"1\":{\"3288\":1}}],[\"如果加了栈信息\",{\"1\":{\"3278\":1}}],[\"如果找不到方法\",{\"1\":{\"3274\":1}}],[\"如果jdk7\",{\"1\":{\"3270\":1}}],[\"如果想换一种类型\",{\"1\":{\"5032\":1}}],[\"如果想要提供更加有用的信息\",{\"1\":{\"4921\":1}}],[\"如果想要获取被抑制的异常列表\",{\"1\":{\"4799\":1}}],[\"如果想获取整数类型的随机数\",{\"1\":{\"3243\":1}}],[\"如果想成为合格软件工程师\",{\"1\":{\"2579\":1}}],[\"如果var等于null或者不存在\",{\"1\":{\"3242\":1}}],[\"如果缓存没有\",{\"1\":{\"6079\":1}}],[\"如果缓存\",{\"1\":{\"3234\":1}}],[\"如果为空\",{\"1\":{\"3225\":1}}],[\"如果为null\",{\"1\":{\"3107\":1,\"3276\":1}}],[\"如果无用\",{\"1\":{\"3217\":1}}],[\"如果导航软件严重滞后\",{\"1\":{\"3215\":1}}],[\"如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题\",{\"1\":{\"3206\":1}}],[\"如果能把它们相同的部分提取出来共享\",{\"1\":{\"1373\":1}}],[\"如果赋值一个非常好理解的布尔变量名字\",{\"1\":{\"3196\":1}}],[\"如果非使用if\",{\"1\":{\"3194\":1}}],[\"如果并发控制没有处理好\",{\"1\":{\"3190\":1}}],[\"如果并发操作\",{\"1\":{\"3114\":1}}],[\"如果每次访问冲突概率小于20\",{\"1\":{\"3173\":1}}],[\"如果当前thread为最后一个非守护线程\",{\"1\":{\"4957\":1}}],[\"如果当前方法的异常表无法处理\",{\"1\":{\"4955\":1}}],[\"如果当前方法异常表不为空\",{\"1\":{\"4953\":1}}],[\"如果当前线程不持有锁\",{\"1\":{\"3171\":1}}],[\"如果当前的状态是抽奖成功\",{\"1\":{\"2452\":1}}],[\"如果lock方法在try代码块之内\",{\"1\":{\"3167\":1}}],[\"如果暂时无法确定初始值大小\",{\"1\":{\"3123\":1}}],[\"如果暂时无法确定集合大小\",{\"1\":{\"3123\":1}}],[\"如果查询无结果\",{\"1\":{\"3102\":1}}],[\"如果自定义对象作为map的键\",{\"1\":{\"3089\":1}}],[\"如果继承了另一个pojo类\",{\"1\":{\"3062\":1}}],[\"如果完全不兼容升级\",{\"1\":{\"3060\":1}}],[\"如果需要变化时\",{\"1\":{\"5634\":1}}],[\"如果需要的话\",{\"1\":{\"3972\":1}}],[\"如果需要存储表情\",{\"1\":{\"3391\":1}}],[\"如果需要请走搜索引擎来解决\",{\"1\":{\"3371\":1}}],[\"如果需要回滚\",{\"1\":{\"3269\":1}}],[\"如果需要对齐\",{\"1\":{\"3037\":1}}],[\"如果需要直接调用\",{\"1\":{\"571\":1}}],[\"如果变量值仅在一个固定范围内变化用enum类型来定义\",{\"1\":{\"3017\":1}}],[\"如果一本书需要知道第\",{\"1\":{\"3373\":1}}],[\"如果一定要定义\",{\"1\":{\"3003\":1}}],[\"如果一个类没有实现\",{\"1\":{\"5459\":1}}],[\"如果一个类被其他的类所继承\",{\"1\":{\"2099\":1}}],[\"如果一个接口想要添加新的方法\",{\"1\":{\"5379\":1}}],[\"如果一个\",{\"1\":{\"5292\":1}}],[\"如果一个异常满足你的需要\",{\"1\":{\"4891\":1}}],[\"如果一个测试用例比起指定的毫秒数花费了更多的时间\",{\"1\":{\"4376\":1}}],[\"如果一个系统有比较稳定的数据结构\",{\"1\":{\"2972\":1}}],[\"如果一个对象承担了太多的职责\",{\"1\":{\"2004\":1}}],[\"如果一个对象不能处理该请求\",{\"1\":{\"1930\":1}}],[\"如果模块\",{\"1\":{\"3001\":1}}],[\"如果有一个值你不确定是否存在\",{\"1\":{\"6826\":1}}],[\"如果有更详细的中文介绍\",{\"1\":{\"6278\":1}}],[\"如果有的话\",{\"1\":{\"4249\":1}}],[\"如果有改变\",{\"1\":{\"3429\":1}}],[\"如果有order\",{\"1\":{\"3372\":1}}],[\"如果有初始化逻辑\",{\"1\":{\"3061\":1}}],[\"如果有人要求你对程序进行修改\",{\"1\":{\"2804\":1}}],[\"如果有多个实例\",{\"1\":{\"2347\":1}}],[\"如果新增代码影响了原有单元测试\",{\"1\":{\"3307\":1}}],[\"如果新增一个新的类如希腊披萨\",{\"1\":{\"1251\":1}}],[\"如果新建一个类图\",{\"1\":{\"2840\":1}}],[\"如果新开发的代码也用到这个接口\",{\"1\":{\"2765\":1}}],[\"如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段\",{\"1\":{\"2752\":1}}],[\"如果类中包含mutable类对象\",{\"1\":{\"5632\":1}}],[\"如果类型变量有限定\",{\"1\":{\"5104\":1}}],[\"如果类型参数是无限制通配符或没有上下界限定则替换为object\",{\"1\":{\"5073\":1}}],[\"如果类之间的继承结构稳定\",{\"1\":{\"2743\":1}}],[\"如果类的成员变量过多\",{\"1\":{\"1659\":1}}],[\"如果某个类使用了被\",{\"1\":{\"4609\":1,\"4665\":1}}],[\"如果某个业务对象的状态超过\",{\"1\":{\"3452\":1}}],[\"如果某个系统特别稳定\",{\"1\":{\"2719\":1}}],[\"如果某个对象的创建并不是写死在代码中\",{\"1\":{\"1364\":1}}],[\"如果按照这种思考方式\",{\"1\":{\"2712\":1}}],[\"如果开发这个功能的同事没有接口意识\",{\"1\":{\"2704\":1}}],[\"如果落实到具体的编码\",{\"1\":{\"2694\":1}}],[\"如果父类添加新的抽象方法\",{\"1\":{\"2648\":1}}],[\"如果引入设计模式使得设计变得复杂\",{\"1\":{\"2591\":1}}],[\"如果项目开发完后\",{\"1\":{\"2576\":1}}],[\"如果客户\",{\"1\":{\"2575\":1}}],[\"如果采用策略模式就能很好解决该问题\",{\"1\":{\"2487\":1}}],[\"如果把每个状态的行为都放到一个类中\",{\"1\":{\"2476\":1}}],[\"如果把这种\",{\"1\":{\"1569\":1}}],[\"如果严格按照不同的进程间共享同一个对象来实现\",{\"1\":{\"2402\":1}}],[\"如果代码可能会引发某种错误\",{\"1\":{\"4753\":1}}],[\"如果代码比较复杂\",{\"1\":{\"2358\":1}}],[\"如果代码块本身并不复杂\",{\"1\":{\"1253\":1}}],[\"如果未来某一天\",{\"1\":{\"2354\":1,\"2360\":1}}],[\"如果在com\",{\"1\":{\"6159\":1}}],[\"如果在子类中定义的方法和基类中的一个\",{\"1\":{\"5479\":1}}],[\"如果在某个时刻\",{\"1\":{\"5366\":1}}],[\"如果在缓冲池之外\",{\"1\":{\"5281\":1}}],[\"如果在的话就直接返回缓存池的内容\",{\"1\":{\"5268\":1}}],[\"如果在null前换行\",{\"1\":{\"3383\":1}}],[\"如果在抽象类中对方法签名进行修改\",{\"1\":{\"3041\":1}}],[\"如果在\",{\"1\":{\"2828\":1,\"4906\":1}}],[\"如果在我们的业务场景中\",{\"1\":{\"2718\":1}}],[\"如果在多线程下\",{\"1\":{\"2301\":1}}],[\"如果在内存中有\",{\"1\":{\"1440\":1}}],[\"如果从始至终从未使用过这个实例\",{\"1\":{\"2289\":1}}],[\"如果从桥接模式来看\",{\"1\":{\"628\":1}}],[\"如果功能设计不合理\",{\"1\":{\"2269\":1}}],[\"如果单测对外部环境\",{\"1\":{\"3305\":1}}],[\"如果单例类持有成员变量\",{\"1\":{\"2366\":1}}],[\"如果单例类依赖比较重的外部资源\",{\"1\":{\"2365\":1}}],[\"如果单例中的代码没有执行完\",{\"1\":{\"2268\":1}}],[\"如果单一职责原则遵守得好\",{\"1\":{\"2012\":1}}],[\"如果对操作列没有限定表的别名\",{\"1\":{\"3388\":1}}],[\"如果对每个类型为\",{\"1\":{\"2104\":1}}],[\"如果对象里某些get方法被覆写\",{\"1\":{\"3293\":1}}],[\"如果对象的\",{\"1\":{\"1363\":2,\"1368\":1}}],[\"如果对象不可复用\",{\"1\":{\"1255\":1}}],[\"如果定义为static\",{\"1\":{\"3160\":1}}],[\"如果定义太大\",{\"1\":{\"2046\":1}}],[\"如果定义过小\",{\"1\":{\"2046\":1}}],[\"如果接口的粒度大小定义合理\",{\"1\":{\"2046\":1}}],[\"如果接口\",{\"1\":{\"2037\":1,\"2053\":1}}],[\"如果遵循单一职责原则将有以下优点\",{\"1\":{\"2008\":1}}],[\"如果各个级别的人员审批金额发生变化\",{\"1\":{\"1963\":1}}],[\"如果金额超过\",{\"1\":{\"1959\":1}}],[\"如果金额小于等于\",{\"1\":{\"1956\":1,\"1957\":1,\"1958\":1}}],[\"如果取不到资源\",{\"1\":{\"1912\":1}}],[\"如果取到资源则\",{\"1\":{\"1912\":1}}],[\"如果原始对象发生变化\",{\"1\":{\"1804\":1}}],[\"如果创建的对象比较复杂时\",{\"1\":{\"1766\":1}}],[\"如果创建简单对象\",{\"1\":{\"731\":1}}],[\"如果只保存一次状态\",{\"1\":{\"1651\":1}}],[\"如果要指定过滤\",{\"1\":{\"6099\":1}}],[\"如果要改为私有云的上传下载流程\",{\"1\":{\"2705\":1}}],[\"如果要完全解决这些问题\",{\"1\":{\"2383\":1}}],[\"如果要扩展\",{\"1\":{\"2267\":1}}],[\"如果要使用继承关系\",{\"1\":{\"2200\":1}}],[\"如果要保存的内部状态信息过多或者特别频繁\",{\"1\":{\"1626\":1}}],[\"如果要创建的类对象非常多\",{\"1\":{\"1341\":1}}],[\"如果设计不当\",{\"1\":{\"1610\":1}}],[\"如果是偶数的话\",{\"1\":{\"5446\":1}}],[\"如果是直接返回\",{\"1\":{\"5436\":1}}],[\"如果是包级私有的类或者私有的嵌套类\",{\"1\":{\"5370\":1}}],[\"如果是采用\",{\"1\":{\"5312\":1}}],[\"如果是我们自己编写java代码\",{\"1\":{\"5180\":1}}],[\"如果是重载\",{\"1\":{\"5161\":1}}],[\"如果是与以前的代码兼容\",{\"1\":{\"5127\":1}}],[\"如果是不可查异常\",{\"1\":{\"4748\":1}}],[\"如果是单独部署\",{\"1\":{\"3418\":1}}],[\"如果是boolean基本数据类型变量\",{\"1\":{\"3241\":1}}],[\"如果是count++操作\",{\"1\":{\"3180\":1}}],[\"如果是jdk8的应用\",{\"1\":{\"3162\":1}}],[\"如果是jdk8\",{\"1\":{\"3124\":1,\"3180\":1}}],[\"如果是非空代码块\",{\"1\":{\"3020\":1}}],[\"如果是形容能力的接口名称\",{\"1\":{\"3004\":1}}],[\"如果是方法的返回类型\",{\"1\":{\"2860\":1}}],[\"如果是类的成员属性\",{\"1\":{\"2859\":1}}],[\"如果是接口\",{\"1\":{\"2844\":1}}],[\"如果是以窗帘发出的消息\",{\"1\":{\"1601\":1}}],[\"如果是一个private的方法\",{\"1\":{\"3076\":1}}],[\"如果是一个\",{\"1\":{\"1489\":1}}],[\"如果碰到对表达式的解释\",{\"1\":{\"1500\":1}}],[\"如果使用了被\",{\"1\":{\"4510\":1}}],[\"如果使用warn来记录刚上线时的业务行为信息\",{\"1\":{\"3294\":1}}],[\"如果使用数字\",{\"1\":{\"3087\":1}}],[\"如果使用多重条件转移语句实现\",{\"1\":{\"2487\":1}}],[\"如果使用不当会导致程序结构和代码的混乱\",{\"1\":{\"2427\":1}}],[\"如果使用\",{\"1\":{\"1436\":1,\"4029\":1}}],[\"如果使用组合关系来创建一个包装对象\",{\"1\":{\"885\":1}}],[\"如果不想用某些实现类\",{\"1\":{\"6266\":1}}],[\"如果不想处理它\",{\"1\":{\"3268\":1}}],[\"如果不通过直接抛出异常\",{\"1\":{\"6067\":1}}],[\"如果不是特别关心内存和性能的话\",{\"1\":{\"5593\":1}}],[\"如果不是\",{\"1\":{\"5437\":1}}],[\"如果不加访问修饰符\",{\"1\":{\"5359\":1}}],[\"如果不加栈信息\",{\"1\":{\"3278\":1}}],[\"如果不指定泛型\",{\"1\":{\"5113\":1}}],[\"如果不对其捕获\",{\"1\":{\"4742\":1}}],[\"如果不处理\",{\"1\":{\"3292\":1,\"4725\":1}}],[\"如果不清理自定义的threadlocal变量\",{\"1\":{\"3163\":1}}],[\"如果不使用线程池\",{\"1\":{\"3158\":1}}],[\"如果不允许外部直接通过new来创建对象\",{\"1\":{\"3076\":1}}],[\"如果不熟悉背后设计思路的同事\",{\"1\":{\"2745\":1}}],[\"如果不用单例\",{\"1\":{\"2378\":1}}],[\"如果不在\",{\"1\":{\"1436\":2}}],[\"如果不存在的话\",{\"1\":{\"1396\":1}}],[\"如果分成多个虚拟空间来处理\",{\"1\":{\"1416\":1}}],[\"如果没有指定类加载器\",{\"1\":{\"6258\":1}}],[\"如果没有\",{\"1\":{\"6097\":1}}],[\"如果没有找到相应方法\",{\"1\":{\"6094\":1}}],[\"如果没有泛型\",{\"1\":{\"5002\":1}}],[\"如果没有异常发生\",{\"1\":{\"4969\":2}}],[\"如果没有注释直接存在于此元素上\",{\"1\":{\"4634\":1,\"4638\":1}}],[\"如果没有限制次数和频率\",{\"1\":{\"3345\":1}}],[\"如果没有对方\",{\"1\":{\"2851\":1}}],[\"如果没有就创建一个网站\",{\"1\":{\"1429\":1}}],[\"如果没有我们需要的\",{\"1\":{\"1375\":1}}],[\"如果没有用空命令\",{\"1\":{\"796\":1}}],[\"如果感兴趣的话\",{\"1\":{\"1359\":1}}],[\"如果\",{\"1\":{\"868\":1,\"1344\":2,\"1436\":1,\"1601\":1,\"2124\":1,\"4129\":1,\"5646\":1,\"5660\":1,\"6835\":1}}],[\"如果产品之间的差异性很大\",{\"1\":{\"726\":1}}],[\"如果产品内部发生变化\",{\"1\":{\"672\":1}}],[\"如果产品的内部变化复杂\",{\"1\":{\"672\":1,\"727\":1}}],[\"如果我们不期望获取其父类的字段\",{\"1\":{\"5963\":1}}],[\"如果我们确实需要实例化一个泛型\",{\"1\":{\"5189\":1}}],[\"如果我们使用的面向用户的服务\",{\"1\":{\"3235\":1}}],[\"如果我们使用简单工厂模式来实现\",{\"1\":{\"1255\":1}}],[\"如果我们还需要考虑\",{\"1\":{\"2731\":1}}],[\"如果我们还想避免烦人的\",{\"1\":{\"1255\":1}}],[\"如果我们继续沿用刚才的设计思路\",{\"1\":{\"2730\":1}}],[\"如果我们在新类中重新命名\",{\"1\":{\"2704\":1}}],[\"如果我们在一个进程中创建另外一个进程\",{\"1\":{\"2389\":1}}],[\"如果我们有一个玩具鸭子\",{\"1\":{\"2525\":1}}],[\"如果我们如下两次执行\",{\"1\":{\"2373\":1}}],[\"如果我们将数据库连接池设计成单例类\",{\"1\":{\"2363\":1}}],[\"如果我们获取的对象是\",{\"1\":{\"2079\":1}}],[\"如果我们的集合元素是用不同的方式实现的\",{\"1\":{\"1505\":1}}],[\"如果我们给每个类都对应创建一个工厂类\",{\"1\":{\"1340\":1}}],[\"如果我们再增加手机的样式\",{\"1\":{\"613\":1}}],[\"如果我说只调用一次这个方法\",{\"1\":{\"451\":1}}],[\"如果用了原来的类加载器\",{\"1\":{\"6120\":1}}],[\"如果用户输入非法字符\",{\"1\":{\"3267\":1}}],[\"如果用\",{\"1\":{\"2930\":1}}],[\"如果用代码来简单示例一下的话\",{\"1\":{\"2408\":1}}],[\"如果用传统的构造函数来创建对象\",{\"1\":{\"1738\":1}}],[\"如果用享元模式来处理棋子\",{\"1\":{\"1389\":1}}],[\"如果用组合模式来实现会很方便\",{\"1\":{\"806\":1}}],[\"如果用桥接模式就能很好地解决这些问题\",{\"1\":{\"587\":1}}],[\"如果用继承方式\",{\"1\":{\"586\":1}}],[\"如果重新开发这些组件成本又很高\",{\"1\":{\"486\":1}}],[\"如果您稍后为节点定义边\",{\"1\":{\"162\":1}}],[\"如果多次这样做\",{\"1\":{\"162\":1}}],[\"如果你完成了依赖注入\",{\"1\":{\"6960\":1}}],[\"如果你在\",{\"1\":{\"6944\":1}}],[\"如果你坚持使用\",{\"1\":{\"6906\":1}}],[\"如果你喜欢用这种风格的话\",{\"1\":{\"6902\":1}}],[\"如果你引入足够多的库\",{\"1\":{\"6871\":1}}],[\"如果你认为你的根\",{\"1\":{\"6865\":1}}],[\"如果你是第一次用会觉得有点怪\",{\"1\":{\"6978\":1}}],[\"如果你是\",{\"1\":{\"6863\":1}}],[\"如果你是一个新手\",{\"1\":{\"36\":1}}],[\"如果你对一个参数的含义没什么可说的\",{\"1\":{\"6848\":1}}],[\"如果你确实需要一个代码格式风格的教程\",{\"1\":{\"6845\":1}}],[\"如果你确实准备使用\",{\"1\":{\"6824\":1}}],[\"如果你发现在你正在往工具类中添加很多方法\",{\"1\":{\"6839\":1}}],[\"如果你使用的是\",{\"1\":{\"6826\":1}}],[\"如果你使用基于\",{\"1\":{\"6821\":1}}],[\"如果你要引入很多的外部依赖\",{\"1\":{\"6866\":1}}],[\"如果你要手动创建许多不可变对象\",{\"1\":{\"6814\":1}}],[\"如果你要实现诸如复数或者矩阵之类的算术对象\",{\"1\":{\"4891\":1}}],[\"如果你想一遍又一遍地设置相同的依赖\",{\"1\":{\"6964\":1}}],[\"如果你想明确地指出它\",{\"1\":{\"6877\":1}}],[\"如果你想跟踪一个项目的版本\",{\"1\":{\"6877\":1}}],[\"如果你想使用内部依赖\",{\"1\":{\"6868\":1}}],[\"如果你想用这种构造的方式构造更复杂的对象\",{\"1\":{\"6805\":1}}],[\"如果你想保存很容易修改的对象数据\",{\"1\":{\"6803\":1}}],[\"如果你的项目依赖于不同版本的同一个库\",{\"1\":{\"6874\":1}}],[\"如果你的项目的开发者选择的框架并不合适\",{\"1\":{\"6860\":1}}],[\"如果你的资源实现了\",{\"1\":{\"4868\":1}}],[\"如果你的异常模式使问题变得太复杂\",{\"1\":{\"4814\":1}}],[\"如果你还期望了解junit4是如何实现运行的呢\",{\"1\":{\"4686\":1}}],[\"如果你真的需要\",{\"1\":{\"4239\":1}}],[\"如果你希望能为了在必要的时候重新包装每行代码而自动格式化\",{\"1\":{\"4154\":1}}],[\"如果你不能改变一个函数的入参类型\",{\"1\":{\"2747\":1}}],[\"如果你不了解它\",{\"1\":{\"40\":1}}],[\"如果你觉得这种思考方式更加顺畅\",{\"1\":{\"2712\":1}}],[\"如果你觉得上面的代码不够绝\",{\"1\":{\"407\":1}}],[\"如果你经常迷茫\",{\"1\":{\"144\":1}}],[\"把object类的方法都打印出来了\",{\"1\":{\"6016\":1}}],[\"把个个组成部分映射成一个个对象\",{\"1\":{\"5821\":1}}],[\"把它们用在你的构建阶段往往也是一个不错的想法\",{\"1\":{\"6992\":1}}],[\"把它们独立出来\",{\"1\":{\"2211\":1}}],[\"把它的\",{\"1\":{\"5364\":1}}],[\"把代码放在try\",{\"1\":{\"4856\":1}}],[\"把代码重构一下\",{\"1\":{\"2710\":1}}],[\"把当前运行环境下能做的事尽量做完\",{\"1\":{\"4811\":1,\"4812\":1}}],[\"把当前状态设置为\",{\"1\":{\"2467\":1}}],[\"把当前状态保存\",{\"1\":{\"1655\":1}}],[\"把钱交出来\",{\"1\":{\"3464\":1}}],[\"把机房编号赋值给whatfeatureofgroup\",{\"1\":{\"3156\":1}}],[\"把数组转换成集合时\",{\"1\":{\"3108\":1}}],[\"把请求从链中的一个对象传到下一个对象\",{\"1\":{\"2631\":1}}],[\"把这种改变通知给其他多个对象\",{\"1\":{\"2625\":1}}],[\"把变化的代码从不变的代码中分离出来\",{\"1\":{\"2491\":1}}],[\"把使用算法的责任和算法的实现分割开来\",{\"1\":{\"2489\":1}}],[\"把复杂的\",{\"1\":{\"2418\":1}}],[\"把相关\",{\"1\":{\"2417\":1}}],[\"把更加基础的方法和成员写到\",{\"1\":{\"2124\":1}}],[\"把展现细节的任务交给他们的实现类去完成\",{\"1\":{\"2066\":1}}],[\"把创建\",{\"1\":{\"1206\":1,\"2151\":1}}],[\"把关机和启动合为一个操作\",{\"1\":{\"1126\":1}}],[\"把选择权交给用户\",{\"1\":{\"1037\":1}}],[\"把大象装进冰箱\",{\"1\":{\"1033\":1}}],[\"把学校\",{\"1\":{\"844\":1}}],[\"把产品\",{\"1\":{\"700\":1}}],[\"把适配者接口转换成目标接口\",{\"1\":{\"501\":1}}],[\"把第二天的闹钟往前调10分钟\",{\"1\":{\"138\":1}}],[\"类并且告诉\",{\"1\":{\"6901\":1}}],[\"类并不一定具有继承关系\",{\"1\":{\"2745\":1}}],[\"类并不是\",{\"1\":{\"2191\":1}}],[\"类应该声明不可变的字段\",{\"1\":{\"6837\":1}}],[\"类重载代理\",{\"1\":{\"6378\":1}}],[\"类重写\",{\"1\":{\"5646\":1}}],[\"类字节码详解\",{\"1\":{\"5834\":1}}],[\"类发生变化\",{\"1\":{\"5803\":1}}],[\"类发送消息\",{\"1\":{\"5803\":1}}],[\"类向\",{\"1\":{\"5803\":1}}],[\"类方法当中的一个参数\",{\"1\":{\"5802\":1}}],[\"类方法的注释必须使用javadoc规范\",{\"1\":{\"3208\":1}}],[\"类封装\",{\"1\":{\"5759\":1}}],[\"类在第一次使用时才动态加载到\",{\"1\":{\"5516\":1}}],[\"类在设计与实现时要符合单一原则\",{\"1\":{\"3463\":1}}],[\"类加载机制流程\",{\"1\":{\"5839\":1}}],[\"类加载机制\",{\"1\":{\"5836\":1,\"5837\":1}}],[\"类加载机制和类字节码技术可以参考如下两篇文章\",{\"1\":{\"5833\":1}}],[\"类加载\",{\"0\":{\"5832\":1}}],[\"类加载相当于\",{\"1\":{\"5516\":1}}],[\"类加载器\",{\"1\":{\"1861\":1,\"6258\":1}}],[\"类所有的实例都共享静态变量\",{\"1\":{\"5484\":1}}],[\"类可以用来用分隔符把字符串拼接起来\",{\"1\":{\"6907\":1}}],[\"类可以通过\",{\"1\":{\"552\":1}}],[\"类可见表示其它类可以用这个类创建实例对象\",{\"1\":{\"5361\":1}}],[\"类定义错误\",{\"1\":{\"4717\":1}}],[\"类及其子类\",{\"1\":{\"4716\":1}}],[\"类属性\",{\"1\":{\"3208\":1}}],[\"类第一次被使用时装载\",{\"1\":{\"3182\":1}}],[\"类成员\",{\"1\":{\"4589\":1}}],[\"类成员方法只对继承类公开\",{\"1\":{\"3076\":1}}],[\"类成员方法只供类内部调用\",{\"1\":{\"3076\":1}}],[\"类成员与方法访问控制从严\",{\"1\":{\"3076\":1}}],[\"类static成员变量如果仅在本类使用\",{\"1\":{\"3076\":1}}],[\"类非static成员变量并且仅在本类使用\",{\"1\":{\"3076\":1}}],[\"类非static成员变量并且与子类共享\",{\"1\":{\"3076\":1}}],[\"类内容顺序\",{\"0\":{\"3997\":1}}],[\"类内方法定义的顺序依次是\",{\"1\":{\"3068\":1}}],[\"类内共享常量\",{\"1\":{\"3016\":2}}],[\"类名打印\",{\"1\":{\"5883\":1}}],[\"类名通常是名词或者名词短语\",{\"1\":{\"4169\":1}}],[\"类名以\",{\"1\":{\"4168\":1}}],[\"类名\",{\"0\":{\"4167\":1},\"1\":{\"4193\":1,\"5824\":1,\"5850\":1}}],[\"类名为messageutils\",{\"1\":{\"2995\":1}}],[\"类名可以使用复数形式\",{\"1\":{\"2995\":1}}],[\"类名使用uppercamelcase风格\",{\"1\":{\"2989\":1}}],[\"类提供了特殊的构造函数方法\",{\"1\":{\"4925\":1}}],[\"类提供了一个\",{\"1\":{\"1768\":1}}],[\"类提到了\",{\"1\":{\"2967\":1}}],[\"类调用作为参数的\",{\"1\":{\"2962\":1}}],[\"类关系记忆技巧总结如下表所示\",{\"1\":{\"2906\":1}}],[\"类实现\",{\"1\":{\"2901\":1}}],[\"类实现了接口\",{\"1\":{\"2899\":1}}],[\"类之间的关系\",{\"0\":{\"2847\":1},\"1\":{\"2834\":1}}],[\"类之间各司其职\",{\"1\":{\"1572\":1}}],[\"类库主要包含了以下三个类\",{\"1\":{\"5518\":1}}],[\"类库中定义的可以通过预检查方式规避的runtimeexception异常不应该通过catch\",{\"1\":{\"4848\":1}}],[\"类库\",{\"1\":{\"2791\":1}}],[\"类库提供的\",{\"1\":{\"2694\":1}}],[\"类派生出两个更加细分的抽象类\",{\"1\":{\"2728\":1}}],[\"类呢\",{\"1\":{\"2703\":1}}],[\"类对象\",{\"1\":{\"2702\":1}}],[\"类对象的全局唯一性可以通过多种不同的方式来保证\",{\"1\":{\"2383\":1}}],[\"类和集合应该设置为不可变的\",{\"1\":{\"6832\":1}}],[\"类和成员如果存在修饰符的话\",{\"1\":{\"4156\":1}}],[\"类和接口的增多也就或多或少地增加代码的复杂程度和维护成本\",{\"1\":{\"2742\":1}}],[\"类和\",{\"1\":{\"2525\":1,\"2745\":3,\"2968\":1,\"5800\":1}}],[\"类比一下\",{\"1\":{\"2394\":1}}],[\"类被装载时并不会立即实例化\",{\"1\":{\"2323\":1}}],[\"类粒度比较大\",{\"1\":{\"2176\":1}}],[\"类相关方法\",{\"1\":{\"2124\":1}}],[\"类不再继承a类\",{\"1\":{\"2124\":1}}],[\"类继承同一个父类\",{\"1\":{\"2745\":1}}],[\"类继承了\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"类继承抽象类\",{\"1\":{\"2109\":1}}],[\"类需要设计实现哪些方法\",{\"1\":{\"2703\":1}}],[\"类需要\",{\"1\":{\"2109\":1}}],[\"类与类箭头技巧\",{\"0\":{\"2905\":1}}],[\"类与类之间的依赖关系画出来\",{\"1\":{\"2758\":1}}],[\"类与类之间的依赖关系简单清晰\",{\"1\":{\"2172\":1}}],[\"类与类之间的耦合越弱\",{\"1\":{\"2179\":1}}],[\"类与类之间不建议之间互相引用\",{\"1\":{\"2067\":1}}],[\"类与类关系越密切\",{\"1\":{\"2156\":1}}],[\"类与接口\",{\"1\":{\"2080\":1}}],[\"类与实现\",{\"1\":{\"1878\":1}}],[\"类通过接口去依赖\",{\"1\":{\"2058\":2}}],[\"类通过接口\",{\"1\":{\"2052\":2,\"2058\":2}}],[\"类分解\",{\"1\":{\"2019\":1}}],[\"类负责一个表的增删改查\",{\"1\":{\"2003\":1}}],[\"类就使用到职责链模式\",{\"1\":{\"1977\":1}}],[\"类就使用了观察者模式\",{\"1\":{\"1723\":1}}],[\"类等等的设计\",{\"1\":{\"2762\":1}}],[\"类等\",{\"1\":{\"1798\":1}}],[\"类必须要实现一个接口\",{\"1\":{\"1768\":1}}],[\"类是\",{\"1\":{\"5801\":1,\"5802\":1}}],[\"类是依赖关系主要有三种形式\",{\"1\":{\"5800\":1}}],[\"类是所有类的根类\",{\"1\":{\"1768\":1}}],[\"类是核心\",{\"1\":{\"1718\":1}}],[\"类代码\",{\"1\":{\"1760\":1,\"1762\":1}}],[\"类代码保持不变\",{\"1\":{\"1210\":1}}],[\"类型可选\",{\"1\":{\"6470\":1}}],[\"类型更广\",{\"1\":{\"5611\":1}}],[\"类型赋值给\",{\"1\":{\"5609\":1}}],[\"类型下转型为\",{\"1\":{\"5344\":1}}],[\"类型精度要高\",{\"1\":{\"5344\":1}}],[\"类型信息\",{\"1\":{\"5326\":1,\"5328\":1,\"5329\":1}}],[\"类型信息被擦除后\",{\"1\":{\"5220\":1}}],[\"类型检测是根据引用来决定的\",{\"1\":{\"5140\":1}}],[\"类型检查就是针对引用的\",{\"1\":{\"5134\":1}}],[\"类型变量\",{\"1\":{\"5233\":1}}],[\"类型变量擦除\",{\"1\":{\"5097\":1}}],[\"类型变量名以如下两者之一方式编写\",{\"1\":{\"4191\":1}}],[\"类型变量名\",{\"0\":{\"4190\":1}}],[\"类型实参只准传入某种类型的父类或某种类型的子类\",{\"1\":{\"5040\":1}}],[\"类型安全的rest客户端\",{\"1\":{\"6582\":1}}],[\"类型安全\",{\"1\":{\"5004\":1}}],[\"类型擦除就和多态有了冲突\",{\"1\":{\"5166\":1}}],[\"类型擦除会造成多态的冲突\",{\"1\":{\"5147\":1}}],[\"类型擦除后\",{\"1\":{\"5121\":1,\"5155\":1}}],[\"类型擦除\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"类型转换异常类\",{\"1\":{\"4832\":1}}],[\"类型上都属于exception类及其子类\",{\"1\":{\"4725\":1}}],[\"类型注解\",{\"1\":{\"4657\":1}}],[\"类型参数声明\",{\"1\":{\"4659\":1}}],[\"类型参数\",{\"1\":{\"4590\":1}}],[\"类型的变量\",{\"1\":{\"5611\":1}}],[\"类型的变量吗\",{\"0\":{\"5598\":1,\"5610\":1}}],[\"类型的高\",{\"1\":{\"5599\":1}}],[\"类型的范围比\",{\"1\":{\"5611\":1}}],[\"类型的范围是从\",{\"1\":{\"5599\":1}}],[\"类型的范围\",{\"0\":{\"5598\":1}}],[\"类型的\",{\"1\":{\"4129\":1,\"5386\":1}}],[\"类型约束中的\",{\"1\":{\"4046\":1,\"4076\":1}}],[\"类型为bigint\",{\"1\":{\"3359\":1}}],[\"类型进行严格检查和控制\",{\"1\":{\"3346\":1}}],[\"类型与中括号紧挨相连来定义数组\",{\"1\":{\"2993\":1}}],[\"类型数量稳定\",{\"1\":{\"2975\":1}}],[\"类型\",{\"0\":{\"5596\":1},\"1\":{\"1427\":1,\"1436\":2,\"2410\":2,\"3366\":1,\"4520\":1,\"5339\":1,\"5341\":1,\"5344\":2,\"5593\":1,\"5607\":1,\"5609\":1,\"5824\":1,\"6216\":1,\"6826\":1}}],[\"类中定义\",{\"1\":{\"5603\":1}}],[\"类中连续的成员或初始化方法之间\",{\"1\":{\"4062\":1}}],[\"类中关于\",{\"1\":{\"3528\":1}}],[\"类中的\",{\"1\":{\"5801\":1}}],[\"类中的操作实现了接口中所声明的所有的抽象操作\",{\"1\":{\"2899\":1}}],[\"类中的几个方法定义得都很干净\",{\"1\":{\"2700\":1}}],[\"类中用到了对方\",{\"1\":{\"2858\":1}}],[\"类中有些函数命名暴露了实现细节\",{\"1\":{\"2704\":1}}],[\"类中都逐一定义并重新实现一遍\",{\"1\":{\"2703\":1}}],[\"类中所定义的所有\",{\"1\":{\"2703\":1}}],[\"类中已经实现了核心的方法\",{\"1\":{\"1726\":1}}],[\"类中\",{\"1\":{\"1312\":1,\"2551\":1,\"2704\":1}}],[\"类中做成一个抽象方法\",{\"1\":{\"905\":1}}],[\"类做成抽象类\",{\"1\":{\"2151\":1}}],[\"类做成抽象\",{\"1\":{\"1246\":1}}],[\"类交互\",{\"1\":{\"1149\":1}}],[\"类有\",{\"1\":{\"936\":1}}],[\"类似curses的简单console文本gui函数库\",{\"1\":{\"6512\":1}}],[\"类似scala的条件类\",{\"1\":{\"6374\":1}}],[\"类似的还有getdeclaredmethods和getdeclaredconstructors\",{\"1\":{\"5881\":1}}],[\"类似的还有getmethods和getconstructors\",{\"1\":{\"5879\":1}}],[\"类似块状结构\",{\"1\":{\"4114\":1}}],[\"类似赋值操作符\",{\"1\":{\"4049\":1}}],[\"类似操作符\",{\"1\":{\"4043\":1,\"4075\":1}}],[\"类似于httpclient的超时设置需要自己明确去设置timeout\",{\"1\":{\"3441\":1}}],[\"类似于科学计数法的\",{\"1\":{\"3048\":1}}],[\"类似于常写的\",{\"1\":{\"1798\":1}}],[\"类似\",{\"1\":{\"2311\":1}}],[\"类似前面的\",{\"1\":{\"935\":1}}],[\"类似我们前面的\",{\"1\":{\"933\":1,\"934\":1}}],[\"类似我们前面讲的\",{\"1\":{\"932\":1}}],[\"类似命令接口\",{\"1\":{\"787\":1}}],[\"类爆炸\",{\"1\":{\"613\":1,\"908\":1}}],[\"类适配器\",{\"1\":{\"575\":1}}],[\"类适配器模式注意事项和细节\",{\"0\":{\"523\":1}}],[\"类适配器模式应用实例\",{\"0\":{\"515\":1}}],[\"类适配器模式介绍\",{\"0\":{\"512\":1}}],[\"类适配器模式\",{\"0\":{\"511\":1},\"1\":{\"488\":1,\"522\":1}}],[\"类接口\",{\"1\":{\"529\":1}}],[\"类的全限定名\",{\"1\":{\"5886\":1}}],[\"类的加载\",{\"1\":{\"5841\":1}}],[\"类的接口\",{\"1\":{\"5668\":1}}],[\"类的主体时\",{\"1\":{\"4013\":1}}],[\"类的成员和初始化方法的顺序对代码可读性有着很重要的影响\",{\"1\":{\"3998\":1}}],[\"类的所有最顶层内容\",{\"1\":{\"3936\":1}}],[\"类的反应\",{\"1\":{\"2968\":1}}],[\"类的继承层次会越来越深\",{\"1\":{\"2731\":1}}],[\"类的使用举例\",{\"1\":{\"2699\":1}}],[\"类的地方\",{\"1\":{\"2354\":1}}],[\"类的静态属性只会在第一次加载类的时候初始化\",{\"1\":{\"2324\":1}}],[\"类的内部创建对象\",{\"1\":{\"2283\":1}}],[\"类的内容\",{\"1\":{\"2187\":1,\"2193\":1}}],[\"类的直接朋友\",{\"1\":{\"2191\":1}}],[\"类的直接朋友类有哪些\",{\"1\":{\"2188\":1}}],[\"类的粒度比较小\",{\"1\":{\"2175\":1}}],[\"类的某些方法\",{\"1\":{\"2109\":1}}],[\"类的\",{\"1\":{\"2077\":1,\"3524\":1}}],[\"类的父接口\",{\"1\":{\"1861\":1}}],[\"类的实现类\",{\"1\":{\"1487\":1}}],[\"类的实例是不安全的\",{\"1\":{\"6268\":1}}],[\"类的实例\",{\"1\":{\"529\":1}}],[\"类的个数将急剧增加\",{\"1\":{\"1463\":1}}],[\"类的个数容易过多\",{\"1\":{\"1224\":1}}],[\"类的动作放在一个工厂的方法中\",{\"1\":{\"1320\":1}}],[\"类的数量就会倍增\",{\"1\":{\"908\":1}}],[\"类的方法完全不兼容\",{\"1\":{\"2525\":1}}],[\"类的方法\",{\"1\":{\"526\":1,\"2118\":1,\"2124\":2,\"5775\":1}}],[\"类的方法在\",{\"1\":{\"525\":1}}],[\"类作修改\",{\"1\":{\"529\":1}}],[\"类这一点算是一个缺点\",{\"1\":{\"524\":1}}],[\"类图和时序图在新窗口打开\",{\"1\":{\"5810\":1}}],[\"类图像建筑领域的施工图\",{\"1\":{\"3454\":1}}],[\"类图中\",{\"1\":{\"2842\":1,\"2867\":1,\"2874\":1,\"2880\":1,\"2894\":1,\"2900\":1}}],[\"类图中的类可以通过某种编程语言直接实现\",{\"1\":{\"2832\":1}}],[\"类图用\",{\"1\":{\"2841\":1}}],[\"类图用于描述系统中的类\",{\"1\":{\"2833\":1}}],[\"类图简单举例\",{\"1\":{\"2835\":1}}],[\"类图在软件系统开发的整个生命周期都是有效的\",{\"1\":{\"2832\":1}}],[\"类图是描述类与类之间的关系的\",{\"1\":{\"2814\":1}}],[\"类图分析\",{\"1\":{\"2531\":1}}],[\"类图设计\",{\"1\":{\"2141\":1}}],[\"类图\",{\"0\":{\"2830\":1,\"2849\":1,\"2863\":1,\"2871\":1,\"2877\":1,\"2892\":1,\"2898\":1,\"5777\":1},\"1\":{\"517\":1,\"536\":1,\"704\":1,\"839\":1,\"846\":1,\"861\":1,\"901\":1,\"1194\":1,\"1421\":1,\"1545\":1,\"1712\":1,\"1839\":1,\"1866\":1,\"2518\":1,\"2812\":1,\"2831\":1,\"2896\":1}}],[\"类\",{\"0\":{\"4904\":1},\"1\":{\"500\":1,\"501\":1,\"513\":1,\"526\":1,\"529\":2,\"556\":2,\"692\":1,\"694\":1,\"696\":1,\"706\":1,\"710\":1,\"910\":1,\"1149\":1,\"1251\":1,\"1320\":1,\"1424\":1,\"1694\":1,\"1771\":1,\"1773\":1,\"1792\":1,\"1794\":1,\"1796\":1,\"1828\":1,\"1829\":1,\"1830\":1,\"2021\":1,\"2037\":2,\"2038\":1,\"2050\":2,\"2052\":2,\"2053\":2,\"2055\":1,\"2058\":3,\"2077\":1,\"2109\":1,\"2118\":1,\"2124\":2,\"2144\":1,\"2149\":1,\"2152\":1,\"2323\":1,\"2438\":2,\"2506\":1,\"2507\":1,\"2508\":1,\"2523\":1,\"2525\":1,\"2546\":1,\"2698\":1,\"2702\":1,\"2728\":1,\"2738\":3,\"2745\":1,\"2853\":1,\"2953\":4,\"3001\":1,\"3104\":1,\"3208\":1,\"3935\":1,\"4257\":1,\"4313\":1,\"4397\":1,\"4493\":1,\"4495\":1,\"4589\":1,\"4590\":1,\"4659\":1,\"5480\":1,\"6836\":1}}],[\"目前还处于beta版本\",{\"1\":{\"6601\":1}}],[\"目前是一个apache孵化器项目\",{\"1\":{\"6470\":1}}],[\"目前的jvm和jdk实现\",{\"1\":{\"6464\":1}}],[\"目前的javadoc还没有实现\",{\"1\":{\"3222\":1}}],[\"目前仍在活跃开发\",{\"1\":{\"6284\":1}}],[\"目前程序员门槛越来越高\",{\"1\":{\"2577\":1}}],[\"目的是为了给调用者提供尽可能多的信息\",{\"1\":{\"4894\":1}}],[\"目的是为了改变异常的类型\",{\"1\":{\"4756\":1}}],[\"目的是测试系统能否正确操作\",{\"1\":{\"4460\":1}}],[\"目的\",{\"1\":{\"953\":1,\"982\":1,\"1026\":1,\"2233\":1}}],[\"目标对象的方法如果为\",{\"1\":{\"1907\":1}}],[\"目标对象的类\",{\"1\":{\"1895\":1}}],[\"目标对象不需要实现接口\",{\"1\":{\"1881\":1}}],[\"目标对象需要实现接口\",{\"1\":{\"1880\":1}}],[\"目标对象实现的接口类型\",{\"1\":{\"1871\":1}}],[\"目标对象与代理对象都要维护\",{\"1\":{\"1847\":1}}],[\"目标对象\",{\"1\":{\"1835\":1,\"1842\":2,\"1858\":1,\"1892\":1}}],[\"目标与观察者之间的依赖关系并没有完全解除\",{\"1\":{\"1674\":1}}],[\"目标与观察者之间建立了一套触发机制\",{\"1\":{\"1672\":1}}],[\"目标\",{\"1\":{\"499\":1}}],[\"目录里创建一个以服务接口命名的文件\",{\"1\":{\"6144\":1,\"6260\":1}}],[\"目录浏览一下就好\",{\"1\":{\"3373\":1}}],[\"目录下\",{\"1\":{\"3284\":1}}],[\"目录\",{\"0\":{\"9\":1,\"6747\":1},\"1\":{\"6154\":1,\"6260\":1}}],[\"将jar\",{\"1\":{\"6405\":1}}],[\"将jar包装为轻量级本机windows可执行程序\",{\"1\":{\"6403\":1}}],[\"将常见编程错误作为运行时错误报告\",{\"1\":{\"6307\":1}}],[\"将从jvm中读取的内容\",{\"1\":{\"6076\":1}}],[\"将此对象的\",{\"1\":{\"5992\":1}}],[\"将指定对象变量上此\",{\"1\":{\"5971\":1}}],[\"将导致应用程序中断\",{\"1\":{\"5719\":1}}],[\"将字符串设置为不可变可以允许多个客户端之间共享相同的字符串\",{\"1\":{\"5617\":1}}],[\"将父类的泛型类型限定为date\",{\"1\":{\"5152\":1}}],[\"将父类的实现细节暴露给了子类\",{\"1\":{\"2731\":1}}],[\"将第二种情况拓展成下面的形式\",{\"1\":{\"5141\":1}}],[\"将第一种情况拓展成下面的形式\",{\"1\":{\"5138\":1}}],[\"将不同的消息传输api整合在一起\",{\"1\":{\"6498\":1}}],[\"将不同的状态引入独立的对象中会使得状态转换变得更加明确\",{\"1\":{\"2423\":1}}],[\"将不知道如何处理的异常继续传递下去\",{\"1\":{\"4745\":1}}],[\"将要被监听的代码\",{\"1\":{\"4736\":1}}],[\"将终止线程\",{\"1\":{\"4717\":1}}],[\"将需要进行测试的类列表作作为参数传入\",{\"1\":{\"4487\":1}}],[\"将比较两个数组\",{\"1\":{\"4366\":1}}],[\"将所有的泛型表示\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"将所有的创建逻辑都放到一个工厂类中\",{\"1\":{\"1254\":1}}],[\"将所有单词合并为一个标识符\",{\"1\":{\"4203\":1}}],[\"将短语划分为单词\",{\"1\":{\"4198\":1}}],[\"将短语转换为纯\",{\"1\":{\"4197\":1}}],[\"将或可能继续执行到下一个语句组\",{\"1\":{\"4124\":1}}],[\"将原本可以合法写在一行的代码拆分成多行\",{\"1\":{\"4036\":1}}],[\"将原来不兼容的两个类融合在一起\",{\"1\":{\"1011\":1}}],[\"将在\",{\"1\":{\"4017\":1,\"4148\":1}}],[\"将较慢的服务与主线程池隔离开\",{\"1\":{\"3447\":1}}],[\"将执行结果作为method2的输入\",{\"1\":{\"3304\":1}}],[\"将错误日志和业务日志分开放\",{\"1\":{\"3286\":1}}],[\"将其转化为用户可以理解的内容\",{\"1\":{\"3268\":1}}],[\"将设计模式体现在名字中\",{\"1\":{\"3001\":1}}],[\"将具体状态作为参数传递\",{\"1\":{\"2962\":1}}],[\"将观众分为男人和女人\",{\"1\":{\"2955\":1}}],[\"将作用于某种数据结构中的各元素的操作分离出来封装成独立的类\",{\"1\":{\"2931\":1}}],[\"将事物之间的联系归纳为\",{\"1\":{\"2848\":1}}],[\"将依赖老接口的代码改为调用新接口\",{\"1\":{\"2768\":1}}],[\"将图片存储到阿里云的流程\",{\"1\":{\"2705\":1}}],[\"将容易变的部分抽象出来\",{\"1\":{\"2686\":1}}],[\"将容易产生问题的\",{\"1\":{\"2476\":1}}],[\"将算法的一些步骤延迟到子类中\",{\"1\":{\"2621\":1}}],[\"将抽象与实现分离\",{\"1\":{\"2613\":1}}],[\"将一个请求封装为一个对象\",{\"1\":{\"2622\":1}}],[\"将一个类的接口转换成客户希望的另外一个接口\",{\"1\":{\"2612\":1}}],[\"将一个类的接口转换成另一种接口\",{\"1\":{\"503\":1}}],[\"将一个复杂对象分解成多个相对简单的部分\",{\"1\":{\"2609\":1}}],[\"将一个对象作为原型\",{\"1\":{\"2608\":1}}],[\"将当前状态设置为\",{\"1\":{\"2473\":1}}],[\"将状态设置成可以抽奖状态\",{\"1\":{\"2454\":1}}],[\"将状态转换显示化\",{\"1\":{\"2423\":1}}],[\"将这些所有可能发生的情况全都考虑到\",{\"1\":{\"2416\":1}}],[\"将这些对象连接成一条链\",{\"1\":{\"1040\":1}}],[\"将这个执行文件从磁盘加载到自己的进程地址空间\",{\"1\":{\"2389\":1}}],[\"将参数放到另外一个全局变量中\",{\"1\":{\"2375\":1}}],[\"将参数放到\",{\"1\":{\"2371\":1}}],[\"将输出学院的员工方法\",{\"1\":{\"2194\":1}}],[\"将引用其他对象的次数降到最低\",{\"1\":{\"2182\":1}}],[\"将臃肿庞大的接口分解为多个粒度小的接口\",{\"1\":{\"2044\":1}}],[\"将接口和实现相分离\",{\"1\":{\"2717\":1}}],[\"将接口\",{\"1\":{\"2038\":1,\"2055\":1}}],[\"将前面的案例用\",{\"1\":{\"1898\":1}}],[\"将前面的静态代理改进成动态代理模式\",{\"1\":{\"1865\":1}}],[\"将最新的信息推送给接入方\",{\"1\":{\"1702\":1,\"1718\":1}}],[\"将会返回什么\",{\"0\":{\"5612\":1}}],[\"将会出现什么现象\",{\"0\":{\"5598\":1}}],[\"将会占用比较大的内存资源\",{\"1\":{\"1626\":1}}],[\"将会导致调试非常复杂\",{\"1\":{\"1494\":1}}],[\"将自己放入到\",{\"1\":{\"1603\":1}}],[\"将给中介者对象\",{\"1\":{\"1601\":1}}],[\"将大大降低它们之间的\",{\"1\":{\"1569\":1}}],[\"将工厂抽象成两层\",{\"1\":{\"1280\":1}}],[\"将复杂逻辑判断的结果赋值给一个有意义的布尔变量名\",{\"1\":{\"3196\":1}}],[\"将复杂的创建逻辑拆分到多个工厂类中\",{\"1\":{\"1254\":1}}],[\"将复杂产品的创建步骤分解在不同的方法中\",{\"1\":{\"724\":1}}],[\"将披萨项目的实例化功能抽象成抽象方法\",{\"1\":{\"1241\":1}}],[\"将对象组合成树状层次结构\",{\"1\":{\"2615\":1}}],[\"将对象组合成树状结构以表示\",{\"1\":{\"807\":1}}],[\"将对象的创建与使用分离\",{\"1\":{\"2600\":1}}],[\"将对象的创建和使用分离\",{\"1\":{\"1324\":1}}],[\"将对象解耦\",{\"1\":{\"2008\":1}}],[\"将对象间的一对多关联转变为一对一的关联\",{\"1\":{\"1574\":1}}],[\"将对象之间的通信关联关系封装到一个中介类中单独处理\",{\"1\":{\"1065\":1}}],[\"将请求封装成命令\",{\"1\":{\"1050\":1}}],[\"将两个能够独立变化的部分分离开来\",{\"1\":{\"1016\":1}}],[\"将整体与局部\",{\"1\":{\"1006\":1}}],[\"将调料内置到\",{\"1\":{\"910\":1}}],[\"将学院加入到\",{\"1\":{\"858\":1}}],[\"将学院看做是学校的子类\",{\"1\":{\"842\":1}}],[\"将来实际业务中\",{\"1\":{\"854\":1}}],[\"将管理子构件的方法移到树枝构件中\",{\"1\":{\"826\":1}}],[\"将发起请求的对象与执行请求的对象解耦\",{\"1\":{\"793\":1}}],[\"将多个命令装配成一个组合命令\",{\"1\":{\"750\":1}}],[\"将军\",{\"1\":{\"744\":1,\"745\":1}}],[\"将军发布命令\",{\"1\":{\"744\":1}}],[\"将产品本身与产品的创建过程解耦\",{\"1\":{\"722\":1}}],[\"将产品\",{\"1\":{\"709\":1}}],[\"将产品和产品建造的过程解耦\",{\"1\":{\"701\":1}}],[\"将建造的流程写好\",{\"1\":{\"709\":1}}],[\"将实现与抽象放在两个不同的类层次中\",{\"1\":{\"588\":1}}],[\"将\",{\"1\":{\"576\":1,\"577\":1,\"1246\":1,\"4199\":1,\"5438\":1}}],[\"将目标类和适配者类解耦\",{\"1\":{\"492\":1}}],[\"将某个类的接口转换成客户端期望的另一个接口表示\",{\"1\":{\"487\":1}}],[\"复数结尾\",{\"1\":{\"3006\":1}}],[\"复用性好\",{\"1\":{\"2936\":1}}],[\"复用程度会不断增加\",{\"1\":{\"2793\":1}}],[\"复用可以分为三个层次\",{\"1\":{\"2791\":1}}],[\"复用的灵活性高\",{\"1\":{\"2222\":1}}],[\"复用\",{\"1\":{\"2216\":1,\"2220\":1}}],[\"复用了现存的类\",{\"1\":{\"491\":1}}],[\"复杂的全功能自顶向下解析框架\",{\"1\":{\"6314\":1}}],[\"复杂性降低\",{\"1\":{\"2010\":1}}],[\"复杂度\",{\"1\":{\"1257\":1}}],[\"复制的分布式数据存储\",{\"1\":{\"6342\":1}}],[\"复制对象的所有基本数据类型的成员变量值\",{\"1\":{\"1785\":1}}],[\"复制一份给新的对象\",{\"1\":{\"1781\":1}}],[\"复盘会成为你自我提升路上最好的帮手\",{\"1\":{\"154\":1}}],[\"其算法可从数据中学习\",{\"1\":{\"6484\":1}}],[\"其是否指定factory\",{\"1\":{\"6201\":1}}],[\"其核心思想就是\",{\"1\":{\"6141\":1}}],[\"其依据的都是用一个class对象\",{\"1\":{\"5829\":1}}],[\"其表示的是创建的类的类型信息\",{\"1\":{\"5828\":1}}],[\"其作用是在运行时识别一个对象的类型和类的信息\",{\"1\":{\"5819\":1}}],[\"其作用如下\",{\"1\":{\"2133\":1}}],[\"其必须被try\",{\"1\":{\"5715\":1}}],[\"其结果就是一个普通的类\",{\"1\":{\"5102\":1}}],[\"其结构图如图下所示\",{\"1\":{\"2509\":1}}],[\"其结构图如图所示\",{\"1\":{\"823\":1,\"826\":1}}],[\"其结构图如下图所示\",{\"1\":{\"1948\":1,\"2435\":1}}],[\"其结构图如下所示\",{\"1\":{\"1233\":1}}],[\"其对应的原生态类型\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"其对应的树状图如图所示\",{\"1\":{\"829\":1}}],[\"其方法体通常都是\",{\"1\":{\"2948\":1}}],[\"其目的是为了使某些单词\",{\"1\":{\"4092\":1}}],[\"其目的是在不暴露聚合对象的内部结构的情况下\",{\"1\":{\"1516\":1}}],[\"其目的非常明显\",{\"1\":{\"2788\":1}}],[\"其每个子类可以生产一系列相关的产品\",{\"1\":{\"2607\":1}}],[\"其拓展是有限多例模式\",{\"1\":{\"2605\":1}}],[\"其子类\",{\"1\":{\"2467\":1}}],[\"其行为也随之改变\",{\"1\":{\"2430\":1}}],[\"其意图是让一个对象在其内部状态改变的时候\",{\"1\":{\"2430\":1}}],[\"其内部状态就会发生改变\",{\"1\":{\"2415\":1}}],[\"其内部含有对真实主题的引用\",{\"1\":{\"1830\":1}}],[\"其稳定性高和延续性强\",{\"1\":{\"2139\":1}}],[\"其逻辑肯定要比负责多项职责简单得多\",{\"1\":{\"2009\":1}}],[\"其下载要花很多时间\",{\"1\":{\"1810\":1}}],[\"其他语言版本\",{\"1\":{\"6746\":1}}],[\"其他不同厂商可以针对同一接口做出不同的实现\",{\"1\":{\"6141\":1}}],[\"其他方法与前面的field和constructor是类似的\",{\"1\":{\"6050\":1}}],[\"其他可查api\",{\"1\":{\"5917\":1}}],[\"其他本地语言实现的\",{\"1\":{\"5603\":1}}],[\"其他设计思想和原则\",{\"1\":{\"2773\":1}}],[\"其他的catch语句块将不会被执行\",{\"1\":{\"4778\":1}}],[\"其他的exception类及其子类都属于可查异常\",{\"1\":{\"4729\":1}}],[\"其他的全部属于对象行为型模式\",{\"1\":{\"2632\":1}}],[\"其他的全部属于对象结构型模式\",{\"1\":{\"2619\":1}}],[\"其他的全部属于对象创建型模式\",{\"1\":{\"2610\":1}}],[\"其他的类\",{\"1\":{\"2196\":1,\"2229\":1}}],[\"其他\",{\"0\":{\"3238\":1},\"1\":{\"2362\":1,\"4831\":1,\"5658\":1}}],[\"其他第三方接入气象站获取数据的问题\",{\"1\":{\"1706\":1}}],[\"其他对象都不能够访问这些状态信息\",{\"1\":{\"1623\":1}}],[\"其运行速度很慢\",{\"1\":{\"1462\":1}}],[\"其次才考虑使用继承关系来实现\",{\"1\":{\"2199\":1}}],[\"其次\",{\"1\":{\"1339\":1,\"2705\":1,\"2802\":1,\"6260\":1}}],[\"其好处是可以使系统在不修改原来代码的情况下引进新的产品\",{\"1\":{\"1218\":1}}],[\"其它任何修饰符都会引起编译器错误\",{\"1\":{\"5743\":1}}],[\"其它任务便会自动终止运行\",{\"1\":{\"3174\":1}}],[\"其它类就不能直接去调用该类实例的\",{\"1\":{\"5454\":1}}],[\"其它都相同不算是重载\",{\"1\":{\"5413\":1}}],[\"其它的异常也可以被重用\",{\"1\":{\"4891\":1}}],[\"其它的类和成员根据实际需要或者期望来编写\",{\"1\":{\"4265\":1}}],[\"其它的部分由具体业务来完成\",{\"1\":{\"634\":1}}],[\"其它块级元素的\",{\"1\":{\"4249\":1}}],[\"其它可选的花括号\",{\"1\":{\"4007\":1}}],[\"其它出现在本文档中的术语将另作说明\",{\"1\":{\"3938\":1}}],[\"其它公司的http接口\",{\"1\":{\"3416\":1}}],[\"其它维度的知识点也会影响到软件的最终交付质量\",{\"1\":{\"2982\":1}}],[\"其它属性\",{\"1\":{\"2539\":1}}],[\"其它克隆对象的也会发生相应的变化\",{\"1\":{\"1804\":1}}],[\"其它有创建到\",{\"1\":{\"1206\":1}}],[\"其中的set\",{\"1\":{\"5965\":1}}],[\"其中的方法也要保证线程安全\",{\"1\":{\"3155\":1}}],[\"其中包括类型参数\",{\"1\":{\"5938\":1,\"5940\":1}}],[\"其中测试方法就是用\",{\"1\":{\"4310\":1,\"4394\":1}}],[\"其中验证码实现语音验证方式\",{\"1\":{\"3477\":1}}],[\"其中id必为主键\",{\"1\":{\"3359\":1}}],[\"其中输出给用户的提示信息要求\",{\"1\":{\"3226\":1}}],[\"其中卫语句示例如下\",{\"1\":{\"3194\":1}}],[\"其中c为输入集合参数\",{\"1\":{\"3107\":1}}],[\"其中成员对象是整体对象的一部分\",{\"1\":{\"2873\":1}}],[\"其中泛化和实现的耦合度相等\",{\"1\":{\"2848\":1}}],[\"其中最常用的是建立软件系统的模型\",{\"1\":{\"2817\":1}}],[\"其中定义了\",{\"1\":{\"2792\":1}}],[\"其中取号\",{\"1\":{\"2636\":1}}],[\"其中用到了设计模式\",{\"1\":{\"2564\":1}}],[\"其中一个方面依赖于另一方面时\",{\"1\":{\"1733\":1}}],[\"其中一个对象的行为发生改变可能会导致一个或者多个其他对象的行为也发生改变\",{\"1\":{\"1667\":1}}],[\"其中\",{\"1\":{\"789\":1,\"1355\":1,\"1398\":1,\"2162\":1,\"2396\":1,\"2637\":1,\"2747\":1,\"2788\":1,\"5030\":1,\"5235\":1,\"5450\":1,\"5533\":1,\"5838\":1,\"6082\":1,\"6115\":1}}],[\"其中有几个角色\",{\"1\":{\"744\":1}}],[\"其组成部分相似\",{\"1\":{\"726\":1}}],[\"其性别\",{\"1\":{\"662\":1}}],[\"其具体结构图如下图所示\",{\"1\":{\"657\":1}}],[\"其别名为包装器\",{\"1\":{\"487\":1}}],[\"其实最具spi思想的应该属于插件开发\",{\"1\":{\"6209\":1}}],[\"其实相当于调用类的无参构造函数\",{\"1\":{\"6065\":1}}],[\"其实就是新new一个\",{\"1\":{\"6083\":1}}],[\"其实就是比较类型完成相等就完了\",{\"1\":{\"6082\":1}}],[\"其实就是返回真实类型\",{\"1\":{\"5923\":1}}],[\"其实就是程序员在编程时\",{\"1\":{\"1990\":1}}],[\"其实这里不仅仅是会去classpath路径下查找\",{\"1\":{\"6218\":1}}],[\"其实这在普通的类继承中也是普遍存在的重写\",{\"1\":{\"5179\":1}}],[\"其实这种方案跟第一种已经很接近\",{\"1\":{\"4447\":1}}],[\"其实不用惊奇\",{\"1\":{\"5170\":1}}],[\"其实在泛型类中\",{\"1\":{\"5113\":1}}],[\"其实在前面的31位高位全部是0\",{\"1\":{\"426\":1}}],[\"其实现方式是在数据库取到statementname对应的sql语句的所有记录\",{\"1\":{\"3398\":1}}],[\"其实现类会马上编译报错\",{\"1\":{\"3041\":1}}],[\"其实现细节对客户透明\",{\"1\":{\"594\":1}}],[\"其实很多应用软件都提供了这项功能\",{\"1\":{\"1620\":1}}],[\"其实\",{\"1\":{\"777\":1}}],[\"其实可以从现实语义进行思考\",{\"1\":{\"647\":1}}],[\"其实它能够执行的秘密就在if的判断条件中\",{\"1\":{\"456\":1}}],[\"其实原理也很简单\",{\"1\":{\"422\":1,\"440\":1}}],[\"其实原理就在于大家熟悉的unicode编码\",{\"1\":{\"405\":1}}],[\"其实都是在刷手机\",{\"1\":{\"138\":1}}],[\"内置支持\",{\"1\":{\"6824\":1}}],[\"内置注解\",{\"0\":{\"4513\":1,\"4517\":1,\"4521\":1}}],[\"内嵌的默认序列化方式\",{\"1\":{\"5668\":1}}],[\"内就不能再创建新的\",{\"1\":{\"2395\":1}}],[\"内\",{\"1\":{\"2395\":2}}],[\"内聚性和耦合性并非独立的\",{\"1\":{\"2776\":1}}],[\"内聚性以及可维护性\",{\"1\":{\"2581\":1}}],[\"内聚\",{\"1\":{\"2173\":1}}],[\"内网通过代理穿透防火墙\",{\"1\":{\"1910\":1}}],[\"内部实现在\",{\"1\":{\"5619\":1}}],[\"内部没有改变\",{\"1\":{\"5286\":1}}],[\"内部使用\",{\"1\":{\"5286\":1,\"5306\":1}}],[\"内部的实现类用impl的后缀与接口区别\",{\"1\":{\"3004\":1}}],[\"内部维护一个当前状态\",{\"1\":{\"2432\":1}}],[\"内部类\",{\"1\":{\"1548\":2,\"3216\":1,\"4062\":1,\"5888\":1}}],[\"内部状态\",{\"1\":{\"1427\":1}}],[\"内部状态指对象共享出来的信息\",{\"1\":{\"1387\":1}}],[\"内部状态和外部状态\",{\"0\":{\"1384\":1},\"1\":{\"1386\":1}}],[\"内部方法无需一致\",{\"1\":{\"798\":1}}],[\"内存分析\",{\"1\":{\"6789\":1}}],[\"内存文件系统\",{\"1\":{\"6511\":1}}],[\"内存不足错误\",{\"1\":{\"4717\":1}}],[\"内存位置\",{\"1\":{\"3541\":1}}],[\"内存爆了\",{\"1\":{\"3204\":1}}],[\"内存中动态生成了代理对象\",{\"1\":{\"1873\":1}}],[\"内存地址\",{\"1\":{\"1781\":1}}],[\"内存\",{\"1\":{\"661\":1,\"1417\":1,\"3305\":1}}],[\"内存卡时需要一个读卡器等\",{\"1\":{\"485\":1}}],[\"内容不是严格要求遵守\",{\"1\":{\"4267\":1}}],[\"内容也可以出现\",{\"1\":{\"4258\":1}}],[\"内容违禁词过滤等风控策略\",{\"1\":{\"3348\":1}}],[\"内容\",{\"1\":{\"42\":1,\"662\":1,\"3208\":1,\"5020\":1}}],[\"讲中文的人同讲英文的人对话时需要一个翻译\",{\"1\":{\"485\":1}}],[\"经过jax\",{\"1\":{\"6579\":1}}],[\"经过下面的改造就可以让它变为现实\",{\"1\":{\"436\":1}}],[\"经常作为参数\",{\"1\":{\"5295\":1}}],[\"经常清理此类标记\",{\"1\":{\"3222\":1}}],[\"经常往里插入的\",{\"1\":{\"3111\":1}}],[\"经常出现两个对象因接口不兼容而不能在一起工作的实例\",{\"1\":{\"485\":1}}],[\"经历了多次大规模一线实战的检验及不断完善\",{\"1\":{\"2982\":1}}],[\"经典的单例模式是进程内唯一的\",{\"1\":{\"2402\":1}}],[\"基础类型集合\",{\"1\":{\"6434\":1,\"6438\":1}}],[\"基础\",{\"1\":{\"5531\":1,\"5537\":1,\"5540\":1,\"5543\":1,\"5673\":1}}],[\"基础知识体系的完备性\",{\"1\":{\"3472\":1}}],[\"基础平台\",{\"1\":{\"3416\":1}}],[\"基类\",{\"1\":{\"2144\":1,\"2149\":1,\"2152\":1}}],[\"基于\",{\"1\":{\"6942\":1}}],[\"基于gwt构建的事件驱动框架\",{\"1\":{\"6676\":1}}],[\"基于组件的web应用框架\",{\"1\":{\"6666\":1}}],[\"基于组件的框架\",{\"1\":{\"6665\":1}}],[\"基于注解处理和编译时源码生成的框架\",{\"1\":{\"6581\":1}}],[\"基于nio实现了阻塞和非阻塞api的web服务器\",{\"1\":{\"6540\":1}}],[\"基于xmpp\",{\"1\":{\"6505\":1}}],[\"基于xml的构建管理工具\",{\"1\":{\"6281\":1}}],[\"基于kafka构建\",{\"1\":{\"6501\":1}}],[\"基于jvm的语言\",{\"0\":{\"6467\":1}}],[\"基于jackson流式api\",{\"1\":{\"6460\":1}}],[\"基于imagemagick或graphicsmagick命令行的图片处理开发库\",{\"1\":{\"6453\":1}}],[\"基于opengl技术开发的3d图形引擎\",{\"1\":{\"6423\":1}}],[\"基于spring\",{\"1\":{\"6375\":1}}],[\"基于soa的理念\",{\"1\":{\"3004\":1}}],[\"基于此我们如何通过反射获取class类对象以及类中的成员变量\",{\"1\":{\"5845\":1}}],[\"基于抽象而非实现编程\",{\"1\":{\"2696\":1}}],[\"基于接口编程各种功能\",{\"1\":{\"2530\":1}}],[\"基于接口而非实现编程能通过接口这样一个中间层\",{\"1\":{\"2778\":1}}],[\"基于接口而非实现编程\",{\"0\":{\"2690\":1},\"1\":{\"2172\":1,\"2693\":1,\"2694\":1,\"2696\":1,\"2706\":1,\"2777\":1}}],[\"基于新的使用方式\",{\"1\":{\"2382\":1}}],[\"基于这个设计思想\",{\"1\":{\"1254\":1}}],[\"基于这个小知识\",{\"1\":{\"427\":1}}],[\"基于类的最小设计原则\",{\"1\":{\"589\":1}}],[\"基本类型boolean\",{\"1\":{\"5824\":1}}],[\"基本类型没有\",{\"1\":{\"5432\":1}}],[\"基本类型对应的缓冲池如下\",{\"1\":{\"5274\":1}}],[\"基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成\",{\"1\":{\"5261\":1}}],[\"基本类型都有对应的包装类型\",{\"1\":{\"5261\":1}}],[\"基本类型\",{\"1\":{\"5233\":1}}],[\"基本上每一个\",{\"1\":{\"6870\":1}}],[\"基本上imagemagick能够支持的图片格式和处理方式都能够处理\",{\"1\":{\"6453\":1}}],[\"基本上功能代码开发完\",{\"1\":{\"4447\":1}}],[\"基本上不需要做维护\",{\"1\":{\"2719\":1}}],[\"基本格式总是可以接受的\",{\"1\":{\"4247\":1}}],[\"基本数据类型不能使用\",{\"1\":{\"3048\":1}}],[\"基本工作原理是\",{\"1\":{\"2932\":1}}],[\"基本构件\",{\"0\":{\"2821\":1}}],[\"基本思想是\",{\"1\":{\"2681\":1}}],[\"基本思路和类的适配器模式相同\",{\"1\":{\"529\":1}}],[\"基本方法\",{\"1\":{\"2654\":1}}],[\"基本介绍\",{\"0\":{\"484\":1,\"1276\":1,\"2000\":1,\"2032\":1,\"2060\":1,\"2102\":1,\"2126\":1,\"2155\":1,\"2806\":1},\"1\":{\"513\":1}}],[\"可扩展且测试完备的http应用程序\",{\"1\":{\"6673\":1}}],[\"可扩展性的本质是找到系统的变化点\",{\"1\":{\"3471\":1}}],[\"可扩展性等\",{\"1\":{\"3461\":1}}],[\"可扩展性下降\",{\"1\":{\"3450\":1}}],[\"可扩展性和可维护性\",{\"1\":{\"2255\":1}}],[\"可扩展性\",{\"1\":{\"2115\":1,\"2575\":1,\"2581\":1,\"2584\":1}}],[\"可扩展性并不是特别好\",{\"1\":{\"1238\":1}}],[\"可伸缩的网络爬虫\",{\"1\":{\"6659\":1}}],[\"可视化跨平台网络图形化操作程序\",{\"1\":{\"6650\":1}}],[\"可视同英文\",{\"1\":{\"2987\":1}}],[\"可发起\",{\"1\":{\"6541\":1}}],[\"可插入式crud\",{\"1\":{\"6513\":1}}],[\"可看做现代版lisp的动态类型语言\",{\"1\":{\"6471\":1}}],[\"可根据需要构建maven\",{\"1\":{\"6402\":1}}],[\"可直接使用的约束满足问题求解程序\",{\"1\":{\"6322\":1}}],[\"可直接封装service接口暴露成rpc接口\",{\"1\":{\"3410\":1}}],[\"可靠的消息代理\",{\"1\":{\"6501\":1}}],[\"可靠的大规模数据处理引擎\",{\"1\":{\"6485\":1}}],[\"可靠地构建代码\",{\"1\":{\"6291\":1}}],[\"可靠性高\",{\"1\":{\"2590\":1}}],[\"可靠性\",{\"1\":{\"2585\":1,\"2586\":1}}],[\"可通过类名\",{\"1\":{\"5824\":1}}],[\"可通过反射去获取注解信息\",{\"1\":{\"4594\":1}}],[\"可变和适用范围\",{\"1\":{\"5687\":1}}],[\"可变\",{\"1\":{\"5302\":1}}],[\"可变性\",{\"1\":{\"5300\":1}}],[\"可变参数必须放置在参数列表的最后\",{\"1\":{\"3042\":1}}],[\"可是如果是常规的两个方法\",{\"1\":{\"5180\":1}}],[\"可是它能直接实现吗\",{\"1\":{\"5166\":1}}],[\"可是它里面实际上已经被我们存放了object类型的对象\",{\"1\":{\"5140\":1}}],[\"可是类型擦除后\",{\"1\":{\"5166\":1}}],[\"可是由于种种原因\",{\"1\":{\"5166\":1}}],[\"可是我们发现\",{\"1\":{\"5161\":1}}],[\"可是\",{\"1\":{\"5143\":1}}],[\"可是一个public的service成员方法或成员变量\",{\"1\":{\"3076\":1}}],[\"可实际上却不是这样的\",{\"1\":{\"5121\":1}}],[\"可查异常虽然是异常状况\",{\"1\":{\"4728\":1}}],[\"可查异常\",{\"1\":{\"4727\":1}}],[\"可查的异常\",{\"0\":{\"4726\":1}}],[\"可被保留到何时\",{\"1\":{\"4593\":1}}],[\"可运行的\",{\"1\":{\"4442\":1}}],[\"可选的\",{\"1\":{\"5664\":1}}],[\"可选地跟随着一个数字\",{\"1\":{\"4192\":1}}],[\"可选花括号的使用\",{\"0\":{\"4005\":1}}],[\"可供公司内部其它应用依赖的库\",{\"1\":{\"3550\":1}}],[\"可重用度高的service\",{\"1\":{\"3309\":1}}],[\"可重复\",{\"1\":{\"3302\":1}}],[\"可重复执行的特点\",{\"1\":{\"3299\":1}}],[\"可快速判断是谁的问题\",{\"1\":{\"3251\":1}}],[\"可使用策略模式来隐藏与算法相关的数据结构\",{\"1\":{\"2559\":1}}],[\"可使用观察者模式松耦合联动双方\",{\"1\":{\"1730\":1}}],[\"可读性可维护性就比较差\",{\"1\":{\"4448\":1}}],[\"可读性可维护性都比较好\",{\"1\":{\"4448\":1}}],[\"可读性太差\",{\"1\":{\"3966\":1}}],[\"可读性和可维护性肯定不是太好\",{\"1\":{\"2759\":1}}],[\"可读性强\",{\"1\":{\"2590\":1}}],[\"可读性\",{\"1\":{\"2576\":1,\"2583\":1}}],[\"可读性差\",{\"1\":{\"2416\":1}}],[\"可读性提高\",{\"1\":{\"2011\":1}}],[\"可执行文件实际上就是代码被翻译成操作系统可理解的一组指令\",{\"1\":{\"2388\":1}}],[\"可执行文件\",{\"1\":{\"2388\":1}}],[\"可测性不友好等问题\",{\"1\":{\"2382\":1}}],[\"可用于生产环境的高度可扩展\",{\"1\":{\"6659\":1}}],[\"可用于修饰\",{\"1\":{\"4590\":1}}],[\"可用来灵活创建意图\",{\"1\":{\"6632\":1}}],[\"可用来快速应用开发\",{\"1\":{\"6513\":1}}],[\"可用性高且没有单点故障\",{\"1\":{\"6392\":1}}],[\"可用性\",{\"1\":{\"3461\":1}}],[\"可用\",{\"1\":{\"2291\":1}}],[\"可乐电视机\",{\"1\":{\"2089\":1,\"2091\":1}}],[\"可动态指定一组对象处理请求\",{\"1\":{\"1986\":1}}],[\"可批假的领导有部门负责人\",{\"1\":{\"1927\":1}}],[\"可达的所有对象\",{\"1\":{\"1786\":1}}],[\"可辅助实现撤销操作\",{\"1\":{\"1744\":1}}],[\"可将同步通讯转为异步通讯\",{\"1\":{\"6497\":1}}],[\"可将每个条件分支移入它们各自的策略类中以代替这些条件语句\",{\"1\":{\"2557\":1}}],[\"可将每个算法封装到策略类中\",{\"1\":{\"2556\":1}}],[\"可将请求沿着这条链传递\",{\"1\":{\"1929\":1}}],[\"可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用\",{\"1\":{\"1733\":1}}],[\"可将该对象恢复到原先保存的状态\",{\"1\":{\"1617\":1}}],[\"可将该语言中的句子表示为一个抽象语法树\",{\"1\":{\"1493\":1}}],[\"可应用的场景比较少\",{\"1\":{\"1464\":1}}],[\"可维护的和高性能负载测试工具\",{\"1\":{\"6631\":1}}],[\"可维护性和可扩展性极差\",{\"1\":{\"3469\":1}}],[\"可维护性上都不友好\",{\"1\":{\"2752\":1}}],[\"可维护性最有效的手段之一\",{\"1\":{\"2696\":1}}],[\"可维护性强\",{\"1\":{\"2590\":1}}],[\"可维护性\",{\"1\":{\"2028\":1}}],[\"可维护\",{\"1\":{\"1253\":1}}],[\"可先设计一个抽象类实现接口\",{\"1\":{\"549\":1}}],[\"可能不够灵活\",{\"1\":{\"5032\":1}}],[\"可能不需要\",{\"1\":{\"3454\":1}}],[\"可能发生异常的结束点\",{\"1\":{\"4947\":1}}],[\"可能发生异常的起始点\",{\"1\":{\"4946\":1}}],[\"可能抛出异常的代码\",{\"1\":{\"4736\":1}}],[\"可能抛出因自动拆箱导致的npe异常\",{\"1\":{\"3188\":1}}],[\"可能包含多个测试类\",{\"1\":{\"4312\":1,\"4396\":1}}],[\"可能无法建立新的连接\",{\"1\":{\"3443\":1}}],[\"可能存在数字格式错误\",{\"1\":{\"3265\":1,\"4849\":1}}],[\"可能由于其它方法抛出异常\",{\"1\":{\"3167\":1}}],[\"可能导致比较时的意外结果\",{\"1\":{\"3081\":1}}],[\"可能导致某些系统有过多的具体命令类\",{\"1\":{\"795\":1}}],[\"可能是需求的改变\",{\"1\":{\"2803\":1}}],[\"可能是在你掌控之外的某些事情发生了变化\",{\"1\":{\"2802\":1}}],[\"可能是无意识\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"可能并不是完全一致的\",{\"1\":{\"2705\":1}}],[\"可能\",{\"1\":{\"2291\":1}}],[\"可能造成职责\",{\"1\":{\"2002\":1}}],[\"可能造成逻辑过于复杂\",{\"1\":{\"1181\":1}}],[\"可能这个系统已经变得非常难以维护和扩展\",{\"1\":{\"1149\":1}}],[\"可能产生大量具体的命令类\",{\"1\":{\"754\":1}}],[\"可能会出现异常\",{\"1\":{\"4774\":1}}],[\"可能会在数据准备或其它前期准备中执行一些相同的命令\",{\"1\":{\"4298\":1}}],[\"可能会有参数\",{\"1\":{\"4143\":1}}],[\"可能会影响后续业务逻辑和造成内存泄露等问题\",{\"1\":{\"3163\":1}}],[\"可能会创建大量的线程\",{\"1\":{\"3159\":1}}],[\"可能会堆积大量的请求\",{\"1\":{\"3159\":2}}],[\"可能会由于职责链的错误设置而导致系统出错\",{\"1\":{\"1941\":1}}],[\"可能会导致需要定义很多具体建造者类来实现这种变化\",{\"1\":{\"727\":1}}],[\"可能会增加系统的复杂性\",{\"1\":{\"495\":1}}],[\"可能效果更佳\",{\"1\":{\"482\":1}}],[\"可以完成这个功能并且能够实现更多的东西\",{\"1\":{\"6984\":1}}],[\"可以随机测试特定代码\",{\"1\":{\"6958\":1}}],[\"可以随时随地地快速运行测试\",{\"1\":{\"4443\":1}}],[\"可以这样用\",{\"1\":{\"6909\":1}}],[\"可以这里理解备忘录模式\",{\"1\":{\"1619\":1}}],[\"可以考虑下在众多的库中选择一个来帮你生成构建器\",{\"1\":{\"6812\":1}}],[\"可以考虑使用迭代器模式解决\",{\"1\":{\"1505\":1}}],[\"可以考虑使用\",{\"1\":{\"1148\":1}}],[\"可以自动生成这些代码\",{\"1\":{\"6799\":1}}],[\"可以一边编程一边听的东西\",{\"1\":{\"6696\":1}}],[\"可以处理类似标签\",{\"1\":{\"6531\":1}}],[\"可以处理非常高的复杂和大量的用户数\",{\"1\":{\"6507\":1}}],[\"可以方便嵌入的消息工具\",{\"1\":{\"6502\":1}}],[\"可以集成使用也可以单独使用\",{\"1\":{\"6454\":1}}],[\"可以于maven或gradle一起配合使用\",{\"1\":{\"6399\":1}}],[\"可以即时重新加载代码与配置的商业软件\",{\"1\":{\"6376\":1}}],[\"可以匹敌dagger的轻量级注入框架\",{\"1\":{\"6365\":1}}],[\"可以免费试用\",{\"1\":{\"6328\":1,\"6335\":1}}],[\"可以执行minizinc模型\",{\"1\":{\"6323\":1}}],[\"可以很方便的用\",{\"1\":{\"6870\":1}}],[\"可以很好地集成atlassian的其他产品\",{\"1\":{\"6327\":1}}],[\"可以很好地与maven依赖管理配合工作\",{\"1\":{\"6292\":1}}],[\"可以很灵活地配置所调用的方法所产生的行为\",{\"1\":{\"4473\":1}}],[\"可以快速\",{\"1\":{\"6291\":1}}],[\"可以快速对一个集合进行去重操作\",{\"1\":{\"3153\":1}}],[\"可以发现\",{\"1\":{\"6265\":1}}],[\"可以发现很多代码甚至类库中都会有捕获异常\",{\"1\":{\"4917\":1}}],[\"可以遍历所有的服务实现者\",{\"1\":{\"6258\":1}}],[\"可以做具体的业务逻辑\",{\"1\":{\"6236\":1}}],[\"可以做报表\",{\"1\":{\"2970\":1}}],[\"可以确定\",{\"1\":{\"6207\":1}}],[\"可以过滤指定的方法\",{\"1\":{\"6099\":1}}],[\"可以当做\",{\"1\":{\"5765\":1}}],[\"可以继承自\",{\"1\":{\"5763\":1}}],[\"可以独立地开发\",{\"1\":{\"5754\":1}}],[\"可以重载\",{\"1\":{\"5701\":1}}],[\"可以修饰变量\",{\"1\":{\"5660\":1}}],[\"可以是任意修饰符的自动\",{\"1\":{\"5962\":1}}],[\"可以是编译时常量\",{\"1\":{\"5473\":1}}],[\"可以是一个空引用\",{\"1\":{\"4475\":1}}],[\"可以是一个类甚至是一整个系统\",{\"1\":{\"4460\":1}}],[\"可以灵活地为一个类添加行为\",{\"1\":{\"5396\":1}}],[\"可以保证相同内容的字符串变量引用同一的内存对象\",{\"1\":{\"5309\":1}}],[\"可以保证资源在使用后被关闭\",{\"1\":{\"4785\":1}}],[\"可以缓存\",{\"1\":{\"5289\":1}}],[\"可以存储任何类型对象\",{\"1\":{\"5131\":1}}],[\"可以指定泛型\",{\"1\":{\"5109\":1}}],[\"可以调用\",{\"1\":{\"4799\":1,\"6099\":1}}],[\"可以调大服务器端的限制\",{\"1\":{\"3231\":1}}],[\"可以\",{\"1\":{\"4783\":1,\"5573\":1,\"5601\":1,\"6960\":1}}],[\"可以用于动态加载class对象\",{\"1\":{\"5886\":1}}],[\"可以用来检查是否为\",{\"1\":{\"6828\":1}}],[\"可以用来编写jvm应用程序的编程语言\",{\"1\":{\"6468\":1}}],[\"可以用来启用框架扩展和替换组件\",{\"1\":{\"6140\":1,\"6141\":1}}],[\"可以用来表示任何可以作为异常抛出的类\",{\"1\":{\"5533\":1}}],[\"可以用来创建泛型类的对象\",{\"1\":{\"5028\":1}}],[\"可以用\",{\"1\":{\"5521\":1}}],[\"可以用统一的异常类型向外暴露\",{\"1\":{\"4756\":1}}],[\"可以用一棵语法树来直观地描述语言中的句子\",{\"1\":{\"1456\":1}}],[\"可以创建一个合适的异常类实例并抛出它\",{\"1\":{\"4753\":1}}],[\"可以创建多个不同等级的产品\",{\"1\":{\"1289\":1}}],[\"可以看出\",{\"1\":{\"6202\":1}}],[\"可以看下截图\",{\"1\":{\"6193\":1}}],[\"可以看这篇文章\",{\"1\":{\"4686\":1}}],[\"可以看到此时迭代器中有两个驱动\",{\"1\":{\"6195\":1}}],[\"可以看到是加载实例化驱动的\",{\"1\":{\"6179\":1}}],[\"可以看到输出结果\",{\"1\":{\"6158\":1}}],[\"可以看到桥方法的参数类型都是object\",{\"1\":{\"5170\":1}}],[\"可以看到黑色的箭头是组合关系\",{\"1\":{\"2885\":1}}],[\"可以看到处理器的类型不同\",{\"1\":{\"571\":1}}],[\"可以对类本身使用\",{\"1\":{\"6837\":1}}],[\"可以对类或类中的成员\",{\"1\":{\"5360\":1}}],[\"可以对包\",{\"1\":{\"4493\":1,\"4495\":1}}],[\"可以对任何具有静态结构和动态行为的系统进行建模\",{\"1\":{\"2817\":1}}],[\"可以包装一个真实的\",{\"1\":{\"4478\":1}}],[\"可以抛出异常\",{\"1\":{\"4294\":1}}],[\"可以转换为\",{\"1\":{\"4197\":1}}],[\"可以转成\",{\"1\":{\"1873\":1}}],[\"可以写出很简洁的代码\",{\"1\":{\"5672\":1}}],[\"可以写在一行的时候\",{\"1\":{\"4247\":1}}],[\"可以写在同一行上\",{\"1\":{\"4143\":1}}],[\"可以写成块状结构\",{\"0\":{\"4113\":1}}],[\"可以准确描述每种场景下该如何进行换行\",{\"1\":{\"4037\":1}}],[\"可以选择开源许可\",{\"1\":{\"6327\":1}}],[\"可以选择提前换行\",{\"1\":{\"4029\":1}}],[\"可以选用访问者模式解决\",{\"1\":{\"2933\":1}}],[\"可以简洁\",{\"0\":{\"4018\":1}}],[\"可以出现一组语句\",{\"1\":{\"4014\":1}}],[\"可以定义一个变量来保存版本\",{\"1\":{\"3432\":1}}],[\"可以由service层输出的封装业务逻辑的对象\",{\"1\":{\"3422\":1,\"3538\":1}}],[\"可以向受害者发起钓鱼攻击\",{\"1\":{\"3344\":1}}],[\"可以设定自动回滚机制\",{\"1\":{\"3316\":1}}],[\"可以设计为\",{\"1\":{\"912\":1}}],[\"可以省略\",{\"1\":{\"3206\":1,\"4227\":1}}],[\"可以省掉对空判断\",{\"1\":{\"777\":1}}],[\"可以先交往一段时间看看\",{\"1\":{\"3195\":1}}],[\"可以直接通过类名来访问它\",{\"1\":{\"5484\":1}}],[\"可以直接用try\",{\"1\":{\"4783\":1}}],[\"可以直接使用一级宏观错误码\",{\"1\":{\"3260\":1}}],[\"可以直接使用api\",{\"1\":{\"3177\":1}}],[\"可以直接调用pojo的tostring\",{\"1\":{\"3062\":1}}],[\"可以明确解决问题所需的抽象概念\",{\"1\":{\"2792\":1}}],[\"可以复用类\",{\"1\":{\"2791\":1}}],[\"可以应用在很多设计场景中\",{\"1\":{\"2762\":1}}],[\"可以解决这个问题\",{\"1\":{\"6968\":1}}],[\"可以解决代码复用的问题\",{\"1\":{\"2723\":1}}],[\"可以解决单例隐藏类之间依赖关系的问题\",{\"1\":{\"2382\":1}}],[\"可以制作出不同口味的豆浆\",{\"1\":{\"2667\":1}}],[\"可以延迟到子类中实现\",{\"1\":{\"2636\":1}}],[\"可以有效提升性能\",{\"1\":{\"3287\":1}}],[\"可以有效加快正则匹配速度\",{\"1\":{\"3239\":1}}],[\"可以有选择的进行重写\",{\"1\":{\"2467\":1}}],[\"可以有一个或多个行为\",{\"1\":{\"2433\":1}}],[\"可以抽奖的状态\",{\"1\":{\"2454\":1}}],[\"可以抽奖\",{\"1\":{\"2443\":1,\"2454\":1}}],[\"可以抽取出共性创建过程\",{\"1\":{\"732\":1}}],[\"可以理解为编程语言中的接口或者抽象类\",{\"1\":{\"2694\":1}}],[\"可以理解操作系统为进程分配的内存存储区\",{\"1\":{\"2389\":1}}],[\"可以理解成是我们气象局的网站\",{\"1\":{\"1700\":1}}],[\"可以优化和共享资源的访问\",{\"1\":{\"2265\":1}}],[\"可以避免对资源的多重占用\",{\"1\":{\"2264\":1}}],[\"可以提高程序员的思维能力\",{\"1\":{\"2588\":1}}],[\"可以提高软件的可维护性\",{\"1\":{\"2138\":1}}],[\"可以提高代码的可复用性\",{\"1\":{\"2136\":1}}],[\"可以预防外来变更的扩散\",{\"1\":{\"2044\":1}}],[\"可以显著降低对其他功能的影响\",{\"1\":{\"2012\":1}}],[\"可以动态地改变链内的成员或者调动它们的次序\",{\"1\":{\"1935\":1}}],[\"可以动态地扩展其功能\",{\"1\":{\"876\":1}}],[\"可以根据这个类名进行加载实例化\",{\"1\":{\"6144\":1}}],[\"可以根据外部进行进行类型转换\",{\"1\":{\"6087\":1}}],[\"可以根据需要进行水平扩展\",{\"1\":{\"6507\":1}}],[\"可以根据需要添加其他参数\",{\"1\":{\"5031\":1}}],[\"可以根据需要增加新的请求处理类\",{\"1\":{\"1934\":1}}],[\"可以根据自己的需求定义注解\",{\"1\":{\"4503\":1}}],[\"可以根据实际需要\",{\"1\":{\"4063\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"34\":1}}],[\"可以利用原型模式简化对象的创建过程\",{\"1\":{\"1802\":1}}],[\"可以让你更快地发现代码中的错误\",{\"1\":{\"6987\":1}}],[\"可以让你少写很多样板代码\",{\"1\":{\"6958\":1}}],[\"可以让你的用户使用他们喜欢的方式去处理异常\",{\"1\":{\"6817\":1}}],[\"可以让编译器帮忙检查是否满足上面的两个限制条件\",{\"1\":{\"5410\":1}}],[\"可以让第三方接入\",{\"1\":{\"1697\":1}}],[\"可以让if和else中的语句都能执行\",{\"1\":{\"449\":1}}],[\"可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象\",{\"1\":{\"5468\":1}}],[\"可以使用公有的\",{\"1\":{\"5368\":1}}],[\"可以使用\",{\"1\":{\"4483\":1,\"5400\":1,\"5516\":1,\"5519\":1,\"5520\":1,\"5574\":1,\"5595\":1}}],[\"可以使用如下方式来避免sum的npe问题\",{\"1\":{\"3382\":1}}],[\"可以使用count\",{\"1\":{\"3370\":1}}],[\"可以使用warn日志级别来记录用户输入参数错误的情况\",{\"1\":{\"3295\":1}}],[\"可以使用try\",{\"1\":{\"3270\":1}}],[\"可以使用其他方案比如springbeanutils\",{\"1\":{\"3240\":1}}],[\"可以使用instant代替date\",{\"1\":{\"3162\":1}}],[\"可以使用访问者模式方便地实现对该类型所有数据结构的不同操作\",{\"1\":{\"2974\":1}}],[\"可以使用策略模式\",{\"1\":{\"2560\":1}}],[\"可以使用多种策略\",{\"1\":{\"2536\":1,\"2538\":1}}],[\"可以使用深克隆方式保存对象的状态\",{\"1\":{\"1744\":1}}],[\"可以使用户能够比较方便地回到某个历史的状态\",{\"1\":{\"1657\":1}}],[\"可以使用命令模式来进行设计\",{\"1\":{\"741\":1}}],[\"可以从备忘录对象里获取原来的数据进行恢复操作\",{\"1\":{\"1619\":1}}],[\"可以从缓冲池里拿\",{\"1\":{\"1376\":1}}],[\"可以找到meta\",{\"1\":{\"6168\":1}}],[\"可以找\",{\"1\":{\"1569\":2}}],[\"可以获取到变量的值\",{\"1\":{\"1487\":1}}],[\"可以把这些信息封装到一个对象中\",{\"1\":{\"1446\":1}}],[\"可以点不同口味的披萨\",{\"1\":{\"1236\":1}}],[\"可以决定在什么时候创建哪一个产品的实例\",{\"1\":{\"1175\":1}}],[\"可以帮我们更好的\",{\"1\":{\"1147\":1}}],[\"可以控制类的数量\",{\"1\":{\"913\":1}}],[\"可以通过剖析确定哪些模块影响了系统的性能\",{\"1\":{\"5756\":1}}],[\"可以通过使用\",{\"1\":{\"5401\":1}}],[\"可以通过反射\",{\"1\":{\"5232\":1}}],[\"可以通过反射实现\",{\"1\":{\"5189\":1}}],[\"可以通过独立配置线程池\",{\"1\":{\"3447\":1}}],[\"可以通过访问者来定义整个对象结构通用的功能\",{\"1\":{\"2936\":1}}],[\"可以通过聚合\",{\"1\":{\"2107\":1}}],[\"可以通过代理对象来间接访问\",{\"1\":{\"1918\":1}}],[\"可以通过\",{\"1\":{\"1809\":1}}],[\"可以通过其子类扩展具体构件的功能\",{\"1\":{\"889\":1}}],[\"可以通过命令模式解耦请求与实现\",{\"1\":{\"798\":1}}],[\"可以实现与完全使用泛型参数一样的效果\",{\"1\":{\"5130\":1}}],[\"可以实现单例\",{\"1\":{\"2328\":1}}],[\"可以实现不同效果\",{\"1\":{\"880\":1}}],[\"可以实现宏命令\",{\"1\":{\"750\":1}}],[\"可以更容易被程序员理解\",{\"1\":{\"5755\":1}}],[\"可以更加轻松地实现线程唯一单例\",{\"1\":{\"2396\":1}}],[\"可以更加精细地控制产品的创建过程\",{\"1\":{\"724\":1}}],[\"可以更好的实现管理操作\",{\"1\":{\"844\":1}}],[\"可以将每个域都当成\",{\"1\":{\"5446\":1}}],[\"可以将公用的部分提取出来\",{\"1\":{\"4298\":1}}],[\"可以将接口和实现相分离\",{\"1\":{\"2695\":1}}],[\"可以将其提取出来并集中到一个公共父类中以避免代码重复\",{\"1\":{\"2687\":1}}],[\"可以将已有对象纳入新对象中\",{\"1\":{\"2219\":1}}],[\"可以将\",{\"1\":{\"915\":1}}],[\"可以将命令对象存储起来\",{\"1\":{\"803\":1}}],[\"可以将系统中的相关操作抽象成命令\",{\"1\":{\"757\":1}}],[\"可以将原有的一段串行逻辑改写成判断逻辑中的不同分支\",{\"1\":{\"448\":1}}],[\"可以在多个线程中安全地使用\",{\"1\":{\"5297\":1}}],[\"可以在方法前加上这个注解\",{\"1\":{\"4296\":1}}],[\"可以在方法级别保持单一职责原则\",{\"1\":{\"2030\":1}}],[\"可以在\",{\"1\":{\"4109\":1,\"5352\":1}}],[\"可以在左花括号开始之后立即使用右花括号结束\",{\"1\":{\"4019\":1}}],[\"可以在前端输出到type=\",{\"1\":{\"3228\":1}}],[\"可以在父类中实现\",{\"1\":{\"2636\":1}}],[\"可以在不修改原代码的情况下\",{\"1\":{\"2498\":1}}],[\"可以在内存动态的创建对象\",{\"1\":{\"1813\":1}}],[\"可以在目标对象实现的基础上\",{\"1\":{\"1811\":1}}],[\"可以在类的内部对产品族中相关联的多等级产品共同管理\",{\"1\":{\"1283\":1}}],[\"可以在现有命令的基础上\",{\"1\":{\"752\":1}}],[\"可以在二者中间定义一个适配器将二者连接起来\",{\"1\":{\"657\":1}}],[\"可以减少子类的个数\",{\"1\":{\"635\":1}}],[\"可以充电~~\",{\"1\":{\"522\":1,\"542\":1}}],[\"可以买个多功能转换插头\",{\"1\":{\"509\":1}}],[\"可以不精致\",{\"1\":{\"148\":1}}],[\"跌打损伤酒一起使用\",{\"1\":{\"482\":1}}],[\"搭配红花油\",{\"1\":{\"482\":1}}],[\"写的最好的部分是\",{\"1\":{\"6845\":1}}],[\"写的是数字的\",{\"1\":{\"3012\":1}}],[\"写具体的实现me\",{\"1\":{\"6233\":1}}],[\"写入\",{\"1\":{\"5605\":1}}],[\"写单元测试的时机不外乎三种情况\",{\"1\":{\"4445\":1}}],[\"写法类似于\",{\"1\":{\"4081\":1,\"4082\":1}}],[\"写一个静态内部类\",{\"1\":{\"2320\":1}}],[\"写出不一样的拉轰代码\",{\"1\":{\"481\":1}}],[\"写作日期为\",{\"1\":{\"113\":1}}],[\"并基于jvm运行\",{\"1\":{\"6474\":1}}],[\"并实例化\",{\"1\":{\"6266\":1}}],[\"并实现\",{\"1\":{\"906\":1,\"2151\":1}}],[\"并实现它们的默认行为\",{\"1\":{\"818\":1}}],[\"并进行实例化\",{\"1\":{\"6262\":1}}],[\"并把实例化后的类缓存到providers对象中\",{\"1\":{\"6261\":1}}],[\"并把addr开头的4字节内存空间分两次进复制到addr2的内存空间中\",{\"1\":{\"474\":1}}],[\"并建立一个内部模型来记录它所找到的每个插件的信息\",{\"1\":{\"6215\":1}}],[\"并找到文件中的实现类的名字\",{\"1\":{\"6191\":1}}],[\"并初始化了一个迭代器\",{\"1\":{\"6188\":1}}],[\"并添加进相应的实现类内容就好\",{\"1\":{\"6161\":1}}],[\"并作用到其他实例身上\",{\"1\":{\"6125\":1}}],[\"并存入缓存\",{\"1\":{\"6079\":1}}],[\"并使用其限定类型\",{\"1\":{\"5097\":1}}],[\"并使得子系统使用起来更加容易\",{\"1\":{\"1100\":1}}],[\"并重复上面的操作\",{\"1\":{\"4955\":1}}],[\"并与catch语句块逐一匹配\",{\"1\":{\"4778\":1}}],[\"并对不同类型的异常做出不同的处理\",{\"1\":{\"4768\":1}}],[\"并可利用web界面进行管理\",{\"1\":{\"6505\":1}}],[\"并可用元注解对自定义注解进行注解\",{\"1\":{\"4503\":1}}],[\"并可以根据需要增加新的处理方法\",{\"1\":{\"2930\":1}}],[\"并帮助我们改进设计方案等等\",{\"1\":{\"4435\":1}}],[\"并为这个方法注解\",{\"1\":{\"4298\":1}}],[\"并为该接口中每个方法提供一个默认实现\",{\"1\":{\"549\":1}}],[\"并能提高质量\",{\"1\":{\"4281\":1}}],[\"并增加\",{\"1\":{\"4122\":1}}],[\"并需要被\",{\"1\":{\"3969\":1}}],[\"并需要表示复杂的处理流程\",{\"1\":{\"3455\":1}}],[\"并隔离变化点\",{\"1\":{\"3471\":1}}],[\"并针对性地设计降级和应急预案\",{\"1\":{\"3456\":1}}],[\"并沉淀成为文档\",{\"1\":{\"3450\":1}}],[\"并默认被所有的子项目继承\",{\"1\":{\"3436\":1}}],[\"并throw\",{\"1\":{\"3418\":1}}],[\"并造成短信平台资源浪费\",{\"1\":{\"3345\":1}}],[\"并得到预期的结果\",{\"1\":{\"3312\":1,\"3314\":1}}],[\"并得到相关信息\",{\"1\":{\"1697\":1}}],[\"并记得及时删除这些观察日志\",{\"1\":{\"3294\":1}}],[\"并记录下来\",{\"1\":{\"1050\":1}}],[\"并提高程序健壮性\",{\"1\":{\"4706\":1}}],[\"并提示给用户\",{\"1\":{\"3267\":1}}],[\"并提供一个抽象的\",{\"1\":{\"2151\":1}}],[\"并发函数库\",{\"1\":{\"6651\":1}}],[\"并发修改同一记录时\",{\"1\":{\"3173\":1}}],[\"并发处理\",{\"0\":{\"3154\":1}}],[\"并发与多线程\",{\"1\":{\"2983\":1}}],[\"并清晰地说明采用的新接口或者新服务是什么\",{\"1\":{\"3043\":1}}],[\"并用newinstance方法将类实例化\",{\"1\":{\"6261\":1}}],[\"并用对应的图形类表示\",{\"1\":{\"2848\":1}}],[\"并用它替换掉项目中所有的\",{\"1\":{\"2702\":1}}],[\"并最终到达框架的过程中\",{\"1\":{\"2793\":1}}],[\"并封装为\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"并降低软件的复杂度\",{\"1\":{\"2570\":1}}],[\"并改变它\",{\"1\":{\"2551\":1}}],[\"并分别封装起来\",{\"1\":{\"2489\":1}}],[\"并委派给不同的对象对这些算法进行管理\",{\"1\":{\"2489\":1}}],[\"并负责具体状态的切换\",{\"1\":{\"2432\":1}}],[\"并负责创建\",{\"1\":{\"2260\":1}}],[\"并反序列化成对象\",{\"1\":{\"2403\":1}}],[\"并不要求接口和实现接口的类具有\",{\"1\":{\"5384\":1}}],[\"并不实现引入\",{\"1\":{\"3436\":1}}],[\"并不马上返回\",{\"1\":{\"3271\":1,\"4930\":1}}],[\"并不能确定哪个方法一定是被优先调用到\",{\"1\":{\"3063\":1}}],[\"并不能解决我们之前提到的问题\",{\"1\":{\"2380\":1}}],[\"并不会复用已有对象\",{\"1\":{\"3046\":1}}],[\"并不推荐使用\",{\"1\":{\"2350\":1}}],[\"并不是一种逻辑顺序\",{\"1\":{\"3999\":1}}],[\"并不是arraylist本身\",{\"1\":{\"3100\":1}}],[\"并不是强制性标准\",{\"1\":{\"2820\":1}}],[\"并不是轻量级的\",{\"1\":{\"2260\":1}}],[\"并不是要求完全没有依赖关系\",{\"1\":{\"2197\":1}}],[\"并加上有效的javadoc注释\",{\"1\":{\"3003\":1}}],[\"并加快对象访问速度\",{\"1\":{\"2348\":1}}],[\"并加入到\",{\"1\":{\"1709\":1}}],[\"并允许节点自身决定是否进行请求处理或转发\",{\"1\":{\"1947\":1}}],[\"并向链头的具体处理者对象提交请求\",{\"1\":{\"1946\":1}}],[\"并没有发挥它的全部潜力\",{\"1\":{\"6958\":1}}],[\"并没有涉及到spi的东西\",{\"1\":{\"6176\":1}}],[\"并没有具体的实现\",{\"1\":{\"6166\":1}}],[\"并没有退出for循环\",{\"1\":{\"6103\":1}}],[\"并没有将实现留给了java\",{\"1\":{\"6060\":1}}],[\"并没有实现集合的修改方法\",{\"1\":{\"3108\":1}}],[\"并没有\",{\"1\":{\"1876\":1}}],[\"并复制每个引用数据类型成员变量所引用的对象\",{\"1\":{\"1786\":1}}],[\"并将其缓存起来\",{\"1\":{\"6068\":1}}],[\"并将其状态保存起来\",{\"1\":{\"1744\":1}}],[\"并将它们添加到\",{\"1\":{\"5444\":1}}],[\"并将不太具体的\",{\"1\":{\"4901\":1}}],[\"并将这组算法封装到一系列的策略类里面\",{\"1\":{\"2504\":1}}],[\"并将每个算法封装起来\",{\"1\":{\"2488\":1,\"2630\":1}}],[\"并将接入方\",{\"1\":{\"1704\":1}}],[\"并通知\",{\"1\":{\"1718\":1}}],[\"并通过\",{\"1\":{\"4487\":1}}],[\"并通过访问命令对象来执行相关请求\",{\"1\":{\"762\":1}}],[\"并通过调用接收者的功能来完成命令要执行的操作\",{\"1\":{\"760\":1}}],[\"并通过组合关系调用实现化角色中的业务方法\",{\"1\":{\"600\":1}}],[\"并由管理者进行管理\",{\"1\":{\"1624\":1}}],[\"并在此方法中初始化所有需要测试的参数对\",{\"1\":{\"4390\":1,\"4407\":1}}],[\"并在其中为第二个环节中声明的几个变量赋值\",{\"1\":{\"4389\":1}}],[\"并在该对象之外保存这个状态\",{\"1\":{\"1617\":1}}],[\"并在保持真实对象的类结构不变的前提下\",{\"1\":{\"885\":1}}],[\"并\",{\"1\":{\"1489\":1,\"1605\":1}}],[\"并解析\",{\"1\":{\"1489\":1}}],[\"并放入到池中\",{\"1\":{\"1429\":2}}],[\"并访问具体享元的相关方法\",{\"1\":{\"1403\":1}}],[\"并未给出具体的实现代码\",{\"1\":{\"1359\":1}}],[\"并返回一个包装后的新对象\",{\"1\":{\"4478\":1}}],[\"并返回\",{\"1\":{\"1320\":1,\"1429\":1,\"6219\":1}}],[\"并直接去调用子系统\",{\"1\":{\"1122\":1}}],[\"并定义一个解释器\",{\"1\":{\"1070\":1,\"1455\":1}}],[\"并给具体构件对象添加附加的责任\",{\"1\":{\"890\":1}}],[\"并包含具体构件的实例\",{\"1\":{\"889\":1}}],[\"并包含一个对实现化对象的引用\",{\"1\":{\"599\":1}}],[\"并且把assertissatisfied\",{\"1\":{\"6964\":1}}],[\"并且会被调用\",{\"1\":{\"6963\":1}}],[\"并且很容易测试\",{\"1\":{\"6929\":1}}],[\"并且支持\",{\"1\":{\"6881\":1}}],[\"并且支持存储到数据库\",{\"1\":{\"6481\":1}}],[\"并且可以断言调用这段代码的行为\",{\"1\":{\"6960\":1}}],[\"并且可以用忽略的方式来处理打断程序的数据\",{\"1\":{\"6907\":1}}],[\"并且可以从异常中恢复\",{\"1\":{\"5534\":1}}],[\"并且可读性更强\",{\"1\":{\"6905\":1}}],[\"并且可读性更高\",{\"1\":{\"6854\":1}}],[\"并且给出你的变量\",{\"1\":{\"6847\":1}}],[\"并且更加简单\",{\"1\":{\"6795\":1}}],[\"并且使用继承自org\",{\"1\":{\"6207\":1}}],[\"并且知道这些变量在运行时不能改变\",{\"1\":{\"5664\":1}}],[\"并且需要知道\",{\"1\":{\"5603\":1}}],[\"并且需要有一个工厂类加以控制\",{\"1\":{\"1443\":1}}],[\"并且还需要类型转换\",{\"1\":{\"5468\":1}}],[\"并且还会带来url维护不一致的问题\",{\"1\":{\"3233\":1}}],[\"并且从\",{\"1\":{\"5396\":1}}],[\"并且type也匹配\",{\"1\":{\"4953\":1}}],[\"并且异常符合处理者的from和to节点\",{\"1\":{\"4953\":1}}],[\"并且描述抛出异常的场景\",{\"1\":{\"4895\":1}}],[\"并且转载这些类的时间开销也越小\",{\"1\":{\"4875\":1}}],[\"并且资源可以正常关闭\",{\"1\":{\"4862\":1}}],[\"并且它会给你不可变的对象和非常好用的接口\",{\"1\":{\"6811\":1}}],[\"并且它只在编译时有效\",{\"1\":{\"4516\":1}}],[\"并且它可以追踪方法调用\",{\"1\":{\"4473\":1}}],[\"并且它保持最新\",{\"1\":{\"4442\":1}}],[\"并且它必须在运行时根据状态改变它的行为时\",{\"1\":{\"2481\":1}}],[\"并且应该被修正为\",{\"1\":{\"4255\":1}}],[\"并且这个类可以在运行时才加载进来\",{\"1\":{\"5517\":1}}],[\"并且这四种类型的块标签不会与空的描述一起出现\",{\"1\":{\"4251\":1}}],[\"并且这些第三方\",{\"1\":{\"6871\":1}}],[\"并且这些行为在这个类的操作中以多个条件语句的形式出现\",{\"1\":{\"2557\":1}}],[\"并且这些分支决定于对象的状态时\",{\"1\":{\"2482\":1}}],[\"并且删除任何的撇号\",{\"1\":{\"4197\":1}}],[\"并且不用\",{\"1\":{\"6926\":1}}],[\"并且不允许定义为\",{\"1\":{\"5380\":1}}],[\"并且不应该以常量的风格命名\",{\"1\":{\"4189\":1}}],[\"并且不会随环境的改变而改变\",{\"1\":{\"1387\":1}}],[\"并且常量的方法是没有副作用的\",{\"1\":{\"4178\":1}}],[\"并且每个注解都列在自己的一行上\",{\"1\":{\"4135\":1}}],[\"并且\",{\"1\":{\"4041\":1,\"5180\":1,\"5286\":1,\"6802\":1}}],[\"并且该块的左花括号前面有一个换行符\",{\"1\":{\"4014\":1}}],[\"并且该类只提供一个取得其对象实例的方法\",{\"1\":{\"2259\":1}}],[\"并且强烈反对在字符串和注释之外使用\",{\"1\":{\"3954\":1}}],[\"并且焦点顺序需符合自然操作逻辑\",{\"1\":{\"3475\":1}}],[\"并且以t1\",{\"1\":{\"3389\":1}}],[\"并且操作列在多个表中存在时\",{\"1\":{\"3388\":1}}],[\"并且放在索引组合顺序的最后\",{\"1\":{\"3372\":1}}],[\"并且远程执行\",{\"1\":{\"3346\":1}}],[\"并且非交互式的\",{\"1\":{\"3303\":1}}],[\"并且进行网络多机备份\",{\"1\":{\"3285\":1}}],[\"并且对超出最大长度的处理逻辑也有差异\",{\"1\":{\"3230\":1}}],[\"并且对象的状态大部分可以外部化时\",{\"1\":{\"1439\":1}}],[\"并且取反逻辑写法一般都存在对应的正向逻辑写法\",{\"1\":{\"3203\":1}}],[\"并且根据外部特征进行分组\",{\"1\":{\"3156\":1}}],[\"并且方法前的点号一起换行\",{\"1\":{\"3031\":1}}],[\"并且是\",{\"1\":{\"3943\":1}}],[\"并且是整个应用的基础常量\",{\"1\":{\"3003\":1}}],[\"并且是写死在工厂类代码中的\",{\"1\":{\"1333\":1}}],[\"并且能够校验对这个\",{\"1\":{\"4472\":1}}],[\"并且能够领会设计模式的精妙和带来的\",{\"1\":{\"2566\":1}}],[\"并且能紧随着\",{\"1\":{\"4052\":1}}],[\"并且能维护得了\",{\"1\":{\"2772\":1}}],[\"并且实现逻辑是一样的\",{\"1\":{\"2737\":1}}],[\"并且熟练的写了出来\",{\"1\":{\"2567\":1}}],[\"并且发现了一些新的模式挺好用的\",{\"1\":{\"2565\":1}}],[\"并且一旦没有处理某个状态\",{\"1\":{\"2462\":1}}],[\"并且在\",{\"1\":{\"5775\":1}}],[\"并且在需要修改\",{\"1\":{\"5760\":1}}],[\"并且在需要的情况下进行状态切换\",{\"1\":{\"2434\":1}}],[\"并且在调试的时候可以不影响其他模块\",{\"1\":{\"5755\":1}}],[\"并且在少数情况中可以使用下划线\",{\"1\":{\"4162\":1}}],[\"并且在错误信息上带上原有的第三方错误码\",{\"1\":{\"3259\":1}}],[\"并且在加锁方法与try代码块之间没有任何可能抛出异常的方法调用\",{\"1\":{\"3167\":1}}],[\"并且在造出的过程添加新的功能\",{\"1\":{\"1862\":1,\"1896\":1}}],[\"并且具备良好的扩展力\",{\"1\":{\"2417\":1}}],[\"并且释放对对象的加锁\",{\"1\":{\"2404\":1}}],[\"并且将不同之处分离为新的操作\",{\"1\":{\"2687\":1}}],[\"并且将不同状态的行为分割开来\",{\"1\":{\"2422\":1}}],[\"并且将老进程地址空间的所有内容\",{\"1\":{\"2389\":1}}],[\"并且将目标对象传递给代理对象\",{\"1\":{\"1905\":1}}],[\"并且父类修改后\",{\"1\":{\"2099\":1}}],[\"并且通过拷贝这些原型\",{\"1\":{\"1739\":1}}],[\"并且加入到\",{\"1\":{\"1605\":2}}],[\"并且有一个统一的二维码\",{\"1\":{\"1503\":1}}],[\"并且语言中的句子可以表示为一个抽象语法树的时候\",{\"1\":{\"1499\":1}}],[\"并且就是通过工厂方法模式生成对象的\",{\"1\":{\"1447\":1}}],[\"并且得到两者的依赖关系\",{\"1\":{\"1335\":1}}],[\"并且沿着这条链传递请求\",{\"1\":{\"1040\":1}}],[\"并且提供一个全局访问点\",{\"1\":{\"962\":1}}],[\"并且随着扩展功能的增多\",{\"1\":{\"885\":1}}],[\"并且保证最后能够正常执行\",{\"1\":{\"448\":1}}],[\"并调用对应方法\",{\"1\":{\"781\":2}}],[\"像这样使用\",{\"1\":{\"6961\":1}}],[\"像这样\",{\"1\":{\"6871\":1,\"6933\":1}}],[\"像是文件结构\",{\"1\":{\"6216\":1}}],[\"像下面这样的代码就可以自动实现线程安全\",{\"1\":{\"6926\":1}}],[\"像下面这样绕一个弯子\",{\"1\":{\"465\":1}}],[\"像下面形式的引用传递是不允许的\",{\"1\":{\"5136\":1}}],[\"像一个盛东西的器皿\",{\"1\":{\"2922\":1}}],[\"像数据库连接池\",{\"1\":{\"1375\":1}}],[\"像\",{\"1\":{\"1349\":1,\"6803\":1}}],[\"像医生一样\",{\"1\":{\"154\":1}}],[\"来加载驱动了\",{\"1\":{\"6172\":1}}],[\"来加载驱动\",{\"1\":{\"6164\":1}}],[\"来看执行流程\",{\"1\":{\"6055\":1}}],[\"来引用\",{\"1\":{\"5775\":1}}],[\"来使用\",{\"1\":{\"5765\":1}}],[\"来解决了类型擦除和多态的冲突\",{\"1\":{\"5171\":1}}],[\"来解析\",{\"1\":{\"42\":1}}],[\"来声明这是一个泛型方法\",{\"1\":{\"5027\":1}}],[\"来代替它们\",{\"1\":{\"4470\":1}}],[\"来编写\",{\"1\":{\"4266\":1}}],[\"来编写单元测试\",{\"1\":{\"3313\":1}}],[\"来判断是否为null值\",{\"1\":{\"3383\":1}}],[\"来替代count\",{\"1\":{\"3380\":1}}],[\"来替代继承\",{\"1\":{\"530\":1}}],[\"来保存\",{\"1\":{\"3284\":1}}],[\"来保证\",{\"1\":{\"2383\":1}}],[\"来表达x小于\",{\"1\":{\"3203\":2}}],[\"来表示\",{\"1\":{\"2852\":1,\"2867\":2,\"2874\":1,\"2880\":1,\"2894\":1,\"2900\":1}}],[\"来排查问题时\",{\"1\":{\"3157\":1}}],[\"来定义对象的顺序\",{\"1\":{\"5642\":1}}],[\"来定义\",{\"1\":{\"2993\":1}}],[\"来处理比较方便\",{\"1\":{\"2930\":1}}],[\"来提醒你\",{\"1\":{\"4296\":1}}],[\"来提高我们软件开发的水平\",{\"1\":{\"2820\":1}}],[\"来提供遗留系统的比较清晰简单的接口\",{\"1\":{\"1149\":1}}],[\"来具体选择该用继承还是组合\",{\"1\":{\"2742\":1}}],[\"来详细讲解一下这条设计原则\",{\"1\":{\"2721\":1}}],[\"来存储对象\",{\"1\":{\"2396\":1}}],[\"来负责\",{\"1\":{\"2383\":1}}],[\"来说明注释掉代码的理由\",{\"1\":{\"3247\":1}}],[\"来说\",{\"1\":{\"2341\":1,\"6891\":1}}],[\"来说不是最小接口\",{\"1\":{\"2037\":1,\"2053\":1}}],[\"来降低类与类之间的依赖\",{\"1\":{\"2226\":1}}],[\"来绘制不同的图形\",{\"1\":{\"2144\":1,\"2149\":1}}],[\"来对不同的采购请求处理\",{\"1\":{\"1962\":1}}],[\"来转换字节码并生成新的类\",{\"1\":{\"1882\":1}}],[\"来调用\",{\"1\":{\"1702\":1,\"1716\":2}}],[\"来管理所有用到的外部依赖\",{\"1\":{\"6864\":1}}],[\"来管理同事对象\",{\"1\":{\"1580\":1}}],[\"来管理具体享元\",{\"1\":{\"1402\":1}}],[\"来实现\",{\"1\":{\"1570\":1,\"1718\":1}}],[\"来区分这两种不同类型的对象\",{\"1\":{\"1343\":1}}],[\"来封装对象复杂的创建过程\",{\"1\":{\"1324\":1}}],[\"来创建产品\",{\"1\":{\"1229\":1}}],[\"来创建对象\",{\"1\":{\"1161\":1,\"1357\":1,\"1362\":1}}],[\"来自google的构建工具\",{\"1\":{\"6291\":1}}],[\"来自百度百科\",{\"1\":{\"4432\":1}}],[\"来自官网https\",{\"1\":{\"4367\":1}}],[\"来自同一机房的调用\",{\"1\":{\"3156\":1}}],[\"来自\",{\"1\":{\"1090\":1}}],[\"来包裹真实对象\",{\"1\":{\"885\":1}}],[\"来完成这项功能\",{\"1\":{\"5167\":1}}],[\"来完成\",{\"1\":{\"703\":1}}],[\"来命名的\",{\"1\":{\"574\":1}}],[\"来进行判断是哪一种子类然后执行\",{\"1\":{\"571\":1}}],[\"来在java中操作一把内存\",{\"1\":{\"462\":1}}],[\"釜底抽薪\",{\"0\":{\"461\":1}}],[\"伍\",{\"0\":{\"461\":1}}],[\"让你可以用很简单的方法\",{\"1\":{\"6901\":1}}],[\"让你的同事迷惑去吧\",{\"1\":{\"459\":1}}],[\"让类库和程序更安全\",{\"1\":{\"4815\":1}}],[\"让jvm碰到oom场景时输出dump信息\",{\"1\":{\"3445\":1}}],[\"让二方库使用者去依赖具体版本号\",{\"1\":{\"3439\":1}}],[\"让访问者可以访问\",{\"1\":{\"2962\":1}}],[\"让整个系统有效运转\",{\"1\":{\"2772\":1}}],[\"让不同的人负责不同的模块\",{\"1\":{\"2772\":1}}],[\"让代码结构更加清晰\",{\"1\":{\"2764\":1}}],[\"让代码更加清晰\",{\"1\":{\"1324\":1}}],[\"让依赖关系变得清晰\",{\"1\":{\"2759\":1}}],[\"让我们的焦点不至于过于发散\",{\"1\":{\"2754\":1}}],[\"让鸵鸟\",{\"1\":{\"2728\":1}}],[\"让麻雀\",{\"1\":{\"2728\":1}}],[\"让它抛出\",{\"1\":{\"2725\":1}}],[\"让所有子类都会飞了\",{\"1\":{\"2523\":1}}],[\"让他们之间可以互相替换\",{\"1\":{\"2489\":1}}],[\"让子类去实现即可\",{\"1\":{\"2151\":1}}],[\"让子系统内部的模块更易维护和扩展\",{\"1\":{\"1146\":1}}],[\"让请求在处理链中能进行传递与被处理\",{\"1\":{\"1947\":1}}],[\"让父亲和母亲造出新的对象\",{\"1\":{\"1896\":1}}],[\"让一个原型对象克隆自己\",{\"1\":{\"1753\":1}}],[\"让\",{\"1\":{\"1718\":1}}],[\"让闹钟发出消息\",{\"1\":{\"1605\":1}}],[\"让外部代码透明地访问聚合的内部数据\",{\"1\":{\"1516\":1}}],[\"让程序具有优秀的扩展性\",{\"1\":{\"2970\":1}}],[\"让程序具有更高的效率和扩展性\",{\"1\":{\"1770\":1}}],[\"让程序具有良好的扩展性\",{\"1\":{\"1493\":1}}],[\"让程序具有搞好的扩展性\",{\"1\":{\"617\":1}}],[\"让应用告知\",{\"1\":{\"1333\":1}}],[\"让每个工厂类都不至于过于复杂\",{\"1\":{\"1254\":1}}],[\"让各个工厂子类自己实现\",{\"1\":{\"1248\":1}}],[\"让新系统与\",{\"1\":{\"1149\":1}}],[\"让高层模块可以更加容易地间接调用这些子系统的功能\",{\"1\":{\"1096\":1}}],[\"让客户端能够以一种的方式对其进行处理\",{\"1\":{\"1006\":1}}],[\"让客户按目标接口的格式访问适配者\",{\"1\":{\"501\":1}}],[\"让对象之间的调用关系更加灵活\",{\"1\":{\"742\":1}}],[\"让抽象部分和实现部分独立开来\",{\"1\":{\"633\":1}}],[\"让原本接口不兼容的类可以兼容\",{\"1\":{\"503\":1}}],[\"让原本因接口不匹配不能一起工作的两个类可以协同工作\",{\"1\":{\"487\":1}}],[\"让书籍的知识慢慢渗透\",{\"1\":{\"144\":1}}],[\"用作数据挖掘的算法集合\",{\"1\":{\"6492\":1}}],[\"用作大数据统计的分析引擎\",{\"1\":{\"6491\":1}}],[\"用简单的脚本就能设置pipeline\",{\"1\":{\"6335\":1}}],[\"用几句话总结反射的实现原理\",{\"1\":{\"6123\":1}}],[\"用在方法签名上\",{\"1\":{\"5704\":1}}],[\"用在方法签名中\",{\"1\":{\"4740\":1}}],[\"用做\",{\"1\":{\"5290\":1}}],[\"用别的数据进行计算\",{\"1\":{\"4810\":1}}],[\"用反射接口获取注解信息\",{\"1\":{\"4645\":1}}],[\"用定义好的三个注解类分别去注解一个方法\",{\"1\":{\"4597\":1}}],[\"用这个引用调用泛型方法\",{\"1\":{\"5134\":1}}],[\"用这些注解标明后编译器就会进行检查\",{\"1\":{\"4501\":1}}],[\"用这种方式把一段整体的逻辑拆成两块\",{\"1\":{\"459\":1}}],[\"用代码处理提供了一个追踪异常的选项\",{\"1\":{\"4371\":1}}],[\"用例遗漏\",{\"1\":{\"4296\":1}}],[\"用例图\",{\"1\":{\"2811\":1}}],[\"用空行去创建字段之间的\",{\"1\":{\"4063\":1}}],[\"用explain的结果\",{\"1\":{\"3373\":1}}],[\"用主键来对应\",{\"1\":{\"3358\":1}}],[\"用词似乎精准\",{\"1\":{\"3251\":1}}],[\"用法如下\",{\"1\":{\"3234\":1}}],[\"用基本数据类型接收有npe风险\",{\"1\":{\"3058\":1}}],[\"用菱形表示\",{\"1\":{\"2922\":1}}],[\"用线条连接两个类\",{\"1\":{\"2914\":1,\"2918\":1}}],[\"用组合代替继承\",{\"1\":{\"2749\":1}}],[\"用起来也很清晰\",{\"1\":{\"2700\":1}}],[\"用设计模式来组织代码显然更好\",{\"1\":{\"2592\":1}}],[\"用行为类组合\",{\"1\":{\"2549\":1}}],[\"用以封装环境对象中的特定状态所对应的行为\",{\"1\":{\"2433\":1}}],[\"用以屏蔽内部子系统的细节\",{\"1\":{\"1124\":1}}],[\"用各个不同的类进行表示\",{\"1\":{\"2417\":1}}],[\"用静态方法实现一下\",{\"1\":{\"2378\":1}}],[\"用实现扩展细节\",{\"1\":{\"2129\":1}}],[\"用抽象构建框架\",{\"1\":{\"2129\":1}}],[\"用原型实例指定创建对象的种类\",{\"1\":{\"1739\":1}}],[\"用原型模式生成对象就很高效\",{\"1\":{\"1738\":1}}],[\"用一个调用这些新的操作的模板方法来替换这些不同的代码\",{\"1\":{\"2687\":1}}],[\"用一个\",{\"1\":{\"1566\":1}}],[\"用一致的方法遍历集合元素\",{\"1\":{\"1506\":1}}],[\"用唯一标识码判断\",{\"1\":{\"1440\":1}}],[\"用\",{\"1\":{\"1347\":1,\"1440\":1,\"1880\":1,\"1881\":1,\"4305\":1,\"4770\":1}}],[\"用工厂模式来创建究竟有什么好处呢\",{\"1\":{\"1161\":1}}],[\"用来像不戴套做爱那么爽的工具\",{\"1\":{\"6974\":1}}],[\"用来模拟静态\",{\"1\":{\"6633\":1}}],[\"用来同步异步操作的dsl\",{\"1\":{\"6629\":1}}],[\"用来部署应用程序的服务器\",{\"1\":{\"6611\":1}}],[\"用来高效处理序列化的函数库\",{\"1\":{\"6605\":1}}],[\"用来进行科学测量和单位的一组类\",{\"1\":{\"6590\":1}}],[\"用来进行特定平台开发的原生开发库\",{\"1\":{\"6526\":1}}],[\"用来构建web应用程序\",{\"1\":{\"6576\":1}}],[\"用来开发响应式应用程序的开发库\",{\"1\":{\"6570\":1}}],[\"用来编写稳定且可读的ui测试\",{\"1\":{\"6638\":1}}],[\"用来编写分布式容错并发事件驱动应用程序的工具和运行时\",{\"1\":{\"6382\":1}}],[\"用来编写分布式容错应用的开发库和框架\",{\"1\":{\"6381\":1}}],[\"用来编程创建pdf文件\",{\"1\":{\"6559\":1}}],[\"用来帮助创建pdf文件的资源\",{\"1\":{\"6554\":1}}],[\"用来专门处理文本的函数库\",{\"1\":{\"6529\":1}}],[\"用来处理混乱数据的工具\",{\"1\":{\"6514\":1}}],[\"用来辅助面向组合开发\",{\"1\":{\"6415\":1}}],[\"用来创建restful\",{\"1\":{\"6575\":1}}],[\"用来创建和操作pdf的工具集\",{\"1\":{\"6556\":1}}],[\"用来创建解析器\",{\"1\":{\"6313\":1}}],[\"用来创建复杂的复合对象\",{\"1\":{\"972\":1}}],[\"用来获取数据库连接\",{\"1\":{\"6177\":1}}],[\"用来实现一个接口\",{\"1\":{\"5784\":1}}],[\"用来实现文法中与非终结符相关的操作\",{\"1\":{\"1470\":1}}],[\"用来实现文法中与终结符相关的操作\",{\"1\":{\"1469\":1}}],[\"用来描述继承关系\",{\"1\":{\"5780\":1}}],[\"用来捕获处理一个潜在的空指针异常\",{\"1\":{\"4939\":1}}],[\"用来确定这个类怎么运行的\",{\"1\":{\"4314\":1,\"4398\":1}}],[\"用来表示\",{\"1\":{\"5533\":1}}],[\"用来表示类之间的\",{\"1\":{\"2723\":1}}],[\"用来表示部分以及整体层次\",{\"1\":{\"808\":1}}],[\"用来存储代码和数据\",{\"1\":{\"2389\":1}}],[\"用来生产同一等级结构中的固定产品\",{\"1\":{\"1165\":1}}],[\"用来生产同一等级结构中的任意产品\",{\"1\":{\"1163\":1}}],[\"用来访问子系统中的一群接口\",{\"1\":{\"1123\":1}}],[\"用来掩人耳目了\",{\"1\":{\"410\":1}}],[\"用于构建快速\",{\"1\":{\"6673\":1}}],[\"用于分析网站内容的函数库\",{\"1\":{\"6658\":1}}],[\"用于分隔命名上的逻辑组件\",{\"1\":{\"4175\":1}}],[\"用于处理web应用程序不同层次间通讯的框架\",{\"1\":{\"6664\":1}}],[\"用于处理安全\",{\"1\":{\"6597\":1}}],[\"用于处理一些测试后续工作\",{\"1\":{\"4301\":1}}],[\"用于搜索和分析\",{\"1\":{\"6592\":1}}],[\"用于科学计算\",{\"1\":{\"6588\":1}}],[\"用于科学计算和分析的函数库\",{\"1\":{\"6587\":1}}],[\"用于商业用途时需要许可证\",{\"1\":{\"6559\":1}}],[\"用于长时间运行服务和定时任务\",{\"1\":{\"6302\":1}}],[\"用于新的服务提供者安装到正在运行的java虚拟机中的情况\",{\"1\":{\"6258\":1}}],[\"用于设置字段的值\",{\"1\":{\"5965\":1}}],[\"用于检测包住的语句块\",{\"1\":{\"5706\":1}}],[\"用于引用类型的比较时\",{\"1\":{\"5685\":1}}],[\"用于基本类型的变量比较时\",{\"1\":{\"5684\":1}}],[\"用于泛型推断\",{\"1\":{\"5670\":1}}],[\"用于一些工具在编译\",{\"1\":{\"5542\":1}}],[\"用于修饰成员\",{\"1\":{\"5363\":1}}],[\"用于声明该方法可能抛出的异常\",{\"1\":{\"4740\":1}}],[\"用于抛出异常\",{\"1\":{\"4739\":1}}],[\"用于捕获异常\",{\"1\":{\"4737\":1}}],[\"用于监听\",{\"1\":{\"4736\":1}}],[\"用于controller层注解\",{\"1\":{\"4693\":1}}],[\"用于对代码进行说明\",{\"1\":{\"4493\":1,\"4495\":1}}],[\"用于模拟实际的对象\",{\"1\":{\"4472\":1}}],[\"用于使用参数化功能\",{\"1\":{\"4320\":1}}],[\"用于兼容junit3\",{\"1\":{\"4318\":1,\"4402\":1}}],[\"用于编写和运行测试\",{\"1\":{\"4278\":1}}],[\"用于编写和运行可重复的自动化测试\",{\"1\":{\"4274\":1,\"4276\":1}}],[\"用于确认被测试的代码确实抛出了预期类型的异常\",{\"1\":{\"4232\":1}}],[\"用于产生小驼峰形式\",{\"1\":{\"4202\":1}}],[\"用于产生大驼峰形式\",{\"1\":{\"4201\":1}}],[\"用于参数和局部变量的注解没有特定的格式化规则\",{\"1\":{\"4146\":1}}],[\"用于参数和局部变量的注解\",{\"0\":{\"4145\":1}}],[\"用于字段的注解也出现在文档之后\",{\"1\":{\"4143\":1}}],[\"用于字段的注解\",{\"0\":{\"4142\":1}}],[\"用于方法和构造方法的注解的使用规则与\",{\"1\":{\"4138\":1}}],[\"用于方法和构造方法的注解\",{\"0\":{\"4137\":1}}],[\"用于类的注解出现在文档之后\",{\"1\":{\"4135\":1}}],[\"用于类的注解\",{\"0\":{\"4134\":1}}],[\"用于类型的注解出现在被标记的类型之前\",{\"1\":{\"4132\":1}}],[\"用于类型的注解\",{\"0\":{\"4131\":1}}],[\"用于登录校验和请求拦截的验证码均需提供图形验证以外的其它方式\",{\"1\":{\"3476\":1}}],[\"用于表示一类对象与另一类对象之间的联系\",{\"1\":{\"2864\":1}}],[\"用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务\",{\"1\":{\"2602\":1}}],[\"用于描述如何将类或对象按某种布局组成更大的结构\",{\"1\":{\"2601\":1}}],[\"用于描述\",{\"1\":{\"2600\":1}}],[\"用于创建相关或有依赖关系的对象簇\",{\"1\":{\"1277\":1}}],[\"用于继承和实现抽象构件\",{\"1\":{\"820\":1}}],[\"用于继承或实现抽象构件\",{\"1\":{\"819\":1}}],[\"用于撤销\",{\"1\":{\"781\":2}}],[\"用于初始化每个按钮\",{\"1\":{\"777\":1}}],[\"用户手册\",{\"1\":{\"6911\":1}}],[\"用户无需知道对象内部的细节\",{\"1\":{\"5752\":1}}],[\"用户扬声器异常\",{\"1\":{\"3803\":1}}],[\"用户听筒异常\",{\"1\":{\"3801\":1}}],[\"用户麦克风异常\",{\"1\":{\"3799\":1}}],[\"用户相机异常\",{\"1\":{\"3797\":1}}],[\"用户相机未授权\",{\"1\":{\"3784\":1}}],[\"用户设备异常\",{\"1\":{\"3794\":1}}],[\"用户通讯录未授权\",{\"1\":{\"3792\":1}}],[\"用户位置信息未授权\",{\"1\":{\"3790\":1}}],[\"用户文件未授权\",{\"1\":{\"3788\":1}}],[\"用户图片库未授权\",{\"1\":{\"3786\":1}}],[\"用户摄像头未授权\",{\"1\":{\"3782\":1}}],[\"用户隐私未签署\",{\"1\":{\"3780\":1}}],[\"用户隐私未授权\",{\"1\":{\"3777\":1}}],[\"用户安装版本已过期\",{\"1\":{\"3769\":1}}],[\"用户安装版本过高\",{\"1\":{\"3767\":1}}],[\"用户安装版本过低\",{\"1\":{\"3254\":1,\"3765\":1}}],[\"用户安装版本与系统\",{\"1\":{\"3763\":1}}],[\"用户当前版本异常\",{\"1\":{\"3760\":1}}],[\"用户上传压缩文件太\",{\"1\":{\"3758\":1}}],[\"用户上传视频太大\",{\"1\":{\"3756\":1}}],[\"用户上传图片太大\",{\"1\":{\"3754\":1}}],[\"用户上传文件太大\",{\"1\":{\"3752\":1}}],[\"用户上传文件类型不\",{\"1\":{\"3750\":1}}],[\"用户上传文件异常\",{\"1\":{\"3747\":1}}],[\"用户配额已用光\",{\"1\":{\"3744\":1}}],[\"用户内存空间不足\",{\"1\":{\"3740\":1}}],[\"用户磁盘空间不足\",{\"1\":{\"3738\":1}}],[\"用户资源异常\",{\"1\":{\"3733\":1}}],[\"用户重复请求\",{\"1\":{\"3731\":1}}],[\"用户操作请等待\",{\"1\":{\"3725\":1}}],[\"用户操作异常\",{\"1\":{\"3710\":1}}],[\"用户支付超时\",{\"1\":{\"3712\":1}}],[\"用户支付超时等问题\",{\"1\":{\"3254\":1}}],[\"用户订单号为空\",{\"1\":{\"3678\":1}}],[\"用户请求服务异常\",{\"1\":{\"3718\":1}}],[\"用户请求参数错误\",{\"1\":{\"3669\":1}}],[\"用户请求传入的任何参数必须做有效性验证\",{\"1\":{\"3334\":1}}],[\"用户签名异常\",{\"1\":{\"3665\":1}}],[\"用户访问被拦截\",{\"1\":{\"3651\":1}}],[\"用户访问虚拟硬盘时实际访问的是网盘空间\",{\"1\":{\"1920\":1}}],[\"用户授权申请被拒\",{\"1\":{\"3643\":1}}],[\"用户验证码尝试次数\",{\"1\":{\"3634\":1}}],[\"用户验证码错误\",{\"1\":{\"3632\":1}}],[\"用户登录已过期\",{\"1\":{\"3630\":1}}],[\"用户登录异常\",{\"1\":{\"3610\":1}}],[\"用户未获得第三方登\",{\"1\":{\"3628\":1}}],[\"用户未同意隐私协议\",{\"1\":{\"3566\":1}}],[\"用户面容识别失败\",{\"1\":{\"3626\":1}}],[\"用户指纹识别失败\",{\"1\":{\"3624\":1}}],[\"用户身份校验失败\",{\"1\":{\"3622\":1}}],[\"用户密码错误\",{\"1\":{\"3618\":1}}],[\"用户账户已作废\",{\"1\":{\"3616\":1}}],[\"用户账户被冻结\",{\"1\":{\"3614\":1}}],[\"用户账户不存在\",{\"1\":{\"3612\":1}}],[\"用户基本信息校验失\",{\"1\":{\"3602\":1}}],[\"用户证件类型未选择\",{\"1\":{\"3594\":1}}],[\"用户证件异常\",{\"1\":{\"3592\":1}}],[\"用户名包含特殊字符\",{\"1\":{\"3576\":1}}],[\"用户名包含敏感词\",{\"1\":{\"3574\":1}}],[\"用户名已存在\",{\"1\":{\"3572\":1}}],[\"用户名校验失败\",{\"1\":{\"3570\":1}}],[\"用户注册错误\",{\"1\":{\"3563\":1}}],[\"用户注册的场景中\",{\"1\":{\"3267\":1}}],[\"用户输入内容非法\",{\"1\":{\"3702\":1}}],[\"用户输入密码错误次\",{\"1\":{\"3620\":1}}],[\"用户输入的sql参数严格使用参数绑定或者metadata字段值限定\",{\"1\":{\"3333\":1}}],[\"用户输入参数的小于\",{\"1\":{\"3232\":1}}],[\"用户敏感数据禁止直接展示\",{\"1\":{\"3332\":1}}],[\"用户端错误\",{\"1\":{\"3260\":1,\"3560\":1}}],[\"用户\",{\"1\":{\"3226\":1,\"3742\":1,\"3771\":1,\"3773\":1,\"3775\":1,\"3805\":1}}],[\"用户提示信息四个部分\",{\"1\":{\"3226\":1}}],[\"用户申请某些网盘空间时\",{\"1\":{\"1920\":1}}],[\"用户只需要知道具体工厂的名称就可得到所要的产品\",{\"1\":{\"1220\":1}}],[\"用户可以用统一的接口使用组合结构中的所有对象的场合\",{\"1\":{\"872\":1}}],[\"用户使用不同的具体建造者即可得到不同的产品对象\",{\"1\":{\"723\":1}}],[\"用户不需要知道内部的具体构建细节\",{\"1\":{\"665\":1}}],[\"用户收到反馈结果\",{\"1\":{\"506\":1}}],[\"用户调用适配器转化出来的目标接口方法\",{\"1\":{\"505\":1}}],[\"用计算机访问照相机的\",{\"1\":{\"485\":1}}],[\"用直流电的笔记本电脑接交流电源时需要一个电源适配器\",{\"1\":{\"485\":1}}],[\"用unsafe搞起来也是信手拈来\",{\"1\":{\"472\":1}}],[\"惊不惊喜\",{\"1\":{\"456\":1}}],[\"运行结果\",{\"1\":{\"4982\":1}}],[\"运行期保留\",{\"1\":{\"4594\":1}}],[\"运行时类型识别\",{\"1\":{\"5819\":1}}],[\"运行时多态有三个条件\",{\"1\":{\"5771\":1}}],[\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\",{\"1\":{\"5770\":1}}],[\"运行时进行解析和使用\",{\"1\":{\"5542\":1}}],[\"运行时常量池\",{\"1\":{\"5315\":1,\"5322\":1}}],[\"运行时想办法\",{\"1\":{\"5206\":1}}],[\"运行时潜在的风险需要我们自己来承担\",{\"1\":{\"5203\":1}}],[\"运行时会把对象当做a的实例看待\",{\"1\":{\"5037\":1}}],[\"运行时通过代码里标识的元数据动态处理\",{\"1\":{\"4499\":1}}],[\"运行时动态处理\",{\"1\":{\"4499\":1}}],[\"运行时异常的特点是java编译器不会检查它\",{\"1\":{\"4723\":1}}],[\"运行时异常和编译时异常\",{\"1\":{\"4720\":1}}],[\"运行时异常等场景返回null的情况\",{\"1\":{\"3275\":1}}],[\"运行时异常\",{\"1\":{\"3110\":1,\"4721\":1,\"5717\":1}}],[\"运行而添加的对象\",{\"1\":{\"4475\":1}}],[\"运行一次\",{\"1\":{\"4301\":1}}],[\"运行一次这个方法\",{\"1\":{\"4298\":1}}],[\"运行后控制台打印了\",{\"1\":{\"454\":1}}],[\"运算\",{\"0\":{\"5330\":1}}],[\"运算符可以执行隐式类型转换\",{\"1\":{\"5346\":1}}],[\"运算符的优先级表\",{\"1\":{\"4098\":1}}],[\"运算符的左右必须有一个空格\",{\"1\":{\"3025\":1}}],[\"运算符与下文一起换行\",{\"1\":{\"3030\":1}}],[\"运算结果\",{\"1\":{\"1479\":1,\"1491\":1}}],[\"运用共享技术来有效地支持大量细粒度对象的复用\",{\"1\":{\"2617\":1}}],[\"运用共享技术有效地支持大量细粒度的对象\",{\"1\":{\"1374\":1}}],[\"运筹帷幄之中\",{\"1\":{\"1051\":1}}],[\"运动是治愈一切的良药\",{\"1\":{\"140\":1}}],[\"判断方法是否带可变参数\",{\"1\":{\"6044\":1}}],[\"判断class对象是否是表示一个接口\",{\"1\":{\"5871\":1}}],[\"判断每个关键域是否相等\",{\"1\":{\"5439\":1}}],[\"判断引用的对象是否等价\",{\"1\":{\"5433\":1}}],[\"判断两个变量是否引用同一个对象\",{\"1\":{\"5433\":1}}],[\"判断两个值是否相等\",{\"1\":{\"5432\":1}}],[\"判断该程序元素上是否包含指定类型的注解\",{\"1\":{\"4626\":1}}],[\"判断表达式\",{\"1\":{\"3520\":1}}],[\"判断剩余奖品数量等于\",{\"1\":{\"3190\":1}}],[\"判断作为中断或退出的条件\",{\"1\":{\"3190\":1}}],[\"判断所有集合内部的元素是否为空\",{\"1\":{\"3090\":1}}],[\"判断订单的状态\",{\"1\":{\"2459\":1}}],[\"判断逻辑\",{\"1\":{\"2417\":1,\"2418\":1}}],[\"判断语句块\",{\"1\":{\"2301\":1}}],[\"判断能否处理本次请求\",{\"1\":{\"1945\":1}}],[\"判断\",{\"1\":{\"1537\":1,\"2316\":1}}],[\"判断是否还有下一个元素\",{\"1\":{\"1537\":1}}],[\"判断条件\",{\"1\":{\"450\":1}}],[\"判断一个int型数字的正负时明明可以写成这样\",{\"1\":{\"417\":1}}],[\"有几种方法可以获取到\",{\"1\":{\"6995\":1}}],[\"有两大主要阵营\",{\"1\":{\"6940\":1}}],[\"有两个子类\",{\"1\":{\"5775\":1}}],[\"有许多关于字符串的操作和创建\",{\"1\":{\"6897\":1}}],[\"有如\",{\"1\":{\"6828\":1}}],[\"有基于代码的和基于\",{\"1\":{\"6821\":1}}],[\"有常见的\",{\"1\":{\"6814\":1}}],[\"有影响力的书\",{\"0\":{\"6688\":1}}],[\"有免费版\",{\"1\":{\"6333\":1}}],[\"有关组织或者公司定义标准\",{\"1\":{\"6225\":1}}],[\"有关这一部分的内容\",{\"1\":{\"2784\":1}}],[\"有效地调节性能\",{\"1\":{\"5756\":1}}],[\"有效数字+指数\",{\"1\":{\"3048\":1}}],[\"有三种存在方式\",{\"0\":{\"5720\":1}}],[\"有三条数据\",{\"1\":{\"4964\":1}}],[\"有什么关系\",{\"0\":{\"5647\":1}}],[\"有什么用\",{\"0\":{\"5647\":1}}],[\"有什么区别\",{\"0\":{\"5645\":1}}],[\"有什么不同\",{\"0\":{\"5641\":1}}],[\"有没有做过同时使用\",{\"1\":{\"6946\":1}}],[\"有没有可能两个不相等的对象有相同的\",{\"0\":{\"5635\":1}}],[\"有没有一种方法\",{\"1\":{\"449\":1}}],[\"有永久代\",{\"1\":{\"5322\":1,\"5325\":1}}],[\"有限制类型擦除\",{\"1\":{\"5081\":1}}],[\"有多慢\",{\"1\":{\"4980\":1}}],[\"有多重实现方式\",{\"1\":{\"571\":1}}],[\"有别于junit3的使用\",{\"1\":{\"4685\":1}}],[\"有哪些单元测试相关的概念\",{\"0\":{\"4457\":1}}],[\"有差别\",{\"1\":{\"4327\":1}}],[\"有且仅有一个顶级类的声明\",{\"0\":{\"3995\":1}}],[\"有且只有一个的顶级\",{\"1\":{\"3975\":1}}],[\"有且不可变\",{\"1\":{\"3532\":1}}],[\"有缺陷的底层数据结构容易导致系统风险上升\",{\"1\":{\"3450\":1}}],[\"有可能\",{\"1\":{\"5636\":1}}],[\"有可能是try部分\",{\"1\":{\"4969\":1}}],[\"有可能造成事故\",{\"1\":{\"3392\":1}}],[\"有可能造成系统创建大量同类线程而导致消耗完内存或者\",{\"1\":{\"3158\":1}}],[\"有可能导致死循环的结果\",{\"1\":{\"3341\":1}}],[\"有依赖\",{\"1\":{\"3305\":1}}],[\"有依赖关系的类之间\",{\"1\":{\"2784\":1}}],[\"有选择地输出info日志\",{\"1\":{\"3294\":1}}],[\"有异常也要做try\",{\"1\":{\"3270\":1}}],[\"有序性是指遍历的结果是按某种比较规则依次排列的\",{\"1\":{\"3152\":1}}],[\"有义务去考证过时方法的新实现是什么\",{\"1\":{\"3044\":1}}],[\"有很棒的\",{\"1\":{\"6850\":1}}],[\"有很多\",{\"1\":{\"6946\":1}}],[\"有很多的使用示例\",{\"1\":{\"6911\":1}}],[\"有很多不错的替代工具\",{\"1\":{\"6863\":1}}],[\"有很多不同的情况需要考虑\",{\"1\":{\"4844\":1}}],[\"有很多内容文字是无法表达的\",{\"1\":{\"2820\":1}}],[\"有很长时间的编程经验\",{\"1\":{\"2564\":1}}],[\"有经验的开发者都会尽量选择支持未来任何可能变更的方式\",{\"1\":{\"2804\":1}}],[\"有的是由java虚拟机自动进行捕获处理\",{\"1\":{\"4817\":1}}],[\"有的需要程序员进行捕获处理或声明抛出\",{\"1\":{\"4817\":1}}],[\"有的时候\",{\"1\":{\"2745\":1}}],[\"有的书上说\",{\"1\":{\"1320\":1}}],[\"有各种鸭子\",{\"1\":{\"2515\":1}}],[\"有流程图来决定\",{\"1\":{\"2467\":1}}],[\"有审核\",{\"1\":{\"2458\":1}}],[\"有利于扩展与维护\",{\"1\":{\"3465\":1}}],[\"有利于维护和各个类的日志处理方式统一\",{\"1\":{\"3280\":1}}],[\"有利于向前兼容\",{\"1\":{\"3237\":1}}],[\"有利于代码阅读时重点关注\",{\"1\":{\"3191\":1}}],[\"有利于阅读者快速理解架构设计思想\",{\"1\":{\"3001\":1}}],[\"有利于程序的扩展\",{\"1\":{\"2424\":1}}],[\"有利于系统的解耦\",{\"1\":{\"668\":1}}],[\"有何替代解决方案\",{\"0\":{\"2377\":1}}],[\"有助于后面实现多态机制\",{\"1\":{\"5677\":1}}],[\"有助于精确定位问题\",{\"1\":{\"3306\":1}}],[\"有助于\",{\"1\":{\"2174\":1}}],[\"有校长审批\",{\"1\":{\"1959\":1}}],[\"有些现代的jvm实现会将它们优化掉\",{\"1\":{\"4857\":1}}],[\"有些正则写法验证普通用户输入没有问题\",{\"1\":{\"3341\":1}}],[\"有些数值会产生精度损失\",{\"1\":{\"3229\":1}}],[\"有些集合对象存在多种不同的元素\",{\"1\":{\"2928\":1}}],[\"有些\",{\"1\":{\"2925\":1}}],[\"有些人认为单例是一种反模式\",{\"1\":{\"2350\":1}}],[\"有些人早餐可能会吃煎饼\",{\"1\":{\"875\":1}}],[\"有些书也将\",{\"1\":{\"1877\":1}}],[\"有\",{\"1\":{\"1727\":1,\"4473\":1,\"6898\":1}}],[\"有观察者来实现\",{\"1\":{\"1716\":1}}],[\"有数组\",{\"1\":{\"1505\":1}}],[\"有客户希望以微信公众号的形式发布\",{\"1\":{\"1411\":1}}],[\"有客户人要求以博客的形式发布\",{\"1\":{\"1410\":1}}],[\"有客户要求以新闻的形式发布\",{\"1\":{\"1409\":1}}],[\"有照明灯\",{\"1\":{\"768\":1}}],[\"有时我们会从\",{\"1\":{\"4756\":1}}],[\"有时候可能用了就可以卸载了\",{\"1\":{\"6121\":1}}],[\"有时候我们想暂时不运行某些测试方法\",{\"1\":{\"4296\":1}}],[\"有时候我们不想实现\",{\"1\":{\"554\":1}}],[\"有时候会有多种合理的方式用于将英语短语转换为驼峰形式\",{\"1\":{\"4195\":1}}],[\"有时会面临要创建大量相同或相似对象实例的问题\",{\"1\":{\"1372\":1}}],[\"有时要同多个部门联系\",{\"1\":{\"1093\":1}}],[\"有时想用一些现存的组件\",{\"1\":{\"876\":1}}],[\"有时桥接\",{\"1\":{\"657\":1}}],[\"有一些\",{\"1\":{\"6925\":1}}],[\"有一定的性能损耗\",{\"1\":{\"3287\":1}}],[\"有一定局限性\",{\"1\":{\"524\":1}}],[\"有一套标准来描述设计\",{\"1\":{\"2820\":1}}],[\"有一条非常经典的设计原则\",{\"1\":{\"2721\":1}}],[\"有一个自己的项目\",{\"1\":{\"6864\":1}}],[\"有一个不相等则返回false\",{\"1\":{\"6082\":1}}],[\"有一个稳定\",{\"1\":{\"5672\":1}}],[\"有一个学校\",{\"1\":{\"2186\":1}}],[\"有一个原则为优先使用组合\",{\"1\":{\"646\":1}}],[\"有人居然会在注释里下了毒\",{\"1\":{\"400\":1}}],[\"接住异常\",{\"1\":{\"4985\":1}}],[\"接住一个异常对象\",{\"1\":{\"4984\":1}}],[\"接单有人支付失效\",{\"1\":{\"2465\":1}}],[\"接单\",{\"1\":{\"2465\":1}}],[\"接着看第三步\",{\"1\":{\"6189\":1}}],[\"接着看loadinitialdrivers方法\",{\"1\":{\"6179\":1}}],[\"接着看下面的解析\",{\"1\":{\"6174\":1}}],[\"接着写else的业务逻辑代码\",{\"1\":{\"3193\":1}}],[\"接着\",{\"1\":{\"2389\":1}}],[\"接着使用反射\",{\"1\":{\"442\":1}}],[\"接入方的\",{\"1\":{\"1718\":1}}],[\"接入方\",{\"1\":{\"1718\":1}}],[\"接下来可以在resources下新建meta\",{\"1\":{\"6154\":1}}],[\"接下来就只需调用其相应构造器的\",{\"1\":{\"6085\":1}}],[\"接下来我们看下异常使用的基础\",{\"1\":{\"4734\":1}}],[\"接下来我们通过这个分类角度来理解注解\",{\"1\":{\"4504\":1}}],[\"接下来\",{\"1\":{\"1329\":1,\"2350\":1,\"4322\":1,\"4652\":1,\"6222\":1}}],[\"接下来要介绍的这个技巧就有点厉害了\",{\"1\":{\"448\":1}}],[\"接收泛型数组\",{\"1\":{\"5062\":1}}],[\"接收可变参数\",{\"1\":{\"5062\":1}}],[\"接收\",{\"1\":{\"2144\":1,\"2149\":1,\"2152\":1,\"5595\":1}}],[\"接收接口\",{\"1\":{\"2089\":1}}],[\"接收到一个采购请求后\",{\"1\":{\"1961\":1}}],[\"接收消息\",{\"1\":{\"1601\":1,\"2075\":1}}],[\"接收方与抽象命令呈现弱耦合\",{\"1\":{\"798\":1}}],[\"接收者元素\",{\"1\":{\"2953\":2}}],[\"接收者的action\",{\"1\":{\"766\":1}}],[\"接收者\",{\"1\":{\"761\":1,\"766\":1}}],[\"接口在jdk8之前不能有静态方法\",{\"1\":{\"5697\":1}}],[\"接口在jdk8之前都是抽象方法\",{\"1\":{\"5696\":1}}],[\"接口没有普通成员变量\",{\"1\":{\"5694\":1}}],[\"接口没有构造方法\",{\"1\":{\"5693\":1}}],[\"接口与抽象类\",{\"0\":{\"5691\":1}}],[\"接口用于定义\",{\"1\":{\"5675\":1}}],[\"接口用于定义对象的自然顺序\",{\"1\":{\"5642\":1}}],[\"接口又调用了\",{\"1\":{\"5459\":1}}],[\"接口只能public\",{\"1\":{\"5695\":1}}],[\"接口只是规定\",{\"1\":{\"5459\":1}}],[\"接口只声明方法\",{\"1\":{\"2737\":1}}],[\"接口也可以有默认的方法实现\",{\"1\":{\"5396\":1}}],[\"接口也可以拥有默认的方法实现\",{\"1\":{\"5379\":1}}],[\"接口优先于抽象类\",{\"1\":{\"5396\":1}}],[\"接口中不允许普通方法\",{\"1\":{\"5675\":1}}],[\"接口中可以有静态\",{\"1\":{\"5672\":1}}],[\"接口中的\",{\"1\":{\"5390\":1}}],[\"接口中获取商品价格数据\",{\"1\":{\"4467\":1}}],[\"接口是什么\",{\"0\":{\"5674\":1}}],[\"接口是一个序列化\",{\"1\":{\"5668\":1}}],[\"接口是抽象类的延伸\",{\"1\":{\"5378\":1}}],[\"接口是所有程序元素\",{\"1\":{\"4624\":1}}],[\"接口名可能也是名词或名词短语\",{\"1\":{\"4169\":1}}],[\"接口或\",{\"1\":{\"3935\":1}}],[\"接口或抽象类\",{\"1\":{\"2066\":1}}],[\"接口不存在\",{\"1\":{\"3853\":1}}],[\"接口提供方既然明确是过时接口\",{\"1\":{\"3044\":1}}],[\"接口过时必须加\",{\"1\":{\"3043\":1}}],[\"接口基础常量string\",{\"1\":{\"3003\":1}}],[\"接口类中的方法和属性不要加任何修饰符号\",{\"1\":{\"3003\":1}}],[\"接口使用一个带有名称的小圆圈来进行表示\",{\"1\":{\"2825\":1}}],[\"接口表示具有某种行为特性\",{\"1\":{\"2735\":1}}],[\"接口满天飞\",{\"1\":{\"2716\":1}}],[\"接口意识\",{\"1\":{\"2713\":1}}],[\"接口语法\",{\"1\":{\"2693\":1}}],[\"接口有扣除积分方法\",{\"1\":{\"2449\":1}}],[\"接口要精简单一\",{\"1\":{\"2244\":1}}],[\"接口传递\",{\"1\":{\"2086\":1}}],[\"接口就好了\",{\"1\":{\"2080\":1}}],[\"接口隔离\",{\"1\":{\"2172\":1}}],[\"接口隔离提高了系统的内聚性\",{\"1\":{\"2045\":1}}],[\"接口隔离原则是为了约束接口\",{\"1\":{\"2043\":1}}],[\"接口隔离原则的优点\",{\"0\":{\"2042\":1}}],[\"接口隔离原则主要约束接口\",{\"1\":{\"2041\":1}}],[\"接口隔离原则和单一职责都是为了提高类的内聚性\",{\"1\":{\"2039\":1}}],[\"接口隔离原则\",{\"0\":{\"2031\":1},\"1\":{\"1993\":1,\"2033\":1,\"2225\":1,\"2243\":1}}],[\"接口里的方法不应该囤积许多类需要的不同方法\",{\"1\":{\"2034\":1}}],[\"接口代理\",{\"1\":{\"1813\":1,\"1852\":1}}],[\"接口系统提供\",{\"1\":{\"1551\":1}}],[\"接口和方法中\",{\"1\":{\"4997\":1}}],[\"接口和方法\",{\"1\":{\"3222\":1}}],[\"接口和实现类的命名有两套规则\",{\"1\":{\"3004\":1}}],[\"接口和\",{\"1\":{\"1359\":1}}],[\"接口定义了多个\",{\"1\":{\"718\":1}}],[\"接口的实现由provider实现\",{\"1\":{\"6161\":1}}],[\"接口的方法\",{\"1\":{\"5459\":1}}],[\"接口的字段只能是\",{\"1\":{\"5386\":1}}],[\"接口的字段默认都是\",{\"1\":{\"5381\":1}}],[\"接口的成员只能是\",{\"1\":{\"5387\":1}}],[\"接口的成员\",{\"1\":{\"5380\":1}}],[\"接口的类\",{\"1\":{\"4794\":1}}],[\"接口的定义只表明做什么\",{\"1\":{\"2713\":1}}],[\"接口的所有方法\",{\"1\":{\"2467\":1}}],[\"接口的对象\",{\"1\":{\"678\":1,\"789\":1}}],[\"接口的全部方法\",{\"1\":{\"554\":1}}],[\"接口适配器\",{\"1\":{\"577\":1}}],[\"接口适配器模式应用实例\",{\"0\":{\"551\":1}}],[\"接口适配器模式介绍\",{\"0\":{\"547\":1}}],[\"接口适配器模式\",{\"0\":{\"546\":1},\"1\":{\"488\":1}}],[\"接口方法在jdk8之前只有public\",{\"1\":{\"5698\":1}}],[\"接口方法定义public\",{\"1\":{\"3003\":1}}],[\"接口方法签名void\",{\"1\":{\"3003\":1}}],[\"接口方法\",{\"1\":{\"566\":1,\"719\":1}}],[\"接口\",{\"0\":{\"2692\":1,\"2824\":1},\"1\":{\"499\":1,\"622\":1,\"628\":1,\"683\":1,\"745\":1,\"787\":1,\"1321\":1,\"1718\":1,\"1842\":1,\"1869\":1,\"1878\":1,\"2052\":1,\"2056\":1,\"2058\":3,\"2089\":2,\"2546\":1,\"2693\":1,\"2694\":8,\"2734\":1,\"2735\":3,\"2740\":1,\"2762\":1,\"2809\":1,\"2825\":1,\"2831\":1,\"2901\":1,\"3001\":1,\"4493\":1,\"4495\":1,\"4589\":1,\"4590\":1,\"4659\":1,\"4868\":1,\"5377\":1,\"5458\":1,\"5673\":1,\"5675\":1,\"5883\":1,\"6242\":1,\"6247\":1}}],[\"化整为零\",{\"0\":{\"447\":1}}],[\"肆\",{\"0\":{\"447\":1}}],[\"最大的二进制组件仓库\",{\"1\":{\"6400\":1}}],[\"最大的挑战之一就是需求的不断变化\",{\"1\":{\"2696\":1}}],[\"最优匹配\",{\"1\":{\"6104\":1}}],[\"最常见的例子就是对象中包含一个日期对象的引用\",{\"1\":{\"5634\":1}}],[\"最起码\",{\"1\":{\"5143\":1}}],[\"最为常见的就是使用spring\",{\"1\":{\"4688\":1}}],[\"最低限度不要再增加配置项\",{\"1\":{\"3437\":1}}],[\"最多\",{\"1\":{\"3426\":1}}],[\"最多有两层继承关系\",{\"1\":{\"2743\":1}}],[\"最近在某个表中增加一个同名字段\",{\"1\":{\"3388\":1}}],[\"最外层的业务使用者\",{\"1\":{\"3268\":1}}],[\"最好的\",{\"1\":{\"6974\":1}}],[\"最好的一方面就是拥有大量的第三方库可以做任何事\",{\"1\":{\"6870\":1}}],[\"最好的两个框架是\",{\"1\":{\"6858\":1}}],[\"最好的资料依然在junit官方网站\",{\"1\":{\"4287\":1}}],[\"最好不要去使用\",{\"1\":{\"5468\":1}}],[\"最好不要捕获\",{\"1\":{\"4907\":1}}],[\"最好\",{\"1\":{\"3960\":1}}],[\"最好确定该常量与接口的方法相关\",{\"1\":{\"3003\":1}}],[\"最好还是不要设计成单例类\",{\"1\":{\"2363\":1}}],[\"最下面的部分标识类的方法\",{\"1\":{\"2841\":1}}],[\"最上面的部分标识类的名称\",{\"1\":{\"2841\":1}}],[\"最主要的原因就是将系统划分成各个独立的模块\",{\"1\":{\"2772\":1}}],[\"最关键的就是解耦\",{\"1\":{\"2752\":1}}],[\"最少知道原则\",{\"1\":{\"2157\":1}}],[\"最重要\",{\"1\":{\"2128\":1}}],[\"最基础\",{\"1\":{\"2128\":1}}],[\"最小接口指\",{\"1\":{\"2034\":1}}],[\"最小原型的使用方式跟\",{\"1\":{\"1352\":1}}],[\"最小原型设计\",{\"0\":{\"1348\":1}}],[\"最后总结一下jdk\",{\"1\":{\"6238\":1}}],[\"最后被委托到\",{\"1\":{\"6113\":1}}],[\"最后才是构造函数的初始化\",{\"1\":{\"5505\":1}}],[\"最后的两个方法\",{\"1\":{\"5170\":1}}],[\"最后在字节码中的类型变量的真正类型\",{\"1\":{\"5097\":1}}],[\"最后发现结果为true\",{\"1\":{\"5091\":1}}],[\"最后执行finally语句块后的语句\",{\"1\":{\"4778\":1}}],[\"最后我们再看看实际开发中注解的一些应用场景\",{\"1\":{\"4673\":1}}],[\"最后通过tostring\",{\"1\":{\"3073\":1}}],[\"最后构建成该复杂对象\",{\"1\":{\"2609\":1}}],[\"最后将表达式\",{\"1\":{\"1489\":1}}],[\"最后求出结果\",{\"1\":{\"1478\":1}}],[\"最后最小原型设计那里再调用\",{\"1\":{\"1369\":1}}],[\"最后建议大家\",{\"1\":{\"482\":1}}],[\"最后\",{\"0\":{\"480\":1},\"1\":{\"1342\":1,\"1362\":1,\"2173\":1,\"2687\":1,\"2803\":1,\"4203\":1,\"4892\":1,\"5091\":1,\"6062\":1,\"6076\":1,\"6105\":1,\"6123\":1,\"6201\":1,\"6261\":1}}],[\"最后调用getint方法一次性读取4个字节作为一个int型变量的值\",{\"1\":{\"470\":1}}],[\"最后再将它的值设为false\",{\"1\":{\"442\":1}}],[\"最终你需要把你的代码从开发环境部署到生产环境了\",{\"1\":{\"6887\":1}}],[\"最终会加载meta\",{\"1\":{\"6218\":1}}],[\"最终会返回false\",{\"1\":{\"444\":1}}],[\"最终是由jvm执行invoke0\",{\"1\":{\"6130\":1}}],[\"最终方法不能被重写\",{\"1\":{\"5701\":1}}],[\"最终类不能被继承\",{\"1\":{\"5701\":1}}],[\"最终类可以没有最终方法\",{\"1\":{\"5700\":1}}],[\"最终\",{\"1\":{\"5672\":1}}],[\"最终导致集合添加了两个等价的对象\",{\"1\":{\"5444\":1}}],[\"最终给客户端调用\",{\"1\":{\"2508\":1}}],[\"最终形成一颗抽象的语法分析树\",{\"1\":{\"1454\":1}}],[\"最终实现了把1赋值给a的操作\",{\"1\":{\"467\":1}}],[\"最难的\",{\"1\":{\"152\":1}}],[\"||\",{\"1\":{\"453\":1,\"1537\":1,\"3097\":1,\"3197\":1,\"5440\":1,\"6083\":1,\"6099\":1,\"6101\":1,\"6180\":1,\"6258\":2}}],[\"|\",{\"1\":{\"438\":1,\"1366\":4,\"4047\":2,\"4077\":2,\"4647\":1,\"4770\":1,\"4771\":1,\"6118\":1,\"6692\":1,\"6693\":1,\"6694\":1}}],[\"|this\",{\"1\":{\"225\":1}}],[\"没那么复杂\",{\"1\":{\"4282\":1}}],[\"没必要对全字段建立索引\",{\"1\":{\"3370\":1}}],[\"没中奖\",{\"1\":{\"2454\":1}}],[\"没有xml并支持混入\",{\"1\":{\"6668\":1}}],[\"没有保证\",{\"1\":{\"5661\":1}}],[\"没有指针\",{\"1\":{\"5570\":1}}],[\"没有实现\",{\"1\":{\"5444\":1,\"5458\":1}}],[\"没有实心箭头\",{\"1\":{\"2925\":1}}],[\"没有注解对应类型的注解时\",{\"1\":{\"4632\":1}}],[\"没有注释也十分清晰\",{\"1\":{\"3960\":1}}],[\"没有的特性\",{\"1\":{\"4473\":1}}],[\"没有这层含义\",{\"1\":{\"4469\":1}}],[\"没有方法和注释的枚举常量可以写成数组初始化的方式\",{\"1\":{\"4103\":1}}],[\"没有分组括号时代码的阅读者不会想当然地错误理解\",{\"1\":{\"4098\":1}}],[\"没有使用空格\",{\"1\":{\"4073\":1}}],[\"没有使用接口隔离原则代码\",{\"1\":{\"2051\":1}}],[\"没有全面和明确的准则\",{\"1\":{\"4037\":1}}],[\"没有进行转义\",{\"1\":{\"3333\":1}}],[\"没有必要插入多个空行进行隔开\",{\"1\":{\"3038\":1}}],[\"没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐\",{\"1\":{\"3037\":1}}],[\"没有红绿灯\",{\"1\":{\"2983\":1}}],[\"没有鉴权的漏洞代码容易被黑客攻击等\",{\"1\":{\"2982\":1}}],[\"没有了头\",{\"1\":{\"2879\":1}}],[\"没有规定在软件开发中一定要用\",{\"1\":{\"2820\":1}}],[\"没有人能掌控所有的细节\",{\"1\":{\"2772\":1}}],[\"没有人处理该请求\",{\"1\":{\"1953\":2}}],[\"没有起作用\",{\"1\":{\"2373\":1}}],[\"没有达到\",{\"1\":{\"2289\":1}}],[\"没有第二种途径\",{\"1\":{\"2267\":1}}],[\"没有清晰的过程\",{\"1\":{\"1122\":1}}],[\"没有资源没时间\",{\"1\":{\"986\":1,\"987\":1}}],[\"没有集合\",{\"1\":{\"856\":1}}],[\"没有任何命令\",{\"1\":{\"777\":1}}],[\"没有设计缓存层对象\",{\"1\":{\"700\":1}}],[\"没用的知识介绍环节就此结束\",{\"1\":{\"481\":1}}],[\"没错\",{\"1\":{\"436\":1,\"452\":1,\"5143\":1}}],[\"没个几十年的功力真看不出来这里执行的是sleep\",{\"1\":{\"414\":1}}],[\"下述包含\",{\"1\":{\"5673\":1}}],[\"下限\",{\"1\":{\"5043\":1}}],[\"下标越界\",{\"1\":{\"4886\":1}}],[\"下标越界异常\",{\"1\":{\"4722\":1}}],[\"下划线可以出现在\",{\"1\":{\"4175\":1}}],[\"下单\",{\"1\":{\"3345\":1}}],[\"下列情形\",{\"1\":{\"3205\":1,\"3206\":1}}],[\"下列情况使用final关键字\",{\"1\":{\"3074\":1}}],[\"下例中没有处理相等的情况\",{\"1\":{\"3119\":1}}],[\"下例中实参的args1逗号后边必须要有一个空格\",{\"1\":{\"3034\":1}}],[\"下图完整地描述了所有构件的关系\",{\"1\":{\"2822\":1}}],[\"下载量已达到\",{\"1\":{\"2983\":1}}],[\"下载图片的时候\",{\"1\":{\"2705\":1}}],[\"下载一幅很大的图像需要很长时间\",{\"1\":{\"1921\":1}}],[\"下的核心方法\",{\"1\":{\"3068\":1}}],[\"下的\",{\"1\":{\"2388\":1}}],[\"下属有各个学院和总部\",{\"1\":{\"2186\":1}}],[\"下方代码\",{\"1\":{\"2015\":1}}],[\"下一章会继续讲解七大设计原则\",{\"1\":{\"2785\":1}}],[\"下一个处理者\",{\"1\":{\"1972\":2}}],[\"下一篇\",{\"1\":{\"24\":1}}],[\"下次再请求此对象的时候\",{\"1\":{\"1363\":1}}],[\"下面这些软件包能够让你更容易地测试\",{\"1\":{\"6954\":1}}],[\"下面这些一小部分的扩展库对大部分人来说很适用的\",{\"1\":{\"6891\":1}}],[\"下面这张图是引入中间层前后的依赖关系对比图\",{\"1\":{\"2764\":1}}],[\"下面来看一下\",{\"1\":{\"6064\":1}}],[\"下面来分析其基本结构和实现方法\",{\"1\":{\"885\":1}}],[\"下面将演示通过method对象调用指定类的方法\",{\"1\":{\"6016\":1}}],[\"下面将通过field类本身的方法对指定类属性赋值\",{\"1\":{\"5963\":1}}],[\"下面将对这几个重要类进行分别说明\",{\"1\":{\"5846\":1}}],[\"下面看一个简单例子来了解constructor对象的使用\",{\"1\":{\"5913\":1}}],[\"下面\",{\"1\":{\"5672\":1}}],[\"下面示例中\",{\"1\":{\"5310\":1}}],[\"下面方法是合法的\",{\"1\":{\"5228\":1}}],[\"下面正例中的数字就是延伸信息\",{\"1\":{\"3017\":1}}],[\"下面根据类与类之间的耦合度从弱到强排列\",{\"1\":{\"2848\":1}}],[\"下面的定义呢\",{\"1\":{\"5225\":1}}],[\"下面的定义将不会通过编译\",{\"1\":{\"5216\":1}}],[\"下面的测试用例简单的测试了建立对象\",{\"1\":{\"4980\":1}}],[\"下面的测试类也没有实际使用到该类\",{\"1\":{\"2536\":1}}],[\"下面的代码演示了上述方法的使用过程\",{\"1\":{\"5961\":1}}],[\"下面的代码中\",{\"1\":{\"5444\":1,\"5775\":1}}],[\"下面的代码\",{\"1\":{\"434\":1}}],[\"下面是选出的最流行的一部分工具\",{\"1\":{\"6987\":1}}],[\"下面是传统的通过定义一个\",{\"1\":{\"6797\":1}}],[\"下面是获取构造器的过程\",{\"1\":{\"6070\":1}}],[\"下面是class类获取method对象相关的方法\",{\"1\":{\"5996\":1}}],[\"下面是核心方式使用\",{\"1\":{\"2085\":1}}],[\"下面是一个典型的\",{\"1\":{\"1335\":1}}],[\"下面代码的修改方法没有对原来的类做大的修改\",{\"1\":{\"2023\":1}}],[\"下面代码虽然遵守单一职责原则\",{\"1\":{\"2019\":1}}],[\"下面分析其以下应用场景\",{\"1\":{\"1612\":1}}],[\"下面分析它的应用场景\",{\"1\":{\"1496\":1}}],[\"下面分析它适用的应用场景\",{\"1\":{\"1448\":1}}],[\"下面分析它适用的以下应用场景\",{\"1\":{\"870\":1}}],[\"下面介绍其应用场景\",{\"1\":{\"1559\":1}}],[\"下面享元模式的结构图\",{\"1\":{\"1398\":1}}],[\"下面为安全的组合模式的实现代码\",{\"1\":{\"833\":1}}],[\"下面为透明式的组合模式的实现代码\",{\"1\":{\"831\":1}}],[\"下面我们使用建造者模式\",{\"1\":{\"703\":1}}],[\"下面可以有\",{\"1\":{\"628\":1}}],[\"陷入云里雾里\",{\"1\":{\"433\":1}}],[\"今天\",{\"1\":{\"2721\":1}}],[\"今天给大家分享一波\",{\"1\":{\"393\":1}}],[\"今有码农颠倒真假\",{\"1\":{\"433\":1}}],[\"颠倒黑白\",{\"0\":{\"432\":1}}],[\"叁\",{\"0\":{\"432\":1}}],[\"一组java开发函数库\",{\"1\":{\"6673\":1}}],[\"一组web开发工具集\",{\"1\":{\"6667\":1}}],[\"一组可以处理各种任务的工具集\",{\"1\":{\"6532\":1}}],[\"一款基于eclipse开源平台打造的spring应用开发环境\",{\"1\":{\"6446\":1}}],[\"一款基于eclipse开源平台打造的scala集成开发环境\",{\"1\":{\"6445\":1}}],[\"一书第十四章中有提到\",{\"1\":{\"5819\":1}}],[\"一书中提出的\",{\"1\":{\"2001\":1}}],[\"一书中\",{\"1\":{\"1159\":1}}],[\"一样的大版本\",{\"1\":{\"5670\":1}}],[\"一样的指针\",{\"1\":{\"5570\":1}}],[\"一样感觉不到\",{\"1\":{\"3299\":1}}],[\"一起用于异常的处理\",{\"1\":{\"5662\":1}}],[\"一起对反射提供了支持\",{\"1\":{\"5518\":1}}],[\"一起删除\",{\"1\":{\"2882\":1}}],[\"一致性\",{\"1\":{\"5425\":1,\"5657\":1}}],[\"一定是子类在前面\",{\"1\":{\"5227\":1}}],[\"一定要清楚\",{\"1\":{\"4892\":1}}],[\"一定要注意日志输出量的问题\",{\"1\":{\"3294\":1}}],[\"一定要注意手动回滚事务\",{\"1\":{\"3269\":1}}],[\"一定要注意当value为null时会抛npe异常\",{\"1\":{\"3096\":1}}],[\"一定要使用参数类型\",{\"1\":{\"3092\":1}}],[\"一定要有抽象意识\",{\"1\":{\"2713\":1}}],[\"一定要牢记简洁原则\",{\"1\":{\"2591\":1}}],[\"一点问题也没有\",{\"1\":{\"5154\":1}}],[\"一共有三种策略\",{\"1\":{\"4593\":1}}],[\"一条语句占一行\",{\"0\":{\"4025\":1}}],[\"一部分的时候\",{\"1\":{\"4019\":1}}],[\"一级宏观错误码\",{\"1\":{\"3561\":1,\"3808\":1,\"3844\":1}}],[\"一方改变其所指向对象的内容对另一方没有影响\",{\"1\":{\"5333\":1}}],[\"一方库\",{\"1\":{\"3549\":1}}],[\"一方面\",{\"1\":{\"2705\":1,\"2727\":1,\"2731\":1}}],[\"一对应\",{\"1\":{\"3535\":1,\"3536\":1}}],[\"一对应的pojo类\",{\"1\":{\"3535\":1,\"3536\":1}}],[\"一对多的关系\",{\"1\":{\"1075\":1}}],[\"一直默默\",{\"1\":{\"3427\":1}}],[\"一直追溯到最顶层父类的代码\",{\"1\":{\"2731\":1}}],[\"一律不要使用\",{\"1\":{\"3394\":1}}],[\"一律要求进行空指针判断\",{\"1\":{\"3276\":1}}],[\"一切就搞定了\",{\"1\":{\"6901\":1}}],[\"一切\",{\"1\":{\"3557\":1}}],[\"一切外键概念必须在应用层解决\",{\"1\":{\"3385\":1}}],[\"一切解释权都归我\",{\"1\":{\"1071\":1}}],[\"一连串调用\",{\"1\":{\"3276\":1}}],[\"一年之后\",{\"1\":{\"3469\":1}}],[\"一年半载后\",{\"1\":{\"3328\":1}}],[\"一年后的那一天不可能是\",{\"1\":{\"3086\":1}}],[\"一年有效期的会员制\",{\"1\":{\"3085\":1}}],[\"一周从周日开始\",{\"1\":{\"3078\":1}}],[\"一\",{\"0\":{\"2984\":1,\"2985\":1,\"3250\":1,\"3350\":1,\"3408\":1},\"1\":{\"5419\":1}}],[\"一份典型的建模图表通常包含几个块或框\",{\"1\":{\"2818\":1}}],[\"一份牛奶的\",{\"1\":{\"928\":1}}],[\"一块儿来解决刚刚继承存在的问题\",{\"1\":{\"2734\":1}}],[\"一线\",{\"1\":{\"2577\":1}}],[\"一些非常棒的代码生成库如\",{\"1\":{\"6815\":1}}],[\"一些例子可以参考\",{\"1\":{\"5012\":1}}],[\"一些其它运行器具备更多功能\",{\"1\":{\"4319\":1,\"4402\":1}}],[\"一些带连字符的单词在英语中含糊不清的\",{\"1\":{\"4223\":1}}],[\"一些开源的数据库连接池\",{\"1\":{\"2363\":1}}],[\"一些书籍称为\",{\"1\":{\"548\":1}}],[\"一般选择有\",{\"1\":{\"6884\":1}}],[\"一般都是以jar包做依赖\",{\"1\":{\"6144\":1}}],[\"一般为空\",{\"1\":{\"6099\":1}}],[\"一般取\",{\"1\":{\"5446\":1}}],[\"一般调用一个或多个可能抛出异常的方法\",{\"1\":{\"4862\":1}}],[\"一般形式\",{\"0\":{\"4242\":1},\"1\":{\"4267\":1}}],[\"一般来说\",{\"1\":{\"4057\":1,\"4433\":1,\"6211\":1}}],[\"一般是数字\",{\"1\":{\"3405\":1}}],[\"一般是方法级别\",{\"1\":{\"3306\":1}}],[\"一般对字符串类型数据\",{\"1\":{\"3370\":1}}],[\"一般dao层与service层都在同一个应用中\",{\"1\":{\"3206\":1}}],[\"一般不要定义为static变量\",{\"1\":{\"3160\":1}}],[\"一般模板方法都加上\",{\"1\":{\"2683\":1}}],[\"一般使用接口或抽象类实现\",{\"1\":{\"2506\":1}}],[\"一般通过在\",{\"1\":{\"1981\":1}}],[\"一般代理会被理解为代码增强\",{\"1\":{\"1832\":1}}],[\"一般用来传递被所有解释器共享的数据\",{\"1\":{\"1471\":1}}],[\"一般情况下不自定义检查异常\",{\"1\":{\"4725\":1}}],[\"一般情况下\",{\"1\":{\"1159\":1,\"2260\":1,\"2791\":1}}],[\"一台服务器很难支持更多的玩家玩围棋游戏\",{\"1\":{\"1389\":1}}],[\"一种高效的二进制序列化格式\",{\"1\":{\"6609\":1}}],[\"一种静态编程语言\",{\"1\":{\"6474\":1}}],[\"一种\",{\"1\":{\"4473\":1}}],[\"一种动态加载类和创建对象的机制\",{\"1\":{\"1364\":1}}],[\"一种是\",{\"1\":{\"5819\":1}}],[\"一种是每次都返回新创建的对象\",{\"1\":{\"1343\":1}}],[\"一种是创建过程涉及复杂的\",{\"1\":{\"1324\":1}}],[\"一下就可以\",{\"1\":{\"1254\":1}}],[\"一旦你将你的服务器和你的\",{\"1\":{\"6982\":1}}],[\"一旦你执行了\",{\"1\":{\"6836\":1}}],[\"一旦你选择将某个类设计成到单例类\",{\"1\":{\"2356\":1}}],[\"一旦整体对象不存在\",{\"1\":{\"2879\":1}}],[\"一旦父类代码修改\",{\"1\":{\"2731\":1}}],[\"一旦接口增加方法\",{\"1\":{\"1847\":1}}],[\"一旦中介者出现了问题\",{\"1\":{\"1609\":1}}],[\"一旦增加新产品不得不修改工厂逻辑\",{\"1\":{\"1181\":1}}],[\"一旦异常\",{\"1\":{\"1179\":1}}],[\"一句话归纳\",{\"1\":{\"952\":1,\"981\":1,\"1025\":1,\"2232\":1}}],[\"一个静态代码分析工具\",{\"1\":{\"6988\":1}}],[\"一个全新函数式集合库\",{\"1\":{\"6918\":1}}],[\"一个很好的\",{\"1\":{\"6881\":1}}],[\"一个比较漂亮的绝招是在你的方法异常声明中声明\",{\"1\":{\"6818\":1}}],[\"一个可扩展的java爬虫框架\",{\"1\":{\"6662\":1}}],[\"一个分布式\",{\"1\":{\"6594\":1}}],[\"一个完全的企业搜索引擎\",{\"1\":{\"6593\":1}}],[\"一个完整的例子\",{\"1\":{\"4780\":1}}],[\"一个java工具集\",{\"1\":{\"6656\":1}}],[\"一个java类型安全的rest客户端\",{\"1\":{\"6580\":1}}],[\"一个java语言编写的高性能功能完善的json库\",{\"1\":{\"6461\":1}}],[\"一个复杂的报表引擎\",{\"1\":{\"6560\":1}}],[\"一个易于使用的pdf函数库\",{\"1\":{\"6559\":1}}],[\"一个android和java应用的http+spdy客户端\",{\"1\":{\"6539\":1}}],[\"一个函数式组件库\",{\"1\":{\"6416\":1}}],[\"一个简化字节码编辑尝试\",{\"1\":{\"6299\":1}}],[\"一个简单的\",{\"1\":{\"1329\":1,\"1331\":1}}],[\"一个方法内的内部类如果使用了这个方法的参数或者局部变量的话\",{\"1\":{\"5743\":1}}],[\"一个方法的形参不用final修饰\",{\"1\":{\"5743\":1}}],[\"一个子类只能继承一个抽象类\",{\"1\":{\"5692\":1}}],[\"一个嵌套类位于顶级类内部\",{\"1\":{\"5666\":1}}],[\"一个公共的顶级类的源文件名称与类名相同\",{\"1\":{\"5666\":1}}],[\"一个数与\",{\"1\":{\"5447\":1}}],[\"一个用来拆解class文件的工具\",{\"1\":{\"4941\":1}}],[\"一个常见的错误就是在try块的最后关闭资源\",{\"1\":{\"4859\":1}}],[\"一个常见的错误是用以下形式编写简单的\",{\"1\":{\"4255\":1}}],[\"一个团队必须要制定出一个最佳实践和规则\",{\"1\":{\"4845\":1}}],[\"一个无参构造函数和一个带有详细描述信息的构造函数\",{\"1\":{\"4759\":1}}],[\"一个模块不需要知道其他模块的内部工作情况\",{\"1\":{\"5364\":1}}],[\"一个模块的封装大多数人都是通过继承和组合等模式来实现的\",{\"1\":{\"4677\":1}}],[\"一个模块或者类的改动\",{\"1\":{\"2778\":1}}],[\"一个实际的系统会依赖多个外部对象\",{\"1\":{\"4464\":1}}],[\"一个产品里最核心最有业务价值的代码应该要有较高的单元测试覆盖率\",{\"1\":{\"4456\":1}}],[\"一个产品家族是这样的一系列产品\",{\"1\":{\"729\":1}}],[\"一个测试\",{\"1\":{\"4386\":1}}],[\"一个典型的阅读者可能不知道术语\",{\"1\":{\"4261\":1}}],[\"一个大写字母\",{\"1\":{\"4192\":1}}],[\"一个单独的没有参数的注解可以和方法签名的第一行一起出现\",{\"1\":{\"4140\":1}}],[\"一个包含多块的语句\",{\"1\":{\"4019\":1}}],[\"一个空对象或者是一个常量等\",{\"1\":{\"4475\":1}}],[\"一个空的语句块或者块状结构可以遵循\",{\"1\":{\"4019\":1}}],[\"一个空行\",{\"1\":{\"3976\":1,\"4249\":1}}],[\"一个\",{\"1\":{\"3931\":1}}],[\"一个五位数字\",{\"1\":{\"3263\":1}}],[\"一个是date类型\",{\"1\":{\"5161\":1}}],[\"一个是参数object类型\",{\"1\":{\"5161\":1}}],[\"一个是string\",{\"1\":{\"5112\":1}}],[\"一个是float\",{\"1\":{\"5112\":1}}],[\"一个是arraylist<integer>泛型类型的\",{\"1\":{\"5091\":1}}],[\"一个是数字的\",{\"1\":{\"3041\":1}}],[\"一个是字母的o\",{\"1\":{\"3041\":1}}],[\"一个人每天会起床\",{\"1\":{\"2637\":1}}],[\"一个系统需要动态地在几种算法中选择一种时\",{\"1\":{\"2556\":1}}],[\"一个操作中含有庞大的分支结构\",{\"1\":{\"2482\":1}}],[\"一个进程在获取到对象之后\",{\"1\":{\"2404\":1}}],[\"一个进程只能有一个单例对象\",{\"1\":{\"2392\":1}}],[\"一个线程进入了\",{\"1\":{\"2301\":1}}],[\"一个项目通常只需要一个\",{\"1\":{\"2260\":1}}],[\"一个接口的方法重新定义了父接口的方法\",{\"1\":{\"4226\":1}}],[\"一个接口的所有抽象方法能被一个类全部实现\",{\"1\":{\"2225\":1}}],[\"一个接口只干一件事\",{\"1\":{\"2244\":1}}],[\"一个软件实体如类\",{\"1\":{\"2129\":1}}],[\"一个缓冲层\",{\"1\":{\"2094\":1}}],[\"一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力\",{\"1\":{\"2005\":1}}],[\"一个事件需要经过多个对象处理是很常见的场景\",{\"1\":{\"1927\":1}}],[\"一个客户不能或者不想直接访问另一个对象\",{\"1\":{\"1809\":1}}],[\"一个对象应该对其他对象保持最少的了解\",{\"1\":{\"2156\":1}}],[\"一个对象更加优良\",{\"1\":{\"1743\":1}}],[\"一个对象的状态发生改变会影响其他对象\",{\"1\":{\"1732\":1}}],[\"一个对象的内部状态\",{\"1\":{\"1617\":1}}],[\"一个对象\",{\"1\":{\"1641\":1}}],[\"一个对象就可以提供给多出需要使用的地方\",{\"1\":{\"1446\":1}}],[\"一个算术表达式通过词法分析器形成词法单元\",{\"1\":{\"1454\":1}}],[\"一个工厂类只负责某个类对象或者某一组相关类对象\",{\"1\":{\"1328\":1}}],[\"一个类有\",{\"1\":{\"5821\":1}}],[\"一个类不显式去重写\",{\"1\":{\"5454\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"5385\":1}}],[\"一个类可以创建多个对象\",{\"1\":{\"2408\":1,\"2412\":1}}],[\"一个类中有多个public方法\",{\"1\":{\"3467\":1}}],[\"一个类需要借助另一个类来实现功能一般一个类将另一个类作为参数使用\",{\"1\":{\"2919\":1}}],[\"一个类定义了多种行为\",{\"1\":{\"2557\":1}}],[\"一个类型只能对应一个对象\",{\"1\":{\"2412\":1}}],[\"一个类应该保持对其它对象最少的了解\",{\"1\":{\"2247\":1}}],[\"一个类只能创建一个对象\",{\"1\":{\"2408\":1}}],[\"一个类只允许创建唯一一个对象\",{\"1\":{\"2386\":1,\"2387\":1}}],[\"一个类只干一件事\",{\"1\":{\"2241\":1}}],[\"一个类只负责一项职责\",{\"1\":{\"2009\":1,\"2027\":1}}],[\"一个类或一个方法只负责一件事情\",{\"1\":{\"2224\":1}}],[\"一个类的方法实现了接口的方法\",{\"1\":{\"4226\":1}}],[\"一个类的修改\",{\"1\":{\"2175\":1}}],[\"一个类的代码改动不会或者很少导致依赖类的代码改动\",{\"1\":{\"2172\":1}}],[\"一个类对另一个类的依赖应该建立在最小的接口上\",{\"1\":{\"2033\":1}}],[\"一个类\",{\"1\":{\"1203\":1}}],[\"一个学校可以有很多学生\",{\"1\":{\"5796\":1}}],[\"一个学校有多个学院\",{\"1\":{\"836\":1,\"843\":1,\"1528\":1}}],[\"一个学院有多个系\",{\"1\":{\"836\":1,\"843\":1,\"1528\":1}}],[\"一个具体的产品对象\",{\"1\":{\"675\":1}}],[\"一是在具体实现代码之前\",{\"1\":{\"4446\":1}}],[\"一是易出错\",{\"1\":{\"3402\":1}}],[\"一是保护目标对象\",{\"1\":{\"1918\":1}}],[\"一是\",{\"1\":{\"678\":1}}],[\"一次是转为iterator对象\",{\"1\":{\"3124\":1}}],[\"一次实例化代码就够了\",{\"1\":{\"2307\":1}}],[\"一次\",{\"1\":{\"452\":1}}],[\"一次性右移32位呢\",{\"1\":{\"429\":1}}],[\"一键启用\",{\"1\":{\"48\":1}}],[\"以注解的方式来实现接口及其实现的结合\",{\"1\":{\"6941\":1}}],[\"以java和\",{\"1\":{\"6737\":1}}],[\"以本机格式发布应用程序的工具\",{\"1\":{\"6398\":1}}],[\"以磁盘或堆内存中并发集合为基础的嵌入式数据库引擎\",{\"1\":{\"6348\":1}}],[\"以可以作为内存数据库使用著称\",{\"1\":{\"6344\":1}}],[\"以懒加载的方式加载可用的服务提供者\",{\"1\":{\"6258\":1}}],[\"以动态的方式管理组件生命周期\",{\"1\":{\"6210\":1}}],[\"以字符串形式返回此构造方法的名称\",{\"1\":{\"5929\":1,\"5940\":1}}],[\"以消除错误的产生\",{\"1\":{\"5747\":1}}],[\"以确保这个规则得到遵守\",{\"1\":{\"5715\":1}}],[\"以避免子类改变了父类的immutable特性\",{\"1\":{\"5631\":1}}],[\"以此来保证抽象\",{\"1\":{\"5675\":1}}],[\"以此来限制子类继承父类\",{\"1\":{\"5631\":1}}],[\"以此来降低单元测试的复杂性和可实现性\",{\"1\":{\"4464\":1}}],[\"以此来降低代码间的耦合性\",{\"1\":{\"2717\":1}}],[\"以此来降低耦合性\",{\"1\":{\"2695\":1}}],[\"以至于这个时期说方法区就是指永久代\",{\"1\":{\"5323\":1}}],[\"以前的写法\",{\"1\":{\"5123\":1}}],[\"以前开发的系统存在满足新系统功能需求的类\",{\"1\":{\"582\":1}}],[\"以保证擦除类型后的代码仍然具有泛型的\",{\"1\":{\"5075\":1}}],[\"以保证被测试模块的交付质量\",{\"1\":{\"3310\":1}}],[\"以代替方法预计会返回的值\",{\"1\":{\"4810\":1}}],[\"以lock加锁为例\",{\"1\":{\"4786\":1}}],[\"以一个简单的crud操作为例\",{\"1\":{\"4695\":1}}],[\"以一种普遍认可的统一方式一起做事\",{\"1\":{\"2983\":1}}],[\"以助你完善体系\",{\"1\":{\"4430\":1}}],[\"以它只会说\",{\"1\":{\"4261\":1}}],[\"以空格和任何剩余的标点符号\",{\"1\":{\"4198\":1}}],[\"以类名的方式命名\",{\"1\":{\"4193\":1}}],[\"以类给到\",{\"1\":{\"575\":1}}],[\"以t1\",{\"1\":{\"3389\":1}}],[\"以test结尾\",{\"1\":{\"2992\":1}}],[\"以mppserver应用为例\",{\"1\":{\"3284\":1}}],[\"以先到先得的原则在统一平台上进行\",{\"1\":{\"3255\":1}}],[\"以提高查询性能\",{\"1\":{\"3364\":1}}],[\"以提高可读性\",{\"1\":{\"3196\":1}}],[\"以提升辨识度\",{\"1\":{\"3000\":1}}],[\"以下类图使用\",{\"1\":{\"5778\":1}}],[\"以下\",{\"1\":{\"5759\":1}}],[\"以下代码中\",{\"1\":{\"5333\":1}}],[\"以下代码在使用javadoc工具可以生成\",{\"1\":{\"4606\":1}}],[\"以下称为异常表\",{\"1\":{\"4937\":1}}],[\"以下列举了一些我为什么使用单元测试的好处\",{\"1\":{\"4436\":1}}],[\"以下我帮你总结下junit相关的官方网址\",{\"1\":{\"4287\":1}}],[\"以下是一部分我参考的链接\",{\"1\":{\"5238\":1}}],[\"以下是一个很常见的惯用语法\",{\"1\":{\"4232\":1}}],[\"以下是一种可能的例子\",{\"1\":{\"4101\":1}}],[\"以下示例包括了原始类型\",{\"1\":{\"4178\":1}}],[\"以下例子都是合法的\",{\"1\":{\"4114\":1}}],[\"以下操作尽量移至循环体外处理\",{\"1\":{\"3202\":1}}],[\"以下两种场景会触发类型对齐的拆箱操作\",{\"1\":{\"3188\":1}}],[\"以下情形例外\",{\"1\":{\"2989\":1}}],[\"以后不会改\",{\"1\":{\"2227\":1}}],[\"以抽象为基础搭建的架构比以细节为基础的架构要稳定的多\",{\"1\":{\"2065\":1}}],[\"以上抛出了\",{\"1\":{\"5458\":1}}],[\"以上这些类型都实现type接口\",{\"1\":{\"5233\":1}}],[\"以上就是jvm处理异常的一些机制\",{\"1\":{\"4958\":1}}],[\"以上每个部分间隔\",{\"1\":{\"3976\":1}}],[\"以上述实例为例\",{\"1\":{\"2968\":1}}],[\"以上问题如果采用\",{\"1\":{\"2417\":1}}],[\"以上\",{\"1\":{\"1959\":1,\"2610\":1,\"2619\":1,\"2632\":1,\"3370\":1}}],[\"以上所有这些产品都是由多个部件构成的\",{\"1\":{\"663\":1}}],[\"以控制对这个对象的访问\",{\"1\":{\"1811\":1}}],[\"以防忘记了\",{\"1\":{\"1619\":1}}],[\"以及所有正确的\",{\"1\":{\"6866\":1}}],[\"以及这些项目的所有版本信息\",{\"1\":{\"6866\":1}}],[\"以及ole2规范\",{\"1\":{\"6408\":1}}],[\"以及如何访问该方法\",{\"1\":{\"5995\":1}}],[\"以及如何实现一个简单的\",{\"1\":{\"1325\":1}}],[\"以及对它的动态访问权限\",{\"1\":{\"5944\":1}}],[\"以及对语言句子的解释方法\",{\"1\":{\"2628\":1}}],[\"以及类的加载机制\",{\"1\":{\"5822\":1}}],[\"以及本地变量\",{\"1\":{\"3074\":1}}],[\"以及真实的错误案例\",{\"1\":{\"2982\":1}}],[\"以及处理复杂数据的信息系统\",{\"1\":{\"2817\":1}}],[\"以及怎样分配职责\",{\"1\":{\"2602\":1}}],[\"以及今天讲的迪米特法则\",{\"1\":{\"2172\":1}}],[\"以及使用设计模式的目的就是遵循\",{\"1\":{\"2131\":1,\"2153\":1}}],[\"以及其中蕴含的原理\",{\"1\":{\"2106\":1}}],[\"以及通知所有观察者的抽象方法\",{\"1\":{\"1679\":1}}],[\"以及软件的可维护性\",{\"1\":{\"1238\":1}}],[\"以及\",{\"1\":{\"943\":2,\"2393\":1,\"5359\":1}}],[\"以及厨房中的锅碗瓢盆等\",{\"1\":{\"806\":1}}],[\"以接口给到\",{\"1\":{\"577\":1}}],[\"以对象给到\",{\"1\":{\"576\":1}}],[\"以解决兼容性的问题\",{\"1\":{\"529\":1}}],[\"以生活中充电器的例子来讲解适配器\",{\"1\":{\"516\":1,\"535\":1}}],[\"以\",{\"1\":{\"422\":1,\"3284\":1,\"4182\":1,\"4254\":1,\"5123\":1,\"6041\":1,\"6982\":1}}],[\"以便抛出的异常可以被调用者处理\",{\"1\":{\"5704\":1}}],[\"以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上\",{\"1\":{\"5668\":1}}],[\"以便于告知方法调用者此方法有异常\",{\"1\":{\"4742\":1}}],[\"以便构建工具和\",{\"1\":{\"4327\":1}}],[\"以便以后恢复它\",{\"1\":{\"2627\":1}}],[\"以便适时选择恰当的算法类\",{\"1\":{\"2501\":1}}],[\"以便在需要的时候使用\",{\"1\":{\"1744\":1}}],[\"以便在得到目标的更改通知时更新自身的状态\",{\"1\":{\"1682\":1}}],[\"以便使用不同参数来表示不同的请求\",{\"1\":{\"743\":1}}],[\"以便\",{\"1\":{\"34\":1,\"1359\":1}}],[\"例如class\",{\"1\":{\"5886\":1}}],[\"例如除\",{\"1\":{\"5535\":1}}],[\"例如不相关的类都可以实现\",{\"1\":{\"5390\":1}}],[\"例如下面的例子中\",{\"1\":{\"5366\":1}}],[\"例如io流中执行完相应操作后\",{\"1\":{\"4785\":1}}],[\"例如使用反射注入实例\",{\"1\":{\"4499\":1}}],[\"例如动态生成代码\",{\"1\":{\"4498\":1}}],[\"例如我们调用一个\",{\"1\":{\"4475\":1}}],[\"例如一个\",{\"1\":{\"4473\":1}}],[\"例如进程\",{\"1\":{\"4462\":1}}],[\"例如清理数据\",{\"1\":{\"4301\":1}}],[\"例如创建数据库连接\",{\"1\":{\"4298\":1}}],[\"例如当英语短语里出现首字母缩略词或者不寻常结构的单词\",{\"1\":{\"4195\":1}}],[\"例如典型的\",{\"1\":{\"4124\":1}}],[\"例如在作为网络连接参数的情况下如果\",{\"1\":{\"5295\":1}}],[\"例如在类和方法的索引中\",{\"1\":{\"4253\":1}}],[\"例如在将代码组织成一小块逻辑的语句之间\",{\"1\":{\"4066\":1}}],[\"例如在\",{\"1\":{\"4014\":1}}],[\"例如纯文本\",{\"1\":{\"3235\":1}}],[\"例如容器和迭代器\",{\"1\":{\"2791\":1}}],[\"例如公司\",{\"1\":{\"2261\":1}}],[\"例如恢复到历史某一状态\",{\"1\":{\"1744\":1}}],[\"例如写c的就看不起写java的\",{\"1\":{\"462\":1}}],[\"例如\",{\"1\":{\"417\":1,\"427\":1,\"465\":1,\"485\":1,\"661\":1,\"740\":1,\"806\":2,\"940\":1,\"943\":1,\"1373\":1,\"1456\":1,\"1568\":1,\"1569\":1,\"1667\":2,\"1809\":1,\"1810\":1,\"1878\":1,\"1920\":1,\"1921\":1,\"1923\":1,\"1924\":1,\"1927\":1,\"2485\":1,\"2636\":1,\"2637\":2,\"2792\":1,\"2873\":1,\"2879\":1,\"2928\":1,\"2929\":1,\"3426\":1,\"3952\":2,\"3954\":2,\"3956\":1,\"3999\":1,\"4007\":1,\"4013\":1,\"4015\":1,\"4019\":1,\"4020\":1,\"4029\":1,\"4031\":1,\"4042\":1,\"4052\":1,\"4065\":1,\"4070\":1,\"4071\":1,\"4108\":1,\"4114\":1,\"4124\":1,\"4132\":1,\"4135\":1,\"4138\":1,\"4140\":1,\"4143\":1,\"4159\":1,\"4163\":1,\"4166\":1,\"4169\":3,\"4171\":2,\"4174\":1,\"4175\":1,\"4178\":1,\"4183\":1,\"4192\":1,\"4193\":1,\"4195\":1,\"4197\":1,\"4199\":1,\"4204\":1,\"4223\":1,\"4249\":1,\"4261\":1,\"4319\":1,\"4376\":1,\"4402\":1,\"4460\":1,\"4891\":1,\"4892\":1,\"4928\":1,\"5119\":1,\"5216\":1,\"5290\":1,\"5646\":1,\"5763\":1,\"5821\":1}}],[\"很棒\",{\"1\":{\"6914\":1}}],[\"很愉悦\",{\"1\":{\"6911\":1}}],[\"很明显\",{\"1\":{\"6879\":1}}],[\"很明显是会报错的\",{\"1\":{\"5034\":1}}],[\"很相似\",{\"1\":{\"6097\":1,\"6990\":1}}],[\"很容易被忽略\",{\"1\":{\"4793\":1}}],[\"很容易出现的\",{\"1\":{\"4728\":1}}],[\"很容易带来未知风险\",{\"1\":{\"1103\":1}}],[\"很好\",{\"1\":{\"3968\":1}}],[\"很可能在比较值的时候\",{\"1\":{\"3356\":1}}],[\"很结实\",{\"1\":{\"2915\":1}}],[\"很复杂的继承关系\",{\"1\":{\"2731\":1}}],[\"很遗憾\",{\"1\":{\"2454\":1}}],[\"很遗憾没有抽中奖品\",{\"1\":{\"2454\":1}}],[\"很难添加新的东西\",{\"1\":{\"1859\":1,\"1893\":1}}],[\"很方便的创建出相应的产品\",{\"1\":{\"1175\":1}}],[\"很大概率都会使用外观模式\",{\"1\":{\"1096\":1}}],[\"很多这些工具都可以和流行的\",{\"1\":{\"6987\":1}}],[\"很多if语句内的逻辑表达式相当复杂\",{\"1\":{\"3196\":1}}],[\"很多设计原则都以实现代码的\",{\"1\":{\"2774\":1}}],[\"很多人错误地认为识别到系统难点在哪里\",{\"1\":{\"3472\":1}}],[\"很多人认为concurrenthashmap是可以置入null值\",{\"1\":{\"3151\":1}}],[\"很多人觉得继承是一种反模式\",{\"1\":{\"2723\":1}}],[\"很多人在定义接口的时候\",{\"1\":{\"2712\":1}}],[\"很多之前模棱两可的问题\",{\"1\":{\"2716\":1}}],[\"很多时候\",{\"1\":{\"647\":1,\"3463\":1,\"4910\":1}}],[\"很多事没你想象的那么难\",{\"1\":{\"152\":1}}],[\"很重要的一个小技巧就是把简单的东西复杂化\",{\"1\":{\"417\":1}}],[\"要写出这样的类\",{\"1\":{\"5627\":1}}],[\"要提到一点\",{\"1\":{\"5172\":1}}],[\"要格外注意\",{\"1\":{\"5145\":1}}],[\"要区分原始类型和泛型变量的类型\",{\"1\":{\"5108\":1}}],[\"要进行比较\",{\"1\":{\"5050\":1}}],[\"要在表示\",{\"1\":{\"5046\":1}}],[\"要在一个页面中展示出学校的院系组成\",{\"1\":{\"836\":1}}],[\"要实现不同类型的加法\",{\"1\":{\"5002\":1}}],[\"要实现一个\",{\"1\":{\"770\":1}}],[\"要根据实际情况去判定其具体含义\",{\"1\":{\"4433\":1}}],[\"要先select\",{\"1\":{\"3387\":1}}],[\"要先调用\",{\"1\":{\"2369\":1}}],[\"要使用逻辑删除\",{\"1\":{\"3360\":1}}],[\"要使用正确的箭头\",{\"1\":{\"2906\":1}}],[\"要保证测试粒度足够小\",{\"1\":{\"3306\":1}}],[\"要么已声明异常\",{\"1\":{\"4755\":1}}],[\"要么用throws子句声明将它抛出\",{\"1\":{\"4749\":1}}],[\"要么用throws子句声明抛出它\",{\"1\":{\"4729\":1}}],[\"要么用try\",{\"1\":{\"4729\":1,\"4749\":1}}],[\"要么会有注释标记着以指示\",{\"1\":{\"4124\":1}}],[\"要么对超过特定阈值的页数进行sql改写\",{\"1\":{\"3374\":1}}],[\"要么控制返回的总页数\",{\"1\":{\"3374\":1}}],[\"要么注释说明程序将继续执行到哪一个case为止\",{\"1\":{\"3184\":1}}],[\"要么在数据库层使用乐观锁\",{\"1\":{\"3173\":1}}],[\"要么在缓存加锁\",{\"1\":{\"3173\":1}}],[\"要么在应用层加锁\",{\"1\":{\"3173\":1}}],[\"要对\",{\"1\":{\"5051\":1}}],[\"要对输入的集合参数进行npe判断\",{\"1\":{\"3107\":1}}],[\"要对所有的状态进行判断\",{\"1\":{\"2462\":1}}],[\"要按常量功能进行归类\",{\"1\":{\"3015\":1}}],[\"要杜绝继承\",{\"1\":{\"2749\":1}}],[\"要有选择性的搬移\",{\"1\":{\"2712\":1}}],[\"要遵从\",{\"1\":{\"2706\":1}}],[\"要识别现有代码中的不同之处\",{\"1\":{\"2687\":1}}],[\"要知道设计模式是为了使设计简单\",{\"1\":{\"2591\":1}}],[\"要面向接口编程\",{\"1\":{\"2238\":1}}],[\"要尽量先使用\",{\"1\":{\"2199\":1}}],[\"要访问的远程对象比较大\",{\"1\":{\"1810\":1}}],[\"要能实时的通知给第三方\",{\"1\":{\"1691\":1}}],[\"要特别注意\",{\"1\":{\"1610\":1}}],[\"要解决这个问题并不难\",{\"1\":{\"1340\":1}}],[\"要创建哪些类对象\",{\"1\":{\"1327\":1}}],[\"要便于维护\",{\"1\":{\"1190\":1}}],[\"要便于披萨种类的扩展\",{\"1\":{\"1190\":1}}],[\"要以让系统有层次\",{\"1\":{\"1150\":1}}],[\"要求在resultmap中进行字段与属\",{\"1\":{\"3395\":1}}],[\"要求在扩展新的咖啡种类时\",{\"1\":{\"898\":1}}],[\"要求是ref级别\",{\"1\":{\"3375\":1}}],[\"要求设计代码时就把sut\",{\"1\":{\"3305\":1}}],[\"要求\",{\"1\":{\"2514\":1}}],[\"要求新的对象有旧的对象的所有功能\",{\"1\":{\"1860\":1,\"1894\":1}}],[\"要求表达式的字母不能重复\",{\"1\":{\"1478\":1}}],[\"要求对用户隐藏组合对象与单个对象的不同\",{\"1\":{\"872\":1}}],[\"要求较高的抽象性\",{\"1\":{\"868\":1}}],[\"要求开发者针对抽象进行设计和编程\",{\"1\":{\"636\":1}}],[\"要求开发者针对抽象化进行设计与编程\",{\"1\":{\"596\":1}}],[\"要考虑是否选择建造者模式\",{\"1\":{\"727\":1}}],[\"要同时增加所有品牌的手机\",{\"1\":{\"614\":1}}],[\"要想写出别人看不懂的代码\",{\"1\":{\"417\":1}}],[\"要记得\",{\"1\":{\"142\":1}}],[\"舍近求远\",{\"0\":{\"416\":1}}],[\"贰\",{\"0\":{\"416\":1}}],[\"简体中文\",{\"1\":{\"6746\":1}}],[\"简介\",{\"0\":{\"3930\":1},\"1\":{\"5648\":1}}],[\"简写为fd\",{\"1\":{\"3444\":1}}],[\"简洁易懂\",{\"1\":{\"3383\":1}}],[\"简洁地写成\",{\"1\":{\"3020\":1}}],[\"简要描述后端出错原因\",{\"1\":{\"3226\":1}}],[\"简短清晰\",{\"1\":{\"3226\":1}}],[\"简而言之\",{\"1\":{\"2975\":1}}],[\"简历模板\",{\"1\":{\"2637\":1}}],[\"简称单例模式\",{\"1\":{\"2386\":1}}],[\"简称\",{\"1\":{\"1325\":1}}],[\"简化json处理的开发库\",{\"1\":{\"6456\":1}}],[\"简化开发的集成开发环境\",{\"1\":{\"6441\":1}}],[\"简化数据库交互的相关工具\",{\"1\":{\"6340\":1}}],[\"简化csv数据读写的框架与开发库\",{\"1\":{\"6337\":1}}],[\"简化了spring新程序的开发过程\",{\"1\":{\"6674\":1}}],[\"简化了创建对象的过程\",{\"1\":{\"1744\":1}}],[\"简化了发起人类\",{\"1\":{\"1624\":1}}],[\"简化了系统在不同平台之间的移植过程\",{\"1\":{\"1101\":1}}],[\"简化客户端操作\",{\"1\":{\"864\":1}}],[\"简述\",{\"1\":{\"951\":1,\"980\":1,\"1024\":1}}],[\"简直完美\",{\"1\":{\"414\":1}}],[\"简单二进制编码\",{\"1\":{\"6354\":1}}],[\"简单的轻量级网络爬虫\",{\"1\":{\"6660\":1}}],[\"简单的数据库迁移工具\",{\"1\":{\"6343\":1}}],[\"简单的日期和时间库可供你使用\",{\"1\":{\"5672\":1}}],[\"简单的泛型接口\",{\"1\":{\"5019\":1}}],[\"简单的说\",{\"1\":{\"4476\":1}}],[\"简单例子\",{\"1\":{\"4377\":1}}],[\"简单测试下\",{\"1\":{\"5882\":1}}],[\"简单测试\",{\"1\":{\"4359\":1}}],[\"简单说\",{\"1\":{\"2639\":1}}],[\"简单\",{\"1\":{\"2077\":1,\"2759\":1,\"2807\":1,\"4260\":1,\"6449\":1,\"6929\":1}}],[\"简单应用实例\",{\"0\":{\"2074\":1}}],[\"简单工厂模式有两种实现方式\",{\"1\":{\"1343\":1}}],[\"简单工厂模式虽然违反了\",{\"1\":{\"1215\":1}}],[\"简单工厂模式代码\",{\"1\":{\"1211\":1}}],[\"简单工厂模式的设计方案\",{\"1\":{\"1208\":1}}],[\"简单工厂模式的工厂类单一\",{\"1\":{\"1179\":1}}],[\"简单工厂模式完成案例\",{\"0\":{\"1207\":1}}],[\"简单工厂模式使用了\",{\"1\":{\"1182\":1}}],[\"简单工厂模式是\",{\"1\":{\"1170\":1}}],[\"简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例\",{\"1\":{\"1170\":1}}],[\"简单工厂模式是属于\",{\"1\":{\"1170\":1}}],[\"简单工厂模式基本介绍\",{\"0\":{\"1169\":1}}],[\"简单工厂模式\",{\"1\":{\"1162\":1,\"1171\":1,\"1172\":1,\"1206\":1,\"1212\":1,\"1260\":1,\"1262\":1,\"1264\":1,\"1266\":1,\"1268\":1,\"1318\":1}}],[\"简单工厂\",{\"0\":{\"1168\":1},\"1\":{\"1159\":1,\"1160\":1,\"1184\":1}}],[\"简单来说就是用来创建对象的\",{\"1\":{\"948\":1}}],[\"简单易操作\",{\"1\":{\"699\":1,\"1202\":1,\"1765\":1,\"2146\":1}}],[\"简单到main方法中只有一行注释\",{\"1\":{\"400\":1}}],[\"简单举几个例子\",{\"1\":{\"394\":1}}],[\"恕我直言\",{\"1\":{\"414\":1}}],[\"估计大家都看过下面这个笑话\",{\"1\":{\"410\":1}}],[\"同名的类方法应该在一个单独连续的组中出现\",{\"1\":{\"4001\":1}}],[\"同样在postgresql的jar包postgresql\",{\"1\":{\"6170\":1}}],[\"同样通过案例演示上述方法\",{\"1\":{\"6012\":1}}],[\"同样我们使用javap分析一下代码\",{\"1\":{\"4962\":1}}],[\"同样的道理\",{\"1\":{\"5945\":1}}],[\"同样的\",{\"1\":{\"4697\":1}}],[\"同样必须是public\",{\"1\":{\"4302\":1}}],[\"同样无法解决线程安全问题\",{\"1\":{\"3180\":1}}],[\"同样道理\",{\"1\":{\"2820\":1}}],[\"同样如果我们增加一个手机品牌\",{\"1\":{\"613\":1}}],[\"同一业务域内的需求变化\",{\"1\":{\"3466\":1}}],[\"同一个\",{\"1\":{\"2410\":1,\"4770\":1}}],[\"同一个线程只能对应一个对象\",{\"1\":{\"2396\":1}}],[\"同一类型的只能创建一个对象\",{\"1\":{\"2410\":1}}],[\"同步和名称注册\",{\"1\":{\"6384\":1}}],[\"同步调用应该去考量锁的性能损耗\",{\"1\":{\"3165\":1}}],[\"同步代码块\",{\"0\":{\"2309\":1},\"1\":{\"2276\":1}}],[\"同步代理\",{\"1\":{\"1915\":1}}],[\"同步方法\",{\"0\":{\"2303\":1},\"1\":{\"2275\":1,\"2304\":1,\"2310\":1,\"2311\":1,\"2313\":1}}],[\"同事对象时\",{\"1\":{\"1603\":1}}],[\"同事无法轻易修改你的代码\",{\"1\":{\"395\":1}}],[\"同宗同源\",{\"1\":{\"998\":1}}],[\"同时能够和很多的日志框架想结合\",{\"1\":{\"6946\":1}}],[\"同时支持tsv与固定宽度记录的读写\",{\"1\":{\"6338\":1}}],[\"同时结合一些q\",{\"1\":{\"5584\":1}}],[\"同时在工作中使用它\",{\"1\":{\"4845\":1}}],[\"同时在专业水平上也有所提高\",{\"1\":{\"2801\":1}}],[\"同时通过这几个内置注解中的元注解的定义来引出元注解\",{\"1\":{\"4512\":1}}],[\"同时包括对被测对象的配置\",{\"1\":{\"4481\":1}}],[\"同时还包含其它类型约定和编码规范\",{\"1\":{\"3932\":1}}],[\"同时触发成绩表中的student\",{\"1\":{\"3385\":1}}],[\"同时存在对应属性xxx的isxxx\",{\"1\":{\"3063\":1}}],[\"同时将自己\",{\"1\":{\"2962\":1}}],[\"同时将被代理对象传递给代理对象\",{\"1\":{\"1844\":1}}],[\"同时需要避免让这些操作\",{\"1\":{\"2933\":1}}],[\"同时由子类提供部分步骤的实现\",{\"1\":{\"2682\":1}}],[\"同时保证了效率\",{\"1\":{\"2313\":1}}],[\"同时解决懒加载问题\",{\"1\":{\"2313\":1}}],[\"同时变更时可以做到非常好的兼容性\",{\"1\":{\"2115\":1}}],[\"同时\",{\"1\":{\"2079\":1,\"2546\":1,\"2754\":1,\"2765\":1,\"4897\":1,\"5675\":1}}],[\"同时修改和新增\",{\"1\":{\"2019\":1}}],[\"同时添加新的功能\",{\"1\":{\"1860\":1,\"1894\":1}}],[\"同时也允许添加额外的空行\",{\"1\":{\"4101\":1}}],[\"同时也能够提高效率\",{\"1\":{\"1802\":1}}],[\"同时也充当命令接收者\",{\"1\":{\"788\":1}}],[\"同时提高效率\",{\"1\":{\"1376\":1}}],[\"同时命令模式也支持可撤销的操作\",{\"1\":{\"743\":1}}],[\"同时充当了具体的建造者\",{\"1\":{\"720\":1}}],[\"同时会导致子类臃肿\",{\"1\":{\"646\":1}}],[\"同时执行if和else中的语句块的功能\",{\"1\":{\"459\":1}}],[\"同理\",{\"1\":{\"409\":1,\"2174\":1}}],[\"执行认证\",{\"1\":{\"6598\":1}}],[\"执行完finally的语句后\",{\"1\":{\"4969\":1}}],[\"执行完成之后\",{\"1\":{\"4738\":1}}],[\"执行返回操作\",{\"1\":{\"4969\":2}}],[\"执行finally语句块里的语句\",{\"1\":{\"4778\":1}}],[\"执行finally语句块和其后的语句\",{\"1\":{\"4776\":1}}],[\"执行的顺序\",{\"1\":{\"4775\":1}}],[\"执行的是代理对象的方法\",{\"1\":{\"1844\":1}}],[\"执行程序代码\",{\"1\":{\"4774\":1}}],[\"执行结果\",{\"1\":{\"4327\":1,\"4334\":1,\"4338\":1,\"4369\":1,\"4373\":1,\"4379\":1,\"4384\":1,\"4408\":1,\"4416\":1,\"4420\":1}}],[\"执行结果会打印2\",{\"1\":{\"409\":1}}],[\"执行sql时\",{\"1\":{\"3402\":1}}],[\"执行效率更快一些\",{\"1\":{\"3383\":1}}],[\"执行效率较低\",{\"1\":{\"1462\":1}}],[\"执行过程必须完全自动化才有意义\",{\"1\":{\"3303\":1}}],[\"执行时间开销很大的方法\",{\"1\":{\"3205\":1}}],[\"执行其它业务逻辑\",{\"1\":{\"3049\":2}}],[\"执行\",{\"1\":{\"2307\":1,\"4330\":1,\"6130\":1}}],[\"执行错误\",{\"1\":{\"2002\":1}}],[\"执行代理对象的方法\",{\"1\":{\"1905\":1}}],[\"执行目标对象的方法\",{\"1\":{\"1890\":1}}],[\"执行目标对象的方法时\",{\"1\":{\"1871\":1}}],[\"执行生成目标对象\",{\"1\":{\"1889\":1}}],[\"执行速度比\",{\"1\":{\"1436\":1}}],[\"执行入口那里调用\",{\"1\":{\"1367\":1}}],[\"执行入口主要包含两部分\",{\"1\":{\"1355\":1}}],[\"执行入口就是一组暴露给外部使用的接口和类\",{\"1\":{\"1355\":1}}],[\"执行撤销的命令\",{\"1\":{\"781\":1}}],[\"执行动作\",{\"1\":{\"777\":1}}],[\"执行命令功能的相关操作\",{\"1\":{\"761\":1}}],[\"执行第二句打印语句\",{\"1\":{\"458\":1}}],[\"执行后它居然会在控制台打印\",{\"1\":{\"402\":1}}],[\"那你肯定没有遇到过为了排查依赖错误引起的问题\",{\"1\":{\"6865\":1}}],[\"那样的适应性\",{\"1\":{\"6863\":1}}],[\"那样的\",{\"1\":{\"6822\":1}}],[\"那最后的输出结果就是两行了\",{\"1\":{\"6159\":1}}],[\"那可能导致这些新创建的类一直无法被卸载\",{\"1\":{\"6120\":1}}],[\"那为什么我们往\",{\"1\":{\"5117\":1}}],[\"那使用通配符就没什么意义了\",{\"1\":{\"5046\":1}}],[\"那占用时间的\",{\"1\":{\"4985\":1}}],[\"那必须在方法头中显式声明该异常\",{\"1\":{\"4742\":1}}],[\"那它是以该类的名称作为限定\",{\"1\":{\"4235\":1}}],[\"那它就不属于常量\",{\"1\":{\"4178\":1}}],[\"那它实际上相当于一种全局变量\",{\"1\":{\"2366\":1}}],[\"那程序会直接\",{\"1\":{\"3969\":1}}],[\"那当offset特别大的时候\",{\"1\":{\"3374\":1}}],[\"那是测试同学干的事情\",{\"1\":{\"3326\":1}}],[\"那是集成测试的领域\",{\"1\":{\"3306\":1}}],[\"那是因为\",{\"1\":{\"2695\":1}}],[\"那得不偿失\",{\"1\":{\"3205\":1}}],[\"那\",{\"1\":{\"2882\":1}}],[\"那依赖它的类和它依赖的类就会比较少\",{\"1\":{\"2776\":1}}],[\"那开发就跟重构冲突了\",{\"1\":{\"2765\":1}}],[\"那从代码结构上来讲\",{\"1\":{\"2759\":1}}],[\"那现在问题来了\",{\"1\":{\"2757\":1}}],[\"那代码整体的质量就不会差\",{\"1\":{\"2755\":1}}],[\"那如何来控制代码的复杂性呢\",{\"1\":{\"2752\":1}}],[\"那如何实现一个多例模式呢\",{\"1\":{\"2408\":1}}],[\"那如何实现一个进程间也唯一的单例呢\",{\"1\":{\"2402\":1}}],[\"那如何实现一个线程唯一的单例呢\",{\"1\":{\"2392\":1}}],[\"那刚刚例子中继承存在的问题\",{\"1\":{\"2732\":1}}],[\"那估计就要组合爆炸了\",{\"1\":{\"2731\":1}}],[\"那鸵鸟就具有\",{\"1\":{\"2725\":1}}],[\"那我们怎么去重写我们想要的date类型参数的方法啊\",{\"1\":{\"5166\":1}}],[\"那我们就需要考虑是否可以通过解耦的方法\",{\"1\":{\"2759\":1}}],[\"那我们就没有必要为其扩展性\",{\"1\":{\"2719\":1}}],[\"那我们就没有必要为其设计接口\",{\"1\":{\"2718\":1}}],[\"那我们再通过\",{\"1\":{\"2728\":1}}],[\"那我们可不可以在\",{\"1\":{\"2725\":1}}],[\"那我们在编写单元测试的时候\",{\"1\":{\"2366\":1}}],[\"那也没问题\",{\"1\":{\"2712\":1}}],[\"那就没用了\",{\"1\":{\"4296\":1}}],[\"那就将它分解成它的组成部分\",{\"1\":{\"4199\":1}}],[\"那就需要再定义四个抽象类\",{\"1\":{\"2730\":1}}],[\"那就是桥方法\",{\"1\":{\"5167\":1}}],[\"那就是告诉编译器被修饰的方法是重写的父类的中的相同签名的方法\",{\"1\":{\"4516\":1}}],[\"那就是把模块与模块之间\",{\"1\":{\"2758\":1}}],[\"那就是\",{\"1\":{\"2721\":1,\"5743\":1}}],[\"那就意味着\",{\"1\":{\"2704\":1}}],[\"那就花时间来研究下设计模式是非常必要的\",{\"1\":{\"2579\":1}}],[\"那就要对代码有比较大的改动\",{\"1\":{\"2360\":1}}],[\"那集群唯一的单例实现起来就有点难度了\",{\"1\":{\"2402\":1}}],[\"那对象的唯一性的作用范围是什么呢\",{\"1\":{\"2387\":1}}],[\"那对象创建之后会缓存在\",{\"1\":{\"1363\":1,\"1368\":1}}],[\"那这个问题又该如何解决呢\",{\"1\":{\"2737\":1}}],[\"那这个时候\",{\"1\":{\"2729\":1}}],[\"那这个类就是一个单例类\",{\"1\":{\"2386\":1}}],[\"那这两个问题该如何解决呢\",{\"1\":{\"2706\":1}}],[\"那这种暴露实现细节的命名方式就不足为奇了\",{\"1\":{\"2704\":1}}],[\"那这部分工作就没法让\",{\"1\":{\"1364\":1}}],[\"那获取到的\",{\"1\":{\"2373\":1}}],[\"那到底什么是\",{\"1\":{\"2169\":1}}],[\"那自然更容易维护了\",{\"1\":{\"2011\":1}}],[\"那每次请求对象\",{\"1\":{\"1363\":1}}],[\"那项目中类的个数会成倍增加\",{\"1\":{\"1340\":1}}],[\"那何为\",{\"1\":{\"1324\":1}}],[\"那工厂类\",{\"1\":{\"1255\":1}}],[\"那么选择排除的方案是不错的\",{\"1\":{\"6877\":1}}],[\"那么选择utf8mb4来进行存储\",{\"1\":{\"3391\":1}}],[\"那么请使用class类的getfield\",{\"1\":{\"5963\":1}}],[\"那么请修改serialversionuid值\",{\"1\":{\"3060\":1}}],[\"那么返回给客户端的时候\",{\"1\":{\"5632\":1}}],[\"那么要修改所有实现了该接口的类\",{\"1\":{\"5379\":1}}],[\"那么直接暴露成员不会有特别大的影响\",{\"1\":{\"5370\":1}}],[\"那么子类中该方法的访问级别不允许低于父类的访问级别\",{\"1\":{\"5365\":1}}],[\"那么子类中两个setvalue方法\",{\"1\":{\"5161\":1}}],[\"那么还是用\",{\"1\":{\"5354\":1}}],[\"那么还是使用上面的方法\",{\"1\":{\"4977\":1}}],[\"那么在网络连接过程中\",{\"1\":{\"5295\":1}}],[\"那么上面就违背了这个原则\",{\"1\":{\"5227\":1}}],[\"那么也就是说\",{\"1\":{\"5220\":1}}],[\"那么两个地方的catch都变为原始类型object\",{\"1\":{\"5220\":1}}],[\"那么父类的getvalue方法如下\",{\"1\":{\"5175\":1}}],[\"那么父类里面的两个方法的参数都为date类型\",{\"1\":{\"5152\":1}}],[\"那么到时候取得时候\",{\"1\":{\"5144\":1}}],[\"那么当我们使用list2引用用get\",{\"1\":{\"5140\":1}}],[\"那么原始类型就是comparable\",{\"1\":{\"5107\":1}}],[\"那么原始类型就用第一个边界的类型变量类替换\",{\"1\":{\"5104\":1}}],[\"那么只能存储整数数据\",{\"1\":{\"5094\":1}}],[\"那么只需要单建idx\",{\"1\":{\"3376\":1}}],[\"那么通常我们如何用呢\",{\"1\":{\"5060\":1}}],[\"那么通过dependency\",{\"1\":{\"3429\":1}}],[\"那么通过关键字throws往上抛出\",{\"1\":{\"3292\":1}}],[\"那么如果可以再catch子句中使用泛型变量\",{\"1\":{\"5225\":1}}],[\"那么如果后面要扩展\",{\"1\":{\"571\":1}}],[\"那么如何获取泛型的参数类型呢\",{\"1\":{\"5232\":1}}],[\"那么如何进行擦除的呢\",{\"1\":{\"5076\":1}}],[\"那么如何解决呢\",{\"1\":{\"5036\":1}}],[\"那么finally导致会不会执行\",{\"1\":{\"4975\":1}}],[\"那么异常表用在什么时候呢\",{\"1\":{\"4950\":1}}],[\"那么重用arithmeticexception和numberformatexception将是非常合适的\",{\"1\":{\"4891\":1}}],[\"那么用起来会非常痛苦\",{\"1\":{\"4814\":1}}],[\"那么junit将自动将它标记为失败\",{\"1\":{\"4376\":1}}],[\"那么应使用\",{\"1\":{\"4154\":1}}],[\"那么它的构建器看起来应该是这样的\",{\"1\":{\"6807\":1}}],[\"那么它可以不加注释地被忽略\",{\"1\":{\"4232\":1}}],[\"那么它可以省略\",{\"1\":{\"4129\":1}}],[\"那么它就是用于类型的注解\",{\"1\":{\"4132\":1}}],[\"那么它会把相同的请求传给下一个接收者\",{\"1\":{\"1930\":1}}],[\"那么处理器会自动将该位置值更新为新值\",{\"1\":{\"3541\":1}}],[\"那么这两个指针此时指向的是完全不同的对象\",{\"1\":{\"5333\":1}}],[\"那么这种情形既可以被解释为illegalargumentexception\",{\"1\":{\"4892\":1}}],[\"那么这些方法的实现其实都是调用的被包装的对象的方法\",{\"1\":{\"4479\":1}}],[\"那么这些服务称为弱依赖\",{\"1\":{\"3456\":1}}],[\"那么这个arraylist可以存储任意的对象\",{\"1\":{\"5113\":1}}],[\"那么这个参数就是一个\",{\"1\":{\"4475\":1}}],[\"那么这个default方法\",{\"1\":{\"3003\":1}}],[\"那么字符计数方法需要注意\",{\"1\":{\"3391\":1}}],[\"那么成绩表中的student\",{\"1\":{\"3385\":1}}],[\"那么即使另一列有不同的值\",{\"1\":{\"3381\":1}}],[\"那么即使c的区分度更高\",{\"1\":{\"3376\":1}}],[\"那么索引有序性无法利用\",{\"1\":{\"3372\":1}}],[\"那么无法使用此索引\",{\"1\":{\"3371\":1}}],[\"那么可以将异常包装为自定义异常\",{\"1\":{\"4921\":1}}],[\"那么可以不使用throws关键字来声明要抛出的异常\",{\"1\":{\"4748\":1}}],[\"那么可以用\",{\"1\":{\"4305\":1}}],[\"那么可以利用此功能骚扰到其它用户\",{\"1\":{\"3345\":1}}],[\"那么可以输出trace和debug级别的日志\",{\"1\":{\"3289\":1}}],[\"那么单元测试几乎处于废弃状态\",{\"1\":{\"3328\":1}}],[\"那么c会强制拆箱成int类型\",{\"1\":{\"3189\":1}}],[\"那么线程二的加锁顺序也必须是a\",{\"1\":{\"3166\":1}}],[\"那么指定默认值\",{\"1\":{\"3123\":1}}],[\"那么试一下把\",{\"1\":{\"3118\":1}}],[\"那么必须覆写hashcode和equals\",{\"1\":{\"3089\":1}}],[\"那么你会担心的\",{\"1\":{\"3076\":1}}],[\"那么限制为protected\",{\"1\":{\"3076\":1}}],[\"那么构造方法必须是private\",{\"1\":{\"3076\":1}}],[\"那么有义务同时提供新的接口\",{\"1\":{\"3044\":1}}],[\"那么\",{\"1\":{\"2881\":1,\"2972\":1,\"3242\":1,\"5122\":1,\"5140\":1,\"5218\":2,\"5225\":1}}],[\"那么他们之间就存在依赖关系\",{\"1\":{\"2851\":1}}],[\"那么是\",{\"1\":{\"2828\":1}}],[\"那么利用解耦的方法对代码重构\",{\"1\":{\"2752\":1}}],[\"那么继承就影响非常大\",{\"1\":{\"2525\":1}}],[\"那么类型\",{\"1\":{\"2104\":1}}],[\"那么类\",{\"1\":{\"2037\":1,\"2053\":1}}],[\"那么就必须满足里式替换原则\",{\"1\":{\"5384\":1}}],[\"那么就需要去修改所有的客户端代码\",{\"1\":{\"5366\":1}}],[\"那么就会从\",{\"1\":{\"5292\":1}}],[\"那么就会引用相同的对象\",{\"1\":{\"5272\":1}}],[\"那么就应该直接跳转到友好错误页面\",{\"1\":{\"3418\":1}}],[\"那么就不会被拦截\",{\"1\":{\"1907\":1}}],[\"那么就可以把代码写成下面这个样子\",{\"1\":{\"407\":1}}],[\"那么再创键一个类\",{\"1\":{\"1799\":1}}],[\"那么浅拷贝会进行引用传递\",{\"1\":{\"1781\":1}}],[\"那么棋子对象就可以减少到只有两个实例\",{\"1\":{\"1389\":1}}],[\"那么调用方式就不是确定的\",{\"1\":{\"571\":1}}],[\"那么常规写法如下\",{\"1\":{\"552\":1}}],[\"那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求\",{\"1\":{\"549\":1}}],[\"那么我们今天就假装自己是一个c语言程序员\",{\"1\":{\"462\":1}}],[\"那么相当于什么都不做\",{\"1\":{\"430\":1}}],[\"那么问题来了\",{\"1\":{\"429\":1}}],[\"那些长期坚持运动的人\",{\"1\":{\"140\":1}}],[\"当eclipse启动时\",{\"1\":{\"6215\":1}}],[\"当其他的程序需要这个服务的时候\",{\"1\":{\"6144\":1}}],[\"当服务的提供者提供了一种接口的实现之后\",{\"1\":{\"6144\":1}}],[\"当找到需要的方法\",{\"1\":{\"6129\":1}}],[\"当编译一个新类时\",{\"1\":{\"5515\":1}}],[\"当出现乘法溢出\",{\"1\":{\"5446\":1}}],[\"当类定义中的类型参数存在限制\",{\"1\":{\"5082\":1}}],[\"当类定义中的类型参数没有任何限制时\",{\"1\":{\"5079\":1}}],[\"当在方法上声明抛出异常时\",{\"1\":{\"4894\":1}}],[\"当使用类似inputstream这种需要使用后关闭的资源时\",{\"1\":{\"4859\":1}}],[\"当使用到该方法时\",{\"1\":{\"2298\":1}}],[\"当应用程序试图使用class类中的newinstance\",{\"1\":{\"4840\":1}}],[\"当应用程序需要使用某个类对象的时候\",{\"1\":{\"1327\":1}}],[\"当应用试图根据字符串形式的类名构造类\",{\"1\":{\"4822\":1}}],[\"当应用试图在要求使用对象的地方使用了null时\",{\"1\":{\"4821\":1}}],[\"当执行到某一条语句出现异常时\",{\"1\":{\"4778\":1}}],[\"当try和catch中有return时\",{\"1\":{\"5709\":1}}],[\"当try语句块里的某条语句出现异常时\",{\"1\":{\"4777\":1}}],[\"当try语句块内发生异常时\",{\"1\":{\"4736\":1}}],[\"当try捕获到异常\",{\"1\":{\"4777\":1,\"4778\":1}}],[\"当try没有捕获到异常时\",{\"1\":{\"4776\":1}}],[\"当某个子系统故障\",{\"1\":{\"4756\":1}}],[\"当某一列的值全是null时\",{\"1\":{\"3382\":1}}],[\"当方法的调用者无力处理该异常的时候\",{\"1\":{\"4750\":1}}],[\"当方法的代码总行数超过\",{\"1\":{\"3191\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"4723\":1,\"4729\":1}}],[\"当此类错误发生时\",{\"1\":{\"4718\":1}}],[\"当条件生成时\",{\"1\":{\"4708\":1}}],[\"当class文件被装载时被保存在class文件中的annotation才会被虚拟机读取\",{\"1\":{\"4623\":1}}],[\"当块标签不能写在一行的时候\",{\"1\":{\"4251\":1}}],[\"当整个\",{\"1\":{\"4247\":1}}],[\"当父类方法是\",{\"1\":{\"4227\":1}}],[\"当写多行注释的时候\",{\"1\":{\"4154\":1}}],[\"当且仅当两行代码以平级的语法元素开头时\",{\"1\":{\"4057\":1}}],[\"当进行连续换行时\",{\"1\":{\"4057\":1}}],[\"当进程读到代码中的\",{\"1\":{\"2389\":1}}],[\"当语句块结束时\",{\"1\":{\"4024\":1}}],[\"当语言的文法较为简单\",{\"1\":{\"1497\":1}}],[\"当它不是\",{\"1\":{\"4019\":1}}],[\"当jvm没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时\",{\"1\":{\"3547\":1}}],[\"当调用链路中某个下游服务调用的平均响应时间或错误率超过阈值时\",{\"1\":{\"3456\":1}}],[\"当调用空命令时\",{\"1\":{\"777\":1}}],[\"当并发连接数很大时很容易因为fd不足而出现\",{\"1\":{\"3444\":1}}],[\"当用户浏览时\",{\"1\":{\"3342\":1}}],[\"当用户在低版本与高版本之间反复切换工作时\",{\"1\":{\"3237\":1}}],[\"当用户需要时能够比较方便地将数据恢复到某个历史的状态\",{\"1\":{\"1622\":1}}],[\"当确实有业务需要传较大内容时\",{\"1\":{\"3231\":1}}],[\"当一行代码的中断发生在\",{\"1\":{\"4042\":1,\"4048\":1}}],[\"当一次退货商品数量过多时\",{\"1\":{\"3230\":1}}],[\"当一个异常发生时\",{\"1\":{\"4951\":1}}],[\"当一个注解被元注解\",{\"1\":{\"4132\":1}}],[\"当一个对象发生改变时\",{\"1\":{\"2625\":1}}],[\"当一个对象的行为取决于它的状态\",{\"1\":{\"2481\":1}}],[\"当一个对象的内在状态改变时\",{\"1\":{\"2419\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"1668\":1}}],[\"当一个项目开发完后\",{\"1\":{\"2575\":1}}],[\"当一个抽象模型有两个方面\",{\"1\":{\"1733\":1}}],[\"当一个语言需要解释执行\",{\"1\":{\"1499\":1}}],[\"当一个复杂系统的子系统很多时\",{\"1\":{\"1154\":1}}],[\"当一个系统的功能越来越强\",{\"1\":{\"1094\":1}}],[\"当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时\",{\"1\":{\"644\":1}}],[\"当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时\",{\"1\":{\"643\":1}}],[\"当一个类有多个构造方法\",{\"1\":{\"3066\":1}}],[\"当一个类存在两个独立变化的维度\",{\"1\":{\"642\":1}}],[\"当一个类内部具备两种或多种变化维度时\",{\"1\":{\"639\":1}}],[\"当一个int类型的数字在无符号右移31位后\",{\"1\":{\"426\":1}}],[\"当switch括号内的变量类型为string并且此变量为外部参数时\",{\"1\":{\"3185\":1}}],[\"当放置的集合元素个数达千万级时会影响程序性能\",{\"1\":{\"3123\":1}}],[\"当入参是java\",{\"1\":{\"3081\":1}}],[\"当看完某个歌手表演后\",{\"1\":{\"2955\":1}}],[\"当给软件系统建模时\",{\"1\":{\"2822\":1}}],[\"当多个子类存在公共的行为时\",{\"1\":{\"2687\":1}}],[\"当策略过多是会导致类数目庞\",{\"1\":{\"2552\":1}}],[\"当状态过多时会产生很多类\",{\"1\":{\"2478\":1}}],[\"当控制一个对象状态转换的条件表达式过于复杂时\",{\"1\":{\"2417\":1}}],[\"当想实例化一个单例类的时候\",{\"1\":{\"2338\":1}}],[\"当想创建一个运行于多个类之间的对象\",{\"1\":{\"1614\":1}}],[\"当软件需要变化时\",{\"1\":{\"2130\":1}}],[\"当实现某一个功能存在多种算法或者策略\",{\"1\":{\"2486\":1}}],[\"当实现这个接口的时候\",{\"1\":{\"2048\":1}}],[\"当实现深克隆时\",{\"1\":{\"1748\":1}}],[\"当修改一个功能时\",{\"1\":{\"2012\":1}}],[\"当职责\",{\"1\":{\"2002\":1}}],[\"当工作流程发生变化\",{\"1\":{\"1935\":1}}],[\"当有状态的对象与外部事件产生互动时\",{\"1\":{\"2415\":1}}],[\"当有请求发生时\",{\"1\":{\"1929\":1}}],[\"当有一个语言需要解释执行\",{\"1\":{\"1493\":1}}],[\"当无法或不想直接引用某个对象或访问某个对象存在困难时\",{\"1\":{\"1918\":1}}],[\"当请求图片文件等资源时\",{\"1\":{\"1912\":1}}],[\"当前类型为o<t>\",{\"1\":{\"5236\":1}}],[\"当前类上找不到注解\",{\"1\":{\"4632\":1}}],[\"当前执行的语句必属于某个方法\",{\"1\":{\"4742\":1}}],[\"当前主要是velocity渲染\",{\"1\":{\"3411\":1}}],[\"当前的最新版本是黄山版\",{\"1\":{\"2982\":1}}],[\"当前的状态\",{\"1\":{\"2471\":1}}],[\"当前状态\",{\"1\":{\"2471\":1}}],[\"当前状态不能发奖品\",{\"1\":{\"2454\":1}}],[\"当前状态不能抽奖\",{\"1\":{\"2454\":1}}],[\"当前状态可以扣积分\",{\"1\":{\"2454\":1}}],[\"当前状态是\",{\"1\":{\"2438\":2}}],[\"当前这个对象以对象流的方式输出\",{\"1\":{\"1795\":1}}],[\"当前系统业务所期待的接口\",{\"1\":{\"499\":1}}],[\"当对数组的索引值为负数或大于等于数组大小时抛出\",{\"1\":{\"4819\":1}}],[\"当对静态类的成员的引用必须是有所限定的时候\",{\"1\":{\"4235\":1}}],[\"当对\",{\"1\":{\"4230\":1}}],[\"当对已有类进行改造的时候\",{\"1\":{\"1747\":1}}],[\"当对象需要被共享的场合\",{\"1\":{\"2348\":1}}],[\"当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时\",{\"1\":{\"1613\":1}}],[\"当对象的创建逻辑比较复杂\",{\"1\":{\"1254\":1}}],[\"当对象的功能要求可以动态地添加\",{\"1\":{\"942\":1}}],[\"当增加一个第三方\",{\"1\":{\"1709\":1}}],[\"当增加一个新的产品族时\",{\"1\":{\"1285\":1}}],[\"当第三方再次获取时\",{\"1\":{\"1698\":1}}],[\"当第一次调用judge\",{\"1\":{\"457\":1}}],[\"当数据有更新时\",{\"1\":{\"1698\":1,\"1702\":1,\"1718\":2}}],[\"当接到具体主题的更改通知时被调用\",{\"1\":{\"1681\":1}}],[\"当具体主题的内部状态发生改变时\",{\"1\":{\"1680\":1}}],[\"当观察者对象很多时\",{\"1\":{\"1675\":1}}],[\"当大战\",{\"1\":{\"1638\":1}}],[\"当各电器对象有多种状态改变时\",{\"1\":{\"1592\":1}}],[\"当同事类越多时\",{\"1\":{\"1576\":1}}],[\"当访问一个聚合对象的内容而无须暴露其内部细节的表示时\",{\"1\":{\"1562\":1}}],[\"当要做回退时\",{\"1\":{\"1619\":1}}],[\"当要展示一组相似对象\",{\"1\":{\"1557\":1}}],[\"当要解释的句子较复杂时\",{\"1\":{\"1462\":1}}],[\"当问题重复出现\",{\"1\":{\"1498\":1}}],[\"当遍历完整个\",{\"1\":{\"1489\":1}}],[\"当包含的文法规则很多时\",{\"1\":{\"1463\":1}}],[\"当客户端需要该对象的某一个职责时\",{\"1\":{\"2006\":1}}],[\"当客户端要遍历这些集合元素的时候就要使用多种遍历方式\",{\"1\":{\"1505\":1}}],[\"当客户端与多个子系统之间存在很大的联系时\",{\"1\":{\"1155\":1}}],[\"当客户对象请求一个享元对象时\",{\"1\":{\"1396\":1}}],[\"当创建对象是一个\",{\"1\":{\"1324\":1}}],[\"当产品族中需要增加一个新的产品时\",{\"1\":{\"1287\":1}}],[\"当需要控制子类的扩展时\",{\"1\":{\"2688\":1}}],[\"当需要增加新的功能时\",{\"1\":{\"2584\":1}}],[\"当需要与其他同事对象交互时\",{\"1\":{\"1582\":1}}],[\"当需要为遍历不同的聚合结构提供一个统一的接口时\",{\"1\":{\"1561\":1}}],[\"当需要为聚合对象提供多种遍历方式时\",{\"1\":{\"1560\":1}}],[\"当需要产品族时\",{\"1\":{\"1284\":1}}],[\"当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时\",{\"1\":{\"941\":1}}],[\"当需要给一个现有类添加附加职责\",{\"1\":{\"940\":1}}],[\"当需要创建的产品具备复杂创建过程时\",{\"1\":{\"732\":1}}],[\"当系统弱依赖于多个外部服务时\",{\"1\":{\"3456\":1}}],[\"当系统一方行为依赖另一方行为的变动时\",{\"1\":{\"1730\":1}}],[\"当系统增加一个新的电器对象时\",{\"1\":{\"1595\":1}}],[\"当系统中存在类型数量稳定\",{\"1\":{\"2974\":1}}],[\"当系统中多处需要同一组信息时\",{\"1\":{\"1446\":1}}],[\"当系统中有大量相似对象\",{\"1\":{\"1376\":1}}],[\"当系统需要进行分层设计时\",{\"1\":{\"1148\":1}}],[\"当系统需要支持命令的撤销\",{\"1\":{\"803\":1}}],[\"当系统需要执行一组操作时\",{\"1\":{\"802\":1}}],[\"当系统的某项操作具备命令语义\",{\"1\":{\"798\":1}}],[\"当桥接\",{\"1\":{\"657\":1}}],[\"当我们理解了内置注解\",{\"1\":{\"4640\":1}}],[\"当我们运行几个有关联的用例时\",{\"1\":{\"4298\":1}}],[\"当我们\",{\"1\":{\"2454\":1}}],[\"当我们使用命令行或者双击运行这个可执行文件的时候\",{\"1\":{\"2389\":1}}],[\"当我们修改这个类的某一个功能代码的时候\",{\"1\":{\"2176\":1}}],[\"当我们开车到交叉路口时\",{\"1\":{\"1667\":1}}],[\"当我们落子后\",{\"1\":{\"1385\":1}}],[\"当我们会用到大量的创建某种\",{\"1\":{\"1173\":1}}],[\"当我们增加新的功能后\",{\"1\":{\"2585\":1,\"2586\":1}}],[\"当我们增加一个单品咖啡\",{\"1\":{\"908\":1}}],[\"当我们增加手机样式时\",{\"1\":{\"614\":1}}],[\"当我们要更改组合对象时\",{\"1\":{\"865\":1}}],[\"当我们从纯代码角度无法看清问题时\",{\"1\":{\"647\":1}}],[\"当做类\",{\"1\":{\"575\":1}}],[\"当不需要全部实现接口提供的方法时\",{\"1\":{\"549\":1}}],[\"当然后面看来\",{\"1\":{\"6098\":1}}],[\"当然关于field类还有其他常用的方法如下\",{\"1\":{\"5965\":1}}],[\"当然如果只是看简简单单的代码\",{\"1\":{\"4940\":1}}],[\"当然这也有好的一面\",{\"1\":{\"2804\":1}}],[\"当然外界也会影响其情绪变化\",{\"1\":{\"2415\":1}}],[\"当然也可以推送\",{\"1\":{\"1698\":1}}],[\"当然也可以通过环境角色间接访问解释器的解释方法\",{\"1\":{\"1472\":1}}],[\"当然了\",{\"1\":{\"468\":1,\"6844\":1}}],[\"当然是用在某些不想让别人看懂的地方\",{\"1\":{\"410\":1}}],[\"当然\",{\"1\":{\"407\":1,\"587\":1,\"2592\":1,\"2725\":1,\"2759\":1,\"4146\":1,\"5031\":1,\"6835\":1,\"6888\":1}}],[\"当你想快速试验的时候它能为你节省大量的时间\",{\"1\":{\"6982\":1}}],[\"当你拥有了旗舰版的\",{\"1\":{\"6977\":1}}],[\"当你从一个构造器中调用另一个构造器\",{\"1\":{\"5621\":1}}],[\"当你从类转向模式\",{\"1\":{\"2793\":1}}],[\"当你尝试首先捕获较不具体的异常时\",{\"1\":{\"4899\":1}}],[\"当你在更新依赖\",{\"1\":{\"5664\":1}}],[\"当你在\",{\"1\":{\"4868\":1}}],[\"当你抛出或捕获异常的时候\",{\"1\":{\"4844\":1}}],[\"当你开始着手想办法的时候\",{\"1\":{\"152\":1}}],[\"当你看到别人的缺点时\",{\"1\":{\"142\":1}}],[\"就无需多言了\",{\"1\":{\"6957\":1}}],[\"就有\",{\"1\":{\"6881\":1}}],[\"就有可能导致接口定义不够抽象\",{\"1\":{\"2712\":1}}],[\"就成了很自然的选择\",{\"1\":{\"6880\":1}}],[\"就要注意了\",{\"1\":{\"6839\":1}}],[\"就去读取配置文件中的具体实现\",{\"1\":{\"6262\":1}}],[\"就实现了动态添加新的插件\",{\"1\":{\"6215\":1}}],[\"就加载了这个类\",{\"1\":{\"5860\":1}}],[\"就返回原对象的一个拷贝\",{\"1\":{\"5634\":1}}],[\"就相当于重新创建serviceloader了\",{\"1\":{\"6258\":1}}],[\"就相当于下面的这样\",{\"1\":{\"5220\":1}}],[\"就相当于是进程内唯一\",{\"1\":{\"2401\":1}}],[\"就只是去调用我们自己重写的那两个方法\",{\"1\":{\"5170\":1}}],[\"就只能选择第一种包含\",{\"1\":{\"1255\":1}}],[\"就比如arraylist中\",{\"1\":{\"5113\":1}}],[\"就代表着我们不知道具体的类型是什么\",{\"1\":{\"5029\":1}}],[\"就必须采取某种方式进行处理\",{\"1\":{\"4728\":1}}],[\"就必须覆写hashcode\",{\"1\":{\"3089\":1}}],[\"就没有这个限制了\",{\"1\":{\"4485\":1}}],[\"就没有达到\",{\"1\":{\"2290\":1}}],[\"就好像它是个完整的句子\",{\"1\":{\"4254\":1}}],[\"就好像是在开始一段新的代码块\",{\"1\":{\"4122\":1}}],[\"就重新抛出一个作为\",{\"1\":{\"4229\":1}}],[\"就直接return\",{\"1\":{\"3288\":1}}],[\"就直接从缓存池返回\",{\"1\":{\"1436\":1}}],[\"就失去了导航的意义\",{\"1\":{\"3215\":1}}],[\"就隐藏了很多容易出问题的\",{\"1\":{\"2702\":1}}],[\"就曾经说过\",{\"1\":{\"2597\":1}}],[\"就构成了一个操作系统可以执行的文件\",{\"1\":{\"2388\":1}}],[\"就行了\",{\"1\":{\"2307\":1}}],[\"就执行静态代码块中的代码\",{\"1\":{\"2295\":1}}],[\"就够\",{\"1\":{\"2260\":1}}],[\"就越有利于实现可复用的目标\",{\"1\":{\"2179\":1}}],[\"就存在\",{\"1\":{\"2094\":1}}],[\"就存在强耦合关系\",{\"1\":{\"1965\":1}}],[\"就需要提及exception\",{\"1\":{\"4937\":1}}],[\"就需要在代理对象\",{\"1\":{\"1836\":1}}],[\"就需要增加各个品牌手机的类\",{\"1\":{\"613\":1}}],[\"就像完全没有泛型一样\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"就像康熙字典的生僻字一样\",{\"1\":{\"3251\":1}}],[\"就像公路网与导航软件更新不同步一样\",{\"1\":{\"3215\":1}}],[\"就像数学符号和化学符号一样\",{\"1\":{\"2809\":1}}],[\"就像一个\",{\"1\":{\"2003\":1}}],[\"就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单\",{\"1\":{\"1738\":1}}],[\"就像下面的这个例子中\",{\"1\":{\"449\":1}}],[\"就不用再加载了\",{\"1\":{\"6063\":1}}],[\"就不用写了\",{\"1\":{\"856\":1}}],[\"就不需要手动关闭\",{\"1\":{\"5670\":1}}],[\"就不需要去修改核心类\",{\"1\":{\"1721\":1}}],[\"就不要为其写文档了\",{\"1\":{\"6848\":1}}],[\"就不要用类锁\",{\"1\":{\"3165\":1}}],[\"就不要用锁\",{\"1\":{\"3165\":1}}],[\"就不要锁整个方法体\",{\"1\":{\"3165\":1}}],[\"就不符合要求\",{\"1\":{\"2707\":1}}],[\"就看到最新的信息\",{\"1\":{\"1718\":1}}],[\"就主动的调用\",{\"1\":{\"1718\":1}}],[\"就调用\",{\"1\":{\"1702\":1,\"1718\":1}}],[\"就对应一个保存对象状态的对象\",{\"1\":{\"1641\":1}}],[\"就解决了\",{\"1\":{\"1569\":1}}],[\"就得到最后\",{\"1\":{\"1489\":1}}],[\"就得修改原来的代码\",{\"1\":{\"571\":1}}],[\"就表示共享\",{\"1\":{\"1438\":1}}],[\"就创建要给\",{\"1\":{\"1489\":1}}],[\"就创建新的\",{\"1\":{\"1436\":1}}],[\"就创建一个网站\",{\"1\":{\"1429\":1}}],[\"就几行代码而已\",{\"1\":{\"1253\":1}}],[\"就意味着\",{\"1\":{\"1205\":1}}],[\"就会编译出错\",{\"1\":{\"5609\":1}}],[\"就会抛出\",{\"1\":{\"5459\":1}}],[\"就会抛异常\",{\"1\":{\"3388\":1}}],[\"就会创建对应的运行时常量池\",{\"1\":{\"5315\":1}}],[\"就会有编译错误\",{\"1\":{\"5140\":1}}],[\"就会对这个引用调用的方法进行类型检测\",{\"1\":{\"5134\":1}}],[\"就会对整个继承体系造成破坏\",{\"1\":{\"2098\":1}}],[\"就会产生意外情况\",{\"1\":{\"3273\":1}}],[\"就会触发unsupportedoperationexception异常\",{\"1\":{\"3102\":1}}],[\"就会影响所有子类的逻辑\",{\"1\":{\"2731\":1}}],[\"就会使用到工厂模式\",{\"1\":{\"1173\":1}}],[\"就会出现\",{\"1\":{\"908\":1}}],[\"就会用方便的方式解决早餐问题\",{\"1\":{\"875\":1}}],[\"就会发现\",{\"1\":{\"152\":1}}],[\"就使用\",{\"1\":{\"5046\":1}}],[\"就使用到享元模式\",{\"1\":{\"1436\":1}}],[\"就使用到了命令模式\",{\"1\":{\"785\":1}}],[\"就使用了策略模式\",{\"1\":{\"2543\":1}}],[\"就使用了简单工厂模式\",{\"1\":{\"1312\":1}}],[\"就使用了组合模式\",{\"1\":{\"860\":1}}],[\"就使用了适配器模式\",{\"1\":{\"568\":1}}],[\"就可以使用该服务了\",{\"1\":{\"6144\":1}}],[\"就可以通过查找这个jar包\",{\"1\":{\"6144\":1}}],[\"就可以直接使用缓冲池中的对象\",{\"1\":{\"5280\":1}}],[\"就可以重定义该算法的某些特定步骤\",{\"1\":{\"2639\":1}}],[\"就可以自动释放它\",{\"1\":{\"1923\":1}}],[\"就可以了\",{\"1\":{\"1569\":1}}],[\"就可以考虑使用状态模式\",{\"1\":{\"2481\":1}}],[\"就可以考虑使用解释器模式\",{\"1\":{\"1493\":1}}],[\"就可以考虑使用建造者模式\",{\"1\":{\"731\":1}}],[\"就可以多线程的执行命令\",{\"1\":{\"794\":1}}],[\"就可以控制全部智能家电\",{\"1\":{\"769\":1}}],[\"就可以控制对这些家电工作\",{\"1\":{\"768\":1}}],[\"就可以搞复杂点\",{\"1\":{\"465\":1}}],[\"就是为你而生\",{\"1\":{\"6946\":1}}],[\"就是为了解决类型转换的问题\",{\"1\":{\"5140\":1,\"5143\":1}}],[\"就是应用类加载器\",{\"1\":{\"6258\":1}}],[\"就是定义接口\",{\"1\":{\"6229\":1}}],[\"就是我们普通的连接数据库的代码\",{\"1\":{\"6176\":1}}],[\"就是匹配到方法名\",{\"1\":{\"6102\":1}}],[\"就是如何比较构造是否是要查找构造器\",{\"1\":{\"6082\":1}}],[\"就是在方法中不能对参数做任何修改\",{\"1\":{\"5743\":1}}],[\"就是在类装载的时候就完成实例化\",{\"1\":{\"2288\":1}}],[\"就是java\",{\"1\":{\"5621\":1}}],[\"就是先判断值是否在缓存池中\",{\"1\":{\"5268\":1}}],[\"就是编译器自己生成的桥方法\",{\"1\":{\"5170\":1}}],[\"就是擦除去了泛型信息\",{\"1\":{\"5097\":1}}],[\"就是类似这样的代码\",{\"1\":{\"4975\":1}}],[\"就是运行测试程序所需要的先决条件\",{\"1\":{\"4481\":1}}],[\"就是那些没有使用到的\",{\"1\":{\"4476\":1}}],[\"就是需求的新增\",{\"1\":{\"3471\":1}}],[\"就是当对集合中的不同类型数据\",{\"1\":{\"2975\":1}}],[\"就是聚合\",{\"1\":{\"2881\":1}}],[\"就是组合了\",{\"1\":{\"2882\":1}}],[\"就是组合\",{\"1\":{\"2881\":1}}],[\"就是其中的一种标准\",{\"1\":{\"2820\":1}}],[\"就是保证代码不至于复杂到无法控制的有效手段\",{\"1\":{\"2752\":1}}],[\"就是一种\",{\"1\":{\"5763\":1}}],[\"就是一组\",{\"1\":{\"2694\":1}}],[\"就是一个类应该只有一个引起变化的原因\",{\"1\":{\"1556\":1}}],[\"就是一个装饰者\",{\"1\":{\"930\":1}}],[\"就是一个接口\",{\"1\":{\"628\":1}}],[\"就是一个接口适配器\",{\"1\":{\"556\":1}}],[\"就是理解其中的\",{\"1\":{\"2694\":1}}],[\"就是实现了\",{\"1\":{\"2546\":1}}],[\"就是刚刚说的\",{\"1\":{\"2410\":1}}],[\"就是下面这个样子\",{\"1\":{\"2378\":1,\"2408\":1,\"2735\":1}}],[\"就是经典的单例模式\",{\"1\":{\"2334\":1}}],[\"就是指相近的功能应该放到同一个类中\",{\"1\":{\"2170\":1}}],[\"就是原型模式\",{\"1\":{\"1776\":1}}],[\"就是要把\",{\"1\":{\"1556\":1}}],[\"就是充当了聚合接口\",{\"1\":{\"1549\":1}}],[\"就是\",{\"1\":{\"1487\":1,\"2259\":1,\"4462\":1}}],[\"就是就是具体值\",{\"1\":{\"1487\":1}}],[\"就是公式\",{\"1\":{\"1487\":1}}],[\"就是使用享元模式返回\",{\"1\":{\"1436\":1}}],[\"就是使用装饰者模式\",{\"1\":{\"937\":1}}],[\"就是单品咖啡\",{\"1\":{\"906\":1,\"907\":1}}],[\"就是对咖啡的描述\",{\"1\":{\"904\":1}}],[\"就是输出\",{\"1\":{\"852\":1,\"854\":1}}],[\"就是将\",{\"1\":{\"575\":1}}],[\"就是让他在遇到条件判断时失去基本判断能力\",{\"1\":{\"433\":1}}],[\"就能很好地得到解决\",{\"1\":{\"2417\":1}}],[\"就能很容易识别出来\",{\"1\":{\"2358\":1}}],[\"就能实现该类的方法\",{\"1\":{\"2083\":1}}],[\"就能使用该类的方法\",{\"1\":{\"2067\":1}}],[\"就能得到最新数据\",{\"1\":{\"1698\":1}}],[\"就能够实现上面提到的功能\",{\"1\":{\"452\":1}}],[\"就能同时输出if和else中的打印语句\",{\"1\":{\"451\":1}}],[\"就能解释为什么能够执行注释中的语句了\",{\"1\":{\"407\":1}}],[\"还为常见系统函数提供了接口\",{\"1\":{\"6527\":1}}],[\"还可以扩展自定义的svg标签\",{\"1\":{\"6454\":1}}],[\"还可以通过程序员自己来保证\",{\"1\":{\"2383\":1}}],[\"还会存在竞态条件\",{\"1\":{\"5605\":1}}],[\"还会带来url维护不一致的问题\",{\"1\":{\"3448\":1}}],[\"还会解析unicode编码将它替换成对应的字符\",{\"1\":{\"405\":1}}],[\"还必须指出该方法做什么事情\",{\"1\":{\"3209\":1}}],[\"还能指导粗粒度的系统\",{\"1\":{\"2753\":1}}],[\"还需要显式地将对象从内存中删除\",{\"1\":{\"2404\":1}}],[\"还需要注意不同测试用例之间\",{\"1\":{\"2366\":1}}],[\"还代表了线程内\",{\"1\":{\"2394\":1}}],[\"还未来得及往下执行\",{\"1\":{\"2301\":1}}],[\"还是通过\",{\"1\":{\"6105\":1}}],[\"还是有很多新的特性\",{\"1\":{\"5670\":1}}],[\"还是\",{\"0\":{\"5602\":1,\"5612\":1}}],[\"还是object类型的呢\",{\"1\":{\"5144\":1}}],[\"还是long型的\",{\"1\":{\"3012\":1}}],[\"还是需要付出额外努力的\",{\"1\":{\"2789\":1}}],[\"还是那句话\",{\"1\":{\"2749\":1}}],[\"还是要自己强转\",{\"1\":{\"5144\":1}}],[\"还是要回归到设计原则诞生的初衷上来\",{\"1\":{\"2716\":1}}],[\"还是要使用java中的魔法类unsafe\",{\"1\":{\"463\":1}}],[\"还是指进程内只允许创建一个对象\",{\"1\":{\"2387\":1}}],[\"还是无法解决\",{\"1\":{\"2382\":1}}],[\"还是直接调用模块好\",{\"1\":{\"1150\":1}}],[\"还是组合对象\",{\"1\":{\"811\":1}}],[\"还有顾客在商场购物时放在\",{\"1\":{\"2929\":1}}],[\"还有一点也许会有疑问\",{\"1\":{\"5180\":1}}],[\"还有一个点\",{\"1\":{\"6082\":1}}],[\"还有一个中间层次\",{\"1\":{\"2793\":1}}],[\"还有一个直接的衡量标准\",{\"1\":{\"2758\":1}}],[\"还有一些其他的支持\",{\"1\":{\"6881\":1}}],[\"还有一些设计模式也是为了解耦依赖\",{\"1\":{\"2784\":1}}],[\"还有一些设计模式会固定使用继承或者组合\",{\"1\":{\"2744\":1}}],[\"还有一些特殊的场景要求我们必须使用继承\",{\"1\":{\"2747\":1}}],[\"还有一种理解方式\",{\"1\":{\"2410\":1}}],[\"还有另外一种使用方法\",{\"1\":{\"2380\":1}}],[\"还有异常处理中\",{\"1\":{\"1928\":1}}],[\"还有因为安全原因需要屏蔽客户端直接访问真实对象\",{\"1\":{\"1810\":1}}],[\"还有数据库中事务操作\",{\"1\":{\"1664\":1}}],[\"还有在\",{\"1\":{\"1620\":1}}],[\"还有大家常用的\",{\"1\":{\"1570\":1}}],[\"还有就是手机的重启功能\",{\"1\":{\"1126\":1}}],[\"还有\",{\"1\":{\"943\":1,\"1282\":1,\"1505\":1,\"1667\":1,\"1928\":1,\"2258\":1,\"6958\":1}}],[\"还有汽车中的方向盘\",{\"1\":{\"662\":1}}],[\"还有线程调度\",{\"1\":{\"478\":1}}],[\"还有很多高级一点的用法\",{\"1\":{\"468\":1}}],[\"还不会编写\",{\"1\":{\"36\":1}}],[\"而加载的过程是由springfactoriesloader加载的\",{\"1\":{\"6218\":1}}],[\"而通过字节码生存的则考虑了卸载功能\",{\"1\":{\"6128\":1}}],[\"而通配符形式本来就需要自己强转\",{\"1\":{\"5197\":1}}],[\"而反射生成的类\",{\"1\":{\"6121\":1}}],[\"而getparametertypes\",{\"1\":{\"6050\":1}}],[\"而getdeclaredmethod\",{\"1\":{\"6016\":1}}],[\"而get\",{\"1\":{\"5965\":1}}],[\"而getvalue却有普遍的意义\",{\"1\":{\"5174\":1}}],[\"而boolean和浮点型不可以\",{\"1\":{\"5690\":1}}],[\"而对stringbuffer和stringbuilder的操作是对对象本身的操作\",{\"1\":{\"5687\":1}}],[\"而对于hashmap\",{\"1\":{\"5652\":1}}],[\"而对于下面的代码来说是成立的\",{\"1\":{\"5195\":1}}],[\"而stringbuffer和stringbuilder是可变字符序列\",{\"1\":{\"5687\":1}}],[\"而嵌套静态类没有这个要求\",{\"1\":{\"5666\":1}}],[\"而静态内部类不需要\",{\"1\":{\"5496\":1}}],[\"而静态变量和静态方法不需要使用对象来调用\",{\"1\":{\"5211\":1}}],[\"而接口能更好的定义类型\",{\"1\":{\"5677\":1}}],[\"而接口更像是一种\",{\"1\":{\"5384\":1}}],[\"而接口隔离原则注重的是对接口依赖的隔离\",{\"1\":{\"2040\":1}}],[\"而堆区\",{\"1\":{\"5315\":1}}],[\"而字符串常量池是这个过程中常量字符串的存放位置\",{\"1\":{\"5315\":1}}],[\"而运行时能起作用的技术最好的就是反射了\",{\"1\":{\"5206\":1}}],[\"而子类重写的方法是\",{\"1\":{\"5177\":1}}],[\"而子类的类型是date\",{\"1\":{\"5159\":1}}],[\"而桥方法的内部实现\",{\"1\":{\"5170\":1}}],[\"而打在我们自己定义的setvalue和getvalue方法上面的\",{\"1\":{\"5170\":1}}],[\"而无法获取\",{\"1\":{\"5759\":1}}],[\"而无关它真正引用的对象\",{\"1\":{\"5134\":1}}],[\"而无需指明具体的类\",{\"1\":{\"1277\":1}}],[\"而无需关心这个子系统的内部细节\",{\"1\":{\"1124\":1}}],[\"而引用list2没有使用泛型\",{\"1\":{\"5131\":1}}],[\"而真正涉及类型检查的是它的引用\",{\"1\":{\"5131\":1}}],[\"而参数\",{\"1\":{\"5052\":1}}],[\"而泛型方法可以在调用的时候指明类型\",{\"1\":{\"5032\":1}}],[\"而class\",{\"1\":{\"5030\":1}}],[\"而class<t>类型的变量c\",{\"1\":{\"5028\":1}}],[\"而count\",{\"1\":{\"3380\":1}}],[\"而compareto\",{\"1\":{\"3054\":1}}],[\"而抛出\",{\"1\":{\"4984\":1}}],[\"而我们仅仅捕获了一个exception\",{\"1\":{\"4964\":1}}],[\"而我们把这种包含\",{\"1\":{\"2704\":1}}],[\"而此时由于异常被捕获\",{\"1\":{\"4912\":1}}],[\"而指定的类对象无法被实例化时\",{\"1\":{\"4840\":1}}],[\"而try语句块中\",{\"1\":{\"4778\":1}}],[\"而true实际上是false\",{\"1\":{\"444\":1}}],[\"而没有处理此异常的catch语句块时\",{\"1\":{\"4777\":1}}],[\"而没有依赖抽象类\",{\"1\":{\"2942\":1}}],[\"而jdbc4\",{\"1\":{\"6164\":1}}],[\"而java的spi机制可以为某个接口寻找服务实现\",{\"1\":{\"6141\":1}}],[\"而java中的编译器\",{\"1\":{\"405\":1}}],[\"而jvm解决方法就是桥接方法\",{\"1\":{\"5147\":1}}],[\"而junit3\",{\"1\":{\"4677\":1}}],[\"而有时我们仅仅需要在测试前进行一次初始化\",{\"1\":{\"4483\":1}}],[\"而能写出一些功能代码则说明对需求有一定理解了\",{\"1\":{\"4449\":1}}],[\"而第三种方案写的单测\",{\"1\":{\"4448\":1}}],[\"而第二个用例需要修改用户a\",{\"1\":{\"4305\":1}}],[\"而线上由于数据库版本不一样\",{\"1\":{\"3399\":1}}],[\"而线程间可以不唯一\",{\"1\":{\"2395\":1}}],[\"而数据库字段必须加is\",{\"1\":{\"3395\":1}}],[\"而isnull\",{\"1\":{\"3383\":1}}],[\"而覆盖索引只是一种查询的一种效果\",{\"1\":{\"3373\":1}}],[\"而单元测试框架默认是扫描此目录\",{\"1\":{\"3308\":1}}],[\"而单例类这种硬编码式的使用方式\",{\"1\":{\"2365\":1}}],[\"而应依赖使用日志框架\",{\"1\":{\"3280\":1}}],[\"而应用内部推荐异常抛出\",{\"1\":{\"3278\":1}}],[\"而应该提供相应的访问器\",{\"1\":{\"2183\":1}}],[\"而日期\",{\"1\":{\"3210\":1}}],[\"而eclipse的\",{\"1\":{\"3210\":1}}],[\"而entryset只是遍历了一次就把key和value都放到了entry中\",{\"1\":{\"3124\":1}}],[\"而return是退出方法体\",{\"1\":{\"3184\":1}}],[\"而事实上\",{\"1\":{\"3151\":1}}],[\"而<dependencies>所有声明在主pom的<dependencies>里的依赖都会自动引入\",{\"1\":{\"3436\":1}}],[\"而<\",{\"1\":{\"3111\":1}}],[\"而大写的yyyy代表是week\",{\"1\":{\"3078\":1}}],[\"而私有方法外部一般不需要特别关心\",{\"1\":{\"3068\":1}}],[\"而私有云不需要\",{\"1\":{\"2705\":1}}],[\"而double的tostring按double的实际能表达的精度对尾数进行了截断\",{\"1\":{\"3056\":1}}],[\"而左大括号前需要加空格\",{\"1\":{\"3021\":1}}],[\"而局部变量在同一方法内的不同代码块中同名也是合法的\",{\"1\":{\"2996\":1}}],[\"而又不会对数据产生任何副作用\",{\"1\":{\"2974\":1}}],[\"而又不能采用生成子类的方法进行扩充时\",{\"1\":{\"940\":1}}],[\"而收银员关心的是商品的价格和数量\",{\"1\":{\"2929\":1}}],[\"而实际情况却不一定是\",{\"1\":{\"5295\":1}}],[\"而实现高内聚的重要指导原则就是单一职责原则\",{\"1\":{\"2776\":1}}],[\"而实例化的新对象不满足后面的equals\",{\"1\":{\"458\":1}}],[\"而相对于代码结构的调整\",{\"1\":{\"2755\":1}}],[\"而入参又非接口\",{\"1\":{\"2747\":1}}],[\"而父类中定义的却只是\",{\"1\":{\"2745\":1}}],[\"而模板模式\",{\"1\":{\"2744\":1}}],[\"而这三个作用都可以通过其他技术手段来达成\",{\"1\":{\"2740\":1}}],[\"而这种层次很深\",{\"1\":{\"2731\":1}}],[\"而这样做就会存在一些问题\",{\"1\":{\"2703\":1}}],[\"而抽象类的成员可以有多种访问权限\",{\"1\":{\"5387\":1}}],[\"而抽象类的字段没有这种限制\",{\"1\":{\"5386\":1}}],[\"而抽象就是提高代码扩展性\",{\"1\":{\"2696\":1}}],[\"而抽象工厂模式可生产多个等级的产品\",{\"1\":{\"1278\":1}}],[\"而抽象工厂只提供创建产品的接口\",{\"1\":{\"1273\":1}}],[\"而抽象工厂的原理稍微复杂点\",{\"1\":{\"1160\":1}}],[\"而把可变部分算法由子类继承实现\",{\"1\":{\"2642\":1}}],[\"而把影响对象行为的一个或多个动态变化的属性称为状态\",{\"1\":{\"2415\":1}}],[\"而将一些步骤延迟到子类中\",{\"1\":{\"2639\":1}}],[\"而算法的实现移到具体策略类中\",{\"1\":{\"2499\":1}}],[\"而工厂模式创建的是不同子类的对象\",{\"1\":{\"2412\":1}}],[\"而构建的过程也没有给与提示\",{\"1\":{\"2373\":1}}],[\"而非\",{\"1\":{\"2356\":1}}],[\"而非简单工厂模式呢\",{\"0\":{\"1252\":1}}],[\"而其实这个方法只执行\",{\"1\":{\"2307\":1}}],[\"而出现在局部变量中的类不是直接的朋友\",{\"1\":{\"2162\":1}}],[\"而消费者伤心\",{\"1\":{\"1667\":1}}],[\"而在编译的时候\",{\"1\":{\"5218\":1}}],[\"而在遍历classpah之后找不到对应名称的class文件时\",{\"1\":{\"4822\":1}}],[\"而在显示端没有做降级预案\",{\"1\":{\"3456\":1}}],[\"而在jdk7之前\",{\"1\":{\"3177\":1}}],[\"而在eclipse中\",{\"1\":{\"3024\":1}}],[\"而在软件层面\",{\"1\":{\"1619\":1}}],[\"而在之后再使用true进行定义boolean类型的变量过程中\",{\"1\":{\"442\":1}}],[\"而如果遍历方式改变的话\",{\"1\":{\"1556\":1}}],[\"而如果创建复杂对象\",{\"1\":{\"731\":1}}],[\"而解释器模式是类行为型模式\",{\"1\":{\"1466\":1}}],[\"而后这些词法单元再通过语法分析器构建语法分析树\",{\"1\":{\"1454\":1}}],[\"而外部状态具有固化特性\",{\"1\":{\"1442\":1}}],[\"而当每个连接要被回收利用时\",{\"1\":{\"1388\":1}}],[\"而各个棋子之间的差别就是位置的不同\",{\"1\":{\"1385\":1}}],[\"而使你的代码可读性变差\",{\"1\":{\"3969\":1}}],[\"而使用策略模式可以避免使用多重条件语句\",{\"1\":{\"2495\":1}}],[\"而使用简单工厂模式\",{\"1\":{\"1254\":1}}],[\"而使调用者无感知\",{\"1\":{\"1832\":1}}],[\"而使这些子系统更加容易被访问的模式\",{\"1\":{\"1095\":1}}],[\"而创建的对象又频繁被销毁的时候\",{\"1\":{\"2345\":1}}],[\"而创建\",{\"1\":{\"1205\":1}}],[\"而采用装饰器模式却很好实现\",{\"1\":{\"941\":1}}],[\"而且能快速构建\",{\"1\":{\"6335\":1}}],[\"而且这个class对象保存在同名\",{\"1\":{\"5828\":1}}],[\"而且大部分事情都是为了改善代码的可读性或者\",{\"1\":{\"4844\":1}}],[\"而且一旦发生这种异常状况\",{\"1\":{\"4728\":1}}],[\"而且父类中的被\",{\"1\":{\"4332\":1}}],[\"而且正在缓慢减速\",{\"1\":{\"3548\":1}}],[\"而且不能工作\",{\"1\":{\"3222\":1}}],[\"而且可读性更好\",{\"1\":{\"3090\":1}}],[\"而且可以独立地改变它们之间的交互\",{\"1\":{\"1566\":1}}],[\"而且要避免让这些操作的变化影响对象的结构\",{\"1\":{\"2978\":1}}],[\"而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段\",{\"1\":{\"2817\":1}}],[\"而且融入了软件工程领域的新思想\",{\"1\":{\"2816\":1}}],[\"而且在将来需求发生变化的时候\",{\"1\":{\"2696\":1}}],[\"而且确定了这些步骤的执行顺序\",{\"1\":{\"2635\":1}}],[\"而且增加\",{\"1\":{\"2487\":1}}],[\"而且容易出错\",{\"1\":{\"2476\":1}}],[\"而且修改某个状态类的行为也需要修改对应类的源码\",{\"1\":{\"2428\":1}}],[\"而且还易学易用\",{\"1\":{\"6623\":1}}],[\"而且还能防止反序列化重新创建新的对象\",{\"1\":{\"2330\":1}}],[\"而且还会暴露元素的内部结构\",{\"1\":{\"1505\":1}}],[\"而且当对象之间存在多重嵌套引用时\",{\"1\":{\"1748\":1}}],[\"而且有可能出现循环引用\",{\"1\":{\"1674\":1}}],[\"而且每一次保存都会消耗一定的内存\",{\"1\":{\"1659\":1}}],[\"而且\",{\"1\":{\"1568\":1,\"2390\":1,\"2713\":1,\"2754\":1,\"4617\":1,\"4862\":1}}],[\"而且组合模式是对象结构型模式\",{\"1\":{\"1466\":1}}],[\"而且都不是高访问量网站\",{\"1\":{\"1416\":1}}],[\"而且很多参数都具有默认值\",{\"1\":{\"737\":1}}],[\"而且扩展困难\",{\"1\":{\"586\":1}}],[\"而建造者模式则是要求按照指定的蓝图建造产品\",{\"1\":{\"729\":1}}],[\"而与其他的具体建造者无关\",{\"1\":{\"723\":1}}],[\"而\",{\"1\":{\"673\":1,\"720\":1,\"1328\":1,\"1456\":1,\"2383\":1,\"4314\":1,\"4398\":1,\"4469\":1,\"4479\":1,\"5310\":1,\"5433\":1,\"5442\":1,\"5570\":1,\"5571\":1,\"5572\":1,\"5573\":1,\"5599\":1,\"5642\":1,\"5646\":1,\"6108\":1,\"6925\":1}}],[\"而不仅是在\",{\"1\":{\"6820\":1}}],[\"而不会生成新的对象\",{\"1\":{\"5687\":1}}],[\"而不会对其他调用者返回的数组产生任何影响\",{\"1\":{\"4632\":1,\"4638\":1}}],[\"而不会知道聚合的具体组成\",{\"1\":{\"1555\":1}}],[\"而不暴露聚合对象的内部表示\",{\"1\":{\"2624\":1}}],[\"而不涉及任何具体的操作\",{\"1\":{\"2066\":1}}],[\"而不需要实现接口\",{\"1\":{\"1813\":1}}],[\"而不需要关心是男性还是女性\",{\"1\":{\"1503\":1}}],[\"而不必担心破坏现有的代码\",{\"1\":{\"4440\":1}}],[\"而不必专门引入多个新的类来进行管理\",{\"1\":{\"1283\":1}}],[\"而不必知道具体的接收者对象是谁\",{\"1\":{\"793\":1}}],[\"而不知道具体的产品名\",{\"1\":{\"1272\":1}}],[\"而不用调用多个接口才能达到目的\",{\"1\":{\"1126\":1}}],[\"而不对其它模块产生任何影响\",{\"1\":{\"669\":1}}],[\"而不是每次抛出异常的时候都强制它们去处理\",{\"1\":{\"6817\":1}}],[\"而不是一下子全部按照这些建议来做\",{\"1\":{\"6744\":1}}],[\"而不是一个完整的句子\",{\"1\":{\"4254\":1}}],[\"而不是该对象本身\",{\"1\":{\"5632\":1}}],[\"而不是该类的类型的引用或者表达式\",{\"1\":{\"4235\":1}}],[\"而不是都为\",{\"1\":{\"5394\":1}}],[\"而不是引用传递\",{\"1\":{\"5332\":1}}],[\"而不是泛型类中的t\",{\"1\":{\"5214\":1}}],[\"而不是重载了\",{\"1\":{\"5161\":1}}],[\"而不是名字的基础上\",{\"1\":{\"4891\":1}}],[\"而不是囫囵吞枣\",{\"1\":{\"4750\":1}}],[\"而不是将代码部署到设备之后\",{\"1\":{\"4443\":1}}],[\"而不是对应的八进制\",{\"1\":{\"3952\":1}}],[\"而不是全部\",{\"1\":{\"3473\":1}}],[\"而不是0\",{\"1\":{\"3427\":1}}],[\"而不是true\",{\"1\":{\"3383\":2}}],[\"而不是false\",{\"1\":{\"3383\":1}}],[\"而不是让错误码本身涵盖过多具体业务属性\",{\"1\":{\"3258\":1}}],[\"而不是简单地注释掉\",{\"1\":{\"3217\":1}}],[\"而不是keyset方式进行遍历\",{\"1\":{\"3124\":1}}],[\"而不是size\",{\"1\":{\"3090\":1}}],[\"而不是new\",{\"1\":{\"3080\":1}}],[\"而不是equals\",{\"1\":{\"3054\":1}}],[\"而不是抽象元素\",{\"1\":{\"2971\":1}}],[\"而不是大而全\",{\"1\":{\"2776\":1}}],[\"而不是怎么做\",{\"1\":{\"2713\":1}}],[\"而不是具体的实现类来编程\",{\"1\":{\"2709\":1}}],[\"而不是更复杂\",{\"1\":{\"2591\":1}}],[\"而不是行为的继承\",{\"1\":{\"2549\":1}}],[\"而不是使用原来的实例\",{\"1\":{\"6129\":1}}],[\"而不是使用静态导入\",{\"1\":{\"3993\":1}}],[\"而不是使用\",{\"1\":{\"2338\":1}}],[\"而不是使用继承\",{\"1\":{\"2230\":1}}],[\"而不是针对实现编程\",{\"1\":{\"2212\":1}}],[\"而不是\",{\"1\":{\"2130\":1,\"4159\":1,\"4166\":1,\"5775\":1}}],[\"而不是其具体实现\",{\"1\":{\"1947\":1}}],[\"而不是动态地获得对象运行时的状态\",{\"1\":{\"1767\":1}}],[\"而不是任由客人临时定制\",{\"1\":{\"746\":1}}],[\"而不是继承\",{\"1\":{\"646\":1}}],[\"而不是贬低他人\",{\"1\":{\"142\":1}}],[\"而是等到使用迭代器去遍历的时候\",{\"1\":{\"6262\":1}}],[\"而是直接使用如下代码\",{\"1\":{\"6172\":1}}],[\"而是交给了jvm去加载\",{\"1\":{\"6060\":1}}],[\"而是先把要返回的值保存起来\",{\"1\":{\"5711\":1}}],[\"而是在子类中定义了一个新的方法\",{\"1\":{\"5479\":1}}],[\"而是在需要实例化时\",{\"1\":{\"2323\":1}}],[\"而是重载\",{\"1\":{\"5159\":1}}],[\"而是到了这里\",{\"1\":{\"4969\":1}}],[\"而是提供一个带有\",{\"1\":{\"4467\":1}}],[\"而是越有效越好\",{\"1\":{\"4451\":1}}],[\"而是使用\",{\"1\":{\"3937\":1}}],[\"而是取offset+n行\",{\"1\":{\"3374\":1}}],[\"而是继续进行匹配\",{\"1\":{\"6103\":1}}],[\"而是继续执行finally块中的语句\",{\"1\":{\"3271\":1,\"4930\":1}}],[\"而是继承抽象类或者是实现\",{\"1\":{\"1321\":1}}],[\"而是arraylist的一个视图\",{\"1\":{\"3100\":1}}],[\"而是限制过度个性化\",{\"1\":{\"2983\":1}}],[\"而是将图片存储到自建私有云上\",{\"1\":{\"2701\":1}}],[\"而是将计算机的配置要求告诉计算机销售公司\",{\"1\":{\"661\":1}}],[\"而是\",{\"1\":{\"2569\":1,\"5459\":1}}],[\"而是如何组织这些算法\",{\"1\":{\"2504\":1}}],[\"而是用过方法参数\",{\"1\":{\"2229\":1}}],[\"而是通过threadpoolexecutor的方式\",{\"1\":{\"3159\":1}}],[\"而是通过方法参数\",{\"1\":{\"2205\":1}}],[\"而是通过接口来间接引用\",{\"1\":{\"2067\":1}}],[\"而是一个陌生类\",{\"1\":{\"2188\":1}}],[\"而是一个树形结构\",{\"1\":{\"844\":1}}],[\"而是动态地获得对象运行时的状态\",{\"1\":{\"1803\":1}}],[\"而是放到配置文件中\",{\"1\":{\"1364\":1}}],[\"而是把这个\",{\"1\":{\"1320\":1}}],[\"而是要组合其他类对象\",{\"1\":{\"1254\":1}}],[\"而是已经预先配置好的\",{\"1\":{\"746\":1}}],[\"而是持有\",{\"1\":{\"529\":1}}],[\"它让你在\",{\"1\":{\"6950\":1}}],[\"它让你可以写更多的流畅的代码\",{\"1\":{\"6854\":1}}],[\"它对\",{\"1\":{\"6944\":1}}],[\"它同时支持\",{\"1\":{\"6943\":1}}],[\"它同具体工厂之间是多对一的关系\",{\"1\":{\"1292\":1}}],[\"它同具体工厂之间一一对应\",{\"1\":{\"1232\":1}}],[\"它被设计用来弥补本应该出现在\",{\"1\":{\"6917\":1}}],[\"它仍然缺少一些关键的特性\",{\"1\":{\"6893\":1}}],[\"它应该被每一个单独项目的\",{\"1\":{\"6868\":1}}],[\"它应该仅仅被用来做依赖注入\",{\"1\":{\"6821\":1}}],[\"它没有使用许多我们尽力避免使用的样板\",{\"1\":{\"6811\":1}}],[\"它没有子节点\",{\"1\":{\"819\":1}}],[\"它拥有简洁的代码\",{\"1\":{\"6585\":1,\"6677\":1}}],[\"它拥有接收者对象\",{\"1\":{\"760\":1}}],[\"它也被载入并实例化了\",{\"1\":{\"6266\":1}}],[\"它负责加载具体的日志实现\",{\"1\":{\"6200\":1}}],[\"它负责根据从配置文件解析得到的\",{\"1\":{\"1362\":1}}],[\"它反映此\",{\"1\":{\"6008\":1}}],[\"它反映了基类与子类之间的关系\",{\"1\":{\"2106\":1}}],[\"它标识了此field\",{\"1\":{\"5977\":1}}],[\"它允许我们在运行时发现和使用类的信息\",{\"1\":{\"5819\":1}}],[\"它允许用户只通过指定复杂对象的类型和内容就可以构建它们\",{\"1\":{\"665\":1}}],[\"它假定我们在编译时已经知道了所有的类型\",{\"1\":{\"5819\":1}}],[\"它定义了类必须得遵循的规则\",{\"1\":{\"5675\":1}}],[\"它定义了客户端需要的接口\",{\"1\":{\"2432\":1}}],[\"它与\",{\"1\":{\"5648\":1}}],[\"它与该实例同生共死\",{\"1\":{\"5485\":1}}],[\"它常用于基于\",{\"1\":{\"5648\":1}}],[\"它涉及到多个指令\",{\"1\":{\"5605\":1}}],[\"它只是提供一种方法实现契约\",{\"1\":{\"5384\":1}}],[\"它只针对于行内的空格\",{\"1\":{\"4090\":1}}],[\"它比\",{\"1\":{\"5344\":1}}],[\"它比单例更加不灵活\",{\"1\":{\"2380\":1}}],[\"它就是javap\",{\"1\":{\"4941\":1}}],[\"它就在自己的地址空间中创建一个\",{\"1\":{\"2389\":1}}],[\"它接受一个\",{\"1\":{\"4925\":1}}],[\"它使用像\",{\"1\":{\"6985\":1}}],[\"它使用用起来很简单\",{\"1\":{\"6914\":1}}],[\"它使样板代码减少到最小化\",{\"1\":{\"6814\":1}}],[\"它使得你的api更加易于学习和使用\",{\"1\":{\"4873\":1}}],[\"它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性\",{\"1\":{\"2133\":1}}],[\"它发生在程序运行期间\",{\"1\":{\"4708\":1}}],[\"它会像这个样子\",{\"1\":{\"6864\":1}}],[\"它会强制你去用\",{\"1\":{\"6817\":1}}],[\"它会抛出异常\",{\"1\":{\"5468\":1}}],[\"它会被文档化\",{\"1\":{\"4520\":1}}],[\"它会在每个用例运行之前都运行一次\",{\"1\":{\"4304\":1}}],[\"它会调用aqs的tryrelease方法\",{\"1\":{\"3167\":1,\"3171\":1}}],[\"它\",{\"1\":{\"4254\":1}}],[\"它违反了一些约定\",{\"1\":{\"4199\":1}}],[\"它由原子钟提供\",{\"1\":{\"3548\":1}}],[\"它由一个模板方法和若干个基本方法构成\",{\"1\":{\"2652\":1}}],[\"它指的是恶意攻击者往web页面里插入恶意html代码\",{\"1\":{\"3342\":1}}],[\"它描述了类或组件对外可见的动作\",{\"1\":{\"2825\":1}}],[\"它具有类的结构但不可被实例化\",{\"1\":{\"2825\":1}}],[\"它用于帮助软件开发人员进行思考和记录思路的结果\",{\"1\":{\"2808\":1}}],[\"它能够获取到堆栈信息让你查阅\",{\"1\":{\"6994\":1}}],[\"它能够修饰的程序元素包括类型\",{\"1\":{\"4524\":1}}],[\"它能够在更高层次上提高代码的可读性和可维护性\",{\"1\":{\"2753\":1}}],[\"它能在程序运行的过程中\",{\"1\":{\"1341\":1}}],[\"它先于很多编程语言而诞生\",{\"1\":{\"2693\":1}}],[\"它默认不做任何事\",{\"1\":{\"2673\":1}}],[\"它们被设计为函数式风格并且遵循不可变性的设计风格\",{\"1\":{\"6925\":1}}],[\"它们对\",{\"1\":{\"6859\":1}}],[\"它们不使用像\",{\"1\":{\"6822\":1}}],[\"它们会报告无法访问的代码块\",{\"1\":{\"4899\":1}}],[\"它们的可读性更好\",{\"1\":{\"4874\":1}}],[\"它们永远不应该被用于正常的控制流\",{\"1\":{\"4848\":1}}],[\"它们通过以面向对象和被设计为可变的方式来保证和其他的类的兼容性\",{\"1\":{\"6925\":1}}],[\"它们通过继承aqs实现其模版方法\",{\"1\":{\"3544\":1}}],[\"它们通常用于指示发生了异常情况\",{\"1\":{\"4713\":1}}],[\"它们之间没有其它代码\",{\"1\":{\"4063\":1}}],[\"它们才会拥有相同级别的缩进\",{\"1\":{\"4057\":1}}],[\"它们始终具有相同的名称\",{\"1\":{\"4001\":1}}],[\"它们是最强的\",{\"1\":{\"2848\":1}}],[\"它们是一个顶级逻辑的一个组成步骤\",{\"1\":{\"2659\":1}}],[\"它们实际上是对一组类的关系及其互动方式的描述\",{\"1\":{\"2793\":1}}],[\"它们能帮助你精简自己的设计\",{\"1\":{\"2792\":1}}],[\"它们分别是\",{\"1\":{\"2738\":1}}],[\"它们都可以用\",{\"1\":{\"6884\":1}}],[\"它们都覆盖了父类的\",{\"1\":{\"5775\":1}}],[\"它们都是同一个版本\",{\"1\":{\"3432\":1}}],[\"它们都是抽象装饰类\",{\"1\":{\"943\":1}}],[\"它们都用到了\",{\"1\":{\"2745\":1}}],[\"它们都有大量的棋子对象\",{\"1\":{\"1385\":1}}],[\"它提供自动垃圾收集来进行内存管理\",{\"1\":{\"5747\":1}}],[\"它提供了一种抽象\",{\"1\":{\"5675\":1}}],[\"它提供了一个用于保存观察者对象的聚集类和增加\",{\"1\":{\"1679\":1}}],[\"它提供了\",{\"1\":{\"4714\":1,\"6991\":1}}],[\"它提高了代码阅读的难度\",{\"1\":{\"2647\":1}}],[\"它在父类中提取了公共的部分代码\",{\"1\":{\"2643\":1}}],[\"它把认为是不变部分的算法封装到父类中实现\",{\"1\":{\"2642\":1}}],[\"它封装了不变部分\",{\"1\":{\"2642\":1}}],[\"它可能是存款\",{\"1\":{\"2636\":1}}],[\"它可以和想\",{\"1\":{\"6992\":1}}],[\"它可以让你以注解的方式减少\",{\"1\":{\"6932\":1}}],[\"它可以看成是一个完全抽象的类\",{\"1\":{\"5378\":1}}],[\"它可以取的值如下所示\",{\"1\":{\"4524\":1}}],[\"它可以包含零条或多条语句\",{\"1\":{\"4119\":1}}],[\"它可以在运行期扩展\",{\"1\":{\"1878\":1}}],[\"它可以访问\",{\"1\":{\"1830\":1}}],[\"它可以访问备忘录里的所有信息\",{\"1\":{\"1630\":1}}],[\"它可以将复杂对象的建造过程抽象出来\",{\"1\":{\"664\":1}}],[\"它可以是抽象类或接口\",{\"1\":{\"499\":1}}],[\"它通过对算法进行封装\",{\"1\":{\"2489\":1}}],[\"它通常拥有很多的命令对象\",{\"1\":{\"762\":1}}],[\"它还有一些静态类如\",{\"1\":{\"6905\":1}}],[\"它还有点类似享元模式\",{\"1\":{\"2412\":1}}],[\"它还包括配置的解析\",{\"1\":{\"1329\":1}}],[\"它跟工厂模式的不同之处是\",{\"1\":{\"2412\":1}}],[\"它无法支持延迟加载\",{\"1\":{\"2380\":1}}],[\"它的特性支持集组聊天\",{\"1\":{\"6506\":1}}],[\"它的特点是\",{\"1\":{\"2807\":1}}],[\"它的引用可以理解为安全指针\",{\"1\":{\"5570\":1}}],[\"它的参数\",{\"1\":{\"4892\":1}}],[\"它的取值范围定义在elementtype\",{\"1\":{\"4589\":1}}],[\"它的作用是告诉编译器忽略指定的警告信息\",{\"1\":{\"4524\":1}}],[\"它的所有方法都是虚拟的\",{\"1\":{\"4479\":1}}],[\"它的add\",{\"1\":{\"3108\":1}}],[\"它的方法也是isdeleted\",{\"1\":{\"2994\":1}}],[\"它的子类可以按需要重写方法实现\",{\"1\":{\"2638\":1}}],[\"它的成员变量是可以被修改的\",{\"1\":{\"2366\":1}}],[\"它的主要特点是\",{\"1\":{\"2600\":1}}],[\"它的主要特点是把抽象\",{\"1\":{\"589\":1}}],[\"它的主要作用是存储和管理子部件\",{\"1\":{\"820\":1}}],[\"它的主要作用是为树叶构件和树枝构件声明公共接口\",{\"1\":{\"818\":1}}],[\"它的主要目的是通过组装零配件而产生一个新产品\",{\"1\":{\"729\":1}}],[\"它充当数据存储源的代理\",{\"1\":{\"2260\":1}}],[\"它维持了类的封装性\",{\"1\":{\"2220\":1}}],[\"它有大量的牛逼的特性\",{\"1\":{\"6974\":1}}],[\"它有一个路由文件\",{\"1\":{\"6942\":1}}],[\"它有一些像\",{\"1\":{\"6906\":1}}],[\"它有这样的一些特点\",{\"1\":{\"6917\":1}}],[\"它有许多如\",{\"1\":{\"6902\":1}}],[\"它有如下特征\",{\"1\":{\"3414\":1}}],[\"它有以下优点\",{\"1\":{\"2219\":1}}],[\"它有子节点\",{\"1\":{\"820\":1}}],[\"它限制了复用的灵活性\",{\"1\":{\"2218\":1}}],[\"它要求在软件复用时\",{\"1\":{\"2199\":1}}],[\"它要求每个对象都必须知道它需要交互的对象\",{\"1\":{\"1568\":1}}],[\"它克服了继承中重写父类造成的可复用性变差的缺点\",{\"1\":{\"2113\":1}}],[\"它针对的是程序中的实现和细节\",{\"1\":{\"2041\":1}}],[\"它不能够区分正常的字符串和正则表达式字符串\",{\"1\":{\"6984\":1}}],[\"它不依赖于任何实例\",{\"1\":{\"5488\":1}}],[\"它不是\",{\"1\":{\"5454\":1}}],[\"它不仅会捕获所有异常\",{\"1\":{\"4906\":1}}],[\"它不关心处理细节和请求的传递过程\",{\"1\":{\"1946\":1}}],[\"它不直接访问接收者\",{\"1\":{\"762\":1}}],[\"它广泛的被许多\",{\"1\":{\"1878\":1}}],[\"它实现抽象目标中的通知方法\",{\"1\":{\"1680\":1}}],[\"它实现了抽象享元接口\",{\"1\":{\"1401\":1}}],[\"它支持web\",{\"1\":{\"6303\":1}}],[\"它支持以不同方式遍历一个聚合\",{\"1\":{\"1510\":1}}],[\"它支持的配置格式非常灵活和复杂\",{\"1\":{\"1349\":1}}],[\"它以参数的形式注入具体享元的相关方法中\",{\"1\":{\"1395\":1}}],[\"它处理的是更大的对象创建工程\",{\"1\":{\"1328\":1}}],[\"它包含抽象操作\",{\"1\":{\"2825\":1}}],[\"它包含了一个更新自己的抽象方法\",{\"1\":{\"1681\":1}}],[\"它包含了对各个子系统的引用\",{\"1\":{\"1106\":1}}],[\"它包含多个创建产品的方法\",{\"1\":{\"1289\":1}}],[\"它将会是这样子的\",{\"1\":{\"6866\":1}}],[\"它将提供类型的约束\",{\"1\":{\"5008\":1}}],[\"它将对数据的操作与数据结构进行分离\",{\"1\":{\"2931\":1}}],[\"它将大大降低对象之间的耦合性\",{\"1\":{\"1570\":1}}],[\"它将简单工厂模式看作是工厂方法模式的一种特例\",{\"1\":{\"1159\":1}}],[\"它将是为将使用的节点找到的最后一个文本\",{\"1\":{\"162\":1}}],[\"它属于对象结构型模式\",{\"1\":{\"877\":1}}],[\"它创建了对象组的树形结构\",{\"1\":{\"807\":1}}],[\"它为我们省去了判空的操作\",{\"1\":{\"796\":1}}],[\"它调用建造者对象中的部件构造与装配方法完成复杂对象的创建\",{\"1\":{\"684\":1}}],[\"它主要着力于保证你的代码符合代码标准\",{\"1\":{\"6988\":1}}],[\"它主要的作用有以下四方面\",{\"1\":{\"4495\":1}}],[\"它主要用于回收在try块里打开的物力资源\",{\"1\":{\"4738\":1}}],[\"它主要用于描述软件系统的结构化设计\",{\"1\":{\"2831\":1}}],[\"它主要用来解决对象在多种状态转换时\",{\"1\":{\"2418\":1}}],[\"它主要有两个作用\",{\"1\":{\"678\":1}}],[\"它主要是用于创建一个复杂的对象\",{\"1\":{\"678\":1}}],[\"它空实现了\",{\"1\":{\"556\":1}}],[\"它是真正的能让\",{\"1\":{\"6974\":1}}],[\"它是\",{\"1\":{\"6957\":1}}],[\"它是框架学习和设计者必须掌握的基础\",{\"1\":{\"4493\":1}}],[\"它是展示函数或类如何使用的最佳文档\",{\"1\":{\"4442\":1}}],[\"它是在本地运行的\",{\"1\":{\"6991\":1}}],[\"它是在某些情况下唯一可以出现的文本\",{\"1\":{\"4253\":1}}],[\"它是在内存中构建一个子类对象从而实现对目标对象功能扩展\",{\"1\":{\"1877\":1}}],[\"它是很多上层同步实现类的基础\",{\"1\":{\"3544\":1}}],[\"它是对象之间耦合度最弱的一种关联方式\",{\"1\":{\"2850\":1}}],[\"它是对象行为型模式\",{\"1\":{\"1668\":1}}],[\"它是面向对象系统的建模中最常见的图\",{\"1\":{\"2832\":1}}],[\"它是系统分析与设计阶段的重要产物\",{\"1\":{\"2831\":1}}],[\"它是系统性能提高的一个瓶颈\",{\"1\":{\"1372\":1}}],[\"它是用组合关系代替继承关系来实现的\",{\"1\":{\"2613\":1}}],[\"它是动作正确性的保证\",{\"1\":{\"2114\":1}}],[\"它是中介者的接口\",{\"1\":{\"1579\":1}}],[\"它是迪米特法则的典型应用\",{\"1\":{\"1566\":1}}],[\"它是关键字\",{\"1\":{\"1402\":1}}],[\"它是一个逻辑上的概念\",{\"1\":{\"5315\":1}}],[\"它是一个抽象类或接口\",{\"1\":{\"1681\":1}}],[\"它是一个包含创建产品各个子部件的抽象方法的接口\",{\"1\":{\"682\":1}}],[\"它是一个转换器\",{\"1\":{\"501\":1}}],[\"它是包含多个组成部件的复杂对象\",{\"1\":{\"681\":1}}],[\"它是被访问和适配的现存组件库中的组件接口\",{\"1\":{\"500\":1}}],[\"它所表示的是一个换行符\",{\"1\":{\"405\":1}}],[\"这还有很多例子\",{\"1\":{\"6937\":1}}],[\"这用起来真的很简单\",{\"1\":{\"6911\":1}}],[\"这对编译器没有影响\",{\"1\":{\"6818\":1}}],[\"这对全新的类来说不是很难\",{\"1\":{\"1806\":1}}],[\"这有很多工具\",{\"1\":{\"6987\":1}}],[\"这有关于构建器更好的例子\",{\"1\":{\"6811\":1}}],[\"这有助于系统进行分层设计\",{\"1\":{\"633\":1}}],[\"这篇文章原始发布在\",{\"1\":{\"6745\":1}}],[\"这篇文章将带你深入理解java\",{\"1\":{\"5837\":1}}],[\"这两页手册足够你可以开始入门使用\",{\"1\":{\"6947\":1}}],[\"这两步是spi的用法\",{\"1\":{\"6186\":1}}],[\"这两个\",{\"1\":{\"6884\":1}}],[\"这两个方案到底选哪一个要看你面对的是什么情况\",{\"1\":{\"6877\":1}}],[\"这两个地方的catch变的一模一样\",{\"1\":{\"5220\":1}}],[\"这两个参数一个是integer\",{\"1\":{\"5112\":2}}],[\"这两个参数都是integer\",{\"1\":{\"5112\":1}}],[\"这两个注解是用来运行套件测试\",{\"1\":{\"4410\":1}}],[\"这两个对象并不是同一个对象\",{\"1\":{\"2390\":1}}],[\"这句先加载数据库相关的驱动\",{\"1\":{\"6164\":1}}],[\"这句话在软件开发中特别适用\",{\"1\":{\"2702\":1}}],[\"这部分主要参考自https\",{\"1\":{\"6052\":1}}],[\"这点对于反射技术很重要\",{\"1\":{\"5831\":1}}],[\"这点在实际使用时\",{\"1\":{\"1610\":1}}],[\"这点在在使用的时候要注意\",{\"1\":{\"795\":1}}],[\"这本质上是由于类型擦除决定的\",{\"1\":{\"5186\":1}}],[\"这本书\",{\"1\":{\"2693\":1}}],[\"这如果实在普通的继承关系中\",{\"1\":{\"5159\":1}}],[\"这恰恰说明了关于泛型变量的使用\",{\"1\":{\"5121\":1}}],[\"这算是我们扩展的一个相对比较极端的问题\",{\"1\":{\"4975\":1}}],[\"这算法体现了几个设计原则\",{\"1\":{\"2490\":1}}],[\"这次异常表中\",{\"1\":{\"4964\":1}}],[\"这将会使分析导致异常的异常事件变得困难\",{\"1\":{\"4925\":1}}],[\"这将增加程序的复杂性\",{\"1\":{\"1381\":1}}],[\"这么来说是比较抽象的\",{\"1\":{\"4500\":1}}],[\"这么写的时候一定要找一个代码中隐蔽的角落\",{\"1\":{\"445\":1}}],[\"这么写的话是不是逼格一下子就支棱起来了\",{\"1\":{\"421\":1}}],[\"这份文档是可编译\",{\"1\":{\"4442\":1}}],[\"这使得我们编写程序更灵活\",{\"1\":{\"4440\":1}}],[\"这和junit\",{\"1\":{\"4327\":1}}],[\"这包括了一个类的方法重写了父类的方法\",{\"1\":{\"4226\":1}}],[\"这依然会混淆代码版本中的历史信息\",{\"1\":{\"4096\":1}}],[\"这可能是本文中最常被忽略的最佳实践\",{\"1\":{\"4916\":1}}],[\"这可能会导致大量毫无意义的工作\",{\"1\":{\"4096\":1}}],[\"这可能也会让组件变得更加复杂\",{\"1\":{\"2790\":1}}],[\"这儿的\",{\"1\":{\"4028\":1}}],[\"这意味着你要给出使用示例\",{\"1\":{\"6847\":1}}],[\"这意味着它是由\",{\"1\":{\"5603\":1}}],[\"这意味着代码可能不会执行到\",{\"1\":{\"4862\":1}}],[\"这意味着\",{\"1\":{\"3948\":1,\"4249\":1,\"5286\":1}}],[\"这实际上是一个javadoc的标签\",{\"1\":{\"3222\":1}}],[\"这破坏了对象的封装性\",{\"1\":{\"2941\":1}}],[\"这提高了程序的扩展性和灵活性\",{\"1\":{\"2930\":1}}],[\"这几个类及其关系\",{\"1\":{\"2792\":1}}],[\"这才是我们所追求的境界\",{\"1\":{\"2749\":1}}],[\"这显然不符合我们对现实世界中事物的认识\",{\"1\":{\"2725\":1}}],[\"这条规则不会被解释为要求或者禁止在行首或者行尾使用额外的空格\",{\"1\":{\"4090\":1}}],[\"这条规则不是必须的\",{\"1\":{\"4087\":1}}],[\"这条规则也适用于\",{\"1\":{\"4049\":1}}],[\"这条规则也适用于以下\",{\"1\":{\"4043\":1,\"4075\":1}}],[\"这条原则的目的就是为了实现代码的松耦合\",{\"1\":{\"2784\":1}}],[\"这条原则的设计初衷是\",{\"1\":{\"2717\":1}}],[\"这条原则的另一个表述方式\",{\"1\":{\"2696\":1}}],[\"这条原则的英文描述是\",{\"1\":{\"2693\":1}}],[\"这条原则能非常有效地提高代码质量\",{\"1\":{\"2695\":1}}],[\"这条原则中的\",{\"1\":{\"2694\":1}}],[\"这条原则最早出现于\",{\"1\":{\"2693\":1}}],[\"这条语句的时候\",{\"1\":{\"2389\":1}}],[\"这导致一种反向的控制结构\",{\"1\":{\"2647\":1}}],[\"这会鼓励产生无关代码\",{\"1\":{\"6842\":1}}],[\"这会导致类的个数增加\",{\"1\":{\"2646\":1}}],[\"这会增加代码的维护成本\",{\"1\":{\"1340\":1}}],[\"这会增加系统的复杂性\",{\"1\":{\"754\":1}}],[\"这其实是继承带来的问题\",{\"1\":{\"2523\":1}}],[\"这类代码难以应对变化\",{\"1\":{\"2462\":1}}],[\"这类产品的创建无法用前面介绍的工厂模式描述\",{\"1\":{\"663\":1}}],[\"这借助\",{\"1\":{\"2330\":1}}],[\"这不利于类的扩展与维护\",{\"1\":{\"2217\":1}}],[\"这不利于软件功能的扩展与维护\",{\"1\":{\"740\":1}}],[\"这也意味着是eclipse制定了一系列的规则\",{\"1\":{\"6216\":1}}],[\"这也破坏了类的封装特性\",{\"1\":{\"2731\":1}}],[\"这也就是为什么需要在classpath下的meta\",{\"1\":{\"6260\":1}}],[\"这也就是所谓的\",{\"1\":{\"2176\":1}}],[\"这也就意味着\",{\"1\":{\"2742\":1}}],[\"这也就说\",{\"1\":{\"2390\":1}}],[\"这也是我们发起这个开源项目的初衷\",{\"1\":{\"6278\":1}}],[\"这也是我们这个\",{\"1\":{\"1362\":1}}],[\"这也是泛型出现的原因\",{\"1\":{\"5140\":1}}],[\"这也是绝大多数开发团队都会制定一些规则来规范进行异常处理的原因\",{\"1\":{\"4843\":1}}],[\"这也是导致许多开发团队转变最初想法的原因\",{\"1\":{\"2802\":1}}],[\"这也是为什么我们不推荐使用继承\",{\"1\":{\"2732\":1}}],[\"这也是考验代码设计好坏的一个标准\",{\"1\":{\"2696\":1}}],[\"这也是\",{\"1\":{\"2394\":1}}],[\"这也是项目开发中经常用到的一种实现思路\",{\"1\":{\"2378\":1}}],[\"这就造成了浪费\",{\"1\":{\"6266\":1}}],[\"这就要求了散列函数要把所有域的值都考虑进来\",{\"1\":{\"5446\":1}}],[\"这就要求我们必须将\",{\"1\":{\"2703\":1}}],[\"这就相当于将一种强依赖关系\",{\"1\":{\"2778\":1}}],[\"这就会导致代码重复的问题\",{\"1\":{\"2737\":1}}],[\"这就类似\",{\"1\":{\"2383\":1}}],[\"这就导致很多其他类都依赖这个类\",{\"1\":{\"2176\":1}}],[\"这就是spi的思想\",{\"1\":{\"6161\":1}}],[\"这就是因为serviceloader\",{\"1\":{\"6160\":1}}],[\"这就是为什么在\",{\"1\":{\"5636\":1}}],[\"这就是协变\",{\"1\":{\"5179\":1}}],[\"这就是抛出异常\",{\"1\":{\"4753\":1}}],[\"这就是开闭原则的经典定义\",{\"1\":{\"2127\":1}}],[\"这就是\",{\"1\":{\"1876\":1,\"6982\":1}}],[\"这就是享元模式的产生背景\",{\"1\":{\"1373\":1}}],[\"这就是外观模式的目标\",{\"1\":{\"1094\":1}}],[\"这就是装饰器模式的目标\",{\"1\":{\"885\":1}}],[\"这就是命令模式的体现\",{\"1\":{\"746\":1}}],[\"这避免了使用众多的\",{\"1\":{\"1936\":1}}],[\"这无疑增加了难度\",{\"1\":{\"1927\":1}}],[\"这违反了面向对象的设计原则\",{\"1\":{\"1677\":1}}],[\"这违背了\",{\"1\":{\"1094\":1,\"2416\":1,\"2940\":1}}],[\"这符合单一职责原则\",{\"1\":{\"1624\":1}}],[\"这叫作\",{\"1\":{\"1568\":1}}],[\"这在一定程度上增加了系统的复杂性\",{\"1\":{\"1514\":1}}],[\"这简化了聚合类\",{\"1\":{\"1509\":1}}],[\"这简化了客户端代码\",{\"1\":{\"811\":1}}],[\"这降低了系统中对象的数量\",{\"1\":{\"1379\":1}}],[\"这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制\",{\"1\":{\"5817\":1}}],[\"这种情况只在重载了类的构造器的时候才会出现\",{\"1\":{\"5621\":1}}],[\"这种形式\",{\"1\":{\"5450\":1}}],[\"这种形式就是我们要讲的配置\",{\"1\":{\"1333\":1}}],[\"这种使用双引号的形式创建字符串实例\",{\"1\":{\"5312\":1}}],[\"这种使用方法有点类似硬编码\",{\"1\":{\"2350\":1}}],[\"这种方法可以解决开始遇到的问题\",{\"1\":{\"5037\":1}}],[\"这种方式既繁琐又浪费代码\",{\"1\":{\"6799\":1}}],[\"这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量\",{\"1\":{\"5664\":1}}],[\"这种方式来控制类的加载\",{\"1\":{\"5516\":1}}],[\"这种方式可以改写成\",{\"1\":{\"3192\":1}}],[\"这种方式可分为创建型模式\",{\"1\":{\"2599\":1}}],[\"这种方式是最值得推荐的\",{\"1\":{\"2375\":1}}],[\"这种方式是\",{\"1\":{\"2331\":1}}],[\"这种方式采用了类装载的机制来保证初始化实例时只有一个线程\",{\"1\":{\"2322\":1}}],[\"这种方式\",{\"1\":{\"2302\":1}}],[\"这种方式和上面的方式其实类似\",{\"1\":{\"2295\":1}}],[\"这种方式基于\",{\"1\":{\"2290\":1}}],[\"这种方式通常用于控制不同种类客户对真实对象的访问权限\",{\"1\":{\"1922\":1}}],[\"这种方式通常用于要创建的目标对象开销很大时\",{\"1\":{\"1921\":1}}],[\"这种方式通常是为了隐藏目标对象存在于不同地址空间的事实\",{\"1\":{\"1920\":1}}],[\"这种参数类型可以用在类\",{\"1\":{\"4997\":1}}],[\"这种参数内有getname\",{\"1\":{\"3288\":1}}],[\"这种重用必须建立在语义的基础上\",{\"1\":{\"4891\":1}}],[\"这种异常的特点是java编译器会检查它\",{\"1\":{\"4729\":1}}],[\"这种异常又分为两类\",{\"1\":{\"4720\":1}}],[\"这种做法是允许的\",{\"1\":{\"4093\":1}}],[\"这种行为称作\",{\"1\":{\"4036\":1}}],[\"这种命名的好处\",{\"1\":{\"3286\":1}}],[\"这种描述模型所使用的语言被称为建模语言\",{\"1\":{\"2822\":1}}],[\"这种关系更加灵活\",{\"1\":{\"2782\":1}}],[\"这种判断还是有比较强的主观色彩\",{\"1\":{\"2759\":1}}],[\"这种改动范围比较集中的小型重构的难度就容易多了\",{\"1\":{\"2755\":1}}],[\"这种多例模式的理解方式有点类似工厂模式\",{\"1\":{\"2412\":1}}],[\"这种设计思路虽然可以解决问题\",{\"1\":{\"2727\":1}}],[\"这种设计模式就叫作单例设计模式\",{\"1\":{\"2386\":1}}],[\"这种设计方案\",{\"1\":{\"700\":1}}],[\"这种调用关系就会非常隐蔽\",{\"1\":{\"2358\":1}}],[\"这种单例模式可用\",{\"1\":{\"2296\":1}}],[\"这种单例模式\",{\"1\":{\"2291\":1}}],[\"这种写法比较简单\",{\"1\":{\"2288\":1}}],[\"这种复用可以在运行时动态进行\",{\"1\":{\"2222\":1}}],[\"这种复用所需的依赖较少\",{\"1\":{\"2221\":1}}],[\"这种类型的设计模式属于行为型模式\",{\"1\":{\"1931\":1,\"2640\":1}}],[\"这种模式对请求的发送者和接收者进行解耦\",{\"1\":{\"1929\":1}}],[\"这种模式有时又称作发布\",{\"1\":{\"1668\":1}}],[\"这种模式实现了文法表达式处理的接口\",{\"1\":{\"1455\":1}}],[\"这种交互关系常常是\",{\"1\":{\"1568\":1}}],[\"这种机制\",{\"1\":{\"1341\":1}}],[\"这给我们编码带来一定的麻烦\",{\"1\":{\"796\":1}}],[\"这些资源能够帮你成为\",{\"1\":{\"6999\":1}}],[\"这些框架并没有你想象的那么灵活\",{\"1\":{\"6860\":1}}],[\"这些框架都是尽力地降低你部署代码的壁垒\",{\"1\":{\"6859\":1}}],[\"这些类都有构建器\",{\"1\":{\"6836\":1}}],[\"这些会在不变性那一部分讨论\",{\"1\":{\"6803\":1}}],[\"这些工具伴随着java一起出现\",{\"1\":{\"6280\":1}}],[\"这些错误无法恢复或者不可能捕捉\",{\"1\":{\"5719\":1}}],[\"这些错误是不受检异常\",{\"1\":{\"4718\":1}}],[\"这些信息包含如下\",{\"1\":{\"4945\":1}}],[\"这些异常一般是由程序逻辑错误引起的\",{\"1\":{\"4722\":1}}],[\"这些异常是不检查异常\",{\"1\":{\"4722\":1}}],[\"这些假对象就被称为\",{\"1\":{\"4464\":1}}],[\"这些断言方法是可以工作的\",{\"1\":{\"4361\":1}}],[\"这些命名不是\",{\"1\":{\"4163\":1}}],[\"这些注解所占用的行不构成换行\",{\"1\":{\"4135\":1}}],[\"这些日志真的有人看吗\",{\"1\":{\"3294\":1}}],[\"这些情况\",{\"1\":{\"3274\":1}}],[\"这些操作彼此没有关联\",{\"1\":{\"2933\":1}}],[\"这些被处理的数据元素相对稳定而访问方式多种多样的数据结构\",{\"1\":{\"2930\":1}}],[\"这些虽简单却非常重要\",{\"1\":{\"2818\":1}}],[\"这些符号用于描述软件模型中的各个元素和他\",{\"1\":{\"2809\":1}}],[\"这些子类信奉\",{\"1\":{\"2792\":1}}],[\"这些代码都需要做调整\",{\"1\":{\"2705\":1}}],[\"这些方法应该按顺序放置在一起\",{\"1\":{\"3066\":1}}],[\"这些方法\",{\"1\":{\"2704\":1}}],[\"这些方法的定义如下\",{\"1\":{\"2652\":1}}],[\"这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的\",{\"1\":{\"2569\":1}}],[\"这些内容包括代码\",{\"1\":{\"2389\":1}}],[\"这些\",{\"1\":{\"2362\":1}}],[\"这些原则的目的只有一个\",{\"1\":{\"2255\":1}}],[\"这些对象描述了此\",{\"1\":{\"6035\":1,\"6038\":1}}],[\"这些对象反映此\",{\"1\":{\"6005\":1,\"6011\":1}}],[\"这些对象的类\",{\"1\":{\"2933\":1}}],[\"这些对象耗费大量的内存资源\",{\"1\":{\"1449\":1}}],[\"这些对象消耗大量内存\",{\"1\":{\"1439\":1}}],[\"这些对象有很多相似的地方\",{\"1\":{\"1373\":1}}],[\"这些为外部状态\",{\"1\":{\"1388\":1}}],[\"这些为内部状态\",{\"1\":{\"1388\":1}}],[\"这些都是在代码中写死的\",{\"1\":{\"1364\":1}}],[\"这些组件可能只是完成了一些核心功能\",{\"1\":{\"876\":1}}],[\"这些智能家电来自不同的厂家\",{\"1\":{\"769\":1}}],[\"这些就可以当做实现接口类\",{\"1\":{\"628\":1}}],[\"这一过程为打桩\",{\"1\":{\"687\":1,\"703\":1}}],[\"这限制了其使用范围\",{\"1\":{\"671\":1}}],[\"这个根\",{\"1\":{\"6864\":1}}],[\"这个教程\",{\"1\":{\"6845\":1}}],[\"这个想法比本身这么做还要糟糕\",{\"1\":{\"6842\":1}}],[\"这个想法表面看起来很棒\",{\"1\":{\"2789\":1}}],[\"这个类\",{\"1\":{\"6906\":1}}],[\"这个类里面保存的数据除了你去继承它\",{\"1\":{\"6802\":1}}],[\"这个类型检查是针对谁的呢\",{\"1\":{\"5122\":1}}],[\"这个classloader用来定位\",{\"1\":{\"6258\":1}}],[\"这个文件里的内容就是这个接口的具体的实现类\",{\"1\":{\"6144\":1}}],[\"这个参数或局部变量应该是final\",{\"1\":{\"5743\":1}}],[\"这个过程可能会出现多个线程交差\",{\"1\":{\"5605\":1}}],[\"这个编码可能跟原来的编码相同\",{\"1\":{\"5595\":1}}],[\"这个概念被称为信息隐藏或封装\",{\"1\":{\"5364\":1}}],[\"这个时期方法区在hotspot中由本地内存的元空间\",{\"1\":{\"5329\":1}}],[\"这个时期方法区在hotspot中由永久代\",{\"1\":{\"5326\":1}}],[\"这个时期方法区在hotspot中是由永久代来实现的\",{\"1\":{\"5323\":1}}],[\"这个时候为了让代码更清晰\",{\"1\":{\"4298\":1}}],[\"这个时候请抽取\",{\"1\":{\"3467\":1}}],[\"这个时候可使用目标对象子类来实现代理\",{\"1\":{\"1876\":1}}],[\"这个时候\",{\"1\":{\"1255\":1,\"2745\":1,\"2747\":1}}],[\"这个当然就是不行的\",{\"1\":{\"5222\":1}}],[\"这个无论我们通过new\",{\"1\":{\"5203\":1}}],[\"这个处理逻辑看着是合理的\",{\"1\":{\"4919\":1}}],[\"这个例子我把上述的知识点全部融入进来\",{\"1\":{\"4640\":1}}],[\"这个例子来讲解\",{\"1\":{\"2352\":1}}],[\"这个注解我们也比较常用到\",{\"1\":{\"4522\":1}}],[\"这个注解的作用是告诉编译器被修饰的程序元素已被\",{\"1\":{\"4520\":1}}],[\"这个注解的作用我们大家都不陌生\",{\"1\":{\"4516\":1}}],[\"这个注解的定义如下\",{\"1\":{\"4518\":1}}],[\"这个注解可以被用来修饰方法\",{\"1\":{\"4516\":1}}],[\"这个注释改为用\",{\"1\":{\"4266\":1}}],[\"这个\",{\"1\":{\"4481\":1}}],[\"这个获取数据的接口被封装为\",{\"1\":{\"4467\":1}}],[\"这个单测逻辑就比较复杂\",{\"1\":{\"4448\":1}}],[\"这个片段是用大写字母书写的并且会有标签符号\",{\"1\":{\"4254\":1}}],[\"这个片段非常重要\",{\"1\":{\"4253\":1}}],[\"这个特殊的注释不是必须的\",{\"1\":{\"4124\":1}}],[\"这个改动可能会破坏原本令人愉悦的代码格式\",{\"1\":{\"4096\":1}}],[\"这个index级别比较range还低\",{\"1\":{\"3375\":1}}],[\"这个目录就是起到覆盖索引的作用\",{\"1\":{\"3373\":1}}],[\"这个速度损耗可以忽略\",{\"1\":{\"3368\":1}}],[\"这个方法我们一般不会派上用场\",{\"1\":{\"6098\":1}}],[\"这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的\",{\"1\":{\"5661\":1}}],[\"这个方法需要传递几个参数\",{\"1\":{\"4475\":1}}],[\"这个方法只会运行一次\",{\"1\":{\"4299\":1,\"4302\":1}}],[\"这个方法返回是double类型\",{\"1\":{\"3243\":1}}],[\"这个方法已经过时\",{\"1\":{\"3044\":1}}],[\"这个try\",{\"1\":{\"3202\":1}}],[\"这个变量是针对一个线程内所有操作共享的\",{\"1\":{\"3182\":1}}],[\"这个区间内的integer值可以直接使用\",{\"1\":{\"3046\":1}}],[\"这个手段也非常有用\",{\"1\":{\"2772\":1}}],[\"这个口号喊得这么响\",{\"1\":{\"2749\":1}}],[\"这个原则非常重要\",{\"1\":{\"2691\":1}}],[\"这个术语是由埃里希\",{\"1\":{\"2574\":1}}],[\"这个对象看起来像是改变了其类\",{\"1\":{\"2419\":1}}],[\"这个对象已经成型\",{\"1\":{\"1858\":1,\"1892\":1}}],[\"这个词\",{\"1\":{\"2356\":1}}],[\"这个中介就是代理对象\",{\"1\":{\"1809\":1}}],[\"这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建\",{\"1\":{\"1741\":1}}],[\"这个需要注意\",{\"1\":{\"1659\":1}}],[\"这个需求很简单\",{\"1\":{\"1087\":1}}],[\"这个解释器使用该标识来解释语言中的句子\",{\"1\":{\"1070\":1}}],[\"这个组合很多\",{\"1\":{\"907\":1}}],[\"这个复杂对象通常由多个子部件按一定的步骤组合而成\",{\"1\":{\"661\":1}}],[\"这个数转化为十进制后是2147483646\",{\"1\":{\"424\":1}}],[\"这说明了integer泛型实例在编译之后被擦除掉了\",{\"1\":{\"5094\":1}}],[\"这说明\",{\"1\":{\"646\":1}}],[\"这增加了系统的理解与设计难度\",{\"1\":{\"596\":1}}],[\"这时只要一次类型转换就可以了\",{\"1\":{\"5037\":1}}],[\"这时只要找一个\",{\"1\":{\"1569\":1}}],[\"这时候可以使用模板方法模式\",{\"1\":{\"2686\":1}}],[\"这时候初始化\",{\"1\":{\"2290\":1}}],[\"这时便会产生多个实例\",{\"1\":{\"2301\":1}}],[\"这时可以先用小比例的虚拟代理替换真实的对象\",{\"1\":{\"1921\":1}}],[\"这时需要找一个中介帮忙完成某项任务\",{\"1\":{\"1809\":1}}],[\"这时需要第三者进行适配\",{\"1\":{\"485\":1}}],[\"这时如果系统内部发生改变\",{\"1\":{\"1094\":1}}],[\"这时要是有一个综合部门能解决一切手续问题就好了\",{\"1\":{\"1093\":1}}],[\"这时就可以考虑使用\",{\"1\":{\"770\":1}}],[\"这时用适配器模式能很好地解决这些问题\",{\"1\":{\"486\":1}}],[\"这时的b为true\",{\"1\":{\"444\":1}}],[\"这段代码通过\",{\"1\":{\"6963\":1}}],[\"这段代码会导致编译失败\",{\"1\":{\"4973\":1}}],[\"这段代码才可以正常工作\",{\"1\":{\"4862\":1}}],[\"这段代码最终打印结果为16843009\",{\"1\":{\"470\":1}}],[\"这段话听起来有点像绕口令\",{\"1\":{\"2394\":1}}],[\"这段程序运行结果如何\",{\"1\":{\"402\":1}}],[\"这里主要都是调用的lookupiterator的相应hasnext和next方法\",{\"1\":{\"6259\":1}}],[\"这里主要都是实现了迭代器的hasnext和next方法\",{\"1\":{\"6259\":1}}],[\"这里实际包含两个问题\",{\"1\":{\"6241\":1}}],[\"这里具体说一下eclipse的插件思想\",{\"1\":{\"6209\":1}}],[\"这里真正开始决定使用哪个factory\",{\"1\":{\"6201\":1}}],[\"这里会搜索classpath下以及jar包中所有的meta\",{\"1\":{\"6191\":1}}],[\"这里没有去meta\",{\"1\":{\"6188\":1}}],[\"这里就涉及到使用java的spi扩展机制来查找相关驱动的东西了\",{\"1\":{\"6177\":1}}],[\"这里就不全部列出了\",{\"1\":{\"5993\":1}}],[\"这里并没有涉及到spi的使用\",{\"1\":{\"6174\":1}}],[\"这里面的内容就是针对java中定义的接口的实现\",{\"1\":{\"6168\":1}}],[\"这里面的setvalue和getvalue这两个桥方法的意义又有不同\",{\"1\":{\"5172\":1}}],[\"这里在新窗口打开\",{\"1\":{\"6146\":1}}],[\"这里每次都生成新的类加载器\",{\"1\":{\"6120\":1}}],[\"这里是匹配最精确的子类进行返回\",{\"1\":{\"6104\":1}}],[\"这里例子源于https\",{\"1\":{\"5882\":1}}],[\"这里仅以擦除方法定义中的有限制类型参数为例\",{\"1\":{\"5085\":1}}],[\"这里给出几个被很多团队使用的异常处理最佳实践\",{\"1\":{\"4846\":1}}],[\"这里展示部分代码\",{\"1\":{\"4695\":1}}],[\"这里推荐你两篇文章\",{\"1\":{\"4668\":1}}],[\"这里注意\",{\"1\":{\"4623\":1}}],[\"这里节选自https\",{\"1\":{\"4458\":1}}],[\"这里只是说明\",{\"1\":{\"2536\":1}}],[\"这里请大家注意\",{\"1\":{\"2452\":1}}],[\"这里有点不好理解\",{\"1\":{\"2387\":1}}],[\"这里之所以会用\",{\"1\":{\"2356\":1}}],[\"这里本意是求出\",{\"1\":{\"2118\":1,\"2124\":2}}],[\"这里我们首先需要理解\",{\"1\":{\"5822\":1}}],[\"这里我们发现通过注解的方式\",{\"1\":{\"4686\":1}}],[\"这里我们使用到了双分派\",{\"1\":{\"2962\":1}}],[\"这里我们增加了\",{\"1\":{\"2188\":2,\"2194\":2}}],[\"这里我们是对接口的依赖\",{\"1\":{\"2082\":1}}],[\"这里我们拆分成\",{\"1\":{\"2038\":1}}],[\"这里我们需要回顾的是\",{\"1\":{\"5838\":1}}],[\"这里我们需要\",{\"1\":{\"1537\":1}}],[\"这里虽然没有在类这个级别上遵守单一职责原则\",{\"1\":{\"2024\":1}}],[\"这里完成对基本数据类型\",{\"1\":{\"1795\":1}}],[\"这里可以理解成一个新的公告板\",{\"1\":{\"1721\":1}}],[\"这里处理\",{\"1\":{\"1601\":1}}],[\"这里\",{\"1\":{\"1487\":1,\"2118\":1,\"2124\":1}}],[\"这里提到的文法和句子的概念同编译原理中的描述相同\",{\"1\":{\"1456\":1}}],[\"这里的职责是指类变化的原因\",{\"1\":{\"2001\":1}}],[\"这里的词法分析器和语法分析器都可以看做是解释器\",{\"1\":{\"1454\":1}}],[\"这里的\",{\"1\":{\"719\":1,\"2188\":1,\"2410\":1,\"5664\":1}}],[\"这里简单举两个例子\",{\"1\":{\"468\":1}}],[\"这里用到的>>>是无符号右移操作\",{\"1\":{\"422\":1}}],[\"这玩意如果使用不当的话不是非常安全\",{\"1\":{\"463\":1}}],[\"这样你就可以很容易的根据接口类来开发客户端\",{\"1\":{\"6941\":1}}],[\"这样你会清除地了解到你们公司选择的每一个外部依赖的版本\",{\"1\":{\"6866\":1}}],[\"这样你在使用流或者资源的时候\",{\"1\":{\"5670\":1}}],[\"这样这个类就不会被继承也不会被修改了\",{\"1\":{\"6837\":1}}],[\"这样比写一连串的判断是否为空的检查代码更好\",{\"1\":{\"6830\":1}}],[\"这样不仅减少了近一半的代码行数\",{\"1\":{\"6802\":1}}],[\"这样是没有错误的\",{\"1\":{\"5129\":1}}],[\"这样是一种设计模式\",{\"1\":{\"777\":1}}],[\"这样调用\",{\"1\":{\"5093\":1}}],[\"这样容器才够大\",{\"1\":{\"5052\":1}}],[\"这样可以有多重实现\",{\"1\":{\"5675\":1}}],[\"这样可以添加更为具体的异常信息并能够做针对的异常处理\",{\"1\":{\"4925\":1}}],[\"这样可以降低系统内存\",{\"1\":{\"1376\":1}}],[\"这样无论是打印到日志中还是在监控工具中\",{\"1\":{\"4897\":1}}],[\"这样做的必然结果是不要对不需要写文档的地方填写文档\",{\"1\":{\"6848\":1}}],[\"这样做的好处是\",{\"1\":{\"1811\":1,\"2778\":1}}],[\"这样做有什么意义呢\",{\"1\":{\"5143\":1}}],[\"这样做是为了最小化局部变量的作用域\",{\"1\":{\"4111\":1}}],[\"这样做逻辑清晰\",{\"1\":{\"3191\":1}}],[\"这样造成了具体元素变更比较困难\",{\"1\":{\"2971\":1}}],[\"这样即便在不了解全部细节的情况下\",{\"1\":{\"2772\":1}}],[\"这样才会更有弹性\",{\"1\":{\"2549\":1}}],[\"这样能把原来复杂的逻辑判断简单化\",{\"1\":{\"2417\":1}}],[\"这样能方便我们控制对数据库连接资源的消耗\",{\"1\":{\"2362\":1}}],[\"这样代码的改动就会比较大\",{\"1\":{\"2354\":1}}],[\"这样类更加独立\",{\"1\":{\"2175\":1}}],[\"这样写起来虽然简单\",{\"1\":{\"2120\":1}}],[\"这样只需要传入继承接口的类\",{\"1\":{\"2083\":1}}],[\"这样给接口传入不同的类\",{\"1\":{\"2067\":1}}],[\"这样对一个采购请求进行处理和\",{\"1\":{\"1965\":1}}],[\"这样当实现发生变化的时候\",{\"1\":{\"2695\":1,\"2717\":1}}],[\"这样当该对象没有被引用时\",{\"1\":{\"1923\":1}}],[\"这样当我们游戏的对象很多时\",{\"1\":{\"1641\":1}}],[\"这样以后就\",{\"1\":{\"1617\":1}}],[\"这样我们就可以做到\",{\"1\":{\"2396\":1}}],[\"这样我们就符合依赖倒转原则\",{\"1\":{\"2080\":1}}],[\"这样我们的变量引用和实际对象间\",{\"1\":{\"2094\":1}}],[\"这样我们不需要关心箱子里是什么\",{\"1\":{\"1503\":1}}],[\"这样我们有新的图形种类时\",{\"1\":{\"2151\":1}}],[\"这样我们有新的\",{\"1\":{\"1206\":1}}],[\"这样每一个组只需保存一个内部状态\",{\"1\":{\"1450\":1}}],[\"这样一来集合改变的话\",{\"1\":{\"1556\":1}}],[\"这样一来就能解释上面的打印结果了\",{\"1\":{\"445\":1}}],[\"这样一个行为特性\",{\"1\":{\"2735\":1}}],[\"这样一个行为\",{\"1\":{\"2731\":1}}],[\"这样一个抽象的事物概念\",{\"1\":{\"2724\":1}}],[\"这样一个\",{\"1\":{\"1363\":1,\"1368\":1}}],[\"这样将单个的简单工厂类变成了\",{\"1\":{\"1280\":1}}],[\"这样会让读你代码的人误以为那就是文档\",{\"1\":{\"6848\":1}}],[\"这样会污染代码\",{\"1\":{\"6817\":1}}],[\"这样会大大降低应用程序的复杂度\",{\"1\":{\"1095\":1}}],[\"这样会带来一些安全性问题\",{\"1\":{\"823\":1}}],[\"这样设计的依据\",{\"1\":{\"1990\":1}}],[\"这样设计\",{\"1\":{\"908\":1}}],[\"这样实际上是站在组织大小来进行分层次的\",{\"1\":{\"842\":1}}],[\"这样增加了代码维护成本\",{\"1\":{\"614\":1}}],[\"这样的构建工具绑定到一起\",{\"1\":{\"6992\":1}}],[\"这样的注解来检查类型\",{\"1\":{\"6985\":1}}],[\"这样的注释使该行成为非空白的\",{\"1\":{\"4149\":1}}],[\"这样的流畅接口让你的测试更具有可读性\",{\"1\":{\"6970\":1}}],[\"这样的微框架\",{\"1\":{\"6944\":1}}],[\"这样的框架\",{\"1\":{\"6941\":1}}],[\"这样的很普通的类\",{\"1\":{\"6842\":1}}],[\"这样的方法\",{\"1\":{\"6828\":1,\"6906\":1}}],[\"这样的方法来调用就可以了\",{\"1\":{\"2350\":1}}],[\"这样的代码是无法通过编译器的检查的\",{\"1\":{\"5180\":1}}],[\"这样的代码块通常用于限制局部变量的作用域\",{\"1\":{\"4014\":1}}],[\"这样的情况比第一种情况好的多\",{\"1\":{\"5143\":1}}],[\"这样的情况下\",{\"1\":{\"4483\":1}}],[\"这样的祈使句\",{\"1\":{\"4254\":1}}],[\"这样的话就可以控制对字段的修改行为\",{\"1\":{\"5368\":1}}],[\"这样的话\",{\"1\":{\"3190\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"3159\":1}}],[\"这样的设计\",{\"1\":{\"2727\":1}}],[\"这样的行为效率低下\",{\"1\":{\"4443\":1}}],[\"这样的行为\",{\"1\":{\"2725\":1}}],[\"这样的接口设计是否足够通用\",{\"1\":{\"2713\":1}}],[\"这样的接口设计就没有意义了\",{\"1\":{\"2712\":1}}],[\"这样的字眼\",{\"1\":{\"2707\":1}}],[\"这样的修改听起来并不复杂\",{\"1\":{\"2702\":1}}],[\"这样的例子在生活中还有很多\",{\"1\":{\"2637\":1}}],[\"这样的例子还有很多\",{\"1\":{\"587\":1,\"1569\":1,\"1667\":1,\"2929\":1}}],[\"这样的需求并不少见\",{\"1\":{\"2361\":1}}],[\"这样的软件\",{\"1\":{\"586\":1}}],[\"这样的简单赋值时\",{\"1\":{\"465\":1}}],[\"这样违背了\",{\"1\":{\"571\":1,\"2188\":1}}],[\"这样就不会由于上游的\",{\"1\":{\"6885\":1}}],[\"这样就不会造成类数量过多\",{\"1\":{\"910\":1}}],[\"这样就完成了类方法的动态调用\",{\"1\":{\"6020\":1}}],[\"这样就会有classcastexception了\",{\"1\":{\"5140\":1}}],[\"这样就会误导用户\",{\"1\":{\"2373\":1}}],[\"这样就只允许在这些点进行扩展\",{\"1\":{\"2688\":1}}],[\"这样就需要\",{\"1\":{\"2525\":1}}],[\"这样就能避免慢\",{\"1\":{\"2362\":1}}],[\"这样就可以保证线程安全了\",{\"1\":{\"2315\":1}}],[\"这样就可以使用了\",{\"1\":{\"509\":1}}],[\"这样就存在如下问题\",{\"1\":{\"1962\":1}}],[\"这样就很好的解决了对象的开销问题\",{\"1\":{\"1389\":1}}],[\"这样就避免了上一种方式的安全性问题\",{\"1\":{\"826\":1}}],[\"这样就实现了表面上调用一次方法\",{\"1\":{\"459\":1}}],[\"这样\",{\"1\":{\"407\":1,\"746\":1,\"1446\":1,\"1721\":1,\"2080\":1,\"2316\":1,\"2770\":1,\"5166\":2,\"6817\":1,\"6828\":1}}],[\"这是很恶心的样板代码\",{\"1\":{\"6968\":1}}],[\"这是它的回报\",{\"1\":{\"6960\":1}}],[\"这是postgresql对java的java\",{\"1\":{\"6170\":1}}],[\"这是为了确保可以使用父类实例的地方都可以使用子类实例\",{\"1\":{\"5365\":1}}],[\"这是正确的\",{\"1\":{\"5213\":1}}],[\"这是非常不好的习惯\",{\"1\":{\"4928\":1}}],[\"这是测试驱动开发\",{\"1\":{\"4446\":1}}],[\"这是基础\",{\"1\":{\"4430\":1}}],[\"这是硬件实现的原子操作\",{\"1\":{\"3541\":1}}],[\"这是不可能的\",{\"1\":{\"5638\":1}}],[\"这是不正确的\",{\"1\":{\"4255\":1}}],[\"这是不对的\",{\"1\":{\"3402\":1}}],[\"这是不合理的\",{\"1\":{\"3058\":1,\"4098\":1}}],[\"这是一种静态关系\",{\"1\":{\"5796\":1}}],[\"这是一种不负责任的表现\",{\"1\":{\"3267\":1}}],[\"这是一条通用规则\",{\"1\":{\"4871\":1}}],[\"这是一个简单的泛型方法\",{\"1\":{\"5112\":1}}],[\"这是一个片段\",{\"1\":{\"4254\":1}}],[\"这是一个非核心功能点影响到核心应用的典型反例\",{\"1\":{\"3274\":1}}],[\"这是一个大坑\",{\"1\":{\"3046\":1}}],[\"这是一个用于绘图的类\",{\"1\":{\"2144\":1,\"2149\":1,\"2152\":1}}],[\"这是示例注释\",{\"1\":{\"3026\":1}}],[\"这是迪米特法则所不建议的\",{\"1\":{\"2971\":1}}],[\"这是我觉得设计模式所处的位置\",{\"1\":{\"2793\":1}}],[\"这是我们使用享元模式需要注意的地方\",{\"1\":{\"1442\":1}}],[\"这是野鸭\",{\"1\":{\"2521\":1,\"2539\":1}}],[\"这是就会使用到单例模式\",{\"1\":{\"2260\":1}}],[\"这是因为\",{\"1\":{\"5458\":1}}],[\"这是因为不支持默认方法的接口的维护成本太高了\",{\"1\":{\"5379\":1}}],[\"这是因为新的8字节内存空间addr2中存储的二进制数字是下面这样\",{\"1\":{\"476\":1}}],[\"这是因为在对int型的数字进行移位操作时\",{\"1\":{\"430\":1}}],[\"这是脚注内容\",{\"1\":{\"107\":1}}],[\"这是项目主页的案例\",{\"1\":{\"1\":1}}],[\"猜猜看\",{\"1\":{\"402\":1}}],[\"看这\",{\"1\":{\"6814\":1}}],[\"看这个名字也可以明白\",{\"1\":{\"463\":1}}],[\"看完上面的几个例子解析\",{\"1\":{\"6224\":1}}],[\"看懂\",{\"1\":{\"5810\":1}}],[\"看到上面的代码\",{\"1\":{\"4944\":1}}],[\"看到这条日志你能做什么\",{\"1\":{\"3294\":1}}],[\"看到这样的设计\",{\"1\":{\"2356\":1}}],[\"看到这你是不是一脸懵逼\",{\"1\":{\"404\":1}}],[\"看下这个例子\",{\"1\":{\"5005\":1}}],[\"看下底层实现\",{\"1\":{\"4935\":1}}],[\"看下scanner\",{\"1\":{\"4797\":1}}],[\"看下面代码\",{\"1\":{\"2117\":1}}],[\"看不懂自己的代码\",{\"1\":{\"4454\":1}}],[\"看修改代码会不会牵一发而动全身\",{\"1\":{\"2758\":1}}],[\"看了刚刚的讲解\",{\"1\":{\"2715\":1}}],[\"看代码示例\",{\"1\":{\"2017\":1}}],[\"看看信息\",{\"1\":{\"1720\":2}}],[\"看看下面的代码\",{\"1\":{\"400\":1}}],[\"看一个披萨的项目\",{\"1\":{\"1190\":1}}],[\"看一下改造后的代码\",{\"1\":{\"452\":1}}],[\"看一下就穿帮了啊\",{\"1\":{\"412\":1}}],[\"看问题的角度变广了\",{\"1\":{\"144\":1}}],[\"瞒天过海\",{\"0\":{\"399\":1}}],[\"壹\",{\"0\":{\"399\":1}}],[\"时间处理库\",{\"1\":{\"6930\":1}}],[\"时间日期工具库\",{\"0\":{\"6356\":1}}],[\"时间测试\",{\"0\":{\"4375\":1}}],[\"时间不在服务范围\",{\"1\":{\"3692\":1}}],[\"时间单位为秒\",{\"1\":{\"3234\":1}}],[\"时序图\",{\"1\":{\"5811\":1}}],[\"时序图反映了一系列对象间的交互与协作关系\",{\"1\":{\"3453\":1}}],[\"时序图与协作图\",{\"1\":{\"2813\":1}}],[\"时需注意npe问题\",{\"1\":{\"3382\":1}}],[\"时连同\",{\"1\":{\"2882\":1}}],[\"时代变化\",{\"1\":{\"1859\":1,\"1893\":1}}],[\"时\",{\"1\":{\"397\":1,\"798\":1,\"1313\":1,\"2002\":1,\"2104\":1,\"3190\":1,\"3387\":1,\"4195\":1,\"5082\":1}}],[\"时常焦虑\",{\"1\":{\"144\":1}}],[\"塑造个人能力的不可替代性\",{\"1\":{\"396\":1}}],[\"熟练掌握这些小技巧后\",{\"1\":{\"393\":1}}],[\"42\",{\"1\":{\"6170\":1,\"6193\":1}}],[\"4294967297\",{\"1\":{\"475\":1}}],[\"46094\",{\"1\":{\"6132\":1}}],[\"46\",{\"1\":{\"6063\":1}}],[\"4554617c\",{\"1\":{\"5334\":3,\"5450\":1,\"5451\":1}}],[\"41\",{\"1\":{\"4963\":3,\"4969\":3}}],[\"4之后\",{\"1\":{\"4485\":1}}],[\"47394475\",{\"1\":{\"4983\":1}}],[\"47449512\",{\"1\":{\"4701\":1}}],[\"47\",{\"1\":{\"4374\":1,\"4380\":1}}],[\"498\",{\"1\":{\"4374\":1,\"4380\":1}}],[\"43\",{\"1\":{\"3366\":1,\"4374\":1,\"4380\":1}}],[\"40896997\",{\"1\":{\"6134\":1}}],[\"404\",{\"1\":{\"3226\":1}}],[\"403\",{\"1\":{\"3226\":1}}],[\"401\",{\"1\":{\"3226\":1}}],[\"40\",{\"1\":{\"1704\":2,\"1842\":1,\"4963\":1,\"4969\":1,\"4978\":1}}],[\"44425934\",{\"1\":{\"4425\":1}}],[\"44\",{\"1\":{\"520\":1,\"540\":1,\"4920\":1}}],[\"4\",{\"0\":{\"6955\":1},\"1\":{\"382\":1,\"466\":1,\"469\":2,\"473\":3,\"924\":1,\"928\":1,\"1136\":1,\"1903\":1,\"2052\":1,\"2058\":1,\"2152\":1,\"2469\":1,\"2546\":1,\"2566\":1,\"3006\":2,\"3016\":1,\"3018\":1,\"3020\":1,\"3024\":3,\"3025\":1,\"3030\":2,\"3031\":1,\"3074\":1,\"3076\":1,\"3079\":1,\"3099\":1,\"3106\":1,\"3205\":1,\"3224\":1,\"3226\":1,\"3276\":1,\"3332\":1,\"3366\":1,\"3391\":1,\"3426\":1,\"3442\":1,\"3494\":1,\"3497\":1,\"3504\":1,\"3513\":1,\"3520\":1,\"3524\":1,\"3528\":1,\"3532\":1,\"4324\":3,\"4327\":1,\"4368\":1,\"4386\":1,\"4407\":1,\"4600\":1,\"4683\":1,\"4955\":1,\"5062\":1,\"5169\":3,\"5296\":1,\"5388\":1,\"5467\":1,\"5495\":1,\"5631\":1,\"6780\":1,\"6967\":1,\"6969\":1}}],[\"4px\",{\"1\":{\"351\":1,\"354\":1,\"359\":1,\"370\":1,\"376\":1}}],[\"jbpm\",{\"1\":{\"6680\":1}}],[\"jboss\",{\"1\":{\"6502\":1}}],[\"jgrapht\",{\"1\":{\"6589\":1}}],[\"jgroups\",{\"1\":{\"6387\":1}}],[\"jmap\",{\"1\":{\"6995\":1,\"6996\":1}}],[\"jmock\",{\"0\":{\"6959\":1},\"1\":{\"6781\":1,\"6961\":1,\"6963\":1}}],[\"jmockit\",{\"1\":{\"6633\":1}}],[\"jmonkeyengine\",{\"1\":{\"6420\":1}}],[\"jmeter\",{\"1\":{\"6626\":1}}],[\"jmh\",{\"1\":{\"6564\":1}}],[\"jhiccup\",{\"1\":{\"6563\":1}}],[\"jhipster\",{\"1\":{\"6375\":1}}],[\"jfinal\",{\"1\":{\"6551\":1}}],[\"jna\",{\"1\":{\"6527\":1}}],[\"jcp\",{\"1\":{\"6701\":1}}],[\"jcommander\",{\"1\":{\"6654\":1}}],[\"jca\",{\"1\":{\"6599\":1}}],[\"jca和sdo\",{\"1\":{\"6546\":1}}],[\"jctools\",{\"1\":{\"6436\":1}}],[\"jcl\",{\"1\":{\"3280\":2,\"6197\":1,\"6946\":1}}],[\"jetty\",{\"1\":{\"6614\":1}}],[\"jetbrain针对jvm\",{\"1\":{\"6473\":1}}],[\"jetbrain的持续集成解决方案\",{\"1\":{\"6333\":1}}],[\"jersey\",{\"1\":{\"6578\":1,\"6939\":1,\"6941\":1}}],[\"jersey和metrics\",{\"1\":{\"6576\":1}}],[\"jeromq\",{\"1\":{\"6503\":1}}],[\"jenkins\",{\"1\":{\"6332\":1,\"6880\":1}}],[\"jep\",{\"1\":{\"1500\":1}}],[\"jqassistant\",{\"1\":{\"6309\":1}}],[\"jreble\",{\"1\":{\"6982\":1}}],[\"jrebel\",{\"0\":{\"6979\":1},\"1\":{\"6376\":1,\"6786\":1,\"6982\":1}}],[\"jre\",{\"0\":{\"5577\":1},\"1\":{\"5578\":2,\"5579\":2}}],[\"jls7\",{\"1\":{\"5271\":1}}],[\"j++\",{\"1\":{\"5271\":1,\"5914\":1}}],[\"j\",{\"1\":{\"5271\":1,\"5582\":1,\"5914\":5,\"6118\":2}}],[\"jimfs\",{\"1\":{\"6511\":1}}],[\"jitpack\",{\"1\":{\"6402\":1}}],[\"jit\",{\"1\":{\"5825\":1}}],[\"jianshu\",{\"1\":{\"5245\":1,\"6276\":1}}],[\"jingjiren\",{\"1\":{\"4424\":1}}],[\"jock\",{\"1\":{\"6703\":1}}],[\"jooλ\",{\"1\":{\"6417\":1}}],[\"jooq\",{\"0\":{\"6948\":1},\"1\":{\"6347\":1,\"6712\":1,\"6729\":1,\"6778\":1,\"6949\":1,\"6951\":1,\"6952\":1}}],[\"jopendocument\",{\"1\":{\"6410\":1}}],[\"joda\",{\"0\":{\"6928\":1},\"1\":{\"6358\":2,\"6774\":1,\"6929\":1}}],[\"job\",{\"1\":{\"6302\":1}}],[\"join\",{\"1\":{\"5670\":1,\"6951\":1}}],[\"joinpoint\",{\"1\":{\"4693\":16}}],[\"joiner\",{\"1\":{\"4179\":4,\"6907\":1}}],[\"john\",{\"1\":{\"2571\":1}}],[\"johnson\",{\"1\":{\"2571\":1}}],[\"josh\",{\"1\":{\"2331\":1}}],[\"j2ee\",{\"1\":{\"2261\":1}}],[\"jvm基准测试工具\",{\"1\":{\"6564\":1}}],[\"jvm基础\",{\"1\":{\"5834\":1,\"5836\":1}}],[\"jvm与jdk\",{\"0\":{\"6463\":1}}],[\"jvm又会回调\",{\"1\":{\"6062\":1}}],[\"jvm中class的表示\",{\"1\":{\"5886\":1}}],[\"jvm会创建一个class对象\",{\"1\":{\"5848\":1}}],[\"jvm会在当前出现异常的方法中\",{\"1\":{\"4952\":1}}],[\"jvm知道你的本意吗\",{\"1\":{\"5166\":1}}],[\"jvm处理异常的机制\",{\"0\":{\"4936\":1}}],[\"jvm的xms和xmx设置一样大小的内存容量\",{\"1\":{\"3446\":1}}],[\"jvm探源与内存分析\",{\"1\":{\"2983\":1}}],[\"jvm\",{\"1\":{\"1364\":2,\"2324\":1,\"2341\":1,\"2383\":1,\"4717\":2,\"4906\":1,\"5194\":1,\"5516\":1,\"5533\":1,\"5578\":1,\"5668\":1,\"6081\":1,\"6942\":1,\"6995\":1,\"6996\":1}}],[\"jprofiler\",{\"1\":{\"6565\":1}}],[\"jpa\",{\"1\":{\"6546\":1,\"6552\":1}}],[\"jpct\",{\"1\":{\"6423\":1}}],[\"jp\",{\"1\":{\"1315\":4}}],[\"james\",{\"1\":{\"6706\":1}}],[\"jade\",{\"1\":{\"6652\":1}}],[\"jaxenter\",{\"1\":{\"6733\":1}}],[\"jax\",{\"1\":{\"6578\":1,\"6940\":1,\"6941\":1}}],[\"jaxrs\",{\"1\":{\"6577\":1}}],[\"jaxb\",{\"1\":{\"6546\":1}}],[\"jasperreports\",{\"1\":{\"6560\":1}}],[\"jasperreports的精简版\",{\"1\":{\"6557\":1}}],[\"jabber\",{\"1\":{\"6507\":1}}],[\"javin\",{\"1\":{\"6711\":1}}],[\"javolution\",{\"1\":{\"6435\":1}}],[\"javabean\",{\"1\":{\"6795\":1,\"6797\":1}}],[\"javabase\",{\"1\":{\"5914\":1,\"5916\":3,\"5942\":3}}],[\"java包含最新的java技术资讯\",{\"1\":{\"6742\":1}}],[\"javaworld\",{\"1\":{\"6732\":1}}],[\"javalobby\",{\"1\":{\"6731\":1}}],[\"java平台开发组\",{\"1\":{\"6714\":1}}],[\"java杂志官方账号\",{\"1\":{\"6708\":1}}],[\"javaone明星演讲者\",{\"1\":{\"6700\":1,\"6702\":1}}],[\"javaoop基础知识总结\",{\"1\":{\"5813\":1}}],[\"java解惑\",{\"1\":{\"6694\":1}}],[\"java解释器调用main方法执行开始执行程序\",{\"1\":{\"4742\":1}}],[\"java并发编程实战\",{\"1\":{\"6692\":1}}],[\"java全栈web开发框架\",{\"1\":{\"6669\":1}}],[\"javatuples\",{\"1\":{\"6653\":1}}],[\"java版baidu\",{\"1\":{\"6542\":1}}],[\"javamelody\",{\"1\":{\"6520\":1}}],[\"javafx\",{\"1\":{\"6426\":1,\"6706\":1}}],[\"java资源大全中文版\",{\"0\":{\"6277\":1}}],[\"java反射机制在框架设计中极为广泛\",{\"1\":{\"5817\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"5817\":1}}],[\"java实现oop\",{\"1\":{\"5814\":1}}],[\"java实战经典\",{\"1\":{\"5012\":1}}],[\"java在编译时还可捕获类型声明中的许多常见错误\",{\"1\":{\"5747\":1}}],[\"java在编译和运行程序时\",{\"1\":{\"5747\":1}}],[\"java揭示出可能出现但未被处理的异常\",{\"1\":{\"5747\":1}}],[\"java语言的鲁棒性\",{\"0\":{\"5746\":1}}],[\"java中spi机制深入及源码解析\",{\"1\":{\"6270\":1}}],[\"java中spi机制主要思想是将装配的控制权移到程序之外\",{\"1\":{\"6141\":1}}],[\"java中有三种移位运算符\",{\"1\":{\"5738\":1}}],[\"java中常见的异常类\",{\"1\":{\"4817\":1}}],[\"java移位运算符\",{\"0\":{\"5737\":1}}],[\"java虚拟机也要进行检查\",{\"1\":{\"5715\":1}}],[\"java1\",{\"1\":{\"5690\":1}}],[\"javacc是更加专门的轻量级工具\",{\"1\":{\"6315\":1}}],[\"javacc\",{\"1\":{\"6315\":1}}],[\"javac\",{\"1\":{\"5579\":1}}],[\"javaslang\",{\"0\":{\"6916\":1},\"1\":{\"6416\":1,\"6773\":1,\"6917\":1,\"6925\":1}}],[\"javassist\",{\"1\":{\"6299\":1}}],[\"javaserver\",{\"1\":{\"6285\":1,\"6286\":1}}],[\"javase\",{\"1\":{\"5198\":1,\"5241\":1}}],[\"javascript会自动转换为number类型\",{\"1\":{\"3229\":1}}],[\"javascript\",{\"1\":{\"329\":1,\"332\":1,\"339\":1,\"4042\":1,\"5552\":1}}],[\"java不允许进行这样的引用传递\",{\"1\":{\"5140\":1}}],[\"java编程思想\",{\"1\":{\"6693\":1}}],[\"java编程思想一书中\",{\"1\":{\"4806\":1}}],[\"java编写原生ios应用\",{\"1\":{\"6515\":1}}],[\"java编译器是通过先检查代码中泛型的类型\",{\"1\":{\"5118\":1}}],[\"java泛型加入了类型参数的上下边界机制\",{\"1\":{\"5037\":1}}],[\"java泛型的实现采取了\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"java泛型这个特性是从jdk\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"java标准异常中有几个是经常被使用的异常\",{\"1\":{\"4876\":1}}],[\"java通\",{\"1\":{\"4708\":1}}],[\"java异常类层次结构图\",{\"1\":{\"4709\":1}}],[\"java异常都是对象\",{\"1\":{\"4708\":1}}],[\"java异常机制可以使程序中异常处理代码和正常业务代码分离\",{\"1\":{\"4706\":1}}],[\"java异常是java提供的一种识别及响应错误的一致性机制\",{\"1\":{\"4706\":1}}],[\"javazejian\",{\"1\":{\"4699\":1}}],[\"java8提供了哪些新的注解\",{\"0\":{\"4653\":1}}],[\"java8\",{\"0\":{\"4618\":1,\"4620\":1},\"1\":{\"6687\":1}}],[\"javap\",{\"1\":{\"4599\":1,\"4943\":1}}],[\"java内置注解\",{\"0\":{\"4505\":1}}],[\"java自带的标准注解\",{\"1\":{\"4501\":1}}],[\"java里单元指一个类\",{\"1\":{\"4433\":1}}],[\"java文件\",{\"1\":{\"4311\":1,\"4395\":1}}],[\"javadoc\",{\"0\":{\"4240\":1,\"4256\":1,\"4264\":1,\"6846\":1},\"1\":{\"3937\":1,\"4031\":1,\"4069\":1,\"4148\":2,\"4243\":1,\"4244\":1,\"4246\":1,\"4247\":1,\"4253\":1,\"4255\":1,\"4257\":1,\"4258\":2,\"4260\":1,\"4263\":1,\"4265\":1,\"4266\":1,\"4267\":1,\"4605\":1,\"4895\":1,\"6758\":1}}],[\"javadoc方式会提示相关注释\",{\"1\":{\"3208\":1}}],[\"javaguide\",{\"1\":{\"3929\":1}}],[\"java代码用正则来验证客户端的输入\",{\"1\":{\"3341\":1}}],[\"java类库中定义的可以通过预检查方式规避的runtimeexception异常不应该通过catch的方式来处理\",{\"1\":{\"3265\":1}}],[\"java服务端如果直接返回long整型数据给前端\",{\"1\":{\"3229\":1}}],[\"java开发手册\",{\"1\":{\"2982\":1,\"2983\":1}}],[\"java专业\",{\"1\":{\"1535\":2}}],[\"java\",{\"0\":{\"2980\":1,\"3928\":1,\"5545\":1,\"5567\":1,\"5592\":1,\"5596\":1,\"5604\":1,\"5616\":1,\"5620\":1,\"5624\":1,\"5641\":1,\"5663\":1,\"5667\":1,\"5676\":1,\"6743\":1,\"6912\":1,\"7023\":1},\"1\":{\"393\":1,\"524\":1,\"715\":1,\"860\":1,\"930\":1,\"943\":1,\"1196\":1,\"1198\":1,\"1213\":1,\"1314\":1,\"1347\":1,\"1364\":2,\"1500\":1,\"1505\":1,\"1539\":1,\"1743\":1,\"1768\":3,\"1854\":1,\"1878\":2,\"1906\":1,\"2065\":1,\"2331\":1,\"2334\":1,\"2341\":1,\"2383\":1,\"2396\":1,\"2554\":2,\"2572\":1,\"2693\":2,\"2735\":1,\"2925\":1,\"3044\":1,\"3081\":4,\"3100\":2,\"3308\":1,\"3520\":2,\"3534\":1,\"3546\":1,\"3931\":2,\"3937\":1,\"3943\":1,\"4028\":1,\"4034\":1,\"4098\":1,\"4156\":1,\"4239\":1,\"4349\":1,\"4351\":1,\"4353\":2,\"4355\":2,\"4368\":1,\"4374\":27,\"4378\":1,\"4380\":20,\"4383\":2,\"4390\":1,\"4407\":3,\"4478\":2,\"4508\":1,\"4600\":1,\"4607\":3,\"4642\":5,\"4644\":6,\"4647\":1,\"4649\":10,\"4703\":1,\"4704\":2,\"4712\":1,\"4794\":1,\"4819\":1,\"4820\":1,\"4821\":1,\"4822\":1,\"4823\":1,\"4824\":1,\"4825\":1,\"4826\":1,\"4843\":1,\"4848\":1,\"4867\":1,\"4868\":1,\"4920\":10,\"4937\":1,\"4943\":2,\"4963\":8,\"4969\":7,\"4972\":1,\"4978\":7,\"4993\":2,\"5046\":1,\"5169\":6,\"5189\":1,\"5194\":1,\"5201\":1,\"5204\":1,\"5206\":1,\"5232\":1,\"5233\":1,\"5234\":1,\"5247\":2,\"5270\":1,\"5271\":1,\"5287\":1,\"5298\":1,\"5332\":1,\"5337\":1,\"5339\":1,\"5350\":1,\"5352\":1,\"5356\":1,\"5359\":1,\"5378\":1,\"5379\":2,\"5396\":1,\"5455\":1,\"5457\":1,\"5468\":1,\"5518\":2,\"5528\":1,\"5531\":1,\"5537\":1,\"5540\":1,\"5542\":1,\"5543\":1,\"5546\":1,\"5556\":1,\"5562\":1,\"5565\":2,\"5566\":1,\"5568\":2,\"5569\":1,\"5570\":1,\"5571\":1,\"5572\":1,\"5573\":1,\"5574\":1,\"5575\":1,\"5576\":1,\"5578\":1,\"5579\":1,\"5581\":1,\"5582\":1,\"5586\":3,\"5587\":3,\"5588\":3,\"5599\":1,\"5603\":1,\"5617\":2,\"5619\":1,\"5648\":1,\"5661\":1,\"5668\":1,\"5670\":2,\"5672\":2,\"5673\":1,\"5675\":1,\"5677\":2,\"5780\":1,\"5784\":1,\"5807\":1,\"5815\":1,\"5819\":1,\"5825\":2,\"5836\":1,\"5883\":1,\"5888\":1,\"5890\":1,\"5916\":4,\"5942\":3,\"5962\":4,\"6013\":1,\"6015\":17,\"6058\":1,\"6061\":1,\"6063\":1,\"6065\":5,\"6083\":3,\"6086\":1,\"6090\":1,\"6118\":14,\"6137\":1,\"6138\":2,\"6144\":1,\"6168\":1,\"6193\":1,\"6201\":2,\"6258\":1,\"6415\":1,\"6444\":1,\"6541\":2,\"6542\":1,\"6551\":1,\"6568\":1,\"6603\":1,\"6621\":1,\"6684\":1,\"6690\":1,\"6691\":1,\"6692\":1,\"6693\":1,\"6694\":1,\"6697\":1,\"6698\":1,\"6700\":1,\"6701\":2,\"6702\":1,\"6703\":1,\"6706\":1,\"6707\":2,\"6708\":1,\"6709\":2,\"6710\":2,\"6715\":1,\"6717\":1,\"6718\":1,\"6719\":1,\"6721\":1,\"6726\":1,\"6728\":1,\"6729\":1,\"6730\":1,\"6735\":1,\"6738\":1,\"6739\":1,\"6744\":4,\"6772\":2,\"6795\":1,\"6814\":1,\"6820\":3,\"6821\":1,\"6826\":1,\"6845\":1,\"6850\":1,\"6856\":1,\"6858\":1,\"6859\":1,\"6864\":1,\"6870\":2,\"6871\":1,\"6881\":1,\"6891\":1,\"6893\":1,\"6900\":1,\"6906\":2,\"6913\":3,\"6917\":1,\"6925\":2,\"6930\":2,\"6932\":1,\"6940\":1,\"6943\":2,\"6944\":1,\"6946\":2,\"6950\":1,\"6957\":1,\"6961\":1,\"6974\":2,\"6984\":1,\"6994\":1,\"6999\":1,\"7001\":1,\"7002\":1,\"7005\":1,\"7008\":1,\"7009\":1,\"7010\":1,\"7012\":1}}],[\"jacop\",{\"1\":{\"6323\":1}}],[\"jackson\",{\"1\":{\"6459\":1,\"6576\":1}}],[\"jack\",{\"1\":{\"1431\":1,\"1774\":1,\"5914\":1,\"5916\":1}}],[\"jar和postgresql\",{\"1\":{\"6193\":1}}],[\"jar中\",{\"1\":{\"6168\":1,\"6170\":1}}],[\"jar中的constant目录下\",{\"1\":{\"3016\":1}}],[\"jar\",{\"1\":{\"5664\":1,\"6193\":1,\"6859\":1,\"6883\":1}}],[\"jar包\",{\"1\":{\"3549\":1,\"3550\":1,\"3551\":1}}],[\"jakarta\",{\"1\":{\"3280\":2}}],[\"january\",{\"1\":{\"3087\":2}}],[\"ja\",{\"1\":{\"1315\":2}}],[\"japaneseimperialcalendar\",{\"1\":{\"1315\":3}}],[\"japanese\",{\"1\":{\"1315\":1}}],[\"jdbi\",{\"1\":{\"6346\":1}}],[\"jdbc接口定义\",{\"0\":{\"6165\":1}}],[\"jdbctemplate\",{\"0\":{\"784\":1},\"1\":{\"785\":1,\"789\":1}}],[\"jdbc\",{\"0\":{\"627\":1,\"6163\":1},\"1\":{\"628\":1,\"630\":1,\"649\":1,\"5516\":1,\"6164\":2,\"6168\":1,\"6172\":1,\"6173\":1,\"6176\":1,\"6178\":1,\"6180\":2,\"6949\":1}}],[\"jdk开源实现\",{\"1\":{\"6466\":1}}],[\"jdk中缺失的并发工具\",{\"1\":{\"6436\":1}}],[\"jdk中查找服务的实现的工具类是\",{\"1\":{\"6144\":1}}],[\"jdk版本\",{\"1\":{\"5318\":1}}],[\"jdk8\",{\"1\":{\"3145\":1}}],[\"jdk8中接口允许有默认实现\",{\"1\":{\"3003\":1}}],[\"jdk9已修复\",{\"1\":{\"3081\":1}}],[\"jdk7之后引入的概念\",{\"1\":{\"3078\":1}}],[\"jdk1\",{\"1\":{\"2330\":1,\"5321\":1,\"5324\":1,\"5327\":1,\"5623\":1,\"6201\":2}}],[\"jdk\",{\"0\":{\"714\":1,\"859\":1,\"929\":1,\"1311\":1,\"1432\":1,\"1542\":1,\"1722\":1,\"1853\":1,\"2542\":1,\"5577\":1,\"5669\":1,\"5671\":1},\"1\":{\"937\":1,\"1312\":1,\"1433\":1,\"1543\":1,\"1723\":1,\"1813\":1,\"1851\":1,\"1852\":1,\"1855\":1,\"1865\":1,\"1871\":2,\"1876\":1,\"1880\":1,\"2334\":1,\"2543\":1,\"4590\":2,\"5579\":1,\"5670\":2,\"5672\":1,\"6465\":2}}],[\"jug协调\",{\"1\":{\"6713\":1}}],[\"jug\",{\"1\":{\"6701\":1,\"6702\":1,\"6715\":1}}],[\"juejin\",{\"1\":{\"6136\":1}}],[\"juint是java编程语言的单元测试框架\",{\"1\":{\"4274\":1,\"4276\":1}}],[\"junit集成\",{\"1\":{\"6667\":1}}],[\"junit3到junit4\",{\"0\":{\"4676\":1}}],[\"junit38classrunner\",{\"1\":{\"4318\":1,\"4402\":1}}],[\"junit5\",{\"0\":{\"4426\":1}}],[\"junitsuitetest\",{\"1\":{\"4415\":1}}],[\"junitstarter\",{\"1\":{\"4374\":4}}],[\"junittest2\",{\"1\":{\"4413\":2,\"4415\":1}}],[\"junittest1\",{\"1\":{\"4411\":2,\"4415\":1}}],[\"junit提供了一个暂停的方便选项\",{\"1\":{\"4376\":1}}],[\"junitcore\",{\"1\":{\"4374\":2}}],[\"junit会统计忽略的用例数\",{\"1\":{\"4296\":1}}],[\"junit在一个条中显示进度\",{\"1\":{\"4285\":1}}],[\"junit测试可以被组织为测试套件\",{\"1\":{\"4284\":1}}],[\"junit测试可以自动运行并且检查自身结果并提供即时反馈\",{\"1\":{\"4283\":1}}],[\"junit特点\",{\"0\":{\"4277\":1}}],[\"junit4源码分析运行原理在新窗口打开\",{\"1\":{\"4686\":1}}],[\"junit4这\",{\"1\":{\"4481\":1}}],[\"junit4ideatestrunner\",{\"1\":{\"4374\":2}}],[\"junit4<\",{\"1\":{\"4324\":1}}],[\"junit4的默认运行器\",{\"1\":{\"4317\":1,\"4401\":1}}],[\"junit4\",{\"0\":{\"4273\":1},\"1\":{\"4317\":1,\"4326\":1,\"4333\":1,\"4337\":1,\"4360\":1,\"4367\":1,\"4368\":1,\"4372\":1,\"4374\":2,\"4378\":1,\"4380\":1,\"4383\":1,\"4401\":1,\"4405\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4415\":1,\"4419\":1,\"4422\":1,\"4481\":1}}],[\"junit\",{\"0\":{\"6955\":1},\"1\":{\"2792\":1,\"4175\":1,\"4278\":1,\"4281\":1,\"4282\":1,\"4326\":2,\"4327\":1,\"4333\":1,\"4337\":2,\"4360\":4,\"4367\":1,\"4368\":4,\"4371\":1,\"4372\":1,\"4374\":19,\"4378\":1,\"4380\":7,\"4383\":3,\"4386\":1,\"4387\":1,\"4390\":1,\"4407\":6,\"4411\":1,\"4413\":1,\"4415\":2,\"4419\":3,\"4422\":1,\"4485\":2,\"4680\":1,\"4683\":1,\"6634\":1,\"6640\":1,\"6780\":1,\"6957\":1,\"6958\":2,\"6966\":1}}],[\"judge2\",{\"1\":{\"420\":1}}],[\"judge\",{\"1\":{\"418\":1,\"450\":1,\"453\":2}}],[\"just\",{\"1\":{\"384\":1,\"4231\":1,\"6201\":1}}],[\"jsf框架\",{\"1\":{\"6672\":1}}],[\"jsfiddle\",{\"1\":{\"339\":1}}],[\"jsoup\",{\"1\":{\"6661\":1}}],[\"jsonobject\",{\"1\":{\"4693\":2}}],[\"jsonresult\",{\"1\":{\"4693\":5}}],[\"json是一种通用的mime类型\",{\"1\":{\"3235\":1}}],[\"json\",{\"0\":{\"6455\":1},\"1\":{\"391\":2,\"3224\":1,\"3235\":1,\"3700\":1,\"6656\":1,\"6909\":1,\"6910\":2}}],[\"jscience\",{\"1\":{\"6590\":1}}],[\"jsr\",{\"1\":{\"6360\":1}}],[\"jsni\",{\"1\":{\"4031\":1}}],[\"jstorm\",{\"1\":{\"3426\":1}}],[\"jstorm或com\",{\"1\":{\"3426\":1}}],[\"jstack\",{\"1\":{\"3157\":1}}],[\"js渲染\",{\"1\":{\"3411\":1}}],[\"jsp渲染\",{\"1\":{\"3411\":1}}],[\"jsp\",{\"1\":{\"1928\":1}}],[\"5c160420e51d452a60684431\",{\"1\":{\"6136\":1}}],[\"5出现\",{\"1\":{\"5623\":1}}],[\"53534949\",{\"1\":{\"6275\":1}}],[\"53545041\",{\"1\":{\"5246\":1}}],[\"53941091\",{\"1\":{\"5242\":1}}],[\"51982979\",{\"1\":{\"5239\":1}}],[\"5才开始加入的\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"5中提供了4个标准的元注解\",{\"1\":{\"4586\":1}}],[\"5开始自带的标准注解\",{\"1\":{\"4508\":1}}],[\"5版本开始引入的一个特性\",{\"1\":{\"4493\":1,\"4495\":1}}],[\"589\",{\"1\":{\"4920\":1}}],[\"58\",{\"1\":{\"4374\":2,\"4920\":1}}],[\"523\",{\"1\":{\"6810\":1}}],[\"52344729\",{\"1\":{\"5882\":1,\"6137\":1}}],[\"52\",{\"1\":{\"3229\":1}}],[\"5d\",{\"1\":{\"3014\":1}}],[\"500\",{\"1\":{\"3226\":1,\"3365\":1}}],[\"5000\",{\"1\":{\"1956\":2,\"1957\":1,\"1972\":2,\"3358\":1,\"4378\":1}}],[\"50\",{\"1\":{\"2370\":1,\"2372\":1,\"2373\":1,\"2374\":1,\"2441\":1,\"2454\":1,\"3366\":1,\"4374\":1,\"4380\":1,\"5761\":1}}],[\"575817\",{\"1\":{\"4983\":1}}],[\"57\",{\"1\":{\"2187\":1,\"4374\":1}}],[\"5f\",{\"1\":{\"926\":1}}],[\"5v\",{\"1\":{\"516\":1,\"520\":3,\"535\":1,\"540\":2}}],[\"5\",{\"0\":{\"5671\":1},\"1\":{\"338\":1,\"354\":2,\"382\":1,\"522\":2,\"542\":2,\"709\":1,\"781\":3,\"924\":1,\"1535\":1,\"1603\":1,\"2043\":1,\"2052\":1,\"2058\":1,\"2188\":2,\"2194\":2,\"2330\":1,\"2469\":1,\"2567\":1,\"2604\":1,\"2610\":1,\"3006\":1,\"3016\":1,\"3021\":1,\"3024\":1,\"3030\":1,\"3074\":1,\"3076\":1,\"3205\":1,\"3224\":1,\"3226\":1,\"3254\":1,\"3276\":1,\"3451\":1,\"3454\":1,\"3494\":1,\"3504\":1,\"3517\":1,\"3528\":1,\"3532\":1,\"4088\":2,\"4179\":1,\"4327\":1,\"4386\":1,\"4407\":1,\"4464\":1,\"4754\":1,\"4943\":1,\"4956\":1,\"4963\":1,\"4969\":1,\"4978\":1,\"5062\":1,\"5169\":2,\"5271\":1,\"5499\":1,\"5632\":1,\"5670\":1,\"5672\":1,\"6936\":1}}],[\"♥\",{\"1\":{\"310\":1}}],[\"3步\",{\"1\":{\"6186\":1}}],[\"38259539\",{\"1\":{\"6133\":1}}],[\"38173324\",{\"1\":{\"5813\":1}}],[\"386\",{\"1\":{\"4380\":1}}],[\"39\",{\"1\":{\"4963\":1,\"4969\":1,\"4978\":1}}],[\"3中\",{\"1\":{\"4485\":1}}],[\"323\",{\"1\":{\"5282\":2}}],[\"325\",{\"1\":{\"4374\":1}}],[\"32\",{\"1\":{\"4179\":1,\"5257\":1,\"5258\":1,\"5599\":1}}],[\"34264849\",{\"1\":{\"4423\":1}}],[\"340\",{\"1\":{\"4380\":1}}],[\"34\",{\"1\":{\"3524\":1,\"4963\":1,\"4969\":1,\"4978\":1}}],[\"345\",{\"1\":{\"3263\":1}}],[\"310实现\",{\"1\":{\"6360\":1}}],[\"31000\",{\"1\":{\"1976\":1}}],[\"31\",{\"1\":{\"3078\":1,\"3499\":1,\"4963\":1,\"4969\":1,\"4978\":1,\"5446\":1,\"5447\":2,\"5448\":3}}],[\"31执行结果为2018\",{\"1\":{\"3078\":1}}],[\"363\",{\"1\":{\"4374\":1}}],[\"362909601374617660\",{\"1\":{\"3229\":1}}],[\"362909601374617692\",{\"1\":{\"3229\":1}}],[\"366\",{\"1\":{\"3085\":1}}],[\"365\",{\"1\":{\"3082\":1,\"3085\":3}}],[\"36\",{\"1\":{\"2983\":1,\"4963\":1,\"4969\":1,\"4978\":1}}],[\"361\",{\"1\":{\"1389\":1}}],[\"3l\",{\"1\":{\"2409\":2}}],[\"3=\",{\"1\":{\"2118\":2,\"2124\":2}}],[\"3325560\",{\"1\":{\"6274\":1}}],[\"3391013\",{\"1\":{\"5244\":1}}],[\"33\",{\"1\":{\"2083\":1,\"4374\":1}}],[\"33350\",{\"1\":{\"4992\":1}}],[\"333\",{\"1\":{\"354\":1,\"359\":1,\"376\":1}}],[\"3f\",{\"1\":{\"1720\":2,\"3014\":1,\"3037\":1}}],[\"3011274\",{\"1\":{\"5022\":1,\"5243\":1}}],[\"300\",{\"1\":{\"2456\":1}}],[\"3000000000l\",{\"1\":{\"4159\":2}}],[\"30000\",{\"1\":{\"1958\":2,\"1959\":2,\"1972\":2}}],[\"30\",{\"1\":{\"1655\":2,\"1704\":1,\"1720\":2,\"2373\":1,\"2374\":1,\"2456\":1,\"3511\":1,\"4963\":3,\"4969\":1,\"4978\":1,\"5169\":1}}],[\"3为例\",{\"1\":{\"422\":1}}],[\"3544287\",{\"1\":{\"4991\":1}}],[\"35\",{\"1\":{\"311\":1,\"4179\":1}}],[\"3\",{\"0\":{\"3552\":1,\"5612\":2},\"1\":{\"278\":1,\"351\":1,\"832\":1,\"834\":1,\"926\":1,\"928\":1,\"1436\":1,\"1479\":1,\"1718\":1,\"1871\":1,\"1903\":1,\"2022\":1,\"2038\":1,\"2052\":1,\"2058\":2,\"2089\":1,\"2118\":4,\"2124\":5,\"2149\":1,\"2152\":1,\"2188\":1,\"2286\":1,\"2293\":1,\"2408\":1,\"2409\":1,\"2469\":1,\"2546\":2,\"2565\":1,\"2599\":1,\"2706\":1,\"2841\":1,\"2987\":1,\"3006\":2,\"3016\":1,\"3018\":1,\"3020\":1,\"3029\":1,\"3030\":1,\"3034\":1,\"3058\":1,\"3065\":2,\"3074\":1,\"3076\":1,\"3079\":1,\"3081\":2,\"3089\":1,\"3093\":1,\"3099\":1,\"3106\":1,\"3119\":1,\"3159\":1,\"3173\":1,\"3194\":2,\"3205\":1,\"3206\":1,\"3224\":1,\"3226\":1,\"3251\":1,\"3254\":1,\"3276\":1,\"3352\":1,\"3364\":1,\"3375\":1,\"3378\":1,\"3383\":1,\"3394\":1,\"3414\":1,\"3426\":1,\"3427\":1,\"3442\":1,\"3452\":1,\"3453\":1,\"3491\":1,\"3494\":1,\"3497\":1,\"3504\":1,\"3505\":1,\"3509\":1,\"3520\":1,\"3524\":1,\"3528\":1,\"3532\":1,\"4115\":4,\"4125\":1,\"4360\":2,\"4368\":1,\"4407\":1,\"4458\":1,\"4600\":1,\"4680\":1,\"4943\":3,\"4954\":1,\"4963\":4,\"4969\":2,\"4978\":2,\"5046\":1,\"5062\":1,\"5193\":1,\"5196\":1,\"5294\":1,\"5383\":1,\"5402\":1,\"5435\":1,\"5464\":1,\"5480\":1,\"5492\":1,\"5630\":1,\"5653\":1,\"6201\":1,\"6552\":1}}],[\"ys\",{\"1\":{\"6154\":1,\"6155\":1,\"6159\":1}}],[\"y内容不变\",{\"1\":{\"5657\":1}}],[\"y的比较结果和y\",{\"1\":{\"3119\":1}}],[\"yyyy\",{\"1\":{\"3078\":1,\"3161\":1,\"3236\":1,\"3284\":1}}],[\"yyyy表示当天所在的年\",{\"1\":{\"3078\":1}}],[\"yangguanbao\",{\"1\":{\"3110\":1,\"3211\":1}}],[\"yang\",{\"1\":{\"3031\":1,\"3109\":1}}],[\"y\",{\"1\":{\"1436\":5,\"3016\":1,\"3049\":2,\"3053\":2,\"3119\":3,\"5112\":2,\"5262\":1,\"5267\":2,\"5376\":1,\"5382\":2,\"5402\":6,\"5422\":2,\"5424\":2,\"5427\":2,\"5434\":3,\"5440\":6,\"5448\":1,\"5476\":2,\"5486\":3,\"5491\":4,\"5654\":1,\"5656\":2}}],[\"yet\",{\"1\":{\"6109\":1}}],[\"years\",{\"1\":{\"7012\":1}}],[\"year\",{\"1\":{\"1313\":1,\"3078\":1}}],[\"yes\",{\"1\":{\"272\":1,\"3016\":5,\"4102\":2,\"6201\":1}}],[\"yesnostartis\",{\"1\":{\"269\":1,\"273\":1}}],[\"yougewe\",{\"1\":{\"6052\":1}}],[\"yourkit\",{\"1\":{\"6568\":1}}],[\"your\",{\"1\":{\"5356\":1}}],[\"yourself\",{\"1\":{\"3467\":1}}],[\"youtubeimporteryoutubeimporter\",{\"1\":{\"4221\":1}}],[\"youtube\",{\"1\":{\"4220\":1}}],[\"youku\",{\"1\":{\"2987\":1}}],[\"you\",{\"1\":{\"252\":1,\"255\":1,\"266\":1,\"317\":1,\"325\":1,\"350\":1,\"382\":1,\"3033\":1,\"4152\":1,\"6904\":1}}],[\"gdb\",{\"1\":{\"6977\":1}}],[\"gson\",{\"0\":{\"6908\":1},\"1\":{\"6458\":1,\"6771\":1,\"6909\":1,\"6910\":5,\"6911\":1}}],[\"gs\",{\"1\":{\"6433\":1}}],[\"glassfish\",{\"1\":{\"6283\":1,\"6717\":1}}],[\"global\",{\"1\":{\"6201\":1}}],[\"globaltimeout\",{\"1\":{\"4383\":1}}],[\"gps\",{\"1\":{\"3805\":1}}],[\"gmt\",{\"1\":{\"3548\":1}}],[\"gupta\",{\"1\":{\"6702\":1}}],[\"guaranteed\",{\"1\":{\"6834\":1}}],[\"guava\",{\"0\":{\"6899\":1},\"1\":{\"6651\":1,\"6770\":1,\"6836\":1,\"6900\":1,\"6901\":1,\"6903\":1,\"6907\":1}}],[\"guava的函数式编程扩展\",{\"1\":{\"6414\":1}}],[\"guan\",{\"1\":{\"3105\":1,\"3109\":1}}],[\"guice\",{\"1\":{\"6365\":1,\"6822\":1}}],[\"gui\",{\"0\":{\"6424\":1},\"1\":{\"2798\":1}}],[\"g\",{\"1\":{\"3056\":1,\"3087\":1,\"5579\":1}}],[\"geeks\",{\"1\":{\"6728\":1}}],[\"geekery\",{\"1\":{\"6712\":1}}],[\"gee\",{\"1\":{\"6721\":1}}],[\"gephi\",{\"1\":{\"6650\":1}}],[\"genson\",{\"1\":{\"6457\":1}}],[\"gender\",{\"1\":{\"5759\":2,\"5760\":2,\"5761\":2}}],[\"genericdeclaration\",{\"1\":{\"5825\":1}}],[\"generic\",{\"1\":{\"5247\":1,\"5558\":1}}],[\"generictype\",{\"1\":{\"5234\":2}}],[\"generictype<string>\",{\"1\":{\"5234\":2}}],[\"generictype<t>\",{\"1\":{\"5234\":1}}],[\"genericarraytype\",{\"1\":{\"5233\":1}}],[\"genericsdemo30\",{\"1\":{\"5062\":1}}],[\"genericsdemo21\",{\"1\":{\"5044\":1}}],[\"genericsdemo24\",{\"1\":{\"5020\":1}}],[\"genericsdemo09\",{\"1\":{\"5017\":1}}],[\"genericsdemo06\",{\"1\":{\"5015\":1}}],[\"genericstest\",{\"1\":{\"4644\":1,\"4649\":1}}],[\"generics\",{\"1\":{\"3113\":3,\"5077\":1,\"5198\":1,\"5241\":1}}],[\"generation\",{\"0\":{\"6813\":1},\"1\":{\"6751\":1}}],[\"generating\",{\"1\":{\"6118\":1}}],[\"generatename\",{\"1\":{\"6118\":1}}],[\"generatemethod\",{\"1\":{\"6109\":1,\"6111\":1,\"6114\":1,\"6115\":1,\"6116\":1}}],[\"generateconstructor\",{\"1\":{\"6086\":1}}],[\"generatedname\",{\"1\":{\"6118\":3}}],[\"generated\",{\"1\":{\"5825\":1,\"6086\":1,\"6111\":1,\"6114\":1,\"6118\":2}}],[\"generateaccesstoken\",{\"1\":{\"2699\":2,\"2705\":2,\"2711\":3,\"2712\":1}}],[\"generate\",{\"1\":{\"2467\":1,\"2469\":2,\"3062\":1,\"6116\":1,\"6117\":1,\"6118\":1}}],[\"generatestate\",{\"1\":{\"2467\":1}}],[\"generalization\",{\"0\":{\"2892\":1,\"5779\":1},\"1\":{\"2893\":1,\"5782\":1}}],[\"getuser\",{\"1\":{\"6927\":1}}],[\"getunsafe\",{\"1\":{\"6065\":1}}],[\"getunicodelocaletype\",{\"1\":{\"1315\":1}}],[\"getexceptiontypes\",{\"1\":{\"6086\":1,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"getexpstr\",{\"1\":{\"1491\":2}}],[\"getogenericstring\",{\"1\":{\"5940\":2,\"5942\":2}}],[\"getownertype\",{\"1\":{\"5236\":1}}],[\"getobjectaddress\",{\"1\":{\"5334\":5}}],[\"getobject\",{\"1\":{\"3041\":1}}],[\"getgenericreturntype方法都是获取method对象表示的方法的返回类型\",{\"1\":{\"6048\":1}}],[\"getgenericreturntype\",{\"1\":{\"6031\":1}}],[\"getgenericparametertypes也是同样的道理\",{\"1\":{\"6050\":1}}],[\"getgenericparametertypes\",{\"1\":{\"5925\":1,\"5940\":2,\"5942\":1,\"6037\":1}}],[\"getgenericsuperclass\",{\"1\":{\"5234\":1}}],[\"getgender\",{\"1\":{\"5761\":1}}],[\"getgreekpizza\",{\"1\":{\"1212\":1}}],[\"getfactory\",{\"1\":{\"6199\":1,\"6200\":1,\"6201\":1}}],[\"getfindclasses\",{\"1\":{\"6063\":1}}],[\"getfindclasstime\",{\"1\":{\"6063\":1}}],[\"getfield\",{\"1\":{\"5956\":1,\"5962\":1,\"5964\":2}}],[\"getfields\",{\"1\":{\"5878\":1,\"5883\":1,\"5959\":1,\"5962\":1,\"5963\":1,\"6081\":1}}],[\"getfoo\",{\"1\":{\"4260\":1}}],[\"getflyweight\",{\"1\":{\"1406\":6}}],[\"getyear\",{\"1\":{\"3081\":1}}],[\"getsystemresources\",{\"1\":{\"6219\":1,\"6258\":1}}],[\"getsystemproperty\",{\"1\":{\"6201\":1}}],[\"getsystemclassloader\",{\"1\":{\"6180\":1,\"6258\":2}}],[\"getsysuser\",{\"1\":{\"4693\":1}}],[\"getsecuritymanager\",{\"1\":{\"6063\":1,\"6065\":1,\"6258\":1}}],[\"getseq\",{\"1\":{\"3018\":1}}],[\"getsuperclass\",{\"1\":{\"5883\":1}}],[\"getsupercalss\",{\"1\":{\"5874\":1}}],[\"getsuppressed\",{\"1\":{\"4799\":1}}],[\"getsimplename\",{\"1\":{\"5853\":1,\"5866\":1,\"5883\":1,\"5885\":1,\"5888\":3}}],[\"getsignature\",{\"1\":{\"4693\":2}}],[\"getsavedproperty\",{\"1\":{\"5271\":1}}],[\"getsalary\",{\"1\":{\"5055\":1}}],[\"getstatic\",{\"1\":{\"4963\":3,\"4969\":3,\"4978\":3}}],[\"getstate\",{\"1\":{\"1636\":6,\"2438\":1,\"2471\":1}}],[\"getstrategy\",{\"1\":{\"2512\":1}}],[\"gethelper\",{\"1\":{\"3179\":1}}],[\"gethours\",{\"1\":{\"3081\":1}}],[\"gethttpmessage\",{\"1\":{\"2990\":1}}],[\"gethumidity\",{\"1\":{\"1702\":2,\"1718\":1}}],[\"getparent\",{\"1\":{\"6258\":1}}],[\"getparentdelegationtime\",{\"1\":{\"6063\":1}}],[\"getparentid\",{\"1\":{\"4696\":1}}],[\"getparametertypes\",{\"1\":{\"5914\":1,\"5931\":1,\"5940\":2,\"5942\":1,\"6034\":1,\"6071\":1,\"6086\":1,\"6101\":1,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"getparametermap\",{\"1\":{\"4693\":1}}],[\"getpersonbyname\",{\"1\":{\"4133\":1}}],[\"getpingfenbyname\",{\"1\":{\"2987\":1}}],[\"getproperty\",{\"1\":{\"6180\":1,\"6201\":3,\"6219\":1}}],[\"getproxyinstance\",{\"1\":{\"1871\":1,\"1873\":1,\"1903\":1,\"1905\":1}}],[\"getpressure\",{\"1\":{\"1702\":2,\"1718\":1}}],[\"getprice\",{\"1\":{\"922\":1,\"924\":1,\"926\":3,\"1972\":6,\"1974\":1,\"4467\":2}}],[\"getkey\",{\"1\":{\"2469\":1,\"3093\":1,\"3099\":1,\"5017\":2}}],[\"getdata\",{\"1\":{\"3070\":1,\"5234\":1,\"6118\":1,\"6798\":1}}],[\"getdispensoutstate\",{\"1\":{\"2454\":1}}],[\"getdispensestate\",{\"1\":{\"2454\":1}}],[\"getdeclaringclass\",{\"1\":{\"5922\":1,\"5940\":2,\"5942\":1,\"5962\":2,\"5988\":1,\"6086\":2,\"6109\":2,\"6111\":2,\"6114\":2}}],[\"getdeclaredmethods0\",{\"1\":{\"6096\":1}}],[\"getdeclaredmethods方法都只能获取当前类的方法\",{\"1\":{\"6016\":1}}],[\"getdeclaredmethods\",{\"1\":{\"6004\":1,\"6013\":1}}],[\"getdeclaredmethod\",{\"1\":{\"6001\":1,\"6013\":1,\"6017\":2,\"6054\":1,\"6090\":1}}],[\"getdeclaredconstructors0\",{\"1\":{\"6076\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"5908\":1,\"5914\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"5905\":1,\"5914\":1,\"5940\":1}}],[\"getdeclaredannotations\",{\"1\":{\"4637\":1,\"4647\":1}}],[\"getdeclaredannotationsbytype\",{\"1\":{\"4635\":1}}],[\"getdeclaredannotation\",{\"1\":{\"4633\":1}}],[\"getdeclaredfields方法来获取字段即可\",{\"1\":{\"5963\":1}}],[\"getdeclaredfields\",{\"1\":{\"5880\":1,\"5883\":1,\"5953\":1,\"5962\":1}}],[\"getdeclaredfield\",{\"1\":{\"438\":2,\"464\":1,\"5950\":1,\"5962\":1,\"5964\":2}}],[\"getdeptid\",{\"1\":{\"4696\":1}}],[\"getdeptname\",{\"1\":{\"4693\":2,\"4696\":3}}],[\"getdept\",{\"1\":{\"4693\":3}}],[\"getdef\",{\"1\":{\"1649\":1,\"1653\":2}}],[\"getdefault\",{\"1\":{\"1315\":2}}],[\"getdesc\",{\"1\":{\"1533\":1}}],[\"getdes\",{\"1\":{\"850\":1,\"852\":2,\"854\":2,\"856\":2,\"922\":1,\"926\":3,\"928\":6}}],[\"getnoraffllestate\",{\"1\":{\"2452\":1,\"2454\":2}}],[\"getnext\",{\"1\":{\"1953\":5}}],[\"getnameifpresent\",{\"1\":{\"4136\":1,\"4139\":1}}],[\"getname\",{\"1\":{\"850\":1,\"852\":3,\"854\":3,\"856\":3,\"1199\":2,\"1214\":1,\"1250\":4,\"1425\":1,\"1427\":1,\"1533\":1,\"1535\":3,\"1539\":2,\"1761\":1,\"1763\":4,\"1772\":1,\"2836\":1,\"3157\":1,\"3288\":1,\"3289\":1,\"4179\":1,\"4693\":2,\"5334\":3,\"5336\":1,\"5761\":1,\"5853\":2,\"5864\":1,\"5883\":3,\"5884\":1,\"5886\":1,\"5888\":4,\"5914\":3,\"5928\":1,\"5940\":5,\"5942\":2,\"5985\":1,\"6040\":1,\"6065\":1,\"6071\":1,\"6090\":1,\"6099\":2,\"6101\":1,\"6109\":1,\"6111\":1,\"6114\":1,\"6219\":1,\"6258\":4}}],[\"getxxx\",{\"1\":{\"1697\":1}}],[\"getvit\",{\"1\":{\"1649\":1,\"1653\":2}}],[\"getvar\",{\"1\":{\"5015\":2,\"5020\":3,\"5042\":1,\"5044\":1}}],[\"getvariant\",{\"1\":{\"1315\":1}}],[\"getvalue\",{\"1\":{\"1491\":2,\"2467\":6,\"2469\":1,\"3093\":1,\"3099\":1,\"5017\":2,\"5099\":1,\"5101\":1,\"5149\":1,\"5151\":2,\"5153\":1,\"5156\":1,\"5158\":2,\"5164\":1,\"5169\":4,\"5176\":2,\"5178\":2,\"5180\":2,\"5371\":1,\"6258\":1}}],[\"getmapping\",{\"1\":{\"4696\":1}}],[\"getmanresult\",{\"1\":{\"2960\":4,\"2962\":1}}],[\"getmethodaccessor\",{\"1\":{\"6109\":1}}],[\"getmethod\",{\"1\":{\"4693\":2,\"5093\":1,\"6007\":1,\"6013\":1,\"6017\":1}}],[\"getmethods\",{\"1\":{\"4647\":1,\"6010\":1,\"6013\":1,\"6081\":1}}],[\"getmemento\",{\"1\":{\"1636\":2,\"1651\":1,\"1655\":1}}],[\"getmediator\",{\"1\":{\"1603\":5}}],[\"getmessage\",{\"1\":{\"1601\":2,\"1603\":5,\"1772\":1,\"1795\":1,\"2473\":1,\"3292\":1,\"4693\":2,\"6201\":3}}],[\"getmodifiers\",{\"1\":{\"438\":1,\"6065\":1,\"6086\":2,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"getwidget\",{\"1\":{\"6834\":1}}],[\"getwomanresult\",{\"1\":{\"2960\":4,\"2962\":2}}],[\"getwebsitecount\",{\"1\":{\"1429\":1,\"1431\":1}}],[\"getwebsitecategory\",{\"1\":{\"1429\":1,\"1431\":4}}],[\"getwall\",{\"1\":{\"707\":1}}],[\"getallcount\",{\"1\":{\"6013\":1,\"6015\":2,\"6017\":1}}],[\"getallemployee\",{\"1\":{\"2188\":4,\"2194\":4}}],[\"getactualtypearguments\",{\"1\":{\"5234\":2,\"5236\":1}}],[\"getannotationlog\",{\"1\":{\"4693\":2}}],[\"getannotation的区别在于\",{\"1\":{\"4632\":1}}],[\"getannotation\",{\"1\":{\"4627\":1,\"4647\":1,\"4693\":1}}],[\"getannotationsbytype会检测注解对应的重复注解容器\",{\"1\":{\"4632\":1}}],[\"getannotationsbytype方法与\",{\"1\":{\"4632\":1}}],[\"getannotationsbytype\",{\"1\":{\"4631\":1}}],[\"getannotations\",{\"1\":{\"4614\":1,\"4629\":1}}],[\"getandincrement\",{\"1\":{\"3157\":1}}],[\"geta\",{\"1\":{\"3276\":1}}],[\"getage\",{\"1\":{\"1761\":1,\"1763\":4,\"1772\":1,\"5853\":1,\"5914\":1}}],[\"getarg\",{\"1\":{\"1366\":3}}],[\"getadapter\",{\"1\":{\"1315\":1}}],[\"gettargetexception\",{\"1\":{\"6065\":1}}],[\"gettarget\",{\"1\":{\"4693\":1}}],[\"gettime\",{\"1\":{\"3080\":1}}],[\"gettemperature\",{\"1\":{\"1702\":2,\"1718\":1}}],[\"getter的参数名称\",{\"1\":{\"2997\":1}}],[\"getter的参数名称也要避免与成员变量名称相同\",{\"1\":{\"2996\":1}}],[\"getter\",{\"1\":{\"1197\":1,\"1246\":1,\"1360\":2,\"2452\":1,\"3068\":1,\"3534\":1,\"5368\":1,\"6933\":1,\"6934\":1}}],[\"gettypename\",{\"1\":{\"6049\":1}}],[\"gettype\",{\"1\":{\"1366\":1,\"1974\":1,\"5976\":1}}],[\"getip\",{\"1\":{\"4693\":1}}],[\"getiterator\",{\"1\":{\"1525\":3}}],[\"getisref\",{\"1\":{\"1366\":1}}],[\"getidcard\",{\"1\":{\"2853\":1}}],[\"getid\",{\"1\":{\"1366\":5,\"1972\":4,\"1974\":1,\"2188\":4,\"2194\":4,\"2350\":1,\"2353\":2,\"2355\":4,\"2379\":2,\"2381\":2,\"2397\":2,\"2406\":2,\"3120\":2,\"5369\":1}}],[\"getinsance\",{\"1\":{\"2381\":1}}],[\"getinstance\",{\"1\":{\"1134\":5,\"1136\":5,\"1313\":2,\"1315\":2,\"2284\":1,\"2286\":3,\"2290\":1,\"2293\":3,\"2298\":3,\"2304\":3,\"2307\":1,\"2310\":3,\"2313\":3,\"2320\":3,\"2323\":1,\"2350\":1,\"2353\":2,\"2355\":2,\"2369\":1,\"2370\":2,\"2372\":2,\"2373\":1,\"2374\":2,\"2376\":1,\"2381\":1,\"2397\":1,\"2406\":2,\"2409\":1,\"2411\":4,\"3085\":1,\"6199\":1}}],[\"getinstanc\",{\"1\":{\"1134\":1,\"1136\":1}}],[\"getinfo\",{\"1\":{\"1406\":2,\"2078\":2,\"2082\":4}}],[\"getintance\",{\"1\":{\"2355\":2,\"2371\":1}}],[\"getinterfaces\",{\"1\":{\"1871\":1,\"5872\":1,\"5883\":1}}],[\"getint\",{\"1\":{\"466\":1,\"469\":1,\"473\":1,\"5993\":1}}],[\"getbaz\",{\"1\":{\"6829\":1}}],[\"getbar\",{\"1\":{\"6827\":1,\"6829\":1}}],[\"getbaise\",{\"1\":{\"707\":1}}],[\"getboolean\",{\"1\":{\"5993\":1}}],[\"getbytes\",{\"1\":{\"4368\":2}}],[\"getb\",{\"1\":{\"3276\":1}}],[\"getbean从singletonobjects\",{\"1\":{\"1369\":1}}],[\"getbean\",{\"1\":{\"1344\":1,\"1353\":1,\"1356\":3,\"1366\":1}}],[\"getloginname\",{\"1\":{\"4693\":1}}],[\"getlog\",{\"1\":{\"3283\":1,\"6199\":1}}],[\"getlogger\",{\"1\":{\"3281\":1,\"4179\":1,\"4693\":1}}],[\"getlock\",{\"1\":{\"3201\":1}}],[\"getlong\",{\"1\":{\"473\":1}}],[\"getlanguage\",{\"1\":{\"1315\":2}}],[\"getc\",{\"1\":{\"3276\":1}}],[\"getcurrentstate\",{\"1\":{\"2465\":1,\"2467\":6,\"2471\":11,\"2473\":1}}],[\"getcachedfactory\",{\"1\":{\"6201\":1}}],[\"getcallerclass\",{\"1\":{\"6059\":1,\"6065\":2,\"6086\":1,\"6090\":1,\"6107\":1}}],[\"getcalendarprovider\",{\"1\":{\"1315\":1}}],[\"getcanonicalname与getsimplename的区别\",{\"1\":{\"5884\":1}}],[\"getcanonicalname\",{\"1\":{\"4261\":1,\"5868\":1,\"5883\":1,\"5887\":1,\"5888\":4}}],[\"getcanrafflestate\",{\"1\":{\"2454\":1}}],[\"getconfigurationfile\",{\"1\":{\"6201\":1}}],[\"getcontextclassloader\",{\"1\":{\"6258\":1}}],[\"getcontextclassloaderinternal\",{\"1\":{\"6201\":1}}],[\"getcontext\",{\"1\":{\"6258\":1}}],[\"getcontrollermethoddescription\",{\"1\":{\"4693\":2}}],[\"getconnection\",{\"1\":{\"6173\":1}}],[\"getconstructor0\",{\"1\":{\"6065\":1,\"6071\":1,\"6072\":1}}],[\"getconstructors\",{\"1\":{\"5902\":1}}],[\"getconstructor\",{\"1\":{\"1366\":1,\"5899\":1,\"5914\":1}}],[\"getconstructorargs\",{\"1\":{\"1366\":1}}],[\"getcount\",{\"1\":{\"2452\":1,\"2454\":1}}],[\"getcountry\",{\"1\":{\"1315\":2}}],[\"getcolor\",{\"1\":{\"1761\":1,\"1763\":4,\"1772\":1}}],[\"getclassloadinglock\",{\"1\":{\"6063\":2}}],[\"getclassloader\",{\"1\":{\"1871\":1,\"4647\":1,\"6059\":1,\"6118\":1,\"6119\":1}}],[\"getclassname\",{\"1\":{\"1366\":2,\"6118\":3}}],[\"getclass\",{\"1\":{\"1356\":1,\"1871\":2,\"1873\":1,\"1903\":1,\"4693\":1,\"5090\":2,\"5093\":1,\"5234\":1,\"5416\":1,\"5440\":2,\"5679\":1,\"5824\":1,\"5851\":1,\"5853\":1,\"5862\":1,\"5888\":3,\"6015\":1,\"6054\":1,\"6099\":1}}],[\"getchar\",{\"1\":{\"5993\":1}}],[\"getcheesepizza\",{\"1\":{\"1212\":1}}],[\"getchild\",{\"1\":{\"820\":1,\"823\":1,\"832\":3,\"834\":2}}],[\"getrawtype\",{\"1\":{\"5236\":1}}],[\"getrandominstance\",{\"1\":{\"2409\":1}}],[\"getreflectionfactory\",{\"1\":{\"6071\":1,\"6101\":1}}],[\"getreturntype方法\",{\"1\":{\"6048\":1}}],[\"getreturntype\",{\"1\":{\"6028\":1,\"6101\":2,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"getrequesturi\",{\"1\":{\"4693\":1}}],[\"getrequest\",{\"1\":{\"4693\":3}}],[\"getresources\",{\"1\":{\"6219\":1,\"6258\":1}}],[\"getresourceasstream\",{\"1\":{\"1356\":1,\"6201\":1}}],[\"getresult\",{\"1\":{\"682\":1}}],[\"getruntime\",{\"1\":{\"2335\":1}}],[\"getroofed\",{\"1\":{\"707\":1}}],[\"get\",{\"1\":{\"464\":1,\"832\":1,\"834\":1,\"1313\":6,\"1366\":5,\"1406\":1,\"1429\":1,\"1487\":1,\"1525\":2,\"1537\":1,\"1601\":12,\"1718\":1,\"2183\":1,\"2397\":1,\"2409\":2,\"2411\":1,\"3011\":1,\"3113\":1,\"3224\":1,\"5093\":1,\"5133\":3,\"5193\":1,\"5196\":1,\"5205\":1,\"5463\":2,\"5466\":2,\"5469\":2,\"5519\":1,\"5539\":1,\"5759\":1,\"5964\":1,\"5973\":1,\"6076\":2,\"6081\":1,\"6099\":1,\"6118\":1,\"6541\":1,\"6834\":2}}],[\"gc\",{\"1\":{\"2342\":1}}],[\"gatling\",{\"1\":{\"6631\":1}}],[\"gav\",{\"1\":{\"3542\":1}}],[\"gavin\",{\"1\":{\"1338\":2,\"1351\":2}}],[\"gamma\",{\"1\":{\"2571\":1,\"2574\":1}}],[\"gamerole\",{\"1\":{\"1653\":2,\"1655\":12}}],[\"grizzly\",{\"1\":{\"6537\":1}}],[\"groovy框架\",{\"1\":{\"6668\":1}}],[\"groovy\",{\"1\":{\"6470\":1,\"6640\":1}}],[\"groups\",{\"1\":{\"4119\":1}}],[\"groupings\",{\"1\":{\"4063\":1}}],[\"groupid>\",{\"1\":{\"4324\":3,\"6867\":1}}],[\"groupid\",{\"1\":{\"3542\":1}}],[\"groupid格式\",{\"1\":{\"3426\":1}}],[\"grails\",{\"1\":{\"6668\":1}}],[\"gradle项目\",{\"1\":{\"6402\":1}}],[\"gradle\",{\"1\":{\"6292\":1,\"6862\":1,\"6863\":1,\"6992\":1}}],[\"graphiceditor\",{\"1\":{\"2144\":6,\"2149\":7,\"2152\":8}}],[\"graphtype\",{\"1\":{\"321\":1,\"325\":1}}],[\"graph\",{\"0\":{\"383\":1},\"1\":{\"266\":1,\"313\":1,\"332\":1,\"350\":2,\"368\":1,\"384\":4,\"385\":1,\"386\":2}}],[\"greenwich\",{\"1\":{\"3548\":1}}],[\"greek\",{\"1\":{\"1212\":2,\"1214\":2,\"3963\":1}}],[\"greekpizza\",{\"1\":{\"1197\":1,\"1199\":4,\"1212\":3}}],[\"greekpizz\",{\"1\":{\"1191\":1}}],[\"gregoriancalendar\",{\"1\":{\"1315\":3}}],[\"gregory\",{\"1\":{\"1315\":1}}],[\"give\",{\"1\":{\"6201\":1}}],[\"given\",{\"1\":{\"311\":1}}],[\"git\",{\"1\":{\"6879\":1}}],[\"gitbook\",{\"1\":{\"5588\":1}}],[\"gitbook2\",{\"1\":{\"5588\":1}}],[\"gitbook中文文档\",{\"1\":{\"5586\":1}}],[\"github\",{\"1\":{\"336\":2,\"341\":4,\"344\":2,\"3929\":1,\"4367\":1,\"4422\":1,\"5587\":2,\"6493\":1,\"6550\":1,\"6551\":1,\"6687\":1,\"6815\":1}}],[\"goncalves\",{\"1\":{\"6701\":1}}],[\"goto\",{\"1\":{\"4943\":1,\"4963\":2,\"4969\":2,\"5574\":2}}],[\"good\",{\"1\":{\"4236\":1,\"4368\":7,\"6201\":1,\"6881\":1}}],[\"goodflybehavior\",{\"1\":{\"2535\":1,\"2539\":1}}],[\"google的断言和命题\",{\"1\":{\"6642\":1}}],[\"google数据交换格式\",{\"1\":{\"6353\":1}}],[\"google\",{\"0\":{\"3928\":1},\"1\":{\"3929\":1,\"3931\":2,\"3940\":1,\"4034\":1,\"4042\":1,\"4093\":1,\"4163\":2,\"4195\":1,\"6352\":1,\"6667\":1,\"6726\":1,\"6822\":2,\"6845\":1}}],[\"gof\",{\"1\":{\"1159\":1,\"2571\":1,\"2693\":1,\"5673\":1}}],[\"going\",{\"1\":{\"350\":1}}],[\"goes\",{\"1\":{\"255\":1}}],[\"go\",{\"1\":{\"208\":1,\"209\":1,\"255\":1,\"6331\":1}}],[\"umbrella\",{\"1\":{\"6602\":1}}],[\"uml\",{\"0\":{\"2806\":1,\"2824\":1,\"2830\":1},\"1\":{\"2807\":1,\"2808\":2,\"2809\":1,\"2810\":2,\"2814\":1,\"2816\":1,\"2817\":2,\"2818\":2,\"2819\":1,\"2820\":5,\"2822\":3,\"2825\":1,\"2826\":1,\"2848\":2,\"2867\":1,\"2874\":1,\"2880\":1,\"2894\":1,\"2900\":1,\"2925\":1,\"5810\":1,\"5811\":1}}],[\"uml类图\",{\"0\":{\"2805\":1}}],[\"u\",{\"1\":{\"6258\":9}}],[\"ufeff\",{\"1\":{\"3967\":1}}],[\"u011240877\",{\"1\":{\"5246\":1}}],[\"u03bcs\",{\"1\":{\"3961\":1,\"3963\":1,\"3965\":1}}],[\"u0000\",{\"1\":{\"5279\":1}}],[\"u000a\",{\"1\":{\"3952\":1}}],[\"u000d就是一个unicode转义字符\",{\"1\":{\"405\":1}}],[\"u000d\",{\"1\":{\"401\":1,\"408\":1,\"413\":1}}],[\"u0030\",{\"1\":{\"413\":3}}],[\"u0032\",{\"1\":{\"413\":1}}],[\"u003b\",{\"1\":{\"408\":1,\"413\":1}}],[\"u007f\",{\"1\":{\"5279\":1}}],[\"u0070\",{\"1\":{\"413\":1}}],[\"u0073\",{\"1\":{\"413\":1}}],[\"u0072\",{\"1\":{\"413\":1}}],[\"u0029\",{\"1\":{\"413\":1}}],[\"u0028\",{\"1\":{\"413\":1}}],[\"u002e\",{\"1\":{\"413\":1}}],[\"u002b\",{\"1\":{\"408\":2}}],[\"u006c\",{\"1\":{\"413\":1}}],[\"u0064\",{\"1\":{\"413\":1}}],[\"u0065\",{\"1\":{\"413\":3}}],[\"u0068\",{\"1\":{\"413\":1}}],[\"u0061\",{\"1\":{\"408\":1,\"413\":1}}],[\"u0054\",{\"1\":{\"413\":1}}],[\"u221e\",{\"1\":{\"3954\":1}}],[\"utf\",{\"0\":{\"3944\":1},\"1\":{\"3945\":1,\"4324\":1,\"4796\":1,\"6118\":56,\"6201\":1,\"6258\":1}}],[\"utc\",{\"1\":{\"3548\":1}}],[\"utils类\",{\"1\":{\"3439\":1}}],[\"util\",{\"0\":{\"6838\":1},\"1\":{\"2995\":1,\"3045\":1,\"3081\":1,\"3092\":1,\"3096\":2,\"3100\":2,\"3177\":1,\"4368\":1,\"4378\":1,\"4380\":2,\"4383\":2,\"4390\":1,\"4407\":3,\"4644\":2,\"5169\":7,\"6144\":1,\"6258\":1,\"6756\":1,\"6946\":1}}],[\"udp连接采用与文件一样的方式去管理\",{\"1\":{\"3444\":1}}],[\"uk\",{\"1\":{\"3355\":1}}],[\"ucp\",{\"1\":{\"6063\":1}}],[\"uclazz=cs3\",{\"1\":{\"5940\":1}}],[\"uc\",{\"1\":{\"3318\":1}}],[\"uuid之类的唯一编号进行查询\",{\"1\":{\"3297\":1}}],[\"ui函数库\",{\"1\":{\"6513\":1}}],[\"uid等\",{\"1\":{\"2989\":1}}],[\"ui\",{\"1\":{\"2970\":1}}],[\"urlresource\",{\"1\":{\"6219\":1}}],[\"url外部重定向传入的目标地址必须执行白名单过滤\",{\"1\":{\"3344\":1}}],[\"url参数超长\",{\"1\":{\"3230\":1}}],[\"url带的参数必须无敏感信息或符合安全要求\",{\"1\":{\"3224\":1}}],[\"url路径不能使用大写\",{\"1\":{\"3224\":1}}],[\"urldecoder中的方法decode\",{\"1\":{\"3044\":1}}],[\"url\",{\"1\":{\"1388\":1,\"2699\":2,\"2711\":4,\"2745\":2,\"2746\":9,\"2748\":3,\"4031\":1,\"6173\":2,\"6219\":3,\"6258\":3}}],[\"urls\",{\"1\":{\"338\":1,\"6219\":3}}],[\"unlike\",{\"1\":{\"6201\":1}}],[\"unlock对未加锁的对象解锁\",{\"1\":{\"3167\":1}}],[\"unlock\",{\"1\":{\"2406\":1,\"3168\":1,\"3170\":1,\"3172\":1,\"4786\":1}}],[\"unbounded\",{\"1\":{\"5196\":1}}],[\"unboxing\",{\"1\":{\"4533\":1}}],[\"unresolved\",{\"1\":{\"5035\":1}}],[\"unused\",{\"1\":{\"4582\":1,\"4584\":1}}],[\"unqualified\",{\"1\":{\"4579\":1,\"4581\":1}}],[\"unchecked\",{\"0\":{\"4726\":1},\"1\":{\"4576\":1,\"4578\":1,\"4644\":1,\"4748\":1,\"6076\":1,\"6086\":1}}],[\"unoptimized\",{\"1\":{\"4575\":1}}],[\"unorder\",{\"1\":{\"3152\":1}}],[\"un\",{\"1\":{\"4563\":1}}],[\"unexpected\",{\"1\":{\"4355\":1,\"4374\":1,\"5530\":1}}],[\"unaligned\",{\"1\":{\"4095\":1}}],[\"unauthorized\",{\"1\":{\"3226\":1}}],[\"undertow\",{\"1\":{\"6540\":1}}],[\"underlying\",{\"1\":{\"6083\":1}}],[\"underscore\",{\"1\":{\"5563\":1}}],[\"under\",{\"1\":{\"3305\":1,\"4460\":1,\"5529\":1,\"6065\":1}}],[\"undobuttonwaspushed\",{\"1\":{\"781\":1,\"783\":2}}],[\"undocommand\",{\"1\":{\"781\":4}}],[\"undo\",{\"1\":{\"751\":1,\"777\":6,\"781\":1,\"803\":1}}],[\"unknownhostexception\",{\"1\":{\"4771\":2}}],[\"unknown\",{\"1\":{\"3005\":1}}],[\"unirest\",{\"1\":{\"6541\":2}}],[\"univocity\",{\"1\":{\"6338\":1}}],[\"university\",{\"1\":{\"852\":3,\"854\":2,\"858\":5,\"2875\":1}}],[\"unique\",{\"1\":{\"4696\":2}}],[\"unicode\",{\"1\":{\"3952\":1,\"3954\":3,\"3955\":2,\"4028\":1,\"4029\":1}}],[\"unitils\",{\"1\":{\"6643\":1}}],[\"unitabbrev\",{\"1\":{\"3959\":1,\"3961\":1,\"3963\":1,\"3965\":1}}],[\"unit\",{\"1\":{\"3316\":1,\"4430\":1,\"4433\":1}}],[\"unified\",{\"1\":{\"2808\":1}}],[\"unsound\",{\"1\":{\"5193\":1}}],[\"unsort\",{\"1\":{\"3152\":3}}],[\"unsigned\",{\"1\":{\"3055\":1,\"3359\":1,\"3366\":4}}],[\"unsupportedencodingexception\",{\"1\":{\"6201\":1}}],[\"unsupportedmethodexception\",{\"1\":{\"2725\":1,\"2726\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"850\":2,\"4889\":1,\"6258\":2}}],[\"unsharedconcreteflyweight\",{\"1\":{\"1399\":1,\"1400\":1,\"1406\":9}}],[\"unsharable\",{\"1\":{\"1395\":1}}],[\"unsafe除了能直接操作内存空间外\",{\"1\":{\"478\":1}}],[\"unsafe\",{\"1\":{\"464\":4,\"466\":3,\"469\":4,\"473\":8,\"6065\":1}}],[\"unsafefield\",{\"1\":{\"464\":3}}],[\"upgrades\",{\"1\":{\"5530\":1}}],[\"upper\",{\"1\":{\"4177\":1}}],[\"upload\",{\"1\":{\"2707\":1,\"2711\":4}}],[\"uploadtoaliyun\",{\"1\":{\"2699\":2,\"2704\":2,\"2707\":1}}],[\"updatedept\",{\"1\":{\"4696\":1}}],[\"update\",{\"1\":{\"1702\":3,\"1716\":3,\"1718\":2,\"1727\":1,\"3359\":2,\"3402\":1,\"4696\":1}}],[\"upcurtains\",{\"1\":{\"1601\":1,\"1603\":1}}],[\"uprightphone\",{\"1\":{\"624\":2,\"626\":4}}],[\"up\",{\"1\":{\"274\":1,\"1134\":4,\"1136\":1,\"1603\":1,\"6109\":1,\"6201\":2}}],[\"ultimately\",{\"1\":{\"266\":1}}],[\"usage\",{\"1\":{\"333\":1,\"4566\":1}}],[\"usetcclstr\",{\"1\":{\"6201\":4}}],[\"usesprimitivetypes\",{\"1\":{\"6118\":1}}],[\"usesprimitives\",{\"1\":{\"6118\":3}}],[\"usecaches\",{\"1\":{\"6076\":2}}],[\"use类型\",{\"1\":{\"4660\":1}}],[\"use注解\",{\"1\":{\"4660\":1}}],[\"username\",{\"1\":{\"6173\":1}}],[\"user2\",{\"1\":{\"5914\":1,\"5916\":1}}],[\"user2=\",{\"1\":{\"5914\":1}}],[\"user1\",{\"1\":{\"5914\":2,\"5916\":1}}],[\"user1=\",{\"1\":{\"5914\":1}}],[\"user必须无参构造函数\",{\"1\":{\"5914\":1}}],[\"userclass\",{\"1\":{\"5853\":3}}],[\"userconstants\",{\"1\":{\"4696\":2}}],[\"usercache\",{\"1\":{\"3122\":1}}],[\"userdao\",{\"1\":{\"4462\":2}}],[\"userdo\",{\"1\":{\"2989\":2}}],[\"userid\",{\"1\":{\"6927\":2}}],[\"useridgenerator\",{\"1\":{\"2355\":1}}],[\"userinfo\",{\"1\":{\"3164\":1}}],[\"userthreadfactory\",{\"1\":{\"3157\":2}}],[\"users\",{\"1\":{\"3122\":1}}],[\"userservice\",{\"1\":{\"1344\":1,\"4462\":2}}],[\"userrequested\",{\"1\":{\"2546\":1}}],[\"user\",{\"1\":{\"1424\":1,\"1425\":2,\"1427\":5,\"1431\":4,\"2353\":1,\"2355\":1,\"2389\":7,\"2411\":2,\"3210\":2,\"3257\":1,\"4693\":1,\"5523\":1,\"5853\":7,\"5855\":6,\"5914\":16,\"5916\":6,\"5942\":3}}],[\"used\",{\"1\":{\"350\":1,\"5287\":1,\"5527\":1,\"5825\":1,\"6201\":4}}],[\"usemaxwidth\",{\"1\":{\"344\":1}}],[\"use\",{\"1\":{\"262\":1,\"311\":1,\"325\":1,\"350\":1,\"391\":2,\"1427\":2,\"1431\":4,\"2811\":1,\"4132\":1,\"4590\":1,\"4644\":1,\"4656\":1,\"4659\":1,\"4660\":1,\"4861\":1,\"4866\":1,\"4869\":1,\"5398\":1,\"5523\":1,\"5524\":1,\"5525\":1,\"5530\":1,\"6201\":6,\"6904\":1}}],[\"using\",{\"1\":{\"255\":1,\"308\":1,\"329\":2,\"343\":1,\"364\":1,\"382\":1,\"3373\":1,\"4563\":1,\"5403\":1,\"5522\":1,\"5523\":1,\"5527\":2,\"6201\":4}}],[\"<|\",{\"1\":{\"5782\":2,\"5786\":2}}],[\"<<\",{\"1\":{\"5739\":2}}],[\"<<interface>>\",{\"1\":{\"2844\":1}}],[\"<>\",{\"1\":{\"5670\":1}}],[\"<number>add\",{\"1\":{\"5112\":1}}],[\"<2500\",{\"1\":{\"5055\":1}}],[\"<e\",{\"1\":{\"5048\":1}}],[\"<extends\",{\"1\":{\"4046\":1}}],[\"<integer>add\",{\"1\":{\"5112\":2}}],[\"<integer>either\",{\"1\":{\"4368\":1}}],[\"<init>\",{\"1\":{\"4600\":1,\"5169\":1,\"6071\":1,\"6118\":3}}],[\"<isnotnull>表示不为null值时执行\",{\"1\":{\"3406\":1}}],[\"<isnotempty>表示不为空且不为null时执行\",{\"1\":{\"3406\":1}}],[\"<isequal>中的comparevalue是与属性值对比的常量\",{\"1\":{\"3405\":1}}],[\"<version>4\",{\"1\":{\"4324\":1}}],[\"<version>1\",{\"1\":{\"4324\":1}}],[\"<groupid>junit<\",{\"1\":{\"4324\":1}}],[\"<groupid>org\",{\"1\":{\"4324\":2,\"6867\":1}}],[\"<configuration>\",{\"1\":{\"4324\":1}}],[\"<constructor\",{\"1\":{\"1338\":3,\"1351\":3}}],[\"<artifactid>some\",{\"1\":{\"6867\":1}}],[\"<artifactid>junit<\",{\"1\":{\"4324\":1}}],[\"<artifactid>java\",{\"1\":{\"4324\":1}}],[\"<artifactid>maven\",{\"1\":{\"4324\":1}}],[\"<modelversion>4\",{\"1\":{\"4324\":1}}],[\"<plugin>\",{\"1\":{\"4324\":1}}],[\"<plugins>\",{\"1\":{\"4324\":1}}],[\"<project\",{\"1\":{\"4324\":1}}],[\"<p>\",{\"1\":{\"4249\":2}}],[\"<ul>\",{\"1\":{\"4249\":1}}],[\"<target>8<\",{\"1\":{\"4324\":1}}],[\"<table>\",{\"1\":{\"4249\":1}}],[\"<t\",{\"1\":{\"4076\":1,\"4627\":1,\"4631\":1,\"4633\":1,\"4635\":1,\"5003\":1,\"5055\":1,\"5213\":1,\"5224\":1,\"5226\":1}}],[\"<t>\",{\"1\":{\"2546\":1,\"5062\":2,\"5112\":1,\"5190\":1,\"6083\":1}}],[\"<dependency>\",{\"1\":{\"4324\":1,\"6867\":1}}],[\"<dependencymanagement>里只是声明版本\",{\"1\":{\"3436\":1}}],[\"<dependencies>\",{\"1\":{\"4324\":1,\"6867\":1}}],[\"<div\",{\"1\":{\"344\":1}}],[\"<resultmap>\",{\"1\":{\"3396\":1}}],[\"<logger\",{\"1\":{\"3290\":1}}],[\"<=\",{\"1\":{\"1956\":2,\"1957\":1,\"1958\":1,\"1972\":3,\"5269\":1,\"5761\":2}}],[\"<build>\",{\"1\":{\"4324\":1}}],[\"<bean\",{\"1\":{\"1338\":2,\"1351\":2}}],[\"<beans>\",{\"1\":{\"1338\":1,\"1351\":1}}],[\"<body>\",{\"1\":{\"344\":1}}],[\"<s>\",{\"1\":{\"6258\":3}}],[\"<scope>test<\",{\"1\":{\"4324\":1}}],[\"<script>\",{\"1\":{\"334\":1,\"344\":1}}],[\"<source>8<\",{\"1\":{\"4324\":1}}],[\"<style>\",{\"1\":{\"370\":1}}],[\"<\",{\"1\":{\"263\":1,\"334\":1,\"344\":3,\"370\":1,\"473\":1,\"781\":1,\"1338\":3,\"1351\":3,\"1366\":1,\"1489\":1,\"1525\":1,\"1718\":1,\"1957\":1,\"1958\":1,\"1959\":1,\"1972\":2,\"2188\":2,\"2194\":2,\"2456\":1,\"2997\":1,\"3051\":1,\"3072\":1,\"3203\":1,\"3243\":1,\"4324\":8,\"4360\":1,\"4405\":1,\"4981\":3,\"5037\":1,\"5046\":5,\"5082\":1,\"5093\":1,\"5190\":1,\"5271\":1,\"5463\":1,\"5466\":2,\"5469\":2,\"5914\":2,\"6083\":1,\"6101\":1,\"6118\":1,\"6258\":1,\"6867\":2}}],[\"xhtml和css\",{\"1\":{\"6558\":1}}],[\"xmpp\",{\"1\":{\"6507\":1}}],[\"xml解析器\",{\"1\":{\"6667\":1}}],[\"xmlschema\",{\"1\":{\"4324\":1}}],[\"xmlservice\",{\"1\":{\"2989\":2}}],[\"xmlns\",{\"1\":{\"4324\":1}}],[\"xmlns=\",{\"1\":{\"4324\":1}}],[\"xmlhttprequest\",{\"1\":{\"4209\":1,\"4210\":1}}],[\"xml配置参数使用\",{\"1\":{\"3397\":1}}],[\"xml增加映射\",{\"1\":{\"3395\":1}}],[\"xmlbeanconfigparser\",{\"1\":{\"1356\":1,\"1359\":1,\"1360\":1}}],[\"xml\",{\"1\":{\"1337\":1,\"1350\":1,\"1353\":1,\"1357\":1,\"1499\":1,\"3224\":1,\"3235\":1,\"4208\":1,\"4324\":1,\"6214\":1,\"6558\":1,\"6821\":4,\"6822\":1,\"6988\":1,\"6990\":1}}],[\"xtend\",{\"1\":{\"6474\":1}}],[\"xls\",{\"1\":{\"6408\":1}}],[\"xlsx\",{\"1\":{\"6408\":1}}],[\"x本地发布文件\",{\"1\":{\"6405\":1}}],[\"xerces\",{\"1\":{\"6201\":1}}],[\"x<<5\",{\"1\":{\"5447\":1}}],[\"x<0\",{\"1\":{\"418\":1}}],[\"xyz\",{\"1\":{\"4918\":1,\"4920\":2}}],[\"xsd\",{\"1\":{\"4324\":2}}],[\"xsi\",{\"1\":{\"4324\":1}}],[\"xsi=\",{\"1\":{\"4324\":1}}],[\"xss跨站脚本攻击\",{\"1\":{\"3342\":1}}],[\"xxstring\",{\"1\":{\"5006\":1}}],[\"xx\",{\"1\":{\"3445\":1,\"6119\":1}}],[\"xxx为方法名\",{\"1\":{\"5722\":1}}],[\"xxx为变量名或对象名\",{\"1\":{\"5721\":1}}],[\"xxx为业务领域相关的名称\",{\"1\":{\"3006\":1}}],[\"xxx\",{\"1\":{\"4693\":1,\"5501\":1,\"5721\":1,\"5722\":1}}],[\"xxx的方式命名\",{\"1\":{\"3351\":1}}],[\"xxx的命名方式是为了明确其取值含义与取值范围\",{\"1\":{\"3351\":1}}],[\"xxx的命名方式\",{\"1\":{\"2994\":1}}],[\"xxx方式\",{\"1\":{\"3208\":1}}],[\"xxxlock\",{\"1\":{\"3168\":1,\"3170\":1,\"3172\":1}}],[\"xxx一般为网页名称\",{\"1\":{\"3006\":1}}],[\"xxxvo\",{\"1\":{\"3006\":1}}],[\"xxxdto\",{\"1\":{\"3006\":1}}],[\"xxxdo\",{\"1\":{\"3006\":1}}],[\"xxx即为数据表名\",{\"1\":{\"3006\":1}}],[\"xxx到xxx的映射关系\",{\"1\":{\"2994\":1,\"3351\":1}}],[\"xxxxxxx\",{\"1\":{\"4616\":1}}],[\"xxxx\",{\"1\":{\"555\":1,\"561\":1,\"6173\":4}}],[\"x等于1\",{\"1\":{\"4932\":1}}],[\"x等于\",{\"1\":{\"3272\":1}}],[\"x的比较结果相反\",{\"1\":{\"3119\":1}}],[\"x为基本数据类型\",{\"1\":{\"3058\":1}}],[\"xueli\",{\"1\":{\"2089\":5}}],[\"x2\",{\"1\":{\"1436\":2}}],[\"x1==x2\",{\"1\":{\"1436\":1}}],[\"x1\",{\"1\":{\"1436\":2}}],[\"xiaomifactory\",{\"1\":{\"1308\":1,\"1310\":5}}],[\"xiaomirouter\",{\"1\":{\"1306\":1,\"1308\":1}}],[\"xiaomiphone\",{\"1\":{\"1304\":1,\"1308\":1}}],[\"xiaomi\",{\"1\":{\"622\":1,\"626\":2}}],[\"x>>>31==1\",{\"1\":{\"420\":1}}],[\"x>>>31==0\",{\"1\":{\"420\":1}}],[\"x>0\",{\"1\":{\"418\":1}}],[\"x\",{\"1\":{\"259\":1,\"263\":2,\"418\":1,\"420\":1,\"1436\":8,\"1956\":1,\"1957\":1,\"1958\":1,\"1959\":1,\"3049\":2,\"3053\":2,\"3119\":3,\"3203\":2,\"3243\":1,\"3272\":1,\"4016\":2,\"4074\":1,\"4095\":2,\"4192\":1,\"4704\":1,\"4932\":1,\"4993\":1,\"5112\":1,\"5247\":1,\"5262\":2,\"5267\":2,\"5355\":2,\"5371\":2,\"5376\":1,\"5382\":2,\"5402\":6,\"5420\":2,\"5422\":2,\"5424\":2,\"5427\":2,\"5429\":2,\"5430\":1,\"5434\":3,\"5440\":6,\"5447\":2,\"5448\":1,\"5476\":3,\"5486\":6,\"5491\":2,\"5654\":1,\"5655\":2,\"5658\":2,\"5739\":1,\"5740\":1,\"6138\":1,\"6379\":1,\"6927\":2}}],[\">>>\",{\"1\":{\"5741\":1}}],[\">>\",{\"1\":{\"5740\":2}}],[\">返回list\",{\"1\":{\"5236\":1}}],[\">t\",{\"1\":{\"5213\":1}}],[\">的类型参数都被替换为object\",{\"1\":{\"5079\":1}}],[\">=\",{\"1\":{\"1537\":2,\"3203\":1,\"5269\":1,\"5271\":1,\"6258\":4}}],[\">id2\",{\"1\":{\"354\":1}}],[\">e\",{\"1\":{\"341\":1,\"380\":1}}],[\">d\",{\"1\":{\"336\":1,\"341\":1,\"344\":1,\"372\":1,\"380\":1}}],[\">c\",{\"1\":{\"336\":1,\"341\":1,\"344\":1,\"380\":1}}],[\">c2\",{\"1\":{\"315\":1,\"322\":1}}],[\">f2\",{\"1\":{\"326\":1}}],[\">f1\",{\"1\":{\"326\":1}}],[\">a2\",{\"1\":{\"315\":2,\"318\":2,\"322\":2}}],[\">|two|\",{\"1\":{\"387\":1}}],[\">|text|b\",{\"1\":{\"228\":1}}],[\">|one|\",{\"1\":{\"387\":1}}],[\">|link\",{\"1\":{\"387\":1}}],[\">|no|\",{\"1\":{\"268\":1}}],[\">|yes|\",{\"1\":{\"268\":1}}],[\">\",{\"1\":{\"237\":1,\"247\":2,\"250\":2,\"253\":1,\"256\":4,\"263\":1,\"268\":3,\"272\":5,\"284\":1,\"285\":1,\"286\":1,\"300\":1,\"301\":1,\"302\":1,\"322\":3,\"326\":3,\"344\":1,\"347\":3,\"365\":1,\"370\":1,\"387\":1,\"522\":1,\"542\":1,\"1338\":5,\"1351\":5,\"1589\":4,\"1871\":2,\"1972\":1,\"2454\":1,\"2546\":3,\"2953\":4,\"3062\":1,\"3068\":2,\"3093\":1,\"3095\":1,\"3099\":1,\"3119\":3,\"3120\":1,\"3290\":1,\"3372\":1,\"3376\":1,\"4016\":1,\"4053\":2,\"4079\":1,\"4324\":2,\"4360\":1,\"4693\":1,\"4696\":1,\"5046\":1,\"5048\":1,\"5050\":1,\"5059\":5,\"5190\":1,\"5196\":2,\"5200\":5,\"5416\":1,\"5805\":1,\"5895\":1,\"5899\":1,\"5901\":1,\"5905\":1,\"5907\":1,\"5914\":3,\"5930\":1,\"5940\":1,\"5962\":1,\"5964\":1,\"5975\":1,\"5987\":1,\"6001\":1,\"6007\":1,\"6027\":1,\"6033\":1,\"6059\":2,\"6063\":5,\"6065\":2,\"6071\":1,\"6076\":2,\"6081\":1,\"6086\":2,\"6090\":1,\"6099\":1,\"6101\":1,\"6107\":1,\"6111\":1,\"6114\":1,\"6116\":4,\"6118\":6,\"6219\":1,\"6258\":6,\"6851\":2,\"6927\":4}}],[\">b2\",{\"1\":{\"315\":1,\"322\":1}}],[\">b\",{\"1\":{\"216\":1,\"231\":1,\"234\":1,\"309\":1,\"336\":1,\"341\":1,\"344\":1,\"372\":1}}],[\"wujing\",{\"1\":{\"5815\":1}}],[\"w3cnote\",{\"1\":{\"4703\":1}}],[\"w3\",{\"1\":{\"4324\":1}}],[\"w+\",{\"1\":{\"4162\":1}}],[\"wtf\",{\"1\":{\"2988\":1}}],[\"would\",{\"1\":{\"5530\":1}}],[\"woman\",{\"1\":{\"2960\":8,\"2962\":3,\"2964\":1,\"2966\":1,\"2967\":1,\"2968\":1,\"5761\":1}}],[\"world\",{\"0\":{\"4325\":1},\"1\":{\"1336\":1,\"2078\":1,\"2082\":1,\"2792\":1,\"3025\":1,\"4326\":1,\"4679\":2,\"4682\":1,\"4685\":1,\"6076\":1,\"6096\":1,\"6157\":1,\"6158\":1}}],[\"worker\",{\"1\":{\"3157\":1}}],[\"workqueue\",{\"1\":{\"3000\":1}}],[\"work\",{\"1\":{\"385\":1,\"5759\":1,\"5761\":2,\"6065\":1}}],[\"working\",{\"1\":{\"339\":1,\"5761\":1}}],[\"word这样的格式\",{\"1\":{\"6409\":1}}],[\"words\",{\"1\":{\"4199\":1}}],[\"word\",{\"1\":{\"255\":2,\"1620\":1,\"1664\":1,\"2637\":1,\"6054\":2}}],[\"w\",{\"1\":{\"1436\":3,\"3197\":1}}],[\"weaver\",{\"1\":{\"6706\":1}}],[\"weatherdata中\",{\"1\":{\"1704\":1}}],[\"weatherdata\",{\"1\":{\"1694\":1,\"1702\":3,\"1704\":6,\"1709\":1,\"1716\":2,\"1718\":3,\"1720\":10,\"1721\":1}}],[\"weka\",{\"1\":{\"6492\":1}}],[\"wesley\",{\"1\":{\"5582\":1}}],[\"we\",{\"1\":{\"4481\":1,\"6065\":1,\"6081\":1,\"6086\":1,\"6111\":1,\"6114\":1,\"6201\":6}}],[\"weight\",{\"1\":{\"3014\":1}}],[\"weixin\",{\"1\":{\"2080\":1,\"2082\":2,\"4425\":1,\"5813\":1}}],[\"weblogic传道者\",{\"1\":{\"6717\":1}}],[\"web框架\",{\"0\":{\"6663\":1}}],[\"webmagic\",{\"1\":{\"6662\":1}}],[\"web接口和无schema的json文档\",{\"1\":{\"6594\":1}}],[\"webapps\",{\"1\":{\"6201\":1}}],[\"websphere\",{\"1\":{\"6615\":1}}],[\"websocket\",{\"1\":{\"3727\":1,\"3729\":1}}],[\"website4\",{\"1\":{\"1431\":2}}],[\"website3\",{\"1\":{\"1431\":2}}],[\"website2\",{\"1\":{\"1431\":2}}],[\"website1\",{\"1\":{\"1431\":2}}],[\"websitefactory\",{\"1\":{\"1429\":1,\"1431\":2}}],[\"website\",{\"1\":{\"1427\":2,\"1429\":2,\"1431\":4}}],[\"web层绝不应该继续往上抛异常\",{\"1\":{\"3418\":1}}],[\"web层\",{\"1\":{\"3412\":1}}],[\"web\",{\"1\":{\"2258\":1,\"2348\":1,\"6551\":1,\"6584\":1,\"6601\":1,\"6644\":1,\"6667\":1,\"6940\":1,\"6942\":2,\"6991\":1}}],[\"well\",{\"1\":{\"255\":1,\"6083\":1,\"6201\":1}}],[\"wrong\",{\"1\":{\"6065\":1}}],[\"wrapexception\",{\"1\":{\"4922\":1,\"4926\":1}}],[\"wrapped\",{\"1\":{\"4244\":1}}],[\"wrapper\",{\"1\":{\"487\":1}}],[\"wrapping\",{\"1\":{\"4036\":1}}],[\"writing\",{\"1\":{\"5524\":1}}],[\"writestringtofile\",{\"1\":{\"6898\":1}}],[\"writeobject\",{\"1\":{\"1795\":1}}],[\"writer\",{\"1\":{\"943\":1}}],[\"written\",{\"1\":{\"271\":1,\"4244\":1}}],[\"www\",{\"1\":{\"336\":2,\"341\":4,\"344\":2,\"4324\":1,\"4424\":1,\"4670\":1,\"4701\":1,\"4702\":1,\"4703\":1,\"4986\":1,\"4991\":1,\"4992\":1,\"5022\":1,\"5243\":1,\"5244\":1,\"5245\":1,\"5588\":1,\"5814\":1,\"5815\":1,\"6052\":1,\"6132\":1,\"6135\":1,\"6274\":1,\"6276\":1}}],[\"why\",{\"1\":{\"5298\":1,\"5350\":1,\"5356\":1}}],[\"whether\",{\"1\":{\"6201\":3}}],[\"where条件limit\",{\"1\":{\"3374\":1}}],[\"where\",{\"1\":{\"3372\":2,\"3374\":1,\"3376\":1,\"3383\":1,\"3388\":1,\"3389\":1,\"6201\":1,\"6951\":1}}],[\"where后边的信息被注释掉\",{\"1\":{\"3333\":1}}],[\"whentype\",{\"1\":{\"6927\":2}}],[\"when\",{\"1\":{\"271\":1,\"329\":2,\"350\":1,\"4563\":1,\"5398\":1,\"5527\":1,\"5529\":1,\"6081\":2,\"6201\":4}}],[\"whitelist\",{\"1\":{\"2988\":1}}],[\"while\",{\"1\":{\"1525\":1,\"1539\":2,\"2953\":1,\"3022\":1,\"3115\":1,\"3187\":1,\"4006\":1,\"4016\":1,\"4746\":1,\"4781\":1,\"5048\":1,\"6076\":1,\"6157\":1,\"6180\":1,\"6190\":1,\"6201\":4,\"6219\":1,\"6236\":1,\"6258\":3}}],[\"which\",{\"1\":{\"266\":1,\"325\":1,\"329\":1,\"346\":1,\"386\":1,\"3078\":1,\"5528\":1,\"5529\":2,\"5530\":1,\"6071\":2,\"6083\":2,\"6118\":1,\"6201\":5}}],[\"whatfeatureofgroup\",{\"1\":{\"3157\":1}}],[\"what\",{\"1\":{\"350\":1,\"5576\":1}}],[\"widget>\",{\"1\":{\"6904\":2}}],[\"widget\",{\"1\":{\"6872\":1,\"6876\":1}}],[\"width\",{\"1\":{\"351\":1,\"354\":2,\"359\":1,\"370\":1,\"376\":1,\"390\":1}}],[\"wicket\",{\"1\":{\"6666\":1}}],[\"wiremock\",{\"1\":{\"6644\":1}}],[\"wire\",{\"1\":{\"6355\":1}}],[\"wizardforcel\",{\"1\":{\"5588\":1}}],[\"wiki\",{\"1\":{\"4367\":1,\"4422\":1}}],[\"wind\",{\"1\":{\"5775\":2,\"5776\":3}}],[\"windows\",{\"1\":{\"2258\":1,\"2388\":1,\"2797\":1}}],[\"window\",{\"1\":{\"340\":1}}],[\"winter\",{\"1\":{\"3018\":1}}],[\"wildfly\",{\"1\":{\"6616\":1}}],[\"wildcardtype\",{\"1\":{\"5233\":1}}],[\"wildcard\",{\"1\":{\"5196\":1}}],[\"wildduck\",{\"1\":{\"2521\":1,\"2539\":2,\"2541\":4}}],[\"will\",{\"1\":{\"255\":1,\"325\":1,\"329\":1,\"332\":1,\"346\":2,\"350\":1,\"375\":1,\"385\":1,\"4383\":1,\"4911\":1,\"6201\":6}}],[\"without\",{\"0\":{\"383\":1},\"1\":{\"375\":1,\"384\":1,\"5527\":1}}],[\"within\",{\"1\":{\"304\":1,\"346\":1}}],[\"with\",{\"0\":{\"175\":1,\"215\":1,\"227\":1,\"236\":1,\"242\":1,\"383\":1,\"4792\":1,\"4858\":1},\"1\":{\"191\":1,\"214\":1,\"255\":1,\"283\":1,\"291\":1,\"299\":1,\"321\":1,\"325\":1,\"332\":1,\"339\":1,\"346\":1,\"382\":1,\"384\":2,\"386\":1,\"391\":2,\"3270\":1,\"3287\":1,\"4368\":1,\"4766\":1,\"4793\":1,\"4863\":1,\"4867\":1,\"4972\":1,\"5530\":1,\"5561\":1,\"5670\":1,\"6201\":5,\"6915\":1,\"6951\":1,\"6962\":1}}],[\"war\",{\"1\":{\"6859\":1,\"6883\":1}}],[\"warn\",{\"1\":{\"4696\":2}}],[\"warnings\",{\"1\":{\"4530\":1,\"4533\":1,\"4536\":1,\"4539\":1,\"4542\":1,\"4545\":1,\"4548\":1,\"4551\":1,\"4554\":1,\"4557\":1,\"4560\":1,\"4563\":1,\"4566\":1,\"4569\":1,\"4572\":1,\"4575\":1,\"4578\":1,\"4581\":1,\"4584\":1}}],[\"warning\",{\"1\":{\"64\":1,\"255\":1,\"4644\":1,\"4649\":1}}],[\"wait被重载了两次\",{\"1\":{\"5680\":1}}],[\"wait的连接数太多\",{\"1\":{\"3443\":1}}],[\"wait状态的连接\",{\"1\":{\"3443\":1}}],[\"wait超时时间\",{\"1\":{\"3443\":1}}],[\"wait\",{\"1\":{\"2960\":1,\"2966\":4,\"2968\":1,\"5416\":3,\"5679\":1,\"6015\":3,\"6996\":1}}],[\"watervehicle\",{\"1\":{\"2020\":1}}],[\"wall\",{\"1\":{\"707\":5}}],[\"want\",{\"1\":{\"350\":1}}],[\"wasn\",{\"1\":{\"6201\":2}}],[\"was<java\",{\"1\":{\"4374\":1}}],[\"was\",{\"1\":{\"334\":1,\"344\":1,\"350\":1,\"6201\":1}}],[\"way\",{\"1\":{\"252\":1,\"350\":2,\"1315\":1,\"6201\":1}}],[\"ninja\",{\"1\":{\"6669\":1}}],[\"nio框架\",{\"1\":{\"6537\":1}}],[\"nio\",{\"1\":{\"5562\":1}}],[\"nfe\",{\"1\":{\"5271\":1}}],[\"nfirst\",{\"1\":{\"1525\":1}}],[\"nls\",{\"1\":{\"4555\":1,\"4557\":1}}],[\"npe\",{\"1\":{\"3520\":1,\"3546\":1}}],[\"nginx默认限制是1mb\",{\"1\":{\"3231\":1}}],[\"nashhorn\",{\"1\":{\"5552\":1}}],[\"nanos\",{\"1\":{\"5416\":1}}],[\"nanotime\",{\"1\":{\"4981\":6,\"6063\":2}}],[\"nanotime的方式\",{\"1\":{\"3080\":1}}],[\"nativeconstructoraccessorimpl\",{\"1\":{\"6086\":1}}],[\"nativemethodaccessorimpl\",{\"1\":{\"4374\":3,\"4380\":3,\"6109\":2,\"6111\":3,\"6113\":1}}],[\"native\",{\"0\":{\"4620\":1},\"1\":{\"4157\":1,\"4374\":1,\"4380\":2,\"4586\":1,\"4621\":2,\"5416\":6,\"5825\":1,\"6015\":5,\"6061\":1,\"6111\":1,\"6114\":1}}],[\"nameandtype\",{\"1\":{\"6118\":21}}],[\"namefield\",{\"1\":{\"5964\":2}}],[\"nameprefix\",{\"1\":{\"3157\":3}}],[\"namelist\",{\"1\":{\"3000\":1}}],[\"name=init\",{\"1\":{\"5855\":1}}],[\"name=name\",{\"1\":{\"2836\":1}}],[\"name=\",{\"1\":{\"1761\":1,\"1772\":1,\"1797\":4,\"3290\":1,\"5853\":1,\"5914\":1,\"5916\":3,\"5964\":1}}],[\"named\",{\"1\":{\"375\":1}}],[\"name\",{\"1\":{\"332\":1,\"379\":1,\"832\":5,\"834\":5,\"850\":8,\"852\":2,\"854\":2,\"856\":2,\"1197\":1,\"1246\":1,\"1425\":8,\"1533\":8,\"1535\":5,\"1603\":20,\"1761\":9,\"1772\":9,\"1795\":1,\"1797\":5,\"1869\":3,\"1972\":16,\"2410\":3,\"2699\":3,\"2711\":2,\"2836\":3,\"2869\":2,\"2875\":1,\"2986\":2,\"3157\":2,\"3289\":1,\"3352\":2,\"3388\":2,\"3389\":1,\"4133\":2,\"4163\":2,\"4261\":2,\"4419\":1,\"4696\":2,\"5334\":8,\"5586\":1,\"5759\":2,\"5761\":4,\"5853\":9,\"5914\":13,\"5950\":1,\"5956\":1,\"5962\":2,\"5964\":1,\"6001\":1,\"6007\":1,\"6013\":2,\"6063\":11,\"6086\":1,\"6090\":3,\"6101\":2,\"6111\":1,\"6114\":1,\"6116\":2,\"6118\":6,\"6201\":6,\"6258\":2,\"6951\":2}}],[\"namespace\",{\"1\":{\"6118\":1}}],[\"names\",{\"1\":{\"311\":1,\"4179\":1,\"5523\":1,\"6201\":3,\"6258\":6}}],[\"n\",{\"1\":{\"586\":1,\"2866\":2,\"3952\":1,\"4368\":1,\"5273\":2,\"5282\":2,\"5798\":1,\"5805\":2,\"6118\":2,\"6258\":3}}],[\"nutch\",{\"1\":{\"6659\":1}}],[\"nutz\",{\"1\":{\"6550\":1}}],[\"nuisance\",{\"1\":{\"6201\":1}}],[\"numnonprimitiveparametertypes\",{\"1\":{\"6118\":1}}],[\"numnewmembers\",{\"1\":{\"6099\":2}}],[\"numcpentries\",{\"1\":{\"6118\":8}}],[\"numinvocations\",{\"1\":{\"6111\":1}}],[\"numeric\",{\"1\":{\"4231\":1}}],[\"num\",{\"1\":{\"2454\":2,\"3012\":1,\"6118\":5,\"6808\":7,\"6810\":1}}],[\"num2\",{\"1\":{\"2118\":2,\"2124\":2}}],[\"num1\",{\"1\":{\"2118\":2,\"2124\":2}}],[\"numofdepartment\",{\"1\":{\"1535\":3}}],[\"number>被替换为object\",{\"1\":{\"5082\":1}}],[\"number>的类型参数被替换为number\",{\"1\":{\"5082\":1}}],[\"number>和<\",{\"1\":{\"5082\":1}}],[\"number>\",{\"1\":{\"5003\":1,\"5042\":1}}],[\"number=10\",{\"1\":{\"4616\":1}}],[\"numberformatexception\",{\"1\":{\"4231\":1,\"4679\":1,\"4837\":1,\"4900\":1,\"4902\":2,\"4903\":1,\"4911\":1,\"4914\":1,\"4918\":1,\"4920\":4,\"4922\":1,\"4925\":1,\"4926\":1,\"5271\":1}}],[\"numbers\",{\"1\":{\"311\":1}}],[\"number\",{\"1\":{\"266\":1,\"270\":1,\"350\":1,\"4179\":1,\"4407\":1,\"4612\":1,\"4614\":1,\"5112\":2,\"5451\":4,\"6118\":1,\"6180\":1}}],[\"nulls\",{\"0\":{\"6823\":1},\"1\":{\"6754\":1}}],[\"nullable\",{\"1\":{\"4133\":2,\"6824\":2,\"6985\":1}}],[\"null<>1的返回结果是null\",{\"1\":{\"3383\":1}}],[\"null<>null的返回结果是null\",{\"1\":{\"3383\":1}}],[\"null=null的返回结果是null\",{\"1\":{\"3383\":1}}],[\"null与任何值的直接比较都为null\",{\"1\":{\"3383\":1}}],[\"nullpointerexception>\",{\"1\":{\"4374\":1}}],[\"nullpointerexception\",{\"1\":{\"3097\":1,\"3265\":2,\"3546\":1,\"4372\":1,\"4821\":1,\"4848\":1,\"4853\":1,\"4883\":1,\"5718\":1,\"6118\":2}}],[\"null\",{\"1\":{\"438\":1,\"453\":1,\"464\":1,\"540\":1,\"711\":1,\"832\":1,\"834\":1,\"1212\":2,\"1248\":1,\"1250\":2,\"1315\":4,\"1356\":3,\"1360\":1,\"1366\":4,\"1406\":1,\"1489\":2,\"1525\":2,\"1537\":1,\"1772\":1,\"1795\":6,\"1953\":2,\"2298\":1,\"2301\":1,\"2304\":1,\"2310\":1,\"2313\":2,\"2315\":1,\"2316\":1,\"2370\":3,\"2372\":2,\"2376\":2,\"2406\":2,\"2452\":1,\"2539\":1,\"2546\":2,\"2853\":1,\"3097\":2,\"3099\":1,\"3113\":1,\"3157\":1,\"3178\":1,\"3179\":3,\"3186\":3,\"3189\":1,\"3197\":1,\"3265\":1,\"3383\":2,\"4178\":1,\"4350\":1,\"4352\":1,\"4360\":1,\"4364\":1,\"4368\":3,\"4558\":1,\"4560\":1,\"4682\":1,\"4685\":2,\"4693\":7,\"4781\":2,\"4851\":1,\"4861\":1,\"4866\":2,\"5017\":1,\"5020\":1,\"5048\":2,\"5210\":1,\"5213\":1,\"5271\":1,\"5428\":1,\"5429\":2,\"5430\":1,\"5440\":1,\"5463\":1,\"5466\":1,\"5658\":1,\"5825\":2,\"5914\":1,\"6063\":9,\"6065\":6,\"6076\":8,\"6083\":4,\"6086\":3,\"6090\":1,\"6096\":3,\"6099\":2,\"6101\":3,\"6107\":1,\"6109\":3,\"6116\":1,\"6151\":1,\"6153\":1,\"6180\":3,\"6201\":18,\"6219\":1,\"6258\":20,\"6824\":2,\"6825\":1,\"6828\":2,\"6830\":1,\"6923\":1}}],[\"nexus\",{\"1\":{\"6404\":1,\"6884\":1,\"6885\":1}}],[\"nextservice\",{\"1\":{\"6258\":3}}],[\"nextname\",{\"1\":{\"6258\":5}}],[\"nextelement\",{\"1\":{\"6201\":1,\"6219\":1,\"6258\":1}}],[\"nextid\",{\"1\":{\"3157\":2}}],[\"nextint\",{\"1\":{\"2409\":1,\"2454\":1}}],[\"next\",{\"1\":{\"4\":1,\"346\":1,\"1520\":1,\"1525\":3,\"1537\":2,\"1539\":2,\"1953\":5,\"2953\":1,\"3115\":1,\"5048\":5,\"6157\":1,\"6180\":1,\"6190\":1,\"6192\":1,\"6236\":1,\"6258\":5}}],[\"necessarily\",{\"1\":{\"6201\":1}}],[\"necessary\",{\"1\":{\"6083\":1}}],[\"negativearraysizeexception\",{\"1\":{\"4823\":1}}],[\"nested\",{\"1\":{\"3936\":1}}],[\"never\",{\"1\":{\"2001\":1,\"4911\":1,\"4914\":1}}],[\"net周边信息为主\",{\"1\":{\"6737\":1}}],[\"net官方账号\",{\"1\":{\"6709\":1}}],[\"netty\",{\"1\":{\"6538\":1}}],[\"netbeans大牛\",{\"1\":{\"6720\":1}}],[\"netbeans\",{\"1\":{\"6444\":1,\"6973\":1}}],[\"net\",{\"1\":{\"1090\":1,\"3044\":1,\"3443\":1,\"4368\":1,\"4423\":1,\"4425\":1,\"4491\":1,\"4669\":1,\"4699\":1,\"4700\":1,\"4988\":1,\"4989\":1,\"4990\":1,\"5239\":1,\"5240\":1,\"5242\":1,\"5246\":1,\"5813\":1,\"5882\":1,\"6133\":1,\"6134\":1,\"6137\":1,\"6273\":1,\"6275\":1,\"6541\":1,\"6709\":1,\"6730\":1}}],[\"needed\",{\"1\":{\"6201\":1}}],[\"needs\",{\"1\":{\"5524\":1}}],[\"need\",{\"1\":{\"346\":1,\"4481\":1,\"5525\":1,\"5578\":1,\"6201\":1}}],[\"newscast\",{\"1\":{\"7010\":1}}],[\"newsletter\",{\"1\":{\"6735\":1}}],[\"newfoowidget\",{\"1\":{\"6910\":1}}],[\"newfactory\",{\"1\":{\"6201\":6}}],[\"newhashmap\",{\"1\":{\"6904\":1}}],[\"newer\",{\"1\":{\"6201\":1}}],[\"newexception\",{\"1\":{\"4981\":2}}],[\"newmethodaccessor\",{\"1\":{\"6109\":2}}],[\"newmembers\",{\"1\":{\"6099\":3}}],[\"newreflectiondata\",{\"1\":{\"6076\":2}}],[\"newlock\",{\"1\":{\"6063\":3}}],[\"newline\",{\"1\":{\"346\":1}}],[\"newtclass\",{\"1\":{\"5190\":1}}],[\"newthread\",{\"1\":{\"3157\":1}}],[\"newobject\",{\"1\":{\"4981\":2}}],[\"newcustomerid\",{\"1\":{\"4212\":1,\"4213\":1}}],[\"newproxyinstance\",{\"1\":{\"1855\":1,\"1856\":1,\"1871\":2}}],[\"newproduct\",{\"1\":{\"1229\":1,\"1289\":1}}],[\"newinstance0\",{\"1\":{\"6086\":1}}],[\"newinstancecallercache\",{\"1\":{\"6065\":2}}],[\"newinstance\",{\"1\":{\"1366\":2,\"5064\":1,\"5190\":1,\"5204\":1,\"5205\":1,\"5853\":1,\"5876\":1,\"5883\":1,\"5911\":1,\"5914\":3,\"5934\":1,\"5964\":1,\"6017\":1,\"6054\":1,\"6064\":1,\"6065\":6,\"6066\":1,\"6085\":1,\"6086\":6,\"6099\":1,\"6118\":4,\"6119\":1,\"6258\":1}}],[\"new\",{\"0\":{\"257\":1},\"1\":{\"258\":1,\"329\":1,\"341\":2,\"385\":1,\"386\":1,\"441\":1,\"453\":1,\"522\":2,\"542\":3,\"553\":1,\"555\":1,\"561\":1,\"566\":1,\"605\":2,\"626\":8,\"697\":1,\"709\":1,\"713\":3,\"766\":3,\"777\":4,\"781\":4,\"783\":5,\"832\":6,\"834\":6,\"850\":2,\"852\":1,\"854\":1,\"858\":8,\"894\":2,\"928\":6,\"1114\":4,\"1134\":6,\"1138\":1,\"1161\":1,\"1199\":2,\"1200\":1,\"1203\":1,\"1212\":6,\"1214\":1,\"1250\":6,\"1254\":1,\"1308\":4,\"1310\":2,\"1315\":6,\"1320\":2,\"1353\":1,\"1356\":3,\"1360\":2,\"1366\":7,\"1406\":8,\"1429\":2,\"1431\":5,\"1436\":5,\"1489\":6,\"1491\":6,\"1525\":3,\"1535\":6,\"1541\":4,\"1586\":4,\"1601\":2,\"1605\":5,\"1636\":3,\"1642\":1,\"1653\":1,\"1655\":2,\"1686\":4,\"1704\":2,\"1718\":1,\"1720\":3,\"1743\":1,\"1763\":5,\"1774\":2,\"1795\":4,\"1797\":2,\"1844\":2,\"1871\":1,\"1873\":2,\"1903\":2,\"1905\":2,\"1953\":2,\"1976\":5,\"2016\":1,\"2020\":2,\"2025\":1,\"2058\":8,\"2078\":2,\"2082\":3,\"2089\":6,\"2118\":2,\"2124\":3,\"2144\":3,\"2149\":4,\"2152\":5,\"2165\":1,\"2167\":1,\"2188\":6,\"2194\":6,\"2196\":1,\"2208\":1,\"2229\":1,\"2282\":1,\"2286\":2,\"2293\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1,\"2335\":1,\"2338\":1,\"2370\":3,\"2372\":1,\"2376\":1,\"2379\":1,\"2389\":1,\"2397\":3,\"2406\":2,\"2409\":5,\"2411\":2,\"2438\":4,\"2452\":4,\"2454\":1,\"2456\":1,\"2467\":9,\"2473\":2,\"2512\":3,\"2539\":6,\"2541\":4,\"2546\":3,\"2663\":1,\"2679\":3,\"2699\":1,\"2711\":1,\"2726\":1,\"2739\":2,\"2746\":2,\"2748\":1,\"2853\":1,\"2884\":1,\"2888\":2,\"2891\":1,\"2953\":6,\"2964\":1,\"2966\":6,\"3027\":1,\"3031\":1,\"3037\":1,\"3053\":3,\"3056\":1,\"3057\":1,\"3078\":1,\"3085\":1,\"3091\":1,\"3093\":4,\"3095\":1,\"3097\":1,\"3099\":3,\"3105\":2,\"3109\":1,\"3113\":3,\"3115\":1,\"3120\":1,\"3122\":2,\"3157\":2,\"3161\":2,\"3168\":1,\"3170\":1,\"3172\":1,\"3179\":1,\"3180\":1,\"3201\":2,\"3248\":1,\"3398\":1,\"3418\":1,\"4016\":1,\"4088\":2,\"4115\":4,\"4179\":1,\"4211\":1,\"4368\":6,\"4383\":1,\"4407\":2,\"4507\":1,\"4644\":1,\"4660\":2,\"4679\":1,\"4682\":1,\"4685\":2,\"4693\":1,\"4746\":3,\"4754\":1,\"4757\":1,\"4781\":4,\"4786\":1,\"4796\":2,\"4861\":2,\"4866\":2,\"4869\":2,\"4918\":1,\"4922\":1,\"4926\":1,\"4981\":4,\"5006\":2,\"5009\":1,\"5015\":1,\"5017\":1,\"5020\":1,\"5042\":1,\"5044\":3,\"5055\":1,\"5059\":6,\"5090\":2,\"5093\":1,\"5115\":2,\"5120\":1,\"5124\":1,\"5126\":1,\"5128\":2,\"5131\":1,\"5133\":5,\"5137\":2,\"5139\":3,\"5142\":3,\"5160\":3,\"5188\":1,\"5189\":2,\"5193\":3,\"5196\":3,\"5200\":6,\"5205\":1,\"5234\":1,\"5264\":1,\"5265\":1,\"5267\":2,\"5269\":1,\"5271\":2,\"5310\":1,\"5311\":2,\"5334\":2,\"5336\":1,\"5371\":1,\"5376\":2,\"5382\":2,\"5402\":1,\"5434\":2,\"5445\":3,\"5451\":1,\"5455\":1,\"5457\":1,\"5463\":2,\"5466\":3,\"5469\":4,\"5476\":1,\"5486\":1,\"5494\":2,\"5497\":4,\"5546\":1,\"5556\":1,\"5733\":3,\"5766\":1,\"5776\":3,\"5853\":1,\"6054\":1,\"6063\":2,\"6065\":3,\"6071\":1,\"6076\":4,\"6083\":3,\"6086\":2,\"6090\":1,\"6109\":3,\"6111\":1,\"6114\":1,\"6118\":4,\"6180\":2,\"6201\":4,\"6219\":2,\"6258\":14,\"6522\":1,\"6808\":1,\"6810\":1,\"6853\":1,\"6904\":1,\"6910\":1,\"6936\":1,\"6962\":3}}],[\"noinflation\",{\"1\":{\"6109\":1}}],[\"noclassdeffounderror\",{\"1\":{\"4717\":1}}],[\"nocommand\",{\"1\":{\"777\":1,\"781\":2}}],[\"none\",{\"1\":{\"6118\":1}}],[\"nonempty\",{\"1\":{\"4223\":1}}],[\"nonemptyarray\",{\"1\":{\"4179\":1}}],[\"nonprimitiveparametersbaseidx\",{\"1\":{\"6118\":1}}],[\"nonstatic\",{\"1\":{\"4179\":1}}],[\"nonfinal\",{\"1\":{\"4179\":1}}],[\"nonfairsync\",{\"1\":{\"3201\":1}}],[\"non\",{\"1\":{\"4042\":1,\"4179\":2,\"4223\":1,\"4557\":1,\"5486\":1,\"5491\":1,\"5528\":1,\"5530\":1,\"5825\":1,\"6063\":1,\"6083\":1,\"6118\":6}}],[\"nonterminalexpression\",{\"1\":{\"1476\":1}}],[\"nonterminal\",{\"1\":{\"1470\":1}}],[\"noflybehavior\",{\"1\":{\"2535\":1,\"2539\":1,\"2541\":1}}],[\"norafflestate\",{\"1\":{\"2452\":1,\"2454\":2}}],[\"noraffllestate\",{\"1\":{\"2452\":2}}],[\"normally\",{\"1\":{\"4244\":1}}],[\"normal\",{\"1\":{\"279\":1,\"283\":1,\"3375\":1}}],[\"nosuchelementexception\",{\"1\":{\"4233\":1,\"5718\":1,\"6258\":1}}],[\"nosuchmethoderror\",{\"1\":{\"3532\":1}}],[\"nosuchmethodexception\",{\"1\":{\"1366\":1,\"4836\":1,\"6013\":1,\"6054\":1,\"6065\":1,\"6071\":2,\"6075\":1,\"6090\":2}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"1366\":2}}],[\"nosuchfieldexception\",{\"1\":{\"438\":1,\"4835\":1,\"5962\":1}}],[\"now\",{\"1\":{\"382\":1,\"384\":1,\"3083\":1}}],[\"no\",{\"1\":{\"272\":1,\"350\":1,\"781\":11,\"783\":2,\"1315\":1,\"2409\":2,\"3091\":1,\"4022\":1,\"4102\":1,\"6076\":2,\"6096\":1,\"6201\":5}}],[\"nothing\",{\"1\":{\"6180\":1}}],[\"notfound\",{\"1\":{\"3226\":1}}],[\"notgenerics\",{\"1\":{\"3113\":4}}],[\"notpaystate\",{\"1\":{\"2467\":3}}],[\"notpeopleacceptevent\",{\"1\":{\"2465\":1,\"2467\":2,\"2471\":2}}],[\"notifyall\",{\"1\":{\"5416\":1,\"5679\":1,\"6015\":1}}],[\"notify\",{\"1\":{\"1726\":1,\"5416\":1,\"5679\":1,\"6015\":1}}],[\"notifyobservers\",{\"1\":{\"1718\":3}}],[\"notifyobserver\",{\"1\":{\"1686\":3}}],[\"notepad<string\",{\"1\":{\"5017\":2}}],[\"notepad<k\",{\"1\":{\"5017\":1}}],[\"note\",{\"1\":{\"270\":1,\"329\":1,\"1315\":1,\"5805\":1,\"6065\":1,\"6118\":1,\"6201\":2}}],[\"not\",{\"1\":{\"191\":1,\"255\":2,\"385\":1,\"1356\":1,\"1366\":2,\"2467\":1,\"2469\":2,\"2693\":1,\"3383\":1,\"4022\":1,\"4179\":1,\"4231\":1,\"4368\":7,\"4696\":2,\"4861\":1,\"5035\":1,\"5193\":1,\"5382\":4,\"5527\":1,\"5528\":1,\"5529\":1,\"5825\":1,\"6063\":2,\"6065\":3,\"6076\":1,\"6083\":1,\"6096\":1,\"6116\":1,\"6118\":1,\"6201\":4,\"6258\":1}}],[\"nodeid2\",{\"1\":{\"363\":1}}],[\"nodeid1\",{\"1\":{\"361\":1,\"363\":1}}],[\"nodeid\",{\"1\":{\"330\":2,\"331\":1,\"332\":1}}],[\"nodes\",{\"0\":{\"213\":1},\"1\":{\"214\":1,\"249\":1,\"266\":1,\"350\":1,\"357\":1,\"362\":1}}],[\"node\",{\"0\":{\"174\":1,\"175\":1,\"176\":1,\"179\":1,\"182\":1,\"185\":1,\"188\":1,\"192\":1,\"195\":1,\"352\":1},\"1\":{\"266\":1,\"267\":2,\"329\":1,\"331\":1,\"347\":1,\"353\":1,\"360\":1,\"364\":1,\"3199\":1,\"6541\":1}}],[\"rcp\",{\"1\":{\"6667\":1}}],[\"rxjava\",{\"1\":{\"6573\":1}}],[\"rd\",{\"1\":{\"6076\":17,\"6096\":7,\"6201\":5}}],[\"rdcconfig\",{\"1\":{\"3352\":1}}],[\"rdc\",{\"1\":{\"3095\":2,\"3352\":1}}],[\"ruby\",{\"1\":{\"6541\":1}}],[\"rudy\",{\"1\":{\"5244\":1}}],[\"rules\",{\"1\":{\"4383\":1}}],[\"rule\",{\"1\":{\"4383\":3}}],[\"runoob\",{\"1\":{\"4703\":1}}],[\"runreflectivecall\",{\"1\":{\"4374\":1,\"4380\":1}}],[\"runchildren\",{\"1\":{\"4374\":1}}],[\"runchild\",{\"1\":{\"4374\":2}}],[\"runleaf\",{\"1\":{\"4374\":1}}],[\"running\",{\"1\":{\"5529\":1}}],[\"runner\",{\"1\":{\"4374\":1,\"4407\":1,\"4415\":1}}],[\"runners\",{\"1\":{\"4374\":15,\"4380\":7,\"4387\":1,\"4390\":1,\"4407\":2,\"4415\":1,\"4419\":1}}],[\"runnable\",{\"1\":{\"3157\":1}}],[\"runwith就是放在测试类名之前\",{\"1\":{\"4314\":1,\"4398\":1}}],[\"runwith\",{\"1\":{\"4308\":1,\"4315\":1,\"4316\":1,\"4317\":1,\"4318\":1,\"4319\":1,\"4392\":1,\"4399\":1,\"4400\":1,\"4401\":1,\"4402\":2,\"4407\":2,\"4410\":1,\"4415\":2,\"4487\":2}}],[\"runwater\",{\"1\":{\"2025\":2}}],[\"runtimevisibleannotations\",{\"1\":{\"4600\":1,\"4603\":1}}],[\"runtimeinvisibleannotations\",{\"1\":{\"4600\":1,\"4603\":1}}],[\"runtimepolicy\",{\"1\":{\"4596\":1,\"4598\":2,\"4600\":1,\"4603\":1}}],[\"runtime\",{\"1\":{\"2334\":1,\"2335\":5,\"4519\":1,\"4594\":1,\"4596\":1,\"4612\":1,\"4642\":1,\"4660\":2,\"4690\":1,\"5315\":1,\"5529\":1,\"5717\":1}}],[\"runtimeexceptions\",{\"1\":{\"6818\":1}}],[\"runtimeexception或它们的子类\",{\"1\":{\"4748\":1}}],[\"runtimeexception与其子类\",{\"1\":{\"4731\":1}}],[\"runtimeexception\",{\"1\":{\"1356\":1,\"2370\":2,\"2467\":2,\"3277\":1,\"4818\":1,\"6201\":1}}],[\"runair\",{\"1\":{\"2025\":2}}],[\"run\",{\"1\":{\"1489\":1,\"1491\":1,\"2015\":1,\"2016\":4,\"2020\":6,\"2025\":2,\"2370\":1,\"4374\":4,\"4380\":3,\"5193\":2,\"5529\":1,\"5578\":1,\"5786\":2,\"5819\":1,\"6065\":2,\"6118\":1,\"6180\":2,\"6258\":2}}],[\"rtti\",{\"1\":{\"5819\":2}}],[\"rt\",{\"1\":{\"4374\":3}}],[\"rpc框架\",{\"1\":{\"6542\":1}}],[\"rpc执行超时\",{\"1\":{\"3890\":1}}],[\"rpc\",{\"1\":{\"3846\":1,\"3849\":1,\"3851\":1}}],[\"rpc方法的返回值和参数必须使用包装数据类型\",{\"1\":{\"3058\":1}}],[\"rs\",{\"1\":{\"6940\":1,\"6941\":1}}],[\"rs规范完全认证的可移植实现\",{\"1\":{\"6579\":1}}],[\"rs参考实现\",{\"1\":{\"6578\":1}}],[\"rsa\",{\"1\":{\"3667\":1}}],[\"rss甚至html\",{\"1\":{\"3235\":1}}],[\"ritchie\",{\"1\":{\"4009\":1}}],[\"richard\",{\"1\":{\"2571\":1}}],[\"right\",{\"1\":{\"166\":1,\"172\":1,\"173\":1,\"271\":1,\"1487\":11,\"1489\":6}}],[\"r\",{\"0\":{\"4008\":1},\"1\":{\"2144\":2,\"2149\":3,\"2409\":2,\"2454\":2,\"3302\":1,\"3952\":1,\"4019\":1,\"4024\":1,\"5446\":3,\"6258\":5,\"6684\":1}}],[\"rahman\",{\"1\":{\"6717\":1}}],[\"ratpack\",{\"1\":{\"6673\":1}}],[\"ratelimiter\",{\"1\":{\"1335\":2,\"1336\":2,\"1338\":2,\"1351\":2,\"1353\":5}}],[\"race604\",{\"1\":{\"4670\":1,\"4702\":1}}],[\"rawtype\",{\"1\":{\"4561\":1}}],[\"rawtypes\",{\"1\":{\"4507\":1}}],[\"ralph\",{\"1\":{\"2571\":1}}],[\"raffle\",{\"1\":{\"2452\":2,\"2454\":5,\"2456\":1}}],[\"raffleactivity\",{\"1\":{\"2452\":2,\"2454\":8,\"2456\":2}}],[\"ran2\",{\"1\":{\"4383\":1}}],[\"ran1\",{\"1\":{\"4383\":1}}],[\"range对索引进行范围检索\",{\"1\":{\"3375\":1}}],[\"range\",{\"1\":{\"3354\":1,\"5271\":1,\"5279\":1}}],[\"random的实例或者math\",{\"1\":{\"3177\":1}}],[\"random实例包括java\",{\"1\":{\"3177\":1}}],[\"randomaccesssublist\",{\"1\":{\"3100\":1}}],[\"random\",{\"1\":{\"2409\":2,\"2454\":2,\"3177\":1,\"3243\":1}}],[\"ranks\",{\"1\":{\"266\":1,\"267\":1,\"270\":1}}],[\"rank\",{\"1\":{\"266\":1}}],[\"robovm\",{\"1\":{\"6515\":1}}],[\"robert\",{\"1\":{\"2001\":1}}],[\"rocketmq是一个开源的分布式消息传递和流数据平台\",{\"1\":{\"6500\":1}}],[\"rocketmq\",{\"1\":{\"6500\":1}}],[\"root\",{\"1\":{\"6076\":1,\"6083\":4,\"6096\":1,\"6109\":3}}],[\"roofed\",{\"1\":{\"693\":2,\"695\":1,\"707\":5,\"709\":3,\"711\":1}}],[\"roadvehicle\",{\"1\":{\"2020\":6}}],[\"routine\",{\"1\":{\"6083\":1,\"6116\":1,\"6118\":1}}],[\"routerproduct\",{\"1\":{\"1308\":3,\"1310\":2}}],[\"round\",{\"0\":{\"175\":1},\"1\":{\"387\":1}}],[\"reusable\",{\"1\":{\"6927\":1}}],[\"reuse\",{\"1\":{\"2199\":2}}],[\"reilly\",{\"1\":{\"6742\":1}}],[\"reinhold\",{\"1\":{\"6714\":1}}],[\"rebellabs\",{\"1\":{\"6734\":1}}],[\"rebellabs作者\",{\"1\":{\"6718\":1}}],[\"reza\",{\"1\":{\"6717\":1}}],[\"repository\",{\"0\":{\"6882\":1},\"1\":{\"6400\":1,\"6765\":1}}],[\"reported\",{\"1\":{\"6201\":1}}],[\"report\",{\"1\":{\"6201\":1}}],[\"replace\",{\"1\":{\"6076\":1}}],[\"repeat\",{\"1\":{\"3467\":1}}],[\"repeatable请参考java\",{\"1\":{\"4619\":1}}],[\"repeatable和\",{\"1\":{\"4586\":1}}],[\"repeatable\",{\"0\":{\"4618\":1},\"1\":{\"3302\":1,\"4654\":1}}],[\"reentrantlock\",{\"1\":{\"3544\":1,\"4786\":2}}],[\"remappingfunction\",{\"1\":{\"3097\":1}}],[\"remoteexception\",{\"1\":{\"6927\":1}}],[\"remotecontroller\",{\"1\":{\"781\":2,\"783\":11}}],[\"removed\",{\"1\":{\"5555\":1}}],[\"remove元素请使用iterator方式\",{\"1\":{\"3114\":1}}],[\"removeobserver\",{\"1\":{\"1718\":2,\"1720\":1}}],[\"remove\",{\"1\":{\"820\":1,\"823\":1,\"832\":4,\"834\":3,\"850\":1,\"852\":3,\"854\":2,\"856\":1,\"1525\":3,\"1537\":3,\"1686\":2,\"1718\":1,\"2953\":2,\"2964\":1,\"3108\":1,\"3115\":1,\"3117\":1,\"3164\":1,\"4696\":3,\"6258\":2}}],[\"relic\",{\"1\":{\"6522\":1}}],[\"reload\",{\"1\":{\"6258\":2}}],[\"relactiondata\",{\"1\":{\"6080\":1}}],[\"relative\",{\"1\":{\"4533\":1,\"4536\":1,\"4539\":1,\"4542\":1,\"4545\":1,\"4548\":1,\"4551\":1,\"4554\":1,\"4557\":1,\"4560\":1,\"4563\":1,\"4566\":1,\"4569\":1,\"4572\":1,\"4575\":1,\"4578\":1,\"4581\":1,\"4584\":1}}],[\"relation\",{\"1\":{\"3545\":1}}],[\"relay\",{\"1\":{\"1586\":4}}],[\"release\",{\"1\":{\"384\":1}}],[\"releases\",{\"1\":{\"191\":1}}],[\"registered\",{\"1\":{\"6201\":1}}],[\"registermethodstofilter\",{\"1\":{\"6099\":1}}],[\"registernatives\",{\"1\":{\"5825\":2}}],[\"registerobserver\",{\"1\":{\"1718\":2,\"1720\":2}}],[\"register\",{\"1\":{\"1586\":4,\"1601\":2,\"1603\":4,\"3426\":1}}],[\"regular\",{\"1\":{\"267\":1}}],[\"referred\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"refer\",{\"1\":{\"6083\":1}}],[\"referenced\",{\"1\":{\"5486\":1,\"5491\":2,\"5497\":1}}],[\"reference\",{\"1\":{\"4978\":1,\"5337\":1}}],[\"ref指的是使用普通的索引\",{\"1\":{\"3375\":1}}],[\"reflectutil\",{\"1\":{\"6086\":1,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"reflectmethod\",{\"1\":{\"6013\":1}}],[\"reflectfield\",{\"1\":{\"5962\":1}}],[\"reflect类库一起对反射技术进行了全力的支持\",{\"1\":{\"5846\":1}}],[\"reflectively\",{\"1\":{\"6086\":1}}],[\"reflective\",{\"1\":{\"5528\":2,\"5530\":2,\"6083\":1}}],[\"reflectivecallable\",{\"1\":{\"4374\":2,\"4380\":2}}],[\"reflectiondata<>\",{\"1\":{\"6076\":1}}],[\"reflectiondata<t>\",{\"1\":{\"6076\":5,\"6081\":1,\"6096\":1}}],[\"reflectiondata\",{\"1\":{\"6076\":11,\"6080\":1,\"6081\":2,\"6096\":1}}],[\"reflectionfactory\",{\"1\":{\"6074\":1,\"6076\":1,\"6083\":1,\"6086\":1,\"6096\":1,\"6105\":1,\"6109\":3,\"6111\":1,\"6114\":1}}],[\"reflection\",{\"1\":{\"5522\":1,\"5524\":1,\"5525\":1,\"5526\":1,\"5527\":3,\"5528\":1,\"5529\":1,\"5530\":2,\"6059\":1,\"6065\":4,\"6081\":1,\"6086\":2,\"6090\":1,\"6096\":1,\"6098\":1,\"6099\":1,\"6107\":2,\"6138\":1}}],[\"reflect下的annotatedelement接口提供这些方法\",{\"1\":{\"4623\":1}}],[\"reflect\",{\"1\":{\"1854\":1,\"4374\":4,\"4380\":4,\"4644\":1,\"5204\":1,\"5232\":1,\"5233\":1,\"5518\":2,\"5883\":1,\"5890\":1,\"5962\":8,\"5964\":1,\"6013\":2,\"6015\":7,\"6017\":1,\"6065\":1,\"6083\":3,\"6086\":3,\"6109\":1,\"6118\":4}}],[\"refbeandefinition\",{\"1\":{\"1366\":4}}],[\"ref=\",{\"1\":{\"1338\":1,\"1351\":1}}],[\"refinedabstraction\",{\"1\":{\"605\":3}}],[\"refined\",{\"1\":{\"600\":1,\"605\":1}}],[\"restful\",{\"1\":{\"6940\":1}}],[\"rest\",{\"1\":{\"6637\":1,\"6942\":1,\"6960\":1}}],[\"restx\",{\"1\":{\"6581\":1}}],[\"restexpress\",{\"1\":{\"6580\":1}}],[\"resteasy\",{\"1\":{\"6579\":1}}],[\"rest框架\",{\"0\":{\"6574\":1},\"1\":{\"6583\":1}}],[\"restricted\",{\"1\":{\"5529\":1}}],[\"restrictions\",{\"1\":{\"5529\":1}}],[\"restriction\",{\"1\":{\"4564\":1}}],[\"restorememento\",{\"1\":{\"1636\":2}}],[\"resolve\",{\"1\":{\"6063\":2}}],[\"resolveclass\",{\"1\":{\"6063\":2}}],[\"resolved\",{\"1\":{\"5528\":1}}],[\"resolve前后信息比对\",{\"1\":{\"3429\":1}}],[\"resources\",{\"0\":{\"6998\":1},\"1\":{\"5561\":1,\"6154\":1,\"6790\":1}}],[\"resources方式\",{\"1\":{\"3270\":1}}],[\"resource是java\",{\"1\":{\"4793\":1}}],[\"resource\",{\"0\":{\"4792\":1,\"4858\":1},\"1\":{\"4766\":1,\"4863\":1,\"4867\":1,\"5670\":1,\"6201\":2,\"6219\":3}}],[\"resourceobserver\",{\"1\":{\"3002\":1}}],[\"resize\",{\"1\":{\"3123\":1}}],[\"res=\",{\"1\":{\"1905\":1}}],[\"res\",{\"1\":{\"1905\":2,\"6076\":9,\"6083\":4,\"6096\":8,\"6101\":7,\"6109\":3}}],[\"responsebody\",{\"1\":{\"4696\":3}}],[\"response\",{\"1\":{\"1686\":4,\"3234\":1,\"4231\":2}}],[\"responsibility\",{\"1\":{\"1039\":1,\"1929\":1,\"2001\":1,\"2631\":1}}],[\"result<record3<string\",{\"1\":{\"6951\":1}}],[\"results\",{\"1\":{\"6081\":1}}],[\"resultarray\",{\"1\":{\"4357\":1}}],[\"result\",{\"1\":{\"387\":2,\"3189\":1,\"4746\":3,\"4781\":3,\"5048\":4,\"5448\":8,\"5466\":4,\"5530\":1,\"6219\":3,\"6927\":1,\"6951\":1,\"6967\":7,\"6969\":2}}],[\"recordoper\",{\"1\":{\"4693\":1}}],[\"record\",{\"1\":{\"4254\":1,\"6063\":1}}],[\"recover\",{\"1\":{\"4016\":1,\"6927\":1}}],[\"recovergamerolefrommemento\",{\"1\":{\"1653\":1,\"1655\":1}}],[\"recommend2\",{\"1\":{\"3057\":1}}],[\"recommend1\",{\"1\":{\"3057\":1}}],[\"receive\",{\"1\":{\"1586\":4,\"2077\":1,\"2078\":2,\"2082\":3}}],[\"receiver\",{\"1\":{\"745\":1,\"761\":1,\"766\":6,\"2082\":2}}],[\"rectangle\",{\"1\":{\"2144\":3,\"2149\":3,\"2152\":3}}],[\"rect\",{\"1\":{\"370\":1}}],[\"reactor\",{\"1\":{\"6572\":1}}],[\"reactive\",{\"1\":{\"6571\":1}}],[\"reached\",{\"1\":{\"6065\":1}}],[\"reason\",{\"1\":{\"2001\":1,\"3005\":1,\"6201\":1}}],[\"realcause\",{\"1\":{\"5229\":2}}],[\"really\",{\"1\":{\"5193\":1,\"6118\":1}}],[\"reallocatememory\",{\"1\":{\"473\":1}}],[\"realization\",{\"0\":{\"5783\":1},\"1\":{\"2899\":1,\"5786\":1}}],[\"reality\",{\"1\":{\"435\":2}}],[\"real\",{\"1\":{\"1829\":1}}],[\"readfile\",{\"1\":{\"4746\":1,\"4757\":1,\"4769\":1,\"4771\":1,\"4781\":3}}],[\"readable\",{\"1\":{\"4169\":1}}],[\"readability\",{\"1\":{\"385\":1}}],[\"readobject\",{\"1\":{\"1795\":1}}],[\"readlines\",{\"1\":{\"6898\":1}}],[\"readline\",{\"1\":{\"1491\":2,\"4746\":1,\"4781\":1,\"6201\":1,\"6258\":1}}],[\"ready\",{\"1\":{\"1123\":1,\"1136\":1,\"1138\":1}}],[\"reader\",{\"1\":{\"943\":1,\"4746\":3,\"4781\":5}}],[\"read\",{\"1\":{\"255\":1,\"4757\":1,\"4781\":1,\"4861\":1,\"4866\":1,\"4869\":1,\"6086\":1,\"6107\":1,\"6201\":1}}],[\"reviewed\",{\"1\":{\"2467\":1,\"2469\":2}}],[\"reviewstate\",{\"1\":{\"2467\":2}}],[\"review\",{\"1\":{\"397\":1}}],[\"reteniton注解用来限定那些被它所注解的注解类在注解到其他类上以后\",{\"1\":{\"4593\":1}}],[\"reteniton注解的作用是\",{\"1\":{\"4592\":1}}],[\"retentiontest命令获取到的retentiontest\",{\"1\":{\"4599\":1}}],[\"retentiontest\",{\"1\":{\"4598\":1,\"4600\":1,\"4601\":1}}],[\"retentiontarget\",{\"0\":{\"4591\":1}}],[\"retentionpolicy\",{\"1\":{\"4515\":1,\"4519\":1,\"4523\":1,\"4594\":1,\"4596\":3,\"4612\":1,\"4642\":2,\"4660\":2,\"4690\":1}}],[\"retention用于标明注解被保留的阶段\",{\"1\":{\"4502\":1}}],[\"retention\",{\"0\":{\"4591\":1},\"1\":{\"4502\":1,\"4515\":1,\"4519\":1,\"4523\":1,\"4586\":1,\"4596\":3,\"4600\":1,\"4612\":1,\"4642\":2,\"4660\":2,\"4690\":1}}],[\"returntype\",{\"1\":{\"6116\":2,\"6118\":3}}],[\"returned\",{\"1\":{\"6083\":1}}],[\"returning\",{\"1\":{\"4693\":1}}],[\"returns\",{\"1\":{\"4254\":1,\"4255\":1,\"4260\":1,\"4261\":1,\"6076\":1,\"6096\":1}}],[\"return包装数据类型的对象时\",{\"1\":{\"3276\":1}}],[\"return等来终止\",{\"1\":{\"3184\":1}}],[\"returnval\",{\"1\":{\"1871\":2,\"1903\":4}}],[\"return\",{\"1\":{\"443\":1,\"520\":2,\"540\":2,\"707\":3,\"709\":1,\"711\":1,\"832\":2,\"834\":2,\"850\":2,\"852\":2,\"854\":2,\"856\":2,\"922\":2,\"924\":1,\"926\":2,\"1134\":6,\"1212\":4,\"1250\":2,\"1308\":4,\"1315\":3,\"1356\":1,\"1360\":3,\"1366\":4,\"1406\":2,\"1425\":1,\"1429\":2,\"1487\":4,\"1489\":1,\"1491\":2,\"1525\":5,\"1533\":2,\"1535\":4,\"1537\":6,\"1603\":1,\"1636\":4,\"1649\":2,\"1651\":1,\"1653\":3,\"1702\":3,\"1718\":3,\"1761\":4,\"1772\":5,\"1793\":1,\"1795\":3,\"1871\":2,\"1901\":1,\"1903\":3,\"1953\":1,\"1974\":3,\"2078\":1,\"2082\":2,\"2118\":3,\"2124\":4,\"2165\":1,\"2188\":4,\"2194\":4,\"2286\":1,\"2293\":1,\"2298\":1,\"2304\":1,\"2307\":1,\"2310\":1,\"2313\":1,\"2316\":1,\"2320\":1,\"2335\":1,\"2370\":2,\"2372\":1,\"2376\":1,\"2379\":1,\"2397\":2,\"2406\":2,\"2409\":2,\"2411\":1,\"2438\":1,\"2452\":1,\"2454\":5,\"2467\":6,\"2469\":2,\"2471\":2,\"2512\":1,\"2546\":4,\"2677\":2,\"2836\":1,\"2853\":1,\"2953\":2,\"3018\":1,\"3070\":2,\"3120\":1,\"3157\":1,\"3161\":1,\"3179\":1,\"3191\":1,\"3193\":1,\"3195\":3,\"3201\":1,\"3272\":2,\"3276\":1,\"3520\":1,\"3967\":1,\"4016\":2,\"4102\":1,\"4124\":1,\"4231\":2,\"4247\":1,\"4251\":1,\"4255\":1,\"4405\":2,\"4407\":1,\"4507\":2,\"4548\":1,\"4600\":4,\"4644\":1,\"4660\":2,\"4679\":1,\"4693\":3,\"4696\":8,\"4754\":1,\"4932\":2,\"4943\":1,\"4963\":1,\"4969\":1,\"4974\":1,\"4976\":2,\"5001\":3,\"5003\":1,\"5015\":1,\"5017\":2,\"5020\":1,\"5042\":2,\"5044\":2,\"5048\":2,\"5062\":1,\"5099\":1,\"5101\":1,\"5112\":1,\"5149\":1,\"5151\":1,\"5153\":1,\"5156\":1,\"5158\":1,\"5164\":1,\"5169\":3,\"5176\":1,\"5178\":1,\"5190\":1,\"5205\":2,\"5210\":1,\"5213\":1,\"5234\":1,\"5269\":2,\"5334\":2,\"5369\":1,\"5371\":1,\"5440\":5,\"5448\":1,\"5457\":1,\"5460\":1,\"5463\":2,\"5466\":2,\"5469\":1,\"5539\":1,\"5761\":2,\"5853\":3,\"5914\":3,\"6013\":1,\"6049\":1,\"6059\":1,\"6063\":7,\"6065\":3,\"6071\":1,\"6076\":7,\"6083\":7,\"6086\":4,\"6090\":1,\"6096\":2,\"6099\":4,\"6101\":1,\"6107\":1,\"6109\":3,\"6111\":2,\"6114\":1,\"6116\":1,\"6118\":2,\"6151\":1,\"6153\":1,\"6180\":3,\"6199\":1,\"6201\":3,\"6219\":1,\"6258\":22,\"6798\":1,\"6808\":3,\"6827\":1,\"6915\":1,\"6927\":2}}],[\"retrofit\",{\"1\":{\"6582\":1}}],[\"retro\",{\"1\":{\"380\":1}}],[\"rethink\",{\"1\":{\"268\":1,\"272\":1}}],[\"redhatter\",{\"1\":{\"6713\":1}}],[\"redhat开发的面向对象静态类型编程语言\",{\"1\":{\"6472\":1}}],[\"reddit的java子社区\",{\"1\":{\"6684\":1}}],[\"redefineclasses\",{\"1\":{\"6081\":1}}],[\"redefinedcount\",{\"1\":{\"6076\":2,\"6081\":4}}],[\"reduce\",{\"1\":{\"5670\":1}}],[\"redundant\",{\"1\":{\"5382\":1}}],[\"redis\",{\"1\":{\"2764\":1}}],[\"rediscounter\",{\"1\":{\"1335\":2,\"1336\":8,\"1338\":3,\"1351\":3}}],[\"redbeansoyamilk\",{\"1\":{\"2677\":1,\"2679\":3}}],[\"redo\",{\"1\":{\"751\":1,\"803\":1}}],[\"red\",{\"1\":{\"351\":1,\"6702\":1}}],[\"requirenonnull\",{\"1\":{\"6258\":1}}],[\"requires\",{\"1\":{\"5529\":1,\"6083\":1}}],[\"requirespermissions\",{\"1\":{\"4696\":3,\"4697\":1}}],[\"require\",{\"1\":{\"5350\":1}}],[\"required\",{\"1\":{\"350\":1,\"5355\":1,\"6201\":1}}],[\"requestmapping\",{\"1\":{\"4696\":1}}],[\"requestt\",{\"1\":{\"4193\":1}}],[\"request\",{\"1\":{\"1953\":7,\"3343\":1,\"4208\":1,\"4693\":1,\"6076\":1,\"6096\":1}}],[\"requests\",{\"1\":{\"270\":1}}],[\"requested\",{\"1\":{\"270\":1,\"6201\":1}}],[\"render\",{\"1\":{\"304\":1,\"325\":1,\"5530\":1}}],[\"rendering\",{\"1\":{\"270\":1}}],[\"rendered\",{\"1\":{\"266\":1,\"390\":1}}],[\"rhombus\",{\"0\":{\"192\":1}}],[\"rl\",{\"1\":{\"172\":1,\"326\":1}}],[\"snip\",{\"1\":{\"6996\":1}}],[\"snapshot<\",{\"1\":{\"4324\":1}}],[\"snake\",{\"1\":{\"4177\":1}}],[\"squadron\",{\"1\":{\"6888\":1}}],[\"square\",{\"1\":{\"6822\":1}}],[\"sqlexception\",{\"1\":{\"4834\":1,\"6927\":1}}],[\"sqlexception等以及用户自定义的exception异常\",{\"1\":{\"4725\":1}}],[\"sql语句中表的别名前加as\",{\"1\":{\"3389\":1}}],[\"sql语句\",{\"0\":{\"3379\":1}}],[\"sql性能优化的目标\",{\"1\":{\"3375\":1}}],[\"sql性能\",{\"1\":{\"3369\":1}}],[\"sql注入\",{\"1\":{\"3340\":1}}],[\"sql\",{\"1\":{\"2362\":9,\"3081\":4,\"3397\":1,\"3524\":1,\"6141\":1,\"6166\":1,\"6168\":1,\"6170\":1,\"6191\":1,\"6229\":1,\"6232\":2,\"6233\":1,\"6729\":1,\"6949\":1,\"6950\":1,\"6951\":1}}],[\"sqlprovider\",{\"1\":{\"788\":1}}],[\"svg\",{\"1\":{\"6454\":1}}],[\"svg生成器\",{\"1\":{\"6454\":1}}],[\"svc\",{\"1\":{\"6258\":2}}],[\"s>类型\",{\"1\":{\"6261\":1}}],[\"s>>\",{\"1\":{\"6258\":1}}],[\"s>\",{\"1\":{\"6258\":1}}],[\"s5\",{\"1\":{\"5313\":2}}],[\"s4\",{\"1\":{\"5313\":2}}],[\"s3\",{\"1\":{\"5310\":2,\"5311\":2}}],[\"s2\",{\"1\":{\"5310\":1,\"5311\":2,\"6118\":1}}],[\"skywang12345\",{\"1\":{\"4991\":1}}],[\"smime操作\",{\"1\":{\"6599\":1}}],[\"smith\",{\"1\":{\"1431\":1}}],[\"smack\",{\"1\":{\"6504\":1}}],[\"smallint\",{\"1\":{\"3366\":1}}],[\"slot\",{\"1\":{\"6083\":1}}],[\"slower\",{\"1\":{\"5528\":1}}],[\"sleep\",{\"1\":{\"4378\":1,\"4380\":3,\"4383\":2}}],[\"slf4j的常见实现log4j和logback\",{\"1\":{\"3288\":1}}],[\"slf4j\",{\"0\":{\"6945\":1},\"1\":{\"3280\":2,\"3281\":2,\"6482\":1,\"6777\":1,\"6946\":2,\"6947\":1}}],[\"slave\",{\"1\":{\"2988\":1}}],[\"ssrf\",{\"1\":{\"3338\":1}}],[\"ss\",{\"1\":{\"3078\":1,\"3236\":1}}],[\"sbe\",{\"1\":{\"6354\":1}}],[\"sb\",{\"1\":{\"2988\":1}}],[\"srp\",{\"0\":{\"1999\":1},\"1\":{\"2001\":1}}],[\"srcv\",{\"1\":{\"520\":2}}],[\"src\",{\"1\":{\"516\":1,\"520\":3,\"524\":1,\"525\":1,\"526\":2,\"529\":4,\"535\":1,\"540\":5,\"544\":1,\"556\":1,\"574\":1,\"575\":1,\"576\":1,\"577\":1,\"3308\":1}}],[\"sa\",{\"1\":{\"6603\":2}}],[\"sat4j\",{\"1\":{\"6325\":1}}],[\"sakurainluojia\",{\"1\":{\"6275\":1}}],[\"sanimalpublic\",{\"1\":{\"5883\":2}}],[\"sanimalprotected\",{\"1\":{\"5883\":1}}],[\"sanimalprivate\",{\"1\":{\"5883\":1}}],[\"sanimaldefault\",{\"1\":{\"5883\":1}}],[\"safe\",{\"1\":{\"3162\":1,\"6116\":1,\"6118\":1,\"6927\":1}}],[\"save\",{\"1\":{\"2406\":1,\"2853\":1,\"2895\":1,\"4254\":1}}],[\"saybyebye\",{\"1\":{\"6927\":1}}],[\"sayworld\",{\"1\":{\"4679\":1,\"4682\":1,\"4685\":1}}],[\"say\",{\"1\":{\"3025\":2,\"4679\":1,\"4682\":1,\"4685\":1}}],[\"sayok\",{\"1\":{\"2328\":2}}],[\"sayhello\",{\"1\":{\"1869\":2,\"1873\":1,\"4679\":1,\"4682\":1,\"4685\":1,\"6054\":3}}],[\"sameinstance\",{\"1\":{\"4368\":1}}],[\"same\",{\"1\":{\"170\":1,\"246\":1,\"249\":1,\"255\":1,\"340\":1,\"350\":1,\"4368\":3,\"6065\":1,\"6083\":1,\"6118\":1,\"6201\":1}}],[\"s10461\",{\"1\":{\"5242\":1}}],[\"s1\",{\"1\":{\"1636\":1,\"5310\":4,\"5311\":4,\"5345\":3,\"5347\":1,\"5348\":1,\"5349\":2,\"6118\":2}}],[\"s0\",{\"1\":{\"1636\":1,\"6118\":3}}],[\"s\",{\"1\":{\"1603\":2,\"2144\":5,\"2149\":5,\"2152\":2,\"2328\":1,\"2512\":4,\"3157\":1,\"3186\":2,\"3234\":2,\"3248\":1,\"3963\":1,\"4163\":1,\"4197\":1,\"4231\":2,\"5193\":1,\"5350\":1,\"5353\":2,\"6065\":1,\"6118\":11,\"6157\":2,\"6201\":1,\"6258\":5,\"6845\":1,\"6851\":5,\"6853\":1}}],[\"scene\",{\"1\":{\"6427\":1}}],[\"scala\",{\"1\":{\"6445\":1,\"6469\":1,\"6925\":1,\"6943\":2}}],[\"scalable\",{\"1\":{\"6109\":1}}],[\"scale\",{\"1\":{\"6439\":1}}],[\"scanner\",{\"1\":{\"4796\":3,\"4798\":1,\"4799\":3}}],[\"scm1\",{\"1\":{\"3431\":1}}],[\"school\",{\"1\":{\"5798\":2}}],[\"schoolmanager\",{\"1\":{\"2187\":1,\"2188\":9,\"2191\":2,\"2193\":1,\"2194\":6}}],[\"schoolmasterapprover\",{\"1\":{\"1972\":2,\"1976\":5}}],[\"schema生成typesafe代码\",{\"1\":{\"6347\":1}}],[\"schemalocation=\",{\"1\":{\"4324\":1}}],[\"schedule\",{\"1\":{\"4374\":1}}],[\"scheduledthreadpool\",{\"1\":{\"3159\":1,\"3532\":1}}],[\"score=88\",{\"1\":{\"5964\":1}}],[\"score是private的\",{\"1\":{\"5964\":1}}],[\"scorefield\",{\"1\":{\"5964\":4}}],[\"score\",{\"1\":{\"5962\":2,\"5964\":1}}],[\"scott\",{\"1\":{\"2597\":1}}],[\"scope>\",{\"1\":{\"4324\":1}}],[\"scope=\",{\"1\":{\"1351\":1}}],[\"scope=singleton\",{\"1\":{\"1343\":1}}],[\"scope=prototype\",{\"1\":{\"1343\":1}}],[\"scope\",{\"1\":{\"1343\":1,\"1360\":6,\"1363\":2,\"1368\":1}}],[\"screen\",{\"1\":{\"1134\":8,\"1136\":6,\"5790\":2}}],[\"script>\",{\"1\":{\"334\":1,\"344\":1}}],[\"swagger是一个规范且完整的框架\",{\"1\":{\"6584\":1}}],[\"swagger\",{\"1\":{\"6584\":1}}],[\"swap\",{\"1\":{\"3541\":1}}],[\"swing的后继者\",{\"1\":{\"6426\":1}}],[\"swim\",{\"1\":{\"2521\":1,\"2526\":1,\"2539\":2}}],[\"switch能否用string做参数\",{\"0\":{\"5689\":1}}],[\"switchstring\",{\"1\":{\"3186\":1}}],[\"switch\",{\"0\":{\"4118\":1,\"5351\":1,\"5618\":1},\"1\":{\"1315\":1,\"1489\":1,\"1962\":1,\"2416\":1,\"2417\":1,\"2495\":1,\"3022\":1,\"3186\":1,\"3520\":1,\"4014\":1,\"4119\":3,\"4121\":1,\"4122\":2,\"4124\":1,\"4125\":1,\"4128\":1,\"4129\":1,\"4545\":1,\"4552\":1,\"4554\":1,\"5352\":1,\"5353\":1,\"5354\":2,\"5355\":1,\"5356\":1,\"5557\":1,\"5619\":2,\"5670\":1}}],[\"swedish\",{\"1\":{\"255\":1}}],[\"sdk\",{\"1\":{\"6870\":1}}],[\"sdogpublic\",{\"1\":{\"5883\":3}}],[\"sdogprotected\",{\"1\":{\"5883\":2}}],[\"sdogprivate\",{\"1\":{\"5883\":2}}],[\"sdogdefault\",{\"1\":{\"5883\":2}}],[\"sdut\",{\"1\":{\"5077\":1}}],[\"sd\",{\"1\":{\"485\":1}}],[\"sysctl\",{\"1\":{\"3443\":1}}],[\"systems\",{\"1\":{\"6201\":1}}],[\"systematically\",{\"1\":{\"5525\":1}}],[\"system\",{\"1\":{\"401\":1,\"406\":1,\"408\":1,\"435\":2,\"450\":2,\"453\":2,\"466\":1,\"469\":1,\"473\":2,\"520\":1,\"522\":3,\"540\":3,\"542\":3,\"566\":1,\"605\":2,\"622\":6,\"624\":6,\"626\":3,\"695\":3,\"709\":6,\"713\":2,\"766\":3,\"779\":4,\"783\":7,\"832\":1,\"834\":1,\"852\":1,\"854\":1,\"856\":1,\"894\":4,\"928\":13,\"1110\":1,\"1114\":3,\"1134\":19,\"1197\":2,\"1199\":2,\"1212\":2,\"1214\":1,\"1246\":4,\"1250\":4,\"1304\":8,\"1306\":8,\"1310\":2,\"1313\":6,\"1336\":1,\"1406\":4,\"1427\":1,\"1431\":1,\"1436\":6,\"1491\":5,\"1525\":3,\"1539\":2,\"1586\":5,\"1603\":6,\"1636\":3,\"1653\":1,\"1655\":4,\"1686\":4,\"1702\":3,\"1704\":1,\"1716\":7,\"1720\":3,\"1763\":5,\"1772\":1,\"1774\":5,\"1795\":1,\"1797\":4,\"1842\":3,\"1869\":2,\"1871\":2,\"1873\":1,\"1901\":1,\"1903\":4,\"1905\":1,\"1953\":4,\"1972\":4,\"2016\":1,\"2020\":3,\"2025\":3,\"2052\":10,\"2058\":6,\"2078\":1,\"2082\":1,\"2089\":3,\"2118\":6,\"2124\":7,\"2144\":2,\"2149\":3,\"2152\":4,\"2188\":4,\"2194\":5,\"2286\":3,\"2293\":3,\"2298\":4,\"2304\":4,\"2310\":4,\"2313\":4,\"2320\":4,\"2328\":4,\"2438\":2,\"2454\":14,\"2456\":1,\"2471\":1,\"2473\":3,\"2512\":3,\"2521\":6,\"2526\":4,\"2535\":3,\"2539\":7,\"2541\":1,\"2546\":2,\"2663\":3,\"2677\":5,\"2679\":3,\"2953\":5,\"2960\":6,\"2966\":2,\"3025\":3,\"3051\":1,\"3053\":1,\"3065\":1,\"3080\":1,\"3091\":1,\"3157\":1,\"3186\":3,\"3195\":4,\"3248\":1,\"3305\":1,\"4333\":6,\"4337\":1,\"4372\":2,\"4378\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4419\":3,\"4460\":1,\"4614\":1,\"4644\":1,\"4647\":2,\"4679\":2,\"4682\":1,\"4696\":5,\"4746\":1,\"4781\":3,\"4961\":1,\"4963\":3,\"4969\":3,\"4976\":1,\"4978\":3,\"4981\":9,\"5001\":3,\"5003\":1,\"5015\":1,\"5017\":2,\"5020\":1,\"5044\":1,\"5055\":1,\"5062\":2,\"5090\":1,\"5093\":1,\"5234\":1,\"5267\":2,\"5273\":1,\"5282\":1,\"5311\":2,\"5313\":1,\"5334\":6,\"5336\":1,\"5353\":2,\"5355\":2,\"5376\":2,\"5382\":3,\"5402\":2,\"5434\":2,\"5445\":2,\"5451\":1,\"5463\":1,\"5466\":1,\"5469\":1,\"5494\":1,\"5504\":2,\"5506\":1,\"5761\":2,\"5776\":3,\"5883\":9,\"5888\":9,\"5914\":11,\"5940\":10,\"5962\":5,\"5964\":2,\"6013\":8,\"6017\":1,\"6054\":1,\"6063\":3,\"6065\":1,\"6151\":1,\"6153\":1,\"6180\":1,\"6201\":6,\"6258\":1}}],[\"symbol\",{\"1\":{\"3287\":2}}],[\"symbolexpression\",{\"1\":{\"1487\":5}}],[\"synthetic\",{\"1\":{\"4573\":1,\"5825\":1}}],[\"syntaxes\",{\"1\":{\"255\":1}}],[\"syntax\",{\"0\":{\"303\":1},\"1\":{\"255\":1,\"308\":1,\"346\":1,\"379\":1,\"385\":1,\"5564\":1,\"6258\":1}}],[\"sync\",{\"1\":{\"3201\":1}}],[\"synchroinzed\",{\"1\":{\"2406\":1}}],[\"synchronized\",{\"1\":{\"2304\":1,\"2310\":1,\"2313\":2,\"2320\":1,\"2370\":1,\"2372\":1,\"2376\":1,\"2406\":1,\"3179\":1,\"4157\":1,\"5306\":1,\"6063\":1}}],[\"search文件里写上两个实现类\",{\"1\":{\"6159\":1}}],[\"searchdoc\",{\"1\":{\"6149\":1,\"6151\":1,\"6153\":1,\"6157\":1}}],[\"search\",{\"1\":{\"6149\":1,\"6151\":1,\"6153\":1,\"6154\":1,\"6157\":4,\"6160\":1}}],[\"searchmethods\",{\"1\":{\"6090\":1,\"6101\":1}}],[\"seasonenum\",{\"1\":{\"3018\":2}}],[\"sensitive\",{\"1\":{\"5528\":1}}],[\"sendalarm\",{\"1\":{\"1603\":1,\"1605\":2}}],[\"send\",{\"1\":{\"1586\":5}}],[\"sendmessage\",{\"1\":{\"1601\":2,\"1603\":7,\"4174\":1}}],[\"sendmes\",{\"1\":{\"1302\":1,\"1304\":2,\"1310\":2}}],[\"see\",{\"1\":{\"4914\":1,\"6083\":1,\"6109\":1,\"6201\":1,\"7013\":1}}],[\"segmentfault\",{\"1\":{\"4458\":1,\"4490\":1}}],[\"segregation1\",{\"1\":{\"2052\":1,\"2058\":1}}],[\"segregation\",{\"1\":{\"2033\":1}}],[\"semantic\",{\"1\":{\"6621\":1}}],[\"semaphore等\",{\"1\":{\"3544\":1}}],[\"semicolon\",{\"0\":{\"383\":1},\"1\":{\"384\":2}}],[\"sequence\",{\"1\":{\"5811\":1,\"6573\":1}}],[\"seq\",{\"1\":{\"3018\":5}}],[\"selenium\",{\"1\":{\"6639\":1}}],[\"selenide\",{\"1\":{\"6638\":1}}],[\"selectdeptcount\",{\"1\":{\"4696\":1}}],[\"select\",{\"1\":{\"2677\":2,\"3374\":2,\"3382\":1,\"3383\":1,\"3388\":1,\"3389\":1,\"3391\":2,\"6951\":1}}],[\"selfinterrupt\",{\"1\":{\"3199\":1}}],[\"self\",{\"1\":{\"340\":1}}],[\"se\",{\"1\":{\"2554\":2,\"5546\":1,\"5556\":1,\"6444\":1}}],[\"session会话\",{\"1\":{\"6603\":1}}],[\"session\",{\"1\":{\"2260\":1,\"2339\":1}}],[\"sessionfactory\",{\"1\":{\"2260\":3}}],[\"service测试桩\",{\"1\":{\"6644\":1}}],[\"service集成sso和idm\",{\"1\":{\"6601\":1}}],[\"service进行扩展并将其关联到数据库\",{\"1\":{\"6514\":1}}],[\"serviceconfigurationerror\",{\"1\":{\"6258\":7}}],[\"serviceloader实现了iterable接口\",{\"1\":{\"6258\":1,\"6259\":1}}],[\"serviceloader具体的源码实现在下面\",{\"1\":{\"6191\":1}}],[\"serviceloader<>\",{\"1\":{\"6258\":1}}],[\"serviceloader<s>\",{\"1\":{\"6258\":4}}],[\"serviceloader<search>\",{\"1\":{\"6157\":1}}],[\"serviceloader<driver>\",{\"1\":{\"6180\":1,\"6187\":1,\"6236\":1}}],[\"serviceloader\",{\"1\":{\"6144\":1,\"6157\":1,\"6180\":1,\"6187\":1,\"6236\":1,\"6258\":4,\"6268\":1}}],[\"services目录下定义一个名字为接口全限定名的文件\",{\"1\":{\"6232\":1}}],[\"services目录下的java\",{\"1\":{\"6191\":1}}],[\"services目录下查找配置文件\",{\"1\":{\"6188\":1}}],[\"services目录\",{\"1\":{\"6168\":1}}],[\"services下寻找org\",{\"1\":{\"6201\":1}}],[\"services下根据平台定义的接口新建文件\",{\"1\":{\"6161\":1}}],[\"services下找接口的全限定名文件\",{\"1\":{\"6160\":1}}],[\"services\",{\"1\":{\"6144\":2,\"6154\":1,\"6201\":3,\"6258\":1,\"6260\":2,\"6940\":1,\"6942\":2}}],[\"service或manager向外传输的对象\",{\"1\":{\"3421\":1,\"3537\":1}}],[\"service层\",{\"1\":{\"3413\":1}}],[\"serviceexception等\",{\"1\":{\"3277\":1}}],[\"service\",{\"1\":{\"3006\":1,\"6140\":1,\"6141\":1,\"6201\":6,\"6258\":32,\"6303\":1,\"6584\":1}}],[\"serverinstances\",{\"1\":{\"2409\":6}}],[\"server\",{\"1\":{\"2409\":2,\"6996\":1}}],[\"serveraddress\",{\"1\":{\"2409\":4}}],[\"serverno\",{\"1\":{\"2409\":6}}],[\"servletutils\",{\"1\":{\"4693\":3}}],[\"servletcontextconfig\",{\"1\":{\"2261\":1}}],[\"servlet\",{\"1\":{\"1928\":1,\"2261\":1,\"6656\":1}}],[\"serialization\",{\"1\":{\"6118\":2}}],[\"serializationconstructoraccessorimpl\",{\"1\":{\"6118\":2}}],[\"serializationconstructoraccessor\",{\"1\":{\"6118\":1}}],[\"serializationtargetclassidx\",{\"1\":{\"6118\":3}}],[\"serializationtargetclass\",{\"1\":{\"6118\":2}}],[\"serializable\",{\"0\":{\"5667\":1},\"1\":{\"1793\":1,\"1795\":1,\"2184\":1,\"4569\":1,\"5287\":1,\"5668\":1,\"5825\":1,\"5914\":1}}],[\"serial\",{\"1\":{\"4567\":1}}],[\"serialversionuid\",{\"1\":{\"1793\":1,\"4569\":1}}],[\"sections\",{\"1\":{\"5528\":1}}],[\"securitymanager\",{\"1\":{\"6063\":1}}],[\"security\",{\"1\":{\"5529\":3,\"6065\":5,\"6201\":2}}],[\"securityexception\",{\"1\":{\"4647\":1,\"4825\":1,\"6090\":1,\"6201\":1}}],[\"securitylevel\",{\"1\":{\"344\":1}}],[\"securitylevel=\",{\"1\":{\"329\":2}}],[\"secrectkey\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"seconds\",{\"1\":{\"4378\":1,\"4383\":4}}],[\"secondary\",{\"1\":{\"2988\":1}}],[\"second\",{\"1\":{\"1313\":1,\"3029\":1,\"3388\":1,\"3389\":1,\"4419\":1,\"6201\":1}}],[\"set和hash\",{\"1\":{\"6437\":1}}],[\"setparent\",{\"1\":{\"6109\":1,\"6111\":1}}],[\"setprice\",{\"1\":{\"922\":1,\"924\":4,\"926\":3}}],[\"setkey\",{\"1\":{\"5017\":2}}],[\"setvalue方法是为了解决类型擦除与多态之间的冲突\",{\"1\":{\"5173\":1}}],[\"setvalue\",{\"1\":{\"5017\":2,\"5099\":1,\"5101\":1,\"5149\":1,\"5151\":2,\"5153\":1,\"5156\":1,\"5158\":2,\"5160\":2,\"5164\":1,\"5169\":4}}],[\"setvar\",{\"1\":{\"5015\":2,\"5020\":2,\"5042\":1,\"5044\":3,\"6936\":1}}],[\"setvit\",{\"1\":{\"1649\":1,\"1653\":1,\"1655\":2}}],[\"setboolean\",{\"1\":{\"5993\":1}}],[\"setbusinesstype\",{\"1\":{\"4693\":1}}],[\"setbaise\",{\"1\":{\"707\":1}}],[\"setrequestvalue\",{\"1\":{\"4693\":2}}],[\"setrequestmethod\",{\"1\":{\"4693\":1}}],[\"setroofed\",{\"1\":{\"707\":1}}],[\"seterrormsg\",{\"1\":{\"4693\":1}}],[\"setoperparam\",{\"1\":{\"4693\":1}}],[\"setoperatortype\",{\"1\":{\"4693\":1}}],[\"setopername\",{\"1\":{\"4693\":1}}],[\"setoperurl\",{\"1\":{\"4693\":1}}],[\"setoperip\",{\"1\":{\"4693\":1}}],[\"setjsonresult\",{\"1\":{\"4693\":1}}],[\"setup\",{\"1\":{\"4481\":2,\"4682\":2,\"4685\":1}}],[\"set<string>\",{\"1\":{\"4179\":1}}],[\"setheader\",{\"1\":{\"3234\":1}}],[\"sethousebuilder\",{\"1\":{\"711\":1,\"713\":1}}],[\"setmoniter\",{\"1\":{\"2888\":1}}],[\"setmouse\",{\"1\":{\"2888\":1}}],[\"setmethodaccessor\",{\"1\":{\"6109\":1}}],[\"setmethod\",{\"1\":{\"4693\":1}}],[\"setmemento\",{\"1\":{\"1636\":2,\"1651\":1,\"1655\":1}}],[\"setmemory\",{\"1\":{\"469\":1}}],[\"setmedium\",{\"1\":{\"1586\":2}}],[\"setquackbehavior\",{\"1\":{\"2539\":1}}],[\"setflybehavior\",{\"1\":{\"2539\":1,\"2541\":1}}],[\"setid\",{\"1\":{\"2188\":4,\"2194\":4,\"5369\":1}}],[\"setinfo\",{\"1\":{\"1406\":1}}],[\"setint\",{\"1\":{\"438\":1}}],[\"setnext\",{\"1\":{\"1953\":2,\"1981\":1}}],[\"setname\",{\"1\":{\"850\":1,\"1212\":6,\"1246\":4,\"1425\":1,\"1533\":1,\"1761\":1,\"1772\":1,\"2836\":1,\"5334\":1,\"5336\":1,\"5853\":1,\"5914\":2}}],[\"setchar\",{\"1\":{\"5993\":1}}],[\"setcallback\",{\"1\":{\"1903\":2}}],[\"setcolor\",{\"1\":{\"1761\":1,\"1772\":1}}],[\"setcommand\",{\"1\":{\"766\":1,\"781\":1,\"783\":2}}],[\"setstatus\",{\"1\":{\"4693\":2}}],[\"setstate\",{\"1\":{\"1636\":5,\"2438\":3,\"2454\":5,\"2467\":8,\"2471\":1,\"2473\":1}}],[\"setstrategy\",{\"1\":{\"2512\":3}}],[\"setsuperclass\",{\"1\":{\"1903\":1}}],[\"setattribute\",{\"1\":{\"6201\":1}}],[\"setapprover\",{\"1\":{\"1972\":1,\"1976\":4}}],[\"setage\",{\"1\":{\"1761\":1,\"1772\":1,\"5853\":1,\"5914\":3}}],[\"setaccessible\",{\"1\":{\"438\":2,\"464\":1,\"5914\":1,\"5964\":1,\"5991\":1,\"6017\":1,\"6065\":1}}],[\"setdata\",{\"1\":{\"1702\":2,\"1704\":2,\"1718\":2,\"1720\":2,\"5234\":1,\"6798\":1}}],[\"setdelegate\",{\"1\":{\"6086\":1,\"6111\":3,\"6114\":1}}],[\"setdeptname\",{\"1\":{\"4693\":1}}],[\"setdef\",{\"1\":{\"1649\":1,\"1653\":1,\"1655\":2}}],[\"setdesc\",{\"1\":{\"1533\":1}}],[\"setdes\",{\"1\":{\"850\":1,\"922\":1,\"924\":4,\"926\":3}}],[\"settitle\",{\"1\":{\"4693\":1}}],[\"setting\",{\"1\":{\"1302\":1,\"1306\":2,\"1310\":2}}],[\"setteacher\",{\"1\":{\"2875\":1}}],[\"setter方法中\",{\"1\":{\"3069\":2}}],[\"setter方法放在类体最后\",{\"1\":{\"3068\":1}}],[\"setter方法\",{\"1\":{\"3068\":1}}],[\"setter\",{\"1\":{\"711\":1,\"1197\":1,\"1246\":1,\"1360\":2,\"2088\":1,\"2089\":2,\"2205\":1,\"2226\":1,\"2452\":1,\"2890\":1,\"5368\":1,\"6933\":1,\"6934\":1}}],[\"settv\",{\"1\":{\"2089\":3}}],[\"setwall\",{\"1\":{\"707\":1}}],[\"set\",{\"1\":{\"317\":1,\"321\":1,\"325\":1,\"335\":1,\"391\":1,\"438\":1,\"2183\":1,\"2949\":1,\"3085\":1,\"3164\":1,\"3402\":1,\"5445\":4,\"5463\":2,\"5466\":2,\"5469\":2,\"5519\":1,\"5525\":1,\"5539\":1,\"5964\":4,\"5970\":1,\"6810\":1,\"6834\":1}}],[\"spock\",{\"1\":{\"6640\":1}}],[\"spm\",{\"1\":{\"6523\":1}}],[\"spi和api的区别是什么\",{\"0\":{\"6240\":1}}],[\"spi需要遵循的规范\",{\"1\":{\"6238\":1}}],[\"spi服务发现机制\",{\"1\":{\"6201\":1}}],[\"spi机制实现原理\",{\"0\":{\"6256\":1}}],[\"spi机制通常怎么使用\",{\"0\":{\"6223\":1}}],[\"spi机制深入理解\",{\"0\":{\"6220\":1}}],[\"spi机制\",{\"0\":{\"6163\":1,\"6196\":1,\"6208\":1,\"6217\":1}}],[\"spi机制的缺陷\",{\"0\":{\"6264\":1}}],[\"spi机制的广泛应用\",{\"0\":{\"6162\":1}}],[\"spi机制的简单示例\",{\"0\":{\"6145\":1}}],[\"spi机制详解\",{\"0\":{\"6139\":1}}],[\"spi整体机制图如下\",{\"1\":{\"6142\":1}}],[\"spi\",{\"1\":{\"6140\":1,\"6141\":1,\"6154\":1,\"6155\":1,\"6159\":1,\"6242\":1,\"6252\":1,\"6253\":1,\"6271\":1}}],[\"spinner\",{\"1\":{\"380\":1}}],[\"spy\",{\"1\":{\"4477\":1,\"4479\":3}}],[\"split\",{\"1\":{\"3065\":1,\"6180\":1}}],[\"spring安全课程作者\",{\"1\":{\"6705\":1}}],[\"springsource\",{\"1\":{\"6446\":1}}],[\"spring中spi机制\",{\"0\":{\"6217\":1}}],[\"springboot2+h2+mockito实战\",{\"0\":{\"4428\":1}}],[\"springjunit4classrunner\",{\"1\":{\"4319\":1,\"4402\":1}}],[\"spring\",{\"0\":{\"1775\":1,\"7025\":1},\"1\":{\"785\":1,\"1335\":2,\"1343\":1,\"1349\":1,\"1352\":1,\"1776\":1,\"1878\":1,\"2261\":1,\"2383\":1,\"3018\":1,\"3432\":1,\"4675\":1,\"6218\":2,\"6219\":3,\"6378\":1,\"6674\":1,\"6675\":1,\"6821\":2,\"6822\":2,\"6858\":1,\"6975\":1}}],[\"springmvc\",{\"0\":{\"567\":1},\"1\":{\"568\":1,\"569\":1,\"1977\":1}}],[\"spark\",{\"1\":{\"6488\":1,\"6506\":1,\"6583\":1,\"6939\":1,\"6944\":1}}],[\"sparrow\",{\"1\":{\"2736\":1}}],[\"spades\",{\"1\":{\"4104\":1}}],[\"space\",{\"1\":{\"385\":2,\"4166\":1}}],[\"spaces\",{\"0\":{\"383\":1},\"1\":{\"3024\":1}}],[\"span>\",{\"1\":{\"372\":1}}],[\"spans\",{\"1\":{\"267\":1}}],[\"span\",{\"1\":{\"266\":1}}],[\"specifying\",{\"1\":{\"6201\":2}}],[\"specifies\",{\"1\":{\"6201\":1}}],[\"specified\",{\"1\":{\"1315\":1,\"6201\":6}}],[\"specification\",{\"1\":{\"6640\":1}}],[\"specificmethod\",{\"1\":{\"2663\":2}}],[\"specific\",{\"1\":{\"353\":1,\"375\":1,\"4563\":1,\"6201\":1}}],[\"specialist\",{\"1\":{\"6735\":1}}],[\"special\",{\"0\":{\"303\":1}}],[\"simon\",{\"1\":{\"6718\":1}}],[\"simpletrycatchfinally\",{\"1\":{\"4961\":1,\"4963\":1,\"4969\":1}}],[\"simpletrycatch\",{\"1\":{\"4938\":1,\"4943\":1}}],[\"simpledateformat是线程不安全的类\",{\"1\":{\"3160\":1}}],[\"simpledateformat\",{\"1\":{\"3078\":1,\"3161\":1}}],[\"simplefactory\",{\"1\":{\"1184\":1,\"1212\":1,\"1214\":5}}],[\"simple\",{\"0\":{\"1168\":1},\"1\":{\"1172\":1,\"3162\":1}}],[\"situation\",{\"1\":{\"6201\":1}}],[\"site\",{\"1\":{\"3343\":1}}],[\"singularity是一个mesos框架\",{\"1\":{\"6303\":1}}],[\"singularity\",{\"1\":{\"6303\":1}}],[\"singleresponsibility3\",{\"1\":{\"2025\":1}}],[\"singleresponsibility2\",{\"1\":{\"2020\":1}}],[\"singleresponsibility1\",{\"1\":{\"2016\":1}}],[\"singletonlist\",{\"1\":{\"3102\":1}}],[\"singleton2\",{\"1\":{\"2374\":1}}],[\"singleton1\",{\"1\":{\"2373\":1,\"2374\":1}}],[\"singletoninstance\",{\"1\":{\"2320\":3,\"2323\":1}}],[\"singletontest08\",{\"1\":{\"2328\":1}}],[\"singletontest07\",{\"1\":{\"2320\":1}}],[\"singletontest06\",{\"1\":{\"2313\":1}}],[\"singletontest04\",{\"1\":{\"2304\":1,\"2310\":1}}],[\"singletontest03\",{\"1\":{\"2298\":1}}],[\"singletontest02\",{\"1\":{\"2293\":1}}],[\"singletontest01\",{\"1\":{\"2286\":1}}],[\"singletonobjects\",{\"1\":{\"1363\":1,\"1366\":5,\"1368\":1}}],[\"singleton\",{\"1\":{\"961\":1,\"1351\":1,\"1360\":3,\"1363\":1,\"1368\":1,\"2286\":9,\"2293\":9,\"2298\":9,\"2301\":1,\"2304\":9,\"2310\":10,\"2313\":10,\"2315\":1,\"2316\":1,\"2320\":11,\"2323\":2,\"2328\":6,\"2370\":11,\"2372\":8,\"2374\":4,\"2376\":5,\"2605\":1}}],[\"single\",{\"1\":{\"385\":1,\"2001\":1,\"6201\":1}}],[\"sinat\",{\"1\":{\"6133\":1}}],[\"since\",{\"1\":{\"5530\":1,\"6065\":1,\"6118\":1}}],[\"signature\",{\"1\":{\"4693\":3,\"6083\":1,\"6118\":1}}],[\"signleton2\",{\"1\":{\"2373\":1}}],[\"signs\",{\"1\":{\"274\":1,\"346\":1}}],[\"size=1\",{\"1\":{\"4600\":4}}],[\"size过大导致内存溢出\",{\"1\":{\"3335\":1}}],[\"size正在变大的情况下\",{\"1\":{\"3106\":1}}],[\"size\",{\"1\":{\"1366\":3,\"1429\":1,\"1525\":1,\"1537\":1,\"1718\":1,\"3398\":4,\"5064\":2,\"5093\":1,\"5205\":2,\"5271\":1,\"5445\":1,\"6967\":1}}],[\"side\",{\"1\":{\"271\":1,\"5530\":1}}],[\"solr\",{\"1\":{\"6593\":1}}],[\"solid\",{\"1\":{\"5673\":1,\"5809\":1}}],[\"softreference<>\",{\"1\":{\"6076\":1}}],[\"softreference<reflectiondata<t>>\",{\"1\":{\"6076\":2}}],[\"softreference\",{\"1\":{\"6076\":2}}],[\"softlab\",{\"1\":{\"5077\":1}}],[\"software\",{\"1\":{\"2127\":2}}],[\"sourcepolicy\",{\"1\":{\"4596\":1,\"4598\":2,\"4600\":1,\"4602\":1}}],[\"source>\",{\"1\":{\"4324\":1}}],[\"source\",{\"1\":{\"3044\":1,\"4515\":1,\"4523\":1,\"4594\":1,\"4596\":1}}],[\"sonarqube\",{\"1\":{\"6311\":1,\"6991\":2}}],[\"sonarlint插件详解\",{\"0\":{\"4271\":1}}],[\"son\",{\"1\":{\"2997\":1}}],[\"soak\",{\"1\":{\"2677\":2}}],[\"sort会抛illegalargumentexception异常\",{\"1\":{\"3119\":1}}],[\"sort\",{\"1\":{\"2546\":6,\"3119\":1,\"3152\":2}}],[\"soyamilk\",{\"1\":{\"2677\":4,\"2679\":3}}],[\"soy\",{\"1\":{\"897\":1,\"912\":1,\"926\":2,\"935\":1}}],[\"somemutabletype>\",{\"1\":{\"4179\":1}}],[\"somemutabletype\",{\"1\":{\"4179\":1}}],[\"someannotation\",{\"1\":{\"4073\":1}}],[\"somethingthatyieldsafoo\",{\"1\":{\"4236\":1}}],[\"somethingelse\",{\"1\":{\"4016\":1}}],[\"something\",{\"1\":{\"4016\":1,\"4743\":1,\"4908\":1,\"4911\":1,\"4914\":1,\"4922\":1,\"4926\":1,\"6915\":1}}],[\"someclass\",{\"1\":{\"365\":2}}],[\"some\",{\"1\":{\"350\":1,\"6201\":1,\"6967\":3,\"6969\":3}}],[\"so\",{\"1\":{\"267\":1,\"311\":1,\"384\":1,\"4152\":1,\"6109\":1}}],[\"suteclass\",{\"1\":{\"4487\":1}}],[\"sut\",{\"1\":{\"4460\":3,\"4464\":1,\"4466\":1,\"4481\":1}}],[\"suiteclasses\",{\"1\":{\"4316\":1,\"4400\":1,\"4415\":1,\"4487\":1}}],[\"suite\",{\"1\":{\"4316\":1,\"4400\":1,\"4410\":1,\"4415\":4,\"4487\":1,\"5525\":1,\"6446\":1}}],[\"suit\",{\"1\":{\"4104\":1}}],[\"sum\",{\"1\":{\"3382\":1}}],[\"summer\",{\"1\":{\"3018\":1}}],[\"summed\",{\"1\":{\"274\":1}}],[\"sunxianghuang\",{\"1\":{\"5239\":1}}],[\"sun\",{\"1\":{\"1873\":1,\"4374\":3,\"4380\":3,\"5271\":1,\"6063\":4,\"6083\":1,\"6086\":2,\"6099\":1,\"6109\":1,\"6118\":4}}],[\"suppress\",{\"1\":{\"4530\":1,\"4533\":1,\"4536\":1,\"4539\":1,\"4542\":1,\"4545\":1,\"4548\":1,\"4551\":1,\"4554\":1,\"4557\":1,\"4560\":1,\"4563\":1,\"4566\":1,\"4569\":1,\"4572\":1,\"4575\":1,\"4578\":1,\"4581\":1,\"4584\":1,\"4644\":1}}],[\"suppresswarnings\",{\"0\":{\"4521\":1},\"1\":{\"4501\":1,\"4507\":1,\"4508\":1,\"4511\":1,\"4523\":1,\"4644\":1,\"6076\":1,\"6086\":1}}],[\"supportsipv6onios\",{\"1\":{\"4218\":1,\"4219\":1}}],[\"supports\",{\"1\":{\"4217\":1}}],[\"support\",{\"0\":{\"377\":1},\"1\":{\"5560\":1}}],[\"supported\",{\"1\":{\"258\":1,\"311\":1,\"340\":1}}],[\"super是一个关键字\",{\"1\":{\"5731\":1}}],[\"super从子类调用父类构造\",{\"1\":{\"5727\":1}}],[\"super只能指代其直接父类\",{\"1\":{\"5724\":1}}],[\"super出现在父类的子类中\",{\"0\":{\"5720\":1}}],[\"superset\",{\"1\":{\"5579\":1}}],[\"super在新窗口打开\",{\"1\":{\"5403\":1}}],[\"superextendexample\",{\"1\":{\"5402\":5}}],[\"superexample\",{\"1\":{\"5402\":6}}],[\"superclass\",{\"1\":{\"5234\":2,\"6118\":3}}],[\"supertype\",{\"1\":{\"2103\":1}}],[\"super\",{\"0\":{\"5399\":1,\"5725\":1},\"1\":{\"605\":1,\"624\":9,\"850\":1,\"852\":3,\"854\":3,\"856\":3,\"894\":2,\"924\":1,\"926\":4,\"1136\":1,\"1425\":1,\"1487\":6,\"1533\":1,\"1603\":4,\"1649\":1,\"1761\":1,\"1772\":2,\"1783\":1,\"1793\":1,\"1795\":2,\"1972\":4,\"2144\":2,\"2149\":3,\"2152\":4,\"2546\":1,\"3111\":3,\"3129\":1,\"4682\":2,\"4760\":1,\"5044\":1,\"5046\":3,\"5048\":1,\"5049\":1,\"5051\":2,\"5082\":1,\"5151\":2,\"5158\":2,\"5176\":1,\"5178\":1,\"5334\":1,\"5400\":1,\"5401\":1,\"5402\":2,\"5457\":1,\"5460\":1,\"5463\":1,\"5466\":1,\"5490\":1,\"5721\":1,\"5722\":1,\"5723\":1,\"5730\":1,\"5853\":1,\"5914\":3,\"6063\":1,\"6118\":1}}],[\"such\",{\"1\":{\"353\":1,\"5529\":1,\"5530\":1}}],[\"successfully\",{\"1\":{\"6996\":1}}],[\"success\",{\"1\":{\"338\":1,\"2960\":1,\"2966\":4,\"3005\":1,\"4372\":1,\"4374\":1,\"4693\":1,\"6927\":1}}],[\"surrounded\",{\"1\":{\"335\":1}}],[\"subclass\",{\"1\":{\"6201\":8}}],[\"subaochen\",{\"1\":{\"5077\":1}}],[\"sublist\",{\"1\":{\"3100\":1}}],[\"subtract\",{\"1\":{\"3053\":2}}],[\"subtype\",{\"1\":{\"2103\":1,\"6258\":1}}],[\"substring\",{\"1\":{\"4693\":2,\"6063\":1,\"6258\":1}}],[\"substitution\",{\"1\":{\"2103\":1}}],[\"subsystem03\",{\"1\":{\"1114\":3}}],[\"subsystem02\",{\"1\":{\"1114\":3}}],[\"subsystem01\",{\"1\":{\"1114\":3}}],[\"subject\",{\"1\":{\"1679\":1,\"1680\":1,\"1686\":7,\"1718\":2,\"1725\":1,\"1828\":1,\"1829\":1}}],[\"subexpression\",{\"1\":{\"1487\":2,\"1489\":1}}],[\"sub\",{\"1\":{\"1110\":1,\"2188\":2,\"2194\":2,\"6118\":1}}],[\"subgraph\",{\"1\":{\"313\":1,\"315\":3,\"317\":1,\"318\":1,\"322\":3,\"325\":1,\"326\":3}}],[\"subgraphs\",{\"0\":{\"312\":1,\"324\":1},\"1\":{\"321\":1}}],[\"subroutine\",{\"0\":{\"179\":1}}],[\"sts\",{\"1\":{\"6446\":1}}],[\"st\",{\"1\":{\"5964\":6}}],[\"st=\",{\"1\":{\"5964\":1}}],[\"sth\",{\"1\":{\"3186\":2}}],[\"stub\",{\"1\":{\"4465\":1,\"4466\":1,\"4467\":1,\"4469\":2,\"4473\":2,\"6644\":1}}],[\"study\",{\"1\":{\"2869\":1}}],[\"student\",{\"1\":{\"2869\":1,\"3120\":2,\"4614\":2,\"5798\":2,\"5962\":6,\"5964\":6}}],[\"stus\",{\"1\":{\"2869\":1}}],[\"storm\",{\"1\":{\"6383\":1}}],[\"store\",{\"1\":{\"5193\":1}}],[\"storage\",{\"1\":{\"2406\":3,\"5287\":1}}],[\"stock\",{\"1\":{\"2991\":1,\"2997\":2}}],[\"stopwatch\",{\"1\":{\"4214\":1}}],[\"stoptv\",{\"1\":{\"1601\":1,\"1603\":2}}],[\"stop\",{\"1\":{\"354\":1,\"4174\":1}}],[\"stereo\",{\"1\":{\"1134\":5,\"1136\":6}}],[\"stephen\",{\"1\":{\"6719\":1}}],[\"step\",{\"1\":{\"450\":2,\"453\":2,\"455\":2}}],[\"strange\",{\"1\":{\"6201\":1}}],[\"strategypattern\",{\"1\":{\"2512\":1}}],[\"strategymethod\",{\"1\":{\"2512\":7}}],[\"strategy\",{\"1\":{\"1034\":1,\"2488\":1,\"2506\":1,\"2507\":1,\"2512\":13,\"2527\":1,\"2546\":1,\"2551\":1,\"2630\":1,\"2744\":1}}],[\"str2\",{\"1\":{\"5133\":1}}],[\"str1\",{\"1\":{\"5133\":1}}],[\"strong\",{\"1\":{\"3162\":1}}],[\"stroke\",{\"1\":{\"351\":2,\"354\":5,\"359\":2,\"370\":2,\"376\":2}}],[\"streams\",{\"0\":{\"6849\":1},\"1\":{\"5548\":1,\"6571\":1,\"6759\":1}}],[\"stream\",{\"1\":{\"3092\":1,\"3093\":1,\"3095\":1,\"3096\":1,\"3099\":1,\"5672\":1,\"6850\":1,\"6851\":1,\"6906\":1}}],[\"str\",{\"1\":{\"3065\":2,\"3072\":3,\"3095\":2,\"3109\":2,\"3110\":1,\"4053\":2,\"4079\":2,\"6853\":3}}],[\"structs\",{\"0\":{\"6796\":1},\"1\":{\"6749\":1}}],[\"structures\",{\"0\":{\"7018\":1}}],[\"structure\",{\"1\":{\"2949\":1}}],[\"struts2\",{\"1\":{\"1928\":1}}],[\"strictly\",{\"1\":{\"6065\":1}}],[\"strictfp\",{\"1\":{\"4157\":1}}],[\"strict\",{\"1\":{\"329\":1}}],[\"stringresult\",{\"1\":{\"6915\":1}}],[\"string由于有final修饰\",{\"1\":{\"5688\":1}}],[\"string对象是不可变的\",{\"1\":{\"5687\":1}}],[\"string接收bytes的构造器转成string\",{\"1\":{\"5597\":1}}],[\"stringbuffer与stringbuilder的区别\",{\"0\":{\"5686\":1}}],[\"stringbuffer\",{\"0\":{\"5299\":1},\"1\":{\"5302\":1,\"5306\":1,\"5307\":1}}],[\"stringbuilder和stringbuffer的区别在于stringbuilder不保证同步\",{\"1\":{\"5688\":1}}],[\"stringbuilder在新窗口打开\",{\"1\":{\"5307\":1}}],[\"stringbuilder\",{\"0\":{\"5299\":1},\"1\":{\"715\":1,\"720\":2,\"3031\":2,\"3037\":2,\"5302\":1,\"5305\":1}}],[\"stringindexoutofboundsexception\",{\"1\":{\"4838\":1}}],[\"stringutils\",{\"1\":{\"4693\":4,\"6219\":1}}],[\"string因为覆写了hashcode和equals方法\",{\"1\":{\"3089\":1}}],[\"string类的父类只有object类\",{\"1\":{\"5044\":1}}],[\"string类\",{\"1\":{\"3074\":1}}],[\"string>>\",{\"1\":{\"6951\":1}}],[\"string>\",{\"1\":{\"1601\":2,\"3095\":1,\"3122\":1,\"4660\":2,\"5044\":1}}],[\"strings\",{\"1\":{\"1315\":1,\"4368\":1,\"5557\":1}}],[\"string\",{\"0\":{\"5283\":1,\"5299\":1,\"5308\":1,\"5594\":1,\"5616\":1,\"5618\":1,\"5686\":1},\"1\":{\"214\":1,\"391\":1,\"401\":1,\"406\":1,\"408\":1,\"435\":1,\"450\":1,\"453\":2,\"522\":1,\"542\":1,\"566\":1,\"605\":1,\"626\":1,\"697\":1,\"707\":9,\"713\":1,\"766\":1,\"783\":1,\"832\":3,\"834\":3,\"850\":8,\"852\":4,\"854\":4,\"856\":4,\"858\":1,\"894\":1,\"922\":3,\"926\":1,\"928\":1,\"1114\":1,\"1138\":1,\"1197\":1,\"1199\":1,\"1212\":2,\"1214\":1,\"1246\":1,\"1248\":2,\"1250\":3,\"1310\":1,\"1313\":1,\"1315\":1,\"1336\":2,\"1338\":1,\"1351\":1,\"1353\":1,\"1356\":4,\"1360\":5,\"1366\":1,\"1377\":1,\"1406\":8,\"1425\":4,\"1427\":2,\"1429\":1,\"1431\":1,\"1436\":1,\"1444\":1,\"1476\":4,\"1487\":2,\"1489\":4,\"1491\":8,\"1525\":1,\"1533\":8,\"1535\":9,\"1541\":1,\"1586\":1,\"1601\":4,\"1603\":6,\"1605\":1,\"1636\":8,\"1655\":1,\"1686\":1,\"1704\":1,\"1720\":1,\"1761\":9,\"1763\":1,\"1772\":10,\"1774\":1,\"1793\":5,\"1795\":3,\"1797\":1,\"1844\":1,\"1869\":2,\"1873\":1,\"1901\":1,\"1905\":2,\"1953\":4,\"1972\":6,\"1976\":1,\"2016\":2,\"2020\":4,\"2025\":4,\"2052\":1,\"2058\":1,\"2078\":2,\"2082\":4,\"2089\":1,\"2118\":1,\"2124\":1,\"2144\":1,\"2149\":1,\"2152\":1,\"2188\":7,\"2194\":7,\"2286\":1,\"2293\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1,\"2328\":1,\"2409\":2,\"2411\":1,\"2438\":1,\"2456\":1,\"2465\":1,\"2467\":6,\"2469\":3,\"2471\":1,\"2473\":1,\"2512\":1,\"2541\":1,\"2546\":1,\"2663\":1,\"2679\":1,\"2699\":9,\"2711\":15,\"2748\":2,\"2836\":3,\"2869\":2,\"2875\":1,\"2953\":3,\"2966\":1,\"2987\":1,\"2997\":2,\"3009\":1,\"3011\":1,\"3016\":2,\"3025\":2,\"3027\":2,\"3042\":1,\"3044\":3,\"3065\":2,\"3072\":1,\"3095\":3,\"3105\":2,\"3109\":2,\"3113\":2,\"3115\":1,\"3117\":1,\"3157\":3,\"3186\":2,\"3398\":1,\"3491\":1,\"3959\":1,\"3961\":1,\"3963\":1,\"3965\":1,\"4053\":1,\"4074\":1,\"4079\":1,\"4102\":1,\"4117\":2,\"4133\":2,\"4136\":1,\"4139\":1,\"4179\":3,\"4244\":1,\"4343\":1,\"4345\":1,\"4347\":1,\"4349\":1,\"4351\":1,\"4353\":1,\"4355\":1,\"4357\":1,\"4360\":5,\"4368\":1,\"4383\":1,\"4523\":1,\"4557\":1,\"4607\":1,\"4612\":1,\"4642\":2,\"4644\":1,\"4647\":1,\"4649\":1,\"4679\":1,\"4682\":1,\"4685\":1,\"4690\":1,\"4693\":5,\"4696\":1,\"4746\":2,\"4757\":1,\"4760\":1,\"4769\":1,\"4771\":1,\"4781\":2,\"4896\":1,\"4920\":2,\"4922\":1,\"4926\":1,\"4963\":6,\"4969\":6,\"4976\":1,\"4978\":9,\"4981\":1,\"5015\":1,\"5017\":1,\"5020\":1,\"5042\":2,\"5044\":2,\"5055\":1,\"5062\":1,\"5090\":1,\"5093\":1,\"5112\":1,\"5115\":1,\"5120\":1,\"5133\":3,\"5142\":2,\"5160\":1,\"5193\":1,\"5234\":3,\"5236\":1,\"5271\":1,\"5285\":1,\"5286\":2,\"5287\":1,\"5290\":2,\"5291\":1,\"5292\":4,\"5295\":5,\"5297\":1,\"5298\":1,\"5301\":1,\"5304\":1,\"5307\":1,\"5309\":1,\"5310\":2,\"5311\":5,\"5312\":1,\"5313\":2,\"5334\":6,\"5336\":1,\"5352\":1,\"5353\":1,\"5355\":1,\"5367\":1,\"5369\":2,\"5416\":1,\"5486\":1,\"5494\":1,\"5497\":1,\"5504\":2,\"5573\":1,\"5595\":1,\"5617\":1,\"5625\":1,\"5646\":1,\"5670\":1,\"5733\":1,\"5761\":3,\"5776\":1,\"5853\":5,\"5883\":1,\"5888\":4,\"5896\":1,\"5914\":9,\"5916\":4,\"5927\":1,\"5936\":1,\"5940\":1,\"5942\":3,\"5950\":1,\"5956\":1,\"5962\":7,\"5981\":1,\"5984\":1,\"6001\":1,\"6007\":1,\"6013\":3,\"6015\":3,\"6017\":1,\"6039\":1,\"6041\":1,\"6045\":1,\"6049\":1,\"6054\":3,\"6059\":1,\"6063\":5,\"6090\":1,\"6099\":3,\"6101\":2,\"6116\":1,\"6118\":7,\"6149\":1,\"6151\":1,\"6153\":1,\"6157\":1,\"6173\":1,\"6180\":4,\"6198\":1,\"6201\":7,\"6219\":3,\"6258\":9,\"6798\":3,\"6801\":2,\"6808\":3,\"6827\":3,\"6840\":3,\"6853\":1,\"6910\":1,\"6915\":1,\"6927\":1,\"6951\":1,\"6962\":1}}],[\"styleguide\",{\"1\":{\"3929\":1}}],[\"style>\",{\"1\":{\"370\":1}}],[\"style\",{\"0\":{\"6794\":1},\"1\":{\"350\":4,\"354\":2,\"357\":1,\"369\":1,\"6726\":1,\"6748\":1,\"6845\":1}}],[\"styles\",{\"1\":{\"335\":1,\"353\":1,\"357\":1,\"368\":1}}],[\"styling\",{\"0\":{\"348\":1,\"349\":1,\"352\":1}}],[\"still\",{\"1\":{\"270\":1,\"6063\":1,\"7012\":1}}],[\"stale\",{\"1\":{\"6076\":1}}],[\"stands\",{\"1\":{\"5539\":1}}],[\"standardtest\",{\"1\":{\"4333\":1}}],[\"standard\",{\"1\":{\"4333\":1}}],[\"staff\",{\"1\":{\"5055\":1}}],[\"stackoverflow\",{\"1\":{\"5307\":1,\"5337\":1,\"5350\":1,\"5356\":1,\"6271\":1,\"6685\":1}}],[\"stackoverflowerror\",{\"1\":{\"4717\":1,\"4906\":1}}],[\"stackify\",{\"1\":{\"4920\":2}}],[\"stack=0\",{\"1\":{\"4600\":3}}],[\"stack=1\",{\"1\":{\"4600\":1}}],[\"stack<>\",{\"1\":{\"1489\":1}}],[\"stack<expression>\",{\"1\":{\"1489\":1}}],[\"stack\",{\"1\":{\"1489\":11,\"3257\":1,\"6065\":1}}],[\"stats\",{\"1\":{\"6063\":1}}],[\"stateenum\",{\"1\":{\"2467\":6,\"2469\":2}}],[\"statepatternclient\",{\"1\":{\"2438\":1}}],[\"statechange\",{\"1\":{\"1601\":4,\"1603\":11}}],[\"state\",{\"1\":{\"1054\":1,\"1400\":1,\"1406\":1,\"1636\":14,\"2418\":1,\"2433\":1,\"2434\":1,\"2438\":13,\"2452\":11,\"2454\":5,\"2465\":1,\"2467\":2,\"2471\":19,\"2629\":1}}],[\"statementname\",{\"1\":{\"3398\":1}}],[\"statementcallback\",{\"1\":{\"787\":1,\"788\":1,\"789\":2,\"790\":1}}],[\"statements\",{\"1\":{\"384\":1,\"3187\":1,\"4374\":3,\"4380\":3,\"4545\":1,\"4743\":1}}],[\"statement\",{\"1\":{\"164\":1,\"325\":1,\"350\":1,\"362\":1,\"384\":1,\"4019\":1,\"4022\":1,\"4119\":1,\"4554\":1,\"5356\":1,\"5557\":1,\"6951\":1}}],[\"staticfield\",{\"1\":{\"5504\":1}}],[\"staticinnerclass\",{\"1\":{\"5497\":4}}],[\"static<t\",{\"1\":{\"5229\":1}}],[\"static的\",{\"1\":{\"4407\":1}}],[\"static\",{\"0\":{\"5482\":1},\"1\":{\"401\":1,\"406\":1,\"408\":1,\"435\":1,\"438\":1,\"441\":1,\"443\":1,\"450\":1,\"453\":2,\"522\":1,\"542\":1,\"559\":1,\"566\":1,\"605\":1,\"626\":1,\"697\":1,\"713\":1,\"766\":1,\"783\":1,\"832\":1,\"834\":1,\"858\":1,\"894\":1,\"928\":1,\"1114\":1,\"1134\":12,\"1138\":1,\"1172\":2,\"1182\":1,\"1199\":1,\"1212\":2,\"1214\":1,\"1250\":1,\"1310\":1,\"1313\":1,\"1315\":2,\"1353\":1,\"1360\":2,\"1406\":1,\"1431\":1,\"1436\":1,\"1491\":3,\"1525\":1,\"1541\":1,\"1586\":1,\"1605\":1,\"1636\":1,\"1655\":1,\"1686\":1,\"1704\":1,\"1720\":1,\"1763\":1,\"1774\":1,\"1793\":1,\"1797\":1,\"1844\":1,\"1856\":1,\"1871\":1,\"1873\":1,\"1905\":1,\"1907\":1,\"1953\":1,\"1976\":1,\"2016\":1,\"2020\":1,\"2025\":1,\"2052\":1,\"2058\":1,\"2078\":1,\"2082\":1,\"2089\":1,\"2118\":1,\"2124\":1,\"2144\":1,\"2149\":1,\"2152\":1,\"2188\":1,\"2194\":1,\"2286\":3,\"2293\":4,\"2298\":3,\"2304\":3,\"2310\":3,\"2313\":3,\"2320\":5,\"2328\":1,\"2335\":3,\"2370\":3,\"2372\":2,\"2376\":4,\"2379\":2,\"2397\":2,\"2406\":4,\"2409\":3,\"2411\":2,\"2438\":1,\"2456\":1,\"2467\":1,\"2473\":1,\"2512\":1,\"2541\":1,\"2546\":2,\"2663\":1,\"2679\":1,\"2699\":1,\"2711\":1,\"2953\":1,\"2966\":1,\"3012\":1,\"3014\":2,\"3016\":3,\"3025\":1,\"3161\":1,\"3186\":2,\"3248\":1,\"3281\":1,\"3283\":1,\"4001\":1,\"4157\":1,\"4178\":1,\"4179\":12,\"4299\":1,\"4302\":1,\"4326\":1,\"4333\":2,\"4368\":2,\"4383\":1,\"4407\":1,\"4570\":1,\"4572\":1,\"4644\":5,\"4647\":1,\"4649\":7,\"4693\":1,\"4743\":1,\"4746\":1,\"4754\":1,\"4757\":1,\"4769\":1,\"4771\":1,\"4781\":1,\"4796\":1,\"4938\":1,\"4943\":1,\"4961\":1,\"4963\":1,\"4969\":1,\"4972\":1,\"4976\":1,\"4978\":1,\"4981\":1,\"5001\":3,\"5003\":1,\"5015\":1,\"5017\":1,\"5020\":1,\"5035\":4,\"5038\":2,\"5042\":1,\"5044\":2,\"5055\":2,\"5062\":3,\"5090\":1,\"5093\":1,\"5112\":2,\"5115\":1,\"5120\":1,\"5133\":1,\"5160\":1,\"5190\":1,\"5210\":2,\"5213\":1,\"5224\":1,\"5226\":1,\"5234\":1,\"5269\":1,\"5271\":4,\"5334\":2,\"5336\":2,\"5381\":1,\"5386\":1,\"5486\":4,\"5489\":3,\"5491\":5,\"5494\":2,\"5497\":3,\"5501\":1,\"5504\":2,\"5695\":1,\"5733\":2,\"5776\":1,\"5825\":5,\"5883\":9,\"5888\":1,\"5895\":1,\"5914\":1,\"5962\":1,\"6013\":1,\"6054\":1,\"6059\":1,\"6081\":1,\"6083\":1,\"6099\":2,\"6101\":1,\"6111\":1,\"6157\":1,\"6178\":1,\"6180\":1,\"6199\":1,\"6201\":1,\"6219\":2,\"6258\":7,\"6808\":1,\"6840\":2,\"6927\":2}}],[\"startuml\",{\"1\":{\"5782\":1,\"5786\":1,\"5790\":1,\"5794\":1,\"5798\":1,\"5805\":1}}],[\"startrunnerwithargs\",{\"1\":{\"4374\":2}}],[\"startswith\",{\"1\":{\"4368\":1,\"6851\":1,\"6853\":1}}],[\"startstop\",{\"1\":{\"355\":1}}],[\"startedat\",{\"1\":{\"3000\":1}}],[\"starttime\",{\"1\":{\"3000\":1}}],[\"starttv\",{\"1\":{\"1601\":1,\"1603\":2}}],[\"startcoffee\",{\"1\":{\"1601\":1,\"1603\":2}}],[\"startonload\",{\"1\":{\"344\":1}}],[\"start\",{\"1\":{\"268\":1,\"272\":1,\"346\":1,\"354\":1,\"553\":1,\"555\":1,\"1302\":2,\"1304\":2,\"1306\":2,\"1310\":4,\"3072\":1,\"3398\":3}}],[\"stadium\",{\"0\":{\"176\":1}}],[\"shiro\",{\"1\":{\"6598\":1}}],[\"shiroutils\",{\"1\":{\"4693\":2}}],[\"ship\",{\"1\":{\"6201\":1}}],[\"shell\",{\"1\":{\"4033\":1}}],[\"shell注入\",{\"1\":{\"3340\":1}}],[\"sheep5\",{\"1\":{\"1763\":2,\"1774\":5}}],[\"sheep4\",{\"1\":{\"1763\":2,\"1774\":5}}],[\"sheep3\",{\"1\":{\"1763\":2,\"1774\":5}}],[\"sheep2\",{\"1\":{\"1763\":2,\"1774\":5}}],[\"sheep\",{\"1\":{\"1760\":1,\"1761\":3,\"1763\":24,\"1771\":1,\"1772\":9,\"1774\":17,\"1783\":2}}],[\"shared\",{\"1\":{\"6118\":1,\"6201\":1}}],[\"sharedobjectstorage\",{\"1\":{\"2406\":1}}],[\"sharing\",{\"1\":{\"6083\":1}}],[\"shallowcloneexample\",{\"1\":{\"5463\":7}}],[\"shape\",{\"0\":{\"179\":1,\"182\":1,\"188\":1},\"1\":{\"191\":1,\"2144\":8,\"2149\":10,\"2151\":2,\"2152\":8,\"6013\":2,\"6015\":3}}],[\"shaped\",{\"0\":{\"176\":1}}],[\"shapes\",{\"0\":{\"174\":1}}],[\"shutdown\",{\"1\":{\"1302\":2,\"1304\":2,\"1306\":2,\"1310\":4}}],[\"show\",{\"1\":{\"5210\":1,\"5213\":1}}],[\"shortvalue\",{\"1\":{\"6118\":1}}],[\"short\",{\"1\":{\"4246\":1,\"4344\":1,\"4358\":1,\"5256\":1,\"5277\":1,\"5344\":2,\"5345\":1,\"5349\":1,\"5355\":2,\"5607\":1,\"5690\":1,\"5824\":1,\"6118\":5}}],[\"shortblack\",{\"1\":{\"896\":1,\"924\":3}}],[\"shorter\",{\"1\":{\"364\":1}}],[\"shouldn\",{\"1\":{\"6967\":1,\"6969\":1}}],[\"shouldskip\",{\"1\":{\"6099\":6}}],[\"should\",{\"1\":{\"350\":1,\"357\":1,\"385\":1,\"2001\":1,\"2103\":1,\"2127\":1,\"4368\":6,\"4914\":1,\"5527\":2,\"5528\":1,\"6201\":1}}],[\"shopping\",{\"1\":{\"208\":1,\"209\":1}}],[\"ljc\",{\"1\":{\"6718\":1}}],[\"ljava\",{\"1\":{\"4963\":6,\"4969\":6,\"4978\":6,\"5169\":4,\"5888\":1,\"6118\":11}}],[\"lukas\",{\"1\":{\"6712\":1}}],[\"lucene\",{\"1\":{\"6595\":1}}],[\"lucky\",{\"1\":{\"3033\":1}}],[\"lwjgl\",{\"1\":{\"6422\":1}}],[\"ln\",{\"1\":{\"6258\":17}}],[\"lc\",{\"1\":{\"6258\":8}}],[\"lsa\",{\"1\":{\"5193\":3,\"5196\":3}}],[\"lsp\",{\"0\":{\"2096\":1}}],[\"l\",{\"1\":{\"2711\":1,\"3012\":1,\"4159\":1,\"4644\":2,\"4981\":6,\"5382\":1}}],[\"l3\",{\"1\":{\"2411\":1}}],[\"l2\",{\"1\":{\"2411\":1}}],[\"l1\",{\"1\":{\"2411\":2}}],[\"l1==l2\",{\"1\":{\"2411\":1}}],[\"ldc\",{\"1\":{\"4963\":3,\"4969\":3,\"4978\":5}}],[\"ldcheesepizza\",{\"1\":{\"1246\":1,\"1250\":1}}],[\"ldorderpizzafactory\",{\"1\":{\"1250\":6}}],[\"ldpepperpizza\",{\"1\":{\"1246\":1,\"1250\":1}}],[\"ldpizzasimplefactory\",{\"1\":{\"1238\":1}}],[\"lots\",{\"0\":{\"6838\":1},\"1\":{\"6756\":1,\"6808\":1}}],[\"lombok\",{\"0\":{\"6931\":1},\"1\":{\"6377\":1,\"6775\":1,\"6815\":1,\"6932\":1,\"6937\":1}}],[\"low\",{\"1\":{\"5269\":2,\"5271\":4}}],[\"london\",{\"1\":{\"6715\":1}}],[\"lonelyroamer\",{\"1\":{\"5240\":1}}],[\"longvalue\",{\"1\":{\"6118\":1}}],[\"longexpressioninvolving\",{\"1\":{\"4053\":1}}],[\"longer\",{\"1\":{\"266\":1,\"270\":1}}],[\"long类型能表示的最大值是\",{\"1\":{\"3229\":1}}],[\"long或long赋值时\",{\"1\":{\"3012\":1}}],[\"longblack\",{\"1\":{\"896\":1,\"924\":3,\"928\":3,\"933\":1}}],[\"long\",{\"0\":{\"5596\":1,\"5610\":1},\"1\":{\"466\":1,\"469\":1,\"473\":2,\"1793\":1,\"2353\":2,\"2355\":4,\"2379\":2,\"2381\":2,\"2397\":2,\"2406\":2,\"2409\":3,\"3012\":1,\"3037\":1,\"3042\":1,\"3199\":1,\"4053\":2,\"4159\":1,\"4344\":1,\"4358\":1,\"4696\":1,\"4918\":1,\"4920\":4,\"4981\":3,\"5259\":1,\"5354\":1,\"5355\":2,\"5356\":1,\"5416\":2,\"5611\":2,\"5824\":1,\"6015\":2,\"6063\":2,\"6118\":1}}],[\"location\",{\"1\":{\"6219\":3}}],[\"locating\",{\"1\":{\"6201\":1}}],[\"locals=1\",{\"1\":{\"4600\":4}}],[\"locals\",{\"1\":{\"4551\":1}}],[\"local\",{\"1\":{\"4519\":1,\"4523\":1,\"4590\":1}}],[\"localdatetime代替calendar\",{\"1\":{\"3162\":1}}],[\"localdate\",{\"1\":{\"3083\":2}}],[\"localvalue\",{\"1\":{\"2990\":1}}],[\"locales\",{\"1\":{\"1315\":1}}],[\"localeprovideradapter\",{\"1\":{\"1315\":1}}],[\"locale\",{\"1\":{\"1315\":6}}],[\"locking\",{\"1\":{\"3178\":1}}],[\"lock对象的unlock方法在执行时\",{\"1\":{\"3171\":1}}],[\"lock\",{\"1\":{\"2406\":4,\"3168\":5,\"3170\":5,\"3172\":4,\"3201\":1,\"4786\":2,\"6063\":5}}],[\"loadproperties\",{\"1\":{\"6219\":1}}],[\"loadfactorynames\",{\"1\":{\"6219\":1}}],[\"loadinstalled\",{\"1\":{\"6258\":1}}],[\"loadinitialdrivers\",{\"1\":{\"6178\":1,\"6180\":1}}],[\"loading\",{\"1\":{\"2289\":1,\"2290\":1,\"2300\":1,\"6180\":1,\"6201\":1}}],[\"loadeddrivers\",{\"1\":{\"6180\":2,\"6187\":1,\"6190\":1,\"6236\":2}}],[\"loaded\",{\"1\":{\"6063\":1,\"6201\":3,\"6378\":1}}],[\"loader\",{\"1\":{\"1856\":1,\"1871\":2,\"4144\":1,\"5825\":2,\"6063\":2,\"6118\":1,\"6201\":4,\"6258\":12}}],[\"loadclass\",{\"1\":{\"4647\":1,\"6063\":6}}],[\"load\",{\"1\":{\"2406\":1,\"6118\":1,\"6157\":1,\"6160\":1,\"6180\":2,\"6187\":1,\"6201\":5,\"6236\":1,\"6258\":4}}],[\"loadbeandefinitions\",{\"1\":{\"1356\":2}}],[\"log接口\",{\"1\":{\"6207\":1}}],[\"loghierarchy\",{\"1\":{\"6201\":1}}],[\"logdiagnostic\",{\"1\":{\"6201\":16}}],[\"logfatory是一个抽象类\",{\"1\":{\"6200\":1}}],[\"logfactory的子类创建log\",{\"1\":{\"6207\":1}}],[\"logfactory的getlog\",{\"1\":{\"6207\":1}}],[\"logfactory的实现\",{\"1\":{\"6204\":1}}],[\"logfactory属性是否指定factory实现\",{\"1\":{\"6205\":1}}],[\"logfactory属性指定的factory\",{\"1\":{\"6201\":1}}],[\"logfactoryimpl\",{\"1\":{\"6201\":2,\"6206\":1}}],[\"logfactory实现\",{\"1\":{\"6201\":1}}],[\"logfactory\",{\"1\":{\"3283\":2,\"6201\":26,\"6203\":1}}],[\"logconfigurationexception\",{\"1\":{\"6199\":1,\"6201\":1}}],[\"logansquare\",{\"1\":{\"6460\":1}}],[\"logandthrowexception\",{\"1\":{\"4920\":1}}],[\"loganexception\",{\"1\":{\"4914\":1}}],[\"logaspect\",{\"1\":{\"4693\":2}}],[\"log注解\",{\"1\":{\"4694\":1}}],[\"logpointcut\",{\"1\":{\"4693\":3}}],[\"log的方法进行切点拦截\",{\"1\":{\"4692\":1}}],[\"logical\",{\"1\":{\"4063\":1}}],[\"loginproxy\",{\"1\":{\"3002\":1}}],[\"logtype\",{\"1\":{\"3286\":2}}],[\"logname\",{\"1\":{\"3284\":1,\"3286\":2}}],[\"logstash\",{\"1\":{\"6480\":1}}],[\"logs\",{\"1\":{\"3284\":2}}],[\"logging\",{\"0\":{\"6196\":1},\"1\":{\"3280\":2,\"3283\":2,\"6197\":2,\"6201\":12,\"6203\":1,\"6204\":1,\"6205\":2,\"6206\":1,\"6207\":2,\"6946\":1}}],[\"loggerfactory\",{\"1\":{\"3281\":2,\"4693\":1}}],[\"loggername\",{\"1\":{\"2411\":3}}],[\"logger>\",{\"1\":{\"2411\":1}}],[\"logger\",{\"1\":{\"2410\":3,\"2411\":10,\"3281\":3,\"3287\":1,\"3289\":2,\"3292\":1,\"4179\":3,\"4693\":1,\"5853\":6}}],[\"logback\",{\"1\":{\"3280\":1,\"6479\":1}}],[\"log4j\",{\"1\":{\"3280\":1,\"6477\":1,\"6946\":1}}],[\"log\",{\"1\":{\"1356\":1,\"2411\":1,\"3283\":3,\"3284\":4,\"3286\":2,\"4383\":3,\"4690\":1,\"4693\":14,\"4696\":3,\"4861\":2,\"4866\":2,\"4869\":2,\"4903\":2,\"4914\":1,\"4918\":1,\"6201\":1,\"6834\":1}}],[\"looking\",{\"1\":{\"6201\":5}}],[\"lookupiterator是懒加载迭代器\",{\"1\":{\"6259\":1}}],[\"lookupiterator\",{\"1\":{\"6258\":4}}],[\"lookup\",{\"1\":{\"6065\":1,\"6201\":16}}],[\"looks\",{\"1\":{\"358\":1}}],[\"look\",{\"1\":{\"357\":1,\"6201\":1}}],[\"loose\",{\"1\":{\"329\":1,\"344\":1}}],[\"latencyutils\",{\"1\":{\"6566\":1}}],[\"latch\",{\"1\":{\"4383\":2}}],[\"lanterna\",{\"1\":{\"6512\":1}}],[\"langreflectaccess\",{\"1\":{\"6083\":1}}],[\"lang包中\",{\"1\":{\"5824\":1}}],[\"languages\",{\"1\":{\"5560\":1}}],[\"language\",{\"1\":{\"1315\":1,\"2808\":1,\"6640\":1}}],[\"lang\",{\"1\":{\"715\":1,\"1854\":1,\"1906\":1,\"2334\":1,\"3546\":1,\"3547\":1,\"4349\":1,\"4351\":1,\"4353\":2,\"4355\":2,\"4374\":5,\"4380\":4,\"4600\":1,\"4607\":3,\"4623\":1,\"4642\":4,\"4644\":2,\"4649\":2,\"4663\":1,\"4693\":1,\"4819\":1,\"4820\":1,\"4821\":1,\"4822\":1,\"4823\":1,\"4824\":1,\"4825\":1,\"4826\":1,\"4920\":5,\"4943\":2,\"4963\":8,\"4969\":7,\"4972\":1,\"4978\":7,\"5007\":1,\"5169\":4,\"5204\":1,\"5232\":1,\"5233\":1,\"5234\":1,\"5271\":1,\"5455\":1,\"5457\":1,\"5518\":2,\"5568\":1,\"5603\":1,\"5846\":1,\"5883\":1,\"5888\":2,\"5890\":1,\"5916\":4,\"5942\":3,\"5962\":4,\"6013\":1,\"6015\":17,\"6058\":1,\"6061\":1,\"6063\":1,\"6065\":2,\"6083\":2,\"6086\":1,\"6090\":1,\"6118\":25,\"6897\":1}}],[\"lazily\",{\"1\":{\"6076\":1}}],[\"lazyiterator中的hasnext方法\",{\"1\":{\"6260\":1}}],[\"lazyiterator\",{\"1\":{\"6258\":4}}],[\"lazyinitdemo\",{\"1\":{\"3179\":1}}],[\"lazyinit\",{\"1\":{\"1360\":1}}],[\"lazy\",{\"1\":{\"1344\":2,\"1351\":1,\"2289\":1,\"2290\":1,\"2300\":1}}],[\"last\",{\"1\":{\"6951\":1}}],[\"lastindexof\",{\"1\":{\"6063\":1}}],[\"lastthing\",{\"1\":{\"4016\":1}}],[\"launch4j\",{\"1\":{\"6403\":1}}],[\"launcher\",{\"1\":{\"6063\":1}}],[\"laura\",{\"1\":{\"5244\":1}}],[\"layegg\",{\"1\":{\"2736\":3,\"2737\":1,\"2738\":1,\"2739\":2}}],[\"lambda差距的扩展\",{\"1\":{\"6417\":1}}],[\"lambda\",{\"1\":{\"2546\":1,\"4007\":1,\"4052\":3,\"4053\":1,\"4079\":1,\"5547\":1,\"5672\":1,\"6850\":1}}],[\"label\",{\"1\":{\"271\":1,\"4053\":1}}],[\"lagom\",{\"1\":{\"255\":1}}],[\"les\",{\"1\":{\"7007\":1}}],[\"letter\",{\"1\":{\"3963\":1}}],[\"legacymergesort\",{\"1\":{\"2546\":2}}],[\"learn\",{\"1\":{\"6154\":1,\"6155\":1,\"6159\":1}}],[\"leak\",{\"1\":{\"5630\":1}}],[\"leave\",{\"1\":{\"4095\":1}}],[\"least\",{\"1\":{\"2727\":1}}],[\"leaf3\",{\"1\":{\"829\":1,\"832\":2,\"834\":2}}],[\"leaf2\",{\"1\":{\"829\":1,\"832\":2,\"834\":2}}],[\"leaf1\",{\"1\":{\"829\":1,\"832\":2,\"834\":2}}],[\"leaf\",{\"1\":{\"819\":1,\"832\":5,\"834\":5}}],[\"leader\",{\"1\":{\"6701\":1,\"6702\":1,\"6715\":1,\"6718\":1}}],[\"lead\",{\"1\":{\"329\":1}}],[\"level3\",{\"1\":{\"3352\":1}}],[\"level\",{\"1\":{\"266\":1,\"3288\":1,\"3352\":1,\"5525\":1}}],[\"lengthofyear\",{\"1\":{\"3083\":2}}],[\"length\",{\"0\":{\"265\":1},\"1\":{\"275\":1,\"1489\":1,\"1537\":1,\"2546\":1,\"3065\":1,\"3391\":2,\"4079\":1,\"5015\":1,\"5204\":1,\"5271\":1,\"5463\":1,\"5466\":3,\"5469\":3,\"5914\":3,\"6083\":5,\"6099\":1,\"6101\":1,\"6118\":3,\"6180\":1,\"6258\":1}}],[\"left\",{\"1\":{\"166\":1,\"172\":1,\"173\":1,\"1487\":10,\"1489\":7,\"3370\":1}}],[\"live\",{\"1\":{\"6996\":1}}],[\"liquibase\",{\"1\":{\"6287\":1}}],[\"lily\",{\"1\":{\"5964\":2}}],[\"li\",{\"1\":{\"5193\":3,\"5196\":3}}],[\"literals\",{\"1\":{\"4557\":1,\"5563\":2}}],[\"little\",{\"1\":{\"255\":1}}],[\"license\",{\"0\":{\"3977\":1},\"1\":{\"3972\":1}}],[\"libraries\",{\"0\":{\"6890\":1},\"1\":{\"6767\":1}}],[\"library\",{\"1\":{\"6201\":1,\"6872\":4}}],[\"liberty\",{\"1\":{\"6615\":1}}],[\"libgdx\",{\"1\":{\"6421\":1}}],[\"lib\",{\"1\":{\"2762\":1,\"6439\":1}}],[\"liskov\",{\"1\":{\"2103\":2,\"2118\":1,\"2124\":1}}],[\"lists\",{\"1\":{\"6905\":1}}],[\"list语法\",{\"1\":{\"6413\":1}}],[\"list集合就是一个累赘\",{\"1\":{\"5652\":1}}],[\"list和set\",{\"1\":{\"5650\":1}}],[\"list6\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"listb\",{\"1\":{\"5035\":2,\"5038\":2}}],[\"lista\",{\"1\":{\"5035\":1,\"5038\":1}}],[\"list中只能放string\",{\"1\":{\"5009\":1}}],[\"list中的元素都是object类型\",{\"1\":{\"5007\":1}}],[\"list中的元素也会随之修改\",{\"1\":{\"3110\":1}}],[\"listusers\",{\"1\":{\"3042\":1}}],[\"listobjects\",{\"1\":{\"3006\":1}}],[\"listname\",{\"1\":{\"3000\":1}}],[\"list2\",{\"1\":{\"2188\":2,\"2194\":2,\"5090\":3,\"5128\":1,\"5133\":4,\"5137\":1,\"5139\":1,\"5142\":1}}],[\"list15\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"list14\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"list13\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"list12\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"list11\",{\"1\":{\"5059\":1,\"5200\":1}}],[\"list1\",{\"1\":{\"2188\":2,\"2194\":2,\"5090\":3,\"5128\":1,\"5133\":4,\"5137\":1,\"5139\":4,\"5142\":4}}],[\"list<instrument>\",{\"1\":{\"5776\":1}}],[\"list<integer>\",{\"1\":{\"5193\":1,\"5196\":1}}],[\"list<\",{\"1\":{\"5038\":1,\"5048\":1,\"5052\":1,\"5059\":2,\"5196\":2,\"5200\":2}}],[\"list<b>\",{\"1\":{\"5035\":2,\"5038\":1}}],[\"list<beandefinition\",{\"1\":{\"1366\":1}}],[\"list<beandefinition>\",{\"1\":{\"1356\":1,\"1360\":5,\"1366\":1}}],[\"list<a>\",{\"1\":{\"5035\":2}}],[\"list<string>\",{\"1\":{\"3105\":1,\"3113\":1,\"3115\":1,\"4086\":1,\"5009\":1,\"5059\":5,\"5193\":2,\"5200\":5,\"6149\":1,\"6151\":1,\"6153\":1,\"6219\":2,\"6258\":1,\"6851\":1,\"6853\":1,\"6927\":1,\"6967\":1}}],[\"list<student>\",{\"1\":{\"2869\":1}}],[\"list<pair<string\",{\"1\":{\"3093\":1,\"3099\":1}}],[\"list<person>\",{\"1\":{\"2964\":1}}],[\"list<user>\",{\"1\":{\"3042\":1}}],[\"list<element>\",{\"1\":{\"2953\":1}}],[\"list<employee>\",{\"1\":{\"2188\":3,\"2194\":3}}],[\"list<tercher>\",{\"1\":{\"2869\":1}}],[\"list<collegeemployee>\",{\"1\":{\"2188\":3,\"2194\":3}}],[\"list<college>\",{\"1\":{\"1539\":2,\"1541\":1}}],[\"list<colleague>\",{\"1\":{\"1586\":1}}],[\"list<constructorarg>\",{\"1\":{\"1360\":1}}],[\"list<department>\",{\"1\":{\"1535\":1,\"1537\":2}}],[\"list<observer>\",{\"1\":{\"1686\":1}}],[\"list<object>\",{\"1\":{\"1525\":3}}],[\"list<organizationcomponent>\",{\"1\":{\"852\":1,\"854\":1}}],[\"listener\",{\"1\":{\"552\":1,\"560\":1}}],[\"list\",{\"1\":{\"362\":1,\"854\":1,\"1525\":11,\"1537\":2,\"1539\":1,\"1549\":1,\"1550\":1,\"1580\":1,\"2188\":8,\"2194\":8,\"2949\":1,\"2953\":4,\"2964\":1,\"3102\":1,\"3105\":4,\"3109\":2,\"3110\":1,\"3113\":1,\"3115\":4,\"3117\":2,\"3388\":1,\"4086\":1,\"4169\":1,\"4507\":4,\"4644\":2,\"5006\":5,\"5009\":1,\"5093\":6,\"5115\":4,\"5120\":3,\"5124\":1,\"5126\":1,\"5675\":1,\"6803\":1,\"6851\":1,\"6853\":1,\"6927\":1}}],[\"lightadmin\",{\"1\":{\"6513\":1}}],[\"lightoffcommand\",{\"1\":{\"777\":2,\"783\":4}}],[\"lightoncommand\",{\"1\":{\"777\":2,\"783\":4}}],[\"lightreceiver\",{\"1\":{\"777\":12,\"779\":1}}],[\"limitations\",{\"1\":{\"339\":1}}],[\"like\",{\"1\":{\"252\":1,\"325\":1,\"358\":1,\"4003\":1,\"5384\":1}}],[\"lingpipe\",{\"1\":{\"6532\":1}}],[\"linux和mac\",{\"1\":{\"6405\":1}}],[\"linenumbertable\",{\"1\":{\"4600\":4}}],[\"lines\",{\"1\":{\"255\":1,\"4244\":1}}],[\"liner\",{\"1\":{\"252\":1}}],[\"line\",{\"1\":{\"246\":1,\"249\":1,\"346\":1,\"4036\":1,\"4600\":4,\"4914\":1,\"6201\":1,\"6258\":2}}],[\"linkedhashmap<>\",{\"1\":{\"6258\":1}}],[\"linkedhashmap<string\",{\"1\":{\"6258\":1,\"6261\":1}}],[\"linkedhashmap等等\",{\"1\":{\"5648\":1}}],[\"linkedlist<>\",{\"1\":{\"2964\":1}}],[\"linkedlist\",{\"1\":{\"1552\":1,\"5675\":1}}],[\"linked\",{\"1\":{\"266\":1}}],[\"link\",{\"0\":{\"215\":1,\"218\":1,\"227\":1,\"233\":1,\"236\":1,\"239\":1,\"242\":1,\"265\":1,\"383\":1},\"1\":{\"214\":1,\"266\":2,\"267\":1,\"271\":3,\"329\":1,\"336\":2,\"338\":1,\"340\":1,\"344\":2,\"350\":3,\"385\":2,\"388\":1,\"1302\":1,\"1306\":2,\"1310\":2}}],[\"linkstyle\",{\"1\":{\"350\":1,\"351\":1}}],[\"links\",{\"0\":{\"213\":1,\"221\":1,\"245\":1,\"349\":1},\"1\":{\"214\":2,\"246\":1,\"249\":1,\"266\":1,\"267\":1,\"270\":1,\"274\":1,\"340\":1,\"343\":1,\"350\":4}}],[\"lr\",{\"1\":{\"166\":1,\"173\":1,\"177\":1,\"180\":1,\"183\":1,\"186\":1,\"189\":1,\"193\":1,\"196\":1,\"216\":1,\"219\":1,\"222\":1,\"225\":1,\"228\":1,\"231\":1,\"234\":1,\"237\":1,\"240\":1,\"243\":1,\"247\":1,\"250\":1,\"259\":1,\"263\":1,\"305\":1,\"309\":1,\"326\":1,\"336\":1,\"341\":1,\"344\":1,\"347\":1,\"354\":1,\"365\":1,\"372\":1,\"387\":1}}],[\"bdd测试框架\",{\"1\":{\"6630\":1}}],[\"bbb\",{\"1\":{\"5312\":1,\"5313\":2,\"5353\":1}}],[\"bbf\",{\"1\":{\"354\":1}}],[\"b01\",{\"1\":{\"6996\":1}}],[\"b0101\",{\"1\":{\"3812\":1}}],[\"b0100\",{\"1\":{\"3809\":1}}],[\"b0321\",{\"1\":{\"3838\":1}}],[\"b0320\",{\"1\":{\"3836\":1}}],[\"b0315\",{\"1\":{\"3834\":1}}],[\"b0314\",{\"1\":{\"3832\":1}}],[\"b0313\",{\"1\":{\"3830\":1}}],[\"b0312\",{\"1\":{\"3828\":1}}],[\"b0311\",{\"1\":{\"3826\":1}}],[\"b0310\",{\"1\":{\"3824\":1}}],[\"b0300\",{\"1\":{\"3821\":1}}],[\"b0220\",{\"1\":{\"3819\":1}}],[\"b0210\",{\"1\":{\"3817\":1}}],[\"b0200\",{\"1\":{\"3814\":1}}],[\"b0001\",{\"1\":{\"3260\":1,\"3806\":1}}],[\"b无法排序\",{\"1\":{\"3372\":1}}],[\"b表示错误来源于当前系统\",{\"1\":{\"3254\":1}}],[\"b的结果是int类型\",{\"1\":{\"3189\":1}}],[\"b的结果为false\",{\"1\":{\"3049\":1}}],[\"b空格\",{\"1\":{\"3021\":1}}],[\"blog\",{\"1\":{\"4423\":1,\"4425\":1,\"4491\":1,\"4669\":1,\"4699\":1,\"4700\":1,\"4986\":1,\"4988\":1,\"4989\":1,\"4990\":1,\"5077\":1,\"5239\":1,\"5240\":1,\"5242\":1,\"5246\":1,\"5813\":1,\"5882\":1,\"6133\":1,\"6134\":1,\"6137\":1,\"6273\":1,\"6275\":1,\"6736\":1}}],[\"blockjunit4classrunner\",{\"1\":{\"4374\":4}}],[\"blocks\",{\"1\":{\"4022\":1}}],[\"block\",{\"1\":{\"4003\":1,\"4019\":1,\"4022\":1,\"4383\":1,\"4548\":1,\"4781\":2}}],[\"blocklist\",{\"1\":{\"2988\":1}}],[\"bloch\",{\"1\":{\"2331\":1,\"5582\":1}}],[\"blade\",{\"1\":{\"6585\":1,\"6677\":1}}],[\"blacklist\",{\"1\":{\"2988\":1}}],[\"blank\",{\"1\":{\"340\":1,\"341\":4}}],[\"b类\",{\"1\":{\"2058\":1}}],[\"b=20\",{\"1\":{\"1487\":3,\"1489\":1,\"1491\":1}}],[\"bjorderpizzafactory\",{\"1\":{\"1250\":6}}],[\"bjpepperpizza\",{\"1\":{\"1246\":1,\"1250\":1}}],[\"bjpizzasimplefactory\",{\"1\":{\"1238\":1}}],[\"bjcheesepizza\",{\"1\":{\"1246\":1,\"1250\":1}}],[\"bien\",{\"1\":{\"6700\":1}}],[\"bit\",{\"1\":{\"4246\":1,\"6083\":1}}],[\"bigint\",{\"1\":{\"3366\":1}}],[\"bigdecimal的等值比较应使用compareto\",{\"1\":{\"3054\":1}}],[\"bigdecimal\",{\"1\":{\"3053\":8,\"3056\":3,\"3057\":4,\"3528\":1}}],[\"bintray\",{\"1\":{\"6399\":1}}],[\"binary\",{\"1\":{\"5563\":1}}],[\"bingtang\",{\"1\":{\"2089\":5}}],[\"binder\",{\"1\":{\"6577\":1}}],[\"bind\",{\"1\":{\"329\":1}}],[\"bis\",{\"1\":{\"1795\":4}}],[\"biancheng\",{\"1\":{\"1090\":1}}],[\"burns\",{\"1\":{\"6704\":1}}],[\"buddy\",{\"1\":{\"6297\":1}}],[\"buddhistcalendar\",{\"1\":{\"1315\":3}}],[\"buddhist\",{\"1\":{\"1315\":1}}],[\"buck\",{\"1\":{\"6293\":1}}],[\"bucket\",{\"1\":{\"2699\":5,\"2700\":2,\"2711\":3}}],[\"bucketname\",{\"1\":{\"2699\":2,\"2711\":7}}],[\"businuess\",{\"1\":{\"4896\":1}}],[\"businessstatus\",{\"1\":{\"4693\":2}}],[\"businesstype\",{\"1\":{\"4690\":3,\"4693\":1,\"4696\":6}}],[\"business\",{\"1\":{\"3248\":4,\"3422\":1,\"3538\":1}}],[\"bu\",{\"1\":{\"3426\":2}}],[\"bufferedwriter\",{\"1\":{\"943\":1}}],[\"bufferedreader\",{\"1\":{\"943\":1,\"1491\":2,\"4746\":2,\"4781\":2,\"6201\":3,\"6258\":3}}],[\"buildkite\",{\"1\":{\"6335\":1}}],[\"buildinternalsignature\",{\"1\":{\"6118\":1}}],[\"build>\",{\"1\":{\"4324\":1}}],[\"buildhouse\",{\"1\":{\"709\":1,\"711\":1}}],[\"build\",{\"1\":{\"693\":1,\"697\":1,\"6213\":1,\"6806\":1,\"6808\":1,\"6810\":1,\"6836\":1}}],[\"buildwalls\",{\"1\":{\"693\":2,\"695\":1,\"709\":3,\"711\":1}}],[\"buildbasic\",{\"1\":{\"693\":2,\"695\":1,\"709\":3,\"711\":1}}],[\"builder\",{\"0\":{\"6804\":1},\"1\":{\"664\":1,\"673\":1,\"676\":1,\"678\":1,\"680\":1,\"682\":1,\"683\":2,\"703\":1,\"971\":1,\"2609\":1,\"3031\":2,\"3033\":1,\"3037\":1,\"6427\":1,\"6750\":1,\"6808\":3,\"6810\":1}}],[\"bugs\",{\"1\":{\"6201\":1}}],[\"bug\",{\"1\":{\"395\":1,\"2462\":1,\"2754\":1,\"3081\":1,\"6814\":1,\"6978\":2,\"6989\":1,\"6991\":1}}],[\"but\",{\"1\":{\"266\":1,\"2127\":1,\"4095\":1,\"4374\":1,\"5193\":1,\"5527\":1,\"6076\":1,\"6096\":1,\"6201\":2}}],[\"baz\",{\"1\":{\"6829\":2}}],[\"bazel\",{\"1\":{\"6291\":1}}],[\"batik\",{\"1\":{\"6454\":1}}],[\"bamboo\",{\"1\":{\"6327\":1}}],[\"bad\",{\"1\":{\"4236\":2,\"4368\":2,\"6201\":1}}],[\"badflybehavior\",{\"1\":{\"2535\":1,\"2539\":1}}],[\"barwidget\",{\"1\":{\"6829\":1}}],[\"bar\",{\"1\":{\"6827\":5,\"6828\":1,\"6872\":2,\"6875\":1,\"6876\":1}}],[\"barexception\",{\"1\":{\"4047\":1,\"4077\":1}}],[\"bar>\",{\"1\":{\"4046\":1,\"4076\":1}}],[\"bao\",{\"1\":{\"3105\":1,\"3109\":1}}],[\"baidusite\",{\"1\":{\"1716\":1,\"1720\":4}}],[\"baise\",{\"1\":{\"707\":5}}],[\"bake\",{\"1\":{\"1192\":1}}],[\"ban\",{\"1\":{\"380\":1,\"4368\":1}}],[\"backpressure\",{\"1\":{\"6571\":1}}],[\"backed\",{\"1\":{\"2467\":1,\"2469\":2}}],[\"backendserver>\",{\"1\":{\"2409\":1}}],[\"backendserver\",{\"1\":{\"2409\":7}}],[\"back\",{\"1\":{\"1315\":1}}],[\"background\",{\"1\":{\"353\":1}}],[\"backwards\",{\"1\":{\"350\":1}}],[\"base64\",{\"1\":{\"6896\":1}}],[\"baseclassloader\",{\"1\":{\"6201\":5}}],[\"basecontroller\",{\"1\":{\"4696\":1}}],[\"base\",{\"1\":{\"311\":1,\"2124\":4,\"6118\":1,\"6840\":1}}],[\"based\",{\"1\":{\"266\":1,\"3087\":1}}],[\"basictest\",{\"1\":{\"6962\":1}}],[\"basic\",{\"0\":{\"377\":1,\"7022\":1},\"1\":{\"255\":1,\"4704\":2,\"4993\":2,\"5247\":2,\"6138\":2}}],[\"bruno\",{\"1\":{\"6703\":1}}],[\"brpc\",{\"1\":{\"6542\":1}}],[\"brackets\",{\"1\":{\"4009\":1}}],[\"brand\",{\"1\":{\"622\":3,\"624\":15}}],[\"broker\",{\"1\":{\"6497\":1,\"6501\":1}}],[\"broker生成\",{\"1\":{\"3448\":1}}],[\"browsers\",{\"1\":{\"5524\":1}}],[\"browser\",{\"1\":{\"329\":1,\"340\":1,\"5524\":1}}],[\"bright\",{\"1\":{\"1134\":2,\"1136\":1}}],[\"bridgetest\",{\"1\":{\"605\":1}}],[\"bridge\",{\"1\":{\"588\":1,\"598\":1,\"657\":2,\"1015\":1,\"2613\":1}}],[\"breaks\",{\"1\":{\"4545\":1,\"5530\":1}}],[\"break\",{\"0\":{\"303\":1},\"1\":{\"1315\":3,\"1489\":3,\"3184\":1,\"3186\":2,\"4124\":1,\"4125\":1,\"5353\":2,\"5355\":2,\"6099\":2}}],[\"b2\",{\"1\":{\"326\":2}}],[\"b1\",{\"1\":{\"315\":1,\"322\":1,\"326\":2}}],[\"bye\",{\"1\":{\"6927\":2}}],[\"by最后的字段是组合索引的一部分\",{\"1\":{\"3372\":1}}],[\"by的场景\",{\"1\":{\"3372\":1}}],[\"by导致数据库慢查询\",{\"1\":{\"3336\":1}}],[\"byteman\",{\"1\":{\"6298\":1}}],[\"bytevalue\",{\"1\":{\"6118\":1}}],[\"bytevectorfactory\",{\"1\":{\"6118\":1}}],[\"bytevector\",{\"1\":{\"6118\":1}}],[\"bytecode\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"bytes\",{\"0\":{\"5596\":1},\"1\":{\"6118\":3}}],[\"bytearrayinputstream\",{\"1\":{\"1795\":2}}],[\"bytearrayoutputstream\",{\"1\":{\"1795\":2}}],[\"byte\",{\"0\":{\"5594\":1,\"5598\":2},\"1\":{\"469\":1,\"3967\":1,\"4344\":1,\"4358\":1,\"4368\":3,\"5254\":1,\"5276\":1,\"5355\":2,\"5595\":1,\"5599\":2,\"5607\":1,\"5608\":3,\"5609\":1,\"5690\":1,\"5824\":1,\"6118\":2,\"6297\":1}}],[\"by\",{\"0\":{\"6831\":1},\"1\":{\"266\":2,\"270\":1,\"335\":1,\"340\":2,\"346\":1,\"391\":2,\"3372\":2,\"4374\":2,\"5271\":1,\"5337\":2,\"5523\":1,\"6086\":1,\"6111\":1,\"6114\":1,\"6118\":1,\"6201\":7,\"6755\":1}}],[\"beetl\",{\"1\":{\"6623\":1}}],[\"been\",{\"1\":{\"2370\":1,\"5382\":1,\"6063\":1,\"6109\":1}}],[\"behaviour\",{\"1\":{\"6201\":1}}],[\"behavior\",{\"1\":{\"5530\":1}}],[\"being\",{\"1\":{\"5825\":1}}],[\"benefit\",{\"1\":{\"5524\":1}}],[\"benn\",{\"1\":{\"4972\":1}}],[\"before修饰的方法执行前\",{\"1\":{\"4330\":1}}],[\"before修饰的方法会在子类\",{\"1\":{\"4330\":1}}],[\"before注解修饰的方法会在每个测试方法执行前执行一次\",{\"1\":{\"4330\":1}}],[\"before对应\",{\"1\":{\"4307\":1}}],[\"before来插入一条用户a信息\",{\"1\":{\"4305\":1}}],[\"before不止运行一次\",{\"1\":{\"4304\":1}}],[\"before\",{\"1\":{\"4303\":1,\"4333\":4,\"4407\":2,\"4481\":1,\"4482\":1,\"4483\":1,\"4684\":1,\"4685\":1}}],[\"beforeclass注解方法执行前执行\",{\"1\":{\"4329\":1}}],[\"beforeclass注解方法会在子类的\",{\"1\":{\"4329\":1}}],[\"beforeclass注解修饰的方法\",{\"1\":{\"4329\":1}}],[\"beforeclass创建数据库连接\",{\"1\":{\"4305\":1}}],[\"beforeclass的区别在于\",{\"1\":{\"4304\":1}}],[\"beforeclass对应\",{\"1\":{\"4301\":1}}],[\"beforeclass\",{\"1\":{\"4297\":1,\"4298\":1,\"4333\":2,\"4483\":1}}],[\"because\",{\"1\":{\"4179\":1,\"5528\":1,\"6083\":1,\"6086\":1,\"6111\":1,\"6114\":1,\"6201\":1}}],[\"beautiful\",{\"1\":{\"3162\":1}}],[\"beat\",{\"1\":{\"2677\":2}}],[\"beancreationfailureexception\",{\"1\":{\"1366\":1}}],[\"beanclass\",{\"1\":{\"1366\":3}}],[\"beanconfigparser\",{\"1\":{\"1356\":4,\"1357\":2,\"1359\":1,\"1360\":2}}],[\"bean\",{\"1\":{\"1366\":8,\"1776\":1}}],[\"beandefinitionlist\",{\"1\":{\"1366\":3}}],[\"beandefinition>\",{\"1\":{\"1366\":1}}],[\"beandefinition\",{\"1\":{\"1357\":2,\"1359\":1,\"1360\":1,\"1362\":1,\"1366\":25}}],[\"beandefinitions\",{\"1\":{\"1356\":2,\"1360\":2,\"1366\":4}}],[\"beanid\",{\"1\":{\"1356\":3,\"1366\":3}}],[\"bean>\",{\"1\":{\"1338\":2,\"1351\":2}}],[\"beansfactory\",{\"1\":{\"1340\":1,\"1341\":2,\"1344\":1,\"1356\":6,\"1357\":2,\"1359\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1365\":1,\"1366\":1}}],[\"beans>\",{\"1\":{\"1338\":1,\"1351\":1}}],[\"beans\",{\"1\":{\"1337\":1,\"1350\":1,\"1353\":1,\"3432\":1}}],[\"bertrand\",{\"1\":{\"2127\":1}}],[\"belonging\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"belong\",{\"1\":{\"350\":1}}],[\"below\",{\"1\":{\"246\":1,\"249\":1,\"252\":1,\"258\":1,\"304\":1,\"314\":1,\"321\":1,\"333\":1,\"350\":1,\"358\":1,\"360\":1,\"364\":1,\"368\":1,\"384\":1,\"386\":1}}],[\"beginners\",{\"1\":{\"343\":1}}],[\"be\",{\"1\":{\"214\":1,\"266\":1,\"270\":1,\"271\":1,\"311\":1,\"329\":1,\"332\":1,\"339\":1,\"346\":5,\"350\":1,\"368\":1,\"375\":1,\"385\":1,\"391\":1,\"2001\":1,\"2127\":1,\"3100\":1,\"4368\":6,\"5271\":3,\"5356\":1,\"5376\":1,\"5382\":1,\"5486\":1,\"5491\":2,\"5497\":1,\"5524\":1,\"5525\":1,\"5527\":2,\"5528\":2,\"5529\":1,\"5530\":1,\"6065\":1,\"6076\":2,\"6083\":1,\"6086\":2,\"6096\":2,\"6111\":2,\"6114\":2,\"6118\":1,\"6201\":6,\"6258\":1,\"6834\":1,\"6967\":1,\"6969\":1}}],[\"better\",{\"0\":{\"6743\":1}}],[\"between\",{\"0\":{\"213\":1,\"383\":1},\"1\":{\"385\":2,\"5277\":1,\"5278\":1,\"5565\":1,\"5576\":1,\"6252\":1,\"6271\":1}}],[\"beta\",{\"1\":{\"4\":1}}],[\"b\",{\"0\":{\"5600\":4,\"5606\":2,\"5645\":1,\"5647\":1},\"1\":{\"208\":1,\"219\":1,\"222\":1,\"237\":1,\"240\":1,\"243\":1,\"247\":1,\"250\":1,\"253\":1,\"256\":2,\"259\":2,\"263\":2,\"267\":1,\"268\":4,\"272\":4,\"326\":1,\"336\":3,\"341\":2,\"344\":2,\"347\":2,\"365\":1,\"372\":1,\"380\":4,\"387\":2,\"443\":2,\"1406\":5,\"1478\":2,\"1487\":2,\"1489\":3,\"2037\":2,\"2050\":1,\"2052\":7,\"2053\":2,\"2058\":8,\"2109\":3,\"2118\":12,\"2120\":1,\"2124\":17,\"2164\":1,\"2165\":6,\"2167\":3,\"2202\":1,\"2205\":1,\"2208\":1,\"2376\":2,\"2395\":2,\"2438\":2,\"2512\":1,\"2745\":1,\"2764\":1,\"2901\":1,\"2953\":2,\"3006\":1,\"3016\":1,\"3045\":1,\"3049\":3,\"3051\":2,\"3053\":3,\"3065\":1,\"3166\":2,\"3189\":2,\"3224\":2,\"3254\":1,\"3311\":1,\"3372\":3,\"3376\":1,\"3952\":1,\"4073\":1,\"4108\":1,\"4368\":1,\"4372\":2,\"4507\":1,\"5001\":12,\"5003\":4,\"5035\":4,\"5112\":1,\"5334\":2,\"5336\":2,\"5353\":1,\"5455\":1,\"5457\":1,\"5460\":1,\"5491\":2,\"5581\":1,\"5608\":4,\"5609\":1,\"5646\":3,\"5800\":1,\"5801\":1,\"5802\":1,\"5803\":2,\"6118\":2}}],[\"boudreau\",{\"1\":{\"6720\":1}}],[\"bouncy\",{\"1\":{\"6599\":1}}],[\"borges\",{\"1\":{\"6703\":1}}],[\"border\",{\"1\":{\"353\":1,\"3311\":1}}],[\"boot\",{\"1\":{\"6674\":1,\"6858\":1}}],[\"boot与angularjs应用程序的yeoman源代码生成器\",{\"1\":{\"6375\":1}}],[\"bootstrapping\",{\"1\":{\"6099\":1}}],[\"books\",{\"0\":{\"7000\":1},\"1\":{\"6791\":1}}],[\"book\",{\"1\":{\"5588\":1,\"6951\":4}}],[\"booleanvalue\",{\"1\":{\"6118\":1,\"6201\":2}}],[\"boolean命名不需要加is前缀\",{\"1\":{\"3241\":1}}],[\"boolean\",{\"1\":{\"435\":1,\"438\":1,\"441\":2,\"443\":2,\"912\":1,\"1360\":3,\"1525\":2,\"1537\":2,\"2454\":5,\"2677\":2,\"3172\":1,\"3189\":1,\"3197\":1,\"3201\":1,\"3468\":1,\"4345\":1,\"4347\":1,\"4405\":1,\"4407\":2,\"4625\":1,\"4690\":1,\"5253\":1,\"5275\":1,\"5416\":1,\"5440\":1,\"5978\":1,\"5991\":1,\"6015\":1,\"6042\":1,\"6063\":2,\"6076\":1,\"6083\":1,\"6096\":1,\"6099\":2,\"6118\":4,\"6201\":2,\"6258\":4,\"6840\":1}}],[\"both\",{\"1\":{\"4368\":1}}],[\"bottom\",{\"1\":{\"165\":1,\"169\":1,\"170\":1,\"171\":1}}],[\"body里带参数时必须设置content\",{\"1\":{\"3224\":1}}],[\"body>\",{\"1\":{\"344\":1}}],[\"bo\",{\"1\":{\"2989\":1,\"3006\":1,\"3422\":1,\"3534\":1,\"3538\":1}}],[\"bos\",{\"1\":{\"1795\":5}}],[\"boss\",{\"1\":{\"1638\":2}}],[\"box<t>\",{\"1\":{\"5539\":1}}],[\"boxing\",{\"1\":{\"4531\":1,\"4533\":1,\"6118\":3}}],[\"box\",{\"1\":{\"177\":1,\"178\":1,\"180\":1,\"181\":1,\"189\":1,\"190\":1,\"193\":1,\"194\":1,\"196\":1,\"197\":1,\"199\":1,\"200\":1,\"202\":1,\"203\":1,\"305\":1,\"306\":1,\"1192\":1}}],[\"btest\",{\"1\":{\"4316\":1,\"4400\":1}}],[\"bt\",{\"1\":{\"171\":1,\"326\":1}}],[\"o等\",{\"1\":{\"6651\":1}}],[\"odd\",{\"1\":{\"6201\":1}}],[\"oveerride只不过是假象\",{\"1\":{\"5170\":1}}],[\"overops\",{\"1\":{\"6524\":1}}],[\"overhead\",{\"1\":{\"5528\":1}}],[\"overload\",{\"1\":{\"5411\":1}}],[\"override标签中也可以看到\",{\"1\":{\"5154\":1}}],[\"override可以准确判断是否覆盖成功\",{\"1\":{\"3041\":1}}],[\"override注解\",{\"1\":{\"3041\":1}}],[\"override\",{\"0\":{\"4225\":1,\"4513\":1},\"1\":{\"520\":1,\"540\":1,\"553\":4,\"555\":1,\"557\":6,\"561\":1,\"566\":1,\"622\":6,\"695\":3,\"709\":6,\"777\":10,\"852\":5,\"854\":5,\"856\":3,\"924\":1,\"926\":2,\"1197\":2,\"1246\":4,\"1250\":2,\"1304\":8,\"1306\":8,\"1308\":4,\"1356\":1,\"1360\":2,\"1427\":1,\"1487\":2,\"1535\":6,\"1537\":4,\"1601\":3,\"1603\":4,\"1718\":3,\"1761\":1,\"1772\":2,\"1793\":1,\"1795\":1,\"1842\":2,\"1869\":2,\"1871\":1,\"1903\":2,\"1972\":4,\"2089\":3,\"2152\":4,\"2454\":12,\"2467\":22,\"2471\":9,\"2521\":3,\"2526\":1,\"2535\":3,\"2539\":3,\"2677\":4,\"2725\":1,\"2736\":5,\"2739\":3,\"2748\":1,\"2960\":6,\"2962\":2,\"3120\":1,\"3157\":1,\"3161\":1,\"4016\":1,\"4102\":1,\"4136\":1,\"4139\":1,\"4141\":1,\"4226\":1,\"4227\":1,\"4501\":1,\"4507\":1,\"4508\":1,\"4509\":1,\"4515\":1,\"4644\":3,\"4682\":2,\"5151\":2,\"5158\":2,\"5376\":1,\"5382\":1,\"5402\":1,\"5405\":1,\"5410\":1,\"5440\":1,\"5448\":1,\"5457\":1,\"5460\":1,\"5463\":1,\"5466\":1,\"5853\":1,\"5914\":1,\"6086\":1,\"6107\":1,\"6151\":1,\"6153\":1}}],[\"overboard\",{\"1\":{\"255\":1}}],[\"occur\",{\"1\":{\"6201\":1}}],[\"occurred\",{\"1\":{\"6201\":3}}],[\"occurs\",{\"1\":{\"4972\":1}}],[\"oceanbase等进行数据交互\",{\"1\":{\"3415\":1}}],[\"ocp\",{\"0\":{\"2125\":1},\"1\":{\"571\":1,\"877\":1,\"1212\":3,\"1215\":1,\"1251\":1,\"1708\":1,\"1721\":1,\"1806\":1,\"2127\":1,\"2144\":1,\"2147\":1,\"2149\":1,\"2152\":1}}],[\"omg\",{\"1\":{\"2807\":1}}],[\"oss\",{\"1\":{\"3742\":1}}],[\"os\",{\"1\":{\"2797\":1,\"2953\":5,\"6405\":1}}],[\"ostrich\",{\"1\":{\"2726\":1,\"2736\":1,\"2739\":1}}],[\"o2\",{\"1\":{\"2104\":2,\"2546\":3,\"3120\":2}}],[\"o1\",{\"1\":{\"2104\":2,\"2546\":3,\"3120\":2}}],[\"oauth2\",{\"1\":{\"6603\":1}}],[\"oa\",{\"0\":{\"1954\":1},\"1\":{\"5193\":2,\"5194\":1,\"5196\":2}}],[\"ois\",{\"1\":{\"1795\":4}}],[\"observable\",{\"1\":{\"1723\":1,\"1725\":1,\"1726\":1,\"1728\":2,\"6573\":1}}],[\"observerpattern\",{\"1\":{\"1686\":1}}],[\"observers\",{\"1\":{\"1686\":4,\"1718\":7}}],[\"observer\",{\"1\":{\"1074\":1,\"1668\":1,\"1681\":1,\"1682\":1,\"1686\":12,\"1716\":3,\"1718\":4,\"1721\":1,\"1726\":1,\"1727\":2,\"1728\":1,\"2625\":1}}],[\"obs2\",{\"1\":{\"1686\":2}}],[\"obs1\",{\"1\":{\"1686\":2}}],[\"obs\",{\"1\":{\"1686\":2}}],[\"ob\",{\"1\":{\"1525\":4,\"1586\":3}}],[\"obj5\",{\"1\":{\"4360\":2}}],[\"obj4\",{\"1\":{\"4360\":3}}],[\"obj3\",{\"1\":{\"1114\":2,\"4360\":2}}],[\"obj2\",{\"1\":{\"1114\":2,\"4360\":3,\"5733\":1}}],[\"obj1\",{\"1\":{\"1114\":2,\"4360\":3,\"5733\":1}}],[\"obj\",{\"1\":{\"832\":2,\"834\":2,\"926\":13,\"1525\":11,\"3193\":1,\"3265\":2,\"4053\":1,\"4851\":1,\"4853\":1,\"5190\":2,\"5416\":1,\"5965\":2,\"5970\":1,\"5973\":1,\"6017\":1,\"6020\":1,\"6025\":1,\"6107\":3,\"6111\":5,\"6112\":1,\"6114\":2}}],[\"objective\",{\"1\":{\"6541\":1}}],[\"objectid\",{\"1\":{\"6201\":1}}],[\"objectinputstream\",{\"1\":{\"1795\":2}}],[\"object有哪些公用方法\",{\"0\":{\"5678\":1}}],[\"object泛型\",{\"1\":{\"5114\":1}}],[\"objectthreadlocal\",{\"1\":{\"3164\":2}}],[\"object的equals方法容易抛空指针异常\",{\"1\":{\"3045\":1}}],[\"object$\",{\"1\":{\"2986\":1}}],[\"objectstructure\",{\"1\":{\"2953\":3,\"2964\":1,\"2966\":9}}],[\"objects\",{\"1\":{\"1903\":1,\"2103\":2,\"3045\":1,\"5523\":1,\"5825\":1,\"6076\":1,\"6083\":4,\"6086\":1,\"6096\":1,\"6258\":1}}],[\"objectoutputstream\",{\"1\":{\"1795\":2}}],[\"object>\",{\"1\":{\"1366\":1,\"3091\":1,\"3398\":1,\"4053\":1}}],[\"object\",{\"0\":{\"5414\":1,\"5602\":1,\"5624\":1,\"6813\":1},\"1\":{\"391\":1,\"832\":1,\"834\":1,\"1356\":2,\"1360\":1,\"1366\":5,\"1525\":12,\"1537\":2,\"1686\":1,\"1768\":2,\"1772\":1,\"1793\":1,\"1795\":3,\"1856\":1,\"1871\":9,\"1903\":11,\"2127\":1,\"2895\":2,\"2949\":1,\"3045\":2,\"3113\":1,\"3420\":1,\"3421\":1,\"3422\":1,\"3424\":1,\"3534\":1,\"3535\":1,\"3536\":1,\"3537\":1,\"3538\":1,\"3540\":1,\"3543\":1,\"3545\":1,\"4053\":1,\"4081\":1,\"4082\":1,\"4238\":1,\"4344\":1,\"4349\":2,\"4351\":2,\"4353\":2,\"4355\":2,\"4358\":1,\"4368\":6,\"4407\":1,\"4468\":1,\"4469\":2,\"4470\":2,\"4471\":1,\"4472\":1,\"4473\":6,\"4474\":1,\"4475\":2,\"4476\":1,\"4600\":1,\"4693\":2,\"4981\":1,\"5044\":1,\"5093\":1,\"5101\":3,\"5112\":1,\"5133\":2,\"5139\":2,\"5156\":3,\"5160\":1,\"5169\":4,\"5176\":1,\"5189\":2,\"5193\":3,\"5196\":3,\"5416\":2,\"5438\":1,\"5440\":1,\"5454\":1,\"5455\":1,\"5459\":1,\"5460\":1,\"5568\":1,\"5603\":1,\"5862\":1,\"5934\":1,\"5965\":3,\"5970\":2,\"5972\":1,\"5973\":1,\"6015\":10,\"6017\":2,\"6020\":2,\"6024\":1,\"6025\":2,\"6054\":1,\"6063\":4,\"6065\":1,\"6083\":2,\"6086\":6,\"6107\":3,\"6111\":9,\"6114\":3,\"6118\":7,\"6548\":1,\"6751\":1,\"6864\":1}}],[\"oom\",{\"1\":{\"3547\":1}}],[\"oom的发生是有概率的\",{\"1\":{\"3445\":1}}],[\"ooa\",{\"1\":{\"2596\":1}}],[\"oop规约\",{\"0\":{\"3039\":1}}],[\"oop\",{\"0\":{\"2351\":1},\"1\":{\"2352\":1,\"2354\":1,\"2382\":1,\"3543\":1,\"5673\":1,\"5749\":1}}],[\"oopsla\",{\"1\":{\"2103\":1}}],[\"oos\",{\"1\":{\"1795\":4}}],[\"oo\",{\"0\":{\"2097\":1},\"1\":{\"899\":1,\"2578\":1}}],[\"outside\",{\"1\":{\"6076\":1,\"6096\":1}}],[\"outstate\",{\"1\":{\"1406\":2}}],[\"outerclass\",{\"1\":{\"5497\":6}}],[\"outofmemoryerror\",{\"1\":{\"3547\":1,\"4717\":1,\"4906\":1}}],[\"out来进行人肉验证\",{\"1\":{\"3303\":1}}],[\"out或system\",{\"1\":{\"3291\":1}}],[\"output\",{\"1\":{\"5916\":1,\"6118\":1,\"6201\":1}}],[\"outputimpl\",{\"1\":{\"1539\":2,\"1541\":4}}],[\"outputstream\",{\"1\":{\"943\":1}}],[\"output220v\",{\"1\":{\"520\":2,\"540\":2}}],[\"output5v\",{\"1\":{\"520\":2,\"522\":2,\"540\":2,\"542\":2}}],[\"out\",{\"1\":{\"401\":1,\"406\":1,\"408\":1,\"435\":2,\"450\":2,\"453\":2,\"466\":1,\"469\":1,\"473\":2,\"520\":1,\"522\":3,\"540\":3,\"542\":3,\"566\":1,\"605\":2,\"622\":6,\"624\":6,\"626\":3,\"695\":3,\"709\":6,\"713\":2,\"766\":3,\"779\":4,\"783\":7,\"832\":1,\"834\":1,\"852\":1,\"854\":1,\"856\":1,\"894\":4,\"928\":13,\"1114\":3,\"1134\":19,\"1197\":2,\"1199\":2,\"1212\":2,\"1214\":1,\"1246\":4,\"1250\":4,\"1304\":8,\"1306\":8,\"1310\":2,\"1313\":6,\"1336\":1,\"1406\":4,\"1427\":1,\"1431\":1,\"1436\":6,\"1491\":3,\"1525\":3,\"1539\":2,\"1586\":5,\"1603\":6,\"1636\":3,\"1653\":1,\"1655\":4,\"1686\":4,\"1702\":3,\"1704\":1,\"1716\":7,\"1720\":3,\"1763\":5,\"1772\":1,\"1774\":5,\"1795\":1,\"1797\":4,\"1842\":3,\"1869\":2,\"1871\":2,\"1873\":1,\"1901\":1,\"1903\":4,\"1905\":1,\"1953\":4,\"1972\":4,\"2016\":1,\"2020\":3,\"2025\":3,\"2052\":10,\"2058\":6,\"2078\":1,\"2082\":1,\"2089\":3,\"2118\":6,\"2124\":7,\"2144\":2,\"2149\":3,\"2152\":4,\"2188\":4,\"2194\":5,\"2286\":3,\"2293\":3,\"2298\":4,\"2304\":4,\"2310\":4,\"2313\":4,\"2320\":4,\"2328\":4,\"2438\":2,\"2454\":14,\"2456\":1,\"2471\":1,\"2473\":3,\"2512\":3,\"2521\":6,\"2526\":4,\"2535\":3,\"2539\":7,\"2541\":1,\"2546\":2,\"2663\":3,\"2677\":5,\"2679\":3,\"2953\":5,\"2960\":6,\"2966\":2,\"3025\":3,\"3051\":1,\"3053\":1,\"3065\":1,\"3091\":1,\"3157\":1,\"3186\":3,\"3195\":4,\"3248\":1,\"3547\":1,\"4333\":6,\"4337\":1,\"4372\":2,\"4378\":1,\"4380\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4419\":3,\"4614\":1,\"4644\":1,\"4647\":2,\"4679\":2,\"4682\":1,\"4746\":1,\"4781\":3,\"4961\":1,\"4963\":3,\"4969\":3,\"4976\":1,\"4978\":3,\"4981\":3,\"5001\":3,\"5003\":1,\"5015\":1,\"5017\":2,\"5020\":1,\"5044\":1,\"5055\":1,\"5062\":2,\"5090\":1,\"5093\":1,\"5234\":1,\"5267\":2,\"5273\":1,\"5282\":1,\"5311\":2,\"5313\":1,\"5334\":6,\"5336\":1,\"5353\":2,\"5355\":2,\"5376\":2,\"5382\":3,\"5402\":2,\"5434\":2,\"5445\":2,\"5451\":1,\"5463\":1,\"5466\":1,\"5469\":1,\"5494\":1,\"5504\":2,\"5506\":1,\"5761\":2,\"5776\":3,\"5883\":9,\"5888\":9,\"5914\":11,\"5940\":10,\"5962\":5,\"5964\":2,\"6013\":8,\"6017\":1,\"6054\":1,\"6151\":1,\"6153\":1}}],[\"oldreflectiondata\",{\"1\":{\"6076\":5}}],[\"oldmethod\",{\"1\":{\"4507\":1,\"4644\":2,\"4649\":2}}],[\"old\",{\"1\":{\"384\":1,\"385\":1,\"386\":1,\"4644\":3,\"4649\":2,\"6201\":1}}],[\"optaplanner\",{\"1\":{\"6324\":1}}],[\"option\",{\"1\":{\"6923\":1}}],[\"options\",{\"1\":{\"6541\":1}}],[\"optionalcall\",{\"1\":{\"6962\":1}}],[\"optional<foowidget>\",{\"1\":{\"6829\":1}}],[\"optional<bar>\",{\"1\":{\"6827\":3}}],[\"optionally\",{\"1\":{\"6470\":1}}],[\"optional\",{\"1\":{\"384\":1,\"385\":1,\"6118\":1,\"6826\":2,\"6827\":1,\"6828\":1,\"6830\":2}}],[\"optimizations\",{\"1\":{\"5528\":1,\"5825\":1}}],[\"operlog\",{\"1\":{\"4693\":26}}],[\"operations\",{\"1\":{\"4533\":1,\"4536\":1,\"4578\":1,\"5528\":1,\"5530\":1,\"5554\":1}}],[\"operationb\",{\"1\":{\"2953\":3}}],[\"operationa\",{\"1\":{\"2953\":3}}],[\"operation5\",{\"1\":{\"2052\":6,\"2058\":4}}],[\"operation4\",{\"1\":{\"2052\":6,\"2058\":4}}],[\"operation3\",{\"1\":{\"2052\":6,\"2058\":4}}],[\"operation2\",{\"1\":{\"2052\":6,\"2058\":4}}],[\"operation1\",{\"1\":{\"2052\":7,\"2058\":7}}],[\"operation\",{\"1\":{\"605\":3,\"832\":5,\"834\":5,\"894\":9,\"1400\":1,\"1406\":7,\"1476\":1,\"5527\":1}}],[\"operationimpl\",{\"1\":{\"605\":3}}],[\"operators\",{\"1\":{\"5350\":1}}],[\"operatortype\",{\"1\":{\"4690\":3,\"4693\":1}}],[\"operator\",{\"1\":{\"364\":1}}],[\"openjpa\",{\"1\":{\"6552\":1}}],[\"openjdk官方账号\",{\"1\":{\"6716\":1}}],[\"openjdk\",{\"1\":{\"6466\":1,\"6716\":1}}],[\"opennlp\",{\"1\":{\"6530\":1}}],[\"openrefine\",{\"1\":{\"6514\":1}}],[\"openfire安装和使用都非常简单\",{\"1\":{\"6505\":1}}],[\"openfire\",{\"1\":{\"6505\":1}}],[\"openstream\",{\"1\":{\"6258\":1}}],[\"openandclose\",{\"1\":{\"2089\":3}}],[\"openandclose3\",{\"1\":{\"2089\":3}}],[\"openandclose2\",{\"1\":{\"2089\":6}}],[\"openandclose1\",{\"1\":{\"2089\":5}}],[\"opened\",{\"1\":{\"329\":1,\"340\":1}}],[\"open\",{\"0\":{\"218\":1},\"1\":{\"341\":2,\"622\":3,\"624\":6,\"626\":4,\"2089\":9,\"2127\":2,\"2128\":1,\"3197\":1,\"3444\":1}}],[\"owner\",{\"1\":{\"6319\":1}}],[\"own\",{\"1\":{\"346\":1,\"6201\":1}}],[\"otherwise\",{\"1\":{\"6109\":1}}],[\"othercondition\",{\"1\":{\"4016\":1}}],[\"othergraphic\",{\"1\":{\"2152\":3}}],[\"other\",{\"1\":{\"270\":1,\"350\":1,\"1315\":1,\"3179\":1,\"4690\":1,\"6201\":2,\"6967\":1,\"6969\":1}}],[\"others\",{\"0\":{\"7024\":1},\"1\":{\"266\":1}}],[\"okhttp\",{\"1\":{\"6539\":1}}],[\"okay\",{\"1\":{\"4152\":1}}],[\"ok~\",{\"1\":{\"2328\":1}}],[\"okrethinkend\",{\"1\":{\"269\":1,\"273\":1}}],[\"ok\",{\"1\":{\"268\":1,\"272\":1,\"1603\":1,\"1912\":1,\"2082\":1,\"3025\":1,\"3226\":1,\"3557\":1,\"4231\":1,\"4976\":1,\"4978\":1,\"5038\":1,\"5059\":3,\"5196\":2,\"5200\":3,\"5608\":1}}],[\"o\",{\"1\":{\"259\":1,\"263\":2,\"943\":1,\"1718\":7,\"1903\":1,\"5112\":1,\"5193\":2,\"5196\":2,\"5440\":5,\"5790\":3,\"6742\":1}}],[\"onjava\",{\"1\":{\"6742\":1}}],[\"ontology\",{\"1\":{\"6655\":1}}],[\"onbuttonwaspushed\",{\"1\":{\"781\":1,\"783\":2}}],[\"oncommand\",{\"1\":{\"781\":2}}],[\"oncommands\",{\"1\":{\"781\":6}}],[\"onanimationresume\",{\"1\":{\"557\":1}}],[\"onanimationrepeat\",{\"1\":{\"553\":1,\"557\":1,\"559\":1}}],[\"onanimationpause\",{\"1\":{\"557\":1}}],[\"onanimationcancel\",{\"1\":{\"553\":1,\"557\":1,\"559\":1}}],[\"onanimationend\",{\"1\":{\"553\":1,\"557\":1,\"559\":1}}],[\"onanimationstart\",{\"1\":{\"553\":1,\"554\":1,\"555\":1,\"557\":1,\"559\":1,\"561\":1}}],[\"oneof\",{\"1\":{\"6962\":1}}],[\"oneresult\",{\"1\":{\"388\":1}}],[\"onea2a1c1\",{\"1\":{\"319\":1}}],[\"one\",{\"1\":{\"252\":1,\"255\":1,\"271\":1,\"315\":1,\"318\":1,\"322\":2,\"362\":1,\"387\":1,\"450\":1,\"453\":1,\"455\":1,\"1953\":1,\"2001\":1,\"3037\":1,\"4368\":2,\"5210\":2,\"5213\":1,\"6083\":1,\"6109\":2,\"6201\":4}}],[\"on\",{\"0\":{\"221\":1},\"1\":{\"266\":2,\"271\":1,\"332\":1,\"346\":1,\"777\":4,\"779\":2,\"1134\":10,\"1136\":4,\"4179\":1,\"4217\":1,\"5525\":2,\"5578\":1,\"6065\":2,\"6083\":1,\"6201\":2,\"6738\":1,\"6740\":1,\"6872\":2,\"6951\":1}}],[\"only\",{\"1\":{\"191\":1,\"382\":1,\"5825\":1,\"6083\":1,\"6118\":2,\"6201\":1}}],[\"orelse\",{\"1\":{\"6829\":1}}],[\"orbit\",{\"1\":{\"6388\":1}}],[\"orm框架\",{\"1\":{\"6551\":1}}],[\"ormlite\",{\"1\":{\"6549\":1}}],[\"orm\",{\"0\":{\"6543\":1},\"1\":{\"3545\":1,\"6949\":1}}],[\"orm映射\",{\"0\":{\"3393\":1}}],[\"ordinal\",{\"1\":{\"4693\":4}}],[\"ordinary\",{\"1\":{\"3534\":1,\"3935\":1}}],[\"orderid\",{\"1\":{\"3229\":1}}],[\"orderidgenerator\",{\"1\":{\"2355\":1}}],[\"orderlist\",{\"1\":{\"3227\":1}}],[\"orderfactory\",{\"1\":{\"3002\":1}}],[\"orderfailureevent\",{\"1\":{\"2465\":1,\"2467\":1,\"2471\":2}}],[\"ordertype\",{\"1\":{\"1212\":6,\"1248\":3,\"1250\":6}}],[\"orderpizzafactory\",{\"1\":{\"1248\":1,\"1250\":2,\"1251\":1}}],[\"orderpizza\",{\"1\":{\"1198\":1,\"1199\":1,\"1213\":1,\"1214\":1,\"1248\":1}}],[\"order2\",{\"1\":{\"928\":11}}],[\"order\",{\"1\":{\"304\":1,\"350\":1,\"928\":24,\"2353\":1,\"2355\":1,\"2411\":1,\"3152\":1,\"3372\":3,\"3967\":1,\"4419\":1,\"6063\":1}}],[\"org\",{\"1\":{\"3281\":2,\"3283\":2,\"4324\":4,\"4326\":2,\"4333\":1,\"4337\":2,\"4360\":2,\"4368\":4,\"4372\":1,\"4374\":16,\"4378\":1,\"4380\":7,\"4383\":3,\"4387\":1,\"4390\":1,\"4407\":6,\"4411\":1,\"4413\":1,\"4415\":2,\"4419\":3,\"6201\":4,\"6206\":1}}],[\"organizationcomponents\",{\"1\":{\"852\":5,\"854\":5}}],[\"organizationcomponent\",{\"1\":{\"850\":6,\"852\":10,\"854\":10,\"856\":1,\"858\":3}}],[\"original\",{\"1\":{\"5469\":4}}],[\"originator\",{\"1\":{\"1630\":1,\"1636\":3}}],[\"orientations\",{\"1\":{\"168\":1}}],[\"orientation\",{\"0\":{\"167\":1},\"1\":{\"266\":1}}],[\"oriented\",{\"1\":{\"165\":1,\"166\":1,\"2127\":1,\"3543\":1,\"6415\":1}}],[\"oracle首席架构师\",{\"1\":{\"6714\":1}}],[\"oracle技术团队顾问\",{\"1\":{\"6704\":1}}],[\"oracle产品经理\",{\"1\":{\"6703\":1}}],[\"oracle\",{\"1\":{\"628\":1,\"3415\":1,\"5198\":2,\"5241\":1}}],[\"or\",{\"0\":{\"5577\":1},\"1\":{\"165\":1,\"214\":1,\"224\":1,\"230\":1,\"266\":1,\"274\":2,\"329\":1,\"350\":1,\"353\":1,\"391\":2,\"1315\":1,\"1636\":8,\"4152\":1,\"4368\":1,\"4566\":1,\"4771\":1,\"5337\":1,\"5355\":1,\"6076\":2,\"6118\":5,\"6201\":4}}],[\"offbuttonwaspushed\",{\"1\":{\"781\":1,\"783\":2}}],[\"offcommand\",{\"1\":{\"781\":2}}],[\"offcommands\",{\"1\":{\"781\":6}}],[\"off\",{\"1\":{\"777\":4,\"779\":2,\"1134\":8,\"1136\":4,\"7009\":1}}],[\"oflnt\",{\"1\":{\"553\":1,\"555\":1}}],[\"of\",{\"0\":{\"185\":1,\"245\":1,\"265\":1,\"6838\":1},\"1\":{\"164\":1,\"214\":1,\"255\":1,\"258\":1,\"266\":1,\"270\":1,\"271\":2,\"331\":1,\"332\":1,\"333\":1,\"335\":1,\"346\":1,\"350\":3,\"357\":1,\"360\":1,\"362\":1,\"364\":1,\"382\":1,\"384\":1,\"385\":1,\"386\":2,\"390\":1,\"1039\":1,\"1313\":2,\"1929\":1,\"2631\":1,\"3083\":1,\"3547\":1,\"4179\":4,\"4244\":1,\"4246\":1,\"4566\":1,\"5196\":1,\"5489\":1,\"5522\":1,\"5523\":2,\"5524\":2,\"5525\":2,\"5526\":1,\"5528\":1,\"5530\":3,\"5579\":1,\"5825\":1,\"6076\":1,\"6081\":1,\"6083\":5,\"6086\":1,\"6096\":1,\"6111\":1,\"6114\":1,\"6118\":5,\"6180\":1,\"6201\":12,\"6698\":1,\"6756\":1,\"6904\":1,\"6927\":3,\"6962\":1}}],[\"fst\",{\"1\":{\"6608\":1}}],[\"f2\",{\"1\":{\"5962\":3}}],[\"fw\",{\"1\":{\"2987\":1}}],[\"fetch\",{\"1\":{\"6951\":1}}],[\"featuring\",{\"1\":{\"6640\":1}}],[\"features\",{\"0\":{\"6892\":1},\"1\":{\"5523\":1,\"6768\":1}}],[\"feature\",{\"1\":{\"385\":1}}],[\"february\",{\"1\":{\"3087\":1}}],[\"feign\",{\"1\":{\"2748\":1,\"6577\":1}}],[\"feignclient\",{\"1\":{\"2747\":1,\"2748\":6}}],[\"feed\",{\"1\":{\"2467\":1,\"2469\":2}}],[\"feedbackstate\",{\"1\":{\"2467\":5}}],[\"feedbackevent\",{\"1\":{\"2465\":1,\"2467\":3,\"2471\":2}}],[\"f12\",{\"1\":{\"1406\":2}}],[\"f11\",{\"1\":{\"1406\":2}}],[\"f03\",{\"1\":{\"1406\":2}}],[\"f02\",{\"1\":{\"1406\":2}}],[\"f01\",{\"1\":{\"1406\":2}}],[\"f\",{\"1\":{\"1114\":2,\"3952\":1,\"5112\":1,\"5340\":1,\"5342\":1,\"5883\":4,\"5962\":6,\"6118\":2,\"6996\":1}}],[\"flink\",{\"1\":{\"6485\":1}}],[\"flask\",{\"1\":{\"6944\":1}}],[\"flash\",{\"1\":{\"2802\":2}}],[\"flatmap\",{\"1\":{\"6829\":2}}],[\"flatbuffers\",{\"1\":{\"6606\":1}}],[\"flags\",{\"1\":{\"4600\":4,\"6118\":1}}],[\"flag\",{\"1\":{\"3025\":3,\"3189\":2,\"5991\":1}}],[\"flyingsaucer\",{\"1\":{\"6558\":1}}],[\"flyway\",{\"1\":{\"6343\":1}}],[\"flyweightpattern\",{\"1\":{\"1406\":1}}],[\"flyweights\",{\"1\":{\"1406\":3}}],[\"flyweight>\",{\"1\":{\"1406\":2}}],[\"flyweightfactory\",{\"1\":{\"1402\":1,\"1406\":3}}],[\"flyweight\",{\"1\":{\"1000\":1,\"1374\":1,\"1393\":1,\"1394\":1,\"1395\":1,\"1396\":1,\"1400\":1,\"1406\":15,\"1436\":1,\"2617\":1}}],[\"flysqrlboy\",{\"1\":{\"4491\":1}}],[\"flyability\",{\"1\":{\"2738\":1,\"2739\":1}}],[\"flyable\",{\"1\":{\"2735\":1,\"2736\":2,\"2739\":2}}],[\"flybehavor\",{\"1\":{\"2539\":1}}],[\"flybehavior\",{\"1\":{\"2535\":4,\"2539\":11}}],[\"fly\",{\"1\":{\"2521\":3,\"2523\":1,\"2524\":1,\"2526\":1,\"2535\":4,\"2539\":2,\"2541\":4,\"2725\":3,\"2726\":3,\"2727\":1,\"2736\":2,\"2738\":1,\"2739\":2,\"5786\":2}}],[\"floatvalue\",{\"1\":{\"6118\":1}}],[\"float和double都存在精度损失的问题\",{\"1\":{\"3356\":1}}],[\"float\",{\"0\":{\"5338\":1},\"1\":{\"922\":4,\"924\":1,\"926\":1,\"1702\":15,\"1716\":15,\"1718\":9,\"1974\":3,\"3014\":1,\"3037\":1,\"3049\":6,\"3051\":3,\"5001\":3,\"5258\":1,\"5339\":1,\"5340\":1,\"5341\":1,\"5342\":1,\"5824\":1,\"6118\":1}}],[\"flow\",{\"1\":{\"346\":2,\"350\":1}}],[\"flowchartconfig\",{\"1\":{\"391\":2}}],[\"flowcharts\",{\"0\":{\"320\":1},\"1\":{\"325\":1}}],[\"flowchart\",{\"0\":{\"167\":1},\"1\":{\"164\":1,\"165\":1,\"166\":1,\"168\":1,\"177\":1,\"180\":1,\"183\":1,\"186\":1,\"189\":1,\"193\":1,\"196\":1,\"199\":1,\"202\":1,\"205\":1,\"208\":1,\"211\":1,\"216\":1,\"219\":1,\"222\":1,\"225\":1,\"228\":1,\"231\":1,\"234\":1,\"237\":1,\"240\":1,\"243\":1,\"247\":1,\"250\":1,\"253\":1,\"255\":1,\"256\":1,\"259\":1,\"263\":1,\"266\":2,\"268\":1,\"272\":1,\"305\":1,\"309\":1,\"315\":1,\"318\":1,\"321\":2,\"322\":1,\"326\":1,\"336\":1,\"341\":1,\"344\":2,\"347\":1,\"354\":1,\"365\":1,\"372\":1,\"380\":1,\"387\":1,\"390\":1}}],[\"france\",{\"1\":{\"6701\":1}}],[\"frameworks\",{\"0\":{\"6857\":1},\"1\":{\"6761\":1}}],[\"framework\",{\"0\":{\"6938\":1,\"6983\":1},\"1\":{\"6640\":1,\"6776\":1,\"6787\":1,\"6984\":1}}],[\"frameworkmethod\",{\"1\":{\"4374\":3,\"4380\":3}}],[\"frameworkmethod$1\",{\"1\":{\"4374\":1,\"4380\":1}}],[\"french\",{\"1\":{\"7007\":1}}],[\"frequently\",{\"1\":{\"5528\":1}}],[\"freemarker\",{\"1\":{\"6620\":1}}],[\"freememory\",{\"1\":{\"466\":1,\"469\":1,\"473\":2}}],[\"freeinstance\",{\"1\":{\"2406\":2}}],[\"fridge\",{\"1\":{\"3220\":2}}],[\"friend=\",{\"1\":{\"1774\":4}}],[\"friend\",{\"1\":{\"1772\":1,\"1774\":5}}],[\"frobnicatestring\",{\"1\":{\"6840\":1}}],[\"frob\",{\"1\":{\"4016\":1}}],[\"fromjson\",{\"1\":{\"6910\":1}}],[\"from表\",{\"1\":{\"3374\":2}}],[\"fromuserthreadfactory\",{\"1\":{\"3157\":1}}],[\"from\",{\"1\":{\"165\":1,\"166\":1,\"267\":1,\"321\":1,\"338\":1,\"368\":1,\"378\":1,\"3382\":1,\"3383\":1,\"3388\":1,\"3389\":1,\"4368\":1,\"4575\":1,\"4943\":1,\"4946\":1,\"4963\":1,\"4978\":1,\"5486\":1,\"5491\":2,\"5497\":1,\"5524\":1,\"5608\":1,\"5825\":1,\"6063\":1,\"6076\":1,\"6086\":1,\"6096\":1,\"6111\":1,\"6114\":1,\"6201\":3,\"6951\":1}}],[\"frontmatter\",{\"1\":{\"15\":1,\"38\":1,\"40\":2,\"111\":1,\"134\":1}}],[\"front\",{\"1\":{\"2\":1}}],[\"fix\",{\"1\":{\"6201\":1}}],[\"fixture\",{\"0\":{\"4480\":1},\"1\":{\"4481\":2,\"6964\":2}}],[\"fixmethodorder\",{\"1\":{\"4419\":2}}],[\"fixme\",{\"1\":{\"3222\":1}}],[\"fixedthreadpool和singlethreadpool\",{\"1\":{\"3159\":1}}],[\"firsttest\",{\"1\":{\"4326\":1}}],[\"first\",{\"1\":{\"1520\":1,\"1525\":3,\"2370\":1,\"3029\":2,\"3388\":1,\"3389\":1,\"4419\":1,\"6063\":1,\"6109\":1,\"6201\":3,\"6951\":1}}],[\"fineprint\",{\"1\":{\"5198\":1}}],[\"fine\",{\"1\":{\"4095\":1,\"4231\":1}}],[\"fin\",{\"1\":{\"3443\":1}}],[\"finished\",{\"1\":{\"3248\":1}}],[\"finishcoffee\",{\"1\":{\"1603\":1,\"1605\":1}}],[\"finduser\",{\"1\":{\"6927\":1}}],[\"findbugs\",{\"1\":{\"6308\":1,\"6989\":1,\"6990\":1}}],[\"findbootstrapclassornull\",{\"1\":{\"6063\":1}}],[\"findboyfriend\",{\"1\":{\"3195\":1}}],[\"findclass\",{\"1\":{\"6063\":2}}],[\"findloadedclass0\",{\"1\":{\"6063\":1}}],[\"findloadedclass\",{\"1\":{\"6063\":3}}],[\"find\",{\"1\":{\"1356\":1,\"6063\":1,\"6201\":2}}],[\"final类和方法\",{\"1\":{\"6636\":1}}],[\"final方法等\",{\"1\":{\"6633\":1}}],[\"finalizer\",{\"1\":{\"4239\":1}}],[\"finalizers\",{\"0\":{\"4237\":1}}],[\"finalize\",{\"0\":{\"5659\":1},\"1\":{\"4238\":1,\"5416\":1,\"5661\":2,\"5679\":1}}],[\"final可以声明类\",{\"1\":{\"3074\":1}}],[\"final定义\",{\"1\":{\"3016\":1}}],[\"finally不执行的几种情况\",{\"1\":{\"5713\":1}}],[\"finally不管有没有异常都要处理\",{\"1\":{\"5708\":1}}],[\"finally中最好不要包含return\",{\"1\":{\"5712\":1}}],[\"finally是在return后面的表达式运算后执行的\",{\"1\":{\"5711\":1}}],[\"finally在return返回前执行\",{\"1\":{\"5710\":1}}],[\"finally比return先执行\",{\"1\":{\"5709\":1}}],[\"finally仍然会执行\",{\"1\":{\"5709\":1}}],[\"finally部分的代码如果被调用\",{\"1\":{\"4969\":1}}],[\"finally里面的部分已经被提取到了try部分和catch部分\",{\"1\":{\"4968\":1}}],[\"finally或者try\",{\"1\":{\"4801\":1}}],[\"finally遇见如下情况不会执行\",{\"1\":{\"4787\":1}}],[\"finally可用在不需要捕获异常的代码\",{\"1\":{\"4785\":1}}],[\"finally吗\",{\"1\":{\"4783\":1}}],[\"finally语句块中的代码一定会被执行\",{\"1\":{\"4803\":1}}],[\"finally语句块中发生了异常\",{\"1\":{\"4789\":1}}],[\"finally语句块里的语句还是会被执行\",{\"1\":{\"4777\":1}}],[\"finally语句块总是会被执行\",{\"1\":{\"4738\":1}}],[\"finally块必须对资源对象\",{\"1\":{\"3270\":1}}],[\"finally块进行回收\",{\"1\":{\"3163\":1}}],[\"finally代码块都会执行\",{\"1\":{\"3170\":1}}],[\"finally\",{\"0\":{\"4772\":1,\"4782\":1,\"4858\":1,\"5659\":1},\"1\":{\"1356\":1,\"1795\":1,\"3164\":1,\"3168\":1,\"3170\":1,\"3172\":1,\"3272\":1,\"3520\":1,\"4019\":1,\"4546\":1,\"4548\":1,\"4738\":1,\"4764\":1,\"4765\":1,\"4774\":1,\"4781\":2,\"4786\":2,\"4794\":1,\"4799\":1,\"4801\":1,\"4863\":1,\"4864\":1,\"4865\":1,\"4866\":1,\"4932\":1,\"4959\":1,\"4961\":2,\"4963\":3,\"4969\":3,\"4976\":1,\"5662\":2,\"5703\":1}}],[\"final\",{\"0\":{\"5471\":1,\"5659\":1},\"1\":{\"438\":1,\"441\":1,\"1793\":1,\"1906\":1,\"1907\":1,\"2286\":1,\"2320\":1,\"2335\":1,\"2370\":2,\"2372\":2,\"2376\":4,\"2397\":1,\"2409\":2,\"2411\":1,\"2467\":1,\"2677\":1,\"2683\":1,\"2699\":1,\"2711\":1,\"2997\":2,\"3012\":1,\"3014\":2,\"3016\":2,\"3157\":2,\"3161\":1,\"3197\":1,\"3199\":1,\"3281\":1,\"3283\":1,\"3494\":1,\"3504\":1,\"4133\":1,\"4157\":1,\"4178\":1,\"4179\":12,\"4189\":1,\"4383\":1,\"4405\":1,\"4693\":3,\"4798\":1,\"5271\":3,\"5285\":1,\"5286\":1,\"5287\":2,\"5381\":1,\"5386\":1,\"5416\":6,\"5474\":1,\"5475\":1,\"5476\":3,\"5479\":1,\"5660\":2,\"5695\":1,\"5825\":6,\"6015\":6,\"6063\":1,\"6065\":1,\"6081\":1,\"6111\":1,\"6118\":3,\"6201\":1,\"6219\":1,\"6258\":5,\"6801\":1,\"6808\":2,\"6810\":1,\"6827\":2,\"6829\":2,\"6833\":1,\"6834\":1,\"6835\":1,\"6837\":2,\"6851\":1,\"6853\":1,\"6904\":2,\"6910\":3,\"6936\":1,\"6962\":2,\"6967\":1}}],[\"fieldaccessor\",{\"1\":{\"6118\":1}}],[\"field类还提供了专门针对基本数据类型的方法\",{\"1\":{\"5993\":1}}],[\"field类及其用法\",{\"0\":{\"5943\":1}}],[\"field2\",{\"1\":{\"5962\":3}}],[\"field表示class对象所表示的类的成员变量\",{\"1\":{\"5846\":1}}],[\"fields2\",{\"1\":{\"5962\":2}}],[\"fields\",{\"1\":{\"3179\":1,\"5382\":1,\"5530\":1,\"5962\":2,\"6118\":2,\"6808\":1}}],[\"field\",{\"1\":{\"438\":3,\"464\":1,\"3936\":1,\"4519\":1,\"4523\":1,\"4569\":1,\"4579\":1,\"4581\":1,\"4590\":1,\"4963\":3,\"4969\":3,\"4978\":3,\"5486\":1,\"5491\":1,\"5504\":1,\"5519\":2,\"5825\":2,\"5883\":3,\"5944\":1,\"5949\":1,\"5952\":1,\"5955\":1,\"5958\":1,\"5962\":9,\"5964\":4,\"5971\":1,\"5974\":1,\"5983\":1,\"5986\":1,\"5989\":1,\"6081\":3}}],[\"filtered\",{\"1\":{\"6851\":1,\"6853\":2}}],[\"filteredname\",{\"1\":{\"6099\":4}}],[\"filterednames\",{\"1\":{\"6099\":4}}],[\"filtermethods\",{\"1\":{\"6096\":1,\"6098\":1,\"6099\":1}}],[\"filter\",{\"1\":{\"1928\":1,\"6099\":2,\"6851\":1,\"6906\":1}}],[\"filterwriter\",{\"1\":{\"943\":1}}],[\"filterreader\",{\"1\":{\"943\":1}}],[\"filteroutputstream\",{\"1\":{\"943\":1}}],[\"filterinputstream\",{\"1\":{\"930\":1,\"934\":1,\"935\":1,\"936\":1,\"943\":1}}],[\"file=heapdump\",{\"1\":{\"6996\":1}}],[\"fileutils\",{\"1\":{\"6898\":2}}],[\"filereader\",{\"1\":{\"4746\":1,\"4781\":1}}],[\"filepath\",{\"1\":{\"4746\":2,\"4757\":1,\"4769\":1,\"4771\":1,\"4781\":2}}],[\"filenotfoundexception\",{\"1\":{\"4644\":2,\"4649\":1,\"4743\":1,\"4769\":2,\"4771\":2,\"4830\":1,\"4861\":1,\"4866\":1,\"4869\":1,\"5716\":1}}],[\"filename\",{\"1\":{\"3197\":1}}],[\"filesearch\",{\"1\":{\"6151\":1,\"6155\":1}}],[\"files\",{\"1\":{\"3444\":1,\"6201\":1}}],[\"filesharedobjectstorage\",{\"1\":{\"2406\":1}}],[\"fileinputstream\",{\"1\":{\"933\":1,\"4796\":1,\"4861\":2,\"4866\":2,\"4869\":2}}],[\"file\",{\"1\":{\"391\":1,\"1356\":1,\"3035\":1,\"3197\":1,\"3444\":1,\"4746\":4,\"4757\":1,\"4781\":5,\"4861\":5,\"4866\":5,\"4869\":5,\"6201\":15,\"6258\":1,\"6996\":1}}],[\"fill\",{\"1\":{\"354\":2,\"359\":1,\"365\":1,\"370\":1,\"376\":1}}],[\"fast\",{\"1\":{\"6572\":1}}],[\"fastutil\",{\"1\":{\"6432\":1}}],[\"fastjson给scm定制的版本号\",{\"1\":{\"3431\":1}}],[\"fastjson\",{\"1\":{\"3426\":1,\"6461\":1}}],[\"fake\",{\"1\":{\"4468\":1,\"4469\":2,\"4470\":2,\"4473\":2}}],[\"fairsync\",{\"1\":{\"3201\":1}}],[\"fair\",{\"1\":{\"3201\":3}}],[\"failed\",{\"1\":{\"4757\":1,\"4781\":1,\"6180\":1}}],[\"failontimeout\",{\"1\":{\"4380\":2}}],[\"failontimeout$callablestatement\",{\"1\":{\"4380\":2}}],[\"failure\",{\"1\":{\"4368\":4,\"6927\":1}}],[\"fail\",{\"1\":{\"2960\":1,\"2966\":4,\"4233\":1,\"4372\":1,\"4374\":1,\"4693\":1,\"6201\":1,\"6258\":8}}],[\"fallback\",{\"1\":{\"6201\":1}}],[\"fallthrough\",{\"1\":{\"4543\":1}}],[\"fall\",{\"0\":{\"4123\":1},\"1\":{\"1315\":1,\"4124\":2,\"4125\":1}}],[\"false\",{\"0\":{\"5612\":1},\"1\":{\"435\":1,\"438\":1,\"443\":1,\"1360\":1,\"1366\":1,\"1436\":4,\"1525\":1,\"1537\":2,\"2454\":4,\"2677\":1,\"3054\":1,\"3157\":1,\"3189\":1,\"3290\":1,\"4368\":2,\"4405\":1,\"4407\":2,\"5267\":1,\"5275\":1,\"5282\":1,\"5311\":1,\"5429\":1,\"5430\":1,\"5434\":1,\"5437\":1,\"5440\":3,\"5613\":1,\"5883\":1,\"5980\":1,\"6044\":1,\"6063\":2,\"6065\":1,\"6083\":2,\"6090\":1,\"6099\":2,\"6116\":2,\"6118\":3,\"6201\":1,\"6258\":2}}],[\"facebook构建工具\",{\"1\":{\"6293\":1}}],[\"faces\",{\"1\":{\"6285\":1}}],[\"factories\",{\"1\":{\"6219\":4}}],[\"factories配置文件\",{\"1\":{\"6218\":1}}],[\"factories文件的格式为\",{\"1\":{\"6219\":1}}],[\"factories文件\",{\"1\":{\"6218\":1,\"6219\":1}}],[\"factoryclassnames\",{\"1\":{\"6219\":2}}],[\"factoryclassname\",{\"1\":{\"6201\":5,\"6219\":2}}],[\"factoryclass\",{\"1\":{\"6201\":8,\"6219\":2}}],[\"factorymethod\",{\"1\":{\"2606\":1}}],[\"factory\",{\"0\":{\"1168\":1,\"1216\":1,\"1275\":1},\"1\":{\"955\":1,\"1172\":2,\"1229\":1,\"1289\":1,\"1290\":1,\"1313\":1,\"1396\":1,\"1406\":6,\"1431\":6,\"6201\":27}}],[\"facadepattern\",{\"1\":{\"1114\":1}}],[\"facade\",{\"1\":{\"990\":1,\"1095\":1,\"1097\":1,\"1106\":1,\"1108\":1,\"1109\":1,\"1114\":3,\"1148\":1,\"1149\":2,\"2616\":1}}],[\"fabric8\",{\"1\":{\"6330\":1}}],[\"fabricate\",{\"1\":{\"6109\":1}}],[\"fabricated\",{\"1\":{\"6083\":1}}],[\"fab\",{\"1\":{\"380\":1}}],[\"fa\",{\"1\":{\"379\":1,\"380\":7}}],[\"f96\",{\"1\":{\"365\":1}}],[\"f9f\",{\"1\":{\"354\":1,\"359\":1,\"376\":1}}],[\"ff\",{\"1\":{\"1134\":2}}],[\"ff0000\",{\"1\":{\"370\":1}}],[\"ffff00\",{\"1\":{\"370\":1}}],[\"fff\",{\"1\":{\"354\":1}}],[\"ff3\",{\"1\":{\"351\":1}}],[\"f66\",{\"1\":{\"354\":1}}],[\"fusco\",{\"1\":{\"6713\":1}}],[\"fugue\",{\"1\":{\"6414\":1}}],[\"fun3\",{\"1\":{\"5382\":1}}],[\"fun2\",{\"1\":{\"5062\":2}}],[\"fun1\",{\"1\":{\"5062\":2}}],[\"fund\",{\"1\":{\"5035\":1,\"5038\":1}}],[\"funb\",{\"1\":{\"5035\":1}}],[\"funa\",{\"1\":{\"5035\":2}}],[\"fun\",{\"1\":{\"4368\":1,\"5044\":3}}],[\"func\",{\"1\":{\"5035\":2,\"5038\":2,\"5334\":2,\"5336\":2,\"5402\":8,\"6915\":1}}],[\"func3\",{\"1\":{\"2124\":2}}],[\"func2\",{\"1\":{\"2118\":2,\"2124\":2,\"5376\":2,\"5382\":2,\"5489\":1}}],[\"func1\",{\"1\":{\"2118\":7,\"2124\":9,\"5376\":4,\"5382\":4,\"5489\":1,\"5491\":1}}],[\"functional\",{\"1\":{\"6415\":1}}],[\"functionality\",{\"1\":{\"329\":1,\"338\":1}}],[\"functions\",{\"1\":{\"339\":1}}],[\"function\",{\"1\":{\"332\":2,\"334\":1,\"344\":1,\"2998\":1}}],[\"fullname\",{\"1\":{\"6258\":3}}],[\"fully\",{\"1\":{\"5523\":1}}],[\"full\",{\"1\":{\"343\":1}}],[\"futuretask\",{\"1\":{\"4380\":2}}],[\"future\",{\"1\":{\"191\":1,\"4095\":1,\"5825\":1}}],[\"fo创建pdf\",{\"1\":{\"6555\":1}}],[\"fop\",{\"1\":{\"6555\":1}}],[\"found\",{\"1\":{\"5355\":1,\"6063\":2,\"6086\":1,\"6111\":1,\"6114\":1,\"6201\":2}}],[\"fourth\",{\"1\":{\"350\":1,\"6201\":1}}],[\"four\",{\"1\":{\"255\":1}}],[\"foowidgetdependency\",{\"1\":{\"6962\":2,\"6963\":1}}],[\"foowidgettest\",{\"1\":{\"6962\":1}}],[\"foowidget\",{\"1\":{\"6827\":3,\"6829\":3,\"6834\":5,\"6835\":2,\"6910\":3,\"6962\":2}}],[\"foobart\",{\"1\":{\"4193\":1}}],[\"fooexception\",{\"1\":{\"4047\":1,\"4077\":1}}],[\"foo\",{\"1\":{\"4016\":1,\"4046\":2,\"4074\":1,\"4076\":1,\"4119\":1,\"4236\":2,\"4254\":1,\"4260\":1,\"6872\":1,\"6876\":1,\"6934\":1,\"6936\":4,\"6962\":2}}],[\"focus\",{\"1\":{\"1134\":1}}],[\"foldedphone\",{\"1\":{\"624\":2,\"626\":2}}],[\"following\",{\"1\":{\"267\":1,\"271\":1,\"274\":1,\"5527\":1,\"6065\":1}}],[\"font\",{\"1\":{\"382\":2}}],[\"fontawesome\",{\"0\":{\"377\":1},\"1\":{\"378\":1}}],[\"forserialization\",{\"1\":{\"6118\":8}}],[\"forinputstring\",{\"1\":{\"4920\":1}}],[\"foreach\",{\"1\":{\"4049\":1,\"4078\":1}}],[\"foreach方法\",{\"1\":{\"3124\":1}}],[\"force\",{\"1\":{\"3361\":1}}],[\"forcecode\",{\"1\":{\"2989\":2}}],[\"forgery\",{\"1\":{\"3343\":1}}],[\"fork\",{\"1\":{\"2389\":1,\"5670\":1}}],[\"forname0\",{\"1\":{\"6059\":1}}],[\"forname\",{\"1\":{\"1366\":2,\"5030\":4,\"5516\":1,\"5824\":1,\"5852\":1,\"5853\":1,\"5859\":1,\"5861\":1,\"5886\":1,\"5888\":2,\"5896\":1,\"5914\":1,\"5962\":1,\"5964\":1,\"6013\":1,\"6017\":1,\"6054\":1,\"6059\":1,\"6060\":1,\"6164\":2,\"6172\":1,\"6176\":1,\"6180\":1,\"6258\":1,\"6261\":1}}],[\"forbiddena\",{\"1\":{\"381\":1}}],[\"forbidden\",{\"1\":{\"380\":1,\"3226\":1}}],[\"for\",{\"0\":{\"377\":1},\"1\":{\"255\":1,\"266\":1,\"274\":1,\"317\":1,\"336\":4,\"339\":1,\"350\":1,\"380\":1,\"381\":1,\"473\":1,\"781\":1,\"832\":1,\"834\":1,\"852\":1,\"854\":1,\"1315\":3,\"1366\":3,\"1489\":1,\"1491\":1,\"1586\":1,\"1686\":1,\"1718\":1,\"2001\":1,\"2103\":1,\"2127\":2,\"2188\":4,\"2194\":4,\"2456\":1,\"2964\":1,\"2997\":1,\"3022\":1,\"3024\":1,\"3072\":1,\"3087\":1,\"3117\":1,\"3187\":1,\"4006\":1,\"4070\":1,\"4109\":1,\"4383\":1,\"4405\":1,\"4569\":1,\"4614\":1,\"4647\":2,\"4920\":2,\"4981\":3,\"5035\":1,\"5062\":1,\"5093\":1,\"5271\":1,\"5287\":1,\"5382\":1,\"5463\":1,\"5466\":2,\"5469\":2,\"5529\":1,\"5539\":1,\"5558\":1,\"5560\":1,\"5579\":1,\"5776\":1,\"5825\":1,\"5883\":3,\"5914\":2,\"5940\":2,\"5962\":2,\"6013\":2,\"6065\":2,\"6071\":1,\"6081\":1,\"6083\":3,\"6099\":4,\"6101\":1,\"6118\":68,\"6180\":1,\"6201\":11,\"6258\":1,\"6853\":1}}],[\"formulation\",{\"1\":{\"6201\":1}}],[\"format=b\",{\"1\":{\"6996\":1}}],[\"formatting\",{\"0\":{\"6843\":1},\"1\":{\"6757\":1}}],[\"format\",{\"1\":{\"1315\":1,\"4034\":1}}],[\"form\",{\"0\":{\"185\":1},\"1\":{\"255\":1,\"364\":1,\"4205\":1}}],[\"渲染框时将使用先前定义的那个\",{\"1\":{\"162\":1}}],[\"再根据里面的内容加载相应的实现类\",{\"1\":{\"6160\":1}}],[\"再根据内容特征\",{\"1\":{\"2982\":1}}],[\"再自己加载\",{\"1\":{\"6063\":1}}],[\"再来看看\",{\"1\":{\"5856\":1}}],[\"再通过类加载子系统进行加载到jvm中运行\",{\"1\":{\"5835\":1}}],[\"再通过sublist取start\",{\"1\":{\"3398\":1}}],[\"再long\",{\"1\":{\"5597\":1}}],[\"再说\",{\"1\":{\"5144\":1}}],[\"再看子类的两个重写的方法的类型\",{\"1\":{\"5157\":1}}],[\"再看第二种情况\",{\"1\":{\"5141\":1}}],[\"再看一个实际例子\",{\"1\":{\"5047\":1}}],[\"再次分析上面的java代码\",{\"1\":{\"4968\":1}}],[\"再次执行judge\",{\"1\":{\"457\":1}}],[\"再明确触发状态转换的条件是什么\",{\"1\":{\"3452\":1}}],[\"再做对应的异常处理\",{\"1\":{\"3267\":1}}],[\"再进行编译\",{\"1\":{\"5118\":1}}],[\"再进行浮点数的运算操作\",{\"1\":{\"3052\":1}}],[\"再进行不同情况的处理\",{\"1\":{\"2416\":1}}],[\"再或者说\",{\"1\":{\"2757\":1}}],[\"再听我下面的讲解\",{\"1\":{\"2732\":1}}],[\"再使用\",{\"1\":{\"2370\":1}}],[\"再让\",{\"1\":{\"2109\":1}}],[\"再到公网或者数据库取\",{\"1\":{\"1912\":1}}],[\"再把需要备份的数据放到这个新对象\",{\"1\":{\"1642\":1}}],[\"再调用\",{\"1\":{\"1368\":1,\"2369\":1}}],[\"再比如\",{\"1\":{\"746\":1,\"1503\":1}}],[\"再从这个地址读取一个int类型长度的变量\",{\"1\":{\"467\":1}}],[\"再一个个拔除治疗\",{\"1\":{\"154\":1}}],[\"再难的事\",{\"1\":{\"152\":1}}],[\"也都会犯错误\",{\"1\":{\"6987\":1}}],[\"也都是正确的\",{\"1\":{\"4223\":1}}],[\"也称jakarta\",{\"1\":{\"6197\":1}}],[\"也称为上下文\",{\"1\":{\"2432\":1}}],[\"也包含了\",{\"1\":{\"5673\":1}}],[\"也差不多\",{\"1\":{\"5113\":1}}],[\"也有可能是catch部分发生异常\",{\"1\":{\"4969\":1}}],[\"也有利于归类查找\",{\"1\":{\"3286\":1}}],[\"也将捕获所有的错误\",{\"1\":{\"4906\":1}}],[\"也没有加载具体实现类\",{\"1\":{\"6188\":1}}],[\"也没有用throws子句声明抛出它\",{\"1\":{\"4723\":1}}],[\"也没有必要基于接口编程\",{\"1\":{\"2718\":1}}],[\"也确实真的没什么值得好说了\",{\"1\":{\"4260\":1}}],[\"也许是你自己\",{\"1\":{\"4096\":1}}],[\"也许还有一些类的\",{\"1\":{\"2791\":1}}],[\"也适用这个规则\",{\"1\":{\"4001\":1}}],[\"也避免提供那些无法明确执行的建议\",{\"1\":{\"3932\":1}}],[\"也避免的反复进行方法同步\",{\"1\":{\"2316\":1}}],[\"也指数据库表一\",{\"1\":{\"3536\":1}}],[\"也需要进行文档说明\",{\"1\":{\"4894\":1}}],[\"也需要在评审通过后上线\",{\"1\":{\"3450\":1}}],[\"也需要定义\",{\"1\":{\"3396\":1}}],[\"也需要修改\",{\"1\":{\"1205\":1}}],[\"也返回为\",{\"1\":{\"3381\":1}}],[\"也必须把d放在索引的最前列\",{\"1\":{\"3376\":1}}],[\"也必须建成唯一索引\",{\"1\":{\"3368\":1}}],[\"也便于通过日志对系统进行及时监控\",{\"1\":{\"3286\":1}}],[\"也并非高枕无忧\",{\"1\":{\"3275\":1}}],[\"也能清晰理解当时的思路\",{\"1\":{\"3218\":1}}],[\"也存在多个游客\",{\"1\":{\"2928\":1}}],[\"也表示类之间的整体与部分的关系\",{\"1\":{\"2878\":1}}],[\"也会编译通过\",{\"1\":{\"4723\":1}}],[\"也会影响到代码的可维护性\",{\"1\":{\"2723\":1}}],[\"也会导致不必要的开发负担\",{\"1\":{\"2716\":1}}],[\"也会导致\",{\"1\":{\"2174\":1}}],[\"也提供了很大的灵活性\",{\"1\":{\"2682\":1}}],[\"也就不能引用其它对象\",{\"1\":{\"5475\":1}}],[\"也就找不到对应的类字节码文件\",{\"1\":{\"5189\":1}}],[\"也就意味着\",{\"1\":{\"2755\":1}}],[\"也就意味着放弃了继承和多态这两个强有力的面向对象特性\",{\"1\":{\"2356\":1}}],[\"也就相当于损失了可以应对未来需求变化的扩展性\",{\"1\":{\"2356\":1}}],[\"也就违背了广义上理解的\",{\"1\":{\"2354\":1}}],[\"也就是确保满足里氏替换原则\",{\"1\":{\"5365\":1}}],[\"也就是利用反射创建对象\",{\"1\":{\"5029\":1}}],[\"也就是我们要研究的异常表\",{\"1\":{\"4944\":1}}],[\"也就是我们平时所说的\",{\"1\":{\"2388\":1}}],[\"也就是在父类中\",{\"1\":{\"2681\":1}}],[\"也就是采用接口隔离原则\",{\"1\":{\"2038\":1,\"2055\":1}}],[\"也就是只是将该成员变量的引用值\",{\"1\":{\"1781\":1}}],[\"也就是将该属性值复制一份给新的对象\",{\"1\":{\"1780\":1}}],[\"也就是所谓的单例对象\",{\"1\":{\"1343\":1}}],[\"也就是说可以使用\",{\"1\":{\"5765\":1}}],[\"也就是说真正被传递的是实参\",{\"1\":{\"5743\":1}}],[\"也就是说如果需要线程安全需要使用stringbuffer\",{\"1\":{\"5688\":1}}],[\"也就是说它不能是抽象方法\",{\"1\":{\"5488\":1}}],[\"也就是说它不能有任何的方法实现\",{\"1\":{\"5378\":1}}],[\"也就是说这个变量属于类的\",{\"1\":{\"5484\":1}}],[\"也就是说上面的t会变为原始类型throwable\",{\"1\":{\"5225\":1}}],[\"也就是说仅仅语法合格\",{\"1\":{\"5203\":1}}],[\"也就是说虚拟机根本不能分别这两个方法\",{\"1\":{\"5180\":1}}],[\"也就是说在泛型使用过程中\",{\"1\":{\"4997\":1}}],[\"也就是说在\",{\"1\":{\"3182\":1}}],[\"也就是说访问者关注了其他类的内部细节\",{\"1\":{\"2971\":1}}],[\"也就是说员工必须记住每个领导的姓名\",{\"1\":{\"1927\":1}}],[\"也就是说就是通过定义一个一致的接口\",{\"1\":{\"1124\":1}}],[\"也就是说\",{\"1\":{\"700\":1,\"731\":1,\"793\":1,\"1786\":1,\"2157\":1,\"2162\":1,\"2363\":1,\"2366\":1,\"2373\":1,\"2387\":1,\"2401\":1,\"2737\":1,\"3940\":1,\"4723\":1,\"4729\":1,\"5170\":1}}],[\"也带来了弊端\",{\"1\":{\"2099\":1}}],[\"也可能不同\",{\"1\":{\"5595\":1}}],[\"也可能是基于数据库的搜索\",{\"1\":{\"6147\":1}}],[\"也可能是\",{\"1\":{\"3068\":1}}],[\"也可动态地新增或者删除责任\",{\"1\":{\"1935\":1}}],[\"也可以和持续集成工具绑定使用\",{\"1\":{\"6992\":1}}],[\"也可以做一些很简单的事情\",{\"1\":{\"6907\":1}}],[\"也可以被看作为一种部署框架\",{\"1\":{\"6858\":1}}],[\"也可以被解释为illegalstateexception\",{\"1\":{\"4892\":1}}],[\"也可以购买商业版\",{\"1\":{\"6327\":1}}],[\"也可以找到同样的配置文件\",{\"1\":{\"6170\":1}}],[\"也可以使用方便插入和删除的\",{\"1\":{\"5675\":1}}],[\"也可以是在运行时被初始化后不能被改变的常量\",{\"1\":{\"5473\":1}}],[\"也可以是单向的\",{\"1\":{\"2867\":1}}],[\"也可以捕获多种类型异常\",{\"1\":{\"4770\":1}}],[\"也可以不指定泛型\",{\"1\":{\"5109\":1}}],[\"也可以不处理\",{\"1\":{\"4722\":1}}],[\"也可以不标注\",{\"1\":{\"4314\":1,\"4398\":1}}],[\"也可以依据作者的决定而换行\",{\"1\":{\"4038\":1}}],[\"也可以加快编译时的打包构建\",{\"1\":{\"3428\":1}}],[\"也可以加香肠\",{\"1\":{\"875\":1}}],[\"也可以直接依赖于service层\",{\"1\":{\"3409\":1}}],[\"也可以在所有其他构建工具中使用\",{\"1\":{\"6400\":1}}],[\"也可以在不影响客户端代码的情况下进行\",{\"1\":{\"5760\":1}}],[\"也可以在不同于\",{\"1\":{\"162\":1}}],[\"也可以在关联线的两端标注角色名\",{\"1\":{\"2867\":1}}],[\"也可以通过工厂模式\",{\"1\":{\"2383\":1}}],[\"也可以通过构造函数传递给类的成员变量\",{\"1\":{\"2382\":1}}],[\"也可以从配置文件中加载得到\",{\"1\":{\"2375\":1}}],[\"也可以实现多态\",{\"1\":{\"2356\":1}}],[\"也可以引入配置文件\",{\"1\":{\"1177\":1}}],[\"也可以再动态地撤销时\",{\"1\":{\"942\":1}}],[\"也可以单品咖啡\",{\"1\":{\"899\":1}}],[\"也希望做这样的产品展示网站\",{\"1\":{\"1408\":1}}],[\"也是浪费\",{\"1\":{\"6799\":1}}],[\"也是返回方法的参数类型\",{\"1\":{\"6038\":1}}],[\"也是方法的返回类型\",{\"1\":{\"6032\":1}}],[\"也是一个通信媒介\",{\"1\":{\"4845\":1}}],[\"也是一种解耦的有效手段\",{\"1\":{\"2782\":1}}],[\"也是一种设计模式\",{\"1\":{\"796\":1}}],[\"也是如此\",{\"1\":{\"4001\":1}}],[\"也是系统编码与测试的重要模型依据\",{\"1\":{\"2831\":1}}],[\"也是框架的\",{\"1\":{\"2792\":1}}],[\"也是我在阅读源码的时候经常会用到的\",{\"1\":{\"2758\":1}}],[\"也是在类装载的时候\",{\"1\":{\"2295\":1}}],[\"也是各种设计模式的基础\",{\"1\":{\"1990\":1}}],[\"也是抽象表达式的子类\",{\"1\":{\"1470\":1}}],[\"也是可以的\",{\"1\":{\"1238\":1}}],[\"也叫最少知识原则或者迪米特法则\",{\"1\":{\"2727\":1}}],[\"也叫具体目标类\",{\"1\":{\"1680\":1}}],[\"也叫抽象目标类\",{\"1\":{\"1679\":1}}],[\"也叫\",{\"1\":{\"1095\":1,\"1212\":1,\"1374\":1}}],[\"也违背了我们之后要讲的最小知识原则\",{\"1\":{\"2727\":1}}],[\"也违背了\",{\"1\":{\"1094\":1}}],[\"也体现了开闭原则\",{\"1\":{\"877\":1}}],[\"也不知道构造方法如何\",{\"1\":{\"5029\":1}}],[\"也不知道被请求的操作是哪个\",{\"1\":{\"741\":1}}],[\"也不会出现异常\",{\"1\":{\"5194\":1}}],[\"也不会形成例如\",{\"1\":{\"4254\":1}}],[\"也不会影响外观对象\",{\"1\":{\"1101\":1}}],[\"也不利于快速定位错误点\",{\"1\":{\"3294\":1}}],[\"也不利于定位问题\",{\"1\":{\"3267\":1}}],[\"也不利于维护\",{\"1\":{\"3015\":1}}],[\"也不能声明异常\",{\"1\":{\"4744\":1}}],[\"也不能依赖执行的先后次序\",{\"1\":{\"3304\":1}}],[\"也不能以下划线或美元符号结束\",{\"1\":{\"2986\":1}}],[\"也不能模拟生成一个新的对象\",{\"1\":{\"2268\":1}}],[\"也不是进入这里\",{\"1\":{\"3186\":2}}],[\"也不是兄弟关系\",{\"1\":{\"2745\":1}}],[\"也不是动态加入\",{\"1\":{\"1709\":1}}],[\"也不再要求\",{\"1\":{\"544\":1}}],[\"也更方便使用程序来控制创建过程\",{\"1\":{\"724\":1}}],[\"也要采用大括号的编码方式\",{\"1\":{\"3187\":1}}],[\"也要增加相应的接收方法\",{\"1\":{\"2079\":1}}],[\"也要在各个手机样式类下增加\",{\"1\":{\"613\":1}}],[\"也要警醒自己身上是否有和他相似的缺点\",{\"1\":{\"142\":1}}],[\"也增加了使用的成本\",{\"1\":{\"525\":1}}],[\"也总有解决办法\",{\"1\":{\"152\":1}}],[\"因而\",{\"1\":{\"4708\":1}}],[\"因而使用\",{\"1\":{\"4470\":1}}],[\"因访问对象隐私设\",{\"1\":{\"3645\":1}}],[\"因国际化需要\",{\"1\":{\"3391\":1}}],[\"因某种计算比较复杂而短时间无法完成\",{\"1\":{\"1921\":1}}],[\"因为我喜欢\",{\"1\":{\"6949\":1}}],[\"因为我们是使用它引用list1来调用它的方法\",{\"1\":{\"5131\":1}}],[\"因为我们要搞清楚某个类具有哪些方法\",{\"1\":{\"2731\":1}}],[\"因为我们主要是讲解设计模式\",{\"1\":{\"1349\":1}}],[\"因为将来很长一段时间\",{\"1\":{\"6887\":1}}],[\"因为里面的那些方法放在别处确实都不太合适\",{\"1\":{\"6841\":1}}],[\"因为类的卸载是只有在类加载器可以被回收的情况下才会被回收的\",{\"1\":{\"6120\":1}}],[\"因为类型检查就是编译时完成的\",{\"1\":{\"5131\":1}}],[\"因为公司没了员工还在\",{\"1\":{\"5792\":1}}],[\"因为频繁的生成对象将会对系统性能产生影响\",{\"1\":{\"5687\":1}}],[\"因为客户端只使用接口\",{\"1\":{\"5675\":1}}],[\"因为编译器知道这些变量的值\",{\"1\":{\"5664\":1}}],[\"因为编译一个子系统不会影响其他的子系统\",{\"1\":{\"1101\":1}}],[\"因为有强制的规范指定需要同时重写\",{\"1\":{\"5644\":1}}],[\"因为有些浮点数不能完全精确的表示出来\",{\"1\":{\"5613\":1}}],[\"因为有些异常具备以\",{\"1\":{\"3284\":1}}],[\"因为对象的\",{\"1\":{\"5640\":1}}],[\"因为对于通配符的方式最后取出数据是要做显式类型转换的\",{\"1\":{\"5197\":1}}],[\"因为与\",{\"1\":{\"5446\":1}}],[\"因为接口没有抽象类严格的类层次结构要求\",{\"1\":{\"5396\":1}}],[\"因为字面量\",{\"1\":{\"5344\":1}}],[\"因为改变的是同一个地址指向的内容\",{\"1\":{\"5335\":1}}],[\"因为泛型信息在编译的时候已经变为原始类型\",{\"1\":{\"5225\":1}}],[\"因为泛型类中的泛型参数的实例化是在定义对象的时候指定的\",{\"1\":{\"5211\":1}}],[\"因为泛型类型\",{\"1\":{\"5206\":1}}],[\"因为泛型类型的实例为\",{\"1\":{\"5093\":1}}],[\"因为泛型类要在实例化的时候就指明类型\",{\"1\":{\"5032\":1}}],[\"因为异常都是在运行时捕获和抛出的\",{\"1\":{\"5218\":1}}],[\"因为具体类型会导致可存入任意类型对象\",{\"1\":{\"5197\":1}}],[\"因为当类型擦除后\",{\"1\":{\"5183\":1}}],[\"因为虚拟机通过参数类型和返回类型来确定一个方法\",{\"1\":{\"5180\":1}}],[\"因为是从string转换为object\",{\"1\":{\"5143\":1}}],[\"因为如果是在编译之后检查\",{\"1\":{\"5121\":1}}],[\"因为你需要的是精确的参数类型\",{\"1\":{\"5046\":1}}],[\"因为你了解单元测试会在你的预期之中\",{\"1\":{\"4437\":1}}],[\"因为循环也占用了时间\",{\"1\":{\"4984\":1}}],[\"因为先捕获throwable后捕获exception\",{\"1\":{\"4973\":1}}],[\"因为终于看到了exception\",{\"1\":{\"4944\":1}}],[\"因为java的大部分方法要么已经处理异常\",{\"1\":{\"4755\":1}}],[\"因为所有的测试都是通过了的\",{\"1\":{\"4441\":1}}],[\"因为在\",{\"1\":{\"5189\":1,\"5201\":1}}],[\"因为在pair<t>中\",{\"1\":{\"5102\":1}}],[\"因为在写单元测试的时候\",{\"1\":{\"4439\":1}}],[\"因为在将一个数字无符号右移32位后\",{\"1\":{\"429\":1}}],[\"因为本初子午线被定义在通过那里的经线\",{\"1\":{\"3548\":1}}],[\"因为已经处于顶层\",{\"1\":{\"3418\":1}}],[\"因为日志在manager或service层一定需要捕获并打印到日志文件中去\",{\"1\":{\"3418\":1}}],[\"因为无法进行预发布\",{\"1\":{\"3352\":1}}],[\"因为string字符串的拼接会使用stringbuilder的append\",{\"1\":{\"3287\":1}}],[\"因为set存储的是不重复的对象\",{\"1\":{\"3089\":1}}],[\"因为它拥有非常棒的可插拔性\",{\"1\":{\"6946\":1}}],[\"因为它使用起来比其他的更为简单方便\",{\"1\":{\"6888\":1}}],[\"因为它是一个奇素数\",{\"1\":{\"5446\":1}}],[\"因为它是一个javadoc标签\",{\"1\":{\"3222\":1}}],[\"因为它是\",{\"1\":{\"4900\":1}}],[\"因为它们不会充斥着程序员不熟悉的异常\",{\"1\":{\"4874\":1}}],[\"因为它与程序员原来已经熟悉的习惯用法是一致的\",{\"1\":{\"4873\":1}}],[\"因为它要测的东西很多\",{\"1\":{\"4448\":1}}],[\"因为它会引起效率\",{\"1\":{\"1500\":1}}],[\"因为承载的信息价值较低\",{\"1\":{\"3068\":1}}],[\"因为自动拆箱\",{\"1\":{\"3058\":1}}],[\"因为不仅是编程知识点\",{\"1\":{\"2982\":1}}],[\"因为不断地有浏览器停止对\",{\"1\":{\"2802\":1}}],[\"因为现在你已经能在很多方面更好的理解问题了\",{\"1\":{\"2801\":1}}],[\"因为依赖关系简单\",{\"1\":{\"2754\":1}}],[\"因为除了鸵鸟之外\",{\"1\":{\"2727\":1}}],[\"因为北京鸭不能飞翔\",{\"1\":{\"2521\":1}}],[\"因为线程内唯一\",{\"1\":{\"2395\":1}}],[\"因为成分对象的内部细节是新对象看不见的\",{\"1\":{\"2220\":1}}],[\"因为继承会将父类的实现细节暴露给子类\",{\"1\":{\"2216\":1}}],[\"因为继承实际上让两个类耦合性增强了\",{\"1\":{\"2106\":1}}],[\"因为职责单一\",{\"1\":{\"2175\":1}}],[\"因为原有的测试代码仍然能够正常运行\",{\"1\":{\"2135\":1}}],[\"因为可以通过接口的继承\",{\"1\":{\"2047\":1}}],[\"因为代理对象需要与目标对象实现一样的接口\",{\"1\":{\"1847\":1}}],[\"因为该类的属性\",{\"1\":{\"1793\":1}}],[\"因为实际上两个对象的该成员变量都指向同一个实例\",{\"1\":{\"1781\":1}}],[\"因为\",{\"1\":{\"1487\":1,\"2080\":1,\"2124\":1,\"3991\":1,\"3999\":1,\"4483\":1,\"5290\":1,\"5609\":1,\"5611\":1,\"6930\":1}}],[\"因为超出f\",{\"1\":{\"1436\":1}}],[\"因为内存空间有限\",{\"1\":{\"1389\":1}}],[\"因为要求细粒度\",{\"1\":{\"1386\":1}}],[\"因为咖啡单品\",{\"1\":{\"910\":1}}],[\"因为他是叶子节点\",{\"1\":{\"856\":1}}],[\"因为每一个具体操作都需要设计一个具体命令类\",{\"1\":{\"754\":1}}],[\"因为每一步不好走的路\",{\"1\":{\"152\":1}}],[\"因为软件最终还是提供给现实生活中的人使用的\",{\"1\":{\"647\":1}}],[\"因为父类拥有的方法\",{\"1\":{\"646\":1}}],[\"因为这么做的话就失去了对这个字段修改行为的控制\",{\"1\":{\"5366\":1}}],[\"因为这会使得精度降低\",{\"1\":{\"5339\":1}}],[\"因为这是向下转型\",{\"1\":{\"5339\":1}}],[\"因为这是一个泛型方法\",{\"1\":{\"5214\":1}}],[\"因为这样的坏处时\",{\"1\":{\"4296\":1}}],[\"因为这些都很简单\",{\"1\":{\"1161\":1}}],[\"因为这要求\",{\"1\":{\"524\":1}}],[\"因为这违背了java中判断逻辑的基本常识\",{\"1\":{\"451\":1}}],[\"因为直接操作内存啥的看上去就很高大上不是么\",{\"1\":{\"462\":1}}],[\"因为后面的unicode编码的转义后表示的是a++\",{\"1\":{\"409\":1}}],[\"因此对应class对象只能有jvm创建和加载\",{\"1\":{\"5830\":1}}],[\"因此也可以用\",{\"1\":{\"5796\":1}}],[\"因此访问权限应当尽可能地使每个类或者成员不被外界访问\",{\"1\":{\"5364\":1}}],[\"因此是线程安全的\",{\"1\":{\"5304\":1}}],[\"因此只需要进行一次计算\",{\"1\":{\"5290\":1}}],[\"因此它不可被继承\",{\"1\":{\"5285\":1}}],[\"因此它依赖于同事角色\",{\"1\":{\"1580\":1}}],[\"因此多个\",{\"1\":{\"5272\":1}}],[\"因此那些方式初始化泛型数组都不是最优雅的方式\",{\"1\":{\"5203\":1}}],[\"因此变量obj的类型为user\",{\"1\":{\"5030\":1}}],[\"因此泛型方法中的泛型t就被指明为user\",{\"1\":{\"5030\":1}}],[\"因此调用泛型方法时\",{\"1\":{\"5030\":1}}],[\"因此调用者\",{\"1\":{\"2124\":1}}],[\"因此返回的是class<user>类型的对象\",{\"1\":{\"5030\":1}}],[\"因此没有办法去new一个对象\",{\"1\":{\"5029\":1}}],[\"因此为了兼容之前的版本\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"因此写了一个catch块\",{\"1\":{\"4910\":1}}],[\"因此student类自动有了该注解\",{\"1\":{\"4617\":1}}],[\"因此这是一种多对一的关系\",{\"1\":{\"5796\":1}}],[\"因此这两个对象的散列值是不同的\",{\"1\":{\"5444\":1}}],[\"因此这条规则并不适用\",{\"1\":{\"4199\":1}}],[\"因此这种方案\",{\"1\":{\"843\":1}}],[\"因此缩进级别不会增加\",{\"1\":{\"4135\":1}}],[\"因此所有对于类的格式化规则也适用于枚举类\",{\"1\":{\"4105\":1}}],[\"因此子项目需要显式的声明依赖\",{\"1\":{\"3436\":1}}],[\"因此子类可以通过扩展方式增加相应的功能\",{\"1\":{\"2644\":1}}],[\"因此使用sum\",{\"1\":{\"3382\":1}}],[\"因此在方法中改变指针引用的对象\",{\"1\":{\"5333\":1}}],[\"因此在设计程序架构时\",{\"1\":{\"2804\":1}}],[\"因此在这种情况下\",{\"1\":{\"727\":1}}],[\"因此需要\",{\"1\":{\"5050\":1}}],[\"因此需要重写\",{\"1\":{\"2521\":1}}],[\"因此需控制链中最大节点数量\",{\"1\":{\"1981\":1}}],[\"因此代码会变得越来越臃肿\",{\"1\":{\"2462\":1}}],[\"因此不能隐式地将\",{\"1\":{\"5344\":1}}],[\"因此不能确定有其他的方式\",{\"1\":{\"2290\":1}}],[\"因此不满足第一个表达式\",{\"1\":{\"444\":1}}],[\"因此迪米特法则只是要求降低类间\",{\"1\":{\"2197\":1}}],[\"因此该方法做成抽象\",{\"1\":{\"1972\":1}}],[\"因此我们这里使用默认的\",{\"1\":{\"1793\":1}}],[\"因此大数情况下使用语言中已有的聚合类的迭代器就已经够了\",{\"1\":{\"1563\":1}}],[\"因此外观模式降低了客户端对子系统使用的复杂性\",{\"1\":{\"1145\":1}}],[\"因此其使用范围受到一定的限制\",{\"1\":{\"726\":1}}],[\"因此其使用范围有一定的局限性\",{\"1\":{\"637\":1}}],[\"因此会执行else中的语句\",{\"1\":{\"458\":1}}],[\"因此执行第一句打印语句\",{\"1\":{\"457\":1}}],[\"因此执行第二个条件\",{\"1\":{\"457\":1}}],[\"因此如果直接写32的话\",{\"1\":{\"430\":1}}],[\"因此可以写出可读写更强\",{\"1\":{\"5670\":1}}],[\"因此可以保证\",{\"1\":{\"5286\":1}}],[\"因此可以用class\",{\"1\":{\"5030\":1}}],[\"因此可以用来判断数字的正负\",{\"1\":{\"426\":1}}],[\"因此可以通过继承等机制来改变或扩展文法\",{\"1\":{\"1459\":1}}],[\"因此可以做改进\",{\"1\":{\"910\":1}}],[\"因此可以很方便地替换具体建造者或增加新的具体建造者\",{\"1\":{\"723\":1}}],[\"因此可以借助于\",{\"1\":{\"42\":1}}],[\"因此\",{\"1\":{\"33\":1,\"646\":1,\"740\":1,\"1172\":1,\"1197\":1,\"1246\":1,\"1487\":1,\"1748\":1,\"2972\":1,\"3352\":1,\"3438\":1,\"4162\":1,\"4462\":1,\"4718\":1,\"4845\":1,\"4865\":1,\"4900\":1,\"4923\":1,\"5310\":1,\"5763\":1,\"6799\":1,\"6841\":1,\"6883\":1}}],[\"想象一下如果你不用等待代码构建完成而能实时看到代码的变化会是怎样\",{\"1\":{\"6981\":1}}],[\"想象一下我们有一个更复杂的\",{\"1\":{\"6807\":1}}],[\"想为你的类的变量添加\",{\"1\":{\"6933\":1}}],[\"想删除就删除\",{\"1\":{\"3076\":1}}],[\"想重来时就重来\",{\"1\":{\"1061\":1}}],[\"想选哪配就哪配\",{\"1\":{\"973\":1}}],[\"想对方法进行\",{\"1\":{\"740\":1}}],[\"想办法解决而不是抱怨\",{\"1\":{\"151\":1}}],[\"想要再绝一点\",{\"1\":{\"407\":1}}],[\"想要成功\",{\"1\":{\"146\":1}}],[\"想要使用此布局\",{\"1\":{\"2\":1}}],[\"会扫描所有路径下的jar包\",{\"1\":{\"6218\":1}}],[\"会遍历plugins文件夹中的目录\",{\"1\":{\"6215\":1}}],[\"会去meta\",{\"1\":{\"6160\":1}}],[\"会把父类的方法也获取到\",{\"1\":{\"6016\":1}}],[\"会把当前执行的目标对象方法作为参数传入\",{\"1\":{\"1871\":1}}],[\"会执行实际引用对象所在类的\",{\"1\":{\"5775\":1}}],[\"会执行匿名内部类内的实例化初始块代码\",{\"1\":{\"457\":1}}],[\"会引发\",{\"1\":{\"5535\":1}}],[\"会引起类膨胀\",{\"1\":{\"1463\":1}}],[\"会产生一个同名的\",{\"1\":{\"5515\":1}}],[\"会产生很多类\",{\"1\":{\"2478\":1}}],[\"会自动关闭\",{\"1\":{\"5670\":1}}],[\"会自动地将新建的对象放入\",{\"1\":{\"5312\":1}}],[\"会自动调用\",{\"1\":{\"4799\":1}}],[\"会自动调isxxx\",{\"1\":{\"3241\":1}}],[\"会与泛型的设计思想冲突\",{\"1\":{\"5197\":1}}],[\"会严重影响应用的性能\",{\"1\":{\"4928\":1}}],[\"会编译不通过\",{\"1\":{\"4660\":1}}],[\"会依赖\",{\"1\":{\"4462\":1}}],[\"会在每个测试方法前后都会被调用\",{\"1\":{\"4483\":1}}],[\"会在所有方法执行结束后执行一次\",{\"1\":{\"4332\":1}}],[\"会在所有方法运行前被执行\",{\"1\":{\"4329\":1}}],[\"会在用户的文件系统中建立一个虚拟的硬盘\",{\"1\":{\"1920\":1}}],[\"会出现在段落之间\",{\"1\":{\"4249\":1}}],[\"会统计值为null的行\",{\"1\":{\"3380\":1}}],[\"会翻开第\",{\"1\":{\"3373\":1}}],[\"会抛出nosuchmethoderror\",{\"1\":{\"3274\":1}}],[\"会抛出异常\",{\"1\":{\"2473\":1}}],[\"会直接显示在页面上\",{\"1\":{\"3242\":1}}],[\"会强制拆箱升级成表示范围更大的那个类型\",{\"1\":{\"3188\":1}}],[\"会是同样的结果吗\",{\"1\":{\"3118\":1}}],[\"会触发jdk\",{\"1\":{\"3081\":1}}],[\"会触发事情处理器方法\",{\"1\":{\"1871\":1}}],[\"会复用已有对象\",{\"1\":{\"3046\":1}}],[\"会觉得这个代码写得莫名其妙\",{\"1\":{\"2745\":1}}],[\"会觉得莫名其妙\",{\"1\":{\"2356\":1}}],[\"会下蛋这些行为特性\",{\"1\":{\"2735\":1}}],[\"会飞\",{\"1\":{\"2735\":1}}],[\"会飞不会叫\",{\"1\":{\"2730\":1}}],[\"会飞会叫\",{\"1\":{\"2730\":1}}],[\"会飞的鸟类\",{\"1\":{\"2728\":1}}],[\"会影响到代码的可读性\",{\"1\":{\"2745\":1}}],[\"会影响其他部分\",{\"1\":{\"2523\":1}}],[\"会影响依赖它的多个类\",{\"1\":{\"2176\":1}}],[\"会改变订单的状态\",{\"1\":{\"2458\":1}}],[\"会有\",{\"1\":{\"2523\":1}}],[\"会有这样的需求吗\",{\"1\":{\"2360\":1}}],[\"会有很多类\",{\"1\":{\"908\":1}}],[\"会导致后面的catch永远无法被执行\",{\"1\":{\"4973\":1}}],[\"会导致迁移复杂度升高\",{\"1\":{\"3237\":1}}],[\"会导致代码的可读性变差\",{\"1\":{\"2356\":1,\"2731\":1}}],[\"会导致这个工厂类变得很复杂\",{\"1\":{\"1254\":1}}],[\"会带来诸多问题\",{\"1\":{\"2350\":1}}],[\"会调用目标对象的方法\",{\"1\":{\"1903\":1}}],[\"会造成内存的浪费\",{\"1\":{\"2289\":1}}],[\"会造成请求处理速度变慢\",{\"1\":{\"1820\":1}}],[\"会造成调用过程混乱\",{\"1\":{\"1122\":1}}],[\"会比较复杂且耗时耗资源\",{\"1\":{\"1738\":1}}],[\"会以集合的方式来管理用户\",{\"1\":{\"1721\":1}}],[\"会形成网状结构\",{\"1\":{\"1607\":1}}],[\"会生成多个迭代器不好管理类\",{\"1\":{\"1557\":1}}],[\"会主动调用\",{\"1\":{\"1345\":1}}],[\"会花费大量的代价\",{\"1\":{\"1212\":1}}],[\"会将一个请求封装为一个对象\",{\"1\":{\"743\":1}}],[\"会进行自动装箱\",{\"1\":{\"442\":1}}],[\"会对操作符右边的参数进行模32的取余运算\",{\"1\":{\"430\":1}}],[\"会让你做事更有效率\",{\"1\":{\"150\":1}}],[\"会使用缓存池中的对象\",{\"1\":{\"5266\":1}}],[\"会使用默认运行器\",{\"1\":{\"4314\":1,\"4398\":1}}],[\"会使用特殊的前缀或后缀\",{\"1\":{\"4163\":1}}],[\"会使用\",{\"1\":{\"42\":1}}],[\"练习在一段时间内专注于一件事\",{\"1\":{\"150\":1}}],[\"练习专注力\",{\"1\":{\"149\":1}}],[\"穿合适的衣服\",{\"1\":{\"148\":1}}],[\"每添加一个外部依赖都打上一个标签很麻烦\",{\"1\":{\"6865\":1}}],[\"每添加一个策略就要增加一个类\",{\"1\":{\"2552\":1}}],[\"每被调用一次都会生成一个delegatingclassloader类加载器对象\",{\"1\":{\"6120\":1}}],[\"每创建一个实例就会产生一个实例变量\",{\"1\":{\"5485\":1}}],[\"每种类型都需要重载一个add方法\",{\"1\":{\"5002\":1}}],[\"每对\",{\"1\":{\"4695\":1}}],[\"每当使用实现注释来定义一个类或者成员的总体目的或者行为的时候\",{\"1\":{\"4266\":1}}],[\"每当新写一个语句块或者块状结构时\",{\"1\":{\"4024\":1}}],[\"每条语句的最后都有换行符\",{\"1\":{\"4026\":1}}],[\"每组中的\",{\"1\":{\"3991\":1}}],[\"每位数字的地位和含义是相同的\",{\"1\":{\"3263\":1}}],[\"每位在网络应用中使用\",{\"1\":{\"2802\":1}}],[\"每增加一个新的元素类\",{\"1\":{\"2940\":1}}],[\"每次对string的操作相当于生成一个新的string对象\",{\"1\":{\"5687\":1}}],[\"每次都会新建一个对象\",{\"1\":{\"5265\":1}}],[\"每次都要返回不同的对象\",{\"1\":{\"1255\":1}}],[\"每次变量声明\",{\"1\":{\"4108\":1}}],[\"每次声明一个变量\",{\"0\":{\"4107\":1}}],[\"每次有代码push时单元测试都会被执行\",{\"1\":{\"3305\":1}}],[\"每次调用方法时都要判断当前是什么状态\",{\"1\":{\"2476\":1}}],[\"每领取一次奖品\",{\"1\":{\"2452\":1}}],[\"每台计算机根据目标地址是否同自己的地址相同来决定是否接收\",{\"1\":{\"1928\":1}}],[\"每盘棋都有可能有两三百个棋子对象产生\",{\"1\":{\"1389\":1}}],[\"每一个表也必然有一个<resultmap>与之对应\",{\"1\":{\"3396\":1}}],[\"每一个api需对应一个路径\",{\"1\":{\"3224\":1}}],[\"每一个不同的实现都需要一个子类实现\",{\"1\":{\"2683\":1}}],[\"每一个具体建造者都相对独立\",{\"1\":{\"723\":1}}],[\"每一层对象对应的类都必须支持深克隆\",{\"1\":{\"1748\":1}}],[\"每一步的过程类\",{\"1\":{\"1135\":1}}],[\"每个通过关键字class标识的类\",{\"1\":{\"5829\":1}}],[\"每个java类运行时都在jvm里表现为一个class对象\",{\"1\":{\"5824\":1}}],[\"每个枚举值都需要调用一次构造函数\",{\"1\":{\"5623\":1}}],[\"每个枚举常量的逗号之后可以选择性地换行\",{\"1\":{\"4101\":1}}],[\"每个单测比较简单易懂\",{\"1\":{\"4448\":1}}],[\"每个单词\",{\"1\":{\"4201\":1}}],[\"每个组件都以\",{\"1\":{\"4175\":1}}],[\"每个有效的标识符都可以由正则表达式\",{\"1\":{\"4162\":1}}],[\"每个语句组要么会突然终止\",{\"1\":{\"4124\":1}}],[\"每个语句组都包含了一个或多个\",{\"1\":{\"4119\":1}}],[\"每个\",{\"1\":{\"4029\":1,\"4128\":1,\"4253\":1}}],[\"每个顶级类都定义在它们的源文件中\",{\"1\":{\"3996\":1}}],[\"每个版本的变化应该被记录\",{\"1\":{\"3439\":1}}],[\"每个case要么通过continue\",{\"1\":{\"3184\":1}}],[\"每个线程退出前必须调用countdown方法\",{\"1\":{\"3176\":1}}],[\"每个线程在想获得类的实例时候\",{\"1\":{\"2307\":1}}],[\"每个软件开发者都经历过许多相似的故事\",{\"1\":{\"2800\":1}}],[\"每个阶段的开发工作量都不会很大\",{\"1\":{\"2770\":1}}],[\"每个会下蛋的鸟都要实现一遍\",{\"1\":{\"2737\":1}}],[\"每个状态都要一个对应的类\",{\"1\":{\"2478\":1}}],[\"每个状态都实现它\",{\"1\":{\"2448\":1}}],[\"每个对象都会与其他对象有耦合关系\",{\"1\":{\"2162\":1}}],[\"每个对象只需保持一个指向其后继者的引用\",{\"1\":{\"1936\":1}}],[\"每个类都会有一个与之对应的class实例\",{\"1\":{\"6125\":1}}],[\"每个类都有一个\",{\"1\":{\"5515\":1}}],[\"每个类都应该使用该类的维护者可以解释清楚的\",{\"1\":{\"3999\":1}}],[\"每个类的职责都比较单一\",{\"1\":{\"2175\":1}}],[\"每个类只需要处理自己该处理的工作\",{\"1\":{\"1937\":1}}],[\"每个类对象的创建需要依赖哪些其他类对象\",{\"1\":{\"1327\":1}}],[\"每个人的身份证号等\",{\"1\":{\"2343\":1}}],[\"每个人必须记住所有朋友电话\",{\"1\":{\"1569\":1}}],[\"每个人必须记住他\",{\"1\":{\"1568\":1}}],[\"每个人都是先从外表认识他人的\",{\"1\":{\"148\":1}}],[\"每个运算符号\",{\"1\":{\"1487\":1}}],[\"每个包裹扫一遍\",{\"1\":{\"1046\":1}}],[\"每个接收者都包含对下一个接收者的引用\",{\"1\":{\"1040\":1}}],[\"每天早上上班时间都很紧张\",{\"1\":{\"875\":1}}],[\"每天都要认真清洁自己\",{\"1\":{\"148\":1}}],[\"每封电子邮件的发件人\",{\"1\":{\"662\":1}}],[\"每晚复盘\",{\"1\":{\"153\":1}}],[\"但基本只对收录的资源做了极为简要的介绍\",{\"1\":{\"6278\":1}}],[\"但最终其实际值是不会发生改变的\",{\"1\":{\"5993\":1}}],[\"但引用的类还没有加载\",{\"1\":{\"5860\":1}}],[\"但要求编写者一定要在使用前给变量赋值\",{\"1\":{\"5745\":1}}],[\"但变量不初始化为默认值就使用是不安全的\",{\"1\":{\"5745\":1}}],[\"但非静态内部类需要持有对外部类的引用\",{\"1\":{\"5734\":1}}],[\"但能实现多个接口\",{\"1\":{\"5692\":1}}],[\"但可读性大大降低\",{\"1\":{\"5500\":1}}],[\"但可以通过对象对外提供的接口来访问该对象\",{\"1\":{\"5752\":1}}],[\"但可以利用变量c的newinstance方法去创建对象\",{\"1\":{\"5029\":1}}],[\"但可以让耦合关系没那么紧密\",{\"1\":{\"2780\":1}}],[\"但字符串常量池\",{\"1\":{\"5328\":1}}],[\"但已经逐步\",{\"1\":{\"5325\":1}}],[\"但已经被广泛使用\",{\"1\":{\"3222\":1}}],[\"但现实是经常会出现无法预料的异常\",{\"1\":{\"4912\":1}}],[\"但问题在于\",{\"1\":{\"4900\":1}}],[\"但finally语句块后的语句不会被执行\",{\"1\":{\"4777\":1}}],[\"但定义注解时依然无法使用extends关键字继承\",{\"1\":{\"4664\":1}}],[\"但注解在编译后\",{\"1\":{\"4663\":1}}],[\"但第一个用例会删除这个用户a\",{\"1\":{\"4305\":1}}],[\"但必须是public\",{\"1\":{\"4299\":1}}],[\"但必须考虑数据一致\",{\"1\":{\"3364\":1}}],[\"但常量究竟意味着什么\",{\"1\":{\"4177\":1}}],[\"但有时候也可能是形容词或形容词短语\",{\"1\":{\"4169\":1}}],[\"但却难以日后维护\",{\"1\":{\"4096\":1}}],[\"但除了以下提及的几个例外\",{\"1\":{\"4257\":1}}],[\"但除了\",{\"1\":{\"4080\":1}}],[\"但比较笨拙和易出错\",{\"1\":{\"3964\":1}}],[\"但没理由这么做\",{\"1\":{\"3962\":1}}],[\"但并不意味着这是编写优雅代码的唯一方式\",{\"1\":{\"3940\":1}}],[\"但并不具有继承关系\",{\"1\":{\"2745\":1}}],[\"但核心关键点上的必要设计和文档沉淀是需要的\",{\"1\":{\"3469\":1}}],[\"但truncate无事务且不触发trigger\",{\"1\":{\"3392\":1}}],[\"但sum\",{\"1\":{\"3382\":1}}],[\"但提高查找速度是明显的\",{\"1\":{\"3368\":1}}],[\"但很不幸\",{\"1\":{\"3229\":1}}],[\"但目前还未实现的功能\",{\"1\":{\"3222\":1}}],[\"但在运行时会被系统抛出\",{\"1\":{\"4748\":1}}],[\"但在运行时产生异常\",{\"1\":{\"3438\":1}}],[\"但在一定程度上它的发生是可以预计的\",{\"1\":{\"4728\":1}}],[\"但在\",{\"1\":{\"4093\":1}}],[\"但在之前换行也可以接受\",{\"1\":{\"4048\":1}}],[\"但在linux下默认是区分大小写\",{\"1\":{\"3352\":1}}],[\"但在测试质量的保障上\",{\"1\":{\"3299\":1}}],[\"但在代码运行期时\",{\"1\":{\"3274\":1}}],[\"但在方法说明里必须注明外部参数检查\",{\"1\":{\"3206\":1}}],[\"但在不改变其结构的情况下\",{\"1\":{\"876\":1}}],[\"但接口实现上没做任何保护\",{\"1\":{\"3204\":1}}],[\"但因为并发处理错误导致奖品数量瞬间变成了负数\",{\"1\":{\"3190\":1}}],[\"但会因竞争同一seed导致的性能下降\",{\"1\":{\"3177\":1}}],[\"但小于size\",{\"1\":{\"3106\":1}}],[\"但事实上equals的结果为false\",{\"1\":{\"3049\":1}}],[\"但事实上a\",{\"1\":{\"3049\":1}}],[\"但实际这是一颗java语法糖\",{\"1\":{\"5690\":1}}],[\"但实际返回为false\",{\"1\":{\"3016\":1}}],[\"但实际上要让已有的代码在全新的代码中工作\",{\"1\":{\"2789\":1}}],[\"但父类并不知道子类的定义只有知道对方信息时才能指向对方箭头的方向是从子类指向父类\",{\"1\":{\"2912\":1}}],[\"但如果建造蚂蚁z空间大楼\",{\"1\":{\"3454\":1}}],[\"但如果因为参数错误导致中间执行回退\",{\"1\":{\"3205\":1}}],[\"但如果学校停办了\",{\"1\":{\"2873\":1}}],[\"但如果我们还关注\",{\"1\":{\"2729\":1}}],[\"但仅仅几个月后\",{\"1\":{\"2799\":1}}],[\"但几个月后开始流行原型按钮\",{\"1\":{\"2798\":1}}],[\"但组合也并不是完美的\",{\"1\":{\"2742\":1}}],[\"但组件接口定义和自己要求的接口定义不同\",{\"1\":{\"583\":1}}],[\"但也有特例\",{\"1\":{\"2725\":1}}],[\"但继承层次过深\",{\"1\":{\"2723\":1}}],[\"但继承具有静态特征\",{\"1\":{\"885\":1}}],[\"但调用将以抽象类中定义的方式进行\",{\"1\":{\"2638\":1}}],[\"但某些步骤的具体实现还未知\",{\"1\":{\"2635\":1}}],[\"但对大项目的开发或者框架设计\",{\"1\":{\"2592\":1}}],[\"但对已有的类进行改造时\",{\"1\":{\"1806\":1}}],[\"但同时也要避免设计过度\",{\"1\":{\"2591\":1}}],[\"但线程唯一单例的代码实现很简单\",{\"1\":{\"2396\":1}}],[\"但我不用不行啊\",{\"1\":{\"2378\":1}}],[\"但之后我们发现\",{\"1\":{\"2362\":1}}],[\"但又经常用到的对象\",{\"1\":{\"2339\":1}}],[\"但它是一种更强烈的聚合关系\",{\"1\":{\"2878\":1}}],[\"但它同样可以用于描述非软件领域的系统\",{\"1\":{\"2817\":1}}],[\"但它也存在以下缺点\",{\"1\":{\"2215\":1}}],[\"但它们与当前系统的接口规范不兼容\",{\"1\":{\"486\":1}}],[\"但不包括继承的方法\",{\"1\":{\"6005\":1}}],[\"但不包含属性\",{\"1\":{\"2825\":1}}],[\"但不推荐的\",{\"1\":{\"4222\":1}}],[\"但不得不填充错误码时返回五个零\",{\"1\":{\"3253\":1}}],[\"但不够优美\",{\"1\":{\"2727\":1}}],[\"但不是继承\",{\"1\":{\"2205\":1}}],[\"但不能不干净\",{\"1\":{\"148\":1}}],[\"但整个继承体系的复用性会比较差\",{\"1\":{\"2120\":1}}],[\"但两者是不同的\",{\"1\":{\"2039\":1}}],[\"但两者可以结合使用\",{\"1\":{\"673\":1}}],[\"但具体由哪个对象处理该请求在运行时自动确定\",{\"1\":{\"1985\":1}}],[\"但每个领导能批准的天数不同\",{\"1\":{\"1927\":1}}],[\"但这仅仅是一个语法糖\",{\"1\":{\"5619\":1}}],[\"但这经常会给同一个异常输出多条日志\",{\"1\":{\"4919\":1}}],[\"但这种情况下\",{\"1\":{\"4143\":1}}],[\"但这可能会触发一系列的代码格式化\",{\"1\":{\"4096\":1}}],[\"但这不是本文档所要求的\",{\"1\":{\"4067\":1}}],[\"但这就暴露了对象内部的细节\",{\"1\":{\"1642\":1}}],[\"但这也是继承的一大缺点\",{\"1\":{\"645\":1}}],[\"但左右两个数字有可能也是一个解析的结果\",{\"1\":{\"1487\":1}}],[\"但位置是变化的\",{\"1\":{\"1385\":1}}],[\"但由于叶子和分支有不同的接口\",{\"1\":{\"826\":1}}],[\"但其操作算法经常变化的程序\",{\"1\":{\"2977\":1}}],[\"但其中个别部分易变时\",{\"1\":{\"2686\":1}}],[\"但其不能对备忘录的内容进行访问与修改\",{\"1\":{\"1632\":1}}],[\"但其缺点是\",{\"1\":{\"823\":1}}],[\"但其创建步骤都大同小异\",{\"1\":{\"663\":1}}],[\"但其接口同新系统的接口不一致\",{\"1\":{\"582\":1}}],[\"但是很可能你使用的\",{\"1\":{\"6958\":1}}],[\"但是很难去维护它\",{\"1\":{\"6949\":1}}],[\"但是对流行的\",{\"1\":{\"6989\":1}}],[\"但是对\",{\"1\":{\"6943\":1}}],[\"但是现在我等不急了\",{\"1\":{\"6937\":1}}],[\"但是现在来看\",{\"1\":{\"6893\":1}}],[\"但是现在希望对程序进行\",{\"1\":{\"2803\":1}}],[\"但是他们同样都没有像\",{\"1\":{\"6863\":1}}],[\"但是别在为了\",{\"1\":{\"6844\":1}}],[\"但是它真的能够帮你解决很复杂的\",{\"1\":{\"6978\":1}}],[\"但是它的旗舰版加载了更多的牛逼的特性\",{\"1\":{\"6975\":1}}],[\"但是它的父类person被注解\",{\"1\":{\"4617\":1}}],[\"但是它们都有着各自的优缺点\",{\"1\":{\"6884\":1}}],[\"但是它允许你可以这样写\",{\"1\":{\"6828\":1}}],[\"但是一旦你调用了\",{\"1\":{\"6806\":1}}],[\"但是一个学生只属于一个学校\",{\"1\":{\"5796\":1}}],[\"但是似乎并没有什么人很享受用它\",{\"1\":{\"6744\":1}}],[\"但是看起来非常有前途\",{\"1\":{\"6601\":1}}],[\"但是跟spi有啥关系呢\",{\"1\":{\"6177\":1}}],[\"但是有一点我们可以确定的是\",{\"1\":{\"6176\":1}}],[\"但是有时候目标对象只是一个\",{\"1\":{\"1876\":1}}],[\"但是也只能获取到public修饰的的字段\",{\"1\":{\"5963\":1}}],[\"但是也有例外\",{\"1\":{\"5370\":1}}],[\"但是公司和员工就属于聚合关系了\",{\"1\":{\"5792\":1}}],[\"但是整体和部分不是强依赖的\",{\"1\":{\"5788\":1}}],[\"但是用这个修饰符也有一定的限制\",{\"1\":{\"5743\":1}}],[\"但是通常会重写equals方法去实现对象内容的比较\",{\"1\":{\"5685\":1}}],[\"但是最重要的一个是\",{\"1\":{\"5677\":1}}],[\"但是什么时候调用\",{\"1\":{\"5661\":1}}],[\"但是包含的字母相同的比较\",{\"1\":{\"5646\":1}}],[\"但是没有关于不相等对象的任何规定\",{\"1\":{\"5636\":1}}],[\"但是没有做任何处理或者记录日志\",{\"1\":{\"4910\":1}}],[\"但是被引用的对象本身是可以修改的\",{\"1\":{\"5475\":1}}],[\"但是因为\",{\"1\":{\"5444\":1}}],[\"但是散列值相同的两个对象不一定等价\",{\"1\":{\"5442\":1}}],[\"但是参数类型\",{\"1\":{\"5412\":1}}],[\"但是参数可能会进行字符串拼接运算\",{\"1\":{\"3288\":1}}],[\"但是使用\",{\"1\":{\"5346\":1}}],[\"但是泛型的出现就是为了消灭\",{\"1\":{\"5194\":1}}],[\"但是object类型不能存储int值\",{\"1\":{\"5183\":1}}],[\"但是虚拟机却是允许这样做的\",{\"1\":{\"5180\":1}}],[\"但是擦除类型后他们的就成为原始的pair类型了\",{\"1\":{\"5102\":1}}],[\"但是会有警告\",{\"1\":{\"5059\":2,\"5200\":2}}],[\"但是其中某个参数无论是什么值都不会影响测试的结果\",{\"1\":{\"4475\":1}}],[\"但是在内部类\",{\"1\":{\"5887\":1}}],[\"但是在异常声明中可以使用类型变量\",{\"1\":{\"5228\":1}}],[\"但是在取出数据的时候却要做一次类型转换\",{\"1\":{\"5194\":1}}],[\"但是在编译阶段会进行所谓的\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"但是在进行单元测试时\",{\"1\":{\"4464\":1}}],[\"但是在方法级别上\",{\"1\":{\"2024\":1}}],[\"但是大家在设计评审中经常出现语焉不详\",{\"1\":{\"3472\":1}}],[\"但是合并成一个war\",{\"1\":{\"3433\":1}}],[\"但是接口返回值不允许使用枚举类型或者包含枚举类型的pojo对象\",{\"1\":{\"3430\":1}}],[\"但是请勿互相越俎代庖\",{\"1\":{\"3257\":1}}],[\"但是字典不容易随身携带且简单易懂\",{\"1\":{\"3251\":1}}],[\"但是这些独立的模块却有可能是可用的\",{\"1\":{\"5758\":1}}],[\"但是这是语言内置支持的操作\",{\"1\":{\"5573\":1}}],[\"但是这一行新增数据并不符合业务插入规则\",{\"1\":{\"3315\":1}}],[\"但是这个值后面被其他人改变了\",{\"1\":{\"5664\":1}}],[\"但是这个访问修饰符对于类没有意义\",{\"1\":{\"5363\":1}}],[\"但是这个属性在数据提取时并没有置入具体值\",{\"1\":{\"3059\":1}}],[\"但是这个区间之外的所有数据\",{\"1\":{\"3046\":1}}],[\"但是这样做的改动很大\",{\"1\":{\"2019\":1}}],[\"但是要注意区分下面的一种情况\",{\"1\":{\"5212\":1}}],[\"但是要避免使用\",{\"1\":{\"2996\":1}}],[\"但是要求都有些不同\",{\"1\":{\"1408\":1}}],[\"但是要求不要相同的\",{\"1\":{\"688\":1}}],[\"但是类名如果有复数含义\",{\"1\":{\"2995\":1}}],[\"但是成员对象可以脱离整体对象而独立存在\",{\"1\":{\"2873\":1}}],[\"但是可以通过文档告诉你的用户在这里可能会有异常抛出\",{\"1\":{\"6818\":1}}],[\"但是可以看到\",{\"1\":{\"6103\":1}}],[\"但是可以实现多个接口\",{\"1\":{\"5677\":1}}],[\"但是可以有多个\",{\"1\":{\"5642\":1}}],[\"但是可以作为一种参考和梳理依赖的手段\",{\"1\":{\"2759\":1}}],[\"但是可能造成内存浪费\",{\"1\":{\"2296\":1}}],[\"但是我用\",{\"1\":{\"6995\":1}}],[\"但是我会尽力的\",{\"1\":{\"6900\":1}}],[\"但是我只用过\",{\"1\":{\"6881\":1}}],[\"但是我们需要包括\",{\"1\":{\"2820\":1}}],[\"但是我们希望能重写这个类在运行时执行的\",{\"1\":{\"2747\":1}}],[\"但是我的观点没那么极端\",{\"1\":{\"2749\":1}}],[\"但是我偏不\",{\"1\":{\"419\":1}}],[\"但是办理具体业务却因人而异\",{\"1\":{\"2636\":1}}],[\"但是自己却不知道\",{\"1\":{\"2564\":1}}],[\"但是飞翔技术一般\",{\"1\":{\"2539\":1}}],[\"但是显然这种做法对复杂的状态判断存在天然弊端\",{\"1\":{\"2416\":1}}],[\"但是个数是有限制的\",{\"1\":{\"2408\":1}}],[\"但是效率太低了\",{\"1\":{\"2307\":1}}],[\"但是只能在单线程下使用\",{\"1\":{\"2300\":1}}],[\"但是只会用到\",{\"1\":{\"2052\":2,\"2058\":2}}],[\"但是导致类装载的原因有很多种\",{\"1\":{\"2290\":1}}],[\"但是注意\",{\"1\":{\"2197\":1}}],[\"但是不建议使用\",{\"1\":{\"5601\":1}}],[\"但是不建议经常这么做\",{\"1\":{\"4296\":1}}],[\"但是不可用\",{\"1\":{\"5574\":1}}],[\"但是不能继承多个抽象类\",{\"1\":{\"5385\":1}}],[\"但是不同的version\",{\"1\":{\"3433\":1}}],[\"但是不小心c\",{\"1\":{\"2118\":1}}],[\"但是不管怎么\",{\"1\":{\"875\":1}}],[\"但是原来的对象成型\",{\"1\":{\"1893\":1}}],[\"但是原来的目标对象成型\",{\"1\":{\"1859\":1}}],[\"但是该方法需要接收三个参数\",{\"1\":{\"1855\":1}}],[\"但是目标对象要实现接口\",{\"1\":{\"1850\":1}}],[\"但是需要实现\",{\"1\":{\"1768\":1}}],[\"但是每个聚合对象都要一个迭代器\",{\"1\":{\"1557\":1}}],[\"但是相比较简单工厂模式\",{\"1\":{\"1251\":1}}],[\"但是考虑到项目的规模\",{\"1\":{\"1238\":1}}],[\"但是花费的代价非常小\",{\"1\":{\"1215\":1}}],[\"但是为了测试代码能够正常编译\",{\"1\":{\"4475\":1}}],[\"但是为了迎合\",{\"1\":{\"1212\":1}}],[\"但是为了以命令的形式进行架构\",{\"1\":{\"755\":1}}],[\"但是如果你的产品足够大\",{\"1\":{\"6864\":1}}],[\"但是如果结合注解将可以极大程度提高实现的优雅度\",{\"1\":{\"4677\":1}}],[\"但是如果攻击人员使用的是特殊构造的字符串来验证\",{\"1\":{\"3341\":1}}],[\"但是如果多写\",{\"1\":{\"3180\":1}}],[\"但是如果在方法中改变对象的字段值会改变原对象该字段值\",{\"1\":{\"5335\":1}}],[\"但是如果在程序中\",{\"1\":{\"2882\":1}}],[\"但是如果在判断条件中动一点点手脚\",{\"1\":{\"452\":1}}],[\"但是如果子类对这些已经实现的方法任意修改\",{\"1\":{\"2098\":1}}],[\"但是如果我们在其它的地方也有创建\",{\"1\":{\"1205\":1}}],[\"但是并不知道请求的接收者是谁\",{\"1\":{\"741\":1}}],[\"但是产生的结果又不相同\",{\"1\":{\"735\":1}}],[\"但是\",{\"1\":{\"436\":1,\"1253\":1,\"1364\":1,\"2046\":1,\"2077\":1,\"2350\":2,\"2358\":1,\"2745\":1,\"2790\":1,\"4473\":1,\"4862\":1,\"4891\":1,\"5569\":1,\"5599\":1,\"5615\":1,\"5670\":1,\"5675\":1,\"5759\":1,\"6828\":1}}],[\"但是你可以很简单地仅仅使用它的\",{\"1\":{\"6942\":1}}],[\"但是你的客户端仍然在使用老的值\",{\"1\":{\"5664\":1}}],[\"但是你永远不应该这样做\",{\"1\":{\"4905\":1}}],[\"但是你如果写成下面这样\",{\"1\":{\"412\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"119\":1}}],[\"邋遢的外表也会让人望而却步\",{\"1\":{\"148\":1}}],[\"注解的\",{\"1\":{\"6964\":1}}],[\"注解的应用场景\",{\"0\":{\"4671\":1}}],[\"注解不会也不能影响代码的实际逻辑\",{\"1\":{\"5542\":1}}],[\"注解不常使用\",{\"1\":{\"4621\":1}}],[\"注解实现的原理\",{\"0\":{\"4666\":1}}],[\"注解是附加在代码中的一些元信息\",{\"1\":{\"5542\":1}}],[\"注解是不支持继承的\",{\"1\":{\"4662\":1}}],[\"注解是jdk1\",{\"1\":{\"4493\":1,\"4495\":1}}],[\"注解支持继承吗\",{\"0\":{\"4661\":1}}],[\"注解与反射接口\",{\"0\":{\"4622\":1}}],[\"注解修饰成员变量\",{\"1\":{\"4621\":1}}],[\"注解类\",{\"1\":{\"4589\":1,\"4590\":1}}],[\"注解类型进行注解的注解类\",{\"1\":{\"4586\":1}}],[\"注解类型的命名没有特定的规则或者完善的约定\",{\"1\":{\"4170\":1}}],[\"注解类型\",{\"1\":{\"3935\":1}}],[\"注解可以用于修饰\",{\"1\":{\"4589\":1}}],[\"注解基础\",{\"0\":{\"4494\":1}}],[\"注解机制详解\",{\"0\":{\"4492\":1},\"1\":{\"5543\":1}}],[\"注解\",{\"0\":{\"4130\":1,\"5541\":1},\"1\":{\"4226\":1,\"4483\":1,\"4485\":1,\"4487\":1,\"5410\":1,\"6824\":2}}],[\"注\",{\"1\":{\"3229\":1,\"3431\":1,\"4925\":1,\"5724\":1}}],[\"注释一起使用\",{\"1\":{\"4371\":1}}],[\"注释不会被包含在由星号或者其它字符绘制的框中\",{\"1\":{\"4153\":1}}],[\"注释块可以是\",{\"1\":{\"4151\":1}}],[\"注释块与它周围的代码拥有相同的缩进级别\",{\"1\":{\"4151\":1}}],[\"注释块样式\",{\"0\":{\"4150\":1}}],[\"注释和\",{\"1\":{\"4069\":1}}],[\"注释中可以被复制粘贴到\",{\"1\":{\"4033\":1}}],[\"注释是非常有必要的\",{\"1\":{\"3968\":1}}],[\"注释是给自己看的\",{\"1\":{\"3218\":1}}],[\"注释力求精简准确\",{\"1\":{\"3219\":1}}],[\"注释也是给继任者看的\",{\"1\":{\"3218\":1}}],[\"注释也要进行相应的修改\",{\"1\":{\"3215\":1}}],[\"注释\",{\"0\":{\"4147\":1},\"1\":{\"3212\":2,\"3937\":1}}],[\"注释规约\",{\"0\":{\"3207\":1}}],[\"注释的双斜线与注释内容之间有且仅有一个空格\",{\"1\":{\"3026\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"109\":1}}],[\"注册国家或地区受限\",{\"1\":{\"3568\":1}}],[\"注册到\",{\"1\":{\"1720\":1}}],[\"注册一个观察者\",{\"1\":{\"1718\":1}}],[\"注意不要过度使用\",{\"1\":{\"6821\":1}}],[\"注意不要包含敏感数据信息\",{\"1\":{\"3226\":1}}],[\"注意不包含父类的字段\",{\"1\":{\"5962\":2}}],[\"注意修饰符为public才会获取\",{\"1\":{\"5962\":1}}],[\"注意字段修饰符必须为public而且存在该字段\",{\"1\":{\"5962\":1}}],[\"注意到\",{\"1\":{\"5760\":1}}],[\"注意例如\",{\"1\":{\"4199\":1}}],[\"注意在\",{\"1\":{\"4126\":1}}],[\"注意在前面加一下super\",{\"1\":{\"3062\":1}}],[\"注意这里不要和继承的\",{\"1\":{\"5050\":1}}],[\"注意这仅适用于没有类似于\",{\"1\":{\"4247\":1}}],[\"注意这与其它语言的\",{\"1\":{\"4042\":1}}],[\"注意这可不是唯一标准\",{\"1\":{\"2820\":1}}],[\"注意对扩展开放\",{\"1\":{\"3466\":1}}],[\"注意起始版本号必须为\",{\"1\":{\"3427\":1}}],[\"注意超过\",{\"1\":{\"3423\":1,\"3539\":1}}],[\"注意它与utf8编码的区别\",{\"1\":{\"3391\":1}}],[\"注意count\",{\"1\":{\"3381\":1}}],[\"注意日志输出的级别\",{\"1\":{\"3295\":1}}],[\"注意npe产生的场景\",{\"1\":{\"3276\":1}}],[\"注意除零异常\",{\"1\":{\"3243\":1}}],[\"注意取值的范围\",{\"1\":{\"3243\":1}}],[\"注意math\",{\"1\":{\"3243\":1}}],[\"注意如果是boolean包装类对象\",{\"1\":{\"3241\":1}}],[\"注意均是浅拷贝\",{\"1\":{\"3240\":1}}],[\"注意及时处理这些标记\",{\"1\":{\"3222\":1}}],[\"注意与代码对齐\",{\"1\":{\"3212\":1}}],[\"注意idea的\",{\"1\":{\"3210\":1}}],[\"注意break是退出switch语句块\",{\"1\":{\"3184\":1}}],[\"注意线程安全\",{\"1\":{\"3160\":1}}],[\"注意负载因子\",{\"1\":{\"3123\":1}}],[\"注意date\",{\"1\":{\"3087\":1}}],[\"注意serialversionuid不一致会抛出序列化运行时异常\",{\"1\":{\"3060\":1}}],[\"注意代理的类不能为\",{\"1\":{\"1906\":1}}],[\"注意划分内部状态和外部状态\",{\"1\":{\"1443\":1}}],[\"注意月份下标从\",{\"1\":{\"1313\":1}}],[\"注意\",{\"1\":{\"160\":1,\"1500\":1,\"2083\":1,\"2925\":1,\"2987\":1,\"3176\":1,\"3351\":1,\"3991\":1,\"4003\":1,\"4038\":1,\"4054\":1,\"4204\":1,\"4223\":1,\"4294\":1,\"4299\":1,\"4302\":1,\"4306\":1,\"4482\":1,\"4626\":1,\"4744\":1,\"5712\":1,\"6559\":1}}],[\"注意仪容仪表\",{\"1\":{\"147\":1}}],[\"相等为true\",{\"1\":{\"5685\":1}}],[\"相等\",{\"1\":{\"5636\":1}}],[\"相乘可以转换成移位和减法\",{\"1\":{\"5447\":1}}],[\"相乘相当于向左移一位\",{\"1\":{\"5446\":1}}],[\"相应的原始类型都会被自动提供\",{\"1\":{\"5097\":1}}],[\"相应地\",{\"1\":{\"2177\":1}}],[\"相对apache\",{\"1\":{\"6290\":1}}],[\"相对客户的请求而言\",{\"1\":{\"4892\":1}}],[\"相对具体的业务逻辑服务层\",{\"1\":{\"3413\":1}}],[\"相对于编码规范\",{\"1\":{\"2753\":1}}],[\"相对于细节的多变性\",{\"1\":{\"2065\":1}}],[\"相对于直接\",{\"1\":{\"1161\":1}}],[\"相反它们把注入逻辑以注解的方式写到代码中\",{\"1\":{\"6822\":1}}],[\"相反地\",{\"1\":{\"4111\":1}}],[\"相反\",{\"1\":{\"2719\":1,\"2782\":1,\"6800\":1}}],[\"相近的功能都放到了一个类中\",{\"1\":{\"2175\":1}}],[\"相近的功能往往会被同时修改\",{\"1\":{\"2170\":1}}],[\"相当于x除以2\",{\"1\":{\"5740\":1}}],[\"相当于x乘以2\",{\"1\":{\"5739\":1}}],[\"相当于保护案发现场\",{\"1\":{\"3418\":1}}],[\"相当于\",{\"1\":{\"2525\":1}}],[\"相当于让请求流动起来\",{\"1\":{\"1947\":1}}],[\"相当于代理对象的雏形\",{\"1\":{\"1903\":1}}],[\"相当于jdk动态代理需要的\",{\"1\":{\"1886\":1}}],[\"相当于一个相同网站的实例对象很多\",{\"1\":{\"1416\":1}}],[\"相互之间的调用关系会比较复杂\",{\"1\":{\"1592\":1}}],[\"相似\",{\"1\":{\"1466\":1}}],[\"相同方式共享\",{\"1\":{\"4458\":1}}],[\"相同的artifactid\",{\"1\":{\"3433\":1}}],[\"相同的方法\",{\"1\":{\"734\":1}}],[\"相同\",{\"1\":{\"3106\":1,\"4138\":1}}],[\"相同业务含义\",{\"1\":{\"3042\":1}}],[\"相同参数类型\",{\"1\":{\"3042\":1}}],[\"相同功能的代码\",{\"1\":{\"2582\":1}}],[\"相同对象只要保存一份\",{\"1\":{\"1379\":1}}],[\"相关的关键字\",{\"1\":{\"5703\":1}}],[\"相关的操作\",{\"1\":{\"2745\":1}}],[\"相关文章\",{\"1\":{\"5531\":1,\"5537\":1,\"5540\":1,\"5543\":1}}],[\"相关方法\",{\"1\":{\"1122\":1}}],[\"相关信息\",{\"1\":{\"39\":1}}],[\"相片加相框等\",{\"1\":{\"875\":1}}],[\"相信大家在掌握了这些技巧后\",{\"1\":{\"481\":1}}],[\"相信大家可以轻易理解\",{\"1\":{\"429\":1}}],[\"相比成功而言\",{\"1\":{\"146\":1}}],[\"不错的替代工具\",{\"1\":{\"6862\":1}}],[\"不清楚是不是存在\",{\"1\":{\"6828\":1}}],[\"不使用jni就可以使用原生开发库\",{\"1\":{\"6527\":1}}],[\"不使用下划线\",{\"1\":{\"4166\":1}}],[\"不获取父类的字段\",{\"1\":{\"5964\":1}}],[\"不包括继承的字段\",{\"1\":{\"5951\":1,\"5954\":1}}],[\"不包括包名\",{\"1\":{\"5867\":1}}],[\"不包含参数\",{\"1\":{\"5923\":1}}],[\"不包含任何方法\",{\"1\":{\"5603\":1}}],[\"不溢出的情况下\",{\"1\":{\"5739\":1}}],[\"不像\",{\"1\":{\"5670\":1}}],[\"不行\",{\"1\":{\"5611\":1,\"5640\":1}}],[\"不属于操作符重载\",{\"1\":{\"5573\":1}}],[\"不支持条件编译\",{\"1\":{\"5575\":1}}],[\"不支持操作符重载\",{\"1\":{\"5573\":1}}],[\"不支持多重继承\",{\"1\":{\"5572\":1}}],[\"不支持\",{\"1\":{\"5354\":1}}],[\"不支持的数据格式\",{\"1\":{\"3873\":1}}],[\"不合法\",{\"1\":{\"5180\":1}}],[\"不指定泛型的时候\",{\"1\":{\"5112\":1,\"5113\":1}}],[\"不一样\",{\"1\":{\"5050\":1}}],[\"不一定完全一样\",{\"1\":{\"854\":1}}],[\"不论发生什么异常\",{\"1\":{\"4967\":1}}],[\"不论它显示得更宽或者更窄\",{\"1\":{\"4029\":1}}],[\"不妨看下jdk中serviceloader<s>方法的具体实现\",{\"1\":{\"6257\":1}}],[\"不妨再看个例子\",{\"1\":{\"4659\":1}}],[\"不妨先试着定下10\",{\"1\":{\"150\":1}}],[\"不单单指的是数据\",{\"1\":{\"4481\":1}}],[\"不易理解的\",{\"1\":{\"4454\":1}}],[\"不易维护\",{\"1\":{\"2487\":1}}],[\"不止运行一次\",{\"1\":{\"4306\":1}}],[\"不\",{\"1\":{\"4163\":1,\"4254\":1}}],[\"不全\",{\"1\":{\"4114\":1}}],[\"不鼓励也不反对将单个空行出现在类的第一个成员或初始化方法的之前\",{\"1\":{\"4066\":1}}],[\"不必\",{\"1\":{\"4054\":1}}],[\"不必知道产品内部组成的细节\",{\"1\":{\"722\":1}}],[\"不应被分离\",{\"0\":{\"4000\":1}}],[\"不应该使用异常控制应用的执行流程\",{\"1\":{\"4928\":1}}],[\"不应该表示实体数量\",{\"1\":{\"3353\":1}}],[\"不应该影响父类方法的含义\",{\"1\":{\"2250\":1}}],[\"不应该随着内部状态的改变而改变\",{\"1\":{\"1442\":1}}],[\"不应该直接去\",{\"1\":{\"1203\":1}}],[\"不适用于\",{\"1\":{\"3980\":1,\"3985\":1}}],[\"不适合分布式\",{\"1\":{\"3385\":1}}],[\"不适合使用组合模式\",{\"1\":{\"868\":1}}],[\"不规范\",{\"1\":{\"3940\":1}}],[\"不稳定指的是提供方无法做到向下兼容\",{\"1\":{\"3438\":1}}],[\"不依赖snapshot版本是保证应用发布的幂等性\",{\"1\":{\"3428\":1}}],[\"不依赖不稳定的实现细节\",{\"1\":{\"2695\":1,\"2717\":1}}],[\"不预先分配存储空间\",{\"1\":{\"3358\":1}}],[\"不建议项目发布后补充单元测试用例\",{\"1\":{\"3319\":1}}],[\"不建议在方法里\",{\"1\":{\"2196\":1}}],[\"不给数据库造成脏数据\",{\"1\":{\"3316\":1}}],[\"不准使用system\",{\"1\":{\"3303\":1}}],[\"不强制返回空集合\",{\"1\":{\"3275\":1}}],[\"不安全\",{\"1\":{\"3233\":1,\"3448\":1}}],[\"不如用中文注释说清楚\",{\"1\":{\"3214\":1}}],[\"不如在新对象中重用已有的代码\",{\"1\":{\"2788\":1}}],[\"不进入方法即可悬浮提示方法\",{\"1\":{\"3208\":1}}],[\"不符合第一个条件\",{\"1\":{\"3119\":1}}],[\"不然arrays\",{\"1\":{\"3119\":1}}],[\"不得通过catch\",{\"1\":{\"4849\":1}}],[\"不得已使用继承的话\",{\"1\":{\"3464\":1}}],[\"不得不重新new一次\",{\"1\":{\"5032\":1}}],[\"不得不进行大规模重构\",{\"1\":{\"3469\":1}}],[\"不得不通过catchnumberformatexception来实现\",{\"1\":{\"3265\":1}}],[\"不得不将其他不需要的职责全都包含进来\",{\"1\":{\"2006\":1}}],[\"不得使用外键与级联\",{\"1\":{\"3385\":1}}],[\"不得使用\",{\"1\":{\"3208\":1}}],[\"不得手心冒点汗吗\",{\"1\":{\"3076\":1}}],[\"不再需要在变量声明的右边申明泛型\",{\"1\":{\"5670\":1}}],[\"不再建议用户使用\",{\"1\":{\"4520\":1}}],[\"不再继续缩进\",{\"1\":{\"3030\":1}}],[\"不再将图片存储到阿里云了\",{\"1\":{\"2701\":1}}],[\"不允许调用\",{\"1\":{\"6065\":1}}],[\"不允许访问某类异常\",{\"1\":{\"4839\":1}}],[\"不允许删除\",{\"1\":{\"4696\":2}}],[\"不允许类的静态导入\",{\"0\":{\"3992\":1}}],[\"不允许换行\",{\"0\":{\"3984\":1}}],[\"不允许\",{\"1\":{\"3983\":1,\"3985\":1}}],[\"不允许通配符\",{\"0\":{\"3982\":1}}],[\"不允许使用制表符缩进\",{\"1\":{\"3950\":1}}],[\"不允许直接拿hashmap与hashtable作为查询结果集的输出\",{\"1\":{\"3399\":1}}],[\"不允许写在业务代码目录下\",{\"1\":{\"3308\":1}}],[\"不允许在应用中自行显式创建线程\",{\"1\":{\"3158\":1}}],[\"不允许在程序任何地方中使用\",{\"1\":{\"3081\":1}}],[\"不允许为null\",{\"1\":{\"3132\":1,\"3133\":1,\"3137\":1,\"3142\":1,\"3143\":1}}],[\"不允许运行过程中重新赋值的局部变量\",{\"1\":{\"3074\":1}}],[\"不允许被覆写的方法\",{\"1\":{\"3074\":1}}],[\"不允许被继承的类\",{\"1\":{\"3074\":1}}],[\"不允许修改引用的域对象\",{\"1\":{\"3074\":1}}],[\"不允许修改方法签名\",{\"1\":{\"3043\":1}}],[\"不允许任何魔法值\",{\"1\":{\"3008\":1}}],[\"不允许与父类的成员变量名称相同\",{\"1\":{\"2997\":1}}],[\"不允许与其它代码块中的money命名相同\",{\"1\":{\"2997\":1}}],[\"不允许与本类成员变量同名\",{\"1\":{\"2997\":1}}],[\"不允许用继承\",{\"1\":{\"1018\":1}}],[\"不虚\",{\"1\":{\"2915\":1}}],[\"不互相干扰\",{\"1\":{\"2765\":1}}],[\"不定义实现\",{\"1\":{\"2737\":1}}],[\"不就可以了吗\",{\"1\":{\"2728\":1}}],[\"不让子类去覆盖\",{\"1\":{\"2677\":1}}],[\"不添加任何的配料\",{\"1\":{\"2674\":1}}],[\"不用换行\",{\"1\":{\"3025\":1}}],[\"不用多次编写\",{\"1\":{\"2582\":1}}],[\"不用重新初始化对象\",{\"1\":{\"1803\":1}}],[\"不但节约数据库表空间\",{\"1\":{\"3366\":1}}],[\"不但使条件语句变得很复杂\",{\"1\":{\"2487\":1}}],[\"不但会产出很多\",{\"1\":{\"2476\":1}}],[\"不但对应的子类很多\",{\"1\":{\"586\":1}}],[\"不停的变化\",{\"1\":{\"2471\":1}}],[\"不知道你有没有发现\",{\"1\":{\"2373\":1}}],[\"不知道接下来要走的是哪一个分支\",{\"1\":{\"433\":1}}],[\"不明白设计意图的人\",{\"1\":{\"2356\":1}}],[\"不友好\",{\"1\":{\"2356\":1}}],[\"不推荐使用\",{\"1\":{\"2311\":1,\"3398\":1}}],[\"不推荐\",{\"1\":{\"2308\":1}}],[\"不和陌生人说话\",{\"1\":{\"2248\":1}}],[\"不该有直接依赖关系的类之间\",{\"1\":{\"2784\":1}}],[\"不该知道的不要知道\",{\"1\":{\"2247\":1}}],[\"不该处理的传递给下一个对象完成\",{\"1\":{\"1937\":1}}],[\"不暴露类的属性成员\",{\"1\":{\"2183\":1}}],[\"不暴露其内部的结构\",{\"1\":{\"1506\":1}}],[\"不相近的功能放到了一个类中\",{\"1\":{\"2176\":1}}],[\"不相近的功能被分割到了多个类中\",{\"1\":{\"2175\":1}}],[\"不相近的功能不要放到同一个类中\",{\"1\":{\"2170\":1}}],[\"不对外泄露任何信息\",{\"1\":{\"2157\":1}}],[\"不够灵活\",{\"1\":{\"1767\":1}}],[\"不破坏封装性的前提下\",{\"1\":{\"1617\":1}}],[\"不利于系统性能提升\",{\"1\":{\"3294\":1}}],[\"不利于模块解耦\",{\"1\":{\"3076\":1}}],[\"不利于理解\",{\"1\":{\"3015\":1}}],[\"不利于程序的扩展\",{\"1\":{\"2416\":1}}],[\"不利于代码的扩展和维护\",{\"1\":{\"1965\":1}}],[\"不利于维护\",{\"1\":{\"1709\":1}}],[\"不利于管理\",{\"1\":{\"1641\":1}}],[\"不利于松耦合\",{\"1\":{\"1593\":1}}],[\"不利于在\",{\"1\":{\"1122\":1}}],[\"不管有木有异常抛出\",{\"1\":{\"5710\":1}}],[\"不管\",{\"1\":{\"4865\":1}}],[\"不管传送的是什么物品\",{\"1\":{\"1503\":1}}],[\"不管是不是自己的目标更新字段\",{\"1\":{\"3401\":1}}],[\"不管是rpc\",{\"1\":{\"3205\":1}}],[\"不管是阅读代码还是修改代码\",{\"1\":{\"2754\":1}}],[\"不管是创建一个对象还是十个对象\",{\"1\":{\"1341\":1}}],[\"不管是普通房子也好\",{\"1\":{\"703\":1}}],[\"不存在也可以加载进来\",{\"1\":{\"5517\":1}}],[\"不存在\",{\"1\":{\"1406\":2}}],[\"不会在方法外可见\",{\"1\":{\"5743\":1}}],[\"不会在原有代码交付物上进行任何形式的修改\",{\"1\":{\"3471\":1}}],[\"不会总是出现在一个重写了父类方法的方法中\",{\"1\":{\"4263\":1}}],[\"不会统计此列为null值的行\",{\"1\":{\"3380\":1}}],[\"不会影响到另一个模块或类\",{\"1\":{\"2778\":1}}],[\"不会轻易改变\",{\"1\":{\"2743\":1}}],[\"不会飞不会叫\",{\"1\":{\"2730\":1}}],[\"不会飞会叫\",{\"1\":{\"2730\":1}}],[\"不会飞的鸟还有很多\",{\"1\":{\"2727\":1}}],[\"不会飞翔\",{\"1\":{\"2535\":1}}],[\"不会再\",{\"1\":{\"2124\":1}}],[\"不会修改代码\",{\"1\":{\"1721\":1}}],[\"不会修改其他的代码\",{\"1\":{\"1251\":1}}],[\"不会随环境的改变而改变\",{\"1\":{\"1388\":1}}],[\"不可以在static环境中使用\",{\"1\":{\"5730\":1}}],[\"不可以对其进行添加元素操作\",{\"1\":{\"3101\":1}}],[\"不可变对象生成\",{\"1\":{\"6751\":1}}],[\"不可变对象指对象一旦被创建\",{\"1\":{\"5625\":1}}],[\"不可变是因为\",{\"1\":{\"5617\":1}}],[\"不可变性天生具备线程安全\",{\"1\":{\"5297\":1}}],[\"不可变性可以保证参数不可变\",{\"1\":{\"5295\":1}}],[\"不可变的特性可以使得\",{\"1\":{\"5290\":1}}],[\"不可变的好处\",{\"0\":{\"5288\":1}}],[\"不可变的值类型\",{\"1\":{\"4178\":1}}],[\"不可变\",{\"1\":{\"5286\":1,\"5301\":1,\"5304\":1}}],[\"不可查异常\",{\"1\":{\"4730\":1}}],[\"不可能\",{\"1\":{\"4229\":1}}],[\"不可能把某个应用要创建的对象写死在框架代码中\",{\"1\":{\"1333\":1}}],[\"不可用时长持续很久\",{\"1\":{\"3456\":1}}],[\"不可对其进行添加或者删除元素的操作\",{\"1\":{\"3102\":1}}],[\"不可共享\",{\"1\":{\"1388\":1}}],[\"不需暴露太多内部异常细节\",{\"1\":{\"4756\":1}}],[\"不需保持其他所有处理者的引用\",{\"1\":{\"1936\":1}}],[\"不需总是创建新对象\",{\"1\":{\"1376\":1}}],[\"不需要任何重量级或自己使用的依赖关系\",{\"1\":{\"6620\":1}}],[\"不需要任何接口定义的改动\",{\"1\":{\"2713\":1}}],[\"不需要使用反射\",{\"1\":{\"6364\":1}}],[\"不需要再使用class\",{\"1\":{\"6172\":1}}],[\"不需要通用的接口抽象\",{\"1\":{\"6054\":1}}],[\"不需要同步的stringbuilder效率更高\",{\"1\":{\"5688\":1}}],[\"不需要强制类型转换\",{\"1\":{\"5004\":1}}],[\"不需要在前面加\",{\"1\":{\"4249\":1}}],[\"不需要打印日志\",{\"1\":{\"3418\":1}}],[\"不需要进行参数校验\",{\"1\":{\"3206\":1}}],[\"不需要改动任何其他类的代码\",{\"1\":{\"2968\":1}}],[\"不需要了解太多其他模块或类的代码\",{\"1\":{\"2754\":1}}],[\"不需要依赖参数传递\",{\"1\":{\"2358\":1}}],[\"不需要实现接口\",{\"1\":{\"1850\":1,\"1901\":1}}],[\"不需要知道具体收听者\",{\"1\":{\"1734\":1}}],[\"不需要知道集合对象的底层表示\",{\"1\":{\"1506\":1}}],[\"不需要重新创建\",{\"1\":{\"1363\":1}}],[\"不需要事先在代码中写死要创建哪些对象\",{\"1\":{\"1341\":1}}],[\"不需要修改原代码\",{\"1\":{\"1285\":1}}],[\"不是线程安全的操作\",{\"1\":{\"5605\":1}}],[\"不是线程安全的\",{\"1\":{\"5305\":1}}],[\"不是说泛型变量string会在编译的时候变为object类型吗\",{\"1\":{\"5117\":1}}],[\"不是varchar超长字段\",{\"1\":{\"3364\":1}}],[\"不是唯一索引的字段\",{\"1\":{\"3364\":1}}],[\"不是频繁修改的字段\",{\"1\":{\"3364\":1}}],[\"不是\",{\"1\":{\"2188\":1,\"4111\":1}}],[\"不是直接朋友\",{\"1\":{\"2188\":1}}],[\"不是接口\",{\"1\":{\"1726\":1}}],[\"不是我们讲解的重点\",{\"1\":{\"1359\":1}}],[\"不是继承\",{\"1\":{\"529\":1}}],[\"不涉及我们要讲的理论知识\",{\"1\":{\"1359\":1}}],[\"不仅仅初学者很难理解\",{\"1\":{\"4843\":1}}],[\"不仅在软件行业\",{\"1\":{\"2772\":1}}],[\"不仅可以指导细粒度的类和类之间关系的设计\",{\"1\":{\"2753\":1}}],[\"不仅能应对当下的需求\",{\"1\":{\"2696\":1}}],[\"不仅能避免多线程同步问题\",{\"1\":{\"2330\":1}}],[\"不仅如此\",{\"1\":{\"1345\":1}}],[\"不仅会编译代码\",{\"1\":{\"405\":1}}],[\"不只是简单的\",{\"1\":{\"1254\":1}}],[\"不至于造成很多的类\",{\"1\":{\"913\":1}}],[\"不能根据某个参数来获取对应的实现类\",{\"1\":{\"6267\":1}}],[\"不能按需加载\",{\"1\":{\"6266\":1}}],[\"不能被实现类的对象调用\",{\"1\":{\"5697\":1}}],[\"不能隐式执行向下转型\",{\"1\":{\"5339\":1}}],[\"不能直接将\",{\"1\":{\"5339\":1}}],[\"不能再catch子句中使用泛型变量\",{\"1\":{\"5223\":1}}],[\"不能再扣\",{\"1\":{\"2454\":1}}],[\"不能抛出也不能捕获泛型类的对象\",{\"1\":{\"5216\":1}}],[\"不能实例化泛型类型\",{\"1\":{\"5186\":1}}],[\"不能\",{\"1\":{\"5166\":1,\"5638\":1}}],[\"不能放其它类型的元素\",{\"1\":{\"5009\":1}}],[\"不能为float\",{\"1\":{\"5112\":1}}],[\"不能为static\",{\"1\":{\"4306\":1}}],[\"不能为动词\",{\"1\":{\"3224\":1}}],[\"不能忽略\",{\"0\":{\"4228\":1}}],[\"不能假定每个阅读者都能熟记整个\",{\"1\":{\"4098\":1}}],[\"不能假设数据库里的数据是存在的\",{\"1\":{\"3315\":1}}],[\"不能受到外界环境的影响\",{\"1\":{\"3305\":1}}],[\"不能超过\",{\"1\":{\"3230\":1}}],[\"不能工作\",{\"1\":{\"3222\":1}}],[\"不能在主线程try\",{\"1\":{\"3176\":1}}],[\"不能使用关键字extends来继承某个\",{\"1\":{\"4663\":1}}],[\"不能使用其修改集合相关的方法\",{\"1\":{\"3108\":1}}],[\"不能使用过时的类或方法\",{\"1\":{\"3044\":1}}],[\"不能是小写l\",{\"1\":{\"3012\":1}}],[\"不能分离\",{\"1\":{\"2888\":2}}],[\"不能飞\",{\"1\":{\"2541\":1}}],[\"不能扣除积分\",{\"1\":{\"2454\":1}}],[\"不能发放奖品\",{\"1\":{\"2454\":3}}],[\"不能抽奖状态\",{\"1\":{\"2454\":1}}],[\"不能抽奖\",{\"1\":{\"2443\":1,\"2454\":1}}],[\"不能创建同一个类的多个对象\",{\"1\":{\"2401\":1}}],[\"不能出现其他表的增删改查\",{\"1\":{\"2003\":1}}],[\"不能保证每个请求一定被处理\",{\"1\":{\"1939\":1}}],[\"不能过多的或者不合理的使用外观模式\",{\"1\":{\"1150\":1}}],[\"不能很好地限制客户使用子系统类\",{\"1\":{\"1103\":1}}],[\"不能很好实现的管理的操作\",{\"1\":{\"843\":1}}],[\"不能充电~~\",{\"1\":{\"522\":1,\"542\":1}}],[\"不容易用继承的方法来增加构件的新功能\",{\"1\":{\"816\":1}}],[\"不容易限制容器中的构件\",{\"1\":{\"815\":1}}],[\"不过一般情况下\",{\"1\":{\"5743\":1}}],[\"不过一个是arraylist<string>泛型类型的\",{\"1\":{\"5091\":1}}],[\"不过在第一种情况\",{\"1\":{\"5130\":1}}],[\"不过会有个编译时警告\",{\"1\":{\"5129\":1}}],[\"不过会使得一些情况下的唯一主键变得不唯一\",{\"1\":{\"3360\":1}}],[\"不过当我们利用反射调用add\",{\"1\":{\"5094\":1}}],[\"不过你一定要确保抛出异常的条件与该异常的文档中描述的条件一致\",{\"1\":{\"4891\":1}}],[\"不过这种改动是\",{\"1\":{\"4096\":1}}],[\"不过这也是设计模式的通病\",{\"1\":{\"755\":1}}],[\"不过即使符合列限制的一行代码\",{\"1\":{\"4038\":1}}],[\"不过其包含的组成元素比组合模式多\",{\"1\":{\"1466\":1}}],[\"不过\",{\"1\":{\"1159\":1,\"2290\":1,\"2380\":1,\"2382\":1,\"2396\":1,\"2701\":1,\"2702\":1,\"2712\":1,\"2737\":1,\"5172\":1,\"6984\":1}}],[\"不过切记\",{\"1\":{\"445\":1}}],[\"不同\",{\"1\":{\"4001\":1}}],[\"不同浏览器对于url的最大长度限制略有不同\",{\"1\":{\"3230\":1}}],[\"不同业务的代码之间插入一个空行\",{\"1\":{\"3038\":1}}],[\"不同语义\",{\"1\":{\"3038\":1}}],[\"不同语言之间一直存在鄙视链\",{\"1\":{\"462\":1}}],[\"不同逻辑\",{\"1\":{\"3038\":1}}],[\"不同类型的可以创建多个对象\",{\"1\":{\"2410\":1}}],[\"不同条件下创建不同实例\",{\"1\":{\"956\":1}}],[\"不同的是\",{\"1\":{\"6098\":1}}],[\"不同的虚拟机对虚拟机的规范\",{\"1\":{\"5316\":1}}],[\"不同的类可能有不同的排序内容的方式\",{\"1\":{\"3998\":1}}],[\"不同的观众对他们的评价也不同\",{\"1\":{\"2929\":1}}],[\"不同的游客对同一个景点的评价可能不同\",{\"1\":{\"2928\":1}}],[\"不同的情绪有不同的行为\",{\"1\":{\"2415\":1}}],[\"不同的\",{\"1\":{\"2410\":1}}],[\"不同的进程间共享同一个对象\",{\"1\":{\"2401\":1}}],[\"不同的线程对应不同的对象\",{\"1\":{\"2396\":1}}],[\"不同的披萨不一样\",{\"1\":{\"1197\":1,\"1246\":1}}],[\"不同的实现\",{\"1\":{\"789\":1}}],[\"不同的执行顺序\",{\"1\":{\"734\":1}}],[\"不同性别和职业的男女\",{\"1\":{\"587\":1}}],[\"不同品牌和功率的汽车\",{\"1\":{\"587\":1}}],[\"不变\",{\"1\":{\"540\":1}}],[\"不满足或运算中的第一个条件\",{\"1\":{\"457\":1}}],[\"不断地复盘自己\",{\"1\":{\"154\":1}}],[\"不断调整自己的思维和行为\",{\"1\":{\"146\":1}}],[\"不要再浪费时间重写这些东西了\",{\"1\":{\"6896\":1}}],[\"不要忘了使你的部署实现自动化\",{\"1\":{\"6889\":1}}],[\"不要命名一些像\",{\"1\":{\"6842\":1}}],[\"不要返回\",{\"1\":{\"6824\":1}}],[\"不要共享可变对象的引用就可以了\",{\"1\":{\"5634\":1}}],[\"不要记录并抛出异常\",{\"0\":{\"4915\":1}}],[\"不要忽略异常\",{\"0\":{\"4909\":1}}],[\"不要捕获\",{\"0\":{\"4904\":1}}],[\"不要捕获了却什么都不处理而抛弃之\",{\"1\":{\"3268\":1}}],[\"不要担心因为一些程序可能不能正确地处理非\",{\"1\":{\"3969\":1}}],[\"不要更新无改\",{\"1\":{\"3402\":1}}],[\"不要写一个大而全的数据更新接口\",{\"1\":{\"3401\":1}}],[\"不要用resultclass当返回参数\",{\"1\":{\"3396\":1}}],[\"不要以为唯一索引影响了insert速度\",{\"1\":{\"3368\":1}}],[\"不要对单元测试存在如下误解\",{\"1\":{\"3325\":1}}],[\"不要抢模型和控制器的活\",{\"1\":{\"3245\":1}}],[\"不要将x放大\",{\"1\":{\"3243\":1}}],[\"不要将跟具体实现相关的方法搬移到接口中\",{\"1\":{\"2712\":1}}],[\"不要增加业务逻辑\",{\"1\":{\"3069\":1}}],[\"不要设定任何属性默认值\",{\"1\":{\"3059\":1}}],[\"不要在finally块中使用return\",{\"0\":{\"4929\":1},\"1\":{\"3271\":1}}],[\"不要在foreach循环里进行元素的remove\",{\"1\":{\"3114\":1}}],[\"不要在视图模板中加入任何复杂的逻辑运算\",{\"1\":{\"3245\":1}}],[\"不要在方法体内定义\",{\"1\":{\"3239\":1}}],[\"不要在方法里\",{\"1\":{\"2229\":1}}],[\"不要在其它表达式\",{\"1\":{\"3200\":1}}],[\"不要在括号前换行\",{\"1\":{\"3033\":1}}],[\"不要嫌名字长\",{\"1\":{\"2991\":1}}],[\"不要有依赖\",{\"1\":{\"2784\":1}}],[\"不要暴露任何实现细节\",{\"1\":{\"2713\":1}}],[\"不要生搬硬套\",{\"1\":{\"2593\":1}}],[\"不要使用异常控制程序的流程\",{\"0\":{\"4927\":1}}],[\"不要使用不稳定的工具包或者utils类\",{\"1\":{\"3438\":1}}],[\"不要使用count\",{\"1\":{\"3380\":1}}],[\"不要使用windows格式\",{\"1\":{\"3035\":1}}],[\"不要使用一个常量类维护所有常量\",{\"1\":{\"3015\":1}}],[\"不要使用\",{\"1\":{\"2302\":1,\"3397\":1}}],[\"不要破坏继承体系\",{\"1\":{\"2250\":1}}],[\"不要和那些不需要变化的代码混在一起\",{\"1\":{\"2211\":1}}],[\"不要覆盖基类中已经实现的方法\",{\"1\":{\"1322\":1}}],[\"不要让类继承具体类\",{\"1\":{\"1321\":1}}],[\"不要直接\",{\"1\":{\"1320\":1}}],[\"不要被人发现\",{\"1\":{\"445\":1}}],[\"不要只想着抱怨\",{\"1\":{\"152\":1}}],[\"不要因为一次\",{\"1\":{\"146\":1}}],[\"不把手机带上床\",{\"1\":{\"138\":1}}],[\"在你的\",{\"1\":{\"6875\":1}}],[\"在你这样做时\",{\"1\":{\"4925\":1}}],[\"在自动化单元测试中创建测试对象\",{\"1\":{\"6635\":1}}],[\"在云上进行客户端跨平台透明加密\",{\"1\":{\"6600\":1}}],[\"在wildfly中作为网络层使用\",{\"1\":{\"6540\":1}}],[\"在glassfish中作为网络层使用\",{\"1\":{\"6537\":1}}],[\"在getter\",{\"1\":{\"3069\":1}}],[\"在商用硬件集群上用来进行大规模数据存储的开源软件框架\",{\"1\":{\"6486\":1}}],[\"在频繁使用时性能更佳\",{\"1\":{\"6459\":1}}],[\"在频繁调用出错的情况下\",{\"1\":{\"3278\":1}}],[\"在聚集查询和近似查询方面表现不俗\",{\"1\":{\"6394\":1}}],[\"在聚合类中\",{\"1\":{\"1556\":1}}],[\"在分布式系统中的数据库看起来就像是只有一个数据源\",{\"1\":{\"6391\":1}}],[\"在分发时只需要一个个检查发送的目的地即可\",{\"1\":{\"1503\":1}}],[\"在传统角色的基础上增加了另外一层抽象\",{\"1\":{\"6388\":1}}],[\"在集群内动态管理应用程序的框架\",{\"1\":{\"6301\":1}}],[\"在各自辉煌之后还在一直使用\",{\"1\":{\"6280\":1}}],[\"在遍历的时候\",{\"1\":{\"6191\":1}}],[\"在drivermanager中有一个静态代码块如下\",{\"1\":{\"6177\":1}}],[\"在dao层\",{\"1\":{\"3418\":1}}],[\"在meta\",{\"1\":{\"6232\":1}}],[\"在mysql的jar包mysql\",{\"1\":{\"6168\":1}}],[\"在main参数中\",{\"1\":{\"2993\":1}}],[\"在加载某接口时\",{\"1\":{\"6160\":1}}],[\"在加载类和结构到虚拟机后\",{\"1\":{\"5315\":1}}],[\"在模板中替换表达式的工具\",{\"1\":{\"6618\":1}}],[\"在模板方法模式的父类中\",{\"1\":{\"2673\":1}}],[\"在模块化设计中这个机制尤其重要\",{\"1\":{\"6141\":1}}],[\"在classdefiner\",{\"1\":{\"6120\":1}}],[\"在通过getmethods方法获取method对象时\",{\"1\":{\"6016\":1}}],[\"在反射包中\",{\"1\":{\"5846\":1}}],[\"在构造方法中的区别\",{\"0\":{\"5725\":1}}],[\"在覆盖\",{\"1\":{\"5443\":1}}],[\"在很多情况下\",{\"1\":{\"5396\":1}}],[\"在很多业务场景中符合开闭原则\",{\"1\":{\"493\":1}}],[\"在将一个参数传入一个方法时\",{\"1\":{\"5333\":1}}],[\"在新窗口打开\",{\"1\":{\"5298\":1,\"5337\":1,\"5350\":1,\"5356\":1,\"5565\":1,\"5576\":1}}],[\"在新进程中也会存在且只能存在一个对象\",{\"1\":{\"2390\":1}}],[\"在看下面的定义\",{\"1\":{\"5218\":1}}],[\"在泛型方法中使用的t是自己在方法中定义的\",{\"1\":{\"5214\":1}}],[\"在取出时会发生类型转换异常\",{\"1\":{\"5197\":1}}],[\"在取值范围之内\",{\"1\":{\"3229\":1}}],[\"在子类中\",{\"1\":{\"5152\":1}}],[\"在子类里具体设定行为对象\",{\"1\":{\"2530\":1}}],[\"在我们用list2取值的时候不会出现classcastexception\",{\"1\":{\"5143\":1}}],[\"在我们的例子中\",{\"1\":{\"772\":1}}],[\"在第一次时调用\",{\"1\":{\"6108\":1}}],[\"在第一个单词之前有一个\",{\"1\":{\"4249\":1}}],[\"在第4行代码的时候\",{\"1\":{\"5140\":1}}],[\"在指定泛型的情况下\",{\"1\":{\"5111\":1}}],[\"在指挥者中不涉及具体产品的信息\",{\"1\":{\"684\":1}}],[\"在接口上定义泛型\",{\"1\":{\"5020\":1}}],[\"在接口路径中不要加入版本号\",{\"1\":{\"3237\":1}}],[\"在抛出mybusinessexception\",{\"1\":{\"4897\":1}}],[\"在许可的条件下\",{\"1\":{\"4891\":1}}],[\"在禁止并发修改的情况下\",{\"1\":{\"4888\":1}}],[\"在null被禁止的情况下参数值为null\",{\"1\":{\"4884\":1}}],[\"在知道该如何处理的情况下了捕获异常\",{\"1\":{\"4807\":1}}],[\"在恰当的级别处理问题\",{\"1\":{\"4807\":1}}],[\"在前面的代码中用了system\",{\"1\":{\"4788\":1}}],[\"在前后端交互的json格式数据中\",{\"1\":{\"3227\":1}}],[\"在前后端交互时起到了中间人的作用\",{\"1\":{\"1570\":1}}],[\"在try语句块中是按照顺序来执行的\",{\"1\":{\"4778\":1}}],[\"在testmethodannotation中添加main方法进行测试\",{\"1\":{\"4646\":1}}],[\"在timestamp属性fasttime和nanos分别存储秒和纳秒信息\",{\"1\":{\"3081\":1}}],[\"在定义注解类时使用了\",{\"1\":{\"4589\":1}}],[\"在定义接口的时候\",{\"1\":{\"2713\":1}}],[\"在每个测试方法运行后都会被调用\",{\"1\":{\"4482\":1}}],[\"在每个测试方法运行前都会被调用\",{\"1\":{\"4482\":1}}],[\"在何处使用\",{\"0\":{\"4256\":1}}],[\"在何处换行\",{\"0\":{\"4040\":1}}],[\"在测试中并不使用的\",{\"1\":{\"4475\":1}}],[\"在测试类里所有用例运行之后\",{\"1\":{\"4301\":1}}],[\"在测试代码中\",{\"1\":{\"4232\":1}}],[\"在测试时用spring这样的di框架注入一个本地\",{\"1\":{\"3305\":1}}],[\"在合理范围之内\",{\"1\":{\"4111\":1}}],[\"在注解和\",{\"1\":{\"4089\":1}}],[\"在注释代码上方\",{\"1\":{\"3247\":1}}],[\"在注释中用fixme标记某代码是错误的\",{\"1\":{\"3222\":1}}],[\"在数组初始化的两个花括号的内侧\",{\"1\":{\"4087\":1}}],[\"在数据库中不能使用物理删除操作\",{\"1\":{\"3360\":1}}],[\"在数据库中\",{\"1\":{\"3315\":1}}],[\"在以上类中我们可以看到\",{\"1\":{\"4361\":1}}],[\"在以双斜线\",{\"1\":{\"4085\":1}}],[\"在以下位置出现\",{\"1\":{\"4069\":1}}],[\"在任何内容与以双斜线\",{\"1\":{\"4084\":1}}],[\"在连续换行的多行代码中\",{\"1\":{\"4056\":1}}],[\"在极少数情况下可能需要\",{\"1\":{\"4034\":1}}],[\"在后续\",{\"1\":{\"4003\":1}}],[\"在本例中\",{\"1\":{\"5030\":1}}],[\"在本文档中\",{\"1\":{\"3934\":1}}],[\"在本规约中\",{\"1\":{\"3534\":1}}],[\"在本地调试时会使用各子项目指定的版本号\",{\"1\":{\"3433\":1}}],[\"在做无障碍产品设计时\",{\"1\":{\"3474\":1}}],[\"在维护代码时\",{\"1\":{\"3467\":1}}],[\"在维护一个遗留的大型系统时\",{\"1\":{\"1149\":1}}],[\"在需求分析阶段\",{\"1\":{\"3451\":1}}],[\"在需要时声明\",{\"0\":{\"4110\":1}}],[\"在需要时进行恢复\",{\"1\":{\"1060\":1}}],[\"在需要的时候提供这些内部状态给发起人\",{\"1\":{\"1631\":1}}],[\"在需要表示一个对象整体与部分的层次结构的场合\",{\"1\":{\"871\":1}}],[\"在线上生产环境\",{\"1\":{\"3446\":1}}],[\"在线程\",{\"1\":{\"2395\":2}}],[\"在linux服务器上请通过变更\",{\"1\":{\"3443\":1}}],[\"在long取值范围内\",{\"1\":{\"3229\":1}}],[\"在lock对象的lock方法实现中可能抛出unchecked异常\",{\"1\":{\"3167\":1}}],[\"在lock方法与try代码块之间的方法调用抛出异常\",{\"1\":{\"3167\":1}}],[\"在规定的版本号之后加\",{\"1\":{\"3431\":1}}],[\"在升级时\",{\"1\":{\"3429\":1}}],[\"在表查询中\",{\"1\":{\"3394\":1}}],[\"在预发布环境做数据库变更后\",{\"1\":{\"3388\":1}}],[\"在某业务中\",{\"1\":{\"3388\":1}}],[\"在某些情况下可以卸载这些生成的类\",{\"1\":{\"6120\":1}}],[\"在某些集合中\",{\"1\":{\"3090\":1}}],[\"在某些场景下\",{\"1\":{\"1255\":1}}],[\"在springboot的自动装配过程中\",{\"1\":{\"6218\":1}}],[\"在service层出现异常时\",{\"1\":{\"3418\":1}}],[\"在sql\",{\"1\":{\"3395\":1}}],[\"在sql语句中\",{\"1\":{\"3383\":1}}],[\"在sublist场景中\",{\"1\":{\"3103\":1}}],[\"在建索引时\",{\"1\":{\"3376\":1}}],[\"在建筑界\",{\"1\":{\"2820\":1}}],[\"在建筑\",{\"1\":{\"2772\":1}}],[\"在优化阶段即可读取到数据\",{\"1\":{\"3375\":1}}],[\"在varchar字段上建立索引时\",{\"1\":{\"3370\":1}}],[\"在存储的时候\",{\"1\":{\"3356\":1}}],[\"在项目提测前完成单元测试\",{\"1\":{\"3319\":1}}],[\"在项目中不用或者少用继承关系\",{\"1\":{\"2740\":1}}],[\"在项目中这样写代码的时候\",{\"1\":{\"482\":1}}],[\"在基础技术部的内部单元测试中\",{\"1\":{\"3316\":1}}],[\"在工程规约的应用分层中提到的dao层\",{\"1\":{\"3309\":1}}],[\"在调用泛型方法时\",{\"1\":{\"5109\":1}}],[\"在调用rpc\",{\"1\":{\"3274\":1}}],[\"在调试过程中\",{\"1\":{\"2268\":1}}],[\"在解析字符串形式的数字时\",{\"1\":{\"3265\":1,\"4849\":1}}],[\"在无法更加具体确定的错误场景中\",{\"1\":{\"3260\":1}}],[\"在无泛型限制定义的集合赋值给泛型限制的集合时\",{\"1\":{\"3112\":1}}],[\"在获取第三方服务错误码时\",{\"1\":{\"3259\":1}}],[\"在翻页场景中\",{\"1\":{\"3232\":1}}],[\"在服务器更新资源\",{\"1\":{\"3224\":1}}],[\"在服务器新建一个资源\",{\"1\":{\"3224\":1}}],[\"在上述代码中调用方法\",{\"1\":{\"6020\":1}}],[\"在上方详细说明\",{\"1\":{\"3217\":1}}],[\"在上面的程序中\",{\"1\":{\"5121\":1}}],[\"在上面的实例中\",{\"1\":{\"796\":1}}],[\"在上面\",{\"1\":{\"5096\":1}}],[\"在上面讲的工厂模式中\",{\"1\":{\"1333\":1}}],[\"在方法中声明一个异常\",{\"1\":{\"4742\":1}}],[\"在方法中删除未使用的参数声明与内部变量\",{\"1\":{\"3216\":1}}],[\"在方法执行抛出异常时\",{\"1\":{\"3062\":1}}],[\"在被注释语句上方另起一行\",{\"1\":{\"3212\":1}}],[\"在被访问的类里面加一个对外提供接待访问者的接口\",{\"1\":{\"2932\":1}}],[\"在设置模板时\",{\"1\":{\"3210\":1}}],[\"在设计评审阶段\",{\"1\":{\"3318\":1}}],[\"在设计接口的时候\",{\"1\":{\"2713\":1}}],[\"在设计模式中\",{\"1\":{\"646\":1}}],[\"在ide中\",{\"1\":{\"3208\":1,\"5121\":1}}],[\"在ide编辑窗口中\",{\"1\":{\"3208\":1}}],[\"在if\",{\"1\":{\"3187\":1}}],[\"在高并发访问下\",{\"1\":{\"3443\":1}}],[\"在高并发场景中\",{\"1\":{\"3190\":1}}],[\"在高并发情况下\",{\"1\":{\"3106\":1}}],[\"在finally中无法解锁\",{\"1\":{\"3167\":1}}],[\"在利用\",{\"1\":{\"3157\":1}}],[\"在arraylist\",{\"1\":{\"3107\":1}}],[\"在jdbc4\",{\"1\":{\"6164\":1}}],[\"在jdk9中允许有private方法\",{\"1\":{\"5698\":1}}],[\"在jdk9中允许有私有普通方法\",{\"1\":{\"5696\":1}}],[\"在jdk8可以有default方法\",{\"1\":{\"5696\":1,\"5698\":1}}],[\"在jdk8中可以有静态方法\",{\"1\":{\"5697\":1}}],[\"在jdk8中\",{\"1\":{\"3080\":1}}],[\"在jdk\",{\"1\":{\"4586\":2}}],[\"在jdk7之后\",{\"1\":{\"3177\":1}}],[\"在jdk7及以上\",{\"1\":{\"3121\":1}}],[\"在jdk7版本及以上\",{\"1\":{\"3119\":1}}],[\"在jdk中\",{\"1\":{\"2999\":1}}],[\"在junit中\",{\"1\":{\"4410\":1}}],[\"在junit4中\",{\"1\":{\"4293\":1}}],[\"在junit3中\",{\"1\":{\"4293\":1}}],[\"在java应用中程序以svg格式显示\",{\"1\":{\"6454\":1}}],[\"在java8中新增一个默认的方法实现\",{\"1\":{\"6048\":1}}],[\"在java中提供了一些异常用来描述经常发生的错误\",{\"1\":{\"4817\":1}}],[\"在java中\",{\"1\":{\"4742\":1,\"5136\":1,\"5846\":1}}],[\"在java\",{\"1\":{\"3096\":1,\"6358\":1}}],[\"在闰年\",{\"1\":{\"3085\":1}}],[\"在日志输出时\",{\"1\":{\"3287\":1}}],[\"在日期格式中分清楚大写的m和小写的m\",{\"1\":{\"3079\":1}}],[\"在日常应用中\",{\"1\":{\"2594\":1}}],[\"在日常编码工作中\",{\"1\":{\"1096\":1}}],[\"在更新其它字段时又附带更新了此字段\",{\"1\":{\"3059\":1}}],[\"在精确计算或值比较的场景中可能会导致业务逻辑异常\",{\"1\":{\"3056\":1}}],[\"在变量比较多的情况下\",{\"1\":{\"3037\":1}}],[\"在括号前不要换行\",{\"1\":{\"3030\":1}}],[\"在逗号后进行\",{\"1\":{\"3030\":1}}],[\"在进行类型强制转换时\",{\"1\":{\"3028\":1}}],[\"在进程使用完这个对象之后\",{\"1\":{\"2404\":1}}],[\"在进程间都只有一份对象存在\",{\"1\":{\"2404\":1}}],[\"在进程间是不唯一的\",{\"1\":{\"2390\":1}}],[\"在右大括号后直接结束\",{\"1\":{\"3025\":1}}],[\"在命名时要体现出具体模式\",{\"1\":{\"3001\":1}}],[\"在命名模式中\",{\"1\":{\"743\":1}}],[\"在常量与变量命名时\",{\"1\":{\"3000\":1}}],[\"在同一方法体中\",{\"1\":{\"2997\":1}}],[\"在延伸的信息中\",{\"1\":{\"2982\":1}}],[\"在访问者模式中\",{\"1\":{\"2940\":1}}],[\"在代码实现时\",{\"1\":{\"2894\":1}}],[\"在代码中\",{\"1\":{\"1832\":1,\"2172\":1,\"2350\":1,\"2396\":1,\"2410\":1,\"2850\":1}}],[\"在组合关系中\",{\"1\":{\"2879\":1}}],[\"在内存中有且只有一个与之对应的class对象来描述其类型信息\",{\"1\":{\"5829\":1}}],[\"在内存中动态构建子类\",{\"1\":{\"1906\":1}}],[\"在内的各种标准\",{\"1\":{\"2820\":1}}],[\"在完成了第一版的程序后\",{\"1\":{\"2801\":1}}],[\"在最开始就可以确定\",{\"1\":{\"5796\":1}}],[\"在最后一个语句组中\",{\"1\":{\"4124\":1}}],[\"在最好的情况下\",{\"1\":{\"4096\":1}}],[\"在最坏的情况下\",{\"1\":{\"4096\":1}}],[\"在最底层\",{\"1\":{\"2791\":1}}],[\"在最小原型中\",{\"1\":{\"1349\":1}}],[\"在有依赖关系的两个模块或类之间\",{\"1\":{\"2778\":1}}],[\"在有些情况下\",{\"1\":{\"1809\":1}}],[\"在有些系统中\",{\"1\":{\"1738\":1}}],[\"在引入中间层之后\",{\"1\":{\"2764\":1}}],[\"在引入数据存储中间层之前\",{\"1\":{\"2764\":1}}],[\"在刚刚这个场景中\",{\"1\":{\"2729\":1}}],[\"在开发过程中注意规避此风险\",{\"1\":{\"3181\":1}}],[\"在开发完之后\",{\"1\":{\"2719\":1}}],[\"在开发的时候\",{\"1\":{\"2715\":1}}],[\"在开始前先提一个问题\",{\"1\":{\"449\":1}}],[\"在平时的开发中特别经常被用到\",{\"1\":{\"2691\":1}}],[\"在具体子类中可以继承或重写它\",{\"1\":{\"2656\":1}}],[\"在具体的软件幵发中\",{\"1\":{\"2592\":1}}],[\"在抽象类中已经实现\",{\"1\":{\"2656\":1,\"2657\":1}}],[\"在抽象类中声明\",{\"1\":{\"2655\":1}}],[\"在其巨著\",{\"1\":{\"2597\":1}}],[\"在其中看到别人设计模式\",{\"1\":{\"2566\":1}}],[\"在运行时通过dsl\",{\"1\":{\"6298\":1}}],[\"在运行时可以接收任何修改\",{\"1\":{\"5993\":1}}],[\"在运行时动态选择具体要执行的行为\",{\"1\":{\"2560\":1}}],[\"在运行开始之前就可以确定\",{\"1\":{\"5796\":1}}],[\"在运行结果中\",{\"1\":{\"4296\":1}}],[\"在运用迪米特法则时要注意以下\",{\"1\":{\"2178\":1}}],[\"在程序中可以包含不同类型的pair\",{\"1\":{\"5102\":1}}],[\"在程序中定义了一个arraylist泛型类型实例化为integer对象\",{\"1\":{\"5094\":1}}],[\"在程序中我们定义实体\",{\"1\":{\"2881\":1}}],[\"在程序上作出分门别类的判断\",{\"1\":{\"3267\":1}}],[\"在程序设计中\",{\"1\":{\"2555\":1}}],[\"在程序员的世界里\",{\"1\":{\"462\":1}}],[\"在添加一种功能时\",{\"1\":{\"2462\":1}}],[\"在添加一种状态时\",{\"1\":{\"2462\":1}}],[\"在另外一个线程\",{\"1\":{\"2395\":1}}],[\"在系统中不出现重复代码的情况\",{\"1\":{\"3467\":1}}],[\"在系统中尽量使用\",{\"1\":{\"530\":1}}],[\"在系统设计初期\",{\"1\":{\"2362\":1}}],[\"在函数中直接调用就可以了\",{\"1\":{\"2358\":1}}],[\"在阅读代码的时候\",{\"1\":{\"2358\":2}}],[\"在静态代码块中\",{\"1\":{\"2293\":1}}],[\"在单例模式中大多数都是调用\",{\"1\":{\"2290\":1}}],[\"在并发测试中\",{\"1\":{\"2268\":1}}],[\"在计算机系统中\",{\"1\":{\"2258\":1}}],[\"在计算机软硬件中也有相关例子\",{\"1\":{\"1928\":1}}],[\"在对这个模块进行测试时\",{\"1\":{\"4467\":1}}],[\"在对其他类的引用上\",{\"1\":{\"2182\":1}}],[\"在对象被最终销毁之前\",{\"1\":{\"1345\":1}}],[\"在类加载的时候\",{\"1\":{\"5848\":1}}],[\"在类型擦除中替换为类型参数的上界或者下界\",{\"1\":{\"5082\":1}}],[\"在类型擦除中直接被替换为object\",{\"1\":{\"5079\":1}}],[\"在类型和变量的定义之间\",{\"1\":{\"4086\":1}}],[\"在类型对齐时\",{\"1\":{\"3188\":1}}],[\"在类中删除未使用的任何字段和方法\",{\"1\":{\"3216\":1}}],[\"在类中找个隐蔽的位置插入下面这段代码\",{\"1\":{\"437\":1}}],[\"在类进行初始化时\",{\"1\":{\"2324\":1}}],[\"在类装载时就实例化\",{\"1\":{\"2290\":1}}],[\"在类装载的时候就完成实例化\",{\"1\":{\"2289\":1}}],[\"在类的设计上\",{\"1\":{\"2181\":1}}],[\"在类的结构设计上\",{\"1\":{\"2180\":1}}],[\"在类的划分上\",{\"1\":{\"2179\":1}}],[\"在可维护性和可读性上确实要好很多\",{\"1\":{\"2177\":1}}],[\"在面向对象编程中\",{\"1\":{\"2721\":1}}],[\"在面向对象的程序设计中\",{\"1\":{\"2137\":1}}],[\"在面向对象程序设计过程中\",{\"1\":{\"1372\":1,\"2635\":1}}],[\"在适当的情况下\",{\"1\":{\"2107\":1}}],[\"在使用静态变量和方法时不用再指明\",{\"1\":{\"5500\":1}}],[\"在使用这些基本类型对应的包装类型时\",{\"1\":{\"5280\":1}}],[\"在使用泛型的时候\",{\"1\":{\"5040\":1}}],[\"在使用\",{\"1\":{\"3955\":1}}],[\"在使用平台资源\",{\"1\":{\"3345\":1}}],[\"在使用正则表达式时\",{\"1\":{\"3239\":1}}],[\"在使用尝试机制来获取锁的方式中\",{\"1\":{\"3171\":1}}],[\"在使用阻塞等待获取锁的方式中\",{\"1\":{\"3167\":1}}],[\"在使用集合元素时\",{\"1\":{\"3112\":1}}],[\"在使用java\",{\"1\":{\"3092\":1,\"3096\":1}}],[\"在使用继承时\",{\"1\":{\"2105\":1}}],[\"在使用中\",{\"1\":{\"1427\":1}}],[\"在所有的对象\",{\"1\":{\"2104\":1}}],[\"在编写代码的时候\",{\"1\":{\"2706\":1}}],[\"在编译时\",{\"1\":{\"5747\":1}}],[\"在编译时已经定义\",{\"1\":{\"2218\":1}}],[\"在编译之后还是会变成throwable\",{\"1\":{\"5227\":1}}],[\"在编译后的class文件中便不再存在\",{\"1\":{\"4516\":1}}],[\"在编译阶段正常\",{\"1\":{\"3438\":1}}],[\"在编译原理中\",{\"1\":{\"1454\":1}}],[\"在编程中\",{\"1\":{\"2100\":1}}],[\"在水中行\",{\"1\":{\"2025\":1}}],[\"在天空上运行\",{\"1\":{\"2025\":1}}],[\"在公路上运行\",{\"1\":{\"2016\":1,\"2025\":1}}],[\"在客户端之间进行消息传递\",{\"1\":{\"6495\":1}}],[\"在客户端的也需要变化\",{\"1\":{\"1963\":1}}],[\"在客户端和目标对象之间增加一个代理对象\",{\"1\":{\"1820\":1}}],[\"在职责链模式中\",{\"1\":{\"1930\":1}}],[\"在一定程度上降低了系统的耦合度\",{\"1\":{\"1817\":1}}],[\"在一个\",{\"1\":{\"4768\":1}}],[\"在一个switch块内\",{\"1\":{\"3184\":2}}],[\"在一个抽象类公开定义了执行它的方法的模板\",{\"1\":{\"2638\":1}}],[\"在一个对象中修改该成员变量会影响到另一个对象的该成员变量值\",{\"1\":{\"1781\":1}}],[\"在一个页面中展示出学校的院系组成\",{\"1\":{\"843\":1,\"1528\":1}}],[\"在实际使用中可能会出现异常\",{\"1\":{\"3119\":1}}],[\"在实际应用中\",{\"1\":{\"2594\":1}}],[\"在实际的项目开发中\",{\"1\":{\"2742\":1}}],[\"在实际的项目中相对也不常用\",{\"1\":{\"1160\":1}}],[\"在实际的项目中也比较常用\",{\"1\":{\"1160\":1}}],[\"在实际的开发中\",{\"1\":{\"2350\":1}}],[\"在实际开发中\",{\"1\":{\"2302\":1,\"2308\":1,\"2318\":1}}],[\"在实际编程中\",{\"1\":{\"2120\":1}}],[\"在实现深克隆的时候可能需要比较复杂的代码\",{\"1\":{\"1805\":1}}],[\"在该类的\",{\"1\":{\"1799\":1}}],[\"在该方式中\",{\"1\":{\"823\":1,\"826\":1}}],[\"在性能上比直接\",{\"1\":{\"1743\":1}}],[\"在现实世界中\",{\"1\":{\"1667\":1}}],[\"在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况\",{\"1\":{\"2485\":1}}],[\"在现实生活中\",{\"1\":{\"485\":1,\"586\":1,\"806\":1,\"875\":1,\"1568\":1,\"1927\":1,\"2928\":1}}],[\"在大战\",{\"1\":{\"1638\":1}}],[\"在创建新的对象时\",{\"1\":{\"1766\":1}}],[\"在创建\",{\"1\":{\"1603\":1}}],[\"在创建对象的时候就设置好了\",{\"1\":{\"1388\":1}}],[\"在语法树中的每个表达式节点类都是相似的\",{\"1\":{\"1460\":1}}],[\"在享元模式这样理解\",{\"1\":{\"1438\":1}}],[\"在启动的时候会根据代码自动地加载类\",{\"1\":{\"1364\":1}}],[\"在产品类型较多时\",{\"1\":{\"1181\":1}}],[\"在不指定泛型的情况下\",{\"1\":{\"5110\":1}}],[\"在不创建新的类型的情况下\",{\"1\":{\"4997\":1}}],[\"在不同的场合下\",{\"1\":{\"2749\":1}}],[\"在不同的应用场景下会有不同的解读\",{\"1\":{\"2694\":1}}],[\"在不同的口味点餐子类中具体实现\",{\"1\":{\"1241\":1}}],[\"在不破坏封装性的前提下\",{\"1\":{\"2627\":1}}],[\"在不修改目标对象的功能前提下\",{\"1\":{\"1846\":1}}],[\"在不修改客户端代码的情况下更换和添加新的具体产品类\",{\"1\":{\"1177\":1}}],[\"在不改变集合元素的前提下\",{\"1\":{\"2623\":1}}],[\"在不改变原有对象的情况下\",{\"1\":{\"879\":1}}],[\"在不改变现有对象结构的情况下\",{\"1\":{\"877\":1}}],[\"在简单工厂模式中创建实例的方法通常为静态\",{\"1\":{\"1172\":1}}],[\"在这个子类中\",{\"1\":{\"5152\":1}}],[\"在这个例子中\",{\"1\":{\"4467\":1,\"5091\":1}}],[\"在这些规则允许以分号\",{\"1\":{\"4014\":1}}],[\"在这些连接对象中有我们需要的则直接拿来用\",{\"1\":{\"1375\":1}}],[\"在这种关系中\",{\"1\":{\"2899\":1}}],[\"在这种情况下\",{\"1\":{\"1781\":1,\"4034\":1,\"4260\":1}}],[\"在这里大家可能会疑问\",{\"1\":{\"2819\":1}}],[\"在这里\",{\"1\":{\"1355\":1,\"4464\":1}}],[\"在这三种细分的工厂模式中\",{\"1\":{\"1160\":1}}],[\"在这段时间里专注于一件事\",{\"1\":{\"150\":1}}],[\"在今天的讲解中\",{\"1\":{\"1159\":1,\"1325\":1,\"1349\":1}}],[\"在增加或者删除调料种类时\",{\"1\":{\"914\":1}}],[\"在安全式的组合模式中不声明访问和管理子类的接口\",{\"1\":{\"818\":1}}],[\"在透明式的组合模式中抽象构件还声明访问和管理子类的接口\",{\"1\":{\"818\":1}}],[\"在软件工程领域\",{\"1\":{\"6820\":1}}],[\"在软件系统中\",{\"1\":{\"1730\":1}}],[\"在软件设计中\",{\"1\":{\"741\":1,\"1810\":1}}],[\"在软件设计中也可能出现\",{\"1\":{\"486\":1}}],[\"在软件开发界\",{\"1\":{\"2820\":1}}],[\"在软件开发过程中\",{\"1\":{\"876\":1,\"2415\":1}}],[\"在软件开发过程中有时需要创建一个复杂的对象\",{\"1\":{\"661\":1}}],[\"在软件开发系统中\",{\"1\":{\"740\":1}}],[\"在软件开发中也常常遇到类似的情况\",{\"1\":{\"2486\":1}}],[\"在软件开发中也是这样\",{\"1\":{\"806\":1}}],[\"在软件开发中\",{\"1\":{\"657\":1,\"1173\":1,\"1464\":1,\"2696\":1}}],[\"在\",{\"0\":{\"4858\":1},\"1\":{\"564\":1,\"574\":1,\"575\":1,\"576\":1,\"577\":1,\"1122\":1,\"1126\":1,\"1159\":1,\"1340\":1,\"1343\":1,\"1436\":2,\"1500\":1,\"1617\":1,\"1709\":1,\"1879\":1,\"1981\":1,\"2065\":1,\"2105\":1,\"2334\":1,\"2703\":1,\"2818\":1,\"2822\":1,\"2825\":1,\"2867\":1,\"2874\":1,\"2880\":1,\"2894\":1,\"2900\":1,\"3046\":1,\"3937\":1,\"3990\":1,\"4052\":1,\"4058\":1,\"4083\":1,\"4124\":1,\"4163\":1,\"4481\":1,\"4485\":1,\"4843\":1,\"4895\":1,\"5270\":1,\"5378\":1,\"5379\":1,\"5672\":1,\"5775\":1,\"5780\":1,\"5784\":1,\"5819\":1,\"6821\":2,\"6876\":1,\"6940\":1}}],[\"在拿到这个对象后\",{\"1\":{\"465\":1}}],[\"在限定了上面的修饰语只调用\",{\"1\":{\"452\":1}}],[\"在失败中总结经验\",{\"1\":{\"145\":1,\"146\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"15\":1}}],[\"做的事情就是封装了我们的接口类型和类加载器\",{\"1\":{\"6188\":1}}],[\"做相应的小型重构\",{\"1\":{\"2755\":1}}],[\"做任何事情都要讲求一个\",{\"1\":{\"2716\":1}}],[\"做事\",{\"1\":{\"2637\":2}}],[\"做事情的方法更灵活了\",{\"1\":{\"144\":1}}],[\"做个对比\",{\"1\":{\"2401\":1}}],[\"做咖啡\",{\"1\":{\"1589\":1}}],[\"做一个产品展示网站\",{\"1\":{\"1408\":1}}],[\"做各种初始化操作的时候\",{\"1\":{\"1254\":1}}],[\"做成抽象的\",{\"1\":{\"850\":1}}],[\"做早餐\",{\"1\":{\"138\":1}}],[\"久而久之\",{\"1\":{\"144\":1}}],[\"汲取他人身上的闪光点\",{\"1\":{\"142\":1}}],[\"补己之短\",{\"1\":{\"142\":1}}],[\"警醒自己的缺点\",{\"1\":{\"141\":1}}],[\"警告容器\",{\"1\":{\"58\":1,\"64\":1}}],[\"欣赏别人的优点\",{\"1\":{\"141\":1}}],[\"踏踏实实地完成运动任务\",{\"1\":{\"140\":1}}],[\"从最近发布不久的\",{\"1\":{\"6744\":1}}],[\"从最基本的层面增强开发流程\",{\"1\":{\"6368\":1}}],[\"从xsl\",{\"1\":{\"6555\":1}}],[\"从非结构化数据建立结构化信息并集成到已有数据库的工具\",{\"1\":{\"6489\":1}}],[\"从所有的jar包中找到meta\",{\"1\":{\"6219\":1}}],[\"从classpath下的每个jar包中搜寻所有meta\",{\"1\":{\"6218\":1}}],[\"从vm系统属性org\",{\"1\":{\"6203\":1}}],[\"从系统变量中获取有关驱动的定义\",{\"1\":{\"6182\":1}}],[\"从使用上来看\",{\"1\":{\"5385\":1}}],[\"从设计层面上看\",{\"1\":{\"5384\":1}}],[\"从设计层面看\",{\"1\":{\"1279\":1}}],[\"从编译的结果来看\",{\"1\":{\"5170\":1}}],[\"从他们的\",{\"1\":{\"5154\":1}}],[\"从上面章节\",{\"1\":{\"5103\":1}}],[\"从上面的例子来看\",{\"1\":{\"2742\":1}}],[\"从上面的代码中\",{\"1\":{\"1357\":1}}],[\"从一个简单的泛型类看起\",{\"1\":{\"5014\":1}}],[\"从程序语法角度讲是必须进行处理的异常\",{\"1\":{\"4725\":1}}],[\"从它的定义我们可以知道\",{\"1\":{\"4520\":1}}],[\"从它的定义我们可以看到\",{\"1\":{\"4516\":1}}],[\"从这个假对象中获取数据\",{\"1\":{\"4467\":1}}],[\"从这个设计初衷上来看\",{\"1\":{\"2718\":1}}],[\"从命名的文字构成开始\",{\"1\":{\"4196\":1}}],[\"从不要求\",{\"0\":{\"4091\":1}}],[\"从性能数据上分析\",{\"1\":{\"3383\":1}}],[\"从服务器删除资源\",{\"1\":{\"3224\":1}}],[\"从服务器取出资源\",{\"1\":{\"3224\":1}}],[\"从第三行开始\",{\"1\":{\"3030\":1}}],[\"从子类指向父类\",{\"1\":{\"2911\":1}}],[\"从定义上\",{\"1\":{\"2784\":1}}],[\"从图上可以看出\",{\"1\":{\"2764\":1}}],[\"从图中我们也可以看出\",{\"1\":{\"2177\":1}}],[\"从业务含义上\",{\"1\":{\"2745\":1}}],[\"从理论上讲\",{\"1\":{\"2740\":1}}],[\"从私有云下载图片\",{\"1\":{\"2711\":1}}],[\"从阿里云下载图片\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"从本质上来看\",{\"1\":{\"2694\":1}}],[\"从父类继承而来的实现是静态的\",{\"1\":{\"2218\":1}}],[\"从备忘录对象\",{\"1\":{\"1653\":1}}],[\"从备忘录对象恢复到大战前的状态\",{\"1\":{\"1638\":1}}],[\"从当前这个案例来说\",{\"1\":{\"1238\":1}}],[\"从大到小创建对象\",{\"1\":{\"858\":1}}],[\"从\",{\"1\":{\"771\":1,\"1357\":1,\"1489\":1,\"1539\":1,\"4601\":1,\"5352\":1,\"5379\":1,\"5619\":1}}],[\"从而保证数据隔离\",{\"1\":{\"6129\":1}}],[\"从而每个类都可以获取method反射方法\",{\"1\":{\"6125\":1}}],[\"从而使得更容易控制反射类的生命周期\",{\"1\":{\"6121\":1}}],[\"从而使用接口或方法进行调用实例功能了\",{\"1\":{\"6087\":1}}],[\"从而使内存不够可以回收\",{\"1\":{\"6076\":1}}],[\"从而使其行为也发生改变\",{\"1\":{\"2415\":1}}],[\"从而使其\",{\"1\":{\"1566\":1}}],[\"从而使其耦合松散\",{\"1\":{\"1065\":1}}],[\"从而获取当前的\",{\"1\":{\"6059\":1}}],[\"从而获得\",{\"1\":{\"5763\":1}}],[\"从而影响\",{\"1\":{\"5803\":1}}],[\"从而影响其他对象的行为\",{\"1\":{\"2625\":1}}],[\"从而简化代码\",{\"1\":{\"5500\":1}}],[\"从而委托父类完成一些初始化的工作\",{\"1\":{\"5400\":1}}],[\"从而可以更好地定位具体错误信息\",{\"1\":{\"4897\":1}}],[\"从而可以更好地避免或处理异常\",{\"1\":{\"4894\":1}}],[\"从而可以保持各部分的独立性以及应对他们的功能扩展\",{\"1\":{\"589\":1}}],[\"从而覆盖了原始异常\",{\"1\":{\"4794\":1}}],[\"从而在代码中添加若干数量的额外空格的做法\",{\"1\":{\"4092\":1}}],[\"从而导致oom\",{\"1\":{\"3159\":3}}],[\"从而导致测试结果互相影响的问题\",{\"1\":{\"2366\":1}}],[\"从而限制\",{\"1\":{\"2618\":1}}],[\"从而缩短软件的开发周期\",{\"1\":{\"2589\":1}}],[\"从而让程序结构更加灵活\",{\"1\":{\"2504\":1}}],[\"从而让另一方对象对此做出响应\",{\"1\":{\"1730\":1}}],[\"从而避免重复的代码\",{\"1\":{\"2496\":1}}],[\"从而实现不同的逻辑\",{\"1\":{\"2459\":1}}],[\"从而实现对目标对象的调用\",{\"1\":{\"1905\":1}}],[\"从而完成反射调用功能\",{\"1\":{\"6114\":1}}],[\"从而完成\",{\"1\":{\"2323\":1}}],[\"从而易于扩展和维护\",{\"1\":{\"2139\":1}}],[\"从而造成冗余代码或代码的浪费\",{\"1\":{\"2006\":1}}],[\"从而创建一个新的对象\",{\"1\":{\"1753\":1}}],[\"从而降低了抽象和实现这两个可变维度的耦合度\",{\"1\":{\"2613\":1}}],[\"从而降低了系统中细粒度对象给内存带来的压力\",{\"1\":{\"1379\":1}}],[\"从而降低系统的耦合度\",{\"1\":{\"1094\":1}}],[\"从而提高系统的复用程度\",{\"1\":{\"2936\":1}}],[\"从而提高了类的可复用率和系统的扩展性\",{\"1\":{\"2160\":1}}],[\"从而提高项目的扩展和维护性\",{\"1\":{\"1317\":1}}],[\"从而提高项目的维护性\",{\"1\":{\"910\":1}}],[\"从而提高子系统的独立性和可移植性\",{\"1\":{\"1155\":1}}],[\"从而产生更好的结构化系统\",{\"1\":{\"633\":1}}],[\"从而极大的提供了系统的灵活性\",{\"1\":{\"633\":1}}],[\"从用户的角度看不到被适配者\",{\"1\":{\"504\":1}}],[\"从多散步十分钟或者每天做10个俯卧撑开始\",{\"1\":{\"140\":1}}],[\"从今天开始\",{\"1\":{\"138\":1}}],[\"变为原始类型object\",{\"1\":{\"5166\":1}}],[\"变成\",{\"1\":{\"4199\":1}}],[\"变更是必然的\",{\"1\":{\"2012\":1}}],[\"变更引起的风险降低\",{\"1\":{\"2012\":1}}],[\"变得复杂且难以维护\",{\"1\":{\"1576\":1}}],[\"变得很重要\",{\"1\":{\"740\":1}}],[\"变量可以用\",{\"1\":{\"6833\":1}}],[\"变量和文本\",{\"1\":{\"5670\":1}}],[\"变量也就是我们所说的编译期常量\",{\"1\":{\"5664\":1}}],[\"变量c的类型就是class<user>\",{\"1\":{\"5030\":1}}],[\"变量声明\",{\"0\":{\"4106\":1}}],[\"变量作用域太大\",{\"1\":{\"3076\":1}}],[\"变量像自己的小孩\",{\"1\":{\"3076\":1}}],[\"变量\",{\"1\":{\"3076\":1,\"3202\":1,\"5339\":1,\"6832\":1}}],[\"变量名\",{\"1\":{\"2987\":1}}],[\"变量名称\",{\"1\":{\"1487\":1}}],[\"变量的\",{\"1\":{\"2094\":1}}],[\"变量的解释器\",{\"1\":{\"1487\":1}}],[\"变量不要直接持有具体类的引用\",{\"1\":{\"1320\":1}}],[\"变化\",{\"1\":{\"798\":1}}],[\"变健康\",{\"1\":{\"140\":1}}],[\"变优秀\",{\"1\":{\"140\":1}}],[\"变自律\",{\"1\":{\"140\":1}}],[\"都要对可能出现的问题进行检查\",{\"1\":{\"5747\":1}}],[\"都要在每一个具体访问者类中增加相应的具体操作\",{\"1\":{\"2940\":1}}],[\"都指的对象\",{\"1\":{\"5730\":1}}],[\"都依赖于\",{\"1\":{\"5644\":1}}],[\"都替换为具体的类型\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"都调用30位置的处理者\",{\"1\":{\"4966\":1,\"4967\":1}}],[\"都能够调用它的任意一个方法和属性\",{\"1\":{\"5817\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"5817\":1}}],[\"都能够更容易被人阅读\",{\"1\":{\"4897\":1}}],[\"都能自带代码混淆光环\",{\"1\":{\"481\":1}}],[\"都比较粗\",{\"1\":{\"4448\":1}}],[\"都比较偏上层\",{\"1\":{\"2694\":1}}],[\"都进行\",{\"1\":{\"3401\":1}}],[\"都需要进行数行相同的参数校验操作\",{\"1\":{\"3467\":1}}],[\"都需要能方便查到\",{\"1\":{\"3439\":1}}],[\"都需要在列名前加表的别名\",{\"1\":{\"3388\":1}}],[\"都需要创建一个对应的第三方的公告板对象\",{\"1\":{\"1709\":1}}],[\"都不允许出现任何大写字母\",{\"1\":{\"3352\":1}}],[\"都不要加is前缀\",{\"1\":{\"2994\":1,\"3351\":1}}],[\"都应该进行单元测试\",{\"1\":{\"3309\":1}}],[\"都应指定大小\",{\"1\":{\"3246\":1}}],[\"都必须包含一个default语句并且放在最后\",{\"1\":{\"3184\":1}}],[\"都由使用者来保证\",{\"1\":{\"3058\":1}}],[\"都继承\",{\"1\":{\"2728\":1}}],[\"都继承这个抽象类\",{\"1\":{\"2724\":1}}],[\"都有设计模式\",{\"1\":{\"2572\":1}}],[\"都有类型为\",{\"1\":{\"2104\":1}}],[\"都尽量将逻辑封装在类的内部\",{\"1\":{\"2157\":1}}],[\"都代换成\",{\"1\":{\"2104\":1}}],[\"都只和自己左右两个数字有关系\",{\"1\":{\"1487\":1}}],[\"都可以帮助你实现这个最佳实践\",{\"1\":{\"4899\":1}}],[\"都可以操控这个变量\",{\"1\":{\"3182\":1}}],[\"都可以在很短的时间内完成\",{\"1\":{\"2770\":1}}],[\"都可以采用\",{\"1\":{\"1570\":1}}],[\"都可以达成共享\",{\"1\":{\"1417\":1}}],[\"都可以装配到一个对象中\",{\"1\":{\"735\":1}}],[\"都会copy一份出来\",{\"1\":{\"6129\":1}}],[\"都会委派给实际的\",{\"1\":{\"4478\":1}}],[\"都会在堆上产生\",{\"1\":{\"3046\":1}}],[\"都会变得豁然开朗\",{\"1\":{\"2716\":1}}],[\"都会问你在实际项目中\",{\"1\":{\"2577\":1}}],[\"都会被打包成一个个箱子\",{\"1\":{\"1503\":1}}],[\"都会创建一个新的对象返回\",{\"1\":{\"1363\":1}}],[\"都会给你带来意想不到的提升\",{\"1\":{\"138\":1}}],[\"都是对接口driver的实现\",{\"1\":{\"6233\":1}}],[\"都是对象\",{\"1\":{\"5646\":1}}],[\"都是通过从列表中搜寻查找匹配的方法\",{\"1\":{\"6124\":1}}],[\"都是先从缓存中获取方法\",{\"1\":{\"6097\":1}}],[\"都是获取method对象所表示的方法的参数类型\",{\"1\":{\"6050\":1}}],[\"都是runtimeexception类及其子类异常\",{\"1\":{\"4722\":1}}],[\"都是正确的\",{\"1\":{\"4223\":1}}],[\"都是有效的\",{\"1\":{\"4088\":1}}],[\"都是把自己的思想描述给别人看\",{\"1\":{\"2810\":1}}],[\"都是用它来表示一些全局唯一类\",{\"1\":{\"2350\":1}}],[\"都是为了实现代码的松耦合\",{\"1\":{\"2172\":1}}],[\"都是统一刷卡或者刷脸进站\",{\"1\":{\"1503\":1}}],[\"都是\",{\"1\":{\"1487\":1,\"1793\":1,\"2373\":1}}],[\"都是工厂模式联合着其它设计模式使用\",{\"1\":{\"1158\":1}}],[\"都是装饰器模式\",{\"1\":{\"875\":1}}],[\"都是上坡路\",{\"1\":{\"152\":1}}],[\"都还是一个煎饼\",{\"1\":{\"875\":1}}],[\"都在不同程度地变好看\",{\"1\":{\"140\":1}}],[\"锻炼\",{\"1\":{\"138\":1}}],[\"早起10分钟做些你想做的事\",{\"1\":{\"138\":1}}],[\"早起10分钟\",{\"1\":{\"137\":1}}],[\"早睡半小时\",{\"1\":{\"137\":1,\"138\":1}}],[\"自由职业者\",{\"1\":{\"6700\":1}}],[\"自然语言处理\",{\"0\":{\"6528\":1}}],[\"自然其可读性会提高\",{\"1\":{\"2010\":1}}],[\"自反性\",{\"1\":{\"5419\":1,\"5655\":1}}],[\"自解释的成员\",{\"0\":{\"4259\":1}}],[\"自带类生成工具可能出现实心箭头\",{\"1\":{\"2925\":1}}],[\"自带\",{\"1\":{\"2896\":1,\"2903\":1}}],[\"自带的原型模式基于内存二进制流的复制\",{\"1\":{\"1743\":1}}],[\"自动完成功能超棒\",{\"1\":{\"6974\":1}}],[\"自动完成看电视的准备工作\",{\"1\":{\"1589\":1}}],[\"自动产生\",{\"1\":{\"5075\":1}}],[\"自动释放的资源需要是实现了\",{\"1\":{\"4794\":1}}],[\"自动化的java对象序列化和克隆库\",{\"1\":{\"6462\":1}}],[\"自动化的单元测试避免了代码出现回归\",{\"1\":{\"4443\":1}}],[\"自动化\",{\"1\":{\"3300\":1}}],[\"自动解箱抛npe\",{\"1\":{\"3276\":1}}],[\"自动拆箱有可能产生npe\",{\"1\":{\"3276\":1}}],[\"自动屏幕\",{\"1\":{\"1116\":1,\"1133\":1,\"1134\":1}}],[\"自己都没有意识到使用了设计模式\",{\"1\":{\"2567\":1}}],[\"自己写了很多代码\",{\"1\":{\"2564\":1}}],[\"自己在编写代码的时候自己保证不要创建两个类对象\",{\"1\":{\"2383\":1}}],[\"自己刚刚到一个陌生城市找工作\",{\"1\":{\"1569\":1}}],[\"自己价格\",{\"1\":{\"926\":1}}],[\"自我提升九大招\",{\"0\":{\"136\":1}}],[\"自定义log注解\",{\"1\":{\"4689\":1}}],[\"自定义elementtype\",{\"1\":{\"4660\":2}}],[\"自定义注解的包路径\",{\"1\":{\"4693\":1}}],[\"自定义注解和aop\",{\"0\":{\"4687\":1}}],[\"自定义注解\",{\"0\":{\"4639\":1},\"1\":{\"4503\":1}}],[\"自定义测试方法的顺序\",{\"1\":{\"4418\":1}}],[\"自定义的控件类型需明确交互方式\",{\"1\":{\"3477\":1}}],[\"自定义线程工厂\",{\"1\":{\"3156\":1}}],[\"自定义对value的处理策略\",{\"1\":{\"3092\":1}}],[\"自定义对齐\",{\"0\":{\"68\":1}}],[\"自定义它们\",{\"1\":{\"134\":1}}],[\"自定义标题\",{\"1\":{\"52\":1,\"55\":1,\"57\":1,\"59\":1,\"61\":1,\"64\":5}}],[\"自定义容器\",{\"0\":{\"50\":1}}],[\"此变量的类型由外部决定\",{\"1\":{\"5017\":2}}],[\"此异常将会抛给jvm处理\",{\"1\":{\"4777\":1}}],[\"此对象与数据库表结构一\",{\"1\":{\"3535\":1,\"3536\":1}}],[\"此对象与数据库表结构一一对应\",{\"1\":{\"3420\":1}}],[\"此原则说父类能够出现的地方子类一定能够出现\",{\"1\":{\"3464\":1}}],[\"此种方式容易出现sql注入\",{\"1\":{\"3397\":1}}],[\"此处泛型只能是数字类型\",{\"1\":{\"5042\":1}}],[\"此处指定了两个泛型类型\",{\"1\":{\"5017\":1}}],[\"此处可以随便写标识符号\",{\"1\":{\"5015\":1}}],[\"此处类的配置顺序会影响执行顺序\",{\"1\":{\"4415\":1}}],[\"此处不返回\",{\"1\":{\"3272\":1,\"4932\":1}}],[\"此处抛出classcastexception异常\",{\"1\":{\"3113\":1}}],[\"此类错误发生时\",{\"1\":{\"4717\":1}}],[\"此类错误一般表示代码运行时\",{\"1\":{\"4717\":1}}],[\"此类型包括类型声明和类型参数声明\",{\"1\":{\"4659\":1}}],[\"此类型为双精度浮点数\",{\"1\":{\"3229\":1}}],[\"此类随意缩写严重降低了代码的可阅读性\",{\"1\":{\"2998\":1}}],[\"此条约定有利于数据层面上的协作更加高效\",{\"1\":{\"3225\":1}}],[\"此条规则优先于下一条\",{\"1\":{\"3066\":1}}],[\"此情形中\",{\"1\":{\"3205\":1}}],[\"此写法的泛型集合不能使用add方法\",{\"1\":{\"3111\":1}}],[\"此方法会忽略注解对应的注解容器\",{\"1\":{\"4626\":1}}],[\"此方法将正常返回\",{\"1\":{\"4362\":1}}],[\"此方法返回值只能是object\",{\"1\":{\"3104\":1}}],[\"此方法内部其实执行了double的tostring\",{\"1\":{\"3056\":1}}],[\"此规则参考spring的框架结构\",{\"1\":{\"2995\":1}}],[\"此模式让行为的变化独立于算法的使用者\",{\"1\":{\"2530\":1}}],[\"此模式让\",{\"1\":{\"2489\":1}}],[\"此弊端可使用\",{\"1\":{\"1226\":1}}],[\"此时就会根据驱动名字具体实例化各个实现类了\",{\"1\":{\"6192\":1}}],[\"此时并没有实例化具体的实现类\",{\"1\":{\"6191\":1}}],[\"此时并没有返回运算后的值\",{\"1\":{\"5711\":1}}],[\"此时程序崩溃并且无法恢复\",{\"1\":{\"5535\":1}}],[\"此时子类的方法不是重写基类方法\",{\"1\":{\"5479\":1}}],[\"此时可以不校验参数\",{\"1\":{\"3206\":1}}],[\"此时可以考虑为新系统开发一个\",{\"1\":{\"1149\":1}}],[\"此时数据库id不支持存入负数抛出异常产生线上故障\",{\"1\":{\"3055\":1}}],[\"此时我们就将这些对象的信息分为两个部分\",{\"1\":{\"1386\":1}}],[\"此时的\",{\"1\":{\"1213\":1}}],[\"此时\",{\"1\":{\"741\":1}}],[\"此时满足if条件\",{\"1\":{\"457\":1}}],[\"此外也可以通过使用\",{\"1\":{\"5204\":1}}],[\"此外由于t\",{\"1\":{\"5189\":1}}],[\"此外\",{\"1\":{\"162\":1,\"2982\":1,\"3235\":1,\"3288\":1,\"3448\":1,\"6527\":1}}],[\"此页面应当包含\",{\"1\":{\"124\":1}}],[\"此文字有脚注\",{\"1\":{\"76\":1}}],[\"徽章\",{\"1\":{\"122\":1}}],[\"徽章文字\",{\"1\":{\"122\":1}}],[\"标志设置为指示的布尔值\",{\"1\":{\"5992\":1}}],[\"标明要忽略的警告\",{\"1\":{\"4501\":1}}],[\"标明某个类或方法过时\",{\"1\":{\"4501\":1}}],[\"标注一起使用\",{\"1\":{\"4296\":1}}],[\"标识符只允许使用\",{\"1\":{\"4162\":1}}],[\"标签构建\",{\"1\":{\"6879\":1}}],[\"标签与单词之间没有空格\",{\"1\":{\"4249\":1}}],[\"标签返回到上一个缩进级别\",{\"1\":{\"4122\":1}}],[\"标签之后会有一个换行\",{\"1\":{\"4122\":1}}],[\"标签之后跟随着一条或多条语句\",{\"1\":{\"4119\":1}}],[\"标签\",{\"1\":{\"4119\":1,\"4249\":2}}],[\"标签为\",{\"1\":{\"115\":1}}],[\"标准库中没有内置对元组的支持\",{\"1\":{\"6913\":1}}],[\"标准库缺少的特性进行补充的扩展库\",{\"1\":{\"6900\":1}}],[\"标准库曾经作出过惊人的改进\",{\"1\":{\"6893\":1}}],[\"标准库的设计了\",{\"1\":{\"943\":1}}],[\"标准\",{\"1\":{\"6552\":1}}],[\"标准资源都继承了这个接口\",{\"1\":{\"4868\":1}}],[\"标准日志输出与标准错误输出文件每次jboss重启时才滚动\",{\"1\":{\"3291\":1}}],[\"标准中的\",{\"1\":{\"2261\":1}}],[\"标题和页面信息\",{\"1\":{\"126\":1}}],[\"标记时\",{\"1\":{\"4132\":1}}],[\"标记时间\",{\"1\":{\"3222\":2}}],[\"标记人\",{\"1\":{\"3222\":2}}],[\"标记\",{\"0\":{\"78\":1}}],[\"日后的改动需要调整一行代码\",{\"1\":{\"4096\":1}}],[\"日后基本不会改\",{\"1\":{\"2109\":1}}],[\"日常是把bigint转成long值\",{\"1\":{\"3399\":1}}],[\"日志解决方案\",{\"1\":{\"6946\":1}}],[\"日志抽象层\",{\"1\":{\"6482\":1}}],[\"日志实例是通过logfactory的getlog\",{\"1\":{\"6198\":1}}],[\"日志\",{\"0\":{\"6475\":1},\"1\":{\"4693\":1}}],[\"日志处理等\",{\"1\":{\"3520\":1}}],[\"日志方式与dao层处理一致\",{\"1\":{\"3418\":1}}],[\"日志排查问题时\",{\"1\":{\"3297\":1}}],[\"日志文件管理工具\",{\"1\":{\"6480\":1}}],[\"日志文件中的用户敏感信息需要进行脱敏处理\",{\"1\":{\"3297\":1}}],[\"日志文件至少保存\",{\"1\":{\"3284\":1}}],[\"日志打印时禁止直接用json工具将对象转换成string\",{\"1\":{\"3293\":1}}],[\"日志描述\",{\"1\":{\"3286\":1}}],[\"日志类型\",{\"1\":{\"3286\":1}}],[\"日志保存\",{\"1\":{\"3284\":1}}],[\"日志框架\",{\"1\":{\"3280\":1}}],[\"日志规约\",{\"0\":{\"3279\":1}}],[\"日注册\",{\"1\":{\"3085\":1}}],[\"日期格式等\",{\"1\":{\"3520\":1}}],[\"日期格式\",{\"1\":{\"3284\":1}}],[\"日期格式中的这两对字母表意如下\",{\"1\":{\"3079\":1}}],[\"日期格式化时\",{\"1\":{\"3078\":2}}],[\"日期时间的闰年\",{\"1\":{\"3524\":1}}],[\"日期时间\",{\"0\":{\"3077\":1}}],[\"日\",{\"1\":{\"113\":1,\"1313\":1,\"3085\":1,\"3086\":1}}],[\"月份有\",{\"1\":{\"3086\":1}}],[\"月问题\",{\"1\":{\"3086\":1}}],[\"月在云栖厅发布\",{\"1\":{\"2983\":1}}],[\"月\",{\"1\":{\"113\":1,\"1313\":1,\"3085\":2,\"3086\":1}}],[\"年龄\",{\"1\":{\"5017\":1}}],[\"年龄区间\",{\"1\":{\"3366\":1}}],[\"年龄为\",{\"1\":{\"1756\":1}}],[\"年杭州云栖大会上发布了配套的java开发规约ide插件\",{\"1\":{\"2983\":1}}],[\"年代从建筑设计领域引入到计算机科学的\",{\"1\":{\"2574\":1}}],[\"年的著作\",{\"1\":{\"2127\":1}}],[\"年的\",{\"1\":{\"2103\":1}}],[\"年\",{\"1\":{\"113\":1,\"1313\":1,\"2693\":1,\"2807\":1,\"2983\":1,\"3085\":2}}],[\"的特性之一就是调试的时候能够按照时间跟踪回来\",{\"1\":{\"6977\":1}}],[\"的特性可以让我们聚焦在某一模块或类中\",{\"1\":{\"2754\":1}}],[\"的奇葩项目\",{\"1\":{\"6946\":1}}],[\"的安全性\",{\"1\":{\"6923\":1}}],[\"的支持\",{\"1\":{\"6975\":1}}],[\"的支持尤其的好\",{\"1\":{\"6944\":1}}],[\"的支持还是很好用的\",{\"1\":{\"6943\":1}}],[\"的支持也能写出流畅的代码\",{\"1\":{\"6906\":1}}],[\"的支持并不是很好\",{\"1\":{\"6830\":1}}],[\"的也可供选择\",{\"1\":{\"6888\":1}}],[\"的部署并不容易\",{\"1\":{\"6858\":1}}],[\"的部署问题确实有点棘手\",{\"1\":{\"6856\":1}}],[\"的处理仍然是必要的\",{\"1\":{\"6830\":1}}],[\"的集合的设计灵感来源于\",{\"1\":{\"6925\":1}}],[\"的集合\",{\"1\":{\"6824\":2}}],[\"的集合类\",{\"1\":{\"860\":1,\"1505\":1,\"5648\":1}}],[\"的可能性\",{\"1\":{\"6814\":1}}],[\"的可用性\",{\"1\":{\"4844\":1}}],[\"的动态语言\",{\"1\":{\"6470\":1}}],[\"的无缝扩展\",{\"1\":{\"6370\":1}}],[\"的meta\",{\"1\":{\"6144\":1}}],[\"的数据结构如下\",{\"1\":{\"6080\":1}}],[\"的数值转化为javascript的number时\",{\"1\":{\"3229\":1}}],[\"的静态方法\",{\"1\":{\"6058\":1}}],[\"的公共\",{\"1\":{\"6011\":1}}],[\"的公共静态方法\",{\"1\":{\"4390\":1,\"4407\":1}}],[\"的属性和方法\",{\"1\":{\"5763\":1}}],[\"的属性字段必须是私有且不可变\",{\"1\":{\"3244\":1}}],[\"的不同之处\",{\"0\":{\"5659\":1}}],[\"的规定\",{\"1\":{\"5638\":1,\"5644\":1}}],[\"的替代方案\",{\"1\":{\"5467\":1}}],[\"的比较\",{\"1\":{\"5428\":1}}],[\"的计算结果进行了向下转型\",{\"1\":{\"5348\":1}}],[\"的参数是以值传递的形式传入方法中\",{\"1\":{\"5332\":1}}],[\"的需要\",{\"1\":{\"5291\":1}}],[\"的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的\",{\"1\":{\"5203\":1}}],[\"的泛型数组初始化时数组类型不能是具体的泛型类型\",{\"1\":{\"5197\":1}}],[\"的事情\",{\"1\":{\"5180\":1}}],[\"的范围是<e\",{\"1\":{\"5049\":1}}],[\"的某个子类型\",{\"1\":{\"5048\":1}}],[\"的消费者\",{\"1\":{\"5046\":1,\"5051\":1}}],[\"的生产者\",{\"1\":{\"5046\":1}}],[\"的输入参数上使用通配符\",{\"1\":{\"5046\":1}}],[\"的策略\",{\"1\":{\"4995\":1,\"5070\":1}}],[\"的策略模式剖析\",{\"0\":{\"2542\":1}}],[\"的信息\",{\"1\":{\"4945\":1,\"5995\":1}}],[\"的父接口\",{\"1\":{\"4624\":1}}],[\"的注解信息\",{\"1\":{\"4603\":1}}],[\"的字段\",{\"1\":{\"5879\":1}}],[\"的字节码内容我们可以得出以下两点结论\",{\"1\":{\"4601\":1}}],[\"的字符串\",{\"1\":{\"5938\":1,\"5940\":1,\"5983\":1,\"6047\":1}}],[\"的字符\",{\"1\":{\"3952\":1}}],[\"的最主要的原因就是在测试时某些组件不可用或运行速度太慢\",{\"1\":{\"4470\":1}}],[\"的主要区别就是\",{\"1\":{\"4469\":1}}],[\"的依赖\",{\"1\":{\"6876\":1}}],[\"的依赖对象\",{\"1\":{\"4464\":1}}],[\"的依赖改成注入\",{\"1\":{\"3305\":1}}],[\"的单元测试时\",{\"1\":{\"4462\":1}}],[\"的单测来覆盖\",{\"1\":{\"4448\":2}}],[\"的单例\",{\"1\":{\"2399\":2,\"2400\":1}}],[\"的单例和\",{\"1\":{\"2399\":1}}],[\"的成员\",{\"1\":{\"4260\":1}}],[\"的位置缩进四个\",{\"1\":{\"4251\":1}}],[\"的行\",{\"1\":{\"4249\":1}}],[\"的行为没有发生变化\",{\"1\":{\"2104\":1}}],[\"的异常\",{\"1\":{\"4229\":1}}],[\"的格式命名\",{\"1\":{\"4177\":1}}],[\"的格式\",{\"1\":{\"4114\":1}}],[\"的冒号\",{\"1\":{\"4049\":1}}],[\"的符号\",{\"1\":{\"4043\":1,\"4075\":1}}],[\"的等值比较\",{\"1\":{\"3528\":1}}],[\"的示例等\",{\"1\":{\"3524\":1}}],[\"的判断\",{\"1\":{\"3520\":1}}],[\"的限定词\",{\"1\":{\"3520\":1}}],[\"的限制\",{\"1\":{\"3388\":1}}],[\"的详细说明以及正反例\",{\"1\":{\"3504\":1}}],[\"的适用场景描述\",{\"1\":{\"3504\":1}}],[\"的适配器模式剖析\",{\"0\":{\"567\":1}}],[\"的适配\",{\"1\":{\"529\":1}}],[\"的前后矛盾\",{\"1\":{\"3491\":1}}],[\"的前缀来标识单元测试相关代码\",{\"1\":{\"3316\":1}}],[\"的子集合\",{\"1\":{\"3398\":1}}],[\"的子类的列表\",{\"1\":{\"5052\":1}}],[\"的子类型\",{\"1\":{\"2104\":1}}],[\"的子类\",{\"1\":{\"943\":4,\"1550\":1,\"4900\":1}}],[\"的顺序依次命名\",{\"1\":{\"3389\":1}}],[\"的返回结果为null\",{\"1\":{\"3382\":1}}],[\"的返回结果为\",{\"1\":{\"3382\":1}}],[\"的区分度来确定\",{\"1\":{\"3370\":1}}],[\"的区别在于\",{\"1\":{\"5264\":1}}],[\"的区别是\",{\"1\":{\"4479\":1}}],[\"的区别之处\",{\"1\":{\"2394\":1}}],[\"的区别\",{\"0\":{\"5567\":1,\"5606\":1,\"5667\":1},\"1\":{\"2393\":1}}],[\"的索引\",{\"1\":{\"3370\":1}}],[\"的若干倍然后取整\",{\"1\":{\"3243\":1}}],[\"的指数次的整数都是绝对不会存在精度损失的\",{\"1\":{\"3229\":1}}],[\"的设计者认为字符串使用非常频繁\",{\"1\":{\"5617\":1}}],[\"的设计初衷是对那些只有少数的几个值进行等值判断\",{\"1\":{\"5354\":1}}],[\"的设计原则\",{\"1\":{\"2128\":1,\"5673\":1}}],[\"的设置统一为yyyy\",{\"1\":{\"3210\":1}}],[\"的用户id数组过来后\",{\"1\":{\"3204\":1}}],[\"的情况\",{\"1\":{\"3190\":1}}],[\"的空数组\",{\"1\":{\"3104\":1}}],[\"的程序员对此知识点都有错误的认知\",{\"1\":{\"3103\":1}}],[\"的表示方式\",{\"1\":{\"3048\":1}}],[\"的编码方式\",{\"1\":{\"3048\":1}}],[\"的常量\",{\"1\":{\"3016\":1}}],[\"的理由\",{\"1\":{\"4261\":1}}],[\"的理念\",{\"1\":{\"2983\":1}}],[\"的理解\",{\"1\":{\"2694\":1}}],[\"的一种途径\",{\"1\":{\"5877\":1}}],[\"的一个\",{\"1\":{\"5459\":1}}],[\"的一个改进机制\",{\"1\":{\"1447\":1}}],[\"的一类数据结构时\",{\"1\":{\"2974\":1}}],[\"的接口\",{\"1\":{\"2947\":1}}],[\"的标准类关系图中\",{\"1\":{\"2925\":1}}],[\"的改动\",{\"1\":{\"2803\":1}}],[\"的开发者都必须重新开发或移植代码\",{\"1\":{\"2802\":1}}],[\"的版本号\",{\"1\":{\"6875\":1}}],[\"的版本号是正常的\",{\"1\":{\"6868\":1}}],[\"的版本\",{\"1\":{\"2797\":1}}],[\"的风险也就减少了很多\",{\"1\":{\"2754\":1}}],[\"的实现方式\",{\"1\":{\"6064\":1,\"6797\":1}}],[\"的实现\",{\"1\":{\"2748\":1}}],[\"的实例化\",{\"1\":{\"2323\":1}}],[\"的使用举例\",{\"1\":{\"2711\":1}}],[\"的使用方式\",{\"1\":{\"3280\":1,\"3520\":1}}],[\"的使用方式违背了基于接口而非实现的设计原则\",{\"1\":{\"2354\":1}}],[\"的使用方法和前面讲过的一样\",{\"1\":{\"1728\":1}}],[\"的原则\",{\"1\":{\"2706\":1}}],[\"的原因分析\",{\"1\":{\"570\":1}}],[\"的内容\",{\"1\":{\"4178\":1}}],[\"的内容每天可能不同\",{\"1\":{\"2637\":1}}],[\"的内容是\",{\"1\":{\"2187\":1}}],[\"的精要\",{\"1\":{\"2596\":1}}],[\"的各种问题\",{\"1\":{\"2574\":1}}],[\"的所有实现的方法\",{\"1\":{\"2525\":1}}],[\"的所有方法\",{\"1\":{\"556\":1}}],[\"的方式来写一些可变的集合\",{\"1\":{\"6903\":1}}],[\"的方式来处理\",{\"1\":{\"4848\":1}}],[\"的方式新建了两个不同对象\",{\"1\":{\"5310\":1}}],[\"的方式\",{\"1\":{\"3090\":1,\"3177\":1,\"3954\":1}}],[\"的方式把double值转化为bigdecimal对象\",{\"1\":{\"3056\":1}}],[\"的方式将它替换掉\",{\"1\":{\"2365\":1}}],[\"的方法调用是否符合预期\",{\"1\":{\"4472\":1}}],[\"的方法体内第一行代码isdisabled\",{\"1\":{\"3288\":1}}],[\"的方法\",{\"1\":{\"1726\":1,\"2124\":1,\"3241\":1,\"4261\":1,\"4479\":1}}],[\"的方法进行默认实现\",{\"1\":{\"564\":1}}],[\"的执行\",{\"1\":{\"2362\":1}}],[\"的抽象特性\",{\"1\":{\"2354\":1}}],[\"的四大特性是封装\",{\"1\":{\"2352\":1}}],[\"的作者\",{\"1\":{\"2331\":1}}],[\"的作用和地位等价于我们前面讲过的\",{\"1\":{\"1727\":1}}],[\"的作用和地位等价于我们前面讲过\",{\"1\":{\"1725\":1}}],[\"的效果\",{\"1\":{\"2289\":1,\"2290\":1,\"2300\":1}}],[\"的回收站\",{\"1\":{\"2258\":1}}],[\"的三个方法\",{\"1\":{\"2205\":1,\"2208\":1}}],[\"的直接朋友\",{\"1\":{\"2164\":1,\"2188\":1}}],[\"的目的是制定好\",{\"1\":{\"2066\":1}}],[\"的中心思想是\",{\"1\":{\"2064\":1}}],[\"的中介者\",{\"1\":{\"1570\":1}}],[\"的粒度分解为\",{\"1\":{\"2002\":1}}],[\"的拦截器\",{\"1\":{\"1928\":1}}],[\"的框架使用\",{\"1\":{\"1878\":1}}],[\"的框中设置文本\",{\"1\":{\"162\":1}}],[\"的克隆\",{\"1\":{\"1795\":1}}],[\"的观察者模式剖析\",{\"0\":{\"1722\":1}}],[\"的状态类\",{\"1\":{\"2968\":1}}],[\"的状态\",{\"1\":{\"1653\":1}}],[\"的问题\",{\"1\":{\"1569\":1,\"3041\":1,\"3158\":1,\"5070\":1}}],[\"的话\",{\"1\":{\"1569\":1,\"4029\":1,\"6906\":1}}],[\"的责任分开\",{\"1\":{\"1556\":1}}],[\"的类型系统很差劲\",{\"1\":{\"6984\":1}}],[\"的类图\",{\"1\":{\"2832\":1}}],[\"的类\",{\"1\":{\"1548\":1}}],[\"的迭代器模式剖析\",{\"0\":{\"1542\":1}}],[\"的值的类型不一致\",{\"1\":{\"3188\":1}}],[\"的值只要有一个是原始类型\",{\"1\":{\"3188\":1}}],[\"的值\",{\"1\":{\"1478\":1,\"1491\":1}}],[\"的享元模式剖析\",{\"0\":{\"1432\":1}}],[\"的朋友感觉效果不错\",{\"1\":{\"1408\":1}}],[\"的创建\",{\"1\":{\"1328\":1,\"1776\":1}}],[\"的时候\",{\"1\":{\"1324\":1,\"2381\":1,\"4227\":1}}],[\"的基础上再创建一个大的工厂\",{\"1\":{\"1256\":1}}],[\"的代码覆盖率工具\",{\"1\":{\"6881\":1}}],[\"的代码可测试性也更加好\",{\"1\":{\"2754\":1}}],[\"的代码就不难看懂了\",{\"1\":{\"1365\":1}}],[\"的代码\",{\"1\":{\"1205\":2,\"6960\":1}}],[\"的典型应用\",{\"1\":{\"1097\":1}}],[\"的装饰者模式剖析\",{\"0\":{\"929\":1}}],[\"的来计算不同种类咖啡的费用\",{\"1\":{\"899\":1}}],[\"的模式让你的数据库访问变得轻而易举\",{\"1\":{\"6952\":1}}],[\"的模式\",{\"1\":{\"877\":1}}],[\"的定义方式\",{\"1\":{\"2999\":1}}],[\"的定义\",{\"1\":{\"877\":1,\"1668\":1}}],[\"的层次关系\",{\"1\":{\"807\":1}}],[\"的关系强关系\",{\"1\":{\"2924\":1}}],[\"的关系弱关系\",{\"1\":{\"2923\":1}}],[\"的关系\",{\"1\":{\"806\":1,\"2872\":1,\"2893\":1}}],[\"的命令模式分析\",{\"0\":{\"784\":1}}],[\"的对象\",{\"1\":{\"664\":1,\"2104\":2,\"2205\":1,\"2208\":1,\"2539\":1,\"2546\":1,\"5429\":1}}],[\"的功能\",{\"1\":{\"645\":1}}],[\"的桥接模式剖析\",{\"0\":{\"627\":1}}],[\"的局限性问题\",{\"1\":{\"544\":1}}],[\"的灵活性增强了\",{\"1\":{\"526\":1}}],[\"的电压\",{\"1\":{\"520\":1,\"540\":1}}],[\"的\",{\"1\":{\"111\":1,\"628\":3,\"854\":1,\"930\":1,\"937\":1,\"1122\":1,\"1159\":1,\"1489\":1,\"1543\":1,\"1723\":1,\"1768\":1,\"1851\":1,\"1928\":1,\"1977\":1,\"2260\":1,\"2373\":1,\"2543\":2,\"2546\":1,\"2693\":1,\"3366\":1,\"3520\":2,\"3940\":1,\"3943\":1,\"4096\":1,\"4229\":1,\"4238\":1,\"4485\":1,\"4599\":1,\"4759\":1,\"4867\":1,\"4900\":1,\"5290\":2,\"5333\":1,\"5380\":1,\"5381\":1,\"5387\":1,\"5454\":1,\"5574\":1,\"6065\":1,\"6822\":2,\"6836\":1,\"6906\":1,\"6942\":1,\"6963\":1}}],[\"↩︎\",{\"1\":{\"107\":1}}],[\"幻灯片\",{\"0\":{\"105\":1}}],[\"幻灯片页\",{\"0\":{\"5\":1}}],[\"导航性与多重性\",{\"1\":{\"2872\":1}}],[\"导航性\",{\"1\":{\"2865\":1}}],[\"导航栏\",{\"1\":{\"17\":1,\"130\":1}}],[\"导致代码不够干净\",{\"1\":{\"4296\":1}}],[\"导致新的连接无法建立\",{\"1\":{\"3444\":1}}],[\"导致索引失效\",{\"1\":{\"3377\":1}}],[\"导致数据库更新时\",{\"1\":{\"3333\":1}}],[\"导致测试结果异常\",{\"1\":{\"3315\":1}}],[\"导致运行到某段核心逻辑时\",{\"1\":{\"3274\":1}}],[\"导致部分商品未能正确退货\",{\"1\":{\"3230\":1}}],[\"导致调用方传了一个\",{\"1\":{\"3204\":1}}],[\"导致cpu飙升\",{\"1\":{\"3181\":1}}],[\"导致在finally代码块中\",{\"1\":{\"3167\":1}}],[\"导致创建时间被修改成当前时间\",{\"1\":{\"3059\":1}}],[\"导致线上问题\",{\"1\":{\"3016\":1,\"3399\":1}}],[\"导致出现故障\",{\"1\":{\"3010\":1}}],[\"导致属性获取不到\",{\"1\":{\"2994\":1}}],[\"导致它们发生的原因也不少\",{\"1\":{\"2800\":1}}],[\"导致类的个数增加\",{\"1\":{\"2683\":1}}],[\"导致类装载\",{\"1\":{\"2290\":1}}],[\"导致无法实现\",{\"1\":{\"2365\":1}}],[\"导致其他\",{\"1\":{\"2362\":1}}],[\"导致双方高耦合\",{\"1\":{\"2077\":1}}],[\"导致系统难以管理与维护\",{\"1\":{\"1463\":1}}],[\"导致系统变得很庞大\",{\"1\":{\"727\":1}}],[\"导入文件\",{\"0\":{\"98\":1}}],[\"图像处理\",{\"0\":{\"6447\":1}}],[\"图像中的坐标点或颜色\",{\"1\":{\"1373\":1}}],[\"图谱\",{\"0\":{\"5583\":1}}],[\"图参考自\",{\"1\":{\"5022\":1}}],[\"图胜于表\",{\"1\":{\"2983\":1}}],[\"图分类\",{\"1\":{\"2810\":1}}],[\"图与写文章差不多\",{\"1\":{\"2810\":1}}],[\"图中最核心的\",{\"1\":{\"2814\":1}}],[\"图中右边部分的代码设计中\",{\"1\":{\"2176\":1}}],[\"图中左边部分的代码设计中\",{\"1\":{\"2175\":1}}],[\"图中左边部分的代码结构是\",{\"1\":{\"2174\":1}}],[\"图解\",{\"1\":{\"690\":1,\"1758\":1}}],[\"图片验证码\",{\"1\":{\"6656\":1}}],[\"图片包含违禁信息\",{\"1\":{\"3706\":1}}],[\"图片经过处理之后被上传到阿里云上\",{\"1\":{\"2698\":1}}],[\"图片\",{\"1\":{\"398\":1,\"411\":1,\"415\":1,\"431\":1,\"446\":1,\"460\":1,\"479\":1}}],[\"图片增强\",{\"0\":{\"85\":1}}],[\"图形接口有计算面积和周长的抽象方法\",{\"1\":{\"2832\":1}}],[\"图形化的软件中可以指一个窗口或一个菜单等\",{\"1\":{\"4433\":1}}],[\"图形化\",{\"1\":{\"2807\":1}}],[\"图形\",{\"0\":{\"163\":1}}],[\"图表\",{\"0\":{\"88\":1}}],[\"脚注\",{\"0\":{\"75\":1}}],[\"hprof\",{\"1\":{\"6996\":2,\"6997\":1}}],[\"hppc\",{\"1\":{\"6434\":1}}],[\"hystrix\",{\"1\":{\"6386\":1}}],[\"hydra\",{\"1\":{\"401\":1,\"403\":1,\"406\":1,\"453\":2}}],[\"hk2\",{\"1\":{\"6366\":1}}],[\"h2\",{\"1\":{\"6344\":1}}],[\"h2o\",{\"1\":{\"73\":1,\"6491\":1}}],[\"hguisu\",{\"1\":{\"4989\":1}}],[\"hw=null\",{\"1\":{\"4682\":1}}],[\"hw=new\",{\"1\":{\"4682\":1}}],[\"hw\",{\"1\":{\"4682\":4,\"4685\":6}}],[\"hbase针对低延时应用程序的高性能关系数据库层\",{\"1\":{\"6341\":1}}],[\"hbase\",{\"1\":{\"3415\":1,\"6393\":1}}],[\"hh\",{\"1\":{\"3078\":1,\"3236\":1}}],[\"hikaricp\",{\"1\":{\"6345\":1}}],[\"hiway2\",{\"1\":{\"5914\":1,\"5916\":1}}],[\"hiway\",{\"1\":{\"5914\":1,\"5916\":1}}],[\"highlights\",{\"1\":{\"5546\":1,\"5556\":1}}],[\"high\",{\"1\":{\"5269\":1,\"5271\":6,\"5525\":1,\"6439\":1}}],[\"highbuilding\",{\"1\":{\"709\":1,\"713\":4}}],[\"hide\",{\"1\":{\"4551\":1}}],[\"hiding\",{\"1\":{\"4549\":1}}],[\"hidden\",{\"1\":{\"3228\":1}}],[\"hierarchy\",{\"1\":{\"2103\":1}}],[\"hibernate的技术社区非常活跃\",{\"1\":{\"6547\":1}}],[\"hibernate\",{\"1\":{\"1924\":1,\"2260\":1,\"6547\":1,\"6740\":1}}],[\"h\",{\"1\":{\"1856\":1,\"1871\":2,\"5271\":3}}],[\"hutool\",{\"1\":{\"6656\":1}}],[\"hudson\",{\"1\":{\"6284\":1}}],[\"hubei\",{\"1\":{\"5815\":1}}],[\"humidity\",{\"1\":{\"1702\":10,\"1716\":11,\"1718\":6}}],[\"huaweifactory\",{\"1\":{\"1308\":1,\"1310\":5}}],[\"huaweimirouter\",{\"1\":{\"1306\":1,\"1308\":1}}],[\"huaweiphone\",{\"1\":{\"1304\":1,\"1308\":1}}],[\"href\",{\"1\":{\"336\":1,\"341\":2,\"344\":1}}],[\"http服务提供方便测试的java\",{\"1\":{\"6637\":1}}],[\"http1\",{\"1\":{\"3234\":1}}],[\"http请求通过body传递内容时\",{\"1\":{\"3231\":1}}],[\"http请求通过url传递参数时\",{\"1\":{\"3230\":1}}],[\"http接口\",{\"1\":{\"3205\":1}}],[\"http\",{\"1\":{\"1090\":1,\"4208\":1,\"4324\":4,\"4467\":2,\"5077\":1,\"5778\":1,\"5815\":1,\"6273\":1,\"6536\":1,\"6541\":1,\"6656\":1}}],[\"https\",{\"1\":{\"336\":2,\"341\":4,\"344\":2,\"3929\":1,\"4422\":1,\"4423\":1,\"4424\":1,\"4425\":1,\"4489\":1,\"4490\":1,\"4491\":1,\"4669\":1,\"4670\":1,\"4699\":1,\"4700\":1,\"4701\":1,\"4702\":1,\"4703\":1,\"4704\":1,\"4986\":1,\"4988\":1,\"4989\":1,\"4990\":1,\"4991\":1,\"4992\":1,\"4993\":1,\"5022\":1,\"5198\":1,\"5239\":1,\"5240\":1,\"5241\":1,\"5242\":1,\"5243\":1,\"5244\":1,\"5245\":1,\"5246\":1,\"5247\":1,\"5586\":1,\"5587\":1,\"5588\":1,\"5813\":1,\"5814\":1,\"6132\":1,\"6133\":1,\"6134\":1,\"6135\":1,\"6136\":1,\"6137\":1,\"6138\":1,\"6270\":1,\"6271\":1,\"6272\":1,\"6274\":1,\"6275\":1,\"6276\":1,\"6815\":1}}],[\"html5等\",{\"1\":{\"6444\":1}}],[\"html在新窗口打开\",{\"1\":{\"5198\":1}}],[\"htmldto\",{\"1\":{\"2989\":2}}],[\"htmllabels\",{\"1\":{\"344\":1}}],[\"html\",{\"1\":{\"311\":1,\"343\":1,\"1090\":1,\"3929\":1,\"4249\":1,\"4424\":1,\"4489\":1,\"4703\":1,\"4704\":1,\"4991\":1,\"4992\":1,\"4993\":1,\"5022\":1,\"5241\":1,\"5243\":1,\"5244\":1,\"5247\":1,\"5814\":1,\"5815\":1,\"6052\":1,\"6132\":1,\"6135\":1,\"6138\":1,\"6274\":1}}],[\"hatter\",{\"1\":{\"6702\":1}}],[\"hat开发\",{\"1\":{\"6616\":1}}],[\"hadoop\",{\"1\":{\"6486\":1}}],[\"hazelcast\",{\"1\":{\"6385\":1}}],[\"happyframework\",{\"1\":{\"6274\":1}}],[\"happen\",{\"1\":{\"4911\":1,\"4914\":1}}],[\"harnesses\",{\"1\":{\"5525\":1}}],[\"hard\",{\"1\":{\"387\":1,\"2350\":1,\"5761\":1}}],[\"harder\",{\"1\":{\"255\":1}}],[\"hamcrest\",{\"1\":{\"4368\":3,\"6632\":1}}],[\"hao\",{\"1\":{\"3031\":1}}],[\"handling\",{\"1\":{\"5559\":1}}],[\"handlebars\",{\"1\":{\"6621\":1}}],[\"handlelog\",{\"1\":{\"4693\":3}}],[\"handlelargenumber\",{\"1\":{\"4125\":1}}],[\"handletextresponse\",{\"1\":{\"4231\":1}}],[\"handlenumericresponse\",{\"1\":{\"4231\":1}}],[\"handleonetwoorthree\",{\"1\":{\"4125\":1}}],[\"handle\",{\"1\":{\"2438\":9,\"4769\":2,\"4771\":2,\"4796\":1,\"6201\":1}}],[\"handlerexecutionchain\",{\"1\":{\"1977\":1}}],[\"handlerequest\",{\"1\":{\"1953\":6}}],[\"handler2\",{\"1\":{\"1953\":2}}],[\"handler1\",{\"1\":{\"1953\":3}}],[\"handler\",{\"1\":{\"1944\":1,\"1945\":1,\"1953\":8,\"1981\":1,\"4945\":1}}],[\"handleradapter\",{\"1\":{\"568\":1,\"570\":1}}],[\"handles\",{\"1\":{\"339\":1}}],[\"handsize的值太大\",{\"1\":{\"4892\":1}}],[\"handsize\",{\"1\":{\"4892\":1}}],[\"hangzhou等国际通用的名称\",{\"1\":{\"2987\":1}}],[\"hassize\",{\"1\":{\"6969\":1}}],[\"haskell\",{\"1\":{\"6925\":1}}],[\"hasmoreelements\",{\"1\":{\"6201\":1,\"6219\":1,\"6258\":1}}],[\"hasmilk\",{\"1\":{\"915\":1}}],[\"hascode\",{\"1\":{\"5444\":1}}],[\"hasglobaltimeouttest\",{\"1\":{\"4383\":1}}],[\"hasitems\",{\"1\":{\"4368\":1}}],[\"has\",{\"1\":{\"2370\":1,\"2740\":1,\"2872\":1,\"2923\":1,\"4972\":1,\"5455\":1,\"5529\":1,\"6063\":1,\"6109\":1,\"6201\":1}}],[\"hasnextservice\",{\"1\":{\"6258\":4}}],[\"hasnext\",{\"1\":{\"1520\":1,\"1525\":4,\"1537\":2,\"1539\":2,\"2953\":1,\"3115\":1,\"5048\":1,\"6157\":1,\"6180\":1,\"6190\":1,\"6191\":1,\"6236\":1,\"6258\":6}}],[\"hashset<>\",{\"1\":{\"5445\":1}}],[\"hashset<equalexample>\",{\"1\":{\"5445\":1}}],[\"hashset<string>\",{\"1\":{\"4179\":1}}],[\"hashset\",{\"1\":{\"5444\":1,\"5644\":1,\"5652\":1}}],[\"hash\",{\"0\":{\"5637\":1},\"1\":{\"5289\":1,\"5290\":2,\"5619\":1,\"5638\":1,\"5648\":3,\"6437\":1}}],[\"hashimpltest\",{\"1\":{\"4171\":1}}],[\"hashintegrationtest\",{\"1\":{\"4171\":1}}],[\"hashcode重要吗\",{\"1\":{\"5651\":1}}],[\"hashcode的作用\",{\"1\":{\"5649\":1}}],[\"hashcode=968514068\",{\"1\":{\"2286\":2}}],[\"hashcode=\",{\"1\":{\"2286\":2,\"2293\":2,\"2298\":2,\"2304\":2,\"2310\":2,\"2313\":2,\"2320\":2}}],[\"hashcode\",{\"0\":{\"5441\":1,\"5635\":1,\"5639\":1,\"5643\":1,\"5647\":1},\"1\":{\"1774\":4,\"1797\":4,\"2286\":2,\"2293\":2,\"2298\":2,\"2304\":2,\"2310\":2,\"2313\":2,\"2320\":2,\"2328\":2,\"3095\":1,\"4141\":1,\"5416\":1,\"5442\":1,\"5443\":1,\"5448\":1,\"5636\":2,\"5640\":1,\"5644\":2,\"5648\":1,\"5679\":1,\"6015\":1}}],[\"hashtable就异常重要了\",{\"1\":{\"5652\":1}}],[\"hashtable\",{\"1\":{\"1440\":1,\"3131\":1,\"5648\":1}}],[\"hashmap在容量不够进行resize时由于高并发可能出现死链\",{\"1\":{\"3181\":1}}],[\"hashmap是unorder\",{\"1\":{\"3152\":1}}],[\"hashmap需要放置\",{\"1\":{\"3123\":1}}],[\"hashmap使用构造方法hashmap\",{\"1\":{\"3123\":1}}],[\"hashmap的merge方法里会进行如下的判断\",{\"1\":{\"3096\":1}}],[\"hashmap<>\",{\"1\":{\"1429\":1,\"1491\":1,\"2409\":1,\"3091\":1,\"3122\":1,\"3398\":1,\"6904\":1}}],[\"hashmap<string\",{\"1\":{\"1406\":2,\"1429\":1,\"1487\":5,\"1489\":1,\"1491\":3,\"1601\":4,\"3122\":1}}],[\"hashmap\",{\"1\":{\"860\":1,\"1440\":1,\"1487\":2,\"1605\":1,\"2396\":2,\"3146\":1,\"3528\":1,\"5290\":1,\"5636\":1,\"5644\":1,\"5648\":1,\"5666\":2}}],[\"hasextensions\",{\"1\":{\"1315\":1}}],[\"have\",{\"1\":{\"214\":1,\"350\":1,\"357\":1,\"4481\":1,\"5382\":1,\"5528\":1,\"6065\":1,\"6201\":1}}],[\"hermes\",{\"1\":{\"6501\":1}}],[\"here\",{\"1\":{\"308\":1,\"4244\":1,\"5382\":3,\"6065\":1,\"6118\":1,\"6201\":2,\"6834\":1,\"6967\":1,\"6969\":1}}],[\"heapdump\",{\"1\":{\"6996\":1,\"6997\":1}}],[\"heap\",{\"1\":{\"6996\":2,\"7009\":1}}],[\"hearts\",{\"1\":{\"4104\":1}}],[\"head\",{\"0\":{\"215\":1,\"227\":1},\"1\":{\"2881\":2,\"2884\":5,\"6541\":1}}],[\"height\",{\"1\":{\"3014\":1}}],[\"helper\",{\"1\":{\"3178\":2,\"3179\":8}}],[\"helm\",{\"1\":{\"2571\":1}}],[\"helloreflect\",{\"1\":{\"6054\":2}}],[\"helloworld\",{\"1\":{\"4679\":1,\"4682\":2,\"4685\":2}}],[\"helloworldtest\",{\"1\":{\"4326\":1,\"4682\":1,\"4685\":1}}],[\"hello\",{\"0\":{\"4325\":1},\"1\":{\"1336\":1,\"1869\":1,\"1901\":1,\"2078\":1,\"2082\":2,\"2792\":1,\"3025\":1,\"3072\":1,\"3248\":1,\"4326\":1,\"4679\":2,\"4682\":1,\"4685\":1,\"5044\":1,\"6054\":1,\"6157\":1,\"6158\":1}}],[\"hence\",{\"1\":{\"385\":1,\"6086\":1,\"6111\":1,\"6114\":1}}],[\"hexagon\",{\"0\":{\"195\":1}}],[\"hook\",{\"1\":{\"6982\":1}}],[\"hornetq\",{\"1\":{\"6502\":1}}],[\"horizontal\",{\"1\":{\"266\":1,\"4092\":1}}],[\"hotswapagent\",{\"1\":{\"6373\":1}}],[\"hotspot考虑逐渐去永久代\",{\"1\":{\"5317\":1}}],[\"hotspot也是发展的\",{\"1\":{\"5317\":1}}],[\"hotspot\",{\"1\":{\"5316\":1}}],[\"hotspot中字符串常量池保存哪里\",{\"1\":{\"5314\":1}}],[\"holds\",{\"1\":{\"2103\":1}}],[\"holding\",{\"1\":{\"1603\":1}}],[\"hour\",{\"1\":{\"1313\":1}}],[\"housedirector\",{\"1\":{\"710\":1,\"711\":2,\"713\":6}}],[\"housebuilder\",{\"1\":{\"709\":3,\"711\":16}}],[\"house\",{\"1\":{\"706\":1,\"707\":1,\"709\":5,\"711\":1,\"713\":2,\"7008\":1}}],[\"however\",{\"1\":{\"385\":1}}],[\"how\",{\"1\":{\"339\":1,\"391\":1}}],[\"hope\",{\"1\":{\"112\":1}}],[\"hometheaterfacade\",{\"1\":{\"1136\":2,\"1138\":6}}],[\"home\",{\"1\":{\"2\":1,\"3284\":1}}],[\"上限\",{\"1\":{\"5041\":1}}],[\"上边界\",{\"1\":{\"5037\":1}}],[\"上述方法可能是较为常用的\",{\"1\":{\"5993\":1}}],[\"上述方法需要注意的是\",{\"1\":{\"5963\":1}}],[\"上述代码中的类型参数\",{\"1\":{\"5049\":1}}],[\"上述from和to之前发生异常后的异常处理者的位置\",{\"1\":{\"4948\":1}}],[\"上述内置注解的定义中使用了一些元注解\",{\"1\":{\"4586\":1}}],[\"上级部门不能是自己\",{\"1\":{\"4696\":1}}],[\"上下界\",{\"1\":{\"5082\":1}}],[\"上下文环境\",{\"1\":{\"3226\":1}}],[\"上下角标\",{\"0\":{\"72\":1}}],[\"上传恶意文件到服务器\",{\"1\":{\"3346\":1}}],[\"上传下载流程改变\",{\"1\":{\"2711\":1}}],[\"上传\",{\"1\":{\"2705\":1}}],[\"上传图片到私有云\",{\"1\":{\"2711\":1}}],[\"上传图片到指定的\",{\"1\":{\"2700\":1}}],[\"上传图片到阿里云\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"上游系统的代码基本上不需要做改动\",{\"1\":{\"2695\":1,\"2717\":1}}],[\"上游系统面向接口而非实现编程\",{\"1\":{\"2695\":1,\"2717\":1}}],[\"上方代码违反了\",{\"1\":{\"2189\":1}}],[\"上方代码优缺点\",{\"1\":{\"2145\":1}}],[\"上方只是简单介绍依赖倒转原则的基本使用\",{\"1\":{\"2085\":1}}],[\"上发表的一篇文章\",{\"1\":{\"2103\":1}}],[\"上课前先备课\",{\"1\":{\"1842\":1}}],[\"上安装软件的时候经常有一键安装选项\",{\"1\":{\"1126\":1}}],[\"上班族大多都有睡懒觉的习惯\",{\"1\":{\"875\":1}}],[\"上网\",{\"1\":{\"607\":1}}],[\"上面代码没有了加载驱动的代码\",{\"1\":{\"6177\":1}}],[\"上面说了\",{\"1\":{\"6172\":1}}],[\"上面提到了\",{\"1\":{\"5140\":1}}],[\"上面例子中\",{\"1\":{\"4794\":1}}],[\"上面\",{\"1\":{\"2967\":1}}],[\"上面设置回调的\",{\"1\":{\"1903\":1}}],[\"上面我们讲到\",{\"1\":{\"1343\":1}}],[\"上面我们讲了两种情况\",{\"1\":{\"1324\":1}}],[\"上面讲的工厂模式中\",{\"1\":{\"1328\":1}}],[\"上面有\",{\"1\":{\"1210\":1}}],[\"上面已经介绍\",{\"1\":{\"943\":1}}],[\"上面图片桥接模式的代码如下\",{\"1\":{\"604\":1}}],[\"上面的使用方法\",{\"1\":{\"6176\":1}}],[\"上面的语句相当于将\",{\"1\":{\"5348\":1}}],[\"上面的这样使用是没问题的\",{\"1\":{\"5230\":1}}],[\"上面的三条异常表item的意思为\",{\"1\":{\"4964\":1}}],[\"上面的解决思路就可以使用\",{\"1\":{\"1419\":1}}],[\"上面的披萨案例抽象工厂类图\",{\"1\":{\"1295\":1}}],[\"上面的代码主要步骤是\",{\"1\":{\"6181\":1}}],[\"上面的代码可以直接获取数据库连接进行操作\",{\"1\":{\"6177\":1}}],[\"上面的代码是一个很简单的例子\",{\"1\":{\"4939\":1}}],[\"上面的代码实现稍微有点问题\",{\"1\":{\"2373\":1}}],[\"上面的代码会打印\",{\"1\":{\"474\":1}}],[\"上面的代码中\",{\"1\":{\"470\":1,\"474\":1}}],[\"上面的代码解析完后实际是这样的\",{\"1\":{\"405\":1}}],[\"上面的\",{\"1\":{\"405\":1}}],[\"上一篇\",{\"1\":{\"24\":1}}],[\"我最喜欢\",{\"1\":{\"6977\":1}}],[\"我最喜欢的是\",{\"1\":{\"6946\":1}}],[\"我不喜欢重量级的\",{\"1\":{\"6949\":1}}],[\"我也喜欢用\",{\"1\":{\"6903\":1}}],[\"我认为你应该仔细看看这个\",{\"1\":{\"6888\":1}}],[\"我曾经也写了一个叫\",{\"1\":{\"6888\":1}}],[\"我喜欢用一个根\",{\"1\":{\"6864\":1}}],[\"我高度推荐\",{\"1\":{\"6845\":1}}],[\"我更喜欢\",{\"1\":{\"6800\":1}}],[\"我的博客\",{\"1\":{\"6745\":1}}],[\"我的实践经验告诉我\",{\"1\":{\"4448\":1}}],[\"我决定收集一些库\",{\"1\":{\"6744\":1}}],[\"我能在不进行强制转换的情况下将一个\",{\"0\":{\"5610\":1}}],[\"我怎么知道我取出来的到底是string类型的\",{\"1\":{\"5144\":1}}],[\"我怎么才能保证这个类的对象全局唯一呢\",{\"1\":{\"2378\":1}}],[\"我这里找了一个开源项目中的例子\",{\"1\":{\"4688\":1}}],[\"我个人是比较推荐单元测试与具体实现代码同步进行这个方案的\",{\"1\":{\"4449\":1}}],[\"我个人认为\",{\"1\":{\"2752\":1}}],[\"我从网上搜集和总结了相关的概念\",{\"1\":{\"4430\":1}}],[\"我在之前的产品中还没有用过\",{\"1\":{\"6937\":1}}],[\"我在测试项目中添加了两个jar包\",{\"1\":{\"6193\":1}}],[\"我在鸵鸟这个子类中重写\",{\"1\":{\"2725\":1}}],[\"我在右对齐\",{\"1\":{\"70\":1}}],[\"我总结了下面两点\",{\"1\":{\"2703\":1}}],[\"我用伪代码实现了一下这个过程\",{\"1\":{\"2405\":1}}],[\"我举个例子来解释一下\",{\"1\":{\"2394\":1}}],[\"我来详细地解释一下\",{\"1\":{\"2387\":1}}],[\"我业务上有表示全局唯一类的需求\",{\"1\":{\"2378\":1}}],[\"我画了一张对比图来解释\",{\"1\":{\"2174\":1}}],[\"我使用推送模式\",{\"1\":{\"1702\":1,\"1716\":2}}],[\"我中有你\",{\"1\":{\"1593\":1,\"2594\":1}}],[\"我是不是需要给每个实现类都定义对应的接口呢\",{\"1\":{\"2715\":1}}],[\"我是cglib代理\",{\"1\":{\"1901\":1}}],[\"我是中国人\",{\"1\":{\"1456\":1}}],[\"我是居中的\",{\"1\":{\"69\":1}}],[\"我会带你一块搞清楚这样几个问题\",{\"1\":{\"1325\":1}}],[\"我想说\",{\"1\":{\"1071\":1}}],[\"我说会打印fasle\",{\"1\":{\"434\":1}}],[\"我为什么不直接用integer\",{\"1\":{\"429\":1}}],[\"我们有一些工具就是为此而生\",{\"1\":{\"6994\":1}}],[\"我们期望\",{\"1\":{\"6963\":1}}],[\"我们使用spi机制的缺陷\",{\"1\":{\"6265\":1}}],[\"我们使用了泛型\",{\"1\":{\"5144\":1}}],[\"我们深入理解下spi相关内容\",{\"1\":{\"6222\":1}}],[\"我们项目中也用到的这种思想\",{\"1\":{\"6209\":1}}],[\"我们主要关注2\",{\"1\":{\"6186\":1}}],[\"我们怎么去确定使用哪个数据库连接的驱动呢\",{\"1\":{\"6177\":1}}],[\"我们开发有连接数据库的时候\",{\"1\":{\"6164\":1}}],[\"我们开始学习junit4单元测试实例\",{\"1\":{\"4322\":1}}],[\"我们现在需要使用一个内容搜索接口\",{\"1\":{\"6147\":1}}],[\"我们常用的类主要有constructor类表示的是class\",{\"1\":{\"5846\":1}}],[\"我们常常会通过重写父类的方法完成新的功能\",{\"1\":{\"2120\":1}}],[\"我们是可以创建一个包含可变对象的不可变对象的\",{\"1\":{\"5634\":1}}],[\"我们是不应该实现任何新的error子类的\",{\"1\":{\"4718\":1}}],[\"我们想要使用\",{\"1\":{\"5366\":1}}],[\"我们能创建一个包含可变对象的不可变对象吗\",{\"0\":{\"5633\":1}}],[\"我们能创建泛型数组也必然是在\",{\"1\":{\"5206\":1}}],[\"我们能在\",{\"0\":{\"5618\":1}}],[\"我们能将\",{\"0\":{\"5598\":1,\"5600\":1}}],[\"我们能够使用list\",{\"1\":{\"5184\":1}}],[\"我们看下它是怎么解耦的\",{\"1\":{\"6197\":1}}],[\"我们看下具体的先关接口\",{\"1\":{\"4624\":1}}],[\"我们看看如下的代码\",{\"1\":{\"5199\":1}}],[\"我们本意重写setvalue和getvalue方法的子类\",{\"1\":{\"5170\":1}}],[\"我们重写的getvalue方法\",{\"1\":{\"5169\":1}}],[\"我们重写的setvalue方法\",{\"1\":{\"5169\":1}}],[\"我们重新看一下单例的定义\",{\"1\":{\"2386\":1}}],[\"我们用javap\",{\"1\":{\"5168\":1}}],[\"我们传入父类的泛型类型是date\",{\"1\":{\"5163\":1}}],[\"我们覆盖了父类的两个方法\",{\"1\":{\"5152\":1}}],[\"我们设定父类的泛型类型为pair<date>\",{\"1\":{\"5152\":1}}],[\"我们定义了两个arraylist数组\",{\"1\":{\"5091\":1}}],[\"我们泛型数组相关的申明\",{\"1\":{\"5058\":1}}],[\"我们很难看出什么高深之处\",{\"1\":{\"4940\":1}}],[\"我们暂且不急于介绍异常表\",{\"1\":{\"4937\":1}}],[\"我们实现单元测试时将更为优雅\",{\"1\":{\"4686\":1}}],[\"我们从其它角度深入理解注解\",{\"1\":{\"4652\":1}}],[\"我们从最为常见的java内置的注解开始说起\",{\"1\":{\"4506\":1}}],[\"我们便可以开始自定义注解了\",{\"1\":{\"4640\":1}}],[\"我们再次调一下代码来看一下\",{\"1\":{\"4968\":1}}],[\"我们再深入理解下异常\",{\"1\":{\"4935\":1}}],[\"我们再具体看下这几个内置注解\",{\"1\":{\"4512\":1}}],[\"我们再来看下\",{\"1\":{\"2399\":1}}],[\"我们再来看看有没有其他办法\",{\"1\":{\"2380\":1}}],[\"我们再来看一下\",{\"1\":{\"2171\":1}}],[\"我们再来看对象创建\",{\"1\":{\"1339\":1}}],[\"我们具体看下注解的常见分类\",{\"1\":{\"4500\":1}}],[\"我们显然不太可能专门开一个\",{\"1\":{\"4467\":1}}],[\"我们举一个例子来展示什么是\",{\"1\":{\"4466\":1}}],[\"我们也可以明白arraylist被擦除类型后\",{\"1\":{\"5103\":1}}],[\"我们也需要一套标准来帮助我们做好软件开发的工作\",{\"1\":{\"2820\":1}}],[\"我们也确实经常用到它\",{\"1\":{\"2350\":1}}],[\"我们留在设计模式模块中慢慢讲解\",{\"1\":{\"2784\":1}}],[\"我们明显可以看出\",{\"1\":{\"2784\":1}}],[\"我们前面提到\",{\"1\":{\"2776\":1}}],[\"我们前面讲的依赖注入\",{\"1\":{\"2172\":1}}],[\"我们前面讲过的单一职责原则是实现代码高内聚非常有效的设计原则\",{\"1\":{\"2170\":1}}],[\"我们已经多次听到过这个设计思想\",{\"1\":{\"2774\":1}}],[\"我们已经写了一个对象\",{\"1\":{\"1858\":1,\"1892\":1}}],[\"我们该怎么判断代码的耦合程度呢\",{\"1\":{\"2757\":1}}],[\"我们该如何修改代码呢\",{\"1\":{\"2701\":1}}],[\"我们过度使用继承\",{\"1\":{\"2749\":1}}],[\"我们没有写有关具体驱动的硬编码class\",{\"1\":{\"6176\":1}}],[\"我们没有arraylist<int>\",{\"1\":{\"5182\":1}}],[\"我们没有权限去修改这部分代码\",{\"1\":{\"2747\":1}}],[\"我们没法通过参数来指定连接池的大小\",{\"1\":{\"2368\":1}}],[\"我们完全可以替换掉继承\",{\"1\":{\"2740\":1}}],[\"我们完全没必要将它拆分成单独的函数或者类\",{\"1\":{\"1253\":1}}],[\"我们又该如何来解决呢\",{\"1\":{\"2732\":1}}],[\"我们又该如何设计类之间的继承关系呢\",{\"1\":{\"2729\":1}}],[\"我们越是要在代码的扩展性\",{\"1\":{\"2719\":1}}],[\"我们做权衡的根本依据\",{\"1\":{\"2716\":1}}],[\"我们做成抽象方法\",{\"1\":{\"1197\":1,\"1246\":1}}],[\"我们按照这个思路\",{\"1\":{\"2710\":1}}],[\"我们对上传\",{\"1\":{\"2708\":1}}],[\"我们要定义更多的类和接口\",{\"1\":{\"2742\":1}}],[\"我们要多思考一下\",{\"1\":{\"2713\":1}}],[\"我们要修改项目中所有使用到这两个方法的代码\",{\"1\":{\"2704\":1}}],[\"我们要根据交通工具运行方法不同\",{\"1\":{\"2017\":1}}],[\"我们一块来看看都有哪些\",{\"1\":{\"2702\":1}}],[\"我们一般会选择使用工厂模式\",{\"1\":{\"1324\":1}}],[\"我们经常说\",{\"1\":{\"2702\":1}}],[\"我们经常需要向某些对象发送请求\",{\"1\":{\"741\":1}}],[\"我们自建了私有云\",{\"1\":{\"2701\":1}}],[\"我们封装了图片存储相关的代码逻辑\",{\"1\":{\"2698\":1}}],[\"我们理解这条原则的时候\",{\"1\":{\"2693\":1}}],[\"我们连续抽\",{\"1\":{\"2456\":1}}],[\"我们通过list1对象和list2对象的getclass\",{\"1\":{\"5091\":1}}],[\"我们通过两个例子证明java类型的类型擦除\",{\"1\":{\"5088\":1}}],[\"我们通过泛型背后的类型擦除以及相关的问题来进一步理解泛型\",{\"1\":{\"5068\":1}}],[\"我们通过一些例子来学习泛型的使用\",{\"1\":{\"5012\":1}}],[\"我们通过一个例子来阐述\",{\"1\":{\"5000\":1}}],[\"我们通过一个例子来解释一下\",{\"1\":{\"2723\":1}}],[\"我们通过一个\",{\"1\":{\"2396\":1}}],[\"我们通过覆盖重写\",{\"1\":{\"2524\":1}}],[\"我们通过查看函数的定义\",{\"1\":{\"2358\":1}}],[\"我们先来看下oracle官网提供的一个例子\",{\"1\":{\"5192\":1}}],[\"我们先来看一下这个注解类型的定义\",{\"1\":{\"4514\":1}}],[\"我们先来看一下\",{\"1\":{\"2393\":1}}],[\"我们先假设它编译没错\",{\"1\":{\"5140\":1}}],[\"我们先看第一种情况\",{\"1\":{\"5138\":1}}],[\"我们先看看参数化类型和原始类型的兼容\",{\"1\":{\"5122\":1}}],[\"我们先造出代理对象的雏形\",{\"1\":{\"1895\":1}}],[\"我们编写的代码\",{\"1\":{\"2388\":1}}],[\"我们放到后面讲解\",{\"1\":{\"2384\":1}}],[\"我们既可以通过单例模式来强制保证\",{\"1\":{\"2383\":1}}],[\"我们可能要从根上\",{\"1\":{\"2383\":1}}],[\"我们可以认为这会更加简单\",{\"1\":{\"6802\":1}}],[\"我们可以在\",{\"0\":{\"5639\":1},\"1\":{\"5619\":1}}],[\"我们可以在系统中创建两个数据库连接池\",{\"1\":{\"2362\":1}}],[\"我们可以做强制转换\",{\"1\":{\"5599\":1}}],[\"我们可以看到如下代码会在编译器中报错\",{\"1\":{\"5187\":1}}],[\"我们可以看出\",{\"1\":{\"1355\":1,\"1357\":1}}],[\"我们可以明白\",{\"1\":{\"5134\":1}}],[\"我们可以分步查看\",{\"1\":{\"5049\":1}}],[\"我们可以分下面四个阶段来完成接口的修改\",{\"1\":{\"2765\":1}}],[\"我们可以为传入的泛型类型实参进行上下边界的限制\",{\"1\":{\"5040\":1}}],[\"我们可以复用为一个方法\",{\"1\":{\"5002\":1}}],[\"我们可以创建一个测试套件\",{\"1\":{\"4487\":1}}],[\"我们可以创建一个单例对象\",{\"1\":{\"2395\":1}}],[\"我们可以使用\",{\"1\":{\"4481\":1}}],[\"我们可以聚焦于这个模块或者类\",{\"1\":{\"2755\":1}}],[\"我们可以针对三个接口再定义三个实现类\",{\"1\":{\"2738\":1}}],[\"我们可以类似地定义\",{\"1\":{\"2735\":1}}],[\"我们可以定义一个\",{\"1\":{\"2735\":1}}],[\"我们可以定义一个方法\",{\"1\":{\"2673\":1}}],[\"我们可以利用组合\",{\"1\":{\"2734\":1}}],[\"我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能\",{\"1\":{\"2486\":1}}],[\"我们可以通过class类的提供的方法来获取代表字段信息的field对象\",{\"1\":{\"5945\":1}}],[\"我们可以通过组合和接口的\",{\"1\":{\"2740\":1}}],[\"我们可以通过配置\",{\"1\":{\"1343\":1}}],[\"我们可以通过下面的方式定义一个0\",{\"1\":{\"427\":1}}],[\"我们把相同的属性和方法\",{\"1\":{\"2745\":1}}],[\"我们把这些规定了流程或格式的实例定义成模板\",{\"1\":{\"2637\":1}}],[\"我们把这种对象称为有状态的对象\",{\"1\":{\"2415\":1}}],[\"我们把数据库连接池类设计成了单例类\",{\"1\":{\"2362\":1}}],[\"我们把迭代器分开\",{\"1\":{\"1556\":1}}],[\"我们觉得系统中只应该有一个数据库连接池\",{\"1\":{\"2362\":1}}],[\"我们拿数据库连接池来举例解释一下\",{\"1\":{\"2361\":1}}],[\"我们希望将这两个对象当成一样的\",{\"1\":{\"5444\":1}}],[\"我们希望将慢\",{\"1\":{\"2362\":1}}],[\"我们希望一眼就能看出类与类之间的依赖关系\",{\"1\":{\"2358\":1}}],[\"我们希望针对不同的业务采用不同的\",{\"1\":{\"2354\":1}}],[\"我们希望只要一个\",{\"1\":{\"769\":1}}],[\"我们不能用getcanonicalname去加载类对象\",{\"1\":{\"5888\":1}}],[\"我们不能违背它的初衷\",{\"1\":{\"5140\":1}}],[\"我们不使用术语\",{\"1\":{\"3937\":1}}],[\"我们不需要创建对象\",{\"1\":{\"2350\":1}}],[\"我们不想针对每一种家电都安装一个\",{\"1\":{\"769\":1}}],[\"我们在java中写连接数据库的代码的时候\",{\"1\":{\"6172\":1}}],[\"我们在一个main方法测试一下\",{\"1\":{\"5159\":1}}],[\"我们在子类中重写这两个方法一点问题也没有\",{\"1\":{\"5154\":1}}],[\"我们在代码中的catch的顺序决定了异常处理者在异常表的位置\",{\"1\":{\"4971\":1}}],[\"我们在进行重构的时候\",{\"1\":{\"2765\":1}}],[\"我们在做软件开发的时候\",{\"1\":{\"2713\":1}}],[\"我们在使用时根据情况选择即可\",{\"1\":{\"6016\":1}}],[\"我们在使用到泛型数组的场景下应该尽量使用列表集合替换\",{\"1\":{\"5204\":1}}],[\"我们在使用上述list中\",{\"1\":{\"5007\":1}}],[\"我们在使用\",{\"1\":{\"2705\":1}}],[\"我们在使用这个单例类的时候\",{\"1\":{\"2369\":1}}],[\"我们在写单元测试的时候\",{\"1\":{\"2365\":1}}],[\"我们在项目中使用单例\",{\"1\":{\"2350\":1}}],[\"我们在实现int\",{\"1\":{\"465\":1}}],[\"我们进行了两次\",{\"1\":{\"2315\":1}}],[\"我们称出现成员变量\",{\"1\":{\"2162\":1}}],[\"我们仍然想使用\",{\"1\":{\"2124\":1}}],[\"我们发现原来运行正常的相减功能发生了错误\",{\"1\":{\"2120\":1}}],[\"我们应当遵守单一职责原则\",{\"1\":{\"2030\":1}}],[\"我们首先需要旧对象的基因\",{\"1\":{\"1861\":1}}],[\"我们增加观察者\",{\"1\":{\"1721\":1}}],[\"我们平时乘坐交通工具\",{\"1\":{\"1503\":1}}],[\"我们需要修改它的定义\",{\"1\":{\"2765\":1}}],[\"我们需要修改所有用到\",{\"1\":{\"2354\":1}}],[\"我们需要做到下面这\",{\"1\":{\"2706\":1}}],[\"我们需要做如下修改\",{\"1\":{\"2148\":1}}],[\"我们需要重新设计实现一个存储图片到私有云的\",{\"1\":{\"2702\":1}}],[\"我们需要手动添加\",{\"1\":{\"2462\":1}}],[\"我们需要把这个单例对象序列化并存储到外部共享存储区\",{\"1\":{\"2403\":1}}],[\"我们需要在代码中创建两个实例或多个实例\",{\"1\":{\"2360\":1}}],[\"我们需要在程序运行期间\",{\"1\":{\"1364\":1}}],[\"我们需要测试这三个依赖类\",{\"1\":{\"2176\":1}}],[\"我们需要将它标记为可用状态\",{\"1\":{\"1388\":1}}],[\"我们需要利用\",{\"1\":{\"1364\":1}}],[\"我们需要通过一种形式\",{\"1\":{\"1333\":1}}],[\"我们还常常和finally做结合使用\",{\"1\":{\"4960\":1}}],[\"我们还希望制作纯豆浆\",{\"1\":{\"2674\":1}}],[\"我们还是要根据具体的情况\",{\"1\":{\"2742\":1}}],[\"我们还是将它跟\",{\"1\":{\"2401\":1}}],[\"我们还是先来解释一下\",{\"1\":{\"2400\":1}}],[\"我们还是通过一个例子来解释一下\",{\"1\":{\"2410\":1}}],[\"我们还是通过\",{\"1\":{\"2352\":1}}],[\"我们还可以重新创建一个新的单例对象\",{\"1\":{\"2395\":1}}],[\"我们还可以用静态方法来实现\",{\"1\":{\"2378\":1}}],[\"我们还可以配置对象的\",{\"1\":{\"1345\":1}}],[\"我们还可以配置对象是否支持懒加载\",{\"1\":{\"1344\":1}}],[\"我们还能整出不少活来\",{\"1\":{\"427\":1}}],[\"我们会引用具体厂商的jar包来实现我们的功能\",{\"1\":{\"6235\":1}}],[\"我们会用一些功能较为简单的并且其行为和实际对象类似的假对象来作为\",{\"1\":{\"4464\":1}}],[\"我们会给你打电话的\",{\"1\":{\"2792\":1}}],[\"我们会讲\",{\"1\":{\"1341\":1}}],[\"我们会如下写\",{\"1\":{\"554\":1}}],[\"我们来测试下这个注解\",{\"1\":{\"4610\":1}}],[\"我们来一块简单了解都有哪些原则\",{\"1\":{\"2774\":1}}],[\"我们来看下都有哪些解决方案\",{\"1\":{\"2368\":1}}],[\"我们来看一下为什么finally会执行\",{\"1\":{\"4977\":1}}],[\"我们来看一下\",{\"1\":{\"2173\":1}}],[\"我们来看\",{\"1\":{\"1362\":1}}],[\"我们来看对象的生命周期管理\",{\"1\":{\"1342\":1}}],[\"我们来看配置解析\",{\"1\":{\"1332\":1}}],[\"我们来学习一个创建对象的\",{\"1\":{\"1325\":1}}],[\"我们就应该做好了从头开始优化重写代码的准备\",{\"1\":{\"2801\":1}}],[\"我们就尽量使用组合来替代继承\",{\"1\":{\"2743\":1}}],[\"我们就围绕着这三个问题\",{\"1\":{\"2721\":1}}],[\"我们就需要仔细查看每个函数的代码实现\",{\"1\":{\"2358\":1}}],[\"我们就具体看看到底有哪些问题\",{\"1\":{\"2350\":1}}],[\"我们就说这两个对象之间是朋友关系\",{\"1\":{\"2162\":1}}],[\"我们就可以大胆地使用继承\",{\"1\":{\"2743\":1}}],[\"我们就可以考虑选用享元模式\",{\"1\":{\"1439\":1}}],[\"我们就可以对内存为所欲为了\",{\"1\":{\"465\":1}}],[\"我们就详细讲讲\",{\"1\":{\"1329\":1}}],[\"我们就推荐使用工厂方法模式\",{\"1\":{\"1255\":1}}],[\"我们推荐使用工厂方法模式\",{\"1\":{\"1254\":1}}],[\"我们沿用第一种分类方法\",{\"1\":{\"1159\":1}}],[\"我们都能找到期望的方法运行\",{\"1\":{\"2967\":1}}],[\"我们都需要重写\",{\"1\":{\"2727\":1}}],[\"我们都会自觉地创建一个新的类封装这些子系统\",{\"1\":{\"1096\":1}}],[\"我们都在有意无意的大量使用外观模式\",{\"1\":{\"1096\":1}}],[\"我们每按下一个按键都要判空\",{\"1\":{\"796\":1}}],[\"我们买了一套智能家电\",{\"1\":{\"768\":1}}],[\"我们去餐厅吃饭\",{\"1\":{\"746\":1}}],[\"我们只能采用继承来实现了\",{\"1\":{\"2747\":1}}],[\"我们只关注\",{\"1\":{\"2729\":1}}],[\"我们只支持下面配置文件中涉及的配置语法\",{\"1\":{\"1349\":1}}],[\"我们只实现一个\",{\"1\":{\"1349\":1}}],[\"我们只需要测试这一个依赖类是否还能正常工作就行了\",{\"1\":{\"2175\":1}}],[\"我们只需要将所有类对象的创建都放到一个工厂类中完成就可以了\",{\"1\":{\"1340\":1}}],[\"我们只需要调整内部的层次关系\",{\"1\":{\"865\":1}}],[\"我们只需在程序运行时指定具体的请求接收者即可\",{\"1\":{\"741\":1}}],[\"我们只要在手机上安装\",{\"1\":{\"768\":1}}],[\"我们只想监听\",{\"1\":{\"554\":1}}],[\"我们分不清该使用继承还是组合\",{\"1\":{\"647\":1}}],[\"我们知道继承主要有三个作用\",{\"1\":{\"2740\":1}}],[\"我们知道\",{\"1\":{\"645\":1,\"1364\":1,\"2352\":1,\"2358\":1,\"2360\":1,\"2402\":1,\"2725\":1,\"2737\":1,\"2782\":1}}],[\"我们将这个设计思路翻译成\",{\"1\":{\"2735\":1}}],[\"我们将单例生成的对象\",{\"1\":{\"2382\":1}}],[\"我们将需要由\",{\"1\":{\"1334\":1}}],[\"我们将\",{\"1\":{\"564\":1,\"2724\":1}}],[\"我们的本意是进行重写\",{\"1\":{\"5166\":1}}],[\"我们的本意是将泛型类变为如下\",{\"1\":{\"5163\":1}}],[\"我们的原意是这样的\",{\"1\":{\"5152\":1}}],[\"我们的\",{\"1\":{\"535\":1}}],[\"我们的目标是\",{\"1\":{\"516\":1}}],[\"我们所做的所有事都是为了提升自我\",{\"1\":{\"142\":1}}],[\"我就是玩\",{\"1\":{\"419\":1}}],[\"我打赌你肯定想不到\",{\"1\":{\"400\":1}}],[\"我发现好处还是挺多的\",{\"1\":{\"394\":1}}],[\"izpack\",{\"1\":{\"6401\":1}}],[\"ii\",{\"1\":{\"5883\":2}}],[\"i<s>\",{\"1\":{\"5236\":1}}],[\"iyangyuan\",{\"1\":{\"5022\":1,\"5243\":1}}],[\"icyfenix\",{\"1\":{\"4986\":1}}],[\"icon\",{\"1\":{\"379\":1}}],[\"icons\",{\"1\":{\"378\":1,\"379\":1}}],[\"ignoretest\",{\"1\":{\"4337\":2}}],[\"ignore\",{\"1\":{\"4295\":1,\"4336\":1,\"4337\":5,\"5271\":1,\"6201\":2}}],[\"ignored\",{\"1\":{\"346\":1}}],[\"ibatis自带的queryforlist\",{\"1\":{\"3398\":1}}],[\"illegal\",{\"1\":{\"5489\":1,\"5530\":1,\"6258\":3}}],[\"illegalstateexception\",{\"1\":{\"4881\":1,\"5718\":1}}],[\"illegalstateexception异常\",{\"1\":{\"3092\":1}}],[\"illegalargumentexception\",{\"1\":{\"1315\":1,\"1906\":1,\"4826\":1,\"4879\":1,\"4900\":2,\"4903\":1,\"5718\":1,\"6083\":1,\"6086\":4,\"6107\":1,\"6111\":2,\"6114\":1,\"6118\":3}}],[\"illegalaccessexception\",{\"1\":{\"438\":1,\"1366\":1,\"4839\":1,\"5190\":1,\"5883\":1,\"6054\":1,\"6065\":2,\"6086\":1,\"6107\":1,\"6118\":1}}],[\"ie2\",{\"1\":{\"5382\":2}}],[\"ie1\",{\"1\":{\"5382\":1}}],[\"ie\",{\"1\":{\"1620\":1,\"6201\":1}}],[\"iae\",{\"1\":{\"1315\":1}}],[\"ipv6\",{\"1\":{\"4195\":1,\"4217\":1}}],[\"ipv4\",{\"1\":{\"3443\":1}}],[\"ip\",{\"1\":{\"3657\":1,\"4693\":2}}],[\"ipaddress\",{\"1\":{\"1336\":4}}],[\"iproductfactory\",{\"1\":{\"1308\":3}}],[\"iphoneproduct1\",{\"1\":{\"1310\":5}}],[\"iphoneproduct\",{\"1\":{\"1302\":1,\"1304\":2,\"1308\":3,\"1310\":7}}],[\"ioutils\",{\"1\":{\"6898\":1}}],[\"iot开发者\",{\"1\":{\"6706\":1}}],[\"ios\",{\"1\":{\"4195\":1,\"4199\":1,\"4217\":1}}],[\"ioc\",{\"1\":{\"2383\":2,\"2384\":1}}],[\"iopenandclose3\",{\"1\":{\"2089\":2}}],[\"iopenandclose2\",{\"1\":{\"2089\":2}}],[\"iopenandclose1\",{\"1\":{\"2089\":2}}],[\"ioexception\",{\"1\":{\"1356\":1,\"1491\":3,\"4743\":1,\"4746\":1,\"4757\":1,\"4769\":2,\"4771\":2,\"4781\":2,\"4794\":1,\"4796\":1,\"4798\":1,\"4827\":1,\"4828\":1,\"4861\":1,\"4866\":1,\"4869\":1,\"5716\":1,\"6258\":1}}],[\"io\",{\"0\":{\"929\":1},\"1\":{\"930\":1,\"937\":1,\"3929\":1,\"4644\":1,\"4649\":1,\"4963\":6,\"4969\":6,\"4978\":6,\"5287\":1,\"5825\":1,\"6201\":1,\"6898\":1}}],[\"ireceiver\",{\"1\":{\"2080\":3,\"2082\":4}}],[\"irouterproduct1\",{\"1\":{\"1310\":5}}],[\"irouterproduct\",{\"1\":{\"1302\":1,\"1306\":2,\"1308\":3,\"1310\":7}}],[\"ir\",{\"1\":{\"766\":2}}],[\"ivoltage5v\",{\"1\":{\"520\":2,\"522\":4,\"540\":2,\"542\":4}}],[\"im4java\",{\"1\":{\"6453\":1}}],[\"im\",{\"1\":{\"6136\":1}}],[\"imgscalr\",{\"1\":{\"6449\":1}}],[\"img\",{\"1\":{\"4710\":1,\"4779\":1,\"5024\":1,\"5026\":1,\"5080\":1,\"5083\":1,\"5086\":1,\"5293\":1,\"5536\":1,\"5590\":1,\"5781\":1,\"5785\":1,\"5789\":1,\"5793\":1,\"5797\":1,\"5804\":1,\"5840\":1,\"5842\":1,\"6056\":1,\"6143\":1,\"6194\":1,\"6239\":1,\"6254\":1,\"6255\":1}}],[\"immutablesortedmultiset\",{\"1\":{\"6902\":1}}],[\"immutables\",{\"1\":{\"6374\":1,\"6815\":3}}],[\"immutableset\",{\"1\":{\"4179\":1,\"6836\":1}}],[\"immutableset<somemutabletype>\",{\"1\":{\"4179\":1}}],[\"immutable类的所有的属性都应该是final的\",{\"1\":{\"5629\":1}}],[\"immutable对象的状态在创建之后就不能发生改变\",{\"1\":{\"5628\":1}}],[\"immutablemap<string\",{\"1\":{\"4179\":1}}],[\"immutablemap\",{\"1\":{\"4179\":2,\"6803\":1,\"6836\":1,\"6902\":1}}],[\"immutablelist<string>\",{\"1\":{\"4179\":1}}],[\"immutablelist\",{\"1\":{\"4169\":1,\"4179\":1,\"6803\":1,\"6836\":1,\"6902\":1}}],[\"immutable\",{\"0\":{\"5616\":1,\"5624\":1,\"6813\":1,\"6831\":1},\"1\":{\"3162\":1,\"4178\":1,\"4179\":1,\"5298\":1,\"6751\":1,\"6755\":1,\"6902\":1}}],[\"impl\",{\"1\":{\"6201\":1,\"6206\":1}}],[\"implicitly\",{\"1\":{\"6083\":1}}],[\"imple\",{\"1\":{\"605\":9}}],[\"implementor\",{\"1\":{\"601\":1,\"602\":1,\"605\":7}}],[\"implementations\",{\"1\":{\"6201\":4}}],[\"implementation\",{\"0\":{\"2898\":1},\"1\":{\"589\":1,\"2693\":1,\"3937\":1,\"4148\":1,\"6109\":1,\"6201\":6}}],[\"implements\",{\"1\":{\"520\":1,\"540\":1,\"557\":1,\"564\":1,\"605\":1,\"622\":2,\"766\":1,\"777\":5,\"788\":1,\"832\":2,\"834\":2,\"894\":2,\"1304\":2,\"1306\":2,\"1308\":2,\"1356\":1,\"1360\":1,\"1406\":1,\"1476\":2,\"1525\":2,\"1535\":2,\"1537\":2,\"1686\":2,\"1716\":2,\"1718\":1,\"1772\":1,\"1793\":1,\"1795\":1,\"1842\":2,\"1869\":1,\"1903\":1,\"2052\":2,\"2058\":2,\"2082\":2,\"2089\":6,\"2467\":1,\"2512\":2,\"2535\":3,\"2711\":2,\"2736\":1,\"2739\":2,\"2902\":1,\"2953\":4,\"3157\":1,\"4798\":1,\"5020\":1,\"5287\":1,\"5382\":1,\"5460\":1,\"5463\":1,\"5466\":1,\"5784\":1,\"5825\":1,\"5883\":1,\"5914\":1,\"6151\":1,\"6153\":1,\"6201\":1,\"6258\":2}}],[\"important\",{\"1\":{\"5529\":1,\"6118\":1}}],[\"importer\",{\"1\":{\"4220\":1}}],[\"import\",{\"0\":{\"3981\":1},\"1\":{\"3281\":2,\"3283\":2,\"3974\":1,\"3985\":2,\"3987\":1,\"3990\":1,\"3991\":1,\"4032\":2,\"4065\":1,\"4326\":2,\"4333\":1,\"4337\":2,\"4360\":2,\"4368\":5,\"4372\":1,\"4378\":2,\"4383\":5,\"4407\":7,\"4411\":1,\"4413\":1,\"4415\":2,\"4419\":3,\"4607\":3,\"4642\":4,\"4644\":5,\"5501\":1,\"5883\":1,\"6013\":1}}],[\"impelents\",{\"1\":{\"2736\":1}}],[\"improve\",{\"1\":{\"385\":1}}],[\"imagestore\",{\"1\":{\"2699\":4,\"2711\":7}}],[\"images\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"imageprocessingjob\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"image\",{\"1\":{\"507\":1,\"510\":1,\"514\":1,\"518\":1,\"532\":1,\"538\":1,\"563\":1,\"572\":1,\"603\":1,\"608\":1,\"611\":1,\"619\":1,\"629\":1,\"631\":1,\"658\":1,\"685\":1,\"691\":1,\"705\":1,\"716\":1,\"764\":1,\"774\":1,\"786\":1,\"791\":1,\"824\":1,\"827\":1,\"830\":1,\"837\":1,\"840\":1,\"847\":1,\"862\":1,\"892\":1,\"902\":1,\"911\":1,\"918\":1,\"920\":1,\"931\":1,\"1112\":1,\"1120\":1,\"1129\":1,\"1131\":1,\"1141\":1,\"1143\":1,\"1188\":1,\"1195\":1,\"1209\":1,\"1234\":1,\"1243\":1,\"1294\":1,\"1296\":1,\"1299\":1,\"1397\":1,\"1404\":1,\"1414\":1,\"1422\":1,\"1434\":1,\"1474\":1,\"1481\":1,\"1484\":1,\"1523\":1,\"1530\":1,\"1544\":1,\"1546\":1,\"1584\":1,\"1591\":1,\"1598\":1,\"1634\":1,\"1640\":1,\"1646\":1,\"1684\":1,\"1695\":1,\"1699\":1,\"1713\":1,\"1724\":1,\"1754\":1,\"1759\":1,\"1777\":1,\"1823\":1,\"1831\":1,\"1840\":1,\"1863\":1,\"1867\":1,\"1883\":1,\"1899\":1,\"1949\":1,\"1951\":1,\"1969\":1,\"2036\":1,\"2057\":1,\"2123\":1,\"2142\":1,\"2203\":1,\"2206\":1,\"2209\":1,\"2436\":1,\"2445\":1,\"2450\":1,\"2510\":1,\"2519\":1,\"2532\":1,\"2544\":1,\"2661\":1,\"2671\":1,\"2699\":7,\"2711\":13,\"2823\":1,\"2827\":1,\"2829\":1,\"2838\":1,\"2839\":1,\"2855\":1,\"2870\":1,\"2876\":1,\"2886\":1,\"2889\":1,\"2897\":1,\"2904\":1,\"2951\":1,\"2957\":1}}],[\"i++\",{\"1\":{\"473\":1,\"781\":1,\"1489\":1,\"1718\":1,\"2188\":2,\"2194\":2,\"2456\":1,\"2997\":1,\"3072\":1,\"4405\":1,\"4981\":3,\"5093\":1,\"5463\":1,\"5466\":2,\"5469\":2,\"5914\":1,\"6083\":1,\"6101\":1,\"6118\":1}}],[\"i2\",{\"1\":{\"326\":1,\"5044\":3,\"5883\":3}}],[\"i1\",{\"1\":{\"326\":1,\"5042\":1,\"5044\":3,\"5883\":3}}],[\"i\",{\"1\":{\"266\":1,\"473\":3,\"781\":4,\"832\":4,\"834\":3,\"943\":1,\"1366\":7,\"1489\":4,\"1603\":1,\"1718\":3,\"2052\":12,\"2058\":12,\"2188\":6,\"2194\":6,\"2456\":3,\"2726\":1,\"2953\":3,\"2997\":2,\"3072\":2,\"3301\":1,\"4231\":2,\"4405\":3,\"4981\":6,\"5020\":3,\"5062\":2,\"5093\":3,\"5112\":1,\"5196\":1,\"5269\":5,\"5271\":4,\"5463\":4,\"5466\":8,\"5469\":8,\"5914\":4,\"5964\":2,\"6083\":4,\"6101\":3,\"6118\":5,\"6258\":4,\"6651\":1}}],[\"ifndef\",{\"1\":{\"5575\":1}}],[\"ifnull\",{\"1\":{\"3382\":1,\"3520\":1}}],[\"ifdef\",{\"1\":{\"5575\":1}}],[\"iftest\",{\"1\":{\"453\":3}}],[\"if\",{\"1\":{\"255\":1,\"375\":1,\"418\":2,\"420\":2,\"435\":1,\"450\":1,\"453\":1,\"522\":2,\"540\":1,\"542\":2,\"571\":1,\"1212\":6,\"1250\":4,\"1255\":2,\"1315\":7,\"1324\":1,\"1356\":2,\"1366\":7,\"1406\":1,\"1429\":1,\"1491\":2,\"1525\":2,\"1537\":2,\"1586\":2,\"1601\":10,\"1718\":1,\"1936\":2,\"1953\":4,\"1972\":4,\"2144\":2,\"2149\":2,\"2298\":1,\"2301\":1,\"2304\":1,\"2310\":1,\"2313\":2,\"2315\":1,\"2316\":1,\"2370\":2,\"2372\":1,\"2376\":1,\"2406\":1,\"2416\":2,\"2417\":1,\"2452\":1,\"2454\":2,\"2459\":1,\"2460\":3,\"2462\":1,\"2476\":2,\"2495\":1,\"2539\":1,\"2546\":4,\"2550\":2,\"2677\":1,\"2997\":1,\"3021\":1,\"3022\":1,\"3025\":2,\"3049\":2,\"3051\":1,\"3053\":1,\"3070\":1,\"3091\":1,\"3097\":1,\"3115\":1,\"3117\":1,\"3172\":1,\"3179\":2,\"3187\":1,\"3193\":1,\"3194\":1,\"3195\":3,\"3197\":1,\"3199\":1,\"3265\":1,\"3289\":1,\"4006\":1,\"4016\":2,\"4019\":1,\"4070\":1,\"4405\":1,\"4647\":1,\"4693\":6,\"4696\":5,\"4754\":1,\"4781\":1,\"4851\":1,\"4866\":1,\"5048\":2,\"5055\":1,\"5269\":1,\"5271\":2,\"5354\":1,\"5424\":1,\"5440\":4,\"5527\":1,\"5761\":1,\"5914\":1,\"6063\":15,\"6065\":5,\"6071\":1,\"6076\":9,\"6083\":6,\"6086\":5,\"6090\":1,\"6096\":4,\"6099\":6,\"6101\":1,\"6107\":3,\"6109\":5,\"6111\":1,\"6114\":1,\"6118\":13,\"6180\":1,\"6201\":37,\"6258\":17,\"6834\":1,\"6835\":1,\"6844\":1,\"6853\":1}}],[\"indiscriminately\",{\"1\":{\"5527\":1}}],[\"independent\",{\"1\":{\"3301\":1}}],[\"indexof\",{\"1\":{\"6258\":3}}],[\"indexoutofbounds\",{\"1\":{\"5226\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"4722\":1,\"4885\":1,\"5718\":1}}],[\"indexoutofboundsexception等等\",{\"1\":{\"3265\":1,\"4848\":1}}],[\"index\",{\"1\":{\"1525\":4,\"1537\":4,\"3373\":1,\"3375\":2,\"4183\":1,\"5205\":4,\"5241\":1,\"5463\":4,\"5466\":4,\"5469\":4}}],[\"inherited注解\",{\"1\":{\"4611\":1,\"4617\":1}}],[\"inherited注解的作用\",{\"1\":{\"4609\":1}}],[\"inherited修饰的annotation\",{\"1\":{\"4609\":1,\"4665\":1}}],[\"inherited用于标明注解可继承\",{\"1\":{\"4502\":1}}],[\"inherited\",{\"0\":{\"4608\":1},\"1\":{\"4502\":1,\"4586\":1,\"4612\":1,\"4665\":1}}],[\"inheritance\",{\"1\":{\"2103\":1}}],[\"innerclass\",{\"1\":{\"5371\":6,\"5497\":7}}],[\"innerstopwatch\",{\"1\":{\"4215\":1,\"4216\":1}}],[\"inner\",{\"1\":{\"4214\":1,\"4575\":1,\"5888\":8}}],[\"in操作能避免则避免\",{\"1\":{\"3390\":1}}],[\"infinispan\",{\"1\":{\"6395\":1}}],[\"infield\",{\"1\":{\"3388\":1}}],[\"inf\",{\"1\":{\"6144\":2,\"6154\":1,\"6160\":1,\"6161\":1,\"6168\":1,\"6188\":1,\"6191\":1,\"6201\":3,\"6212\":1,\"6218\":2,\"6219\":2,\"6232\":1,\"6258\":1,\"6260\":2}}],[\"inflationthreshold\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"inflate\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"inference\",{\"1\":{\"5558\":1}}],[\"infoq\",{\"1\":{\"6727\":1,\"7013\":1}}],[\"information\",{\"1\":{\"5524\":1,\"6118\":2}}],[\"info<\",{\"1\":{\"5044\":1}}],[\"info<object>\",{\"1\":{\"5044\":2}}],[\"info<integer>\",{\"1\":{\"5042\":2}}],[\"info<t\",{\"1\":{\"5042\":1}}],[\"info<t>\",{\"1\":{\"5020\":2,\"5044\":1}}],[\"info<string>\",{\"1\":{\"5020\":1,\"5044\":2}}],[\"infoimpl<string>\",{\"1\":{\"5020\":1}}],[\"infoimpl<t>\",{\"1\":{\"5020\":1}}],[\"infoimpl\",{\"1\":{\"5020\":1}}],[\"info级别的日志输出\",{\"1\":{\"3288\":1}}],[\"infocolleageiterator\",{\"1\":{\"1535\":1,\"1537\":2}}],[\"infocollege\",{\"1\":{\"1535\":2,\"1541\":4}}],[\"infoengineercollege\",{\"1\":{\"858\":5}}],[\"info\",{\"1\":{\"64\":1,\"1399\":1,\"1406\":8,\"1476\":4,\"5853\":6,\"6118\":65}}],[\"insideone\",{\"1\":{\"5733\":6}}],[\"insure\",{\"1\":{\"5525\":1}}],[\"insertdept\",{\"1\":{\"4696\":1}}],[\"insert\",{\"1\":{\"4696\":1}}],[\"insert做前缀\",{\"1\":{\"3006\":1}}],[\"inst\",{\"1\":{\"6086\":2}}],[\"instruments\",{\"1\":{\"5776\":4}}],[\"instrument\",{\"1\":{\"5775\":4,\"5776\":7}}],[\"instantiated\",{\"1\":{\"5376\":1,\"5382\":1}}],[\"instantiationexception\",{\"1\":{\"1366\":1,\"4840\":1,\"5190\":1,\"5883\":1,\"6054\":1,\"6065\":3,\"6086\":3,\"6118\":1}}],[\"instantiation\",{\"1\":{\"1315\":1}}],[\"instances\",{\"1\":{\"2397\":3,\"2411\":3,\"5523\":1}}],[\"instance2\",{\"1\":{\"2286\":5,\"2293\":4,\"2298\":4,\"2304\":4,\"2310\":4,\"2313\":4,\"2320\":4,\"2328\":3}}],[\"instanceof\",{\"1\":{\"1601\":8}}],[\"instance\",{\"1\":{\"350\":1,\"1134\":12,\"2286\":7,\"2290\":2,\"2293\":7,\"2298\":9,\"2304\":8,\"2310\":8,\"2313\":9,\"2320\":8,\"2328\":7,\"2370\":6,\"2372\":4,\"2376\":4,\"2406\":5,\"4324\":1,\"5558\":1,\"6076\":1,\"6081\":1,\"6201\":5}}],[\"instead\",{\"1\":{\"350\":1,\"6076\":1,\"6096\":1,\"6904\":1}}],[\"inputnumber\",{\"1\":{\"4407\":6}}],[\"input\",{\"1\":{\"4125\":2,\"4896\":1,\"4920\":2,\"4922\":1,\"4926\":1,\"6915\":1}}],[\"inputparams\",{\"1\":{\"3292\":1}}],[\"inputuserid\",{\"1\":{\"2990\":1}}],[\"inputstreamreader\",{\"1\":{\"1491\":2,\"6201\":2,\"6258\":1}}],[\"inputstream\",{\"1\":{\"932\":1,\"933\":1,\"934\":1,\"936\":1,\"943\":1,\"1356\":1,\"1360\":4,\"4861\":4,\"4866\":5,\"4869\":2,\"6201\":1,\"6258\":1}}],[\"increment\",{\"1\":{\"6063\":1}}],[\"incrementandget\",{\"1\":{\"2379\":1,\"2397\":1,\"2406\":1}}],[\"incompatible\",{\"1\":{\"5355\":1}}],[\"incomplete\",{\"1\":{\"4552\":1}}],[\"incorrect\",{\"1\":{\"4207\":1,\"4572\":1}}],[\"including\",{\"1\":{\"346\":1}}],[\"invalidated\",{\"1\":{\"6081\":1}}],[\"inversion\",{\"1\":{\"2061\":1}}],[\"involves\",{\"1\":{\"5528\":1,\"6201\":1}}],[\"invokedescriptoridx\",{\"1\":{\"6118\":1}}],[\"invokeidx\",{\"1\":{\"6118\":1}}],[\"invoke时\",{\"1\":{\"6108\":1}}],[\"invokevirtual\",{\"1\":{\"4943\":1,\"4963\":4,\"4969\":4,\"4978\":3,\"5169\":2}}],[\"invokestatic\",{\"1\":{\"4943\":1,\"4963\":1,\"4969\":1,\"4978\":1}}],[\"invokespecial\",{\"1\":{\"4600\":1,\"5169\":3}}],[\"invokemethod\",{\"1\":{\"4374\":2,\"4380\":2}}],[\"invokeexplosively\",{\"1\":{\"4374\":1,\"4380\":1}}],[\"invoke0\",{\"1\":{\"4374\":1,\"4380\":1,\"6111\":2,\"6114\":2}}],[\"invoke\",{\"0\":{\"6106\":1},\"1\":{\"1871\":2,\"1903\":2,\"4374\":3,\"4380\":3,\"5093\":1,\"5520\":1,\"6017\":3,\"6025\":1,\"6054\":2,\"6063\":1,\"6107\":2,\"6111\":3,\"6112\":2,\"6113\":1,\"6114\":1,\"6118\":4}}],[\"invoker\",{\"1\":{\"745\":1,\"762\":1,\"766\":4}}],[\"invocationhandler\",{\"1\":{\"1856\":1,\"1871\":3}}],[\"invocationtargetexception\",{\"1\":{\"1366\":1,\"6054\":1,\"6065\":1,\"6086\":3,\"6107\":1,\"6111\":2,\"6114\":1,\"6118\":2}}],[\"initargs\",{\"1\":{\"5934\":1,\"6086\":2}}],[\"initcause\",{\"1\":{\"4757\":1,\"4781\":1,\"5229\":1,\"6065\":1}}],[\"initialization\",{\"1\":{\"5825\":1}}],[\"initialized\",{\"1\":{\"5382\":1,\"6178\":1}}],[\"initialize\",{\"1\":{\"344\":1,\"4407\":1,\"5825\":1,\"6180\":3}}],[\"initialordertest\",{\"1\":{\"5506\":1}}],[\"initialvalue\",{\"1\":{\"3161\":1}}],[\"initialcapacity\",{\"1\":{\"3123\":2}}],[\"init\",{\"1\":{\"1345\":3,\"2369\":2,\"2370\":4,\"5853\":1}}],[\"init=\",{\"1\":{\"1351\":1}}],[\"init=false\",{\"1\":{\"1344\":1}}],[\"init=true\",{\"1\":{\"1344\":1}}],[\"injection\",{\"0\":{\"6819\":1},\"1\":{\"1325\":1,\"6753\":1}}],[\"injection框架\",{\"0\":{\"1323\":1}}],[\"intresult\",{\"1\":{\"6915\":1}}],[\"introduced\",{\"1\":{\"385\":1}}],[\"intvalue\",{\"1\":{\"6118\":1}}],[\"into\",{\"1\":{\"3220\":1,\"5271\":1,\"6118\":1,\"6201\":1}}],[\"intent\",{\"1\":{\"6632\":1}}],[\"integration\",{\"0\":{\"6878\":1},\"1\":{\"6498\":1,\"6764\":1}}],[\"integer及其它包装类\",{\"1\":{\"5625\":1}}],[\"integer对象\",{\"1\":{\"3276\":1}}],[\"integer对象是在integercache\",{\"1\":{\"3046\":1}}],[\"integer>返回\",{\"1\":{\"5234\":1,\"5236\":1}}],[\"integer>\",{\"1\":{\"1487\":5,\"1489\":1,\"1491\":3,\"4179\":1,\"5017\":2,\"6915\":1}}],[\"integercachehighpropvalue\",{\"1\":{\"5271\":3}}],[\"integercache\",{\"1\":{\"1436\":1,\"5269\":4,\"5271\":2}}],[\"integer\",{\"0\":{\"1432\":1,\"5614\":1},\"1\":{\"1433\":1,\"1436\":17,\"1491\":1,\"2546\":6,\"2836\":1,\"2853\":1,\"3070\":1,\"3113\":1,\"3189\":4,\"3201\":1,\"4231\":1,\"4368\":2,\"4405\":1,\"4407\":2,\"5062\":1,\"5093\":1,\"5193\":1,\"5196\":3,\"5205\":2,\"5234\":1,\"5236\":1,\"5262\":1,\"5264\":2,\"5265\":1,\"5266\":1,\"5267\":8,\"5269\":2,\"5270\":1,\"5271\":6,\"5272\":1,\"5273\":2,\"5282\":2,\"5355\":1,\"5369\":1,\"5434\":4,\"5615\":2,\"6017\":2,\"6118\":1}}],[\"intellij\",{\"0\":{\"6972\":1},\"1\":{\"4374\":4,\"6443\":1,\"6784\":1,\"6824\":1,\"6974\":1,\"6977\":2,\"6987\":1}}],[\"intecept\",{\"1\":{\"1905\":1}}],[\"interviews\",{\"1\":{\"7013\":1}}],[\"intersperse\",{\"1\":{\"6927\":1}}],[\"intermediate\",{\"1\":{\"6081\":1}}],[\"intermap\",{\"1\":{\"1601\":10}}],[\"interruptedexception\",{\"1\":{\"4378\":1,\"5416\":3,\"6015\":3}}],[\"intern\",{\"0\":{\"5308\":1},\"1\":{\"5309\":1,\"5310\":2,\"5311\":2,\"6101\":1}}],[\"internalerror\",{\"1\":{\"6118\":2}}],[\"internals\",{\"1\":{\"5530\":1}}],[\"internalservererror\",{\"1\":{\"3226\":1}}],[\"internal\",{\"1\":{\"4374\":4,\"4380\":4}}],[\"internedname\",{\"1\":{\"6101\":2}}],[\"interned\",{\"1\":{\"1315\":1,\"5271\":1}}],[\"interger\",{\"1\":{\"2902\":2}}],[\"intercept\",{\"1\":{\"1903\":4}}],[\"interpret\",{\"1\":{\"1468\":1,\"1476\":3}}],[\"interpreter\",{\"1\":{\"1069\":1,\"1455\":1,\"1487\":11,\"1489\":2,\"2628\":1}}],[\"interfacemethodref\",{\"1\":{\"6118\":1}}],[\"interface在新窗口打开\",{\"1\":{\"5397\":1,\"5398\":1}}],[\"interfaceimplementexample\",{\"1\":{\"5382\":2}}],[\"interfaceexample\",{\"1\":{\"5382\":7}}],[\"interface3\",{\"1\":{\"2058\":5}}],[\"interface2\",{\"1\":{\"2058\":5}}],[\"interface1\",{\"1\":{\"2037\":3,\"2038\":1,\"2050\":2,\"2052\":11,\"2053\":3,\"2055\":1,\"2056\":1,\"2058\":7}}],[\"interfaces\",{\"1\":{\"1856\":1,\"1871\":2,\"6081\":1,\"6118\":2}}],[\"interface4\",{\"1\":{\"564\":3}}],[\"interface\",{\"1\":{\"520\":1,\"540\":1,\"559\":1,\"564\":1,\"605\":1,\"622\":1,\"766\":1,\"777\":1,\"832\":1,\"834\":1,\"894\":1,\"1277\":1,\"1302\":2,\"1308\":1,\"1321\":1,\"1356\":1,\"1360\":1,\"1406\":1,\"1476\":1,\"1525\":2,\"1535\":1,\"1686\":1,\"1716\":1,\"1718\":1,\"1842\":1,\"1869\":1,\"2033\":1,\"2052\":1,\"2058\":3,\"2082\":1,\"2089\":6,\"2465\":1,\"2512\":1,\"2535\":1,\"2537\":1,\"2693\":2,\"2711\":1,\"2736\":3,\"2739\":1,\"2825\":1,\"2902\":1,\"2953\":2,\"3935\":1,\"4515\":1,\"4519\":1,\"4523\":1,\"4596\":3,\"4607\":1,\"4612\":1,\"4642\":1,\"4660\":2,\"4663\":1,\"4664\":1,\"4690\":1,\"4798\":1,\"5020\":1,\"5236\":1,\"5382\":2,\"5786\":1,\"5805\":1,\"5824\":1,\"5883\":4,\"6049\":1,\"6140\":1,\"6141\":1,\"6149\":1,\"6201\":2,\"6258\":1}}],[\"interactive\",{\"1\":{\"343\":1}}],[\"interaction\",{\"0\":{\"328\":1}}],[\"int\",{\"0\":{\"5598\":1,\"5614\":1},\"1\":{\"408\":1,\"418\":1,\"420\":1,\"428\":1,\"466\":1,\"473\":1,\"520\":6,\"540\":6,\"781\":4,\"832\":3,\"834\":2,\"915\":1,\"1336\":2,\"1338\":1,\"1351\":1,\"1366\":1,\"1429\":1,\"1487\":5,\"1489\":2,\"1525\":1,\"1535\":1,\"1537\":2,\"1601\":2,\"1603\":6,\"1649\":8,\"1653\":6,\"1718\":1,\"1761\":4,\"1772\":4,\"1974\":6,\"2118\":9,\"2124\":12,\"2144\":1,\"2149\":1,\"2152\":1,\"2188\":2,\"2194\":2,\"2370\":6,\"2372\":6,\"2376\":4,\"2409\":2,\"2452\":4,\"2454\":1,\"2456\":1,\"2469\":3,\"2546\":2,\"2987\":1,\"2997\":5,\"3018\":3,\"3025\":1,\"3029\":2,\"3037\":1,\"3067\":4,\"3072\":1,\"3083\":1,\"3085\":2,\"3120\":1,\"3123\":1,\"3272\":2,\"3276\":1,\"3288\":1,\"3366\":1,\"3398\":2,\"4016\":1,\"4088\":2,\"4095\":2,\"4108\":1,\"4115\":4,\"4141\":1,\"4179\":1,\"4231\":1,\"4244\":1,\"4360\":4,\"4372\":4,\"4405\":1,\"4612\":1,\"4754\":1,\"4932\":2,\"4981\":5,\"5001\":3,\"5064\":1,\"5093\":1,\"5112\":3,\"5204\":1,\"5205\":3,\"5257\":1,\"5262\":1,\"5269\":1,\"5271\":7,\"5278\":1,\"5344\":2,\"5355\":1,\"5366\":1,\"5369\":1,\"5371\":2,\"5376\":2,\"5382\":5,\"5402\":8,\"5416\":2,\"5440\":6,\"5448\":2,\"5451\":2,\"5455\":2,\"5457\":2,\"5460\":2,\"5463\":7,\"5466\":9,\"5469\":9,\"5476\":1,\"5486\":5,\"5491\":5,\"5599\":2,\"5607\":2,\"5608\":1,\"5609\":2,\"5615\":1,\"5690\":1,\"5760\":1,\"5761\":2,\"5824\":1,\"5825\":3,\"5853\":4,\"5883\":17,\"5914\":7,\"5916\":2,\"5940\":1,\"5942\":3,\"5962\":5,\"6013\":3,\"6015\":6,\"6017\":1,\"6063\":1,\"6065\":1,\"6071\":1,\"6076\":2,\"6081\":2,\"6083\":1,\"6099\":2,\"6101\":1,\"6111\":1,\"6116\":1,\"6118\":2,\"6258\":8,\"6808\":3,\"6840\":1,\"6927\":1,\"6934\":1}}],[\"in\",{\"0\":{\"179\":1,\"182\":1,\"185\":1,\"188\":1,\"324\":1},\"1\":{\"177\":1,\"178\":1,\"180\":1,\"181\":1,\"186\":1,\"187\":1,\"189\":1,\"190\":1,\"193\":1,\"194\":1,\"196\":1,\"197\":1,\"199\":1,\"200\":1,\"202\":1,\"203\":1,\"211\":1,\"212\":1,\"246\":1,\"249\":1,\"252\":1,\"255\":1,\"266\":3,\"267\":2,\"271\":1,\"274\":1,\"304\":2,\"305\":1,\"306\":1,\"321\":1,\"325\":1,\"329\":1,\"335\":1,\"340\":1,\"341\":2,\"343\":1,\"350\":6,\"362\":1,\"368\":2,\"384\":1,\"391\":1,\"936\":1,\"1356\":6,\"1491\":4,\"3078\":1,\"3091\":1,\"4022\":1,\"4333\":6,\"4372\":2,\"4374\":2,\"4378\":1,\"4411\":1,\"4413\":1,\"4481\":1,\"4545\":1,\"4554\":1,\"4647\":1,\"4649\":4,\"4920\":1,\"5035\":1,\"5279\":1,\"5298\":1,\"5455\":1,\"5524\":2,\"5525\":1,\"5527\":1,\"5528\":2,\"5529\":3,\"5530\":2,\"5546\":1,\"5556\":1,\"5557\":1,\"5563\":1,\"5586\":1,\"5587\":2,\"5588\":2,\"5819\":1,\"6063\":1,\"6065\":1,\"6083\":3,\"6118\":2,\"6201\":11,\"6258\":3,\"6691\":1,\"6692\":1,\"6693\":1,\"6951\":1,\"7002\":1}}],[\"isjavaidentifierpart\",{\"1\":{\"6258\":1}}],[\"isjavaidentifierstart\",{\"1\":{\"6258\":1}}],[\"isdiagnosticsenabled\",{\"1\":{\"6201\":16}}],[\"isdebugenabled\",{\"1\":{\"3289\":1}}],[\"isdeleted的属性\",{\"1\":{\"2994\":1}}],[\"isconstructor\",{\"1\":{\"6118\":7}}],[\"isassignablefrom\",{\"1\":{\"6101\":1,\"6258\":1}}],[\"isannotationpresent\",{\"1\":{\"4625\":1,\"4647\":1}}],[\"isvmanonymousclass\",{\"1\":{\"6086\":1,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"isvarargs\",{\"1\":{\"6043\":1}}],[\"isenumconstant\",{\"1\":{\"5979\":1}}],[\"isempty\",{\"1\":{\"1366\":1,\"3091\":1}}],[\"isinterface\",{\"1\":{\"5870\":1,\"5883\":1,\"6076\":1,\"6118\":1}}],[\"isn\",{\"1\":{\"6201\":1}}],[\"isnotempty\",{\"1\":{\"4693\":1}}],[\"isnotnull\",{\"1\":{\"4693\":1}}],[\"isnull\",{\"1\":{\"3383\":1,\"3524\":1}}],[\"isstanding\",{\"1\":{\"5055\":1}}],[\"issaverequestdata\",{\"1\":{\"4690\":1,\"4693\":1}}],[\"issingleton\",{\"1\":{\"1360\":1,\"1366\":3}}],[\"isxxx\",{\"1\":{\"3196\":1}}],[\"isbadtemper\",{\"1\":{\"3195\":1}}],[\"isugly\",{\"1\":{\"3195\":1}}],[\"islocked\",{\"1\":{\"3172\":2}}],[\"islazyinit\",{\"1\":{\"1366\":1}}],[\"ispresent\",{\"1\":{\"6828\":1}}],[\"isprimitive\",{\"1\":{\"6118\":1}}],[\"ispoor\",{\"1\":{\"3195\":1}}],[\"isp\",{\"0\":{\"2031\":1}}],[\"isref\",{\"1\":{\"1360\":1}}],[\"is\",{\"1\":{\"165\":1,\"166\":1,\"177\":1,\"178\":1,\"180\":1,\"181\":1,\"186\":1,\"187\":1,\"189\":1,\"190\":1,\"191\":1,\"193\":1,\"194\":1,\"196\":1,\"197\":1,\"199\":1,\"200\":1,\"202\":1,\"203\":1,\"211\":1,\"212\":1,\"214\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"246\":1,\"249\":1,\"262\":1,\"266\":2,\"268\":1,\"271\":2,\"272\":1,\"304\":1,\"305\":1,\"306\":1,\"308\":1,\"311\":1,\"321\":1,\"329\":2,\"331\":1,\"332\":1,\"335\":1,\"336\":2,\"340\":1,\"344\":2,\"347\":1,\"350\":4,\"353\":1,\"357\":1,\"360\":1,\"362\":1,\"364\":1,\"368\":1,\"375\":1,\"378\":1,\"382\":1,\"384\":2,\"385\":3,\"386\":2,\"390\":1,\"391\":2,\"1134\":3,\"1315\":1,\"1366\":2,\"1603\":1,\"2723\":1,\"2740\":2,\"2893\":1,\"3087\":1,\"3289\":2,\"3383\":2,\"3388\":1,\"3504\":1,\"4021\":2,\"4022\":1,\"4095\":1,\"4152\":2,\"4179\":1,\"4254\":1,\"4407\":1,\"4481\":1,\"5035\":1,\"5271\":1,\"5287\":1,\"5298\":1,\"5337\":1,\"5376\":1,\"5382\":2,\"5384\":2,\"5527\":3,\"5529\":1,\"5578\":1,\"5579\":1,\"5761\":1,\"5763\":2,\"5776\":3,\"5825\":2,\"6063\":1,\"6065\":1,\"6081\":1,\"6083\":2,\"6116\":1,\"6118\":3,\"6201\":17,\"6834\":1,\"6996\":1}}],[\"id更新\",{\"1\":{\"3385\":1}}],[\"id则为外键\",{\"1\":{\"3385\":1}}],[\"id是主键\",{\"1\":{\"3385\":1}}],[\"idx\",{\"1\":{\"3355\":1}}],[\"idcard\",{\"1\":{\"2853\":2,\"2881\":2,\"2882\":3,\"2884\":2}}],[\"identify\",{\"1\":{\"6201\":1}}],[\"identification\",{\"1\":{\"5819\":1}}],[\"ideptservice\",{\"1\":{\"4696\":1}}],[\"ide中文件的换行符使用unix格式\",{\"1\":{\"3035\":1}}],[\"ide的text\",{\"1\":{\"3035\":1}}],[\"ide\",{\"0\":{\"6440\":1},\"1\":{\"2925\":1,\"3508\":1,\"3512\":1,\"4096\":1,\"4129\":1,\"4327\":1,\"4899\":1,\"6445\":1,\"6799\":1,\"6974\":1,\"6987\":1,\"6989\":1}}],[\"ideatestrunner\",{\"1\":{\"4374\":1}}],[\"ideatestrunner$repeater\",{\"1\":{\"4374\":1}}],[\"idea下单元测试详解\",{\"0\":{\"4272\":1}}],[\"idea设置tab为\",{\"1\":{\"3024\":1}}],[\"idea\",{\"0\":{\"6972\":1},\"1\":{\"2828\":1,\"2896\":1,\"2903\":1,\"6201\":1,\"6443\":1,\"6784\":1,\"6824\":1,\"6974\":1}}],[\"ide1\",{\"1\":{\"318\":1}}],[\"idgeneator\",{\"1\":{\"2406\":2}}],[\"idgenerator使用举例\",{\"1\":{\"2406\":1}}],[\"idgenerator>\",{\"1\":{\"2397\":1}}],[\"idgenerator\",{\"1\":{\"2350\":1,\"2352\":1,\"2353\":2,\"2354\":2,\"2355\":2,\"2366\":1,\"2379\":2,\"2381\":8,\"2395\":2,\"2397\":4,\"2406\":9}}],[\"id=\",{\"1\":{\"1338\":2,\"1351\":2,\"1972\":4}}],[\"id2\",{\"1\":{\"354\":1}}],[\"ids\",{\"1\":{\"350\":2,\"3042\":1}}],[\"id1>this\",{\"1\":{\"189\":1}}],[\"id1\",{\"1\":{\"177\":1,\"180\":1,\"183\":1,\"186\":1,\"193\":1,\"196\":1,\"199\":1,\"202\":1,\"211\":1,\"305\":1,\"354\":2}}],[\"id\",{\"1\":{\"160\":1,\"162\":1,\"317\":1,\"331\":1,\"1360\":1,\"1974\":5,\"2186\":2,\"2188\":12,\"2194\":12,\"2350\":1,\"2353\":2,\"2354\":4,\"2355\":4,\"2366\":1,\"2378\":1,\"2379\":3,\"2381\":2,\"2396\":1,\"2397\":2,\"2406\":3,\"2836\":1,\"2895\":1,\"2902\":2,\"3009\":1,\"3010\":1,\"3011\":1,\"3287\":2,\"3289\":2,\"3359\":1,\"3374\":3,\"3385\":1,\"3388\":2,\"3389\":2,\"4211\":1,\"4255\":2,\"5366\":2,\"5367\":1,\"5369\":5,\"6201\":5,\"6951\":2,\"6996\":1}}],[\"itpub\",{\"1\":{\"6273\":1}}],[\"itv接口\",{\"1\":{\"2089\":1}}],[\"itv3\",{\"1\":{\"2089\":5}}],[\"itv2\",{\"1\":{\"2089\":4}}],[\"itv\",{\"1\":{\"2089\":2}}],[\"itv1\",{\"1\":{\"2089\":4}}],[\"itext\",{\"1\":{\"6559\":1}}],[\"iterable<s>\",{\"1\":{\"6258\":1}}],[\"iterator<map\",{\"1\":{\"6258\":1}}],[\"iterator<driver>\",{\"1\":{\"6180\":1,\"6190\":1,\"6236\":1}}],[\"iterator<s>\",{\"1\":{\"6258\":3}}],[\"iterator<search>\",{\"1\":{\"6157\":1}}],[\"iterator<string>\",{\"1\":{\"3115\":1,\"4798\":1,\"6258\":2}}],[\"iterator<\",{\"1\":{\"5048\":1}}],[\"iterator<element>\",{\"1\":{\"2953\":1}}],[\"iterator<college>\",{\"1\":{\"1539\":1}}],[\"iteratorpattern\",{\"1\":{\"1525\":1}}],[\"iterator\",{\"1\":{\"1044\":1,\"1504\":1,\"1520\":1,\"1525\":5,\"1535\":3,\"1537\":2,\"1539\":9,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"2624\":1,\"2953\":1,\"3115\":5,\"5048\":5,\"6157\":4,\"6180\":1,\"6190\":1,\"6236\":1,\"6258\":3,\"6267\":1}}],[\"iteye\",{\"1\":{\"4986\":1}}],[\"item\",{\"1\":{\"3115\":1,\"3117\":3,\"5205\":2}}],[\"iteacherdao\",{\"1\":{\"1834\":1,\"1835\":1,\"1836\":1,\"1842\":5,\"1869\":2,\"1873\":4}}],[\"itr\",{\"1\":{\"1548\":1}}],[\"its\",{\"1\":{\"191\":1,\"385\":2,\"6201\":1}}],[\"it\",{\"1\":{\"42\":2,\"214\":1,\"246\":1,\"249\":1,\"255\":2,\"266\":1,\"267\":1,\"268\":1,\"269\":1,\"272\":1,\"273\":1,\"304\":1,\"308\":1,\"311\":1,\"321\":1,\"329\":1,\"340\":1,\"350\":1,\"353\":1,\"362\":1,\"368\":1,\"375\":1,\"378\":1,\"390\":1,\"1525\":4,\"1603\":2,\"2577\":1,\"3186\":2,\"3248\":1,\"4095\":1,\"4231\":1,\"4644\":1,\"5015\":1,\"5271\":1,\"5527\":3,\"5579\":1,\"6076\":1,\"6109\":2,\"6118\":1,\"6201\":7}}],[\"pdfbox\",{\"1\":{\"6556\":1}}],[\"pdf\",{\"0\":{\"6553\":1}}],[\"pdai所有\",{\"1\":{\"4704\":1,\"4993\":1,\"5247\":1,\"6138\":1}}],[\"pdai\",{\"1\":{\"4326\":2,\"4333\":1,\"4337\":1,\"4360\":1,\"4368\":1,\"4372\":1,\"4374\":1,\"4378\":1,\"4380\":1,\"4383\":1,\"4405\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4415\":1,\"4419\":1,\"4493\":1,\"4642\":1,\"4644\":1,\"4647\":1,\"4649\":7,\"4673\":1,\"4704\":1,\"4706\":1,\"4993\":1,\"4995\":1,\"5012\":1,\"5068\":1,\"5247\":1,\"5249\":1,\"5584\":1,\"5749\":1,\"5817\":1,\"6138\":1,\"6140\":1}}],[\"python\",{\"1\":{\"6541\":1,\"6944\":1}}],[\"ppt\",{\"1\":{\"6408\":1}}],[\"pptx\",{\"1\":{\"6408\":1}}],[\"pmd\",{\"1\":{\"6310\":1,\"6990\":2}}],[\"pippo\",{\"1\":{\"6670\":1}}],[\"pipelines\",{\"1\":{\"5548\":1}}],[\"picketlink是一个针对java应用进行安全和身份认证管理的大型项目\",{\"1\":{\"6602\":1}}],[\"picketlink\",{\"1\":{\"6602\":1}}],[\"picasso\",{\"1\":{\"6450\":1}}],[\"pizaa\",{\"1\":{\"1208\":1}}],[\"pizza4\",{\"1\":{\"1250\":2}}],[\"pizza3\",{\"1\":{\"1250\":2}}],[\"pizza2\",{\"1\":{\"1250\":1}}],[\"pizza2=\",{\"1\":{\"1250\":1}}],[\"pizza1\",{\"1\":{\"1250\":2}}],[\"pizzastore\",{\"1\":{\"1250\":1}}],[\"pizza\",{\"1\":{\"1196\":1,\"1197\":3,\"1205\":2,\"1206\":3,\"1210\":1,\"1212\":26,\"1214\":5,\"1236\":4,\"1246\":14,\"1248\":4,\"1250\":18,\"1251\":1}}],[\"p1\",{\"1\":{\"4244\":1}}],[\"p3c\",{\"1\":{\"3512\":1}}],[\"pk\",{\"1\":{\"3355\":1}}],[\"p2\",{\"1\":{\"1797\":8}}],[\"php\",{\"1\":{\"2572\":1,\"6541\":1}}],[\"php专业\",{\"1\":{\"1535\":2}}],[\"phoenix\",{\"1\":{\"6341\":1}}],[\"photoshop\",{\"1\":{\"586\":1,\"1620\":1,\"1664\":1}}],[\"phoneproduct\",{\"1\":{\"1308\":3,\"1310\":2}}],[\"phone4\",{\"1\":{\"626\":4}}],[\"phone3\",{\"1\":{\"626\":4}}],[\"phone2\",{\"1\":{\"626\":4}}],[\"phone1\",{\"1\":{\"626\":4}}],[\"phone\",{\"1\":{\"522\":5,\"542\":5,\"624\":5,\"626\":2}}],[\"podcasts\",{\"0\":{\"7004\":1},\"1\":{\"6792\":1}}],[\"powermock\",{\"1\":{\"6636\":1}}],[\"powerful\",{\"1\":{\"5527\":1}}],[\"poi\",{\"1\":{\"6408\":1}}],[\"point<string>\",{\"1\":{\"5015\":2}}],[\"point<t>\",{\"1\":{\"5015\":1}}],[\"pointcut\",{\"1\":{\"4693\":2}}],[\"pom\",{\"1\":{\"4324\":2,\"6864\":3,\"6865\":1,\"6866\":1,\"6868\":1}}],[\"pojo专指只有setter\",{\"1\":{\"3534\":1}}],[\"pojo\",{\"1\":{\"3534\":1}}],[\"pojo类的布尔属性不能加is\",{\"1\":{\"3395\":1}}],[\"pojo类的setter方法\",{\"1\":{\"3074\":1}}],[\"pojo类的域变量\",{\"1\":{\"3074\":1}}],[\"pojo类必须写tostring方法\",{\"1\":{\"3062\":1}}],[\"pojo类属性没有初值是提醒使用者在需要使用时\",{\"1\":{\"3058\":1}}],[\"pojo类中的任何布尔类型的变量\",{\"1\":{\"2994\":1,\"3351\":1}}],[\"pojo是do\",{\"1\":{\"3006\":1}}],[\"po\",{\"1\":{\"2989\":1,\"3059\":1,\"3536\":1}}],[\"posse\",{\"1\":{\"6698\":1,\"7005\":1}}],[\"possibility\",{\"1\":{\"262\":1}}],[\"possible\",{\"1\":{\"168\":1,\"191\":1,\"214\":1,\"246\":1,\"249\":1,\"304\":1,\"308\":1,\"321\":1,\"329\":1,\"340\":1,\"350\":1,\"353\":1,\"362\":1,\"368\":1,\"378\":1,\"390\":1,\"5527\":1,\"6201\":1}}],[\"postgresql\",{\"1\":{\"6170\":1}}],[\"postgresql实现\",{\"0\":{\"6169\":1}}],[\"postmapping\",{\"1\":{\"4696\":2}}],[\"post\",{\"1\":{\"3224\":1,\"6136\":1,\"6541\":1}}],[\"position\",{\"1\":{\"1537\":5}}],[\"pool\",{\"1\":{\"1429\":5,\"5291\":1,\"5292\":2,\"5310\":1,\"5312\":1,\"5315\":1,\"6118\":1}}],[\"portability\",{\"1\":{\"5530\":1}}],[\"port\",{\"1\":{\"1336\":4}}],[\"poping\",{\"1\":{\"1134\":1}}],[\"pop\",{\"1\":{\"1134\":1,\"1136\":1,\"1489\":3,\"4233\":1}}],[\"popcorn\",{\"1\":{\"1134\":7,\"1136\":7}}],[\"pc\",{\"1\":{\"1126\":1}}],[\"please\",{\"1\":{\"6996\":1}}],[\"plantuml\",{\"1\":{\"5778\":1}}],[\"plantuml在新窗口打开\",{\"1\":{\"5778\":1}}],[\"platform\",{\"1\":{\"5530\":1}}],[\"place\",{\"1\":{\"4481\":1}}],[\"plain\",{\"1\":{\"3534\":1}}],[\"playing\",{\"1\":{\"1134\":1,\"5776\":3}}],[\"play\",{\"0\":{\"6938\":1},\"1\":{\"1123\":1,\"1134\":1,\"1136\":2,\"1138\":1,\"2089\":9,\"5775\":3,\"5776\":4,\"6671\":1,\"6776\":2,\"6858\":1,\"6942\":2}}],[\"plugin>\",{\"1\":{\"4324\":1}}],[\"plugin<\",{\"1\":{\"4324\":1}}],[\"plugins>\",{\"1\":{\"4324\":1}}],[\"plugins<\",{\"1\":{\"4324\":1}}],[\"plugins\",{\"1\":{\"49\":1}}],[\"plugin\",{\"1\":{\"4\":2,\"47\":1,\"6214\":1,\"6881\":1}}],[\"p\",{\"1\":{\"894\":3,\"1797\":15,\"2104\":2,\"2964\":6,\"4424\":1,\"4991\":1,\"5015\":3,\"5245\":1,\"5814\":1,\"5815\":1,\"6052\":1,\"6135\":1,\"6258\":3,\"6272\":1,\"6276\":1}}],[\"pr\",{\"1\":{\"6744\":1}}],[\"practices\",{\"1\":{\"6845\":1}}],[\"practice\",{\"1\":{\"6692\":1,\"7002\":1}}],[\"profiler\",{\"1\":{\"6568\":1}}],[\"professional\",{\"1\":{\"5582\":1}}],[\"prone\",{\"1\":{\"6307\":1}}],[\"probably\",{\"1\":{\"6109\":1,\"6118\":1}}],[\"problems\",{\"1\":{\"6201\":1}}],[\"problem<object>\",{\"1\":{\"5221\":2}}],[\"problem<number>\",{\"1\":{\"5219\":1}}],[\"problem<integer>\",{\"1\":{\"5219\":1}}],[\"problem<t>\",{\"1\":{\"5217\":1}}],[\"problem\",{\"1\":{\"5035\":1}}],[\"problemexception\",{\"1\":{\"4016\":1}}],[\"proposition\",{\"1\":{\"6642\":1}}],[\"props\",{\"1\":{\"6201\":8}}],[\"propertiesloaderutils\",{\"1\":{\"6219\":1}}],[\"properties的org\",{\"1\":{\"6205\":1}}],[\"properties中查找org\",{\"1\":{\"6201\":1}}],[\"properties是否配置use\",{\"1\":{\"6201\":1}}],[\"properties\",{\"1\":{\"6201\":12,\"6213\":1,\"6219\":3}}],[\"propertynames\",{\"1\":{\"6201\":1}}],[\"property\",{\"1\":{\"2103\":1,\"5271\":2,\"6201\":12}}],[\"propagate\",{\"1\":{\"6083\":1,\"6109\":1}}],[\"propagated\",{\"1\":{\"6076\":1,\"6096\":1}}],[\"prose\",{\"1\":{\"4205\":1}}],[\"project>\",{\"1\":{\"4324\":1}}],[\"project\",{\"1\":{\"3361\":1,\"6602\":1,\"6864\":1}}],[\"projector\",{\"1\":{\"1134\":8,\"1136\":6}}],[\"producer\",{\"1\":{\"3111\":1}}],[\"product\",{\"1\":{\"675\":1,\"676\":1,\"681\":1,\"1185\":1,\"1231\":1,\"1291\":1}}],[\"processlist\",{\"1\":{\"4507\":1}}],[\"processing\",{\"1\":{\"3287\":1,\"4670\":1,\"4702\":1}}],[\"process\",{\"1\":{\"2699\":1,\"2711\":1,\"6996\":1}}],[\"processrequest\",{\"1\":{\"1972\":9,\"1976\":1}}],[\"programs\",{\"1\":{\"5579\":1}}],[\"programming\",{\"1\":{\"3543\":1,\"6845\":1}}],[\"program\",{\"1\":{\"2693\":1,\"5298\":1,\"5578\":1}}],[\"provided\",{\"1\":{\"6118\":1}}],[\"provides\",{\"1\":{\"5579\":1}}],[\"providers\",{\"1\":{\"6258\":5}}],[\"provider只用在提交的jar包里的meta\",{\"1\":{\"6161\":1}}],[\"provider\",{\"1\":{\"1315\":3,\"6140\":1,\"6141\":1,\"6258\":3,\"6599\":1}}],[\"proved\",{\"1\":{\"2103\":1}}],[\"proxyinstance=\",{\"1\":{\"1873\":1}}],[\"proxyinstance=class\",{\"1\":{\"1873\":1}}],[\"proxyinstance\",{\"1\":{\"1873\":4,\"1905\":2}}],[\"proxyfactory\",{\"1\":{\"1871\":2,\"1873\":1,\"1903\":2,\"1905\":1}}],[\"proxy\",{\"1\":{\"984\":1,\"1811\":1,\"1830\":1,\"1854\":1,\"1860\":1,\"1871\":2,\"1873\":1,\"1894\":1,\"2618\":1}}],[\"protégé\",{\"1\":{\"6655\":1}}],[\"protobuf\",{\"1\":{\"6353\":1}}],[\"prototype\",{\"1\":{\"966\":1,\"1360\":1,\"1363\":1,\"1739\":1,\"1751\":1,\"2608\":1}}],[\"protection\",{\"1\":{\"6118\":1}}],[\"protected\",{\"1\":{\"605\":3,\"624\":3,\"709\":1,\"850\":3,\"852\":3,\"854\":3,\"856\":1,\"936\":1,\"1197\":1,\"1246\":1,\"1366\":1,\"1487\":2,\"1586\":1,\"1686\":1,\"1772\":1,\"1793\":1,\"1795\":1,\"2467\":1,\"2997\":2,\"3067\":1,\"3161\":1,\"4157\":1,\"4257\":1,\"4682\":2,\"4693\":1,\"5359\":1,\"5363\":1,\"5376\":1,\"5380\":1,\"5382\":2,\"5402\":2,\"5416\":2,\"5454\":1,\"5455\":1,\"5457\":1,\"5459\":1,\"5460\":1,\"5463\":1,\"5466\":1,\"5698\":1,\"5883\":4,\"6063\":3}}],[\"primefaces\",{\"1\":{\"6672\":1}}],[\"primenumbers\",{\"1\":{\"4407\":1}}],[\"primenumbercheckertest\",{\"1\":{\"4407\":2}}],[\"primenumberchecker\",{\"1\":{\"4405\":2,\"4407\":5}}],[\"primitive\",{\"1\":{\"6118\":6}}],[\"privilegedaction<s>\",{\"1\":{\"6258\":2}}],[\"privilegedaction<string>\",{\"1\":{\"6180\":1}}],[\"privilegedaction<boolean>\",{\"1\":{\"6258\":2}}],[\"privilegedaction<magicaccessorimpl>\",{\"1\":{\"6118\":1}}],[\"privilegedaction<void>\",{\"1\":{\"6065\":1,\"6180\":1}}],[\"privileged\",{\"1\":{\"6118\":1}}],[\"privategetdeclaredmethods\",{\"1\":{\"6090\":1,\"6096\":1}}],[\"privategetdeclaredconstructors\",{\"1\":{\"6071\":1,\"6076\":1,\"6077\":1}}],[\"private和proteced\",{\"1\":{\"5881\":1}}],[\"privateimagestore\",{\"1\":{\"2702\":1,\"2703\":2,\"2704\":1,\"2705\":1,\"2711\":2}}],[\"private\",{\"1\":{\"540\":1,\"624\":1,\"707\":3,\"766\":2,\"777\":2,\"832\":2,\"834\":2,\"850\":2,\"894\":1,\"922\":1,\"926\":1,\"1114\":3,\"1134\":6,\"1136\":6,\"1315\":1,\"1336\":3,\"1356\":3,\"1360\":8,\"1366\":2,\"1406\":3,\"1425\":1,\"1427\":1,\"1429\":1,\"1476\":3,\"1487\":1,\"1489\":1,\"1525\":3,\"1533\":2,\"1586\":1,\"1601\":2,\"1603\":1,\"1636\":3,\"1649\":2,\"1651\":1,\"1653\":2,\"1702\":7,\"1716\":6,\"1718\":4,\"1761\":3,\"1772\":4,\"1793\":3,\"1842\":1,\"1871\":1,\"1903\":1,\"1953\":1,\"1974\":3,\"2089\":1,\"2124\":1,\"2188\":2,\"2194\":2,\"2286\":2,\"2293\":2,\"2298\":2,\"2304\":2,\"2310\":2,\"2313\":2,\"2320\":4,\"2335\":3,\"2370\":4,\"2372\":4,\"2376\":4,\"2379\":1,\"2397\":3,\"2406\":5,\"2409\":5,\"2411\":2,\"2438\":1,\"2469\":2,\"2471\":1,\"2512\":1,\"2699\":1,\"2711\":4,\"2739\":2,\"2746\":2,\"2836\":2,\"2853\":1,\"2869\":4,\"2875\":2,\"2884\":2,\"2888\":2,\"2953\":1,\"2964\":1,\"2997\":1,\"3018\":1,\"3067\":1,\"3157\":2,\"3161\":1,\"3179\":1,\"3272\":1,\"3281\":1,\"3283\":1,\"3468\":1,\"4001\":1,\"4095\":4,\"4102\":1,\"4104\":1,\"4157\":1,\"4383\":1,\"4407\":3,\"4682\":1,\"4685\":1,\"4693\":3,\"4696\":2,\"4746\":1,\"4757\":1,\"4769\":1,\"4771\":1,\"4781\":1,\"4796\":1,\"4932\":1,\"4972\":1,\"4981\":1,\"5001\":3,\"5003\":1,\"5015\":1,\"5017\":2,\"5020\":1,\"5042\":1,\"5044\":1,\"5048\":1,\"5099\":1,\"5101\":1,\"5149\":1,\"5156\":1,\"5164\":1,\"5205\":1,\"5234\":1,\"5287\":1,\"5334\":1,\"5336\":1,\"5359\":1,\"5369\":1,\"5371\":2,\"5376\":1,\"5380\":1,\"5382\":4,\"5402\":1,\"5440\":3,\"5451\":1,\"5455\":2,\"5457\":2,\"5460\":2,\"5463\":1,\"5466\":1,\"5469\":1,\"5479\":2,\"5486\":2,\"5491\":2,\"5525\":1,\"5530\":1,\"5539\":1,\"5761\":3,\"5763\":1,\"5825\":6,\"5853\":4,\"5883\":5,\"5888\":1,\"5914\":3,\"5916\":1,\"5942\":1,\"5962\":2,\"6013\":1,\"6015\":2,\"6071\":1,\"6076\":3,\"6081\":1,\"6083\":1,\"6096\":1,\"6099\":1,\"6101\":1,\"6109\":1,\"6111\":5,\"6118\":1,\"6180\":1,\"6258\":16,\"6798\":1,\"6808\":2,\"6827\":2,\"6934\":1,\"6962\":1}}],[\"principle\",{\"1\":{\"2001\":1,\"2033\":1,\"2061\":1,\"2103\":1,\"2127\":1,\"2128\":1,\"2157\":1,\"2199\":2,\"2727\":1}}],[\"printstream\",{\"1\":{\"4963\":6,\"4969\":6,\"4978\":6}}],[\"printstacktrace\",{\"1\":{\"438\":1,\"1795\":1,\"3291\":1,\"4647\":2,\"4693\":1,\"4714\":1,\"4781\":1,\"4938\":1,\"4943\":1,\"4961\":1,\"4963\":1,\"4969\":1,\"4972\":2,\"5457\":1,\"5463\":1,\"5466\":1,\"6054\":5}}],[\"printmessage\",{\"1\":{\"4411\":1,\"4413\":1}}],[\"printemployee\",{\"1\":{\"2194\":2}}],[\"printallemployee\",{\"1\":{\"2188\":2,\"2194\":2}}],[\"printdepartment\",{\"1\":{\"1539\":2}}],[\"printcollege\",{\"1\":{\"1539\":1,\"1541\":1}}],[\"printwriter\",{\"1\":{\"943\":1}}],[\"print\",{\"1\":{\"850\":2,\"852\":3,\"854\":3,\"856\":1,\"858\":2,\"1250\":4,\"1406\":1,\"1491\":2,\"1525\":2,\"5017\":2,\"5044\":1,\"5062\":2,\"5914\":3}}],[\"println\",{\"1\":{\"401\":1,\"406\":1,\"408\":1,\"435\":2,\"450\":2,\"453\":2,\"466\":1,\"469\":1,\"473\":2,\"520\":1,\"522\":3,\"540\":3,\"542\":3,\"566\":1,\"605\":2,\"622\":6,\"624\":6,\"626\":3,\"695\":3,\"709\":6,\"713\":2,\"766\":3,\"779\":4,\"783\":7,\"832\":1,\"834\":1,\"852\":1,\"854\":1,\"856\":1,\"894\":4,\"928\":13,\"1114\":3,\"1134\":19,\"1197\":2,\"1199\":2,\"1212\":2,\"1214\":1,\"1246\":4,\"1304\":8,\"1306\":8,\"1310\":2,\"1313\":6,\"1336\":1,\"1406\":3,\"1427\":1,\"1431\":1,\"1436\":6,\"1491\":1,\"1525\":1,\"1539\":2,\"1586\":5,\"1603\":6,\"1636\":3,\"1653\":1,\"1655\":4,\"1686\":4,\"1702\":3,\"1704\":1,\"1716\":7,\"1720\":3,\"1763\":5,\"1772\":1,\"1774\":5,\"1795\":1,\"1797\":4,\"1842\":3,\"1869\":2,\"1871\":2,\"1873\":1,\"1901\":1,\"1903\":4,\"1905\":1,\"1953\":4,\"1972\":4,\"2016\":1,\"2020\":3,\"2025\":3,\"2052\":10,\"2058\":6,\"2078\":1,\"2082\":1,\"2089\":3,\"2118\":6,\"2124\":7,\"2144\":2,\"2149\":3,\"2152\":4,\"2188\":4,\"2194\":5,\"2286\":3,\"2293\":3,\"2298\":4,\"2304\":4,\"2310\":4,\"2313\":4,\"2320\":4,\"2328\":4,\"2438\":2,\"2454\":14,\"2456\":1,\"2471\":1,\"2473\":3,\"2512\":3,\"2521\":6,\"2526\":4,\"2535\":3,\"2539\":7,\"2541\":1,\"2546\":2,\"2663\":3,\"2677\":5,\"2679\":3,\"2953\":5,\"2960\":6,\"2966\":2,\"3025\":3,\"3051\":1,\"3053\":1,\"3065\":1,\"3091\":1,\"3157\":1,\"3186\":3,\"3195\":4,\"3248\":1,\"4333\":6,\"4337\":1,\"4372\":2,\"4378\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4419\":3,\"4614\":1,\"4644\":1,\"4647\":2,\"4679\":2,\"4682\":1,\"4746\":1,\"4781\":3,\"4961\":1,\"4963\":3,\"4969\":3,\"4976\":1,\"4978\":3,\"4981\":3,\"5001\":3,\"5003\":1,\"5015\":1,\"5020\":1,\"5055\":1,\"5090\":1,\"5093\":1,\"5234\":1,\"5267\":2,\"5273\":1,\"5282\":1,\"5311\":2,\"5313\":1,\"5334\":6,\"5336\":1,\"5353\":2,\"5355\":2,\"5376\":2,\"5382\":3,\"5402\":2,\"5434\":2,\"5445\":2,\"5451\":1,\"5463\":1,\"5466\":1,\"5469\":1,\"5494\":1,\"5504\":2,\"5506\":1,\"5761\":2,\"5776\":3,\"5883\":9,\"5888\":9,\"5914\":8,\"5940\":10,\"5962\":5,\"5964\":2,\"6013\":8,\"6017\":1,\"6054\":1,\"6151\":1,\"6153\":1,\"6178\":1,\"6180\":4}}],[\"price\",{\"1\":{\"922\":5,\"1974\":5}}],[\"prev\",{\"1\":{\"6258\":3}}],[\"prevents\",{\"1\":{\"5825\":2}}],[\"previously\",{\"1\":{\"6201\":1}}],[\"previous\",{\"1\":{\"271\":1}}],[\"presto\",{\"1\":{\"6349\":1}}],[\"presentations\",{\"1\":{\"7013\":1}}],[\"presentation\",{\"1\":{\"6814\":1}}],[\"present\",{\"1\":{\"5529\":1,\"6083\":1,\"6118\":1,\"6201\":1}}],[\"pressure\",{\"1\":{\"1702\":10,\"1716\":11,\"1718\":6}}],[\"preferable\",{\"1\":{\"5527\":1}}],[\"prefix\",{\"1\":{\"4696\":1,\"6258\":2}}],[\"prefaced\",{\"1\":{\"346\":1}}],[\"precondition\",{\"1\":{\"4481\":1}}],[\"predicate\",{\"1\":{\"4053\":1}}],[\"predicate<string>\",{\"1\":{\"4053\":1}}],[\"predefine\",{\"1\":{\"368\":1}}],[\"preparestreamsandstart\",{\"1\":{\"4374\":1}}],[\"prepareoneortwo\",{\"1\":{\"4125\":1}}],[\"prepare\",{\"1\":{\"1192\":1,\"1197\":3,\"1246\":5}}],[\"pre\",{\"1\":{\"64\":1}}],[\"pending\",{\"1\":{\"6258\":5}}],[\"peanutsoyamilk\",{\"1\":{\"2677\":1,\"2679\":3}}],[\"peace\",{\"1\":{\"380\":1,\"381\":1}}],[\"pekingduck\",{\"1\":{\"2521\":1,\"2539\":2,\"2541\":6}}],[\"pepper\",{\"1\":{\"1250\":4}}],[\"perfcounter\",{\"1\":{\"6063\":3}}],[\"performed\",{\"1\":{\"5528\":1}}],[\"performance\",{\"1\":{\"5528\":3}}],[\"perform\",{\"1\":{\"1315\":1,\"5527\":1,\"5530\":1}}],[\"percussion\",{\"1\":{\"5775\":2,\"5776\":3}}],[\"percent\",{\"1\":{\"346\":1}}],[\"permgen\",{\"1\":{\"5555\":1}}],[\"permission\",{\"1\":{\"5529\":1}}],[\"permitted\",{\"1\":{\"4095\":1}}],[\"persistent\",{\"1\":{\"3536\":1}}],[\"persons\",{\"1\":{\"2964\":4}}],[\"personservice\",{\"1\":{\"2902\":2}}],[\"personservicebean2\",{\"1\":{\"2895\":1}}],[\"personservicebean\",{\"1\":{\"2853\":1,\"2902\":1}}],[\"person1\",{\"1\":{\"2853\":1}}],[\"personid\",{\"1\":{\"2853\":1}}],[\"persondao\",{\"1\":{\"2853\":3}}],[\"person\",{\"1\":{\"1798\":1,\"2075\":1,\"2077\":1,\"2078\":5,\"2080\":1,\"2082\":6,\"2836\":1,\"2853\":2,\"2881\":3,\"2882\":3,\"2962\":3,\"2964\":3,\"4133\":1,\"4614\":2,\"5006\":1,\"5759\":2,\"5761\":1,\"5962\":5}}],[\"perons\",{\"1\":{\"2079\":1}}],[\"perhaps\",{\"1\":{\"380\":1,\"381\":1}}],[\"per\",{\"1\":{\"246\":1,\"249\":1,\"258\":1,\"360\":1,\"364\":1,\"4383\":1}}],[\"paul\",{\"1\":{\"6711\":1}}],[\"pause\",{\"1\":{\"1123\":1,\"1134\":2,\"1136\":2}}],[\"packr\",{\"1\":{\"6405\":1}}],[\"packages\",{\"1\":{\"4589\":1}}],[\"package\",{\"0\":{\"3979\":1},\"1\":{\"3973\":1,\"3980\":2,\"4032\":2,\"4326\":1,\"4333\":1,\"4337\":1,\"4360\":1,\"4368\":1,\"4372\":1,\"4378\":1,\"4383\":1,\"4405\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4415\":1,\"4419\":1,\"4519\":1,\"4590\":1,\"4642\":1,\"4644\":1,\"5562\":1,\"5853\":1,\"5883\":1,\"5888\":1}}],[\"password\",{\"1\":{\"6173\":1}}],[\"pass\",{\"1\":{\"5337\":2}}],[\"passbyvalueexample\",{\"1\":{\"5334\":1,\"5336\":1}}],[\"passed\",{\"1\":{\"6083\":2}}],[\"passes\",{\"1\":{\"5193\":1}}],[\"passenger>\",{\"1\":{\"5055\":1}}],[\"patch\",{\"1\":{\"6541\":1}}],[\"path\",{\"1\":{\"6201\":1}}],[\"pathvariable\",{\"1\":{\"4696\":1}}],[\"patterns\",{\"1\":{\"6510\":1}}],[\"pattern\",{\"0\":{\"6804\":1},\"1\":{\"487\":1,\"548\":1,\"588\":1,\"664\":1,\"673\":1,\"703\":1,\"741\":1,\"807\":1,\"877\":1,\"955\":1,\"961\":1,\"966\":1,\"971\":1,\"984\":1,\"990\":1,\"995\":1,\"1000\":1,\"1005\":1,\"1010\":1,\"1015\":1,\"1028\":1,\"1034\":1,\"1039\":1,\"1044\":1,\"1049\":1,\"1054\":1,\"1059\":1,\"1064\":1,\"1069\":1,\"1074\":1,\"1079\":1,\"1084\":1,\"1095\":1,\"1172\":2,\"1374\":1,\"1455\":1,\"1504\":1,\"1566\":1,\"1617\":1,\"1668\":1,\"1739\":1,\"1811\":1,\"1929\":1,\"2350\":1,\"2418\":1,\"2488\":1,\"2527\":1,\"2569\":1,\"2574\":1,\"2605\":1,\"2606\":1,\"2607\":1,\"2608\":1,\"2609\":1,\"2612\":1,\"2613\":1,\"2614\":1,\"2615\":1,\"2616\":1,\"2617\":1,\"2618\":1,\"2621\":1,\"2622\":1,\"2623\":1,\"2624\":1,\"2625\":1,\"2626\":1,\"2627\":1,\"2628\":1,\"2629\":1,\"2630\":1,\"2631\":1,\"2638\":2,\"2744\":4,\"2931\":1,\"3239\":3,\"6498\":1,\"6750\":1}}],[\"pair这样声明的话\",{\"1\":{\"5105\":1}}],[\"pair的原始类型为\",{\"1\":{\"5100\":1}}],[\"pair<string\",{\"1\":{\"6915\":1}}],[\"pair<java\",{\"1\":{\"5169\":1}}],[\"pair<date>\",{\"1\":{\"5151\":1,\"5163\":1}}],[\"pair<t\",{\"1\":{\"5106\":1}}],[\"pair<t>\",{\"1\":{\"5099\":1,\"5149\":1}}],[\"pair<>\",{\"1\":{\"3093\":3,\"3099\":2}}],[\"pair\",{\"1\":{\"3093\":2,\"3099\":2,\"5101\":1,\"5156\":1,\"5164\":1,\"5169\":3,\"6915\":1}}],[\"pairarraylist\",{\"1\":{\"3093\":5,\"3099\":4}}],[\"paid\",{\"1\":{\"2467\":1,\"2469\":2}}],[\"paidstate\",{\"1\":{\"2467\":2}}],[\"pay\",{\"1\":{\"2467\":1,\"2469\":2}}],[\"payorderevent\",{\"1\":{\"2465\":1,\"2467\":2,\"2471\":2,\"2473\":1}}],[\"parleys\",{\"1\":{\"7014\":1}}],[\"party<\",{\"1\":{\"6867\":1}}],[\"particular\",{\"1\":{\"6201\":1}}],[\"partial\",{\"1\":{\"4144\":1}}],[\"parquet\",{\"1\":{\"6352\":1}}],[\"parimenumber\",{\"1\":{\"4405\":3}}],[\"parseline\",{\"1\":{\"6258\":2}}],[\"parselong\",{\"1\":{\"4920\":1,\"5597\":1}}],[\"parsed\",{\"1\":{\"5271\":1}}],[\"parseint\",{\"1\":{\"4231\":1,\"5271\":1}}],[\"parse\",{\"1\":{\"1356\":1,\"1360\":5,\"6258\":2}}],[\"parsers\",{\"1\":{\"6338\":1}}],[\"parser\",{\"1\":{\"346\":1}}],[\"parentrunner$2\",{\"1\":{\"4374\":1}}],[\"parentrunner$1\",{\"1\":{\"4374\":1}}],[\"parentrunner$3\",{\"1\":{\"4374\":1}}],[\"parentrunner\",{\"1\":{\"4374\":11}}],[\"parent\",{\"1\":{\"340\":1,\"6063\":3,\"6086\":1,\"6111\":5,\"6114\":1,\"6201\":1}}],[\"paraschiv\",{\"1\":{\"6705\":1}}],[\"parallellockmap\",{\"1\":{\"6063\":2}}],[\"parallel\",{\"1\":{\"5554\":1}}],[\"parallelogram\",{\"0\":{\"198\":1,\"201\":1}}],[\"params\",{\"1\":{\"4693\":2}}],[\"param2\",{\"1\":{\"3067\":1}}],[\"param1\",{\"1\":{\"3067\":1}}],[\"paramb\",{\"1\":{\"2370\":6,\"2372\":6,\"2373\":1,\"2375\":1,\"2376\":2}}],[\"parama\",{\"1\":{\"2370\":6,\"2372\":6,\"2373\":1,\"2375\":1,\"2376\":2}}],[\"param==null\",{\"1\":{\"453\":1}}],[\"param\",{\"1\":{\"450\":1,\"453\":1,\"2376\":4,\"3045\":2,\"3067\":1,\"3186\":2,\"3397\":1,\"4251\":1,\"4693\":7,\"5062\":2,\"5914\":2}}],[\"parameterannotations\",{\"1\":{\"6083\":1}}],[\"parametertypes\",{\"1\":{\"5899\":1,\"5905\":1,\"6001\":1,\"6007\":1,\"6071\":3,\"6083\":1,\"6090\":3,\"6101\":2,\"6116\":2,\"6118\":5}}],[\"parameter类型\",{\"1\":{\"4660\":1}}],[\"parameter注解\",{\"1\":{\"4660\":1}}],[\"parameterizedtype\",{\"1\":{\"5233\":1,\"5234\":1,\"5235\":1,\"5236\":1}}],[\"parameterized\",{\"1\":{\"4315\":1,\"4387\":1,\"4390\":1,\"4399\":1,\"4407\":6}}],[\"parameters使用junit的参数化功能\",{\"1\":{\"4315\":1,\"4399\":1}}],[\"parameters\",{\"1\":{\"391\":1,\"4320\":1,\"4390\":1,\"4407\":2}}],[\"parameter\",{\"1\":{\"332\":1,\"4519\":1,\"4523\":1,\"4590\":2,\"4658\":1,\"4659\":1,\"4660\":1,\"4690\":1,\"6118\":6}}],[\"pages\",{\"1\":{\"6286\":1}}],[\"pageanalyzer\",{\"1\":{\"2745\":2,\"2746\":2}}],[\"page\",{\"1\":{\"332\":1,\"391\":1}}],[\"pub\",{\"1\":{\"7008\":1}}],[\"published\",{\"1\":{\"2467\":1,\"2469\":2,\"6951\":1}}],[\"publishstate\",{\"1\":{\"2467\":2,\"2473\":2}}],[\"publicmethods\",{\"1\":{\"6081\":1}}],[\"publicfields\",{\"1\":{\"6081\":1}}],[\"publicconstructors\",{\"1\":{\"6076\":2,\"6081\":1}}],[\"publiconly\",{\"1\":{\"6076\":4,\"6096\":4}}],[\"public也不要加\",{\"1\":{\"3003\":1}}],[\"public\",{\"1\":{\"120\":1,\"401\":1,\"406\":1,\"408\":1,\"418\":1,\"420\":1,\"435\":2,\"441\":1,\"443\":1,\"450\":1,\"453\":3,\"520\":6,\"522\":4,\"540\":7,\"542\":4,\"553\":4,\"555\":1,\"557\":7,\"559\":1,\"561\":1,\"564\":10,\"566\":3,\"605\":6,\"622\":9,\"624\":12,\"626\":2,\"693\":5,\"695\":4,\"697\":2,\"707\":7,\"709\":13,\"711\":4,\"713\":2,\"766\":8,\"777\":22,\"779\":6,\"781\":6,\"783\":2,\"832\":15,\"834\":12,\"850\":6,\"852\":4,\"854\":4,\"856\":4,\"858\":2,\"894\":10,\"922\":7,\"924\":10,\"926\":10,\"928\":2,\"1114\":6,\"1134\":31,\"1136\":6,\"1138\":2,\"1197\":4,\"1199\":2,\"1212\":5,\"1214\":2,\"1246\":6,\"1248\":2,\"1250\":2,\"1302\":2,\"1304\":10,\"1306\":10,\"1308\":7,\"1310\":2,\"1313\":2,\"1315\":2,\"1336\":5,\"1353\":2,\"1356\":4,\"1360\":8,\"1366\":3,\"1406\":7,\"1425\":4,\"1427\":5,\"1429\":3,\"1431\":2,\"1436\":2,\"1476\":5,\"1487\":14,\"1489\":3,\"1491\":4,\"1525\":12,\"1533\":6,\"1535\":14,\"1537\":10,\"1539\":4,\"1541\":2,\"1586\":13,\"1601\":9,\"1603\":23,\"1605\":2,\"1636\":11,\"1649\":6,\"1651\":3,\"1653\":8,\"1655\":2,\"1686\":8,\"1702\":10,\"1704\":2,\"1716\":8,\"1718\":14,\"1720\":2,\"1761\":9,\"1763\":2,\"1772\":10,\"1774\":2,\"1793\":2,\"1795\":5,\"1797\":2,\"1842\":6,\"1844\":2,\"1869\":4,\"1871\":5,\"1873\":2,\"1901\":2,\"1903\":5,\"1905\":2,\"1953\":7,\"1972\":16,\"1974\":5,\"1976\":2,\"2016\":3,\"2020\":5,\"2025\":5,\"2052\":18,\"2058\":14,\"2078\":4,\"2082\":6,\"2089\":18,\"2118\":5,\"2124\":6,\"2144\":5,\"2149\":6,\"2152\":8,\"2157\":1,\"2165\":3,\"2167\":2,\"2188\":8,\"2194\":9,\"2286\":3,\"2293\":3,\"2298\":3,\"2304\":3,\"2310\":3,\"2313\":3,\"2320\":3,\"2328\":3,\"2335\":2,\"2353\":4,\"2355\":4,\"2370\":3,\"2372\":2,\"2376\":5,\"2379\":2,\"2381\":2,\"2397\":3,\"2406\":4,\"2409\":3,\"2411\":3,\"2438\":9,\"2452\":5,\"2454\":24,\"2456\":2,\"2465\":1,\"2467\":23,\"2469\":3,\"2471\":12,\"2473\":2,\"2512\":8,\"2521\":11,\"2526\":5,\"2535\":7,\"2537\":1,\"2539\":19,\"2541\":2,\"2546\":5,\"2663\":8,\"2677\":4,\"2679\":2,\"2699\":7,\"2703\":1,\"2711\":9,\"2726\":4,\"2736\":10,\"2739\":6,\"2746\":5,\"2748\":5,\"2836\":3,\"2853\":4,\"2869\":2,\"2875\":3,\"2884\":3,\"2888\":5,\"2895\":2,\"2902\":4,\"2953\":13,\"2960\":12,\"2962\":6,\"2964\":4,\"2966\":2,\"2997\":2,\"3002\":3,\"3012\":1,\"3014\":2,\"3016\":2,\"3018\":2,\"3025\":1,\"3042\":1,\"3067\":1,\"3070\":1,\"3120\":1,\"3157\":2,\"3179\":2,\"3186\":3,\"3195\":1,\"3199\":1,\"3201\":1,\"3248\":1,\"3272\":1,\"3276\":1,\"4016\":1,\"4102\":1,\"4133\":1,\"4136\":1,\"4139\":1,\"4141\":1,\"4157\":1,\"4186\":1,\"4244\":1,\"4257\":2,\"4326\":2,\"4333\":7,\"4337\":2,\"4360\":2,\"4368\":13,\"4372\":3,\"4378\":2,\"4383\":5,\"4405\":2,\"4407\":5,\"4411\":2,\"4413\":2,\"4415\":1,\"4419\":4,\"4485\":1,\"4507\":4,\"4515\":1,\"4519\":1,\"4523\":1,\"4590\":1,\"4594\":1,\"4596\":3,\"4598\":4,\"4600\":8,\"4607\":3,\"4612\":1,\"4614\":2,\"4642\":3,\"4644\":4,\"4647\":1,\"4649\":4,\"4660\":5,\"4679\":4,\"4682\":5,\"4685\":7,\"4690\":5,\"4693\":5,\"4696\":4,\"4743\":1,\"4754\":1,\"4760\":3,\"4798\":3,\"4861\":1,\"4866\":1,\"4869\":1,\"4896\":1,\"4903\":1,\"4908\":1,\"4911\":1,\"4914\":1,\"4922\":1,\"4926\":1,\"4932\":1,\"4938\":1,\"4943\":1,\"4961\":1,\"4963\":1,\"4969\":1,\"4976\":1,\"4978\":1,\"4981\":6,\"5015\":4,\"5017\":6,\"5020\":6,\"5035\":4,\"5038\":2,\"5042\":5,\"5044\":6,\"5055\":3,\"5062\":4,\"5064\":1,\"5090\":2,\"5093\":2,\"5099\":2,\"5101\":2,\"5106\":1,\"5112\":3,\"5115\":1,\"5120\":1,\"5133\":2,\"5149\":2,\"5151\":2,\"5153\":2,\"5156\":2,\"5158\":2,\"5160\":1,\"5164\":2,\"5169\":4,\"5176\":1,\"5178\":1,\"5205\":5,\"5210\":3,\"5213\":2,\"5217\":1,\"5224\":1,\"5226\":1,\"5229\":1,\"5234\":4,\"5236\":1,\"5269\":1,\"5287\":1,\"5334\":3,\"5336\":1,\"5359\":1,\"5367\":2,\"5369\":3,\"5371\":3,\"5376\":5,\"5380\":1,\"5382\":5,\"5387\":1,\"5394\":1,\"5402\":6,\"5416\":9,\"5440\":3,\"5448\":1,\"5451\":2,\"5454\":1,\"5455\":1,\"5457\":1,\"5460\":1,\"5463\":4,\"5466\":4,\"5469\":5,\"5486\":2,\"5489\":3,\"5491\":2,\"5494\":2,\"5497\":2,\"5504\":2,\"5506\":1,\"5539\":3,\"5664\":1,\"5733\":5,\"5761\":4,\"5776\":8,\"5825\":1,\"5853\":7,\"5879\":1,\"5883\":7,\"5888\":2,\"5914\":9,\"5916\":2,\"5962\":11,\"6013\":5,\"6015\":14,\"6049\":1,\"6054\":3,\"6059\":1,\"6063\":2,\"6065\":3,\"6071\":1,\"6083\":1,\"6086\":3,\"6090\":1,\"6099\":1,\"6107\":1,\"6109\":1,\"6111\":2,\"6114\":1,\"6116\":1,\"6118\":2,\"6149\":2,\"6151\":2,\"6153\":2,\"6157\":2,\"6180\":2,\"6199\":1,\"6201\":1,\"6219\":2,\"6258\":15,\"6798\":4,\"6801\":3,\"6808\":7,\"6827\":4,\"6840\":3,\"6927\":2,\"6934\":1,\"6962\":2}}],[\"puppet\",{\"1\":{\"6888\":1}}],[\"puzzlers\",{\"1\":{\"6694\":1}}],[\"puresoyamilk\",{\"1\":{\"2677\":1,\"2679\":3}}],[\"purchaserequest\",{\"1\":{\"1972\":24,\"1974\":2,\"1976\":4}}],[\"push\",{\"1\":{\"1489\":4}}],[\"putting\",{\"1\":{\"6201\":1}}],[\"putifabsent\",{\"1\":{\"1366\":2,\"2397\":1,\"2411\":1,\"6063\":1}}],[\"putint\",{\"1\":{\"466\":1,\"473\":1}}],[\"put\",{\"1\":{\"304\":1,\"1406\":1,\"1429\":1,\"1491\":1,\"1601\":5,\"2409\":3,\"3009\":1,\"3220\":2,\"3224\":1,\"3398\":2,\"5205\":1,\"6258\":1,\"6541\":1}}],[\"危险容器\",{\"1\":{\"60\":1,\"64\":1}}],[\"提升为\",{\"1\":{\"5609\":1}}],[\"提升协作效率\",{\"1\":{\"2983\":1}}],[\"提到jvm处理异常的机制\",{\"1\":{\"4937\":1}}],[\"提倡什么样的编码和实现方式\",{\"1\":{\"2982\":1}}],[\"提倡的方式\",{\"1\":{\"2331\":1}}],[\"提取方法或者局部变量或许可以避免换行的问题\",{\"1\":{\"4039\":1}}],[\"提取到不同的状态对象中\",{\"1\":{\"2418\":1}}],[\"提取出来\",{\"1\":{\"2417\":1}}],[\"提出增新功能\",{\"1\":{\"2575\":1}}],[\"提出\",{\"1\":{\"2127\":1}}],[\"提交请求\",{\"1\":{\"1953\":1}}],[\"提交\",{\"1\":{\"1903\":2}}],[\"提高软件的可重用性\",{\"1\":{\"5757\":1}}],[\"提高阅读效率\",{\"1\":{\"3208\":1}}],[\"提高代码的扩展性\",{\"1\":{\"2717\":1}}],[\"提高代码的可读性\",{\"1\":{\"2242\":1}}],[\"提高扩展性\",{\"1\":{\"2695\":1}}],[\"提高了模块的相对独立性\",{\"1\":{\"2159\":1}}],[\"提高了程序的可维护性\",{\"1\":{\"1095\":1}}],[\"提高程序的维护性\",{\"1\":{\"2115\":1}}],[\"提高耦合度\",{\"1\":{\"2109\":1}}],[\"提高系统的可维护性\",{\"1\":{\"2011\":1}}],[\"提高系统的灵活性和可维护性\",{\"1\":{\"2044\":1}}],[\"提高系统的灵活性\",{\"1\":{\"1570\":1,\"1574\":1,\"1979\":1}}],[\"提高类的可读性\",{\"1\":{\"2010\":1,\"2028\":1}}],[\"提高其内聚性\",{\"1\":{\"2008\":1}}],[\"提高效率\",{\"1\":{\"1441\":1}}],[\"提高复用性\",{\"1\":{\"1149\":1}}],[\"提供依赖注入相关组件并支持面向切面编程\",{\"1\":{\"6675\":1}}],[\"提供免费和带支持的商业版本\",{\"1\":{\"6672\":1}}],[\"提供存在论\",{\"1\":{\"6655\":1}}],[\"提供tuple支持\",{\"1\":{\"6653\":1}}],[\"提供各种用途的函数\",{\"1\":{\"6647\":1}}],[\"提供html页面模板\",{\"1\":{\"6619\":1}}],[\"提供兼容jdk的高性能对象图形序列化\",{\"1\":{\"6608\":1}}],[\"提供描述\",{\"1\":{\"6584\":1}}],[\"提供平台中jvm暂停的日志和记录\",{\"1\":{\"6563\":1}}],[\"提供具体统计算法的工具\",{\"1\":{\"6484\":1}}],[\"提供具体的算法实现\",{\"1\":{\"2507\":1}}],[\"提供对json解析和序列化\",{\"1\":{\"6460\":1}}],[\"提供持久化数据类型和函数式控制结构\",{\"1\":{\"6416\":1}}],[\"提供开源免费版本和几种商业收费版本\",{\"1\":{\"6399\":1}}],[\"提供可靠的消息传递和集群创建的工具\",{\"1\":{\"6387\":1}}],[\"提供延迟和容错\",{\"1\":{\"6386\":1}}],[\"提供有限的免费模式\",{\"1\":{\"6329\":1}}],[\"提供有关类或接口的单个字段的信息\",{\"1\":{\"5944\":1}}],[\"提供托管服务\",{\"1\":{\"6328\":1,\"6329\":1}}],[\"提供关于类或接口上单独某个方法\",{\"1\":{\"5995\":1}}],[\"提供编译前的检查\",{\"1\":{\"5008\":1}}],[\"提供数据的假对象就叫做\",{\"1\":{\"4467\":1}}],[\"提供数据的假对象\",{\"1\":{\"4466\":1}}],[\"提供准确的文档\",{\"1\":{\"4435\":1}}],[\"提供断言来测试预期结果\",{\"1\":{\"4280\":1}}],[\"提供注解来识别测试方法\",{\"1\":{\"4279\":1}}],[\"提供让访问者对象遍历容器中的所有元素的方法\",{\"1\":{\"2949\":1}}],[\"提供新的接口定义\",{\"1\":{\"2766\":1}}],[\"提供如何定义语言的文法\",{\"1\":{\"2628\":1}}],[\"提供一个用户批量查询的接口\",{\"1\":{\"3204\":1}}],[\"提供一个方法\",{\"1\":{\"2962\":1}}],[\"提供一个创建产品族的接口\",{\"1\":{\"2607\":1}}],[\"提供一个静态的公有方法\",{\"1\":{\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1}}],[\"提供一个公有的静态方法\",{\"1\":{\"2286\":1,\"2293\":1}}],[\"提供一种方法来顺序访问聚合对象中的一系列数据\",{\"1\":{\"2624\":1}}],[\"提供一种方法顺序访问一个聚合对象中的各个元素\",{\"1\":{\"1045\":1}}],[\"提供一种遍历集合元素的统一接口\",{\"1\":{\"1506\":1}}],[\"提供方\",{\"1\":{\"2147\":1}}],[\"提供温度\",{\"1\":{\"1690\":1}}],[\"提供保存与获取备忘录的功能\",{\"1\":{\"1632\":1}}],[\"提供创建备忘录和恢复备忘录数据的功能\",{\"1\":{\"1630\":1}}],[\"提供同事对象交互的抽象方法\",{\"1\":{\"1581\":1}}],[\"提供了完整的查询引擎和索引引擎\",{\"1\":{\"6595\":1}}],[\"提供了restful\",{\"1\":{\"6594\":1}}],[\"提供了众多缺失的类型和一组丰富的顺序流api\",{\"1\":{\"6417\":1}}],[\"提供了从trace到fatal方法\",{\"1\":{\"6207\":1}}],[\"提供了更优雅的方式来实现资源的自动释放\",{\"1\":{\"4794\":1}}],[\"提供了系统的设计蓝图\",{\"1\":{\"2822\":1}}],[\"提供了一个统一的\",{\"1\":{\"2698\":1}}],[\"提供了一种可以恢复状态的机制\",{\"1\":{\"1622\":1}}],[\"提供了与真实主题相同的接口\",{\"1\":{\"1830\":1}}],[\"提供了同事对象注册与转发同事对象信息的抽象方法\",{\"1\":{\"1579\":1}}],[\"提供了创建产品的接口\",{\"1\":{\"1229\":1,\"1289\":1}}],[\"提供的反射语法自己去编写代码\",{\"1\":{\"1364\":1}}],[\"提供执行入口\",{\"0\":{\"1354\":1}}],[\"提供精简的接口\",{\"1\":{\"1096\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"47\":1}}],[\"提示信息\",{\"1\":{\"3257\":1}}],[\"提示信息可以包括错误原因\",{\"1\":{\"3226\":1}}],[\"提示友好\",{\"1\":{\"3226\":1}}],[\"提示\",{\"1\":{\"118\":1,\"3955\":1,\"3969\":1,\"4039\":1,\"4096\":1,\"4154\":1,\"4239\":1,\"4255\":1,\"4651\":1,\"4672\":1,\"4733\":1,\"4842\":1,\"4934\":1,\"5011\":1,\"5067\":1,\"5844\":1,\"6221\":1}}],[\"提示容器\",{\"1\":{\"56\":1,\"64\":1}}],[\"=clazz\",{\"1\":{\"5914\":1,\"6013\":1,\"6017\":1}}],[\"=null\",{\"1\":{\"4746\":1,\"4781\":1}}],[\"=l3\",{\"1\":{\"2411\":1}}],[\"=>\",{\"1\":{\"1489\":1,\"1537\":1,\"2578\":3}}],[\"==和equals都是比较栈内存中的地址是否相等\",{\"1\":{\"5685\":1}}],[\"==用于比较值是否相等\",{\"1\":{\"5684\":1}}],[\"==是一个运算符\",{\"1\":{\"5682\":1}}],[\"==前置通知异常==\",{\"1\":{\"4693\":1}}],[\"===百度网站====\",{\"1\":{\"1716\":1}}],[\"===>\",{\"1\":{\"293\":1}}],[\"====>\",{\"1\":{\"294\":1}}],[\"========数据库日志=========\",{\"1\":{\"4693\":1}}],[\"============天气情况变化=============\",{\"1\":{\"1704\":1}}],[\"================getdeclaredfields====================\",{\"1\":{\"5962\":2}}],[\"=========================================\",{\"1\":{\"6013\":1,\"6015\":1}}],[\"===========================\",{\"1\":{\"928\":1}}],[\"=======================\",{\"1\":{\"626\":1}}],[\"===============\",{\"1\":{\"2966\":1}}],[\"==============\",{\"1\":{\"626\":2}}],[\"=========使用遥控器操作电视机==========\",{\"1\":{\"783\":1}}],[\"=======给的是待定的测评========\",{\"1\":{\"2966\":1}}],[\"=====\",{\"1\":{\"290\":1,\"1539\":1}}],[\"====\",{\"1\":{\"289\":1,\"522\":1,\"542\":1}}],[\"===\",{\"1\":{\"288\":1,\"522\":1,\"542\":1,\"1539\":1}}],[\"==\",{\"0\":{\"5612\":1},\"1\":{\"243\":1,\"522\":1,\"542\":1,\"1315\":6,\"1356\":1,\"1366\":3,\"1436\":5,\"1537\":1,\"1601\":2,\"2144\":2,\"2149\":2,\"2286\":1,\"2293\":1,\"2298\":2,\"2301\":1,\"2304\":2,\"2310\":2,\"2313\":3,\"2315\":1,\"2316\":1,\"2320\":1,\"2328\":1,\"2370\":1,\"2372\":1,\"2376\":1,\"2406\":1,\"2454\":1,\"2546\":1,\"3021\":1,\"3025\":2,\"3046\":1,\"3048\":1,\"3049\":2,\"3053\":1,\"3090\":1,\"3097\":2,\"3179\":2,\"3201\":1,\"4405\":1,\"4693\":1,\"4754\":1,\"5048\":1,\"5090\":1,\"5267\":2,\"5273\":1,\"5282\":1,\"5311\":2,\"5313\":1,\"5422\":1,\"5427\":1,\"5431\":1,\"5432\":1,\"5433\":1,\"5434\":1,\"5440\":3,\"5447\":1,\"5761\":1,\"5914\":1,\"6063\":3,\"6065\":2,\"6071\":1,\"6076\":2,\"6083\":5,\"6086\":1,\"6090\":1,\"6099\":5,\"6101\":3,\"6107\":1,\"6180\":1,\"6201\":6,\"6258\":7}}],[\"==>\",{\"1\":{\"240\":1,\"243\":1,\"292\":1}}],[\"=\",{\"0\":{\"5600\":1,\"5606\":1},\"1\":{\"54\":1,\"334\":1,\"344\":2,\"435\":1,\"438\":2,\"441\":1,\"464\":2,\"466\":1,\"469\":1,\"473\":3,\"520\":3,\"522\":1,\"540\":6,\"542\":1,\"553\":1,\"555\":1,\"566\":1,\"605\":3,\"624\":1,\"626\":4,\"697\":1,\"707\":3,\"709\":1,\"711\":3,\"713\":4,\"766\":5,\"777\":4,\"781\":9,\"783\":7,\"832\":7,\"834\":7,\"850\":4,\"852\":1,\"854\":1,\"858\":3,\"894\":3,\"922\":3,\"926\":1,\"928\":16,\"1114\":4,\"1134\":6,\"1136\":6,\"1138\":1,\"1199\":2,\"1212\":8,\"1214\":3,\"1248\":2,\"1250\":11,\"1310\":6,\"1313\":1,\"1315\":11,\"1336\":3,\"1353\":2,\"1356\":6,\"1360\":5,\"1366\":18,\"1406\":13,\"1425\":2,\"1427\":2,\"1429\":1,\"1431\":5,\"1436\":6,\"1487\":3,\"1489\":12,\"1491\":8,\"1525\":12,\"1533\":4,\"1535\":6,\"1537\":5,\"1539\":4,\"1541\":4,\"1586\":5,\"1601\":2,\"1603\":2,\"1605\":5,\"1636\":6,\"1649\":4,\"1651\":1,\"1653\":4,\"1655\":2,\"1686\":4,\"1702\":7,\"1704\":2,\"1716\":6,\"1718\":5,\"1720\":3,\"1761\":6,\"1763\":5,\"1772\":9,\"1774\":10,\"1783\":1,\"1793\":3,\"1795\":13,\"1797\":5,\"1842\":1,\"1844\":2,\"1871\":2,\"1873\":2,\"1903\":4,\"1905\":3,\"1953\":5,\"1972\":2,\"1974\":6,\"1976\":5,\"2016\":1,\"2020\":2,\"2025\":1,\"2058\":2,\"2078\":1,\"2082\":1,\"2089\":8,\"2118\":2,\"2124\":3,\"2144\":3,\"2149\":4,\"2152\":5,\"2167\":1,\"2188\":11,\"2194\":11,\"2286\":3,\"2293\":3,\"2298\":3,\"2304\":3,\"2310\":3,\"2313\":3,\"2320\":3,\"2328\":2,\"2335\":1,\"2353\":2,\"2355\":4,\"2370\":6,\"2372\":5,\"2374\":2,\"2376\":6,\"2379\":2,\"2381\":3,\"2389\":1,\"2397\":3,\"2406\":7,\"2409\":6,\"2411\":4,\"2438\":3,\"2452\":9,\"2454\":6,\"2456\":2,\"2467\":1,\"2469\":2,\"2471\":1,\"2473\":1,\"2512\":4,\"2539\":9,\"2541\":3,\"2546\":3,\"2663\":1,\"2679\":3,\"2699\":4,\"2711\":5,\"2739\":2,\"2746\":2,\"2748\":1,\"2853\":1,\"2875\":1,\"2884\":1,\"2888\":4,\"2953\":5,\"2964\":1,\"2966\":4,\"2987\":1,\"2997\":3,\"3003\":1,\"3009\":1,\"3011\":1,\"3012\":1,\"3014\":2,\"3016\":2,\"3018\":1,\"3023\":1,\"3025\":2,\"3027\":1,\"3029\":2,\"3031\":1,\"3037\":4,\"3046\":1,\"3049\":4,\"3051\":3,\"3053\":5,\"3056\":1,\"3057\":2,\"3065\":2,\"3072\":3,\"3083\":1,\"3085\":2,\"3091\":1,\"3093\":2,\"3095\":2,\"3099\":2,\"3105\":2,\"3107\":1,\"3109\":2,\"3110\":1,\"3113\":4,\"3115\":3,\"3119\":1,\"3122\":2,\"3123\":1,\"3157\":4,\"3161\":1,\"3168\":1,\"3170\":1,\"3172\":2,\"3178\":1,\"3179\":2,\"3180\":1,\"3189\":5,\"3197\":2,\"3201\":3,\"3239\":1,\"3248\":1,\"3265\":1,\"3272\":1,\"3281\":1,\"3283\":1,\"3372\":2,\"3374\":1,\"3375\":1,\"3376\":3,\"3388\":1,\"3389\":1,\"3398\":1,\"3402\":3,\"3959\":1,\"3961\":1,\"3963\":1,\"3965\":1,\"4016\":1,\"4053\":2,\"4074\":1,\"4179\":12,\"4231\":1,\"4236\":1,\"4360\":9,\"4368\":3,\"4372\":6,\"4378\":1,\"4383\":2,\"4405\":1,\"4407\":3,\"4507\":1,\"4614\":4,\"4644\":7,\"4647\":2,\"4685\":2,\"4693\":19,\"4696\":7,\"4746\":3,\"4757\":1,\"4781\":6,\"4786\":1,\"4796\":1,\"4851\":1,\"4861\":3,\"4866\":4,\"4869\":2,\"4932\":1,\"4981\":8,\"5001\":3,\"5003\":1,\"5006\":1,\"5009\":1,\"5015\":2,\"5017\":4,\"5020\":3,\"5042\":2,\"5044\":3,\"5048\":4,\"5059\":6,\"5062\":1,\"5064\":1,\"5090\":2,\"5093\":2,\"5099\":1,\"5101\":1,\"5112\":6,\"5115\":1,\"5120\":1,\"5124\":1,\"5126\":1,\"5128\":2,\"5133\":5,\"5137\":2,\"5139\":2,\"5142\":2,\"5149\":1,\"5153\":1,\"5156\":1,\"5160\":1,\"5164\":1,\"5188\":1,\"5190\":1,\"5193\":6,\"5196\":6,\"5200\":6,\"5205\":4,\"5234\":4,\"5262\":2,\"5267\":4,\"5271\":12,\"5273\":2,\"5282\":2,\"5311\":3,\"5313\":2,\"5334\":4,\"5336\":1,\"5340\":1,\"5342\":1,\"5345\":2,\"5349\":1,\"5350\":3,\"5353\":1,\"5355\":1,\"5369\":1,\"5371\":1,\"5376\":2,\"5382\":6,\"5402\":4,\"5434\":2,\"5440\":7,\"5445\":3,\"5448\":4,\"5451\":2,\"5455\":2,\"5457\":2,\"5463\":7,\"5466\":11,\"5469\":9,\"5476\":4,\"5486\":4,\"5491\":3,\"5494\":2,\"5497\":4,\"5504\":2,\"5539\":1,\"5608\":3,\"5733\":2,\"5766\":1,\"5776\":1,\"5825\":3,\"5853\":5,\"5883\":2,\"5914\":12,\"5940\":2,\"5962\":5,\"5964\":5,\"6013\":3,\"6017\":5,\"6054\":3,\"6059\":1,\"6063\":18,\"6065\":9,\"6071\":1,\"6076\":21,\"6081\":1,\"6083\":7,\"6086\":6,\"6090\":1,\"6096\":8,\"6099\":8,\"6101\":5,\"6107\":3,\"6109\":8,\"6111\":4,\"6114\":1,\"6118\":29,\"6157\":3,\"6173\":2,\"6180\":6,\"6187\":1,\"6190\":1,\"6201\":29,\"6219\":8,\"6236\":2,\"6258\":49,\"6798\":1,\"6801\":1,\"6808\":2,\"6810\":1,\"6827\":2,\"6829\":2,\"6834\":2,\"6851\":1,\"6853\":1,\"6904\":2,\"6910\":3,\"6936\":1,\"6951\":1,\"6962\":3,\"6967\":1}}],[\"cyclops\",{\"1\":{\"6413\":1}}],[\"cylindrical\",{\"0\":{\"182\":1}}],[\"cdh\",{\"1\":{\"6810\":1}}],[\"cdi扩展框架\",{\"1\":{\"6363\":1}}],[\"cdn服务出错\",{\"1\":{\"3881\":1}}],[\"ci\",{\"1\":{\"6258\":3,\"6880\":1,\"6881\":1}}],[\"circleci\",{\"1\":{\"6328\":1}}],[\"circle\",{\"0\":{\"185\":1,\"210\":1},\"1\":{\"186\":1,\"187\":1,\"211\":1,\"212\":1,\"2144\":3,\"2149\":3,\"2152\":3,\"6013\":2,\"6015\":4,\"6017\":7}}],[\"cxis\",{\"1\":{\"6232\":1,\"6233\":1,\"6270\":1}}],[\"cxmtains\",{\"1\":{\"2878\":1}}],[\"cj\",{\"1\":{\"6168\":1}}],[\"cp\",{\"1\":{\"6258\":7}}],[\"cpi\",{\"1\":{\"6118\":21}}],[\"cpool\",{\"1\":{\"6118\":4}}],[\"cpu\",{\"1\":{\"661\":1,\"1417\":1,\"5672\":1}}],[\"ceylon\",{\"1\":{\"6472\":1}}],[\"central\",{\"1\":{\"6400\":1}}],[\"cell\",{\"1\":{\"5883\":2}}],[\"certain\",{\"1\":{\"5528\":1}}],[\"ceo\",{\"1\":{\"965\":1,\"2261\":1}}],[\"ctest\",{\"1\":{\"4316\":1,\"4400\":1}}],[\"ctrl+z\",{\"1\":{\"1620\":1,\"1664\":1}}],[\"c3\",{\"1\":{\"3402\":1}}],[\"c表示错误来源于第三方服务\",{\"1\":{\"3254\":1}}],[\"cs3\",{\"1\":{\"5940\":2}}],[\"cs2\",{\"1\":{\"5914\":2}}],[\"cs2=clazz\",{\"1\":{\"5914\":1}}],[\"cs1\",{\"1\":{\"5914\":2}}],[\"csdn\",{\"1\":{\"4423\":1,\"4425\":1,\"4491\":1,\"4669\":1,\"4699\":1,\"4700\":1,\"4988\":1,\"4989\":1,\"4990\":1,\"5239\":1,\"5240\":1,\"5242\":1,\"5246\":1,\"5813\":1,\"5882\":1,\"6133\":1,\"6134\":1,\"6137\":1,\"6275\":1}}],[\"csrf\",{\"1\":{\"3343\":1}}],[\"csv解析\",{\"0\":{\"6336\":1}}],[\"csv\",{\"1\":{\"3235\":1}}],[\"cssclass\",{\"1\":{\"370\":1,\"372\":1}}],[\"css\",{\"0\":{\"367\":1},\"1\":{\"368\":1}}],[\"c依次全部加锁后才可以进行更新操作\",{\"1\":{\"3166\":1}}],[\"c++\",{\"0\":{\"5567\":1},\"1\":{\"2383\":1,\"2572\":1,\"2597\":3,\"4042\":1,\"5568\":1,\"5569\":1,\"5570\":1,\"5571\":1,\"5572\":1,\"5573\":1,\"5574\":1,\"5575\":1,\"5576\":1,\"5603\":1}}],[\"cglibbeancopier\",{\"1\":{\"3240\":1}}],[\"cglib\",{\"0\":{\"1874\":1,\"1875\":1,\"1897\":1},\"1\":{\"1813\":1,\"1876\":1,\"1877\":2,\"1878\":1,\"1881\":1,\"1882\":1,\"1898\":1,\"1901\":1,\"1902\":1,\"1903\":4,\"6282\":1}}],[\"crash\",{\"1\":{\"6649\":1}}],[\"crate\",{\"1\":{\"6342\":1}}],[\"crawler4j\",{\"1\":{\"6660\":1}}],[\"crawler\",{\"1\":{\"2745\":2,\"2746\":2}}],[\"cron\",{\"1\":{\"6302\":1}}],[\"cross\",{\"1\":{\"3343\":1}}],[\"cryptomator\",{\"1\":{\"6600\":1}}],[\"cry\",{\"1\":{\"5883\":6,\"5888\":5}}],[\"creation\",{\"1\":{\"5558\":1}}],[\"creating\",{\"1\":{\"5523\":1,\"6201\":2}}],[\"creates\",{\"1\":{\"5825\":1}}],[\"createbucketifnotexisting\",{\"1\":{\"2699\":2,\"2711\":4}}],[\"createbean\",{\"1\":{\"1366\":4,\"1368\":1}}],[\"created\",{\"1\":{\"2370\":1,\"6081\":1,\"6109\":1,\"6996\":1}}],[\"creatememento\",{\"1\":{\"1636\":2,\"1653\":1,\"1655\":1}}],[\"createiterator\",{\"1\":{\"1535\":3,\"1539\":1}}],[\"create\",{\"1\":{\"1315\":2,\"1903\":1,\"2353\":2,\"2355\":2,\"3359\":2,\"5205\":2,\"6076\":2,\"6086\":1,\"6118\":1,\"6201\":3,\"6951\":1}}],[\"createcalendar\",{\"1\":{\"1315\":2}}],[\"createpizza2\",{\"1\":{\"1212\":1}}],[\"createpizza\",{\"1\":{\"1212\":1,\"1214\":2,\"1248\":3,\"1250\":6}}],[\"creek\",{\"1\":{\"5298\":1}}],[\"crp\",{\"0\":{\"2198\":1},\"1\":{\"2199\":1}}],[\"cr\",{\"1\":{\"1636\":3}}],[\"cnblogs\",{\"1\":{\"4424\":1,\"4991\":1,\"5022\":1,\"5243\":1,\"5244\":1,\"5814\":1,\"5815\":1,\"6052\":1,\"6135\":1,\"6274\":1}}],[\"cn\",{\"1\":{\"1338\":2,\"1351\":2,\"4489\":1,\"5077\":1,\"6258\":4}}],[\"cucumber\",{\"1\":{\"6630\":1}}],[\"customising\",{\"1\":{\"6201\":1}}],[\"customizedfeignclient\",{\"1\":{\"2748\":2}}],[\"custom\",{\"1\":{\"6201\":4}}],[\"customer\",{\"1\":{\"4211\":1,\"4255\":2}}],[\"customerwantcondiments\",{\"1\":{\"2677\":3}}],[\"cut\",{\"1\":{\"1192\":1}}],[\"curcount\",{\"1\":{\"2452\":2}}],[\"currentuser\",{\"1\":{\"4693\":6}}],[\"current\",{\"1\":{\"3289\":1,\"6065\":1,\"6201\":1}}],[\"currenttimemillis\",{\"1\":{\"3080\":1}}],[\"currentthread\",{\"1\":{\"2397\":1,\"6258\":1}}],[\"currentthreadid\",{\"1\":{\"2397\":3}}],[\"currentruntime\",{\"1\":{\"2335\":2}}],[\"currentconditions\",{\"1\":{\"1700\":1,\"1702\":9,\"1704\":6,\"1716\":1,\"1718\":1,\"1720\":5}}],[\"currently\",{\"1\":{\"191\":1}}],[\"curtains\",{\"1\":{\"1601\":5,\"1603\":3,\"1605\":5}}],[\"curve\",{\"1\":{\"344\":1}}],[\"cursor\",{\"1\":{\"4\":1}}],[\"c0503\",{\"1\":{\"3926\":1}}],[\"c0502\",{\"1\":{\"3924\":1}}],[\"c0501\",{\"1\":{\"3922\":1}}],[\"c0500\",{\"1\":{\"3919\":1}}],[\"c0402\",{\"1\":{\"3917\":1}}],[\"c0401\",{\"1\":{\"3915\":1}}],[\"c0400\",{\"1\":{\"3912\":1}}],[\"c0341\",{\"1\":{\"3910\":1}}],[\"c0331\",{\"1\":{\"3908\":1}}],[\"c0321\",{\"1\":{\"3906\":1}}],[\"c0312\",{\"1\":{\"3904\":1}}],[\"c0311\",{\"1\":{\"3902\":1}}],[\"c0300\",{\"1\":{\"3899\":1}}],[\"c0250\",{\"1\":{\"3897\":1}}],[\"c0240\",{\"1\":{\"3895\":1}}],[\"c0230\",{\"1\":{\"3893\":1}}],[\"c0220\",{\"1\":{\"3891\":1}}],[\"c0210\",{\"1\":{\"3889\":1}}],[\"c0200\",{\"1\":{\"3886\":1}}],[\"c0154\",{\"1\":{\"3884\":1}}],[\"c0153\",{\"1\":{\"3882\":1}}],[\"c0152\",{\"1\":{\"3880\":1}}],[\"c0151\",{\"1\":{\"3878\":1}}],[\"c0150\",{\"1\":{\"3876\":1}}],[\"c0140\",{\"1\":{\"3874\":1}}],[\"c0134\",{\"1\":{\"3872\":1}}],[\"c0133\",{\"1\":{\"3870\":1}}],[\"c0132\",{\"1\":{\"3868\":1}}],[\"c0131\",{\"1\":{\"3866\":1}}],[\"c0130\",{\"1\":{\"3864\":1}}],[\"c0124\",{\"1\":{\"3862\":1}}],[\"c0123\",{\"1\":{\"3860\":1}}],[\"c0122\",{\"1\":{\"3858\":1}}],[\"c0121\",{\"1\":{\"3856\":1}}],[\"c0120\",{\"1\":{\"3854\":1}}],[\"c0113\",{\"1\":{\"3852\":1}}],[\"c0112\",{\"1\":{\"3850\":1}}],[\"c0111\",{\"1\":{\"3848\":1}}],[\"c0110\",{\"1\":{\"3845\":1}}],[\"c0100\",{\"1\":{\"3842\":1}}],[\"c0001\",{\"1\":{\"3260\":1,\"3840\":1}}],[\"c0\",{\"1\":{\"832\":4,\"834\":4}}],[\"c0=\",{\"1\":{\"829\":1}}],[\"cmd\",{\"1\":{\"766\":2}}],[\"claz\",{\"1\":{\"5940\":1}}],[\"clazzs\",{\"1\":{\"5914\":5,\"5940\":2}}],[\"clazz\",{\"1\":{\"4614\":2,\"5190\":2,\"5914\":4,\"5940\":1,\"5962\":5,\"5964\":6,\"6013\":3,\"6017\":4,\"6083\":1,\"6086\":3,\"6107\":2,\"6199\":2}}],[\"classfileassembler\",{\"1\":{\"6118\":1}}],[\"classredefinedcount\",{\"1\":{\"6076\":9,\"6081\":1}}],[\"classtest\",{\"1\":{\"5853\":1}}],[\"class对象是可以说是反射中最常用的\",{\"1\":{\"5849\":1}}],[\"class的文件中\",{\"1\":{\"5828\":1}}],[\"class类与field对象相关方法如下\",{\"1\":{\"5945\":1}}],[\"class类与constructor相关的主要方法如下\",{\"1\":{\"5891\":1}}],[\"class类与java\",{\"1\":{\"5846\":1}}],[\"class类对象的获取\",{\"0\":{\"5847\":1}}],[\"class类的方法\",{\"1\":{\"5856\":1}}],[\"class类的对象作用是运行时提供或获得某个对象的类型信息\",{\"1\":{\"5831\":1}}],[\"class类的实例表示java应用运行时的类\",{\"1\":{\"5824\":1}}],[\"class类只存私有构造函数\",{\"1\":{\"5830\":1}}],[\"class类也是类的一种\",{\"1\":{\"5827\":1}}],[\"class类也是一个实实在在的类\",{\"1\":{\"5824\":1}}],[\"class类\",{\"0\":{\"5823\":1},\"1\":{\"5822\":1,\"5824\":1}}],[\"classcastexception异常\",{\"1\":{\"5007\":1}}],[\"classcastexception\",{\"1\":{\"4832\":1,\"5193\":1,\"5194\":2,\"5718\":1,\"6118\":1,\"6201\":2}}],[\"classpolicy\",{\"1\":{\"4596\":1,\"4598\":2,\"4600\":1}}],[\"classpath根目录下commons\",{\"1\":{\"6201\":1}}],[\"classpath根目录下寻找commons\",{\"1\":{\"6201\":1}}],[\"classpath\",{\"1\":{\"1357\":1,\"6201\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"1353\":1,\"1355\":2,\"1356\":2,\"1357\":1}}],[\"classdiagram\",{\"1\":{\"2831\":1}}],[\"classdefiner\",{\"1\":{\"6118\":1,\"6119\":1}}],[\"classdef\",{\"1\":{\"359\":1,\"365\":1,\"376\":1}}],[\"classloder\",{\"1\":{\"2290\":1}}],[\"classloader\",{\"1\":{\"1856\":1,\"1871\":2,\"5825\":3,\"6059\":2,\"6061\":2,\"6062\":1,\"6063\":1,\"6180\":1,\"6201\":10,\"6219\":5,\"6258\":11}}],[\"class<s>\",{\"1\":{\"6258\":7}}],[\"class<dog>\",{\"1\":{\"5883\":1}}],[\"class<t>的作用就是指明泛型的具体类型\",{\"1\":{\"5028\":1}}],[\"class<t>\",{\"1\":{\"4627\":1,\"4631\":1,\"4633\":1,\"4635\":1,\"5064\":1,\"5204\":1,\"5205\":1,\"5224\":1,\"5226\":1,\"5825\":1}}],[\"class<\",{\"1\":{\"1871\":2,\"4625\":1,\"5416\":1,\"5895\":1,\"5899\":1,\"5905\":1,\"5914\":2,\"5930\":1,\"5940\":1,\"5962\":1,\"5964\":1,\"5975\":1,\"5987\":1,\"6001\":1,\"6007\":1,\"6027\":1,\"6033\":1,\"6059\":2,\"6063\":5,\"6065\":2,\"6071\":1,\"6081\":1,\"6086\":1,\"6090\":1,\"6099\":1,\"6101\":1,\"6107\":1,\"6116\":4,\"6118\":6,\"6219\":1,\"6258\":6}}],[\"classnotfoundexception\",{\"1\":{\"1366\":1,\"4647\":1,\"4822\":1,\"5160\":1,\"5716\":1,\"5888\":1,\"5962\":1,\"6013\":1,\"6054\":1,\"6059\":1,\"6063\":6}}],[\"classname的方式反编译下dateinter子类的字节码\",{\"1\":{\"5168\":1}}],[\"classname\",{\"1\":{\"359\":1,\"361\":1,\"363\":1,\"364\":1,\"1360\":1,\"4693\":2,\"5500\":1,\"5501\":1,\"5896\":1,\"6059\":2,\"6063\":2}}],[\"classes\",{\"0\":{\"348\":1,\"356\":1,\"367\":1,\"6838\":1},\"1\":{\"368\":1,\"375\":1,\"4575\":1,\"5523\":1,\"5524\":1,\"5525\":1,\"6111\":1,\"6114\":1,\"6201\":2,\"6756\":1}}],[\"class=\",{\"1\":{\"344\":1,\"1338\":2,\"1351\":2}}],[\"class\",{\"0\":{\"374\":1,\"3994\":1},\"1\":{\"335\":1,\"357\":2,\"358\":1,\"360\":1,\"361\":1,\"362\":1,\"363\":1,\"364\":1,\"372\":1,\"375\":2,\"379\":1,\"435\":1,\"438\":2,\"453\":1,\"464\":1,\"520\":2,\"522\":2,\"540\":2,\"542\":2,\"557\":1,\"564\":1,\"566\":1,\"605\":4,\"622\":2,\"624\":3,\"626\":1,\"693\":1,\"695\":1,\"697\":1,\"707\":1,\"709\":3,\"711\":1,\"713\":1,\"766\":4,\"777\":5,\"779\":2,\"781\":1,\"783\":1,\"788\":1,\"832\":3,\"834\":3,\"850\":1,\"852\":1,\"854\":1,\"856\":1,\"858\":1,\"894\":4,\"922\":1,\"924\":5,\"926\":4,\"928\":1,\"1114\":5,\"1134\":6,\"1136\":1,\"1138\":1,\"1197\":3,\"1199\":1,\"1212\":1,\"1214\":1,\"1246\":5,\"1248\":1,\"1250\":3,\"1304\":2,\"1306\":2,\"1308\":2,\"1310\":1,\"1313\":1,\"1315\":2,\"1336\":2,\"1353\":1,\"1356\":1,\"1360\":4,\"1366\":6,\"1406\":4,\"1425\":1,\"1427\":2,\"1429\":1,\"1431\":1,\"1436\":1,\"1476\":3,\"1487\":5,\"1489\":1,\"1491\":1,\"1525\":3,\"1533\":1,\"1535\":2,\"1537\":2,\"1539\":1,\"1541\":1,\"1586\":6,\"1601\":2,\"1603\":5,\"1605\":1,\"1636\":4,\"1649\":1,\"1651\":1,\"1653\":1,\"1655\":1,\"1686\":5,\"1702\":2,\"1704\":1,\"1716\":2,\"1718\":1,\"1720\":1,\"1761\":1,\"1763\":1,\"1772\":1,\"1774\":1,\"1793\":1,\"1795\":1,\"1797\":1,\"1842\":2,\"1844\":1,\"1856\":1,\"1869\":1,\"1871\":1,\"1873\":1,\"1901\":1,\"1903\":1,\"1905\":1,\"1953\":4,\"1972\":5,\"1974\":1,\"1976\":1,\"2001\":1,\"2016\":2,\"2020\":4,\"2025\":2,\"2052\":5,\"2058\":5,\"2078\":3,\"2082\":4,\"2089\":7,\"2118\":3,\"2124\":4,\"2144\":5,\"2149\":6,\"2152\":7,\"2165\":1,\"2167\":1,\"2188\":5,\"2194\":5,\"2286\":2,\"2293\":2,\"2298\":2,\"2304\":2,\"2310\":3,\"2313\":3,\"2320\":3,\"2328\":1,\"2335\":1,\"2353\":2,\"2355\":2,\"2370\":1,\"2372\":1,\"2376\":2,\"2379\":1,\"2397\":1,\"2406\":3,\"2409\":1,\"2411\":4,\"2438\":5,\"2452\":1,\"2454\":5,\"2456\":1,\"2467\":7,\"2471\":1,\"2473\":1,\"2512\":4,\"2521\":3,\"2526\":1,\"2535\":3,\"2539\":4,\"2541\":1,\"2546\":1,\"2651\":1,\"2658\":1,\"2663\":3,\"2677\":4,\"2679\":1,\"2699\":2,\"2711\":3,\"2726\":2,\"2736\":2,\"2739\":2,\"2746\":3,\"2748\":2,\"2836\":1,\"2840\":1,\"2853\":5,\"2869\":2,\"2875\":2,\"2884\":3,\"2888\":3,\"2895\":2,\"2902\":1,\"2953\":6,\"2960\":4,\"2962\":3,\"2964\":1,\"2966\":1,\"2997\":2,\"3002\":3,\"3157\":1,\"3179\":1,\"3186\":1,\"3281\":1,\"3283\":1,\"3935\":3,\"3936\":1,\"3975\":1,\"4315\":1,\"4316\":4,\"4317\":1,\"4318\":1,\"4319\":1,\"4326\":1,\"4333\":3,\"4337\":1,\"4360\":1,\"4368\":1,\"4372\":3,\"4378\":1,\"4383\":1,\"4399\":1,\"4400\":4,\"4401\":1,\"4402\":2,\"4405\":1,\"4407\":2,\"4411\":1,\"4413\":1,\"4415\":4,\"4419\":1,\"4487\":1,\"4507\":2,\"4569\":1,\"4594\":1,\"4596\":1,\"4598\":1,\"4599\":1,\"4614\":4,\"4624\":1,\"4644\":1,\"4647\":3,\"4660\":1,\"4679\":1,\"4682\":1,\"4685\":2,\"4693\":3,\"4696\":1,\"4760\":1,\"4798\":1,\"4943\":1,\"4963\":1,\"4981\":1,\"5015\":2,\"5017\":2,\"5020\":2,\"5035\":2,\"5042\":2,\"5044\":2,\"5055\":1,\"5062\":1,\"5090\":1,\"5093\":2,\"5099\":1,\"5101\":1,\"5106\":1,\"5112\":1,\"5133\":1,\"5149\":1,\"5151\":1,\"5156\":1,\"5164\":1,\"5169\":3,\"5190\":1,\"5205\":2,\"5210\":1,\"5213\":1,\"5217\":1,\"5233\":2,\"5234\":2,\"5287\":1,\"5334\":2,\"5336\":1,\"5367\":1,\"5369\":1,\"5371\":2,\"5376\":2,\"5382\":1,\"5397\":1,\"5398\":1,\"5402\":2,\"5440\":1,\"5451\":1,\"5455\":1,\"5457\":1,\"5460\":1,\"5463\":1,\"5466\":1,\"5469\":1,\"5486\":1,\"5489\":1,\"5491\":1,\"5494\":1,\"5497\":3,\"5515\":3,\"5516\":3,\"5517\":1,\"5518\":1,\"5524\":2,\"5525\":1,\"5539\":1,\"5733\":4,\"5761\":1,\"5776\":4,\"5782\":3,\"5786\":2,\"5790\":4,\"5794\":3,\"5798\":2,\"5805\":1,\"5824\":5,\"5825\":3,\"5850\":1,\"5852\":1,\"5853\":3,\"5855\":3,\"5883\":7,\"5888\":12,\"5897\":1,\"5912\":1,\"5914\":6,\"5921\":1,\"5923\":1,\"5932\":1,\"5940\":4,\"5942\":1,\"5962\":4,\"5964\":1,\"5977\":1,\"5989\":1,\"6002\":1,\"6005\":1,\"6008\":1,\"6011\":1,\"6013\":7,\"6015\":1,\"6017\":4,\"6029\":1,\"6035\":1,\"6054\":3,\"6058\":1,\"6063\":6,\"6065\":6,\"6081\":1,\"6083\":1,\"6086\":2,\"6090\":1,\"6111\":3,\"6114\":1,\"6118\":28,\"6151\":1,\"6153\":1,\"6157\":2,\"6160\":1,\"6180\":2,\"6187\":1,\"6199\":1,\"6201\":25,\"6236\":1,\"6258\":5,\"6798\":1,\"6801\":1,\"6808\":2,\"6827\":1,\"6840\":1,\"6910\":1,\"6927\":2,\"6934\":1,\"6962\":3}}],[\"clean\",{\"1\":{\"7003\":1}}],[\"cleaner\",{\"1\":{\"4239\":1}}],[\"clear\",{\"1\":{\"6258\":1}}],[\"cleared\",{\"1\":{\"6076\":1}}],[\"clear方法会抛出unsupportedoperationexception异常\",{\"1\":{\"3108\":1}}],[\"clubs\",{\"1\":{\"4104\":1}}],[\"clojure\",{\"1\":{\"6471\":1,\"6925\":1}}],[\"cloneconstructorexample\",{\"1\":{\"5469\":8}}],[\"cloneclass\",{\"1\":{\"1793\":4}}],[\"cloneexample\",{\"1\":{\"5455\":4,\"5457\":7,\"5458\":1,\"5460\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"1793\":1,\"1795\":1,\"5416\":1,\"5457\":3,\"5458\":1,\"5459\":1,\"5460\":1,\"5463\":2,\"5466\":2}}],[\"clonename\",{\"1\":{\"1793\":4}}],[\"cloneable\",{\"0\":{\"5602\":1},\"1\":{\"1768\":1,\"1772\":1,\"1793\":1,\"1795\":1,\"5453\":1,\"5458\":1,\"5459\":3,\"5460\":1,\"5463\":1,\"5466\":1,\"5603\":1}}],[\"clone\",{\"0\":{\"5452\":1,\"5602\":1},\"1\":{\"1741\":1,\"1746\":1,\"1747\":1,\"1768\":2,\"1772\":3,\"1774\":4,\"1783\":2,\"1787\":1,\"1790\":1,\"1793\":3,\"1795\":4,\"1797\":1,\"1799\":3,\"5416\":1,\"5454\":3,\"5455\":2,\"5456\":1,\"5457\":3,\"5459\":2,\"5460\":2,\"5463\":3,\"5466\":3,\"5467\":1,\"5468\":2,\"5603\":2,\"5679\":1}}],[\"closeresourceinfinally\",{\"1\":{\"4866\":1}}],[\"closeable\",{\"1\":{\"4798\":2}}],[\"closed\",{\"1\":{\"2127\":2,\"2128\":1}}],[\"close\",{\"1\":{\"622\":3,\"624\":6,\"626\":4,\"1356\":1,\"1795\":4,\"4746\":1,\"4781\":1,\"4794\":1,\"4798\":1,\"4799\":3,\"4861\":1,\"4866\":1,\"6201\":1}}],[\"cl\",{\"1\":{\"1586\":3,\"6258\":10,\"6422\":1}}],[\"cliff\",{\"1\":{\"6439\":1}}],[\"clienttest\",{\"1\":{\"1122\":2,\"1491\":1,\"1605\":1,\"2456\":1,\"2473\":1}}],[\"client\",{\"1\":{\"522\":1,\"542\":1,\"566\":1,\"626\":1,\"696\":1,\"697\":1,\"712\":1,\"713\":1,\"783\":1,\"858\":1,\"1111\":1,\"1138\":1,\"1310\":1,\"1431\":1,\"1472\":1,\"1541\":1,\"1655\":1,\"1704\":1,\"1720\":1,\"1753\":1,\"1762\":1,\"1763\":1,\"1773\":1,\"1774\":1,\"1796\":1,\"1797\":1,\"1844\":1,\"1873\":1,\"1905\":1,\"1946\":1,\"1976\":1,\"2541\":1,\"2679\":1,\"2748\":3,\"2966\":1,\"3426\":1,\"5055\":1,\"6536\":1}}],[\"cli\",{\"1\":{\"391\":2}}],[\"click\",{\"1\":{\"329\":2,\"330\":2,\"336\":4,\"340\":1,\"341\":4,\"344\":4,\"6439\":1}}],[\"cachingexception\",{\"1\":{\"6834\":1}}],[\"cachebuilder\",{\"1\":{\"6901\":1}}],[\"cachefactory\",{\"1\":{\"6201\":1}}],[\"cachedfoowidget\",{\"1\":{\"6834\":1}}],[\"cached\",{\"1\":{\"6076\":1,\"6096\":1,\"6834\":1}}],[\"cachedconstructor\",{\"1\":{\"6065\":3}}],[\"cachedthreadpool\",{\"1\":{\"3159\":1}}],[\"cacheseconds\",{\"1\":{\"3234\":1}}],[\"cacheserviceimpl实现cacheservice接口\",{\"1\":{\"3004\":1}}],[\"cache产生\",{\"1\":{\"3046\":1}}],[\"cache\",{\"1\":{\"2991\":1,\"3009\":1,\"3011\":1,\"3234\":1,\"5269\":1,\"5271\":4,\"6076\":1,\"6201\":1,\"6901\":1}}],[\"camel\",{\"1\":{\"6498\":1}}],[\"camera\",{\"1\":{\"380\":1}}],[\"cainiao\",{\"1\":{\"6154\":1,\"6155\":1,\"6159\":1}}],[\"cause\",{\"1\":{\"6201\":1,\"6258\":2}}],[\"caused\",{\"1\":{\"4374\":1}}],[\"caught\",{\"1\":{\"4972\":1,\"6201\":1}}],[\"car\",{\"1\":{\"5782\":2}}],[\"card\",{\"1\":{\"2884\":1}}],[\"cardinal\",{\"1\":{\"344\":1}}],[\"carp\",{\"1\":{\"2199\":1}}],[\"caretaker\",{\"1\":{\"1632\":1,\"1636\":3,\"1651\":1,\"1655\":6}}],[\"cassandra\",{\"1\":{\"6392\":1}}],[\"casreflectiondata\",{\"1\":{\"6076\":1}}],[\"cas操作包含三个操作数\",{\"1\":{\"3541\":1}}],[\"cas操作等实用的功能\",{\"1\":{\"478\":1}}],[\"cas\",{\"1\":{\"3145\":1,\"3541\":1,\"6076\":1}}],[\"castle\",{\"1\":{\"6599\":1}}],[\"castable\",{\"1\":{\"6201\":1}}],[\"casting\",{\"1\":{\"5350\":1}}],[\"cast\",{\"1\":{\"3100\":1,\"4534\":1,\"4536\":1,\"6258\":1,\"7007\":1}}],[\"case\",{\"0\":{\"4484\":1},\"1\":{\"1315\":3,\"1489\":2,\"2416\":1,\"2417\":1,\"2495\":1,\"2811\":1,\"3186\":2,\"4119\":1,\"4125\":3,\"4126\":1,\"4177\":1,\"4333\":2,\"4554\":1,\"5353\":2,\"5355\":2,\"5619\":1}}],[\"ca\",{\"1\":{\"1315\":1,\"6086\":4}}],[\"cat\",{\"1\":{\"5763\":2,\"5765\":2,\"5766\":1}}],[\"category\",{\"1\":{\"1315\":1}}],[\"catch子句捕获并执行catch块\",{\"1\":{\"5706\":1}}],[\"catchexception\",{\"1\":{\"4981\":2}}],[\"catch先后顺序的问题\",{\"1\":{\"4970\":1}}],[\"catch部分提取finally代码\",{\"1\":{\"4969\":1}}],[\"catch外\",{\"1\":{\"4960\":1}}],[\"catchmostspecificexceptionfirst\",{\"1\":{\"4903\":1}}],[\"catch中返回阻止了jvm实现本来可能要执行的某些特定的优化\",{\"1\":{\"4856\":1}}],[\"catch和finally都不能单独使用\",{\"1\":{\"4801\":1}}],[\"catch语句块所捕获\",{\"1\":{\"5715\":1}}],[\"catch语句块执行完后\",{\"1\":{\"4778\":1}}],[\"catch语句块里有处理此异常的情况\",{\"1\":{\"4778\":1}}],[\"catch语句块里没有处理此异常的情况\",{\"1\":{\"4777\":1}}],[\"catch语句捕获\",{\"1\":{\"4749\":1}}],[\"catch语句捕获它\",{\"1\":{\"4723\":1,\"4729\":1}}],[\"catch用来捕获try语句块中发生的异常\",{\"1\":{\"4737\":1}}],[\"catch用的类却是exception\",{\"1\":{\"3274\":1}}],[\"catch参数\",{\"1\":{\"4589\":1}}],[\"catch时请分清稳定代码和非稳定代码\",{\"1\":{\"3267\":1}}],[\"catch是否可以移至循环体外\",{\"1\":{\"3202\":1}}],[\"catch操作\",{\"1\":{\"3202\":1}}],[\"catch到\",{\"1\":{\"3176\":1}}],[\"catch\",{\"0\":{\"4767\":1,\"4772\":1},\"1\":{\"438\":1,\"1315\":1,\"1356\":1,\"1366\":1,\"1772\":1,\"1795\":2,\"2473\":1,\"3265\":1,\"3267\":1,\"3270\":1,\"4016\":1,\"4019\":1,\"4022\":1,\"4047\":1,\"4070\":1,\"4071\":1,\"4077\":1,\"4230\":1,\"4231\":1,\"4233\":1,\"4647\":2,\"4682\":1,\"4693\":1,\"4737\":1,\"4756\":1,\"4757\":1,\"4763\":1,\"4764\":1,\"4768\":1,\"4769\":2,\"4770\":1,\"4771\":2,\"4774\":1,\"4781\":3,\"4796\":1,\"4801\":2,\"4853\":1,\"4861\":2,\"4865\":1,\"4866\":2,\"4869\":2,\"4900\":2,\"4901\":1,\"4902\":2,\"4903\":2,\"4905\":1,\"4906\":1,\"4908\":1,\"4911\":1,\"4914\":1,\"4918\":1,\"4922\":1,\"4926\":1,\"4938\":1,\"4959\":1,\"4961\":1,\"4972\":2,\"4976\":1,\"4981\":1,\"5219\":2,\"5221\":2,\"5224\":1,\"5226\":2,\"5229\":1,\"5271\":1,\"5457\":1,\"5463\":1,\"5466\":1,\"5534\":1,\"5662\":1,\"5670\":1,\"5703\":1,\"6054\":5,\"6063\":1,\"6065\":2,\"6118\":1,\"6180\":3,\"6201\":4,\"6817\":1,\"6834\":1,\"6835\":1,\"6926\":1}}],[\"calculator\",{\"1\":{\"1489\":2,\"1491\":4}}],[\"caltype\",{\"1\":{\"1315\":3}}],[\"cal\",{\"1\":{\"1313\":7,\"1315\":9}}],[\"calendar等日期相关类的月份month取值范围从\",{\"1\":{\"3087\":1}}],[\"calendarprovider\",{\"1\":{\"1315\":2}}],[\"calendar\",{\"0\":{\"1311\":1},\"1\":{\"1312\":1,\"1313\":9,\"1314\":1,\"1315\":6,\"3085\":6,\"3087\":3}}],[\"caller\",{\"1\":{\"6059\":3,\"6065\":4,\"6086\":2,\"6107\":2}}],[\"callersensitive\",{\"1\":{\"6059\":1,\"6065\":1,\"6086\":1,\"6090\":1,\"6107\":1}}],[\"called\",{\"1\":{\"332\":1,\"5528\":1,\"6081\":1}}],[\"call\",{\"1\":{\"330\":1,\"336\":1,\"344\":1,\"622\":3,\"624\":6,\"626\":4,\"766\":2,\"1302\":1,\"1304\":2,\"1310\":2,\"4380\":2,\"5525\":1,\"6054\":1,\"6065\":1,\"6083\":1,\"6962\":1,\"6963\":1}}],[\"callback\",{\"1\":{\"329\":1,\"330\":2,\"332\":1,\"334\":2,\"336\":4,\"339\":1,\"344\":4}}],[\"canonical\",{\"1\":{\"4261\":2}}],[\"cannot\",{\"1\":{\"3100\":1,\"5271\":1,\"5376\":1,\"5382\":1,\"5476\":1,\"5486\":1,\"5491\":2,\"5497\":1,\"5608\":1,\"6086\":1,\"6201\":1,\"6258\":1}}],[\"canrafflestate\",{\"1\":{\"2452\":2,\"2454\":2}}],[\"can\",{\"1\":{\"214\":1,\"252\":1,\"266\":2,\"311\":1,\"317\":1,\"325\":1,\"329\":1,\"339\":1,\"346\":1,\"368\":1,\"384\":1,\"391\":1,\"1356\":1,\"2726\":1,\"4152\":1,\"4179\":1,\"5356\":1,\"5524\":1,\"5525\":1,\"5528\":1,\"5530\":1,\"5761\":1,\"6065\":1,\"6083\":1,\"6086\":3,\"6111\":3,\"6114\":3,\"6201\":3,\"6904\":1}}],[\"c2\",{\"1\":{\"322\":1,\"1586\":4,\"3402\":1}}],[\"c1\",{\"1\":{\"315\":2,\"318\":1,\"322\":2,\"832\":4,\"834\":4,\"1586\":4,\"3402\":1}}],[\"cobertura\",{\"1\":{\"6881\":2}}],[\"co\",{\"1\":{\"6715\":1}}],[\"copied\",{\"1\":{\"6076\":1,\"6096\":1}}],[\"copydirectory\",{\"1\":{\"6898\":1}}],[\"copymethod\",{\"1\":{\"6096\":1,\"6101\":1}}],[\"copymemory\",{\"1\":{\"473\":1}}],[\"copy\",{\"1\":{\"6083\":4,\"6105\":1}}],[\"copy一份constructor返回\",{\"1\":{\"6074\":1}}],[\"copyconstructor\",{\"1\":{\"6071\":1,\"6076\":1,\"6083\":2}}],[\"copyright\",{\"0\":{\"3977\":1},\"1\":{\"3972\":1}}],[\"copyobj\",{\"1\":{\"1795\":2}}],[\"coverage\",{\"1\":{\"5525\":1}}],[\"coolshell\",{\"1\":{\"4489\":1}}],[\"corenlp\",{\"1\":{\"6531\":1}}],[\"corematchers\",{\"1\":{\"4368\":1}}],[\"core\",{\"1\":{\"3432\":1,\"4368\":2}}],[\"corresponding\",{\"1\":{\"391\":1}}],[\"correct\",{\"1\":{\"382\":1,\"3312\":1,\"4206\":1,\"5196\":1,\"5524\":1,\"6065\":1}}],[\"council\",{\"1\":{\"6697\":1}}],[\"count=15\",{\"1\":{\"6019\":1}}],[\"count=\",{\"1\":{\"6013\":1}}],[\"counterparts\",{\"1\":{\"5528\":1}}],[\"countdownlatch\",{\"1\":{\"3544\":1,\"4383\":3}}],[\"countdown\",{\"1\":{\"3491\":1}}],[\"count\",{\"1\":{\"2409\":2,\"2452\":7,\"2991\":2,\"3000\":2,\"3180\":2,\"3201\":1,\"3370\":1,\"3380\":2,\"3381\":1,\"3382\":1,\"6013\":1,\"6017\":2,\"6019\":1,\"6118\":3}}],[\"country\",{\"1\":{\"1315\":1}}],[\"couples\",{\"1\":{\"6548\":1}}],[\"couldn\",{\"1\":{\"6834\":1}}],[\"could\",{\"1\":{\"255\":1}}],[\"coffeemachine\",{\"1\":{\"1601\":5,\"1603\":2,\"1605\":6}}],[\"coffeebar\",{\"1\":{\"928\":1}}],[\"coffee\",{\"1\":{\"924\":5,\"1603\":1}}],[\"cost\",{\"1\":{\"905\":1,\"906\":1,\"922\":1,\"924\":1,\"926\":2,\"928\":6}}],[\"colebourne\",{\"1\":{\"6719\":1}}],[\"columnar\",{\"1\":{\"6352\":1}}],[\"column3\",{\"1\":{\"3383\":1}}],[\"column1\",{\"1\":{\"3383\":1}}],[\"column\",{\"1\":{\"3382\":1,\"3383\":2,\"3388\":1}}],[\"col2\",{\"1\":{\"3381\":1}}],[\"col1\",{\"1\":{\"3381\":1}}],[\"col\",{\"1\":{\"3381\":1,\"3382\":2}}],[\"collection\",{\"1\":{\"4390\":1,\"4407\":3,\"6432\":1}}],[\"collections2\",{\"1\":{\"6906\":1}}],[\"collections\",{\"1\":{\"3119\":1,\"6433\":1,\"6927\":1}}],[\"collections类返回的对象\",{\"1\":{\"3102\":1}}],[\"collectors\",{\"1\":{\"3093\":1,\"3095\":1,\"3099\":1,\"3524\":1,\"6851\":1}}],[\"collectors类的tomap\",{\"1\":{\"3092\":1,\"3096\":1}}],[\"collect\",{\"1\":{\"3093\":1,\"3095\":1,\"3099\":1,\"6851\":1,\"6927\":1}}],[\"colleaguemap\",{\"1\":{\"1601\":11}}],[\"colleague>\",{\"1\":{\"1601\":2}}],[\"colleaguename\",{\"1\":{\"1601\":13}}],[\"colleagues\",{\"1\":{\"1586\":4}}],[\"colleague\",{\"1\":{\"1581\":1,\"1582\":1,\"1586\":15,\"1601\":9,\"1603\":6}}],[\"colleage\",{\"1\":{\"854\":1}}],[\"collegeemployee\",{\"1\":{\"2188\":7,\"2191\":1,\"2194\":4}}],[\"collegemanager\",{\"1\":{\"2188\":4,\"2194\":4}}],[\"collegeapprover\",{\"1\":{\"1972\":2,\"1976\":5}}],[\"collegelist\",{\"1\":{\"1539\":6,\"1541\":4}}],[\"college\",{\"1\":{\"854\":2,\"858\":2,\"1535\":3,\"1539\":3}}],[\"color=\",{\"1\":{\"1761\":1,\"1772\":1}}],[\"color\",{\"1\":{\"351\":1,\"353\":1,\"354\":1,\"1761\":9,\"1772\":9,\"4095\":4}}],[\"codeurs\",{\"1\":{\"7007\":1}}],[\"codec\",{\"1\":{\"6896\":1}}],[\"codepointat\",{\"1\":{\"6258\":2}}],[\"codercto\",{\"1\":{\"4992\":1,\"6132\":1}}],[\"coder\",{\"1\":{\"401\":1,\"403\":1,\"406\":1}}],[\"code\",{\"0\":{\"5637\":1,\"6986\":1},\"1\":{\"339\":1,\"2350\":1,\"3227\":1,\"3257\":1,\"4254\":1,\"4584\":1,\"4600\":4,\"4757\":1,\"4769\":1,\"4771\":1,\"4796\":1,\"4943\":1,\"4963\":1,\"4969\":1,\"4978\":1,\"5169\":5,\"5524\":1,\"5525\":1,\"5527\":1,\"5528\":1,\"5529\":1,\"5530\":4,\"5619\":1,\"5638\":1,\"5648\":1,\"6065\":1,\"6118\":4,\"6201\":3,\"6728\":1,\"6788\":1,\"7003\":1}}],[\"codeship\",{\"1\":{\"6329\":1}}],[\"codes\",{\"0\":{\"307\":1}}],[\"combination\",{\"1\":{\"5489\":1}}],[\"combinablematcher\",{\"1\":{\"4368\":2}}],[\"complicateddataholder\",{\"1\":{\"6808\":3,\"6810\":2}}],[\"comprehension\",{\"1\":{\"6413\":1}}],[\"compilation\",{\"1\":{\"5035\":1}}],[\"compilings\",{\"1\":{\"4972\":1}}],[\"compiler\",{\"1\":{\"4324\":1,\"5579\":1,\"6996\":1}}],[\"compile\",{\"1\":{\"3239\":1}}],[\"computedvalues\",{\"1\":{\"4183\":1}}],[\"computer\",{\"1\":{\"2888\":3,\"5790\":4}}],[\"computercollegeiterator\",{\"1\":{\"1535\":1,\"1537\":2}}],[\"computercollege\",{\"1\":{\"858\":5,\"1535\":2,\"1541\":4}}],[\"compatibility\",{\"1\":{\"6201\":1}}],[\"compatible\",{\"1\":{\"382\":1,\"6201\":2,\"6640\":1}}],[\"company\",{\"1\":{\"3003\":1,\"5794\":3}}],[\"comparable\",{\"0\":{\"5641\":1},\"1\":{\"5642\":2}}],[\"comparable>\",{\"1\":{\"5106\":1}}],[\"comparable<string>\",{\"1\":{\"5287\":1}}],[\"comparable<\",{\"1\":{\"5048\":1,\"5049\":1,\"5050\":1,\"5051\":1}}],[\"comparator实现类要满足如下三个条件\",{\"1\":{\"3119\":1}}],[\"comparator<student>\",{\"1\":{\"3120\":1}}],[\"comparator<\",{\"1\":{\"2546\":1}}],[\"comparator<integer>\",{\"1\":{\"2546\":4}}],[\"comparator\",{\"0\":{\"5641\":1},\"1\":{\"2543\":1,\"2546\":3,\"3494\":1,\"5642\":2}}],[\"compareable\",{\"1\":{\"5390\":1}}],[\"compareto\",{\"1\":{\"2546\":1,\"3053\":1,\"3528\":1,\"5048\":1,\"5390\":1}}],[\"compare\",{\"1\":{\"2546\":2,\"3120\":1,\"3541\":1}}],[\"compound\",{\"1\":{\"5350\":1}}],[\"composition\",{\"0\":{\"2877\":1,\"5791\":1},\"1\":{\"2199\":1,\"2734\":1,\"2878\":1,\"5794\":1,\"6415\":1}}],[\"compositepattern\",{\"1\":{\"832\":1,\"834\":1}}],[\"composite\",{\"1\":{\"807\":1,\"820\":1,\"832\":3,\"834\":5,\"1005\":1,\"2199\":1,\"2615\":1,\"2744\":1}}],[\"componenttype\",{\"1\":{\"5204\":1}}],[\"component\",{\"1\":{\"818\":1,\"832\":18,\"834\":13,\"887\":1,\"894\":15,\"4693\":1}}],[\"commadelimitedlisttostringarray\",{\"1\":{\"6219\":1}}],[\"comma\",{\"1\":{\"4179\":1}}],[\"commandpattern\",{\"1\":{\"766\":1}}],[\"command\",{\"1\":{\"741\":1,\"745\":1,\"759\":1,\"760\":1,\"766\":14,\"777\":6,\"781\":7,\"787\":1,\"1049\":1,\"2622\":1}}],[\"common\",{\"0\":{\"6196\":1},\"1\":{\"6118\":2,\"6197\":1}}],[\"commons\",{\"0\":{\"6894\":1},\"1\":{\"3280\":2,\"3283\":2,\"6197\":1,\"6201\":7,\"6203\":1,\"6204\":1,\"6205\":1,\"6206\":1,\"6207\":2,\"6647\":1,\"6769\":1,\"6895\":1,\"6896\":1,\"6897\":1,\"6898\":1}}],[\"commonhouse\",{\"1\":{\"694\":1,\"695\":1,\"697\":4,\"709\":1,\"713\":4}}],[\"commit\",{\"1\":{\"3003\":2}}],[\"comment\",{\"1\":{\"346\":2,\"347\":1,\"3937\":1}}],[\"commentstring\",{\"1\":{\"3027\":1}}],[\"comments\",{\"0\":{\"345\":1},\"1\":{\"346\":2,\"3937\":2,\"4148\":1,\"6083\":1,\"6201\":1}}],[\"com\",{\"1\":{\"336\":2,\"341\":4,\"344\":2,\"1873\":1,\"3290\":1,\"3426\":2,\"4166\":3,\"4367\":1,\"4374\":4,\"4422\":1,\"4424\":1,\"4458\":1,\"4490\":1,\"4642\":1,\"4644\":1,\"4647\":1,\"4649\":7,\"4670\":1,\"4693\":1,\"4701\":1,\"4702\":1,\"4703\":1,\"4920\":2,\"4986\":1,\"4991\":1,\"4992\":1,\"5022\":1,\"5169\":6,\"5198\":1,\"5241\":1,\"5243\":1,\"5244\":1,\"5245\":1,\"5501\":1,\"5516\":1,\"5587\":1,\"5588\":1,\"5778\":1,\"5814\":1,\"5815\":1,\"5853\":2,\"5855\":4,\"5883\":6,\"5888\":5,\"5914\":1,\"5916\":3,\"5942\":3,\"6052\":1,\"6054\":1,\"6132\":1,\"6135\":1,\"6154\":1,\"6155\":1,\"6164\":2,\"6172\":1,\"6176\":1,\"6271\":1,\"6272\":1,\"6274\":1,\"6276\":1,\"6737\":1,\"6815\":1}}],[\"comes\",{\"1\":{\"255\":1}}],[\"conn\",{\"1\":{\"6173\":1}}],[\"connection\",{\"1\":{\"6173\":1}}],[\"connector\",{\"1\":{\"6168\":1,\"6193\":1}}],[\"connected\",{\"1\":{\"214\":1}}],[\"convergence\",{\"0\":{\"6869\":1},\"1\":{\"6763\":1}}],[\"convert\",{\"1\":{\"5608\":1}}],[\"convenient\",{\"1\":{\"357\":1}}],[\"consistent\",{\"1\":{\"6201\":1}}],[\"consideration\",{\"1\":{\"5529\":1}}],[\"cons\",{\"1\":{\"5914\":3}}],[\"consequently\",{\"1\":{\"5528\":1}}],[\"consumer\",{\"1\":{\"3111\":1}}],[\"constant\",{\"1\":{\"5315\":1,\"6118\":66}}],[\"constants\",{\"1\":{\"4179\":2}}],[\"consts单表中最多只有一个匹配行\",{\"1\":{\"3375\":1}}],[\"construct\",{\"1\":{\"4003\":1}}],[\"constructiontest\",{\"1\":{\"5914\":1}}],[\"construction\",{\"1\":{\"2127\":1}}],[\"constructoraccessorimpl\",{\"1\":{\"6086\":2,\"6118\":2}}],[\"constructoraccessor\",{\"1\":{\"6083\":3,\"6086\":2,\"6118\":1}}],[\"constructorarg>\",{\"1\":{\"1366\":1}}],[\"constructorarg\",{\"1\":{\"1360\":1,\"1366\":1}}],[\"constructorargs\",{\"1\":{\"1360\":1}}],[\"constructor对象表示的构造方法的类\",{\"1\":{\"5940\":1}}],[\"constructor对象表示的构造函数来创建新实例\",{\"1\":{\"5935\":1}}],[\"constructor对象构造函数的形参类型\",{\"1\":{\"5926\":1}}],[\"constructor<>\",{\"1\":{\"6083\":1}}],[\"constructor<t>\",{\"1\":{\"6065\":2,\"6071\":3,\"6076\":4,\"6081\":2,\"6083\":4}}],[\"constructor<\",{\"1\":{\"5901\":1,\"5907\":1,\"5914\":1,\"6076\":1}}],[\"constructor类存在于反射包\",{\"1\":{\"5890\":1}}],[\"constructor类及其用法\",{\"0\":{\"5889\":1}}],[\"constructor\",{\"1\":{\"3936\":1,\"4519\":1,\"4523\":1,\"4590\":1,\"5521\":2,\"5825\":3,\"5898\":1,\"5904\":1,\"5914\":2,\"5923\":1,\"5938\":1,\"5940\":3,\"6065\":5,\"6071\":3,\"6076\":1,\"6083\":8,\"6084\":1,\"6086\":3,\"6118\":7,\"6808\":1}}],[\"constructors\",{\"1\":{\"1360\":2,\"6071\":2,\"6076\":1}}],[\"constructhouse\",{\"1\":{\"711\":1,\"713\":2}}],[\"const\",{\"1\":{\"54\":1}}],[\"condition\",{\"1\":{\"2997\":1,\"2998\":1,\"3070\":1,\"3187\":1,\"3193\":1,\"4016\":2,\"4345\":1,\"4347\":1,\"6834\":1,\"6840\":1}}],[\"conf文件去修改该缺省值\",{\"1\":{\"3443\":1}}],[\"confusingname\",{\"1\":{\"2997\":2}}],[\"configs\",{\"1\":{\"6258\":6}}],[\"configured\",{\"1\":{\"5271\":1}}],[\"configuration类\",{\"1\":{\"6219\":1}}],[\"configuration>\",{\"1\":{\"4324\":1}}],[\"configuration\",{\"0\":{\"389\":1,\"6886\":1},\"1\":{\"391\":1,\"1140\":1,\"6258\":1,\"6766\":1}}],[\"configflag\",{\"1\":{\"3227\":1}}],[\"configcontent\",{\"1\":{\"1360\":2}}],[\"configlocation\",{\"1\":{\"1356\":5}}],[\"config\",{\"1\":{\"344\":2,\"391\":1,\"1356\":1,\"2375\":1,\"2376\":3,\"3290\":1,\"3352\":1,\"3361\":1,\"6201\":1,\"6318\":1}}],[\"concurrency\",{\"1\":{\"6692\":1,\"7002\":1}}],[\"concurrentmodificationexception\",{\"1\":{\"4887\":1}}],[\"concurrent\",{\"1\":{\"4378\":1,\"4380\":2,\"4383\":2,\"5553\":1}}],[\"concurrenthashmap来保存锁\",{\"1\":{\"6063\":1}}],[\"concurrenthashmap\",{\"1\":{\"3141\":1}}],[\"concurrenthashmap<long\",{\"1\":{\"2397\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"1366\":2,\"2397\":1,\"2411\":1}}],[\"concurrenthashmap<string\",{\"1\":{\"1366\":2,\"2411\":1}}],[\"concerns\",{\"1\":{\"5527\":1}}],[\"concise\",{\"1\":{\"4022\":1}}],[\"concreteelementb\",{\"1\":{\"2953\":5}}],[\"concreteelementa\",{\"1\":{\"2953\":5}}],[\"concreteelement\",{\"1\":{\"2948\":1}}],[\"concretevisitorb\",{\"1\":{\"2953\":2}}],[\"concretevisitora\",{\"1\":{\"2953\":2}}],[\"concretevisitor\",{\"1\":{\"2946\":1}}],[\"concreteclass\",{\"1\":{\"2663\":2}}],[\"concretecolleague2\",{\"1\":{\"1586\":2}}],[\"concretecolleague1\",{\"1\":{\"1586\":2}}],[\"concretecomponent\",{\"1\":{\"888\":1,\"894\":3}}],[\"concretecommand\",{\"1\":{\"766\":3}}],[\"concretestrategyb\",{\"1\":{\"2512\":2}}],[\"concretestrategya\",{\"1\":{\"2512\":2}}],[\"concretestateb\",{\"1\":{\"2438\":2}}],[\"concretestatea\",{\"1\":{\"2438\":3}}],[\"concretesubject\",{\"1\":{\"1686\":2}}],[\"concretehandler2\",{\"1\":{\"1953\":2}}],[\"concretehandler1\",{\"1\":{\"1953\":2}}],[\"concreteprototype\",{\"1\":{\"1752\":1}}],[\"concreteproduct\",{\"1\":{\"1186\":1,\"1232\":1,\"1292\":1}}],[\"concreteobserver2\",{\"1\":{\"1686\":2}}],[\"concreteobserver1\",{\"1\":{\"1686\":2}}],[\"concretemediator\",{\"1\":{\"1586\":2,\"1601\":2,\"1603\":1,\"1605\":4}}],[\"concreteiterator\",{\"1\":{\"1525\":3}}],[\"concreteimplementora\",{\"1\":{\"605\":2}}],[\"concretelterator\",{\"1\":{\"1521\":1}}],[\"concreteaggregate\",{\"1\":{\"1519\":1,\"1525\":2}}],[\"concretewebsite>\",{\"1\":{\"1429\":1}}],[\"concretewebsite\",{\"1\":{\"1427\":2,\"1429\":1}}],[\"concreteflyweight\",{\"1\":{\"1401\":1,\"1406\":3}}],[\"concretefactory\",{\"1\":{\"1230\":1}}],[\"concretedecorator\",{\"1\":{\"890\":1,\"894\":3}}],[\"concretebuilder\",{\"1\":{\"677\":1}}],[\"concrete\",{\"1\":{\"602\":1,\"605\":1,\"683\":1,\"760\":1,\"1290\":1,\"1394\":1,\"1580\":1,\"1582\":1,\"1680\":1,\"1682\":1,\"1945\":1,\"2434\":1,\"2507\":1,\"2658\":1,\"6201\":3}}],[\"continuous\",{\"0\":{\"6878\":1},\"1\":{\"6764\":1}}],[\"continue\",{\"1\":{\"4124\":1,\"4231\":1,\"6201\":1}}],[\"contortion\",{\"1\":{\"6083\":1}}],[\"control\",{\"1\":{\"3234\":1,\"6201\":1}}],[\"controllerlog\",{\"1\":{\"4693\":3}}],[\"controller层\",{\"1\":{\"3409\":1}}],[\"controller\",{\"1\":{\"571\":2,\"1570\":1,\"4696\":1}}],[\"containing\",{\"1\":{\"6927\":1}}],[\"containingclass\",{\"1\":{\"6099\":2}}],[\"containsstring\",{\"1\":{\"4368\":3}}],[\"containskey\",{\"1\":{\"1429\":1,\"1491\":1,\"6258\":1}}],[\"contains\",{\"1\":{\"1366\":1,\"1586\":1,\"1718\":1,\"2924\":1,\"6258\":1,\"6967\":3,\"6969\":1}}],[\"container\",{\"1\":{\"1325\":1,\"6201\":1}}],[\"contents\",{\"1\":{\"6201\":2}}],[\"content\",{\"1\":{\"1360\":2,\"3967\":1}}],[\"contextclassloader\",{\"1\":{\"6201\":13}}],[\"context\",{\"1\":{\"343\":1,\"1471\":1,\"1476\":2,\"2261\":1,\"2432\":1,\"2438\":17,\"2454\":1,\"2465\":16,\"2467\":40,\"2471\":17,\"2473\":12,\"2508\":1,\"2512\":3,\"2551\":1,\"3432\":1,\"5486\":1,\"5491\":2,\"5497\":1,\"5529\":1,\"6201\":8,\"6962\":4}}],[\"c\",{\"0\":{\"4116\":1,\"5600\":4},\"1\":{\"247\":1,\"250\":1,\"253\":1,\"256\":2,\"259\":1,\"263\":2,\"268\":2,\"272\":2,\"336\":1,\"341\":2,\"344\":2,\"347\":1,\"387\":3,\"832\":8,\"834\":6,\"1090\":1,\"1478\":2,\"1487\":2,\"1570\":1,\"2001\":2,\"2037\":2,\"2038\":1,\"2050\":1,\"2052\":2,\"2053\":2,\"2055\":1,\"2058\":9,\"2109\":2,\"2512\":5,\"2546\":6,\"2764\":1,\"3053\":2,\"3065\":1,\"3107\":1,\"3166\":1,\"3189\":2,\"3224\":2,\"3254\":1,\"3312\":1,\"3372\":2,\"3376\":2,\"4796\":1,\"4943\":1,\"5112\":1,\"5168\":1,\"5568\":1,\"5570\":1,\"5603\":1,\"6063\":8,\"6065\":3,\"6086\":6,\"6118\":5,\"6258\":4,\"6541\":1,\"6800\":1}}],[\"chronon\",{\"0\":{\"6976\":1},\"1\":{\"6785\":1,\"6975\":1,\"6977\":1}}],[\"christmas\",{\"1\":{\"205\":1,\"206\":1}}],[\"choco\",{\"1\":{\"6322\":1}}],[\"chocolate\",{\"1\":{\"897\":1,\"912\":1,\"926\":2,\"928\":2}}],[\"child\",{\"1\":{\"6083\":1,\"6201\":1}}],[\"children\",{\"1\":{\"832\":5,\"834\":5}}],[\"ch\",{\"1\":{\"1491\":6}}],[\"chef\",{\"1\":{\"6888\":1}}],[\"chen\",{\"1\":{\"3031\":3}}],[\"cheese\",{\"1\":{\"1212\":2,\"1250\":4}}],[\"cheesepizza\",{\"1\":{\"1197\":1,\"1199\":4,\"1212\":3}}],[\"cheesepizz\",{\"1\":{\"1191\":1}}],[\"checking\",{\"1\":{\"6201\":1,\"6962\":1}}],[\"checkinitted\",{\"1\":{\"6076\":1,\"6096\":1,\"6109\":1}}],[\"checkaccess\",{\"1\":{\"6086\":1,\"6107\":1}}],[\"checkstyle\",{\"1\":{\"6306\":1,\"6988\":1}}],[\"checks\",{\"1\":{\"6065\":1}}],[\"checkmemberaccess\",{\"1\":{\"6065\":1,\"6090\":1}}],[\"checkname\",{\"1\":{\"6063\":1}}],[\"checknonempty\",{\"1\":{\"4223\":2}}],[\"checkpackageaccess\",{\"1\":{\"6063\":1}}],[\"checkparam\",{\"1\":{\"3468\":1}}],[\"checkcast\",{\"1\":{\"5169\":2}}],[\"checkdeptexistuser\",{\"1\":{\"4696\":1}}],[\"checkdeptnameunique\",{\"1\":{\"4696\":2}}],[\"checkreturn\",{\"1\":{\"3272\":1,\"4932\":1}}],[\"checker\",{\"0\":{\"6983\":1},\"1\":{\"6787\":1,\"6984\":1}}],[\"checkedexceptions\",{\"1\":{\"6116\":2,\"6118\":1}}],[\"checked异常\",{\"1\":{\"3277\":1}}],[\"checked\",{\"0\":{\"4726\":1},\"1\":{\"3178\":1,\"4749\":1,\"5715\":1,\"6118\":1}}],[\"checkevent\",{\"1\":{\"2465\":1,\"2467\":2,\"2471\":2}}],[\"checkfailevent\",{\"1\":{\"2465\":1,\"2467\":2,\"2471\":2,\"2473\":1}}],[\"check\",{\"1\":{\"382\":1,\"453\":1,\"2315\":1,\"3450\":1,\"5193\":1,\"6063\":1,\"6065\":3,\"6109\":1}}],[\"champion等\",{\"1\":{\"6715\":1}}],[\"champion\",{\"1\":{\"6700\":1,\"6701\":1,\"6702\":1,\"6718\":1,\"6719\":1,\"6721\":1}}],[\"chainofresponsibilitypattern\",{\"1\":{\"1953\":1}}],[\"chain\",{\"1\":{\"1039\":1,\"1929\":1,\"2631\":1}}],[\"chaining\",{\"0\":{\"245\":1}}],[\"charcount\",{\"1\":{\"6258\":2}}],[\"charvalue\",{\"1\":{\"6118\":1}}],[\"charsequence\",{\"1\":{\"5287\":1}}],[\"chararray\",{\"1\":{\"1489\":7}}],[\"character\",{\"1\":{\"311\":1,\"3024\":1,\"3391\":1,\"4169\":1,\"5287\":1,\"5355\":1,\"6118\":1,\"6258\":4}}],[\"characters\",{\"0\":{\"303\":1,\"307\":1},\"1\":{\"274\":1,\"304\":1,\"308\":1}}],[\"charging\",{\"1\":{\"522\":2,\"542\":2}}],[\"char\",{\"1\":{\"309\":1,\"310\":1,\"1489\":1,\"1491\":1,\"4344\":1,\"4358\":1,\"5255\":1,\"5279\":1,\"5286\":1,\"5287\":1,\"5355\":1,\"5824\":1}}],[\"change\",{\"1\":{\"191\":1,\"340\":1,\"2001\":1,\"3110\":1,\"4179\":1,\"5530\":1}}],[\"与tapestry类似带有状态显示gui\",{\"1\":{\"6666\":1}}],[\"与gson类似\",{\"1\":{\"6459\":1}}],[\"与get0bject\",{\"1\":{\"3041\":1}}],[\"与具体数据库独立的追踪\",{\"1\":{\"6287\":1}}],[\"与class关键字是不一样的\",{\"1\":{\"5827\":1}}],[\"与运行过程的状态无关\",{\"1\":{\"5796\":1}}],[\"与前面几行\",{\"1\":{\"4865\":1}}],[\"与此接口中的其他方法不同\",{\"1\":{\"4634\":1,\"4636\":1,\"4638\":1}}],[\"与它的实现清晰地隔离开来\",{\"1\":{\"5364\":1}}],[\"与它之前的右花括号\",{\"1\":{\"4071\":1}}],[\"与它们之后的开括号\",{\"1\":{\"4070\":1}}],[\"与服务器的内存数量相关\",{\"1\":{\"3444\":1}}],[\"与底层mysql\",{\"1\":{\"3415\":1}}],[\"与底层源码解析融会贯通\",{\"1\":{\"2983\":1}}],[\"与dao层交互\",{\"1\":{\"3414\":1}}],[\"与全表扫描是小巫见大巫\",{\"1\":{\"3375\":1}}],[\"与设计文档相结合\",{\"1\":{\"3313\":1}}],[\"与右括号不需要空格\",{\"1\":{\"3025\":1}}],[\"与其它编程规范指南类似\",{\"1\":{\"3932\":1}}],[\"与其用半吊子英文来注释\",{\"1\":{\"3214\":1}}],[\"与其反复从头开发\",{\"1\":{\"2788\":1}}],[\"与其他\",{\"1\":{\"2362\":1}}],[\"与实际的写代码离得有点远\",{\"1\":{\"2694\":1}}],[\"与代理对象一起实现相同的接口或者是继承相同父类\",{\"1\":{\"1826\":1}}],[\"与行为实现\",{\"1\":{\"589\":1}}],[\"与\",{\"0\":{\"5338\":1,\"5567\":1,\"5606\":1,\"5641\":1,\"5647\":1,\"5667\":1},\"1\":{\"53\":1,\"740\":1,\"2881\":1,\"3054\":1,\"3196\":1,\"4304\":1,\"4307\":1,\"5264\":1,\"5428\":1,\"5431\":1,\"5644\":2,\"5662\":1,\"5672\":1}}],[\"v0\",{\"1\":{\"6872\":1}}],[\"vlad\",{\"1\":{\"6740\":1}}],[\"vlissides\",{\"1\":{\"2571\":1}}],[\"vjug\",{\"1\":{\"6686\":1,\"7006\":1}}],[\"v>\",{\"1\":{\"5017\":1}}],[\"vpn服务出错\",{\"1\":{\"3879\":1}}],[\"vm\",{\"1\":{\"3491\":1,\"5271\":1,\"6076\":1,\"6083\":1,\"6086\":1,\"6096\":1,\"6111\":1,\"6114\":1}}],[\"v能不能存储null值的情况\",{\"1\":{\"3125\":1}}],[\"v值组合的set集合\",{\"1\":{\"3124\":1}}],[\"v2\",{\"1\":{\"3093\":2,\"3099\":2}}],[\"v1\",{\"1\":{\"3093\":1,\"3099\":1,\"6872\":1}}],[\"vec\",{\"1\":{\"6118\":4}}],[\"vehical\",{\"1\":{\"5782\":3}}],[\"vehicle2\",{\"1\":{\"2025\":7}}],[\"vehicle\",{\"1\":{\"2016\":9,\"2020\":6,\"2021\":1,\"2025\":6,\"5805\":3}}],[\"velocity\",{\"1\":{\"3491\":1,\"6619\":1}}],[\"velocity调用pojo类的属性时\",{\"1\":{\"3241\":1}}],[\"verburg\",{\"1\":{\"6715\":1}}],[\"verbose\",{\"1\":{\"4599\":1}}],[\"vert\",{\"1\":{\"6379\":1}}],[\"vertex\",{\"1\":{\"385\":1}}],[\"vertices\",{\"0\":{\"383\":1},\"1\":{\"385\":1}}],[\"vertical\",{\"1\":{\"266\":1}}],[\"version>\",{\"1\":{\"4324\":2}}],[\"version=\",{\"1\":{\"4324\":1}}],[\"version=6\",{\"1\":{\"3093\":1}}],[\"version和scope都读取自父pom\",{\"1\":{\"3436\":1}}],[\"version2\",{\"1\":{\"3099\":1}}],[\"version1\",{\"1\":{\"3099\":1}}],[\"versions\",{\"1\":{\"382\":1}}],[\"version\",{\"1\":{\"338\":1,\"382\":1,\"2335\":2,\"3093\":3,\"3426\":1,\"3432\":1,\"3542\":1,\"6201\":1,\"6996\":1}}],[\"very\",{\"1\":{\"252\":1,\"4236\":1,\"5761\":1}}],[\"vs\",{\"1\":{\"728\":1}}],[\"voxxed\",{\"1\":{\"6741\":1}}],[\"vo等pojo类时\",{\"1\":{\"3059\":1}}],[\"vo的统称\",{\"1\":{\"3006\":1}}],[\"vo\",{\"1\":{\"2989\":1,\"3424\":1,\"3534\":1,\"3540\":1}}],[\"volatile解决多线程内存不可见问题对于一写多读\",{\"1\":{\"3180\":1}}],[\"volatile\",{\"1\":{\"936\":1,\"2313\":1,\"2320\":1,\"3178\":1,\"3179\":1,\"4157\":1,\"6081\":9,\"6086\":1,\"6107\":1}}],[\"voltageadapter\",{\"1\":{\"520\":1,\"522\":1,\"540\":2,\"542\":1}}],[\"voltage220v\",{\"1\":{\"520\":2,\"540\":10,\"542\":1}}],[\"void\",{\"1\":{\"401\":1,\"406\":1,\"408\":1,\"418\":1,\"420\":1,\"435\":1,\"450\":1,\"453\":2,\"466\":1,\"469\":1,\"473\":1,\"522\":2,\"542\":2,\"553\":4,\"555\":1,\"557\":6,\"559\":4,\"561\":1,\"564\":8,\"566\":2,\"605\":5,\"622\":9,\"624\":9,\"626\":1,\"693\":4,\"695\":3,\"697\":1,\"707\":3,\"709\":9,\"711\":1,\"713\":1,\"766\":6,\"777\":12,\"779\":4,\"781\":4,\"783\":1,\"832\":10,\"834\":8,\"850\":5,\"852\":3,\"854\":3,\"856\":1,\"858\":1,\"894\":6,\"922\":2,\"928\":1,\"1114\":5,\"1134\":19,\"1136\":4,\"1138\":1,\"1197\":3,\"1199\":1,\"1214\":1,\"1246\":5,\"1250\":1,\"1302\":8,\"1304\":8,\"1306\":8,\"1310\":1,\"1313\":1,\"1336\":1,\"1353\":1,\"1356\":1,\"1366\":1,\"1406\":4,\"1425\":1,\"1427\":2,\"1431\":1,\"1436\":1,\"1476\":4,\"1491\":1,\"1525\":5,\"1533\":2,\"1535\":3,\"1537\":2,\"1539\":2,\"1541\":1,\"1586\":12,\"1601\":6,\"1603\":11,\"1605\":1,\"1636\":5,\"1649\":2,\"1651\":1,\"1653\":4,\"1655\":1,\"1686\":8,\"1702\":4,\"1704\":1,\"1716\":5,\"1718\":8,\"1720\":1,\"1761\":3,\"1763\":1,\"1772\":3,\"1774\":1,\"1797\":1,\"1842\":3,\"1844\":1,\"1869\":4,\"1873\":1,\"1905\":1,\"1953\":5,\"1972\":6,\"1976\":1,\"2016\":2,\"2020\":4,\"2025\":4,\"2052\":22,\"2058\":18,\"2078\":2,\"2082\":2,\"2089\":15,\"2118\":1,\"2124\":1,\"2144\":4,\"2149\":5,\"2152\":7,\"2165\":1,\"2167\":1,\"2188\":4,\"2194\":5,\"2286\":1,\"2293\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1,\"2328\":2,\"2353\":2,\"2355\":2,\"2406\":1,\"2411\":1,\"2438\":6,\"2452\":2,\"2454\":10,\"2456\":1,\"2465\":8,\"2467\":16,\"2471\":9,\"2473\":1,\"2512\":6,\"2521\":7,\"2526\":4,\"2535\":4,\"2537\":1,\"2539\":11,\"2541\":1,\"2546\":2,\"2663\":7,\"2677\":8,\"2679\":1,\"2699\":2,\"2711\":3,\"2726\":2,\"2736\":8,\"2739\":4,\"2748\":3,\"2836\":1,\"2853\":2,\"2869\":1,\"2875\":2,\"2888\":2,\"2895\":2,\"2902\":2,\"2953\":13,\"2960\":8,\"2962\":3,\"2964\":3,\"2966\":1,\"2997\":1,\"3003\":1,\"3025\":1,\"3067\":1,\"3186\":2,\"3195\":1,\"3199\":1,\"3248\":1,\"4016\":1,\"4021\":2,\"4294\":1,\"4299\":1,\"4302\":1,\"4306\":1,\"4326\":1,\"4333\":6,\"4337\":1,\"4343\":1,\"4345\":1,\"4347\":1,\"4349\":1,\"4351\":1,\"4353\":1,\"4355\":1,\"4357\":1,\"4360\":1,\"4368\":12,\"4372\":2,\"4378\":1,\"4383\":2,\"4407\":2,\"4411\":1,\"4413\":1,\"4419\":3,\"4485\":1,\"4507\":3,\"4598\":3,\"4600\":3,\"4607\":1,\"4614\":1,\"4644\":2,\"4647\":1,\"4649\":3,\"4679\":2,\"4682\":6,\"4685\":6,\"4693\":6,\"4743\":1,\"4746\":1,\"4757\":1,\"4769\":1,\"4771\":1,\"4781\":1,\"4796\":1,\"4798\":1,\"4861\":1,\"4866\":1,\"4869\":1,\"4896\":1,\"4903\":1,\"4908\":1,\"4911\":1,\"4914\":1,\"4922\":1,\"4926\":1,\"4938\":1,\"4943\":1,\"4961\":1,\"4963\":1,\"4969\":1,\"4972\":1,\"4981\":4,\"5015\":2,\"5017\":3,\"5020\":2,\"5035\":4,\"5038\":2,\"5042\":2,\"5044\":3,\"5055\":2,\"5062\":2,\"5090\":1,\"5093\":1,\"5099\":1,\"5101\":1,\"5112\":1,\"5115\":1,\"5120\":1,\"5133\":1,\"5149\":1,\"5151\":1,\"5153\":1,\"5156\":1,\"5158\":1,\"5160\":1,\"5164\":1,\"5169\":2,\"5205\":1,\"5224\":1,\"5226\":1,\"5229\":1,\"5234\":2,\"5334\":3,\"5336\":2,\"5369\":1,\"5376\":3,\"5382\":4,\"5402\":2,\"5416\":6,\"5463\":1,\"5466\":1,\"5469\":1,\"5486\":1,\"5489\":2,\"5491\":1,\"5494\":1,\"5497\":1,\"5539\":1,\"5733\":1,\"5761\":1,\"5776\":4,\"5825\":1,\"5853\":3,\"5883\":1,\"5888\":1,\"5914\":3,\"5962\":1,\"5969\":1,\"5990\":1,\"6013\":4,\"6015\":10,\"6054\":2,\"6065\":1,\"6111\":2,\"6157\":1,\"6180\":2,\"6258\":6,\"6798\":1,\"6840\":1,\"6962\":1}}],[\"vanilla\",{\"1\":{\"6739\":1}}],[\"vaadin\",{\"1\":{\"6676\":1}}],[\"value为integer\",{\"1\":{\"5017\":1}}],[\"value3\",{\"1\":{\"3402\":1,\"6219\":1}}],[\"value2\",{\"1\":{\"3402\":1,\"6219\":1}}],[\"value1\",{\"1\":{\"3402\":1}}],[\"values=\",{\"1\":{\"4616\":1}}],[\"values\",{\"1\":{\"3101\":1,\"3124\":1,\"4612\":1,\"4614\":1,\"5275\":1,\"5276\":1,\"5277\":1,\"5278\":1}}],[\"value\",{\"1\":{\"1487\":1,\"2396\":1,\"2469\":5,\"3009\":1,\"3087\":1,\"3097\":1,\"3128\":1,\"3159\":3,\"3201\":1,\"3869\":1,\"4053\":1,\"4343\":2,\"4523\":1,\"4607\":1,\"4614\":1,\"4616\":1,\"4693\":1,\"4754\":3,\"5017\":5,\"5099\":5,\"5101\":5,\"5149\":5,\"5151\":2,\"5153\":4,\"5156\":5,\"5158\":2,\"5164\":5,\"5271\":3,\"5286\":2,\"5287\":2,\"5337\":1,\"5463\":2,\"5466\":2,\"5469\":2,\"5476\":1,\"5825\":1,\"5965\":1,\"5970\":1,\"6076\":2,\"6081\":1,\"6096\":2,\"6201\":2,\"6815\":1,\"6834\":1}}],[\"value=1234\",{\"1\":{\"1338\":1,\"1351\":1}}],[\"value=\",{\"1\":{\"1338\":1,\"1351\":1,\"4519\":1}}],[\"valueanimator\",{\"1\":{\"552\":1,\"553\":5,\"555\":5}}],[\"valueof\",{\"1\":{\"443\":1,\"1436\":8,\"1489\":3,\"1491\":4,\"3049\":2,\"3057\":1,\"4368\":1,\"5264\":1,\"5266\":1,\"5267\":2,\"5268\":1,\"5269\":1,\"5272\":1,\"5369\":1,\"6201\":2}}],[\"value>>32\",{\"1\":{\"429\":1}}],[\"value>>31>>1\",{\"1\":{\"428\":1}}],[\"validated\",{\"1\":{\"4696\":2}}],[\"validate\",{\"1\":{\"4405\":1,\"4407\":1}}],[\"valid\",{\"1\":{\"384\":1,\"386\":1}}],[\"var5\",{\"1\":{\"6063\":4}}],[\"var4\",{\"1\":{\"6063\":3}}],[\"var3\",{\"1\":{\"6063\":3}}],[\"var的类型由t指定\",{\"1\":{\"5015\":1}}],[\"varchar是可变长字符串\",{\"1\":{\"3358\":1}}],[\"var2\",{\"1\":{\"2546\":2,\"4360\":3,\"6063\":3}}],[\"var1\",{\"1\":{\"2546\":2,\"4360\":3,\"6063\":7}}],[\"varexpression\",{\"1\":{\"1487\":2,\"1489\":4}}],[\"variant\",{\"1\":{\"1315\":1}}],[\"variable\",{\"1\":{\"51\":1,\"64\":1,\"4519\":1,\"4523\":1,\"4551\":1,\"4590\":1,\"5382\":1,\"5476\":1,\"5743\":1,\"6118\":1}}],[\"var\",{\"1\":{\"334\":1,\"344\":2,\"1487\":12,\"1489\":4,\"1491\":3,\"3046\":1,\"3242\":2,\"5015\":5,\"5020\":7,\"5042\":6,\"5044\":6,\"6934\":1}}],[\"videos\",{\"0\":{\"7011\":1},\"1\":{\"6793\":1}}],[\"visualvm\",{\"1\":{\"6567\":1}}],[\"visual\",{\"1\":{\"5524\":2}}],[\"visit\",{\"1\":{\"2945\":1,\"2948\":1,\"2953\":8}}],[\"visitorpattern\",{\"1\":{\"2953\":1}}],[\"visitor\",{\"1\":{\"1079\":1,\"2623\":1,\"2931\":1,\"2932\":1,\"2945\":1,\"2948\":1,\"2953\":19,\"2976\":1}}],[\"visiblefortesting\",{\"1\":{\"1366\":1}}],[\"virtualjug创始人\",{\"1\":{\"6718\":1}}],[\"virtual\",{\"1\":{\"4717\":1,\"5528\":1,\"5825\":1}}],[\"viceschoolmasterapprover\",{\"1\":{\"1972\":2,\"1976\":5}}],[\"vit\",{\"1\":{\"1649\":8,\"1653\":8}}],[\"viewspace\",{\"1\":{\"6273\":1}}],[\"view\",{\"1\":{\"1090\":1,\"1570\":1,\"3424\":1,\"3540\":1}}],[\"viewed\",{\"1\":{\"339\":1}}],[\"vivo手机打电话\",{\"1\":{\"622\":1}}],[\"vivo手机关机\",{\"1\":{\"622\":1}}],[\"vivo手机开机\",{\"1\":{\"622\":1}}],[\"vivo\",{\"1\":{\"622\":1,\"626\":2}}],[\"via\",{\"1\":{\"379\":1,\"5527\":1,\"6076\":1,\"6096\":1,\"6201\":3}}],[\"v\",{\"1\":{\"64\":1,\"1570\":1,\"4600\":1,\"4943\":2,\"4963\":5,\"4969\":5,\"4978\":4,\"5017\":3,\"5169\":3,\"6118\":13}}],[\"vuepress\",{\"0\":{\"43\":1},\"1\":{\"4\":3,\"33\":1,\"34\":1,\"38\":1,\"40\":1,\"42\":1,\"44\":1,\"45\":1,\"47\":1,\"120\":1}}],[\"eugen\",{\"1\":{\"6705\":1}}],[\"ejb\",{\"1\":{\"6552\":1}}],[\"ebean\",{\"1\":{\"6545\":1}}],[\"ebcdic\",{\"1\":{\"6201\":1}}],[\"ee的开发过程\",{\"1\":{\"6675\":1}}],[\"ee容器\",{\"1\":{\"6627\":1}}],[\"ee功能\",{\"1\":{\"6616\":1}}],[\"ee\",{\"1\":{\"6444\":1,\"6613\":1,\"6701\":1,\"6707\":2,\"6717\":1}}],[\"ee参考实现\",{\"1\":{\"6283\":1}}],[\"ear\",{\"1\":{\"6859\":1,\"6883\":1}}],[\"earlier\",{\"1\":{\"6201\":1}}],[\"eagerly\",{\"1\":{\"6083\":1}}],[\"each\",{\"1\":{\"266\":1,\"6083\":1}}],[\"e1\",{\"1\":{\"5048\":3,\"5219\":1,\"5221\":1,\"5445\":3,\"5455\":2,\"5457\":2,\"5463\":3,\"5466\":3,\"5469\":3}}],[\"effictive\",{\"1\":{\"5046\":1}}],[\"effective\",{\"1\":{\"2331\":1,\"2597\":1,\"4239\":1,\"5468\":1,\"5582\":1,\"6690\":1,\"7001\":1,\"7012\":2}}],[\"effects\",{\"1\":{\"4\":1,\"5530\":1}}],[\"e>>\",{\"1\":{\"5048\":1,\"5049\":1}}],[\"e>\",{\"1\":{\"5046\":2,\"5048\":2,\"5051\":1,\"5052\":1}}],[\"eofexception\",{\"1\":{\"4829\":1,\"5716\":1}}],[\"evaluate\",{\"1\":{\"4374\":4,\"4380\":1}}],[\"even\",{\"1\":{\"4152\":1}}],[\"event\",{\"1\":{\"329\":1}}],[\"everything\",{\"1\":{\"4481\":1}}],[\"everyitem\",{\"1\":{\"4368\":1}}],[\"every\",{\"1\":{\"357\":1}}],[\"eder\",{\"1\":{\"6712\":1}}],[\"edu\",{\"1\":{\"5077\":1}}],[\"edition\",{\"1\":{\"6690\":1}}],[\"edit\",{\"1\":{\"4696\":2}}],[\"editsave\",{\"1\":{\"4696\":1}}],[\"edits\",{\"1\":{\"4095\":1}}],[\"ed\",{\"1\":{\"4179\":3,\"6704\":1}}],[\"edgedecisionresult\",{\"1\":{\"388\":1}}],[\"edgeround\",{\"1\":{\"388\":1}}],[\"edge\",{\"1\":{\"387\":2}}],[\"edges\",{\"0\":{\"175\":1},\"1\":{\"214\":1,\"321\":1,\"386\":2}}],[\"egyptian\",{\"1\":{\"4009\":1}}],[\"egglayability\",{\"1\":{\"2738\":1,\"2739\":5}}],[\"egglayable\",{\"1\":{\"2735\":1,\"2736\":3,\"2739\":2}}],[\"etc\",{\"1\":{\"3443\":1,\"6808\":1,\"6840\":2}}],[\"eip\",{\"1\":{\"6498\":1}}],[\"ei\",{\"1\":{\"2995\":1}}],[\"either\",{\"1\":{\"329\":1}}],[\"elasticsearch\",{\"1\":{\"6594\":1}}],[\"elephant\",{\"1\":{\"3220\":2}}],[\"elementtype\",{\"1\":{\"4132\":1,\"4515\":1,\"4590\":1,\"4607\":3,\"4612\":2,\"4642\":2,\"4656\":1,\"4658\":1,\"4659\":1,\"4660\":2,\"4690\":2}}],[\"element\",{\"1\":{\"2947\":1,\"2953\":20,\"3091\":1}}],[\"else的逻辑判断代码可以使用卫语句\",{\"1\":{\"3194\":1}}],[\"else方式\",{\"1\":{\"3192\":1}}],[\"else\",{\"1\":{\"418\":1,\"420\":1,\"435\":1,\"450\":1,\"453\":1,\"522\":1,\"542\":1,\"571\":1,\"1212\":4,\"1250\":2,\"1255\":1,\"1315\":2,\"1324\":1,\"1366\":2,\"1406\":1,\"1525\":1,\"1537\":2,\"1601\":7,\"1936\":1,\"1953\":4,\"1972\":4,\"2144\":1,\"2149\":1,\"2416\":2,\"2417\":1,\"2454\":2,\"2459\":1,\"2460\":2,\"2462\":1,\"2476\":2,\"2495\":1,\"2546\":4,\"2550\":2,\"3025\":1,\"3070\":1,\"3187\":1,\"3194\":2,\"4006\":1,\"4013\":1,\"4016\":2,\"4019\":1,\"4071\":1,\"4696\":1,\"5761\":1,\"5914\":1,\"6063\":3,\"6076\":3,\"6096\":1,\"6109\":2,\"6118\":6,\"6201\":4,\"6258\":3,\"6834\":1,\"6835\":1}}],[\"erasure\",{\"1\":{\"4995\":1,\"5070\":1,\"5077\":1}}],[\"err输出或使用e\",{\"1\":{\"3291\":1}}],[\"error不需要捕获\",{\"1\":{\"5719\":1}}],[\"error的\",{\"1\":{\"5719\":1}}],[\"error级别只记录系统逻辑出错\",{\"1\":{\"3295\":1}}],[\"errormessage是前后端错误追踪机制的体现\",{\"1\":{\"3228\":1}}],[\"errormessage\",{\"1\":{\"3226\":2,\"3227\":2,\"3292\":1}}],[\"errorcode\",{\"1\":{\"3226\":2,\"3227\":2}}],[\"error\",{\"0\":{\"4715\":1},\"1\":{\"1356\":1,\"3227\":3,\"3257\":2,\"3292\":1,\"3314\":1,\"4693\":2,\"4696\":3,\"4713\":1,\"4716\":1,\"4731\":1,\"4861\":2,\"4866\":2,\"4869\":2,\"4903\":2,\"4914\":1,\"4918\":1,\"4920\":1,\"4922\":1,\"4926\":1,\"4972\":1,\"4976\":1,\"4978\":1,\"5188\":1,\"5193\":1,\"5533\":2,\"5555\":1,\"5608\":1,\"6307\":1,\"6834\":1}}],[\"erich\",{\"1\":{\"2571\":1,\"2574\":1}}],[\"emoji\",{\"1\":{\"6656\":1}}],[\"emitinvoke\",{\"1\":{\"6118\":1}}],[\"emitboxingcontantpoolentries\",{\"1\":{\"6118\":1}}],[\"emitconstructor\",{\"1\":{\"6118\":1}}],[\"emitconstantpoolmethodref\",{\"1\":{\"6118\":2}}],[\"emitconstantpoolinterfacemethodref\",{\"1\":{\"6118\":1}}],[\"emitconstantpoolnameandtype\",{\"1\":{\"6118\":1}}],[\"emitconstantpoolclass\",{\"1\":{\"6118\":5}}],[\"emitconstantpoolutf8\",{\"1\":{\"6118\":13}}],[\"emitcommonconstantpoolentries\",{\"1\":{\"6118\":1}}],[\"emitshort\",{\"1\":{\"6118\":8}}],[\"emitmagicandversion\",{\"1\":{\"6118\":1}}],[\"emptystack\",{\"1\":{\"4233\":1}}],[\"empty\",{\"1\":{\"4022\":1,\"4179\":1,\"4223\":1,\"6065\":2,\"6824\":1,\"6827\":1}}],[\"emptylist\",{\"1\":{\"3102\":2}}],[\"emp\",{\"1\":{\"2188\":6,\"2194\":6}}],[\"employee\",{\"1\":{\"2188\":5,\"2194\":4}}],[\"email模板和通用开源代码生成器模板\",{\"1\":{\"6619\":1}}],[\"email\",{\"1\":{\"2077\":1,\"2078\":5,\"2080\":1,\"2082\":2}}],[\"e2\",{\"1\":{\"1795\":2,\"5219\":1,\"5221\":1,\"5445\":3,\"5455\":1,\"5457\":1,\"5463\":3,\"5466\":3,\"5469\":2}}],[\"eckel\",{\"1\":{\"5581\":1}}],[\"eclipselink\",{\"1\":{\"6546\":1}}],[\"eclipse并不需要知道插件具体是怎样开发的\",{\"1\":{\"6216\":1}}],[\"eclipse使用osgi作为插件系统的基础\",{\"1\":{\"6210\":1}}],[\"eclipse\",{\"0\":{\"6993\":1},\"1\":{\"1620\":1,\"1664\":1,\"6442\":1,\"6789\":2,\"6973\":1,\"6987\":1,\"6994\":1}}],[\"echarts\",{\"0\":{\"90\":1}}],[\"especially\",{\"1\":{\"4246\":1,\"7013\":1}}],[\"espress\",{\"1\":{\"907\":1}}],[\"espresso\",{\"1\":{\"896\":1,\"924\":2}}],[\"escape\",{\"0\":{\"307\":1},\"1\":{\"308\":1}}],[\"equalexample\",{\"1\":{\"5440\":4,\"5444\":1,\"5445\":4}}],[\"equalto\",{\"1\":{\"4368\":7}}],[\"equal\",{\"1\":{\"4368\":1,\"6951\":2}}],[\"equally\",{\"1\":{\"4021\":1}}],[\"equals不能直接用于基本数据类型的比较\",{\"1\":{\"5684\":1}}],[\"equals是object类的方法\",{\"1\":{\"5682\":1}}],[\"equals与==的区别\",{\"0\":{\"5681\":1}}],[\"equals方法遵循的原则\",{\"1\":{\"5653\":1}}],[\"equals\",{\"0\":{\"5417\":1,\"5643\":1,\"5645\":1,\"5647\":1},\"1\":{\"274\":1,\"453\":1,\"1212\":4,\"1250\":4,\"1360\":1,\"1436\":1,\"1586\":1,\"1953\":2,\"3016\":1,\"3045\":3,\"3049\":1,\"3054\":1,\"3117\":1,\"3528\":1,\"4696\":3,\"5416\":1,\"5420\":1,\"5422\":2,\"5424\":3,\"5426\":1,\"5427\":2,\"5429\":1,\"5430\":1,\"5431\":1,\"5432\":1,\"5433\":1,\"5434\":1,\"5440\":1,\"5442\":1,\"5443\":1,\"5445\":1,\"5644\":2,\"5646\":2,\"5648\":2,\"5654\":2,\"5655\":1,\"5656\":3,\"5658\":2,\"5679\":1,\"6015\":1,\"6180\":1,\"6201\":1}}],[\"equivalent\",{\"1\":{\"271\":1}}],[\"examine\",{\"1\":{\"5525\":1}}],[\"example<\",{\"1\":{\"4324\":1}}],[\"examples\",{\"1\":{\"333\":1}}],[\"example\",{\"1\":{\"267\":1,\"271\":1,\"304\":1,\"314\":1,\"325\":1,\"343\":1,\"350\":1,\"358\":1,\"368\":1,\"369\":1,\"371\":1,\"3957\":1,\"4166\":3,\"4920\":2,\"5451\":2,\"5914\":1,\"5916\":3,\"5942\":3}}],[\"exists\",{\"1\":{\"6201\":2}}],[\"existed\",{\"1\":{\"3197\":2}}],[\"exit\",{\"1\":{\"4788\":1,\"5713\":1}}],[\"ex\",{\"1\":{\"4647\":2,\"4757\":3,\"4781\":3,\"6180\":3,\"6201\":2}}],[\"excel读写\",{\"1\":{\"6656\":1}}],[\"exceptiontypes\",{\"1\":{\"6083\":1}}],[\"exceptiontest\",{\"1\":{\"4372\":2,\"4374\":2,\"4981\":4}}],[\"exception是因为java编译器要进行检查\",{\"1\":{\"5715\":1}}],[\"exception来实现\",{\"1\":{\"4849\":1}}],[\"exceptions\",{\"0\":{\"4726\":2,\"6816\":1},\"1\":{\"5715\":1,\"5717\":1,\"6118\":2,\"6201\":1,\"6752\":1}}],[\"exceptionfailtest\",{\"1\":{\"4372\":1,\"4374\":1}}],[\"exception\",{\"0\":{\"4719\":1},\"1\":{\"1772\":1,\"1795\":2,\"1797\":1,\"2467\":9,\"2473\":1,\"3418\":1,\"4022\":1,\"4372\":3,\"4374\":4,\"4378\":1,\"4383\":2,\"4682\":3,\"4685\":1,\"4693\":6,\"4713\":1,\"4720\":1,\"4748\":1,\"4749\":1,\"4760\":1,\"4774\":1,\"4796\":1,\"4896\":1,\"4920\":1,\"4925\":1,\"4938\":1,\"4943\":3,\"4945\":1,\"4961\":1,\"4963\":3,\"4969\":1,\"4972\":3,\"4976\":1,\"4981\":3,\"4993\":1,\"5093\":1,\"5217\":1,\"5533\":2,\"5535\":1,\"5559\":1,\"5716\":1,\"5718\":1,\"5853\":1,\"5914\":1,\"6118\":1,\"6180\":2,\"6201\":5,\"6927\":1}}],[\"exclusive\",{\"1\":{\"3199\":1}}],[\"exercise\",{\"1\":{\"4481\":1}}],[\"executors返回的线程池对象的弊端如下\",{\"1\":{\"3159\":1}}],[\"execute\",{\"1\":{\"759\":1,\"766\":3,\"777\":6,\"781\":2,\"789\":1,\"793\":1,\"4693\":1,\"6951\":1}}],[\"exe\",{\"1\":{\"2388\":1}}],[\"exemplified\",{\"1\":{\"308\":1}}],[\"externalizable\",{\"0\":{\"5667\":1},\"1\":{\"5668\":1}}],[\"external\",{\"1\":{\"5523\":1}}],[\"extensibility\",{\"1\":{\"5523\":2}}],[\"extension\",{\"1\":{\"2127\":1}}],[\"extends\",{\"1\":{\"520\":1,\"557\":1,\"605\":1,\"624\":2,\"695\":1,\"709\":2,\"852\":1,\"854\":1,\"856\":1,\"894\":1,\"924\":5,\"926\":4,\"1197\":2,\"1246\":4,\"1250\":2,\"1427\":1,\"1487\":4,\"1586\":3,\"1601\":1,\"1603\":4,\"1686\":1,\"1953\":2,\"1972\":4,\"2118\":1,\"2124\":2,\"2144\":2,\"2149\":3,\"2152\":4,\"2438\":2,\"2454\":4,\"2467\":6,\"2471\":1,\"2521\":2,\"2526\":1,\"2539\":3,\"2663\":1,\"2677\":3,\"2726\":1,\"2748\":1,\"2895\":1,\"2912\":1,\"2960\":3,\"2962\":2,\"2997\":1,\"3111\":3,\"3497\":1,\"4076\":1,\"4507\":1,\"4614\":1,\"4625\":1,\"4627\":1,\"4631\":1,\"4633\":1,\"4635\":1,\"4682\":1,\"4696\":1,\"4760\":1,\"4798\":1,\"5003\":1,\"5035\":1,\"5037\":1,\"5038\":1,\"5042\":1,\"5046\":3,\"5048\":3,\"5049\":1,\"5050\":2,\"5052\":1,\"5055\":1,\"5082\":2,\"5106\":1,\"5151\":1,\"5169\":1,\"5217\":1,\"5224\":1,\"5226\":1,\"5229\":1,\"5236\":1,\"5376\":1,\"5402\":1,\"5776\":2,\"5780\":1,\"5883\":2,\"5962\":1,\"6013\":1,\"6111\":2}}],[\"extraslibrary\",{\"1\":{\"6842\":1}}],[\"extra列会出现\",{\"1\":{\"3373\":1}}],[\"extra\",{\"1\":{\"266\":1,\"267\":1,\"271\":1,\"5198\":1,\"5241\":1}}],[\"expectations\",{\"1\":{\"6962\":1}}],[\"expectexception\",{\"1\":{\"4374\":4}}],[\"expected=numberformatexception\",{\"1\":{\"4685\":1}}],[\"expectedresult\",{\"1\":{\"4407\":5}}],[\"expected<java\",{\"1\":{\"4374\":1}}],[\"expectedarray\",{\"1\":{\"4357\":1}}],[\"expected\",{\"1\":{\"4232\":1,\"4233\":1,\"4343\":1,\"4353\":1,\"4368\":2,\"4371\":2,\"4372\":2}}],[\"exposure\",{\"1\":{\"5530\":1}}],[\"explain表的结果\",{\"1\":{\"3375\":1}}],[\"explicitly\",{\"1\":{\"1315\":1}}],[\"explicit\",{\"1\":{\"317\":1}}],[\"expired\",{\"1\":{\"2991\":2}}],[\"expstr\",{\"1\":{\"1489\":3,\"1491\":6}}],[\"exp\",{\"1\":{\"1476\":1,\"4693\":3}}],[\"exp2\",{\"1\":{\"1476\":1}}],[\"exp1\",{\"1\":{\"1476\":1}}],[\"expressions\",{\"1\":{\"5547\":1}}],[\"expression4j\",{\"1\":{\"1500\":1}}],[\"expression\",{\"1\":{\"1468\":1,\"1469\":1,\"1470\":1,\"1487\":12,\"1489\":8}}],[\"expressive\",{\"1\":{\"252\":1,\"255\":1,\"6640\":1}}],[\"e\",{\"1\":{\"266\":1,\"267\":1,\"268\":1,\"272\":1,\"387\":1,\"438\":2,\"1356\":1,\"1366\":2,\"1478\":2,\"1772\":2,\"1795\":2,\"2188\":4,\"2194\":4,\"2473\":2,\"3087\":1,\"3265\":1,\"3292\":2,\"3314\":1,\"3418\":2,\"4016\":1,\"4022\":1,\"4047\":1,\"4077\":1,\"4192\":1,\"4647\":2,\"4682\":1,\"4693\":7,\"4757\":2,\"4769\":2,\"4771\":2,\"4774\":1,\"4781\":4,\"4796\":1,\"4853\":1,\"4861\":4,\"4866\":4,\"4869\":4,\"4903\":4,\"4911\":1,\"4914\":2,\"4918\":3,\"4922\":2,\"4925\":2,\"4926\":2,\"4938\":2,\"4961\":2,\"4972\":2,\"4976\":1,\"4981\":1,\"5048\":4,\"5049\":1,\"5050\":1,\"5051\":2,\"5052\":1,\"5224\":1,\"5226\":2,\"5402\":2,\"5457\":2,\"5463\":2,\"5466\":2,\"5579\":1,\"6054\":10,\"6063\":1,\"6065\":4,\"6118\":2,\"6201\":6,\"6834\":3,\"6927\":2}}],[\"english\",{\"1\":{\"6746\":1}}],[\"engine\",{\"1\":{\"270\":1,\"5552\":1}}],[\"environment\",{\"1\":{\"6201\":1}}],[\"environments\",{\"1\":{\"5524\":2}}],[\"enough\",{\"1\":{\"6201\":1}}],[\"enclosingone\",{\"1\":{\"5733\":5}}],[\"encoding=\",{\"1\":{\"4324\":1}}],[\"encoding设置为utf\",{\"1\":{\"3035\":1}}],[\"encodestr\",{\"1\":{\"3044\":1}}],[\"encode\",{\"1\":{\"2747\":1,\"2748\":4,\"3044\":1}}],[\"encoded\",{\"1\":{\"311\":1}}],[\"ensurememberaccess\",{\"1\":{\"6065\":1}}],[\"ensure\",{\"1\":{\"2103\":1}}],[\"enumeration<url>\",{\"1\":{\"6219\":1,\"6258\":1}}],[\"enumeration\",{\"1\":{\"6201\":1}}],[\"enumerate\",{\"1\":{\"5524\":1}}],[\"enum\",{\"1\":{\"1360\":1,\"2328\":1,\"2469\":1,\"3018\":1,\"3520\":1,\"3935\":1,\"4102\":1,\"4104\":1,\"4129\":1,\"4554\":1,\"4590\":1,\"4594\":1,\"5355\":1,\"5824\":1,\"5825\":1,\"6086\":2}}],[\"enterprise\",{\"1\":{\"6498\":1,\"7010\":1}}],[\"entered\",{\"1\":{\"346\":1}}],[\"entry<string\",{\"1\":{\"6258\":1}}],[\"entry是一个嵌套静态类\",{\"1\":{\"5666\":1}}],[\"entry\",{\"1\":{\"5666\":1,\"6201\":2}}],[\"entryset\",{\"1\":{\"3101\":1,\"3124\":1,\"6258\":1}}],[\"entries\",{\"1\":{\"4554\":1,\"6118\":9}}],[\"entities\",{\"1\":{\"2127\":1}}],[\"entity\",{\"0\":{\"307\":1},\"1\":{\"2895\":1}}],[\"enables\",{\"1\":{\"6083\":1}}],[\"enabled\",{\"1\":{\"329\":1}}],[\"enableall\",{\"1\":{\"49\":1}}],[\"enduml\",{\"1\":{\"5782\":1,\"5786\":1,\"5790\":1,\"5794\":1,\"5798\":1,\"5805\":1}}],[\"ending\",{\"1\":{\"384\":1}}],[\"end\",{\"1\":{\"268\":1,\"272\":1,\"313\":1,\"315\":3,\"318\":1,\"322\":3,\"326\":3,\"384\":1,\"1123\":1,\"1136\":1,\"1138\":1,\"6201\":1}}],[\"enhancer\",{\"1\":{\"1903\":7}}],[\"enhance\",{\"1\":{\"47\":1,\"49\":1}}],[\"mf\",{\"1\":{\"6212\":1,\"6215\":1}}],[\"mcellpublic\",{\"1\":{\"5883\":2}}],[\"mcryeasy\",{\"1\":{\"5882\":1,\"6137\":1}}],[\"müller\",{\"1\":{\"4197\":1}}],[\"mname\",{\"1\":{\"4163\":1}}],[\"mppserver应用中单独监控时区转换异常\",{\"1\":{\"3286\":1}}],[\"mppserver\",{\"1\":{\"3284\":2,\"3286\":1}}],[\"mpressure\",{\"1\":{\"1702\":1,\"1716\":1}}],[\"mm\",{\"1\":{\"3078\":3,\"3161\":1,\"3210\":1,\"3236\":2,\"3284\":1}}],[\"mhumidity\",{\"1\":{\"1702\":1,\"1716\":1}}],[\"mtemperature\",{\"1\":{\"1702\":1,\"1716\":1}}],[\"mvc\",{\"1\":{\"1570\":1,\"6942\":1}}],[\"mydriver\",{\"1\":{\"6232\":1,\"6233\":1}}],[\"mybusinessexception\",{\"1\":{\"4896\":2,\"4922\":2,\"4926\":2}}],[\"mybatis\",{\"0\":{\"1139\":1},\"1\":{\"1140\":1,\"3545\":1,\"6548\":1}}],[\"myexception\",{\"1\":{\"4757\":3,\"4760\":3,\"4781\":3}}],[\"mynotnull\",{\"1\":{\"4660\":4}}],[\"mynotempty\",{\"1\":{\"4660\":5}}],[\"mymethodannotation\",{\"1\":{\"4642\":1,\"4644\":3,\"4647\":3,\"4649\":3}}],[\"mymethoddoc\",{\"1\":{\"4607\":1}}],[\"mylambda<string\",{\"1\":{\"4053\":1}}],[\"myclass\",{\"1\":{\"4016\":1,\"4179\":1}}],[\"mycommand\",{\"1\":{\"745\":1}}],[\"mysql和postgresql的都被加载了\",{\"1\":{\"6195\":1}}],[\"mysql和postgresql都有不同的实现提供给用户\",{\"1\":{\"6141\":1}}],[\"mysql实现\",{\"0\":{\"6167\":1}}],[\"mysql并不是跳过offset行\",{\"1\":{\"3374\":1}}],[\"mysql在windows下不区分大小写\",{\"1\":{\"3352\":1}}],[\"mysql数据库\",{\"0\":{\"3349\":1},\"1\":{\"2982\":1}}],[\"mysql\",{\"1\":{\"628\":1,\"5516\":1,\"6164\":2,\"6168\":1,\"6172\":1,\"6176\":1,\"6193\":1}}],[\"m×n\",{\"1\":{\"586\":1}}],[\"m\",{\"1\":{\"586\":1,\"1570\":1,\"1636\":4,\"2144\":5,\"2149\":6,\"2152\":5,\"2866\":3,\"5273\":2,\"5282\":2,\"5581\":1,\"5582\":1,\"6013\":3,\"6015\":12,\"6101\":5,\"6111\":1}}],[\"m4\",{\"1\":{\"564\":2}}],[\"m3\",{\"1\":{\"564\":2}}],[\"m2\",{\"1\":{\"564\":2}}],[\"m1\",{\"1\":{\"564\":2,\"566\":2,\"6013\":1,\"6015\":2}}],[\"mojarra是jsf标准的一个开源实现\",{\"1\":{\"6285\":1}}],[\"move\",{\"1\":{\"5805\":3}}],[\"movebehavior\",{\"1\":{\"5786\":3,\"5805\":4}}],[\"monad\",{\"1\":{\"6413\":1}}],[\"monitor\",{\"1\":{\"3286\":2}}],[\"moniter\",{\"1\":{\"2888\":8}}],[\"money\",{\"1\":{\"2997\":2}}],[\"month\",{\"1\":{\"1313\":2,\"3087\":1}}],[\"mouse\",{\"1\":{\"2888\":8,\"5790\":2}}],[\"mockery\",{\"1\":{\"6962\":2}}],[\"mockito\",{\"0\":{\"4427\":1},\"1\":{\"6635\":1}}],[\"mock\",{\"1\":{\"2365\":2,\"2754\":2,\"4144\":1,\"4471\":1,\"4472\":1,\"4473\":4,\"4479\":2,\"6960\":1,\"6961\":1,\"6962\":1}}],[\"modify\",{\"1\":{\"2853\":1}}],[\"modifier\",{\"1\":{\"5382\":4,\"6086\":1}}],[\"modifiers\",{\"1\":{\"438\":1,\"5489\":1,\"6065\":3,\"6083\":1,\"6086\":2,\"6107\":2,\"6116\":2,\"6118\":3}}],[\"modifiersfield\",{\"1\":{\"438\":3}}],[\"modification\",{\"1\":{\"2127\":1}}],[\"modelversion>\",{\"1\":{\"4324\":1}}],[\"modeling\",{\"1\":{\"2808\":1}}],[\"model\",{\"1\":{\"1570\":1,\"4374\":3,\"4380\":4,\"6065\":1,\"6864\":1}}],[\"more\",{\"1\":{\"109\":1,\"267\":1,\"304\":1,\"357\":1,\"2001\":1,\"4368\":1,\"4374\":1,\"5761\":1,\"6109\":1,\"6808\":1}}],[\"music\",{\"1\":{\"5776\":1}}],[\"mustache\",{\"1\":{\"6621\":1}}],[\"must\",{\"1\":{\"271\":1,\"346\":1,\"5271\":1,\"6076\":2,\"6096\":2}}],[\"muellers\",{\"1\":{\"4197\":1}}],[\"mutableinstance2\",{\"1\":{\"4179\":1}}],[\"mutableinstance\",{\"1\":{\"4179\":1}}],[\"mutablevalues\",{\"1\":{\"4179\":1}}],[\"mutable\",{\"1\":{\"4179\":1}}],[\"mutableelements\",{\"1\":{\"4179\":1}}],[\"mutablecollection\",{\"1\":{\"4179\":1}}],[\"mu\",{\"1\":{\"3963\":1}}],[\"multitenant\",{\"1\":{\"6594\":1}}],[\"multidirectional\",{\"1\":{\"262\":1}}],[\"multi\",{\"0\":{\"261\":1},\"1\":{\"4019\":1,\"4022\":1}}],[\"multiple\",{\"1\":{\"249\":1,\"4244\":1,\"5559\":1}}],[\"much\",{\"1\":{\"255\":1}}],[\"mechanism\",{\"1\":{\"6201\":1}}],[\"mechanisms\",{\"1\":{\"6201\":1}}],[\"me\",{\"0\":{\"7017\":1},\"1\":{\"4693\":1,\"5055\":1,\"6270\":1}}],[\"mean\",{\"1\":{\"3548\":1}}],[\"means\",{\"1\":{\"255\":1,\"6201\":2}}],[\"members\",{\"1\":{\"5524\":1,\"5525\":1,\"6099\":6}}],[\"member\",{\"1\":{\"3936\":1,\"6011\":1,\"6065\":2,\"6071\":1,\"6090\":1,\"6099\":11}}],[\"memory\",{\"0\":{\"6993\":1},\"1\":{\"3547\":1,\"6065\":1,\"6789\":1,\"6994\":1}}],[\"mementopattern\",{\"1\":{\"1636\":1}}],[\"memento\",{\"1\":{\"1059\":1,\"1617\":1,\"1631\":1,\"1636\":11,\"1649\":2,\"1651\":8,\"1653\":8,\"2627\":1}}],[\"messagepack\",{\"1\":{\"6609\":1}}],[\"message来承载\",{\"1\":{\"3258\":1}}],[\"message\",{\"1\":{\"3227\":2,\"3257\":1,\"3278\":1,\"4343\":1,\"4345\":1,\"4347\":1,\"4349\":1,\"4351\":1,\"4353\":1,\"4355\":1,\"4357\":1,\"4903\":1,\"4922\":1,\"4926\":1}}],[\"menulist\",{\"1\":{\"3227\":1}}],[\"meyer\",{\"1\":{\"2127\":1}}],[\"metrics\",{\"1\":{\"6481\":1}}],[\"meta\",{\"1\":{\"6201\":2,\"6212\":1,\"6219\":1,\"6258\":1,\"6260\":1}}],[\"metaobject\",{\"1\":{\"1140\":1}}],[\"methodref\",{\"1\":{\"6118\":23}}],[\"methodfiltermap\",{\"1\":{\"6099\":2}}],[\"methodaccessorimpl\",{\"1\":{\"6111\":7,\"6114\":2,\"6118\":2}}],[\"methodaccessor\",{\"1\":{\"6107\":2,\"6108\":2,\"6109\":6,\"6116\":2,\"6118\":1}}],[\"methodaccessorgenerator\",{\"1\":{\"6086\":1,\"6109\":1,\"6111\":1,\"6114\":1}}],[\"methodanno\",{\"1\":{\"4647\":2}}],[\"method类及其用法\",{\"0\":{\"5994\":1}}],[\"method表示class对象所表示的类的成员方法\",{\"1\":{\"5846\":1}}],[\"methodname\",{\"1\":{\"4693\":2}}],[\"method和constructor\",{\"1\":{\"4624\":1}}],[\"methods1\",{\"1\":{\"6013\":1}}],[\"methods1=clazz\",{\"1\":{\"6013\":1}}],[\"methodsignature\",{\"1\":{\"4693\":4}}],[\"methodsorters\",{\"1\":{\"4419\":2}}],[\"methods\",{\"1\":{\"3179\":1,\"4647\":2,\"5530\":1,\"5550\":1,\"6013\":2,\"6096\":1,\"6099\":3,\"6101\":3,\"6111\":1,\"6114\":1,\"6118\":3}}],[\"methodproxy\",{\"1\":{\"1903\":3}}],[\"methodinterceptor\",{\"1\":{\"1903\":2}}],[\"method=updateconfigfile\",{\"1\":{\"1345\":1}}],[\"method=loadproperties\",{\"1\":{\"1345\":1}}],[\"method\",{\"0\":{\"1216\":1},\"1\":{\"1114\":2,\"1172\":1,\"1345\":4,\"1871\":3,\"1903\":6,\"2167\":1,\"2621\":1,\"2638\":1,\"3033\":1,\"3034\":1,\"3067\":3,\"3186\":2,\"3265\":1,\"3276\":1,\"3442\":2,\"3936\":1,\"4016\":2,\"4244\":1,\"4254\":1,\"4374\":3,\"4380\":4,\"4383\":1,\"4515\":1,\"4519\":1,\"4523\":1,\"4590\":1,\"4600\":1,\"4607\":1,\"4612\":1,\"4642\":1,\"4644\":8,\"4647\":8,\"4649\":11,\"4690\":1,\"4693\":4,\"4743\":1,\"4754\":1,\"4781\":2,\"4853\":1,\"4896\":1,\"4943\":2,\"4963\":5,\"4969\":5,\"4978\":5,\"5035\":1,\"5169\":5,\"5520\":2,\"5995\":1,\"6000\":1,\"6003\":1,\"6005\":1,\"6006\":1,\"6008\":1,\"6009\":1,\"6011\":1,\"6013\":9,\"6015\":1,\"6017\":5,\"6026\":1,\"6029\":1,\"6032\":1,\"6035\":1,\"6038\":1,\"6041\":1,\"6047\":1,\"6054\":4,\"6081\":3,\"6083\":1,\"6089\":1,\"6090\":5,\"6096\":3,\"6099\":3,\"6101\":4,\"6109\":10,\"6111\":15,\"6114\":8,\"6118\":4,\"6201\":1}}],[\"method3\",{\"1\":{\"1114\":2}}],[\"method2需要依赖method1的执行\",{\"1\":{\"3304\":1}}],[\"method2\",{\"1\":{\"1114\":2,\"2165\":1,\"6017\":2}}],[\"method1\",{\"1\":{\"1114\":2,\"2165\":1,\"6013\":2,\"6015\":1,\"6017\":3}}],[\"mediatorpattern\",{\"1\":{\"1586\":1}}],[\"mediator\",{\"1\":{\"1064\":1,\"1566\":1,\"1579\":1,\"1580\":1,\"1586\":11,\"1601\":2,\"1603\":24,\"1605\":6,\"2626\":1}}],[\"mermaidcli\",{\"1\":{\"391\":1}}],[\"mermaidtooltip\",{\"1\":{\"335\":1}}],[\"mermaid\",{\"0\":{\"94\":1},\"1\":{\"344\":2,\"382\":1,\"391\":2}}],[\"mihalcea\",{\"1\":{\"6740\":1}}],[\"mixin\",{\"1\":{\"6668\":1}}],[\"miscutils\",{\"1\":{\"6842\":1}}],[\"miscutil\",{\"1\":{\"6840\":1}}],[\"misc\",{\"1\":{\"5271\":1,\"6063\":4,\"6099\":1}}],[\"misusecatchexception\",{\"1\":{\"4972\":1}}],[\"missing\",{\"0\":{\"6892\":1},\"1\":{\"4545\":1,\"4554\":1,\"4569\":1,\"6768\":1}}],[\"milliseconds\",{\"1\":{\"4380\":1}}],[\"milk\",{\"1\":{\"897\":1,\"907\":1,\"912\":1,\"926\":2,\"928\":2,\"935\":1}}],[\"middle\",{\"1\":{\"271\":1}}],[\"min\",{\"1\":{\"5271\":1}}],[\"minutes\",{\"1\":{\"1603\":1}}],[\"minute\",{\"1\":{\"1313\":1}}],[\"minimum\",{\"0\":{\"265\":1}}],[\"mind\",{\"1\":{\"255\":1,\"5527\":1}}],[\"might\",{\"1\":{\"191\":1,\"350\":1,\"5382\":1,\"6081\":1,\"6083\":1}}],[\"mirror\",{\"1\":{\"191\":1}}],[\"msg\",{\"1\":{\"4760\":2,\"6258\":6,\"6840\":1}}],[\"ms\",{\"1\":{\"112\":1,\"3442\":1}}],[\"mdogdefault\",{\"1\":{\"5883\":2}}],[\"mdogprotected\",{\"1\":{\"5883\":2}}],[\"mdogprivate\",{\"1\":{\"5883\":2}}],[\"mdogpublic\",{\"1\":{\"5883\":3}}],[\"mdenhance\",{\"1\":{\"49\":1}}],[\"md\",{\"1\":{\"47\":1,\"49\":1,\"1586\":3,\"4704\":1,\"4993\":1,\"5247\":1,\"6138\":1}}],[\"magazine\",{\"1\":{\"6708\":1}}],[\"magicaccessorimpl\",{\"1\":{\"6118\":3}}],[\"mallet\",{\"1\":{\"6533\":1}}],[\"mahout\",{\"1\":{\"6487\":1}}],[\"ma\",{\"1\":{\"6107\":4,\"6112\":1}}],[\"maven默认使用central\",{\"1\":{\"6400\":1}}],[\"maven是一款声明式构建及依赖管理工具\",{\"1\":{\"6290\":1}}],[\"maven\",{\"0\":{\"6861\":1,\"6882\":1},\"1\":{\"4324\":5,\"6290\":1,\"6762\":1,\"6765\":2,\"6863\":3,\"6866\":2,\"6870\":1,\"6874\":1,\"6881\":2,\"6885\":1,\"6992\":1}}],[\"maven包引入\",{\"0\":{\"4323\":1}}],[\"maven坐标\",{\"1\":{\"3542\":1}}],[\"matchers\",{\"1\":{\"4368\":2}}],[\"match\",{\"1\":{\"3354\":1,\"6927\":1}}],[\"math\",{\"1\":{\"3051\":1,\"5271\":2}}],[\"matters\",{\"1\":{\"6118\":1}}],[\"matter\",{\"1\":{\"2\":1,\"6118\":1}}],[\"mania\",{\"1\":{\"6927\":1}}],[\"manifest\",{\"1\":{\"6212\":1}}],[\"manimalpublic\",{\"1\":{\"5883\":2}}],[\"manimalprotected\",{\"1\":{\"5883\":1}}],[\"manimalprivate\",{\"1\":{\"5883\":1}}],[\"manimaldefault\",{\"1\":{\"5883\":1}}],[\"management\",{\"0\":{\"6886\":1},\"1\":{\"6766\":1}}],[\"manager\",{\"1\":{\"5529\":1}}],[\"manager层与service同机部署\",{\"1\":{\"3418\":1}}],[\"manager层\",{\"1\":{\"3309\":1,\"3414\":1}}],[\"manage\",{\"1\":{\"4690\":1}}],[\"man\",{\"1\":{\"2960\":8,\"2962\":1,\"2964\":1,\"2966\":1,\"2968\":1,\"3195\":5,\"5761\":1}}],[\"many\",{\"1\":{\"246\":1,\"3444\":1}}],[\"machine\",{\"1\":{\"5528\":1,\"5825\":1}}],[\"machineerror\",{\"1\":{\"4717\":1}}],[\"macwx\",{\"1\":{\"4988\":1}}],[\"mac\",{\"1\":{\"2797\":1}}],[\"makes\",{\"1\":{\"6083\":1}}],[\"make\",{\"1\":{\"2677\":2,\"2679\":3,\"5523\":1,\"5525\":1,\"6109\":1}}],[\"makepriceevent\",{\"1\":{\"2465\":1,\"2467\":2,\"2471\":2}}],[\"making\",{\"1\":{\"255\":1,\"5524\":1}}],[\"martijn\",{\"1\":{\"6715\":1}}],[\"martin\",{\"1\":{\"2001\":1}}],[\"mario\",{\"1\":{\"6713\":1}}],[\"mark\",{\"1\":{\"3967\":1,\"6714\":1}}],[\"markdown\",{\"0\":{\"32\":1,\"35\":1,\"37\":1,\"41\":1},\"1\":{\"10\":1,\"33\":1,\"34\":1,\"36\":3,\"38\":1,\"42\":3,\"44\":1,\"45\":1,\"47\":1,\"51\":1,\"64\":1,\"111\":1,\"117\":1,\"119\":1,\"255\":1}}],[\"march等来指代相应月份来进行传参或比较\",{\"1\":{\"3087\":1}}],[\"maps和sets\",{\"1\":{\"6905\":1}}],[\"maps\",{\"1\":{\"6904\":1}}],[\"maple\",{\"1\":{\"6718\":1}}],[\"mapdb\",{\"1\":{\"6348\":1}}],[\"mapping\",{\"1\":{\"3545\":1}}],[\"map<integer\",{\"1\":{\"3095\":1}}],[\"map<string\",{\"1\":{\"3091\":1,\"3093\":1,\"3099\":1,\"3398\":1,\"4179\":1,\"4693\":1,\"6904\":2}}],[\"map<long\",{\"1\":{\"2409\":1}}],[\"map\",{\"1\":{\"1363\":2,\"1368\":1,\"1491\":4,\"2949\":1,\"3091\":3,\"3093\":1,\"3095\":1,\"3099\":1,\"3398\":3,\"4693\":2,\"5670\":1,\"6437\":1,\"6803\":1,\"6851\":1,\"6904\":2,\"6927\":1}}],[\"maximum\",{\"1\":{\"5271\":1}}],[\"maxage=\",{\"1\":{\"3234\":1}}],[\"maxage告诉服务器进行缓存\",{\"1\":{\"3234\":1}}],[\"max\",{\"1\":{\"428\":1,\"429\":1,\"2991\":2,\"3159\":3,\"3201\":1,\"4383\":1,\"5048\":1,\"5271\":3}}],[\"main\",{\"1\":{\"401\":1,\"406\":1,\"408\":1,\"435\":1,\"453\":1,\"522\":1,\"542\":1,\"566\":1,\"605\":1,\"626\":1,\"697\":1,\"713\":1,\"766\":1,\"783\":1,\"832\":1,\"834\":1,\"858\":1,\"894\":1,\"928\":1,\"1114\":1,\"1122\":1,\"1138\":1,\"1199\":1,\"1214\":1,\"1250\":1,\"1310\":1,\"1313\":1,\"1353\":1,\"1406\":1,\"1431\":1,\"1436\":1,\"1491\":1,\"1525\":1,\"1541\":1,\"1586\":1,\"1605\":1,\"1636\":1,\"1655\":1,\"1686\":1,\"1704\":1,\"1720\":1,\"1763\":1,\"1774\":1,\"1797\":1,\"1844\":1,\"1873\":1,\"1905\":1,\"1953\":1,\"1976\":1,\"2016\":1,\"2019\":1,\"2020\":1,\"2025\":1,\"2052\":1,\"2058\":1,\"2078\":1,\"2082\":1,\"2089\":1,\"2118\":1,\"2124\":1,\"2144\":1,\"2149\":1,\"2152\":1,\"2188\":1,\"2194\":1,\"2286\":1,\"2293\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1,\"2328\":1,\"2438\":1,\"2456\":1,\"2473\":1,\"2512\":1,\"2541\":1,\"2546\":1,\"2663\":1,\"2679\":1,\"2953\":1,\"2966\":1,\"3025\":1,\"3186\":1,\"4374\":1,\"4647\":1,\"4920\":2,\"4943\":1,\"4981\":1,\"5015\":1,\"5017\":1,\"5020\":1,\"5042\":1,\"5044\":1,\"5055\":1,\"5062\":1,\"5090\":1,\"5093\":1,\"5112\":1,\"5115\":1,\"5120\":1,\"5133\":1,\"5160\":1,\"5234\":1,\"5334\":1,\"5336\":1,\"5486\":1,\"5494\":1,\"5497\":1,\"5576\":1,\"5733\":1,\"5775\":1,\"5776\":1,\"5883\":1,\"5888\":1,\"5914\":1,\"5962\":1,\"6013\":1,\"6054\":1,\"6157\":1}}],[\"made\",{\"1\":{\"270\":1}}],[\"maybegetfoowidget\",{\"1\":{\"6829\":1}}],[\"maybe\",{\"1\":{\"4102\":1}}],[\"mayers\",{\"1\":{\"2597\":1}}],[\"may\",{\"1\":{\"270\":1,\"4095\":1,\"5271\":1,\"5523\":1,\"5529\":1,\"5530\":3,\"6065\":1,\"6201\":2}}],[\"主流的linux服务器默认所支持最大fd数量为\",{\"1\":{\"3444\":1}}],[\"主流操作系统的设计是将tcp\",{\"1\":{\"3444\":1}}],[\"主版本号\",{\"1\":{\"3427\":2}}],[\"主键冲突\",{\"1\":{\"3911\":1}}],[\"主键或者唯一索引\",{\"1\":{\"3375\":1}}],[\"主键索引名为pk\",{\"1\":{\"3355\":1}}],[\"主人要看电视时\",{\"1\":{\"1589\":1}}],[\"主板\",{\"1\":{\"661\":1}}],[\"主的目的是兼容性\",{\"1\":{\"487\":1}}],[\"主页\",{\"0\":{\"157\":1}}],[\"主题建模等\",{\"1\":{\"6533\":1}}],[\"主题\",{\"1\":{\"662\":1}}],[\"主题包含了一个自定义徽章章可以使用\",{\"1\":{\"121\":1}}],[\"主题扩展了更多\",{\"1\":{\"47\":1}}],[\"主题扩展\",{\"0\":{\"46\":1}}],[\"主要集中于发现你的代码中可能导致产生\",{\"1\":{\"6989\":1}}],[\"主要解决\",{\"1\":{\"6603\":1}}],[\"主要做了三件事\",{\"1\":{\"6066\":1}}],[\"主要有两种方式\",{\"1\":{\"5819\":1}}],[\"主要有三种\",{\"1\":{\"1813\":1}}],[\"主要原因有三点\",{\"1\":{\"4854\":1}}],[\"主要用于输出\",{\"1\":{\"5887\":1}}],[\"主要用于一些独立于用例之间的准备工作\",{\"1\":{\"4304\":1}}],[\"主要用于调用目标对象时\",{\"1\":{\"1923\":1}}],[\"主要目的是降低理解难度\",{\"1\":{\"2925\":1}}],[\"主要看\",{\"1\":{\"2193\":1}}],[\"主要阐述了有关继承的一些原则\",{\"1\":{\"2106\":1}}],[\"主要针对抽象和程序整体框架的构建\",{\"1\":{\"2041\":1}}],[\"主要使用在多线程编程中\",{\"1\":{\"1916\":1}}],[\"主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树\",{\"1\":{\"1472\":1}}],[\"主要包含解释方法\",{\"1\":{\"1468\":1}}],[\"主要是被框架的开发人员使用\",{\"1\":{\"6140\":1,\"6141\":1}}],[\"主要是先获取\",{\"1\":{\"6061\":1}}],[\"主要是对访问控制进行转发\",{\"1\":{\"3412\":1}}],[\"主要是实现抽象工厂中的多个抽象方法\",{\"1\":{\"1290\":1}}],[\"主要是实现抽象工厂中的抽象方法\",{\"1\":{\"1230\":1}}],[\"主要是定义了一个高层接口\",{\"1\":{\"1106\":1}}],[\"主要角色\",{\"1\":{\"1183\":1,\"1228\":1,\"1288\":1}}],[\"主要缺点\",{\"1\":{\"494\":1,\"595\":1,\"670\":1,\"753\":1,\"813\":1,\"882\":1,\"1102\":1,\"1178\":1,\"1223\":1,\"1286\":1,\"1380\":1,\"1461\":1,\"1513\":1,\"1575\":1,\"1625\":1,\"1673\":1,\"1745\":1,\"1818\":1,\"1938\":1,\"2266\":1,\"2425\":1,\"2500\":1,\"2645\":1,\"2939\":1}}],[\"主要优点\",{\"1\":{\"489\":1,\"590\":1,\"666\":1,\"747\":1,\"810\":1,\"878\":1,\"1098\":1,\"1174\":1,\"1219\":1,\"1378\":1,\"1458\":1,\"1507\":1,\"1571\":1,\"1621\":1,\"1670\":1,\"1742\":1,\"1814\":1,\"1932\":1,\"2158\":1,\"2262\":1,\"2421\":1,\"2494\":1,\"2641\":1,\"2934\":1}}],[\"主要分为三类\",{\"1\":{\"488\":1}}],[\"主要从\",{\"1\":{\"33\":1}}],[\"主要功能与配置演示\",{\"0\":{\"8\":1}}],[\"请把这些类放到它应该在的地方去并积极重构\",{\"1\":{\"6842\":1}}],[\"请把等号条件的列前置\",{\"1\":{\"3376\":1}}],[\"请考虑使用\",{\"1\":{\"6824\":1}}],[\"请考虑用注解处理器的方式从它们的接口自动生成\",{\"1\":{\"6814\":1}}],[\"请考虑构建器模式\",{\"1\":{\"6805\":1}}],[\"请尽情添加其他意见并提交\",{\"1\":{\"6744\":1}}],[\"请尽可能在应用端来解决类冲突和加载问题\",{\"1\":{\"3431\":1}}],[\"请确保将原始异常设置为原因\",{\"1\":{\"4925\":1}}],[\"请记住\",{\"1\":{\"4664\":1}}],[\"请参考这篇文章\",{\"1\":{\"4985\":1}}],[\"请参考java\",{\"1\":{\"4655\":1,\"4657\":1}}],[\"请参考mysql官方保留字\",{\"1\":{\"3354\":1}}],[\"请先仔细阅读和理解\",{\"1\":{\"4239\":1}}],[\"请先阅读\",{\"1\":{\"36\":1}}],[\"请见往下的第\",{\"1\":{\"4074\":1}}],[\"请见\",{\"1\":{\"4032\":1,\"4103\":1,\"4135\":1,\"4193\":1}}],[\"请稍后重试\",{\"1\":{\"3456\":1}}],[\"请稍等\",{\"1\":{\"2454\":1}}],[\"请及时修正\",{\"1\":{\"3307\":1}}],[\"请将该异常抛给它的调用者\",{\"1\":{\"3268\":1}}],[\"请注意利用索引的有序性\",{\"1\":{\"3372\":1}}],[\"请注意在双斜线之后有一个空格\",{\"1\":{\"3026\":1}}],[\"请注明标记人与标记时间\",{\"1\":{\"3222\":1}}],[\"请一并说明\",{\"1\":{\"3209\":1}}],[\"请勿超过\",{\"1\":{\"3194\":1}}],[\"请勿勾选use\",{\"1\":{\"3024\":1}}],[\"请设置为\",{\"1\":{\"3123\":1}}],[\"请放在init方法中\",{\"1\":{\"3061\":1}}],[\"请不要在创建表时就分库分表\",{\"1\":{\"3365\":1}}],[\"请不要在此场景打出error级别\",{\"1\":{\"3295\":1}}],[\"请不要修改serialversionuid字段\",{\"1\":{\"3060\":1}}],[\"请不要这样使用\",{\"1\":{\"103\":1}}],[\"请使用程序插入或者导入数据的方式来准备数据\",{\"1\":{\"3315\":1}}],[\"请使用\",{\"1\":{\"2669\":1}}],[\"请使用绝对链接\",{\"1\":{\"120\":1}}],[\"请下次再参加\",{\"1\":{\"2454\":3}}],[\"请假流程等\",{\"1\":{\"1927\":1}}],[\"请编写程序创建和\",{\"1\":{\"1756\":1}}],[\"请中介者转发\",{\"1\":{\"1586\":2}}],[\"请输入\",{\"1\":{\"1491\":1}}],[\"请输入e的值\",{\"1\":{\"1479\":1}}],[\"请输入d的值\",{\"1\":{\"1479\":1}}],[\"请输入c的值\",{\"1\":{\"1479\":1}}],[\"请输入b的值\",{\"1\":{\"1479\":1}}],[\"请输入a的值\",{\"1\":{\"1479\":1}}],[\"请输入表达式\",{\"1\":{\"1479\":1,\"1491\":1}}],[\"请求库\",{\"1\":{\"6541\":1}}],[\"请求的地址\",{\"1\":{\"4693\":1}}],[\"请求的处理可能涉及多个处理对象\",{\"1\":{\"1940\":1}}],[\"请求版本过\",{\"1\":{\"3773\":1,\"3775\":1}}],[\"请求版本不\",{\"1\":{\"3771\":1}}],[\"请求并发数超出限制\",{\"1\":{\"3723\":1}}],[\"请求次数超出限制\",{\"1\":{\"3721\":1}}],[\"请求\",{\"1\":{\"3700\":1,\"6541\":1}}],[\"请求批量处理总个数\",{\"1\":{\"3698\":1}}],[\"请求参数值超出允许\",{\"1\":{\"3686\":1}}],[\"请求必填参数为空\",{\"1\":{\"3676\":1}}],[\"请求资源不存在\",{\"1\":{\"3226\":1}}],[\"请求要求身份验证\",{\"1\":{\"3226\":1}}],[\"请求内容\",{\"1\":{\"3224\":2}}],[\"请求方法已经表达动作意义\",{\"1\":{\"3224\":1}}],[\"请求方法\",{\"1\":{\"3224\":2}}],[\"请求无法响应\",{\"1\":{\"2362\":1}}],[\"请求金额\",{\"1\":{\"1974\":1}}],[\"请求类型\",{\"1\":{\"1974\":1}}],[\"请求类\",{\"1\":{\"1973\":1,\"1974\":1}}],[\"请求编号\",{\"1\":{\"1972\":4}}],[\"请求会自动进行传递\",{\"1\":{\"1930\":1}}],[\"请求调用者需要与请求接收者解耦时\",{\"1\":{\"800\":1}}],[\"请求执行者\",{\"1\":{\"793\":1}}],[\"请求发起者\",{\"1\":{\"793\":1}}],[\"请求发送者与请求接收者消除彼此之间的耦合\",{\"1\":{\"742\":1}}],[\"请求者\",{\"1\":{\"762\":1}}],[\"请阅读\",{\"1\":{\"45\":1}}],[\"对我们程序员来说\",{\"1\":{\"6797\":1}}],[\"对运行中的应用程序信息提供了可视化界面\",{\"1\":{\"6567\":1}}],[\"对opengl\",{\"1\":{\"6422\":1}}],[\"对过去一段时间内的数据进行统计\",{\"1\":{\"6311\":1}}],[\"对源代码分析查找不良的编程习惯\",{\"1\":{\"6310\":1}}],[\"对源码中使用到的外观模式的角色类图\",{\"1\":{\"1142\":1}}],[\"对相应开发者的帮助会更大\",{\"1\":{\"6278\":1}}],[\"对带有指定参数的指定对象调用由此\",{\"1\":{\"6026\":1}}],[\"对有返回值得方法操作\",{\"1\":{\"6017\":1}}],[\"对有状态的对象\",{\"1\":{\"2418\":1}}],[\"对私有无参方法的操作\",{\"1\":{\"6017\":1}}],[\"对任何不是\",{\"1\":{\"5429\":1}}],[\"对称性\",{\"1\":{\"5421\":1,\"5654\":1}}],[\"对异常进行文档说明\",{\"0\":{\"4893\":1}}],[\"对异常的总结\",{\"1\":{\"4806\":1}}],[\"对数组进行遍历的标准模式并不会导致冗余的检查\",{\"1\":{\"4857\":1}}],[\"对自定义注解log作切点进行拦截\",{\"1\":{\"4691\":1}}],[\"对自己依赖的类\",{\"1\":{\"2157\":1}}],[\"对同样的功能代码\",{\"1\":{\"4448\":1}}],[\"对捕获的异常不做任何响应是很少正确的\",{\"1\":{\"4229\":1}}],[\"对齐\",{\"1\":{\"4058\":1}}],[\"对此并没有一个统一正确的标准\",{\"1\":{\"3998\":1}}],[\"对剩余的非\",{\"1\":{\"3954\":1}}],[\"对手册的页码\",{\"1\":{\"3504\":1}}],[\"对修改闭合\",{\"1\":{\"3466\":1}}],[\"对修改关闭\",{\"1\":{\"2127\":1,\"2147\":1,\"2228\":1,\"2235\":1,\"2550\":1}}],[\"对service层通用能力的下沉\",{\"1\":{\"3414\":1}}],[\"对第三方平台封装的层\",{\"1\":{\"3414\":1}}],[\"对多个dao的组合复用\",{\"1\":{\"3414\":1}}],[\"对多个资源\",{\"1\":{\"3166\":1}}],[\"对多表进行查询记录\",{\"1\":{\"3388\":1}}],[\"对全库进行更新\",{\"1\":{\"3333\":1}}],[\"对调用者来说\",{\"1\":{\"3275\":1}}],[\"对大段代码进行try\",{\"1\":{\"3267\":1}}],[\"对具体操作的定义\",{\"1\":{\"3224\":1}}],[\"对具体类而非接口的依赖和硬编码的行为都会降低代码的灵活性\",{\"1\":{\"2789\":1}}],[\"对子类的实现要求\",{\"1\":{\"3209\":1}}],[\"对某个对象引用的volatile字段进行原子更新的类名为atomicreferencefieldupdater\",{\"1\":{\"2999\":1}}],[\"对某个类只能存在一个对象实例\",{\"1\":{\"2259\":1}}],[\"对软件来说\",{\"1\":{\"2983\":1}}],[\"对软件测试的影响\",{\"1\":{\"2134\":1}}],[\"对规约做了适当扩展和解释\",{\"1\":{\"2982\":1}}],[\"对歌手进行测评\",{\"1\":{\"2955\":1}}],[\"对该类右键\",{\"1\":{\"2837\":1}}],[\"对整个代码的改动并不大\",{\"1\":{\"2702\":1}}],[\"对每个不同的实现都需要定义一个子类\",{\"1\":{\"2646\":1}}],[\"对银行工作人员进行评分等\",{\"1\":{\"2636\":1}}],[\"对原来的功能没有影响\",{\"1\":{\"2585\":1,\"2586\":1}}],[\"对请求做处理\",{\"1\":{\"2438\":1}}],[\"对这个新对象的所有方法调用\",{\"1\":{\"4478\":1}}],[\"对这种有状态的对象编程\",{\"1\":{\"2416\":1}}],[\"对这些简单对象与复合对象的处理\",{\"1\":{\"806\":1}}],[\"对使用方\",{\"1\":{\"2129\":1,\"2228\":1}}],[\"对提供方\",{\"1\":{\"2129\":1,\"2228\":1}}],[\"对扩展开放\",{\"1\":{\"2129\":1,\"2228\":1,\"2235\":1,\"2550\":1}}],[\"对类的局部改动\",{\"1\":{\"2523\":1}}],[\"对类来说的\",{\"1\":{\"2002\":1}}],[\"对类图的角色分析和说明\",{\"1\":{\"1547\":1}}],[\"对比较长的职责链\",{\"1\":{\"1940\":1}}],[\"对引用类型的属性\",{\"1\":{\"1795\":1}}],[\"对备忘录进行管理\",{\"1\":{\"1632\":1}}],[\"对终结符表达式的处理\",{\"1\":{\"1476\":1}}],[\"对分层结构系统构建时\",{\"1\":{\"1153\":1}}],[\"对外提供的开放接口\",{\"1\":{\"3205\":1}}],[\"对外提供一个包裹所有上传\",{\"1\":{\"2708\":1}}],[\"对外提供一个统一的接口用来访问子系统\",{\"1\":{\"991\":1}}],[\"对外除了提供的\",{\"1\":{\"2157\":1}}],[\"对外屏蔽了子系统的细节\",{\"1\":{\"1145\":1}}],[\"对客户屏蔽了子系统组件\",{\"1\":{\"1100\":1}}],[\"对客户端来说是透明的\",{\"1\":{\"823\":1}}],[\"对应用程序而言\",{\"1\":{\"6391\":1}}],[\"对应于do类名也是单数形式\",{\"1\":{\"3353\":1}}],[\"对应的代码如下\",{\"1\":{\"6189\":1}}],[\"对应的代码是\",{\"1\":{\"6186\":1}}],[\"对应的属性名称是deleted\",{\"1\":{\"2994\":1}}],[\"对应的类图\",{\"1\":{\"2854\":1}}],[\"对应的二进制如下\",{\"1\":{\"470\":1}}],[\"对应地\",{\"1\":{\"2408\":1}}],[\"对应不同的\",{\"1\":{\"789\":1}}],[\"对电灯的操作\",{\"1\":{\"783\":1}}],[\"对象本身不是不可变的\",{\"1\":{\"6835\":1}}],[\"对象不会意外地被重新赋值了\",{\"1\":{\"6835\":1}}],[\"对象不支持客户请求的方法\",{\"1\":{\"4890\":1}}],[\"对象表示的方法名称\",{\"1\":{\"6041\":1}}],[\"对象表示的底层方法\",{\"1\":{\"6026\":1}}],[\"对象表示的类或接口声明的所有方法\",{\"1\":{\"6005\":1}}],[\"对象表示的字段\",{\"1\":{\"5989\":1}}],[\"对象表示的字段的名称\",{\"1\":{\"5986\":1}}],[\"对象表示的字段设置为指定的新值\",{\"1\":{\"5971\":1}}],[\"对象表示的构造方法的类\",{\"1\":{\"5923\":1}}],[\"对象表示此\",{\"1\":{\"5940\":1}}],[\"对象所表示方法的正式返回类型的\",{\"1\":{\"6032\":1}}],[\"对象所表示字段的声明类型\",{\"1\":{\"5977\":1}}],[\"对象所表示的方法的正式返回类型\",{\"1\":{\"6029\":1}}],[\"对象所表示的方法的形参类型的\",{\"1\":{\"6038\":1}}],[\"对象所表示的方法的形参类型\",{\"1\":{\"5940\":1,\"6035\":1}}],[\"对象所表示的类或接口\",{\"1\":{\"6011\":1}}],[\"对象所表示的类或接口的指定公共成员方法\",{\"1\":{\"6008\":1}}],[\"对象所表示的类或接口的指定已声明方法\",{\"1\":{\"6002\":1}}],[\"对象所表示的类的一个新实例\",{\"1\":{\"5912\":1}}],[\"对象所表示的类的构造方法\",{\"1\":{\"5846\":1,\"5890\":1}}],[\"对象所表示构造方法的形参类型\",{\"1\":{\"5932\":1}}],[\"对象应该是final的\",{\"1\":{\"5631\":1}}],[\"对象引用在对象创建过程中不能泄露\",{\"1\":{\"5630\":1}}],[\"对象必须被正确的创建\",{\"1\":{\"5630\":1}}],[\"对象会占用更多的内存\",{\"1\":{\"5615\":1}}],[\"对象支持加法运算\",{\"1\":{\"5573\":1}}],[\"对象关联的方法\",{\"1\":{\"5520\":1}}],[\"对象关联的字段\",{\"1\":{\"5519\":1}}],[\"对象关系映射\",{\"1\":{\"3545\":1}}],[\"对象进行转型\",{\"1\":{\"5438\":1}}],[\"对象进行深拷贝要对整个对象\",{\"1\":{\"1786\":1}}],[\"对象已经被创建过了\",{\"1\":{\"5292\":1}}],[\"对象都没有创建\",{\"1\":{\"5211\":1}}],[\"对象检测到并发修改\",{\"1\":{\"4888\":1}}],[\"对象将多个测试用例组装成一个测试套件\",{\"1\":{\"4487\":1}}],[\"对象领域模型与底层数据之间的转换\",{\"1\":{\"3545\":1}}],[\"对象同时加锁时\",{\"1\":{\"3166\":1}}],[\"对象clone方法默认是浅拷贝\",{\"1\":{\"3075\":1}}],[\"对象结构包含很多类型的对象\",{\"1\":{\"2979\":1}}],[\"对象结构中的对象需要提供多种不同且不相关的操作\",{\"1\":{\"2978\":1}}],[\"对象结构相对稳定\",{\"1\":{\"2977\":1}}],[\"对象结构角色\",{\"1\":{\"2953\":1}}],[\"对象结构\",{\"1\":{\"2949\":1}}],[\"对象图\",{\"1\":{\"2812\":1}}],[\"对象了\",{\"1\":{\"2395\":1}}],[\"对象间\",{\"1\":{\"2197\":1}}],[\"对象间存在一对多关系\",{\"1\":{\"1732\":1}}],[\"对象序列化\",{\"1\":{\"1788\":1}}],[\"对象复制一份\",{\"1\":{\"1768\":1}}],[\"对象中\",{\"1\":{\"1603\":1}}],[\"对象中解耦出来\",{\"1\":{\"771\":1}}],[\"对象在应用启动的时候就事先创建好\",{\"1\":{\"1344\":1}}],[\"对象在真正被使用到的时候\",{\"1\":{\"1344\":1}}],[\"对象创建和对象生命周期管理\",{\"1\":{\"1331\":1}}],[\"对象生命周期的管理\",{\"1\":{\"1329\":1}}],[\"对象的状态是可变的\",{\"1\":{\"6806\":1}}],[\"对象的数组\",{\"1\":{\"6011\":1,\"6035\":1,\"6038\":1}}],[\"对象的一个数组\",{\"1\":{\"6005\":1}}],[\"对象的一个类\",{\"1\":{\"5824\":1}}],[\"对象的一个方法\",{\"1\":{\"4475\":1}}],[\"对象的加载\",{\"1\":{\"5516\":1}}],[\"对象的那一方以为现在连接的是其它主机\",{\"1\":{\"5295\":1}}],[\"对象的编程处理方式\",{\"1\":{\"3543\":1}}],[\"对象的代理对象\",{\"1\":{\"1903\":1}}],[\"对象的代码就不需要修改了\",{\"1\":{\"1206\":1}}],[\"对象的\",{\"1\":{\"1605\":1,\"5759\":1}}],[\"对象的hashmap\",{\"1\":{\"1605\":2}}],[\"对象的实例化推迟到子类\",{\"1\":{\"1227\":1}}],[\"对象的类\",{\"1\":{\"1208\":1}}],[\"对象的各个部件指定的接口\",{\"1\":{\"676\":1}}],[\"对象封装到一个类中\",{\"1\":{\"1206\":1}}],[\"对象使用到外观模式\",{\"1\":{\"1140\":1}}],[\"对象\",{\"1\":{\"1122\":1,\"1489\":1,\"1605\":1,\"1741\":1,\"2144\":1,\"2149\":1,\"2152\":1,\"2188\":1,\"2194\":1,\"2260\":1,\"2389\":2,\"2473\":1,\"2546\":2,\"2699\":1,\"2711\":1,\"2833\":2,\"3366\":1,\"4478\":2,\"5352\":1,\"5515\":2,\"5516\":1,\"5673\":1,\"5765\":1,\"5775\":1,\"5824\":2,\"5851\":1,\"5897\":1,\"5923\":1,\"5926\":1,\"5932\":1,\"5977\":1,\"5989\":1,\"6008\":1,\"6029\":1,\"6032\":1}}],[\"对象什么都不做\",{\"1\":{\"777\":1}}],[\"对象适配器\",{\"1\":{\"576\":1}}],[\"对象适配器和类适配器其实算是同一种思想\",{\"1\":{\"544\":1}}],[\"对象适配器模式注意事项和细节\",{\"0\":{\"543\":1}}],[\"对象适配器模式应用实例\",{\"0\":{\"533\":1}}],[\"对象适配器模式是适配器模式常用的一种\",{\"1\":{\"531\":1}}],[\"对象适配器模式介绍\",{\"0\":{\"528\":1}}],[\"对象适配器模式\",{\"0\":{\"527\":1},\"1\":{\"488\":1,\"542\":1}}],[\"对象操作\",{\"1\":{\"478\":1}}],[\"对于任意一个对象\",{\"1\":{\"5817\":1}}],[\"对于任意一个类\",{\"1\":{\"5817\":1}}],[\"对于任何含有\",{\"1\":{\"3952\":1}}],[\"对于数组\",{\"1\":{\"5652\":1}}],[\"对于数据库中表记录的查询和变更\",{\"1\":{\"3388\":1}}],[\"对于数据库相关的查询\",{\"1\":{\"3315\":1}}],[\"对于数据类型是引用数据类型的成员变量\",{\"1\":{\"1781\":1}}],[\"对于数据类型是基本数据类型的成员变量\",{\"1\":{\"1780\":1}}],[\"对于引用类型\",{\"1\":{\"5433\":1,\"5475\":1}}],[\"对于基本类型\",{\"1\":{\"5432\":1,\"5474\":1}}],[\"对于不同版本的jdk\",{\"1\":{\"5317\":1}}],[\"对于不可测的代码在适当的时机做必要的重构\",{\"1\":{\"3317\":1}}],[\"对于用到这些api的程序而言\",{\"1\":{\"4874\":1}}],[\"对于这些异常\",{\"1\":{\"4817\":1}}],[\"对于这些不会飞的鸟来说\",{\"1\":{\"2727\":1}}],[\"对于名为\",{\"1\":{\"4261\":1}}],[\"对于最后一个语句组\",{\"1\":{\"4119\":1}}],[\"对于同一段代码\",{\"1\":{\"4037\":1}}],[\"对于多行注释\",{\"1\":{\"4151\":1}}],[\"对于多个构造方法\",{\"1\":{\"4001\":1}}],[\"对于多例模式\",{\"1\":{\"2410\":1}}],[\"对于文件上传功能\",{\"1\":{\"3346\":1}}],[\"对于存在csrf漏洞的应用\",{\"1\":{\"3343\":1}}],[\"对于单元测试中单元的含义\",{\"1\":{\"4433\":1}}],[\"对于单元测试\",{\"1\":{\"3306\":1}}],[\"对于单例存在的其他问题\",{\"1\":{\"2382\":1}}],[\"对于trace\",{\"1\":{\"3288\":1}}],[\"对于当天日志\",{\"1\":{\"3284\":1}}],[\"对于调用端解决问题的帮助不会太多\",{\"1\":{\"3278\":1}}],[\"对于公司外的http\",{\"1\":{\"3278\":1}}],[\"对于非空语句块和块状结构\",{\"1\":{\"4009\":1}}],[\"对于非稳定代码的catch尽可能进行区分异常类型\",{\"1\":{\"3267\":1}}],[\"对于非setter\",{\"1\":{\"2996\":1}}],[\"对于暂时被注释掉\",{\"1\":{\"3247\":1}}],[\"对于垃圾代码或过时配置\",{\"1\":{\"3247\":1}}],[\"对于需要使用超大整数的场景\",{\"1\":{\"3229\":1}}],[\"对于注释的要求\",{\"1\":{\"3218\":1}}],[\"对于代码的理解至关重要\",{\"1\":{\"3200\":1}}],[\"对于代码来说\",{\"1\":{\"1418\":1}}],[\"对于session中获取的数据\",{\"1\":{\"3276\":1}}],[\"对于service和dao类\",{\"1\":{\"3004\":1}}],[\"对于sublist的所有操作最终会反映到原列表上\",{\"1\":{\"3100\":1}}],[\"对于integer\",{\"1\":{\"3046\":1}}],[\"对于继承结构比较复杂的代码\",{\"1\":{\"2782\":1}}],[\"对于一个大型复杂系统来说\",{\"1\":{\"2772\":1}}],[\"对于一些控制硬件级别的操作\",{\"1\":{\"2347\":1}}],[\"对于一些需要频繁创建销毁的对象\",{\"1\":{\"2337\":1}}],[\"对于会叫\",{\"1\":{\"2735\":1}}],[\"对于是否应该在项目中使用继承\",{\"1\":{\"2723\":1}}],[\"对于简单的程序开发\",{\"1\":{\"2592\":1}}],[\"对于可以切换状态的状态模式\",{\"1\":{\"2428\":1}}],[\"对于替代方案工厂模式\",{\"1\":{\"2384\":1}}],[\"对于被依赖的类不管多么复杂\",{\"1\":{\"2157\":1}}],[\"对于类似\",{\"1\":{\"4260\":1}}],[\"对于类\",{\"1\":{\"2037\":1,\"2053\":1}}],[\"对于硬盘\",{\"1\":{\"1417\":1}}],[\"对于新产品的创建\",{\"1\":{\"1221\":1}}],[\"对于增加新的产品\",{\"1\":{\"1163\":1}}],[\"对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统\",{\"1\":{\"640\":1}}],[\"对于系统的高层部分\",{\"1\":{\"634\":1}}],[\"对于\",{\"1\":{\"120\":1,\"2341\":1,\"4621\":1}}],[\"对\",{\"1\":{\"44\":1,\"630\":1,\"1871\":1,\"2129\":1,\"5796\":1,\"6891\":1,\"6896\":1}}],[\"为运行进行提供cli\",{\"1\":{\"6649\":1}}],[\"为web应用程序提供可移植软件测试框架\",{\"1\":{\"6639\":1}}],[\"为selenium提供精准的周边api\",{\"1\":{\"6638\":1}}],[\"为sql\",{\"1\":{\"6347\":1}}],[\"为rest\",{\"1\":{\"6637\":1}}],[\"为tdd或bdd提供支持\",{\"1\":{\"6635\":1}}],[\"为浏览器应用和restful\",{\"1\":{\"6601\":1}}],[\"为高吞吐量通信进行了优化\",{\"1\":{\"6593\":1}}],[\"为开发者提供功能强大\",{\"1\":{\"6552\":1}}],[\"为多种技术提供集成化支持\",{\"1\":{\"6444\":1}}],[\"为多个复杂的子系统提供一个一致的接口\",{\"1\":{\"2616\":1}}],[\"为多个子系统对外提供一个共同的接口\",{\"1\":{\"1109\":1}}],[\"为跨平台部署建立创作工具\",{\"1\":{\"6401\":1}}],[\"为jvm提供轻量级线程和角色\",{\"1\":{\"6389\":1}}],[\"为jdk提供更具特点的时间和日期api\",{\"1\":{\"6360\":1}}],[\"为flatzinc语言提供了一个接口\",{\"1\":{\"6323\":1}}],[\"为指定的服务使用指定的类加载器来创建一个serviceloader\",{\"1\":{\"6258\":1}}],[\"为获取匹配的构造方器\",{\"1\":{\"6072\":1}}],[\"为何\",{\"1\":{\"5182\":1}}],[\"为object\",{\"1\":{\"5112\":1}}],[\"为number\",{\"1\":{\"5112\":1}}],[\"为前缀\",{\"1\":{\"4485\":1}}],[\"为\",{\"1\":{\"4466\":1}}],[\"为变量赋值\",{\"1\":{\"4407\":1}}],[\"为测试类声明一个使用注解\",{\"1\":{\"4390\":1,\"4407\":1}}],[\"为测试类声明一个带有参数的公共构造函数\",{\"1\":{\"4389\":1,\"4407\":1}}],[\"为测试类声明几个变量\",{\"1\":{\"4388\":1}}],[\"为准备使用参数化测试的测试类指定特殊的运行器\",{\"1\":{\"4387\":1}}],[\"为避免应用二方库的依赖冲突问题\",{\"1\":{\"3439\":1}}],[\"为真时\",{\"1\":{\"3288\":1}}],[\"为频次发生的特点\",{\"1\":{\"3284\":1}}],[\"为binaryoperator\",{\"1\":{\"3092\":1}}],[\"为对象结构中的元素添加新的功能\",{\"1\":{\"2935\":1}}],[\"为对象添加新功能\",{\"1\":{\"996\":1}}],[\"为数据结构中的每个元素提供多种访问方式\",{\"1\":{\"2931\":1}}],[\"为目的\",{\"1\":{\"2774\":1}}],[\"为实现类定义抽象的接口\",{\"1\":{\"2709\":1}}],[\"为一个集合中的每个元素提供多种访问方式\",{\"1\":{\"2623\":1}}],[\"为一个对象提供一个替身\",{\"1\":{\"1811\":1}}],[\"为某对象提供一种代理以控制对该对象的访问\",{\"1\":{\"2618\":1}}],[\"为什么在重写\",{\"0\":{\"5643\":1}}],[\"为什么\",{\"0\":{\"5616\":1}}],[\"为什么不能扩展throwable\",{\"1\":{\"5218\":1}}],[\"为什么不能存别的类型呢\",{\"1\":{\"5117\":1}}],[\"为什么不推荐使用继承\",{\"0\":{\"2722\":1},\"1\":{\"2721\":1}}],[\"为什么要使用接口而不是直接使用具体类\",{\"0\":{\"5674\":1}}],[\"为什么要使用泛型方法呢\",{\"1\":{\"5032\":1}}],[\"为什么要用变量c来创建对象呢\",{\"1\":{\"5029\":1}}],[\"为什么要写单元测试\",{\"0\":{\"4434\":1}}],[\"为什么会这样呢\",{\"1\":{\"5162\":1}}],[\"为什么会引入泛型\",{\"0\":{\"4996\":1}}],[\"为什么会耗时\",{\"0\":{\"4979\":1}}],[\"为什么会有这样的争议\",{\"1\":{\"2723\":1}}],[\"为什么说是语言呢\",{\"1\":{\"2819\":1}}],[\"为什么这么说呢\",{\"1\":{\"2352\":1}}],[\"为什么注释中的代码会被执行\",{\"1\":{\"404\":1}}],[\"为所有引用数据类型的成员变量申请存储空间\",{\"1\":{\"1786\":1}}],[\"为遍历不同的聚合结构提供一个统一的接口\",{\"1\":{\"1512\":1}}],[\"为具体享元规范需要实现的公共接口\",{\"1\":{\"1393\":1}}],[\"为具体构件角色增加额外的功能addedfunction\",{\"1\":{\"894\":1}}],[\"为了更好的使用\",{\"1\":{\"6744\":1}}],[\"为了更方便地进行单元测试\",{\"1\":{\"3320\":1}}],[\"为了产生class引用\",{\"1\":{\"5861\":1}}],[\"为了避免这种情况\",{\"1\":{\"5664\":1}}],[\"为了避免请求发送者与多个请求处理者耦合在一起\",{\"1\":{\"1929\":1}}],[\"为了兼容\",{\"1\":{\"5568\":1}}],[\"为了满足里式替换原则\",{\"1\":{\"5407\":1}}],[\"为了满足这条原则\",{\"1\":{\"2715\":1}}],[\"为了满足这样一个需求的变化\",{\"1\":{\"2701\":1}}],[\"为了获得最大限度的灵活性\",{\"1\":{\"5046\":1}}],[\"为了解决泛型中隐含的转换问题\",{\"1\":{\"5037\":1}}],[\"为了解决这个问题\",{\"1\":{\"2362\":1}}],[\"为了和同事更好的合作\",{\"1\":{\"4845\":1}}],[\"为了验证应用了这三种策略的注解类有何区别\",{\"1\":{\"4595\":1}}],[\"为了提高代码的可预测性\",{\"1\":{\"4195\":1}}],[\"为了遵守这条严格的要求\",{\"1\":{\"4029\":1}}],[\"为了不受外界环境影响\",{\"1\":{\"3305\":1}}],[\"为了保护用户隐私\",{\"1\":{\"3297\":1}}],[\"为了保证类型安全\",{\"1\":{\"5074\":1}}],[\"为了保证单元测试稳定可靠且便于维护\",{\"1\":{\"3304\":1}}],[\"为了保证任何时刻\",{\"1\":{\"2404\":1}}],[\"为了保证全局唯一\",{\"1\":{\"2378\":1}}],[\"为了达到代码自解释的目标\",{\"1\":{\"2999\":1}}],[\"为了让重构能小步快跑\",{\"1\":{\"2765\":1}}],[\"为了支持多态\",{\"1\":{\"2747\":1}}],[\"为了代码复用\",{\"1\":{\"2698\":1}}],[\"为了实现这样的目的\",{\"1\":{\"2362\":1}}],[\"为了实现深克隆\",{\"1\":{\"1748\":1}}],[\"为了应对这个需求变化\",{\"1\":{\"2354\":1}}],[\"为了交互对象之间的松耦合设计而努力\",{\"1\":{\"2213\":1}}],[\"为了节约内存\",{\"1\":{\"1660\":1}}],[\"为了使对象可以共享\",{\"1\":{\"1381\":1}}],[\"为了简化代码实现\",{\"1\":{\"1349\":1}}],[\"为了方便\",{\"1\":{\"1301\":1,\"1303\":1,\"1305\":1,\"1307\":1}}],[\"为了丰富文档写作\",{\"1\":{\"44\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"985\":1}}],[\"为其提供额外的功能\",{\"1\":{\"885\":1}}],[\"为抽象建造者\",{\"1\":{\"718\":1}}],[\"为每个具体元素类对应一个访问操作\",{\"1\":{\"2945\":1}}],[\"为每个\",{\"1\":{\"38\":1}}],[\"扩展方法\",{\"1\":{\"5672\":1}}],[\"扩展名组成\",{\"1\":{\"3943\":1}}],[\"扩展说明\",{\"1\":{\"3229\":1}}],[\"扩展说一下pecs\",{\"1\":{\"3111\":1}}],[\"扩展可变部分\",{\"1\":{\"2642\":1}}],[\"扩展困难\",{\"1\":{\"2267\":1}}],[\"扩展一个类的功能会使用继承方式来实现\",{\"1\":{\"885\":1}}],[\"扩展性\",{\"0\":{\"2795\":1},\"1\":{\"2382\":1}}],[\"扩展性都不理想\",{\"1\":{\"1595\":1}}],[\"扩展性良好\",{\"1\":{\"749\":1}}],[\"扩展性好\",{\"1\":{\"668\":1,\"1459\":1,\"2935\":1}}],[\"扩展性问题\",{\"1\":{\"613\":1}}],[\"扩展抽象化角色\",{\"1\":{\"605\":1}}],[\"扩展抽象化\",{\"1\":{\"600\":1,\"605\":1}}],[\"扩展能力强\",{\"1\":{\"591\":1}}],[\"扩展\",{\"0\":{\"41\":1,\"43\":1},\"1\":{\"45\":1,\"3341\":1}}],[\"中内存泄露也时有发生\",{\"1\":{\"6994\":1}}],[\"中内存对象的释放由\",{\"1\":{\"2383\":1}}],[\"中用类型安全的方式编写\",{\"1\":{\"6950\":1}}],[\"中用过像\",{\"1\":{\"6944\":1}}],[\"中糟糕的样板代码\",{\"1\":{\"6932\":1}}],[\"中但缺失的一些特性\",{\"1\":{\"6917\":1}}],[\"中排除对\",{\"1\":{\"6876\":1}}],[\"中为了开发可测试软件\",{\"1\":{\"6820\":1}}],[\"中限制一个类只能继承一个类\",{\"1\":{\"5677\":1}}],[\"中你可以在接口声明静态方法和默认普通方法\",{\"1\":{\"5675\":1}}],[\"中有\",{\"1\":{\"5670\":1}}],[\"中有三个访问权限修饰符\",{\"1\":{\"5359\":1}}],[\"中会有冲突\",{\"1\":{\"5636\":1}}],[\"中怎么创建一个不可变对象\",{\"0\":{\"5624\":1}}],[\"中怎样将\",{\"0\":{\"5596\":1}}],[\"中应该使用什么数据类型来代表价格\",{\"0\":{\"5592\":1}}],[\"中取得引用\",{\"1\":{\"5292\":1}}],[\"中取出返回\",{\"1\":{\"1363\":1}}],[\"中是不能创建一个确切的泛型类型的数组的\",{\"1\":{\"5201\":1}}],[\"中处理异常并不是一个简单的事情\",{\"1\":{\"4843\":1}}],[\"中抛出一个异常\",{\"1\":{\"4756\":1}}],[\"中执行的命令\",{\"1\":{\"4033\":1}}],[\"中很长的方法引用\",{\"1\":{\"4031\":1}}],[\"中很重要的一个概念\",{\"1\":{\"40\":1}}],[\"中文描述\",{\"1\":{\"3554\":1}}],[\"中国大陆许可协议\",{\"1\":{\"4458\":1}}],[\"中国大陆个人手机号码显示\",{\"1\":{\"3332\":1}}],[\"中国顶级大学\",{\"1\":{\"858\":1}}],[\"中方法\",{\"1\":{\"2962\":1}}],[\"中间没有其它成员\",{\"1\":{\"4001\":1}}],[\"中间件服务出错\",{\"1\":{\"3843\":1}}],[\"中间件通用处理\",{\"1\":{\"3414\":1}}],[\"中间件等\",{\"1\":{\"3305\":1}}],[\"中间件错误是二级\",{\"1\":{\"3260\":1}}],[\"中间的感叹号\",{\"1\":{\"3242\":1}}],[\"中间的部分标识类的属性\",{\"1\":{\"2841\":1}}],[\"中间层次的优点在于模式提供的复用方式要比框架的风险小\",{\"1\":{\"2794\":1}}],[\"中间层的引入明显地简化了依赖关系\",{\"1\":{\"2764\":1}}],[\"中间层\",{\"1\":{\"2763\":1}}],[\"中间层等解耦代码\",{\"0\":{\"2750\":1}}],[\"中间构件\",{\"1\":{\"820\":1}}],[\"中定义的\",{\"1\":{\"2705\":1}}],[\"中模板文件等\",{\"1\":{\"2637\":1}}],[\"中奖机会\",{\"1\":{\"2454\":1}}],[\"中奖概率是\",{\"1\":{\"2441\":1}}],[\"中由程序员自己负责\",{\"1\":{\"2383\":1}}],[\"中只存在单一实例\",{\"1\":{\"2341\":1}}],[\"中添加的枚举来实现单例模式\",{\"1\":{\"2330\":1}}],[\"中提出\",{\"1\":{\"2127\":1}}],[\"中出现的方法\",{\"1\":{\"2056\":1}}],[\"中就存在属性的延迟加载和关联表的延时加载\",{\"1\":{\"1924\":1}}],[\"中生成代理对象的\",{\"0\":{\"1853\":1}}],[\"中也实现\",{\"1\":{\"1836\":1}}],[\"中原型\",{\"1\":{\"1776\":1}}],[\"中介者对象本身变得过于复杂\",{\"1\":{\"1610\":1}}],[\"中介者承担了较多的责任\",{\"1\":{\"1609\":1}}],[\"中介者在这个方法\",{\"1\":{\"1601\":1}}],[\"中介者抽象类\",{\"1\":{\"1601\":1}}],[\"中介者类\",{\"1\":{\"1600\":1}}],[\"中介者就会越臃肿\",{\"1\":{\"1576\":1}}],[\"中介者\",{\"1\":{\"1569\":1,\"1570\":1}}],[\"中介者使各个对象不需要显式地相互引用\",{\"1\":{\"1566\":1}}],[\"中介者模式减少类间依赖\",{\"1\":{\"1608\":1}}],[\"中介者模式的应用场景\",{\"0\":{\"1611\":1}}],[\"中介者模式的注意事项和细节\",{\"0\":{\"1606\":1}}],[\"中介者模式的结构图如下所示\",{\"1\":{\"1583\":1}}],[\"中介者模式的结构与实现\",{\"0\":{\"1577\":1}}],[\"中介者模式解决智能家庭项目\",{\"0\":{\"1596\":1}}],[\"中介者模式包含以下主要角色\",{\"1\":{\"1578\":1}}],[\"中介者模式将原本多个对象直接的相互依赖变成了中介者和多个同事类的依赖关系\",{\"1\":{\"1576\":1}}],[\"中介者模式属于行为型模式\",{\"1\":{\"1567\":1}}],[\"中介者模式基本介绍\",{\"0\":{\"1565\":1}}],[\"中介者模式\",{\"1\":{\"1064\":1,\"1566\":1,\"1570\":1,\"1595\":1,\"2626\":1}}],[\"中介对象来封装一系列的对象交互\",{\"1\":{\"1566\":1}}],[\"中还有没有下一个元素\",{\"1\":{\"1537\":1}}],[\"中山大学\",{\"1\":{\"1525\":1}}],[\"中可以用\",{\"1\":{\"1500\":1}}],[\"中加载\",{\"1\":{\"1357\":1}}],[\"中最简单实用的模式\",{\"1\":{\"1170\":1}}],[\"中\",{\"0\":{\"5604\":1,\"5641\":1,\"5667\":1,\"5676\":1},\"1\":{\"854\":1,\"1122\":1,\"1363\":1,\"1368\":1,\"1433\":1,\"1436\":1,\"1709\":1,\"1768\":1,\"2065\":1,\"2191\":1,\"2334\":1,\"2700\":1,\"2705\":1,\"2822\":1,\"2825\":1,\"2962\":1,\"3188\":1,\"3200\":1,\"3937\":1,\"4848\":1,\"5270\":1,\"5310\":1,\"5312\":1,\"5444\":1,\"5516\":1,\"5599\":1,\"5672\":1,\"5677\":1,\"5890\":1,\"6242\":1,\"6247\":1,\"6821\":1,\"6964\":2}}],[\"中都会暴露出来\",{\"1\":{\"525\":1}}],[\"中使用随机数字吗\",{\"0\":{\"5639\":1}}],[\"中使用字符串的\",{\"1\":{\"5619\":1}}],[\"中使用字符串\",{\"1\":{\"5619\":1}}],[\"中使用\",{\"0\":{\"5618\":1},\"1\":{\"51\":1,\"64\":1,\"5780\":1,\"5784\":1}}],[\"中的配置文件\",{\"1\":{\"6144\":1}}],[\"中的配置对象\",{\"1\":{\"2348\":1}}],[\"中的三个新特性\",{\"0\":{\"5669\":1}}],[\"中的编译期常量是什么\",{\"0\":{\"5663\":1}}],[\"中的构造器链\",{\"1\":{\"5621\":1}}],[\"中的构造器链是什么\",{\"0\":{\"5620\":1}}],[\"中的原始异常\",{\"1\":{\"4925\":1}}],[\"中的很长的\",{\"1\":{\"4031\":1}}],[\"中的api\",{\"1\":{\"3280\":2}}],[\"中的商品\",{\"1\":{\"2929\":1}}],[\"中的某些方法来完成一些职责\",{\"1\":{\"2850\":1}}],[\"中的类图有以下几种关系\",{\"1\":{\"2848\":1}}],[\"中的每个容器都存在多种布局供用户选择\",{\"1\":{\"2554\":1}}],[\"中的容器布局管理就是一个典型的实例\",{\"1\":{\"2554\":1}}],[\"中的继承性的思考和说明\",{\"0\":{\"2097\":1}}],[\"中的后退键\",{\"1\":{\"1620\":1}}],[\"中的反射语法\",{\"1\":{\"1364\":1}}],[\"中的代码会不会线性膨胀\",{\"1\":{\"1341\":1}}],[\"中的代码作死小技巧\",{\"1\":{\"393\":1}}],[\"中的元素\",{\"1\":{\"829\":1}}],[\"中的属性动画\",{\"1\":{\"552\":1}}],[\"中的\",{\"0\":{\"5616\":1},\"1\":{\"45\":1,\"568\":1,\"1140\":1,\"1312\":1,\"1539\":1,\"2366\":1,\"2693\":1,\"2712\":1,\"4794\":1,\"5617\":1,\"6552\":1}}],[\"中设置一个最大节点数量\",{\"1\":{\"1981\":1}}],[\"中设置页面信息\",{\"1\":{\"111\":1}}],[\"中设置\",{\"1\":{\"2\":1}}],[\"是我用过的最好用的解决内存泄露问题的工具\",{\"1\":{\"6994\":1}}],[\"是我用过的最简单的时间处理库\",{\"1\":{\"6929\":1}}],[\"是标准的\",{\"1\":{\"6961\":1}}],[\"是传统的实现方式\",{\"1\":{\"6941\":1}}],[\"是谷歌优秀的对\",{\"1\":{\"6900\":1}}],[\"是很典型的选择\",{\"1\":{\"6888\":1}}],[\"是主观的\",{\"1\":{\"6744\":1}}],[\"是开源的\",{\"1\":{\"6505\":1}}],[\"是安卓开发者好的选择\",{\"1\":{\"6443\":1}}],[\"是最快速的消息格式之一\",{\"1\":{\"6354\":1}}],[\"是最终要引用的对象\",{\"1\":{\"1829\":1}}],[\"是spi思想的一种体现\",{\"1\":{\"6216\":1}}],[\"是sql92定义的标准统计行数的语法\",{\"1\":{\"3380\":1}}],[\"是常用的日志库门面\",{\"1\":{\"6197\":1}}],[\"是常用的设计模式\",{\"1\":{\"1504\":1}}],[\"是jdk内置的一种\",{\"1\":{\"6140\":1,\"6141\":1}}],[\"是为了性能考虑\",{\"1\":{\"6120\":1}}],[\"是为了方便设计者进行类型检查\",{\"1\":{\"4659\":1}}],[\"是生成具体类的方法\",{\"1\":{\"6115\":1}}],[\"是个\",{\"1\":{\"6114\":1}}],[\"是个接口\",{\"1\":{\"6108\":1}}],[\"是个匿名内部类\",{\"1\":{\"788\":1}}],[\"是实现\",{\"1\":{\"5877\":1}}],[\"是实现聚合接口\",{\"1\":{\"1550\":1}}],[\"是immutable的\",{\"1\":{\"5688\":1}}],[\"是is\",{\"1\":{\"2915\":1}}],[\"是进行逻辑比较\",{\"1\":{\"5646\":1}}],[\"是比较两个对象的引用\",{\"1\":{\"5646\":1}}],[\"是方法\",{\"1\":{\"5644\":1}}],[\"是方法接收的参数类型\",{\"1\":{\"2861\":1}}],[\"是的\",{\"1\":{\"5599\":1,\"5634\":1}}],[\"是保留字\",{\"1\":{\"5574\":1}}],[\"是纯粹的面向对象语言\",{\"1\":{\"5568\":1}}],[\"是程序运行时错误\",{\"1\":{\"5535\":1}}],[\"是程序员的基本修养\",{\"1\":{\"3276\":1}}],[\"是虚拟机规范中是方法区的一部分\",{\"1\":{\"5315\":1}}],[\"是通过\",{\"1\":{\"5310\":1,\"6108\":1}}],[\"是通过对测试类和测试方法的命名来确定是否是测试\",{\"1\":{\"4293\":1}}],[\"是因为\",{\"1\":{\"5354\":1}}],[\"是因为java基础类型的自动装箱拆箱操作\",{\"1\":{\"5184\":1}}],[\"是因为从理论上来讲\",{\"1\":{\"2356\":1}}],[\"是同时存在的\",{\"1\":{\"5180\":1}}],[\"是会在编译之前检查的\",{\"1\":{\"5121\":1}}],[\"是应该允许任意引用类型添加的\",{\"1\":{\"5121\":1}}],[\"是在调用方法的时候指明泛型的具体类型\",{\"1\":{\"5022\":1}}],[\"是在现有类的基础上包装了一个对象\",{\"1\":{\"4479\":1}}],[\"是建立一个普通object耗时的约20倍\",{\"1\":{\"4984\":1}}],[\"是所有异常和错误的超类\",{\"1\":{\"4905\":1}}],[\"是所有的具体享元类的基类\",{\"1\":{\"1393\":1}}],[\"是发一手牌的纸牌张数\",{\"1\":{\"4892\":1}}],[\"是runtimeexception以外的异常\",{\"1\":{\"4725\":1}}],[\"是throwable子类的实例\",{\"1\":{\"4708\":1}}],[\"是无中生有地生出一个完全虚拟的对象\",{\"1\":{\"4479\":1}}],[\"是什么意思\",{\"1\":{\"4261\":1}}],[\"是可变的\",{\"1\":{\"5295\":1}}],[\"是可选的\",{\"1\":{\"4260\":1}}],[\"是可以解决变量同步问题\",{\"1\":{\"3180\":1}}],[\"是名词短语或者动词短语\",{\"1\":{\"4254\":1}}],[\"是非法的\",{\"1\":{\"4117\":1}}],[\"是非享元角色\",{\"1\":{\"1399\":1}}],[\"是合法的\",{\"1\":{\"4117\":1}}],[\"是越少越好的\",{\"1\":{\"4054\":1}}],[\"是源文件中唯一允许出现的空格字符\",{\"1\":{\"3948\":1}}],[\"是用来判断两个对象是否等价\",{\"1\":{\"5442\":1}}],[\"是用来唯一标识jar包\",{\"1\":{\"3542\":1}}],[\"是用来显示系统中的类\",{\"1\":{\"2831\":1}}],[\"是必须的\",{\"1\":{\"3395\":1}}],[\"是编号\",{\"1\":{\"3263\":1}}],[\"是编程中\",{\"1\":{\"2128\":1}}],[\"是阿里巴巴和开课吧技术团队的集体智慧结晶和经验总结\",{\"1\":{\"2982\":1}}],[\"是行为类模式中最复杂的一种模式\",{\"1\":{\"2931\":1}}],[\"是父类与子类之间的关系\",{\"1\":{\"2893\":1}}],[\"是组合的弱引用\",{\"1\":{\"2890\":1}}],[\"是组合中的分支节点对象\",{\"1\":{\"820\":1}}],[\"是组合中的叶节点对象\",{\"1\":{\"819\":1}}],[\"是整体和部分之间的关系\",{\"1\":{\"2872\":1}}],[\"是整个算法中的一个步骤\",{\"1\":{\"2654\":1}}],[\"是强关联关系\",{\"1\":{\"2872\":1}}],[\"是临时性的关联\",{\"1\":{\"2850\":1}}],[\"是大家比较推崇的一种标准而已\",{\"1\":{\"2820\":1}}],[\"是功能提供者提供给使用者的一个\",{\"1\":{\"2694\":1}}],[\"是经典的书\",{\"1\":{\"2571\":1}}],[\"是变化\",{\"1\":{\"2452\":1}}],[\"是线程安全的\",{\"1\":{\"5306\":1}}],[\"是线程\",{\"1\":{\"2396\":1}}],[\"是以局部变量方式出现在\",{\"1\":{\"2188\":1}}],[\"是以怎样的方式存放\",{\"1\":{\"1537\":1}}],[\"是以怎样的形式给到\",{\"1\":{\"574\":1}}],[\"是求减法\",{\"1\":{\"2124\":1}}],[\"是利用\",{\"1\":{\"1851\":1}}],[\"是代理对象所代表的真实对象\",{\"1\":{\"1829\":1}}],[\"是引用类型\",{\"1\":{\"1798\":1}}],[\"是对所有实现类都有价值的默认实现\",{\"1\":{\"3003\":1}}],[\"是对类的封装性\",{\"1\":{\"2587\":1}}],[\"是对软件设计中\",{\"1\":{\"2574\":1}}],[\"是对实现抽象化的具体步骤的规范\",{\"1\":{\"2106\":1}}],[\"是对开闭原则的补充\",{\"1\":{\"2106\":1}}],[\"是对象\",{\"1\":{\"1772\":1,\"2396\":1}}],[\"是对简单工厂模式的进一步抽象化\",{\"1\":{\"1218\":1}}],[\"是类型\",{\"1\":{\"2104\":1}}],[\"是类\",{\"1\":{\"1726\":1,\"1728\":1}}],[\"是由\",{\"1\":{\"1702\":1,\"1716\":2}}],[\"是残疾人还是正常人等信息\",{\"1\":{\"1503\":1}}],[\"是让其子类来实现\",{\"1\":{\"1487\":1}}],[\"是其中的一个句子\",{\"1\":{\"1456\":1}}],[\"是语言集中的元素\",{\"1\":{\"1456\":1}}],[\"是享元工厂角色\",{\"1\":{\"1402\":1}}],[\"是具体享元角色\",{\"1\":{\"1401\":1}}],[\"是具体命令对象业务的真正实现者\",{\"1\":{\"761\":1}}],[\"是不一样的\",{\"1\":{\"5316\":1}}],[\"是不可变的\",{\"0\":{\"5616\":1},\"1\":{\"5292\":1}}],[\"是不可以共享的外部状态\",{\"1\":{\"1395\":1}}],[\"是不是任何代码都要只依赖接口\",{\"1\":{\"2715\":1}}],[\"是不是没有人会信\",{\"1\":{\"434\":1}}],[\"是如何设计和实现的\",{\"1\":{\"1362\":1}}],[\"是如何实现的\",{\"1\":{\"793\":1}}],[\"是接口的实现类\",{\"1\":{\"1355\":1}}],[\"是接口\",{\"1\":{\"1355\":1}}],[\"是工厂方法模式的升级版本\",{\"1\":{\"1278\":1}}],[\"是工厂模式的一种\",{\"1\":{\"1170\":1}}],[\"是简单工厂模式的创建目标\",{\"1\":{\"1186\":1}}],[\"是简单工厂模式的核心\",{\"1\":{\"1184\":1}}],[\"是简单工厂创建的所有对象的父类\",{\"1\":{\"1185\":1}}],[\"是电视机的开和关的操作\",{\"1\":{\"783\":1}}],[\"是电灯的开和关的操作\",{\"1\":{\"783\":1}}],[\"是请求的发送者\",{\"1\":{\"762\":1}}],[\"是抽象同事类的实现者\",{\"1\":{\"1582\":1}}],[\"是抽象表达式的子类\",{\"1\":{\"1469\":1}}],[\"是抽象享元角色\",{\"1\":{\"1400\":1}}],[\"是抽象类\",{\"1\":{\"932\":1}}],[\"是抽象命令类的具体实现类\",{\"1\":{\"760\":1}}],[\"是抽象化角色的子类\",{\"1\":{\"600\":1}}],[\"是命令\",{\"1\":{\"745\":1}}],[\"是被调用者\",{\"1\":{\"745\":1}}],[\"是调用者\",{\"1\":{\"745\":1}}],[\"是服务于人类社会的\",{\"1\":{\"647\":1}}],[\"是一笔很大的开销\",{\"1\":{\"5745\":1}}],[\"是一条比较抽象\",{\"1\":{\"2693\":1}}],[\"是一样的\",{\"1\":{\"2295\":1}}],[\"是一个更好的解决方案\",{\"1\":{\"6949\":1}}],[\"是一个很有意思的库\",{\"1\":{\"6932\":1}}],[\"是一个全新的飞跃\",{\"1\":{\"6925\":1}}],[\"是一个全文检索引擎的架构\",{\"1\":{\"6595\":1}}],[\"是一个函数式编程库\",{\"1\":{\"6917\":1}}],[\"是一个轻量级\",{\"1\":{\"6603\":1}}],[\"是一个轻量级的\",{\"1\":{\"6541\":1}}],[\"是一个轻量级的可伸缩的\",{\"1\":{\"6507\":1}}],[\"是一个开放源代码的全文检索引擎工具包\",{\"1\":{\"6595\":1}}],[\"是一个开放的资源框架\",{\"1\":{\"4278\":1}}],[\"是一个开源\",{\"1\":{\"6506\":1}}],[\"是一个顶级类\",{\"1\":{\"5666\":1}}],[\"是一个嵌套静态类\",{\"1\":{\"5666\":1}}],[\"是一个关键字\",{\"1\":{\"5662\":1}}],[\"是一个修饰符\",{\"1\":{\"5660\":1}}],[\"是一个原始类型的数据\",{\"1\":{\"5615\":1}}],[\"是一个对象\",{\"1\":{\"5615\":1}}],[\"是一个标示性接口\",{\"1\":{\"5603\":1}}],[\"是一个指针\",{\"1\":{\"5333\":1}}],[\"是一个无限定的类型变量\",{\"1\":{\"5102\":1}}],[\"是一个整体\",{\"1\":{\"3383\":1}}],[\"是一个有效关联并互相转义的和谐整体\",{\"1\":{\"3257\":1}}],[\"是一个set集合对象\",{\"1\":{\"3124\":1}}],[\"是一个list集合对象\",{\"1\":{\"3124\":1}}],[\"是一个黑盒实现\",{\"1\":{\"3068\":1}}],[\"是一个包含元素角色的容器\",{\"1\":{\"2949\":1}}],[\"是一个小型框架\",{\"1\":{\"2792\":1}}],[\"是一个非常重要的设计思想\",{\"1\":{\"2774\":1}}],[\"是一个比较通用的设计思想\",{\"1\":{\"2753\":1}}],[\"是一个外部类\",{\"1\":{\"2747\":1}}],[\"是一个线程唯一的单例类\",{\"1\":{\"2395\":1}}],[\"是一个存储了\",{\"1\":{\"2375\":1}}],[\"是一个强大的高性能的代码生成包\",{\"1\":{\"1878\":1}}],[\"是一个默认实现\",{\"1\":{\"1487\":1}}],[\"是一个抽象类\",{\"1\":{\"903\":1}}],[\"是一个接口\",{\"1\":{\"558\":1}}],[\"是一步一步创建一个复杂的对象\",{\"1\":{\"665\":1}}],[\"是一种代码的编写方式\",{\"1\":{\"4092\":1}}],[\"是一种继承关系\",{\"1\":{\"2893\":1}}],[\"是一种特殊的类\",{\"1\":{\"2825\":1}}],[\"是一种用于软件系统分析和设计的语言工具\",{\"1\":{\"2808\":1}}],[\"是一种非常有效的提高代码质量的手段\",{\"1\":{\"2691\":1}}],[\"是一种通过为多个复杂的子系统提供一个一致的接口\",{\"1\":{\"1095\":1}}],[\"是一种对象行为型模式\",{\"1\":{\"2932\":1}}],[\"是一种对象\",{\"1\":{\"664\":1}}],[\"是一种结构型设计模式\",{\"1\":{\"588\":1}}],[\"是指对软件中的最小可测试单元进行检查和验证\",{\"1\":{\"4430\":1,\"4433\":1}}],[\"是指捆绑了几个单元测试用例并运行起来\",{\"1\":{\"4410\":1}}],[\"是指线程内只允许创建一个对象\",{\"1\":{\"2387\":1}}],[\"是指给定一个语言\",{\"1\":{\"1455\":1}}],[\"是指\",{\"1\":{\"588\":1,\"1739\":1,\"2061\":1}}],[\"是根据\",{\"1\":{\"574\":1}}],[\"是单继承机制\",{\"1\":{\"524\":1}}],[\"是解耦的\",{\"1\":{\"504\":1}}],[\"是框中显示的内容\",{\"1\":{\"160\":1}}],[\"是否有永久代\",{\"1\":{\"5319\":1}}],[\"是否有合适的处理者来处理\",{\"1\":{\"4952\":1}}],[\"是否有浪费时间\",{\"1\":{\"154\":1}}],[\"是否存在注解\",{\"1\":{\"4693\":1}}],[\"是否需要保存request\",{\"1\":{\"4693\":1}}],[\"是否需要为每个类定义接口\",{\"0\":{\"2714\":1}}],[\"是否保存请求的参数\",{\"1\":{\"4690\":1}}],[\"是否会下蛋\",{\"1\":{\"2731\":1}}],[\"是否会叫\",{\"1\":{\"2730\":1}}],[\"是否会飞\",{\"1\":{\"2730\":1}}],[\"是否能够做到在替换具体的接口实现的时候\",{\"1\":{\"2713\":1}}],[\"是否抽中奖品\",{\"1\":{\"2454\":1}}],[\"是否还能正常工作\",{\"1\":{\"2176\":1}}],[\"是否相对昨天有所进步\",{\"1\":{\"154\":1}}],[\"是你不敢踏出第一步的心\",{\"1\":{\"152\":1}}],[\"是\",{\"0\":{\"5602\":1},\"1\":{\"40\":1,\"535\":1,\"933\":1,\"934\":1,\"935\":1,\"1313\":1,\"1570\":2,\"1903\":1,\"2164\":1,\"2174\":1,\"2696\":1,\"2814\":1,\"2872\":3,\"2878\":1,\"2893\":1,\"2923\":1,\"3016\":1,\"3037\":1,\"4473\":1,\"4712\":1,\"5344\":1,\"5454\":1,\"5599\":2,\"5668\":1,\"6974\":1}}],[\"和你写代码的技术水平\",{\"1\":{\"6991\":1}}],[\"和你的代码放在一块儿提交\",{\"1\":{\"6990\":1}}],[\"和你的代码放在一起\",{\"1\":{\"6988\":1}}],[\"和前面所述的工具不同\",{\"1\":{\"6991\":1}}],[\"和构建工具的支持也很好\",{\"1\":{\"6989\":1}}],[\"和其他\",{\"1\":{\"6940\":1}}],[\"和其它任何语句块一样\",{\"1\":{\"4121\":1}}],[\"和更多实用的方法\",{\"1\":{\"6898\":1}}],[\"和模拟函数\",{\"1\":{\"6644\":1}}],[\"和获取所有构造器的方法很相似\",{\"1\":{\"6097\":1}}],[\"和关联关系不同的是\",{\"1\":{\"5800\":1}}],[\"和聚合不同\",{\"1\":{\"5792\":1}}],[\"和聚合关系对比\",{\"1\":{\"2924\":1}}],[\"和x数据类型不同\",{\"1\":{\"5658\":1}}],[\"和堆\",{\"1\":{\"5326\":1,\"5329\":1}}],[\"和date\",{\"1\":{\"5180\":1}}],[\"和finally的问题\",{\"1\":{\"4974\":1}}],[\"和之前有所不同\",{\"1\":{\"4964\":1}}],[\"和javac一样由jdk提供\",{\"1\":{\"4941\":1}}],[\"和把\",{\"1\":{\"4799\":1}}],[\"和错误\",{\"1\":{\"4731\":1}}],[\"和elementtype\",{\"1\":{\"4659\":1}}],[\"和枚举的声明\",{\"1\":{\"4659\":1}}],[\"和这个类的每个\",{\"1\":{\"4257\":1}}],[\"和块标签组\",{\"1\":{\"4249\":1}}],[\"和任何可以设置为\",{\"1\":{\"4178\":1}}],[\"和静态分析工具可以发出警告\",{\"1\":{\"4129\":1}}],[\"和箭头符号相邻的那行代码永远不会换行\",{\"1\":{\"4052\":1}}],[\"和逗号之后的花括号不能换行\",{\"1\":{\"4013\":1}}],[\"和数据库相关的单元测试\",{\"1\":{\"3316\":1}}],[\"和不可查的异常\",{\"0\":{\"4726\":1}}],[\"和不可变的集合使该类不可变\",{\"1\":{\"6837\":1}}],[\"和不可变的\",{\"1\":{\"4189\":1}}],[\"和不稳定性\",{\"1\":{\"3152\":1}}],[\"和不会飞的鸟类\",{\"1\":{\"2728\":1}}],[\"和稳定性\",{\"1\":{\"3152\":1}}],[\"和getxxx\",{\"1\":{\"3063\":1}}],[\"和用户\",{\"1\":{\"2354\":1}}],[\"和懒汉式\",{\"1\":{\"2311\":1}}],[\"和学院员工的\",{\"1\":{\"2186\":1}}],[\"和依赖倒转原则类似\",{\"1\":{\"2153\":1}}],[\"和类\",{\"1\":{\"2037\":2,\"2038\":1,\"2053\":2,\"2055\":1}}],[\"和重写\",{\"1\":{\"1903\":1}}],[\"和该对象的父类基因\",{\"1\":{\"1861\":1}}],[\"和boss大战~~~\",{\"1\":{\"1655\":1}}],[\"和boss大战前的状态\",{\"1\":{\"1655\":1}}],[\"和具体实现的工厂子类\",{\"1\":{\"1280\":1}}],[\"和创建产品的过程\",{\"1\":{\"700\":1}}],[\"和实现\",{\"1\":{\"637\":1}}],[\"和\",{\"0\":{\"5614\":1,\"5645\":1,\"5659\":1},\"1\":{\"36\":1,\"115\":1,\"751\":1,\"793\":1,\"854\":1,\"907\":1,\"1335\":1,\"1345\":1,\"1355\":1,\"1357\":1,\"1487\":1,\"1489\":2,\"1556\":1,\"1570\":1,\"1728\":1,\"1795\":1,\"1813\":1,\"1928\":1,\"2173\":1,\"2183\":1,\"2188\":1,\"2194\":1,\"2261\":1,\"2373\":3,\"2375\":1,\"2393\":1,\"2394\":1,\"2452\":1,\"2571\":1,\"2704\":1,\"2792\":1,\"2881\":2,\"2882\":1,\"2983\":1,\"3188\":1,\"3528\":1,\"3952\":1,\"4006\":1,\"4032\":1,\"4042\":1,\"4088\":1,\"4163\":1,\"4195\":1,\"4223\":2,\"4239\":1,\"4296\":1,\"4363\":1,\"4364\":1,\"4365\":1,\"4410\":1,\"4469\":1,\"4479\":1,\"4483\":2,\"4487\":1,\"4603\":2,\"4713\":1,\"5302\":1,\"5310\":2,\"5368\":1,\"5381\":1,\"5386\":1,\"5397\":1,\"5490\":1,\"5518\":1,\"5519\":1,\"5533\":1,\"5646\":2,\"5662\":1,\"5670\":1,\"5763\":1,\"5775\":2,\"6253\":1,\"6815\":1,\"6822\":1,\"6835\":1,\"6858\":1,\"6880\":1,\"6884\":1,\"6888\":1,\"6896\":1,\"6906\":1,\"6925\":1,\"6933\":1,\"6943\":1,\"6946\":1,\"6952\":1,\"6973\":1,\"6990\":1}}],[\"介绍\",{\"0\":{\"35\":1},\"1\":{\"36\":1,\"40\":1}}],[\"文档对对你代码的阅读着来说也很重要\",{\"1\":{\"6847\":1}}],[\"文档索引引擎\",{\"1\":{\"6592\":1}}],[\"文档分类\",{\"1\":{\"6533\":1}}],[\"文档处理工具\",{\"0\":{\"6406\":1}}],[\"文档记录\",{\"1\":{\"4442\":1}}],[\"文档解释\",{\"1\":{\"1499\":1}}],[\"文法中的每条规则都对应于一个非终结符表达式\",{\"1\":{\"1470\":1}}],[\"文法中的每一个终结符都有一个具体终结表达式与之相对应\",{\"1\":{\"1469\":1}}],[\"文法\",{\"1\":{\"1456\":1}}],[\"文本框节点\",{\"0\":{\"161\":1}}],[\"文章标题列表\",{\"1\":{\"127\":1}}],[\"文件中\",{\"1\":{\"6990\":1}}],[\"文件中定义\",{\"1\":{\"6988\":1}}],[\"文件上传或xml处理等\",{\"1\":{\"6647\":1}}],[\"文件内容是具体的实现名字\",{\"1\":{\"6232\":1}}],[\"文件内容是org\",{\"1\":{\"6170\":1}}],[\"文件内容是com\",{\"1\":{\"6168\":1}}],[\"文件搜索\",{\"1\":{\"6151\":1,\"6158\":1}}],[\"文件搜索实现\",{\"1\":{\"6150\":1}}],[\"文件时\",{\"1\":{\"5664\":1}}],[\"文件未找到异常\",{\"1\":{\"4830\":1}}],[\"文件已结束异常\",{\"1\":{\"4829\":1}}],[\"文件找不到\",{\"1\":{\"4708\":1}}],[\"文件编码\",{\"0\":{\"3944\":1}}],[\"文件名\",{\"0\":{\"3942\":1}}],[\"文件句柄耗尽\",{\"1\":{\"3831\":1}}],[\"文件侵犯版权\",{\"1\":{\"3708\":1}}],[\"文件也要修改\",{\"1\":{\"1213\":1}}],[\"文件系统中的文件与文件夹\",{\"1\":{\"806\":1}}],[\"文件夹的图片\",{\"1\":{\"120\":1}}],[\"文件放置在一起\",{\"1\":{\"119\":1}}],[\"文件\",{\"1\":{\"34\":1,\"2388\":1,\"5515\":1,\"6997\":1}}],[\"文件生成页面\",{\"1\":{\"33\":1}}],[\"文字类控件中\",{\"1\":{\"3228\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"122\":1}}],[\"文字\",{\"1\":{\"30\":1,\"31\":1}}],[\"文字段落\",{\"1\":{\"30\":11,\"31\":13}}],[\"段落样式\",{\"1\":{\"4154\":1}}],[\"段落\",{\"0\":{\"4248\":1},\"1\":{\"30\":1,\"31\":1,\"4267\":1}}],[\"页脚\",{\"1\":{\"26\":1,\"132\":1}}],[\"页面搜索严禁左模糊或者全模糊\",{\"1\":{\"3371\":1}}],[\"页面page\",{\"1\":{\"3335\":1}}],[\"页面显示为0\",{\"1\":{\"3058\":1}}],[\"页面结构\",{\"0\":{\"123\":1}}],[\"页面内容\",{\"0\":{\"116\":1}}],[\"页面配置\",{\"0\":{\"108\":1},\"1\":{\"115\":1}}],[\"页面引入配置\",{\"1\":{\"38\":1}}],[\"页面信息\",{\"0\":{\"110\":1},\"1\":{\"20\":1}}],[\"页面展示\",{\"1\":{\"11\":1}}],[\"链接\",{\"1\":{\"24\":1,\"53\":1,\"2388\":1}}],[\"贡献者\",{\"1\":{\"21\":1,\"128\":1}}],[\"布局与功能禁用\",{\"0\":{\"14\":1}}],[\"展示对象\",{\"1\":{\"3006\":1}}],[\"展示网站项目需求\",{\"0\":{\"1407\":1}}],[\"展示\",{\"0\":{\"32\":1},\"1\":{\"10\":1}}],[\"aeron\",{\"1\":{\"6496\":1}}],[\"akka\",{\"1\":{\"6382\":1}}],[\"aurora是一个mesos框架\",{\"1\":{\"6302\":1}}],[\"aurora\",{\"1\":{\"6302\":1}}],[\"auto\",{\"1\":{\"6371\":1,\"6815\":1}}],[\"autocloseable\",{\"1\":{\"4794\":1,\"4798\":1,\"4868\":1}}],[\"autowired\",{\"1\":{\"4696\":1}}],[\"automaticallycloseresource\",{\"1\":{\"4869\":1}}],[\"automatic\",{\"1\":{\"3300\":1}}],[\"authoring\",{\"1\":{\"6401\":1}}],[\"author\",{\"1\":{\"3211\":1,\"4326\":1,\"6951\":5}}],[\"author为$\",{\"1\":{\"3210\":2}}],[\"autumn\",{\"1\":{\"3018\":1}}],[\"a进行理解\",{\"1\":{\"5584\":1}}],[\"avoided\",{\"1\":{\"5528\":1}}],[\"avoid\",{\"0\":{\"6823\":1,\"6838\":1},\"1\":{\"5527\":1,\"6754\":1,\"6756\":1}}],[\"available\",{\"1\":{\"338\":1,\"5524\":1,\"6076\":1,\"6096\":1,\"6201\":1}}],[\"a>\",{\"1\":{\"5038\":1}}],[\"a>表示该类型参数可以是a\",{\"1\":{\"5037\":1}}],[\"ajaxresult\",{\"1\":{\"4696\":5}}],[\"ajax提交必须执行csrf安全验证\",{\"1\":{\"3343\":1}}],[\"awaitility\",{\"1\":{\"6629\":1}}],[\"await\",{\"1\":{\"4383\":1}}],[\"awesome\",{\"1\":{\"382\":2,\"6278\":1}}],[\"afoo\",{\"1\":{\"4236\":2}}],[\"afterthrowing\",{\"1\":{\"4693\":1}}],[\"afterreturning\",{\"1\":{\"4693\":1}}],[\"after等等注解来实现\",{\"1\":{\"4684\":1}}],[\"after修饰的方法执行后执行\",{\"1\":{\"4331\":1}}],[\"after修饰的方法会在子类\",{\"1\":{\"4331\":1}}],[\"after注解修饰的方法会在每个测试方法执行后执行一次\",{\"1\":{\"4331\":1}}],[\"afterclass注解方法修饰的方法会在子类的\",{\"1\":{\"4332\":1}}],[\"afterclass注解修饰的方法执行之后才会被执行\",{\"1\":{\"4332\":1}}],[\"afterclass注解修饰的方法\",{\"1\":{\"4332\":1}}],[\"afterclass\",{\"1\":{\"4300\":1,\"4333\":2,\"4483\":1}}],[\"after\",{\"1\":{\"346\":1,\"384\":1,\"1603\":1,\"3081\":1,\"4307\":1,\"4333\":4,\"4380\":1,\"4481\":1,\"4482\":1,\"4483\":1,\"4685\":1,\"6964\":1,\"7012\":1}}],[\"a0907\",{\"1\":{\"3791\":1}}],[\"a0906\",{\"1\":{\"3789\":1}}],[\"a0905\",{\"1\":{\"3787\":1}}],[\"a0904\",{\"1\":{\"3785\":1}}],[\"a0903\",{\"1\":{\"3783\":1}}],[\"a0902\",{\"1\":{\"3781\":1}}],[\"a0901\",{\"1\":{\"3779\":1}}],[\"a0900\",{\"1\":{\"3776\":1}}],[\"a0807\",{\"1\":{\"3774\":1}}],[\"a0806\",{\"1\":{\"3772\":1}}],[\"a0805\",{\"1\":{\"3770\":1}}],[\"a0804\",{\"1\":{\"3768\":1}}],[\"a0803\",{\"1\":{\"3766\":1}}],[\"a0802\",{\"1\":{\"3764\":1}}],[\"a0801\",{\"1\":{\"3762\":1}}],[\"a0800\",{\"1\":{\"3759\":1}}],[\"a0705\",{\"1\":{\"3757\":1}}],[\"a0704\",{\"1\":{\"3755\":1}}],[\"a0703\",{\"1\":{\"3753\":1}}],[\"a0702\",{\"1\":{\"3751\":1}}],[\"a0701\",{\"1\":{\"3749\":1}}],[\"a0700\",{\"1\":{\"3746\":1}}],[\"a0605\",{\"1\":{\"3743\":1}}],[\"a0604\",{\"1\":{\"3741\":1}}],[\"a0603\",{\"1\":{\"3739\":1}}],[\"a0602\",{\"1\":{\"3737\":1}}],[\"a0601\",{\"1\":{\"3735\":1}}],[\"a0600\",{\"1\":{\"3732\":1}}],[\"a0506\",{\"1\":{\"3730\":1}}],[\"a0505\",{\"1\":{\"3728\":1}}],[\"a0504\",{\"1\":{\"3726\":1}}],[\"a0503\",{\"1\":{\"3724\":1}}],[\"a0502\",{\"1\":{\"3722\":1}}],[\"a0501\",{\"1\":{\"3720\":1}}],[\"a0500\",{\"1\":{\"3717\":1}}],[\"a0443\",{\"1\":{\"3715\":1}}],[\"a0442\",{\"1\":{\"3713\":1}}],[\"a0441\",{\"1\":{\"3711\":1}}],[\"a0440\",{\"1\":{\"3709\":1}}],[\"a0433\",{\"1\":{\"3707\":1}}],[\"a0432\",{\"1\":{\"3705\":1}}],[\"a0431\",{\"1\":{\"3703\":1}}],[\"a0430\",{\"1\":{\"3701\":1}}],[\"a0427\",{\"1\":{\"3699\":1}}],[\"a0426\",{\"1\":{\"3697\":1}}],[\"a0425\",{\"1\":{\"3695\":1}}],[\"a0424\",{\"1\":{\"3693\":1}}],[\"a0423\",{\"1\":{\"3691\":1}}],[\"a0422\",{\"1\":{\"3689\":1}}],[\"a0421\",{\"1\":{\"3687\":1}}],[\"a0420\",{\"1\":{\"3685\":1}}],[\"a0414\",{\"1\":{\"3683\":1}}],[\"a0413\",{\"1\":{\"3681\":1}}],[\"a0412\",{\"1\":{\"3679\":1}}],[\"a0411\",{\"1\":{\"3677\":1}}],[\"a0410\",{\"1\":{\"3675\":1}}],[\"a0402\",{\"1\":{\"3673\":1}}],[\"a0401\",{\"1\":{\"3671\":1}}],[\"a0400\",{\"1\":{\"3668\":1}}],[\"a0341\",{\"1\":{\"3666\":1}}],[\"a0340\",{\"1\":{\"3664\":1}}],[\"a0330\",{\"1\":{\"3662\":1}}],[\"a0325\",{\"1\":{\"3660\":1}}],[\"a0324\",{\"1\":{\"3658\":1}}],[\"a0323\",{\"1\":{\"3656\":1}}],[\"a0322\",{\"1\":{\"3654\":1}}],[\"a0321\",{\"1\":{\"3652\":1}}],[\"a0320\",{\"1\":{\"3650\":1}}],[\"a0312\",{\"1\":{\"3648\":1}}],[\"a0311\",{\"1\":{\"3646\":1}}],[\"a0310\",{\"1\":{\"3644\":1}}],[\"a0303\",{\"1\":{\"3642\":1}}],[\"a0302\",{\"1\":{\"3640\":1}}],[\"a0301\",{\"1\":{\"3638\":1}}],[\"a0300\",{\"1\":{\"3635\":1}}],[\"a0241\",{\"1\":{\"3633\":1}}],[\"a0240\",{\"1\":{\"3631\":1}}],[\"a0230\",{\"1\":{\"3629\":1}}],[\"a0223\",{\"1\":{\"3627\":1}}],[\"a0222\",{\"1\":{\"3625\":1}}],[\"a0221\",{\"1\":{\"3623\":1}}],[\"a0220\",{\"1\":{\"3621\":1}}],[\"a0211\",{\"1\":{\"3619\":1}}],[\"a0210\",{\"1\":{\"3617\":1}}],[\"a0203\",{\"1\":{\"3615\":1}}],[\"a0202\",{\"1\":{\"3613\":1}}],[\"a0201\",{\"1\":{\"3611\":1}}],[\"a0200\",{\"1\":{\"3609\":1}}],[\"a0153\",{\"1\":{\"3607\":1}}],[\"a0152\",{\"1\":{\"3605\":1}}],[\"a0151\",{\"1\":{\"3603\":1}}],[\"a0150\",{\"1\":{\"3601\":1}}],[\"a0144\",{\"1\":{\"3599\":1}}],[\"a0143\",{\"1\":{\"3597\":1}}],[\"a0142\",{\"1\":{\"3595\":1}}],[\"a0141\",{\"1\":{\"3593\":1}}],[\"a0140\",{\"1\":{\"3591\":1}}],[\"a0133\",{\"1\":{\"3589\":1}}],[\"a0132\",{\"1\":{\"3587\":1}}],[\"a0131\",{\"1\":{\"3585\":1}}],[\"a0130\",{\"1\":{\"3583\":1}}],[\"a0122\",{\"1\":{\"3581\":1}}],[\"a0121\",{\"1\":{\"3579\":1}}],[\"a0120\",{\"1\":{\"3577\":1}}],[\"a0113\",{\"1\":{\"3575\":1}}],[\"a0112\",{\"1\":{\"3573\":1}}],[\"a0111\",{\"1\":{\"3571\":1}}],[\"a0110\",{\"1\":{\"3569\":1}}],[\"a0102\",{\"1\":{\"3567\":1}}],[\"a0101\",{\"1\":{\"3565\":1}}],[\"a0100\",{\"1\":{\"3562\":1}}],[\"a0001\",{\"1\":{\"3260\":1,\"3559\":1}}],[\"aqs\",{\"1\":{\"3544\":1}}],[\"a索引即可\",{\"1\":{\"3376\":1}}],[\"a列的几乎接近于唯一值\",{\"1\":{\"3376\":1}}],[\"a表示错误来源于用户\",{\"1\":{\"3254\":1}}],[\"aap\",{\"1\":{\"2995\":1}}],[\"aaa\",{\"1\":{\"5311\":2,\"5353\":1}}],[\"aaaabbbd\",{\"1\":{\"373\":1}}],[\"aaa<span>bbb<\",{\"1\":{\"372\":1}}],[\"a的关系\",{\"1\":{\"2915\":1}}],[\"aid\",{\"1\":{\"5524\":1}}],[\"air\",{\"1\":{\"3299\":1}}],[\"airvehicle\",{\"1\":{\"2020\":5}}],[\"ai\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"a2\",{\"1\":{\"2002\":1,\"5494\":1,\"6083\":6}}],[\"aop切面实现统一的操作日志管理\",{\"1\":{\"4688\":1}}],[\"aop\",{\"1\":{\"1878\":2,\"1879\":1,\"6370\":1}}],[\"apache2\",{\"1\":{\"3512\":1}}],[\"apache\",{\"0\":{\"6894\":1},\"1\":{\"3283\":2,\"4324\":4,\"6201\":7,\"6203\":1,\"6204\":1,\"6205\":1,\"6206\":1,\"6207\":2,\"6281\":1,\"6290\":1,\"6302\":2,\"6341\":1,\"6352\":1,\"6363\":1,\"6383\":1,\"6384\":1,\"6392\":1,\"6393\":1,\"6400\":1,\"6408\":1,\"6454\":1,\"6477\":1,\"6485\":1,\"6486\":1,\"6487\":1,\"6488\":1,\"6497\":1,\"6498\":1,\"6499\":1,\"6500\":2,\"6530\":1,\"6552\":1,\"6555\":1,\"6556\":1,\"6593\":1,\"6595\":1,\"6598\":1,\"6612\":1,\"6613\":1,\"6619\":1,\"6626\":1,\"6647\":1,\"6659\":1,\"6665\":1,\"6666\":1,\"6769\":1,\"6895\":1}}],[\"apachebeanutils性能较差\",{\"1\":{\"3240\":1}}],[\"api在新窗口打开\",{\"1\":{\"6252\":1,\"6253\":1}}],[\"apis\",{\"1\":{\"5525\":1}}],[\"api开放接口必须使用错误码\",{\"1\":{\"3278\":1}}],[\"api文档上有说最多查多少个\",{\"1\":{\"3204\":1}}],[\"api\",{\"0\":{\"1853\":1},\"1\":{\"1689\":1,\"1851\":1,\"3205\":1,\"3426\":1,\"3439\":1,\"3649\":1,\"3771\":1,\"3773\":1,\"3775\":1,\"4844\":1,\"5364\":2,\"5549\":1,\"5672\":2,\"5675\":1,\"6247\":1,\"6271\":1,\"6870\":1}}],[\"appdynamics\",{\"1\":{\"6519\":1}}],[\"appname\",{\"1\":{\"3286\":1}}],[\"approver\",{\"1\":{\"1961\":1,\"1965\":1,\"1972\":16}}],[\"app\",{\"0\":{\"2439\":1},\"1\":{\"768\":1,\"769\":2,\"770\":2,\"772\":1}}],[\"append\",{\"1\":{\"718\":1,\"3031\":5,\"3033\":3}}],[\"appendable\",{\"1\":{\"718\":2,\"719\":1}}],[\"applet\",{\"1\":{\"5529\":1}}],[\"applicable\",{\"1\":{\"5035\":1}}],[\"applications\",{\"1\":{\"5528\":1}}],[\"application\",{\"1\":{\"3235\":1,\"5523\":1,\"5578\":1}}],[\"applicationcontext\",{\"1\":{\"1353\":3,\"1355\":2,\"1356\":2,\"2261\":1}}],[\"applied\",{\"1\":{\"368\":1}}],[\"apply\",{\"1\":{\"350\":1,\"353\":1}}],[\"among\",{\"1\":{\"6083\":1}}],[\"ambiguous\",{\"1\":{\"3388\":1}}],[\"am\",{\"1\":{\"1603\":1,\"5964\":2}}],[\"amt\",{\"1\":{\"651\":1}}],[\"agrona\",{\"1\":{\"6430\":1}}],[\"aggregation\",{\"0\":{\"2871\":1,\"5787\":1},\"1\":{\"2872\":1,\"5790\":1}}],[\"aggregate\",{\"1\":{\"1518\":1,\"1525\":3,\"2199\":1}}],[\"agefield\",{\"1\":{\"5964\":2}}],[\"ages\",{\"1\":{\"4179\":1}}],[\"age=18\",{\"1\":{\"5964\":1}}],[\"age=25\",{\"1\":{\"5916\":1}}],[\"age=22\",{\"1\":{\"5916\":1}}],[\"age=20\",{\"1\":{\"5916\":1}}],[\"age=0\",{\"1\":{\"5855\":1}}],[\"age=\",{\"1\":{\"1761\":1,\"1772\":1,\"5853\":1,\"5914\":1}}],[\"age\",{\"1\":{\"1761\":9,\"1772\":9,\"5759\":3,\"5761\":3,\"5853\":9,\"5914\":10,\"5962\":4,\"5964\":1}}],[\"ag\",{\"1\":{\"1525\":5}}],[\"a+b\",{\"1\":{\"1489\":2,\"1491\":1,\"5609\":1}}],[\"a+b+c\",{\"1\":{\"1479\":2}}],[\"ac2\",{\"1\":{\"5376\":2}}],[\"ac1\",{\"1\":{\"5376\":1}}],[\"actor\",{\"1\":{\"6388\":1}}],[\"actual\",{\"1\":{\"4343\":1,\"4353\":1,\"4355\":1,\"4368\":2}}],[\"activemq\",{\"1\":{\"6497\":1}}],[\"active\",{\"1\":{\"3248\":1}}],[\"activity\",{\"1\":{\"2454\":28,\"2456\":3,\"6681\":1}}],[\"action\",{\"1\":{\"766\":2,\"789\":2,\"2960\":4,\"2962\":8,\"2964\":3,\"2968\":1,\"6258\":4,\"6691\":1}}],[\"acquiremethodaccessor\",{\"1\":{\"6107\":1,\"6108\":1,\"6109\":1}}],[\"acquireconstructoraccessor\",{\"1\":{\"6086\":1}}],[\"acquirequeued\",{\"1\":{\"3199\":1}}],[\"acquire\",{\"1\":{\"3199\":1}}],[\"accumulators\",{\"1\":{\"5553\":1}}],[\"acc\",{\"1\":{\"4600\":4,\"6086\":2,\"6109\":3,\"6111\":2,\"6114\":2,\"6118\":1,\"6258\":6}}],[\"acceptable\",{\"1\":{\"4021\":2,\"4022\":1}}],[\"accept\",{\"1\":{\"2947\":2,\"2948\":1,\"2953\":7,\"2962\":3,\"2964\":1}}],[\"acceptorderevent\",{\"1\":{\"2465\":1,\"2467\":2,\"2471\":2,\"2473\":1}}],[\"accesscontrolcontext\",{\"1\":{\"6258\":1}}],[\"accesscontroller\",{\"1\":{\"6065\":1,\"6118\":1,\"6180\":2,\"6258\":3}}],[\"accessorgenerator\",{\"1\":{\"6118\":1}}],[\"accessibility\",{\"1\":{\"6065\":1,\"6083\":1}}],[\"accessibleobject\",{\"1\":{\"6083\":1}}],[\"accessible\",{\"1\":{\"5992\":1}}],[\"accessing\",{\"1\":{\"5527\":1,\"5530\":1}}],[\"accesswithinnerclassexample\",{\"1\":{\"5371\":2}}],[\"accessexample\",{\"1\":{\"5366\":1,\"5367\":1,\"5369\":1}}],[\"accessed\",{\"1\":{\"379\":1}}],[\"access$000\",{\"1\":{\"4374\":1}}],[\"access等\",{\"1\":{\"3286\":1}}],[\"accesstoken\",{\"1\":{\"2699\":4,\"2711\":2}}],[\"access\",{\"1\":{\"2699\":1,\"2700\":2,\"2705\":2,\"2711\":2,\"2997\":1,\"4570\":1,\"4572\":1,\"4573\":1,\"4575\":1,\"4579\":1,\"4581\":1,\"5455\":1,\"6118\":1}}],[\"accesskey\",{\"1\":{\"2699\":1,\"2711\":1}}],[\"accommodate\",{\"1\":{\"270\":1}}],[\"a==b\",{\"0\":{\"5645\":1},\"1\":{\"5646\":1}}],[\"a=unsafe\",{\"1\":{\"466\":1}}],[\"a=10\",{\"1\":{\"1487\":3,\"1489\":1,\"1491\":1}}],[\"a=1\",{\"1\":{\"408\":1,\"465\":1}}],[\"adam\",{\"1\":{\"6700\":1}}],[\"adaptee\",{\"1\":{\"500\":1}}],[\"adapter\",{\"1\":{\"487\":1,\"498\":1,\"501\":1,\"513\":1,\"516\":1,\"525\":1,\"526\":1,\"529\":1,\"535\":1,\"548\":1,\"574\":2,\"575\":1,\"576\":1,\"577\":1,\"578\":1,\"581\":1,\"1010\":1,\"2612\":1}}],[\"adt4j\",{\"1\":{\"6369\":1}}],[\"adriver\",{\"1\":{\"6180\":3}}],[\"advantages\",{\"1\":{\"5522\":1}}],[\"ad\",{\"1\":{\"4199\":1}}],[\"adwords\",{\"1\":{\"4199\":1}}],[\"admin\",{\"1\":{\"3284\":1,\"3352\":1}}],[\"adjust\",{\"1\":{\"390\":1,\"6118\":1}}],[\"addtime\",{\"1\":{\"6063\":1}}],[\"addsusppressed\",{\"1\":{\"4799\":1}}],[\"addsave\",{\"1\":{\"4696\":1}}],[\"additional\",{\"1\":{\"6118\":1}}],[\"additivity=\",{\"1\":{\"3290\":1}}],[\"addison\",{\"1\":{\"5582\":1}}],[\"adding\",{\"1\":{\"266\":1,\"340\":1,\"364\":1}}],[\"addwaiter\",{\"1\":{\"3199\":1}}],[\"addall\",{\"1\":{\"6219\":1}}],[\"addall方法的第一行代码即object\",{\"1\":{\"3107\":1}}],[\"addandget\",{\"1\":{\"3180\":1}}],[\"add操作\",{\"1\":{\"3114\":1}}],[\"addcondiments\",{\"1\":{\"2677\":5}}],[\"adddepartment\",{\"1\":{\"1535\":9}}],[\"addelapsedtimefrom\",{\"1\":{\"6063\":1}}],[\"addexpresson\",{\"1\":{\"1489\":1}}],[\"addexpression\",{\"1\":{\"1487\":2,\"1489\":1}}],[\"addedfunction\",{\"1\":{\"894\":2}}],[\"added\",{\"1\":{\"267\":1,\"271\":1}}],[\"addbeandefinitions\",{\"1\":{\"1356\":1,\"1366\":1,\"1367\":1,\"1368\":1}}],[\"addlistener\",{\"1\":{\"552\":1,\"553\":1,\"555\":1}}],[\"address=\",{\"1\":{\"1772\":1}}],[\"address\",{\"1\":{\"1772\":2}}],[\"addr2+4\",{\"1\":{\"473\":1}}],[\"addr2\",{\"1\":{\"473\":3}}],[\"addr\",{\"1\":{\"466\":4,\"469\":4,\"473\":6}}],[\"add\",{\"1\":{\"274\":1,\"378\":1,\"820\":1,\"823\":1,\"832\":8,\"834\":7,\"850\":1,\"852\":3,\"854\":5,\"856\":1,\"858\":7,\"1525\":6,\"1535\":1,\"1541\":2,\"1586\":1,\"1686\":4,\"1718\":1,\"1726\":1,\"2188\":2,\"2194\":2,\"2840\":1,\"2953\":4,\"2964\":1,\"3085\":1,\"3093\":3,\"3099\":2,\"3105\":2,\"3110\":1,\"3113\":2,\"3115\":2,\"4644\":1,\"4696\":2,\"5001\":3,\"5003\":1,\"5006\":3,\"5090\":2,\"5093\":3,\"5112\":4,\"5115\":3,\"5120\":2,\"5133\":6,\"5139\":2,\"5142\":2,\"5184\":1,\"5193\":1,\"5196\":1,\"5445\":2,\"5776\":2,\"6118\":3,\"6258\":1,\"6853\":1}}],[\"atleast\",{\"1\":{\"6962\":1}}],[\"atlassian解决方案\",{\"1\":{\"6327\":1}}],[\"attempts\",{\"1\":{\"6201\":1}}],[\"attributes\",{\"1\":{\"6118\":1,\"6201\":1}}],[\"attaching\",{\"1\":{\"6996\":1}}],[\"attachment\",{\"1\":{\"360\":1}}],[\"attached\",{\"1\":{\"350\":1,\"6996\":1}}],[\"attach\",{\"1\":{\"214\":1,\"357\":1,\"362\":1,\"364\":1,\"2964\":1,\"2966\":2}}],[\"athrow\",{\"1\":{\"4963\":1,\"4969\":1,\"4978\":1}}],[\"atest\",{\"1\":{\"4316\":1,\"4400\":1}}],[\"atomic\",{\"1\":{\"6076\":1}}],[\"atomicinteger\",{\"1\":{\"3157\":2,\"3180\":2}}],[\"atomiclong\",{\"1\":{\"2379\":2,\"2397\":2,\"2406\":2}}],[\"at\",{\"1\":{\"339\":1,\"4374\":25,\"4380\":16,\"4920\":5}}],[\"a1005\",{\"1\":{\"3804\":1}}],[\"a1004\",{\"1\":{\"3802\":1}}],[\"a1003\",{\"1\":{\"3800\":1}}],[\"a1002\",{\"1\":{\"3798\":1}}],[\"a1001\",{\"1\":{\"3796\":1}}],[\"a1000\",{\"1\":{\"3793\":1}}],[\"a1\",{\"1\":{\"315\":1,\"318\":1,\"322\":1,\"2002\":1,\"5494\":1,\"6083\":6}}],[\"able\",{\"1\":{\"5524\":1,\"5525\":1,\"6118\":1}}],[\"able结尾的形容词\",{\"1\":{\"3004\":1}}],[\"about\",{\"1\":{\"2103\":1,\"6201\":2}}],[\"above\",{\"1\":{\"191\":1,\"339\":1,\"6118\":52,\"6201\":1}}],[\"absfactory\",{\"1\":{\"1280\":1}}],[\"abs\",{\"1\":{\"605\":2,\"3051\":1}}],[\"absadapter\",{\"1\":{\"564\":2,\"566\":4}}],[\"abstractextendclassexample\",{\"1\":{\"5376\":2}}],[\"abstractexpression\",{\"1\":{\"1476\":6}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"3544\":1}}],[\"abstractmap\",{\"1\":{\"3139\":1,\"3144\":1,\"3149\":1}}],[\"abstractmethod2\",{\"1\":{\"2663\":3}}],[\"abstractmethod1\",{\"1\":{\"2663\":3}}],[\"abstracttranslator实现translatable\",{\"1\":{\"3004\":1}}],[\"abstractunflyableuntweetablebird\",{\"1\":{\"2730\":1}}],[\"abstractunflyabletweetablebird\",{\"1\":{\"2730\":1}}],[\"abstractunflyablebird\",{\"1\":{\"2728\":2}}],[\"abstractflyableuntweetablebird\",{\"1\":{\"2730\":1}}],[\"abstractflyabletweetablebird\",{\"1\":{\"2730\":1}}],[\"abstractflyablebird\",{\"1\":{\"2728\":2}}],[\"abstractfactory\",{\"1\":{\"2607\":1}}],[\"abstractbird\",{\"1\":{\"2724\":1,\"2725\":1,\"2726\":2,\"2728\":1}}],[\"abstractclassexample\",{\"1\":{\"5376\":6}}],[\"abstractclass\",{\"1\":{\"2663\":3,\"2998\":1}}],[\"abstractstate\",{\"1\":{\"2467\":7,\"2471\":1}}],[\"abstractstringbuilder\",{\"1\":{\"719\":2,\"720\":2}}],[\"abstracthouse\",{\"1\":{\"692\":1,\"693\":1,\"695\":1}}],[\"abstractions\",{\"1\":{\"5530\":1}}],[\"abstraction\",{\"1\":{\"589\":1,\"599\":1,\"600\":1,\"605\":5,\"2103\":1}}],[\"abstract\",{\"0\":{\"1275\":1},\"1\":{\"557\":1,\"564\":1,\"605\":2,\"624\":1,\"693\":4,\"709\":4,\"766\":1,\"850\":2,\"922\":2,\"1197\":2,\"1229\":1,\"1246\":2,\"1248\":2,\"1289\":1,\"1427\":2,\"1468\":1,\"1487\":2,\"1586\":6,\"1601\":4,\"1603\":2,\"1686\":2,\"1953\":2,\"1972\":2,\"2152\":2,\"2438\":2,\"2454\":4,\"2467\":1,\"2521\":2,\"2539\":2,\"2651\":1,\"2663\":3,\"2677\":2,\"2895\":1,\"2960\":3,\"2962\":2,\"3003\":1,\"4157\":1,\"5374\":1,\"5376\":3,\"5382\":1,\"5397\":1,\"5398\":1,\"5488\":1,\"5489\":3,\"5698\":1,\"6201\":1}}],[\"ability\",{\"1\":{\"338\":1,\"6201\":1}}],[\"abc\",{\"1\":{\"260\":1,\"4644\":1,\"4796\":1,\"5090\":1}}],[\"abcde\",{\"1\":{\"342\":1}}],[\"abcd\",{\"1\":{\"251\":1,\"254\":1,\"264\":1,\"337\":1}}],[\"ab\",{\"1\":{\"217\":1,\"220\":1,\"223\":1,\"235\":1,\"241\":1,\"366\":1}}],[\"arsenal\",{\"1\":{\"6725\":1}}],[\"arsg\",{\"1\":{\"5020\":1}}],[\"arun\",{\"1\":{\"6702\":1}}],[\"arquillian\",{\"1\":{\"6627\":1}}],[\"arithmetic\",{\"1\":{\"5535\":1}}],[\"arithmeticexception>\",{\"1\":{\"4374\":1}}],[\"arithmeticexception\",{\"1\":{\"4372\":1,\"4374\":1,\"4754\":1,\"4820\":1,\"5718\":1}}],[\"archive\",{\"1\":{\"5022\":1,\"5243\":1,\"6274\":1}}],[\"artifactory\",{\"1\":{\"6884\":1,\"6885\":1}}],[\"artifact<\",{\"1\":{\"6867\":1}}],[\"artifactid>\",{\"1\":{\"4324\":3,\"6867\":1}}],[\"artifactid\",{\"1\":{\"3542\":1}}],[\"artifactid格式\",{\"1\":{\"3426\":1}}],[\"articles\",{\"1\":{\"4489\":1,\"5244\":1}}],[\"article\",{\"1\":{\"4423\":1,\"4491\":1,\"4669\":1,\"4699\":1,\"4700\":1,\"4988\":1,\"4989\":1,\"4990\":1,\"5239\":1,\"5240\":1,\"5242\":1,\"5246\":1,\"5813\":1,\"5882\":1,\"6133\":1,\"6134\":1,\"6137\":1,\"6275\":1}}],[\"ary\",{\"1\":{\"3065\":2}}],[\"argumenttypestostring\",{\"1\":{\"6071\":1,\"6090\":1}}],[\"arguments\",{\"1\":{\"5035\":1}}],[\"arg3\",{\"1\":{\"1903\":1}}],[\"arg0\",{\"1\":{\"1903\":1}}],[\"argobjects\",{\"1\":{\"1366\":4}}],[\"argclasses\",{\"1\":{\"1366\":4}}],[\"arg\",{\"1\":{\"1338\":3,\"1351\":3,\"1360\":1,\"1366\":6,\"3199\":3,\"5062\":2,\"6083\":2}}],[\"args4j\",{\"1\":{\"6648\":1}}],[\"argsx\",{\"1\":{\"3033\":1}}],[\"args3\",{\"1\":{\"3033\":1}}],[\"args2\",{\"1\":{\"3033\":1}}],[\"args1\",{\"1\":{\"3033\":1}}],[\"args\",{\"1\":{\"401\":1,\"406\":1,\"408\":1,\"435\":1,\"453\":1,\"522\":1,\"542\":1,\"566\":1,\"605\":1,\"626\":1,\"697\":1,\"713\":1,\"766\":1,\"783\":1,\"832\":1,\"834\":1,\"858\":1,\"894\":1,\"928\":1,\"1114\":1,\"1138\":1,\"1199\":1,\"1214\":1,\"1250\":1,\"1310\":1,\"1313\":1,\"1353\":1,\"1366\":6,\"1406\":1,\"1431\":1,\"1436\":1,\"1491\":1,\"1525\":1,\"1541\":1,\"1586\":1,\"1605\":1,\"1636\":1,\"1655\":1,\"1686\":1,\"1704\":1,\"1720\":1,\"1763\":1,\"1774\":1,\"1797\":1,\"1844\":1,\"1871\":2,\"1873\":1,\"1903\":3,\"1905\":1,\"1953\":1,\"1976\":1,\"2016\":1,\"2020\":1,\"2025\":1,\"2052\":1,\"2058\":1,\"2078\":1,\"2082\":1,\"2089\":1,\"2118\":1,\"2124\":1,\"2144\":1,\"2149\":1,\"2152\":1,\"2188\":1,\"2194\":1,\"2286\":1,\"2293\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1,\"2328\":1,\"2438\":1,\"2456\":1,\"2473\":1,\"2512\":1,\"2541\":1,\"2546\":1,\"2663\":1,\"2679\":1,\"2953\":1,\"2966\":1,\"2993\":1,\"3025\":1,\"3034\":3,\"3186\":1,\"4117\":2,\"4600\":4,\"4647\":1,\"4981\":1,\"5015\":1,\"5017\":1,\"5042\":1,\"5044\":1,\"5055\":1,\"5062\":1,\"5090\":1,\"5093\":1,\"5112\":1,\"5115\":1,\"5120\":1,\"5133\":1,\"5160\":1,\"5234\":1,\"5334\":1,\"5336\":1,\"5486\":1,\"5494\":1,\"5497\":1,\"5733\":1,\"5776\":1,\"5883\":1,\"5888\":4,\"5914\":1,\"5962\":1,\"6013\":1,\"6017\":1,\"6020\":1,\"6025\":1,\"6054\":1,\"6086\":4,\"6107\":2,\"6111\":5,\"6112\":1,\"6114\":2,\"6157\":1}}],[\"arr\",{\"1\":{\"5463\":6,\"5466\":11,\"5469\":11}}],[\"arraycontentseq\",{\"1\":{\"6071\":1,\"6083\":1,\"6101\":1}}],[\"arrayindexoutofbounds是indexoutofbounds的子类\",{\"1\":{\"5227\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"4819\":1}}],[\"arraytoken\",{\"1\":{\"5205\":2}}],[\"arraywithtypetoken<integer>\",{\"1\":{\"5205\":2}}],[\"arraywithtypetoken<t>\",{\"1\":{\"5205\":1}}],[\"arraywithtypetoken\",{\"1\":{\"5064\":1,\"5205\":1}}],[\"array2\",{\"1\":{\"4360\":2}}],[\"array1\",{\"1\":{\"4360\":2}}],[\"array\",{\"1\":{\"3104\":1,\"3105\":1,\"4179\":1,\"5064\":2,\"5196\":1,\"5204\":1,\"5205\":7,\"5271\":1,\"6076\":1,\"6096\":1,\"6099\":1}}],[\"arraydemo\",{\"1\":{\"2993\":1}}],[\"arraystoreexception\",{\"1\":{\"4824\":1,\"4833\":1}}],[\"arrays\",{\"0\":{\"2542\":1},\"1\":{\"2543\":1,\"2546\":5,\"3095\":1,\"3108\":1,\"3109\":1,\"4368\":4,\"4407\":2,\"6219\":1}}],[\"arraylist的原始类型变为object\",{\"1\":{\"5183\":1}}],[\"arraylist的sublist结果不可强转成arraylist\",{\"1\":{\"3100\":1}}],[\"arraylist举例子\",{\"1\":{\"5123\":1}}],[\"arraylist是order\",{\"1\":{\"3152\":1}}],[\"arraylist\",{\"0\":{\"1542\":1},\"1\":{\"1543\":1,\"1548\":1,\"1550\":1,\"1552\":1,\"1718\":2,\"3100\":1,\"3113\":1,\"3122\":1,\"4507\":1,\"4644\":2,\"5006\":1,\"5059\":1,\"5115\":2,\"5117\":1,\"5124\":2,\"5128\":2,\"5131\":1,\"5133\":2,\"5194\":1,\"5200\":1,\"5203\":1,\"5675\":1}}],[\"arraylist<integer>\",{\"1\":{\"5090\":2,\"5093\":2,\"5193\":1,\"5196\":1}}],[\"arraylist<string>\",{\"1\":{\"5009\":1,\"5059\":2,\"5090\":2,\"5120\":2,\"5126\":2,\"5128\":2,\"5133\":5,\"5137\":2,\"5139\":1,\"5142\":2,\"5200\":2,\"6219\":1,\"6258\":1}}],[\"arraylist<\",{\"1\":{\"4660\":2,\"5059\":3,\"5200\":3}}],[\"arraylist<user>\",{\"1\":{\"3122\":1}}],[\"arraylist<element>\",{\"1\":{\"2953\":1}}],[\"arraylist<employee>\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"arraylist<collegeemployee>\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"arraylist<college>\",{\"1\":{\"1541\":1}}],[\"arraylist<colleague>\",{\"1\":{\"1586\":1}}],[\"arraylist<component>\",{\"1\":{\"832\":2,\"834\":2}}],[\"arraylist<department>\",{\"1\":{\"1535\":1}}],[\"arraylist<observer>\",{\"1\":{\"1686\":1,\"1718\":2}}],[\"arraylist<object>\",{\"1\":{\"1525\":1,\"5137\":2,\"5139\":2,\"5142\":1}}],[\"arraylist<organizationcomponent>\",{\"1\":{\"852\":1,\"854\":1}}],[\"arraylist<>\",{\"1\":{\"1360\":2,\"3093\":1,\"3099\":1,\"3105\":1,\"3115\":1,\"5776\":1,\"6258\":1,\"6853\":1}}],[\"arrows\",{\"0\":{\"261\":1},\"1\":{\"258\":1,\"262\":1}}],[\"arrow\",{\"0\":{\"215\":1,\"227\":1,\"257\":1},\"1\":{\"283\":1,\"291\":1,\"299\":1}}],[\"areturn意思为return\",{\"1\":{\"4978\":1}}],[\"areturn\",{\"1\":{\"4978\":2,\"5169\":2}}],[\"are\",{\"1\":{\"168\":1,\"258\":1,\"267\":1,\"274\":1,\"311\":1,\"335\":1,\"338\":1,\"340\":2,\"379\":1,\"382\":1,\"1315\":1,\"3033\":1,\"4244\":1,\"4368\":1,\"5528\":2,\"5576\":1,\"6201\":1}}],[\"al等技术进行抽象的健壮框架\",{\"1\":{\"6422\":1}}],[\"always\",{\"1\":{\"6201\":1}}],[\"alanlee\",{\"1\":{\"5814\":1}}],[\"alarm\",{\"1\":{\"1601\":3,\"1603\":3,\"1605\":7}}],[\"already\",{\"1\":{\"4972\":1,\"6063\":1,\"6083\":1}}],[\"albumen\",{\"1\":{\"4368\":1}}],[\"algorithms\",{\"0\":{\"7018\":1}}],[\"algorithm\",{\"1\":{\"4197\":2}}],[\"alignment\",{\"1\":{\"4092\":1}}],[\"alipay\",{\"1\":{\"3361\":1}}],[\"alibaba\",{\"1\":{\"2987\":1,\"2995\":1,\"2997\":2,\"3003\":1,\"3426\":2}}],[\"ali\",{\"1\":{\"2987\":1}}],[\"aliyunadmin\",{\"1\":{\"3352\":1}}],[\"aliyun\",{\"1\":{\"2704\":1,\"2707\":1,\"2987\":1,\"3352\":1}}],[\"aliyunimagestore\",{\"1\":{\"2698\":1,\"2699\":4,\"2702\":1,\"2703\":2,\"2704\":1,\"2705\":2,\"2711\":1,\"2712\":1}}],[\"aload\",{\"1\":{\"4600\":1,\"4943\":1,\"4963\":2,\"4969\":2,\"4978\":3,\"5169\":7}}],[\"alocale\",{\"1\":{\"1315\":16}}],[\"along\",{\"1\":{\"384\":1,\"386\":1}}],[\"allof\",{\"1\":{\"4368\":2}}],[\"allows\",{\"1\":{\"5530\":1}}],[\"allowlist\",{\"1\":{\"2988\":1}}],[\"allowed\",{\"1\":{\"385\":1,\"5193\":1,\"5382\":3}}],[\"allocatememory\",{\"1\":{\"466\":1,\"469\":1,\"473\":1}}],[\"all\",{\"1\":{\"350\":1,\"375\":1,\"4528\":1,\"4530\":1,\"5276\":1,\"6083\":1,\"7012\":1}}],[\"alert\",{\"1\":{\"334\":1,\"344\":1}}],[\"also\",{\"1\":{\"249\":1,\"311\":1,\"317\":1,\"321\":1,\"362\":1,\"368\":1,\"384\":2,\"385\":1,\"386\":1,\"2103\":1,\"6201\":2}}],[\"alternative\",{\"1\":{\"6201\":2}}],[\"alternate\",{\"1\":{\"339\":1}}],[\"alt\",{\"0\":{\"201\":1,\"207\":1}}],[\"alpha\",{\"1\":{\"4\":1}}],[\"analyzer\",{\"0\":{\"6993\":1},\"1\":{\"6789\":1,\"6994\":1}}],[\"analysis\",{\"1\":{\"4560\":1}}],[\"antonio\",{\"1\":{\"6701\":1}}],[\"antlr\",{\"1\":{\"6314\":1}}],[\"ant更推荐使用maven\",{\"1\":{\"6290\":1}}],[\"ant\",{\"1\":{\"6281\":1}}],[\"anti\",{\"1\":{\"2350\":1}}],[\"another\",{\"1\":{\"6201\":1}}],[\"anonymous\",{\"1\":{\"6086\":1,\"6111\":1,\"6114\":1}}],[\"ansible\",{\"1\":{\"6888\":1}}],[\"ans\",{\"1\":{\"5824\":1}}],[\"answertab=votes\",{\"1\":{\"6271\":1}}],[\"answer\",{\"1\":{\"4102\":1}}],[\"anumber\",{\"1\":{\"4368\":3}}],[\"anno\",{\"1\":{\"4647\":2}}],[\"annotatedelement\",{\"1\":{\"4624\":1,\"5825\":1}}],[\"annotation=\",{\"1\":{\"5825\":1}}],[\"annotation接口\",{\"1\":{\"4663\":1}}],[\"annotationclass\",{\"1\":{\"4625\":1,\"4627\":1,\"4631\":1,\"4633\":1,\"4635\":1}}],[\"annotation>\",{\"1\":{\"4625\":1,\"4627\":1,\"4631\":1,\"4633\":1,\"4635\":1}}],[\"annotations\",{\"1\":{\"4614\":2,\"5551\":1,\"6083\":1}}],[\"annotation\",{\"1\":{\"3935\":1,\"4539\":1,\"4590\":1,\"4607\":3,\"4614\":4,\"4629\":1,\"4637\":1,\"4642\":5,\"4644\":3,\"4647\":3,\"4649\":11,\"4663\":1,\"4670\":1,\"4693\":2,\"4702\":1,\"4703\":1,\"4704\":1,\"5824\":1}}],[\"ann\",{\"1\":{\"4179\":3,\"4537\":1}}],[\"animal\",{\"1\":{\"1798\":1,\"5763\":3,\"5765\":2,\"5766\":2,\"5883\":3}}],[\"animation\",{\"1\":{\"553\":4,\"555\":1,\"557\":6,\"559\":4,\"561\":1}}],[\"animatorpauselistener\",{\"1\":{\"557\":1}}],[\"animator\",{\"1\":{\"553\":5,\"554\":1,\"555\":1,\"556\":1,\"557\":9,\"559\":4,\"561\":1}}],[\"animatorlisteneradapter\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"561\":1}}],[\"animatorlistener\",{\"1\":{\"552\":1,\"553\":1,\"554\":1,\"556\":1,\"558\":1,\"559\":1}}],[\"anyway\",{\"1\":{\"6065\":1,\"6118\":1,\"6201\":1}}],[\"anyof\",{\"1\":{\"4368\":1}}],[\"any\",{\"1\":{\"266\":2,\"346\":2,\"385\":1,\"1315\":1,\"2103\":1,\"4963\":2,\"5761\":1,\"6201\":3,\"6962\":1}}],[\"anyfork\",{\"1\":{\"4\":1}}],[\"android\",{\"1\":{\"552\":1,\"6725\":1}}],[\"and\",{\"0\":{\"227\":1,\"348\":1,\"383\":2,\"5299\":1},\"1\":{\"191\":1,\"255\":1,\"321\":1,\"329\":1,\"338\":1,\"340\":1,\"346\":1,\"357\":1,\"382\":1,\"385\":6,\"1315\":1,\"2103\":1,\"3179\":1,\"3287\":1,\"3289\":1,\"3292\":1,\"3372\":1,\"3376\":2,\"3383\":1,\"3541\":1,\"4152\":1,\"4368\":1,\"5275\":1,\"5277\":1,\"5278\":1,\"5307\":1,\"5398\":1,\"5489\":1,\"5524\":1,\"5525\":1,\"5528\":1,\"5530\":3,\"5548\":1,\"5549\":1,\"5565\":1,\"5576\":1,\"5824\":1,\"5825\":1,\"6076\":2,\"6081\":1,\"6109\":2,\"6118\":5,\"6201\":3,\"6252\":1,\"6271\":1,\"6729\":1,\"6808\":1,\"6850\":1,\"7013\":1}}],[\"an\",{\"0\":{\"188\":1,\"218\":1},\"1\":{\"314\":1,\"317\":1,\"339\":1,\"2693\":2,\"4246\":1,\"5271\":1,\"5355\":1,\"5523\":1,\"5527\":1,\"5529\":2,\"6076\":1,\"6096\":1,\"6201\":9,\"6640\":1}}],[\"asd\",{\"1\":{\"5093\":1,\"5112\":1}}],[\"astore\",{\"1\":{\"4943\":1,\"4963\":2,\"4969\":2,\"4978\":4}}],[\"astaticmethod\",{\"1\":{\"4236\":3}}],[\"async\",{\"1\":{\"6536\":1}}],[\"asyncfactory\",{\"1\":{\"4693\":1}}],[\"asyncmanager\",{\"1\":{\"4693\":1}}],[\"asymmetric\",{\"0\":{\"188\":1}}],[\"aspectj\",{\"1\":{\"4693\":1,\"6370\":1}}],[\"aspect\",{\"1\":{\"4693\":1}}],[\"ascending\",{\"1\":{\"4419\":1}}],[\"ascii\",{\"0\":{\"3953\":1},\"1\":{\"3948\":1,\"3954\":1,\"3969\":1,\"3991\":3,\"4069\":1,\"4162\":1,\"4197\":1}}],[\"aslist体现的是适配器模式\",{\"1\":{\"3108\":1}}],[\"aslist的返回对象是一个arrays内部类\",{\"1\":{\"3108\":1}}],[\"aslist\",{\"1\":{\"3108\":1,\"3109\":1,\"4368\":2,\"4407\":1,\"6219\":1}}],[\"assurance\",{\"0\":{\"7021\":1}}],[\"assured\",{\"1\":{\"6637\":1}}],[\"assumptions\",{\"1\":{\"6958\":1}}],[\"assuming\",{\"1\":{\"5825\":1}}],[\"assertissatisfied\",{\"1\":{\"6962\":1}}],[\"assertion2test\",{\"1\":{\"4368\":1}}],[\"assertions\",{\"1\":{\"4367\":1}}],[\"assertiontest\",{\"1\":{\"4360\":1}}],[\"assertion\",{\"1\":{\"4360\":1,\"4368\":1}}],[\"assertionerror\",{\"1\":{\"4229\":1}}],[\"assertj\",{\"0\":{\"6965\":1},\"1\":{\"6628\":1,\"6782\":1,\"6968\":1}}],[\"assertthat\",{\"1\":{\"4368\":10,\"6969\":1}}],[\"asserttrue\",{\"1\":{\"4345\":1,\"4360\":1,\"4365\":1,\"4368\":1,\"6962\":1,\"6967\":2}}],[\"assertarrayequals\",{\"1\":{\"4357\":1,\"4360\":1,\"4366\":1,\"4368\":1}}],[\"assertsame\",{\"1\":{\"4353\":1,\"4360\":1,\"4363\":1,\"4368\":1}}],[\"assertnotsame\",{\"1\":{\"4355\":1,\"4360\":1,\"4363\":1,\"4368\":1}}],[\"assertnotnull\",{\"1\":{\"4349\":1,\"4360\":1,\"4364\":1,\"4368\":1,\"4682\":1,\"4685\":1}}],[\"assertnull\",{\"1\":{\"4351\":1,\"4360\":1,\"4364\":1,\"4368\":1,\"4682\":1,\"4685\":1}}],[\"assertfalse\",{\"1\":{\"4347\":1,\"4360\":1,\"4365\":1,\"4368\":1,\"6967\":1}}],[\"assertequals\",{\"1\":{\"4326\":2,\"4343\":1,\"4360\":1,\"4362\":1,\"4368\":1,\"4407\":1,\"4682\":1,\"4685\":1,\"6967\":1}}],[\"assert\",{\"1\":{\"4326\":1,\"4360\":9,\"4368\":1,\"4407\":2,\"5271\":1,\"6962\":1}}],[\"assetstatus\",{\"1\":{\"3227\":1}}],[\"assign\",{\"1\":{\"5476\":1}}],[\"assignment\",{\"1\":{\"4042\":1,\"4048\":1,\"5350\":1}}],[\"assigned\",{\"1\":{\"266\":1,\"375\":1}}],[\"association\",{\"0\":{\"2863\":1,\"5795\":1},\"1\":{\"2864\":1,\"5798\":1}}],[\"asm\",{\"1\":{\"1882\":1,\"3274\":1,\"6118\":52,\"6296\":1}}],[\"ask\",{\"1\":{\"266\":1}}],[\"as\",{\"1\":{\"170\":1,\"246\":1,\"249\":1,\"255\":1,\"258\":1,\"274\":1,\"304\":1,\"311\":1,\"321\":1,\"332\":1,\"346\":1,\"350\":2,\"353\":1,\"360\":1,\"364\":1,\"368\":1,\"3374\":2,\"3388\":2,\"3389\":2,\"5529\":1,\"5530\":1,\"5805\":1,\"6065\":1,\"6083\":1,\"6118\":1,\"6201\":7,\"6698\":1}}],[\"a\",{\"0\":{\"175\":1,\"176\":1,\"179\":2,\"182\":2,\"185\":2,\"188\":1,\"192\":1,\"195\":1,\"215\":1,\"227\":1,\"265\":1,\"352\":1,\"5583\":1,\"5591\":1,\"5600\":1,\"5606\":3,\"5645\":1,\"5647\":2},\"1\":{\"54\":1,\"205\":1,\"214\":2,\"216\":1,\"219\":1,\"222\":1,\"225\":1,\"228\":1,\"231\":1,\"234\":1,\"237\":1,\"240\":1,\"243\":1,\"247\":1,\"250\":1,\"252\":1,\"253\":1,\"255\":1,\"256\":2,\"259\":1,\"263\":1,\"266\":2,\"268\":1,\"272\":1,\"309\":3,\"310\":2,\"326\":1,\"329\":5,\"332\":1,\"334\":1,\"336\":9,\"340\":1,\"341\":4,\"343\":2,\"344\":5,\"346\":2,\"347\":3,\"350\":1,\"353\":3,\"357\":2,\"358\":1,\"360\":2,\"362\":2,\"364\":2,\"365\":1,\"372\":2,\"375\":1,\"380\":1,\"384\":2,\"385\":3,\"387\":1,\"391\":2,\"408\":1,\"466\":1,\"1315\":4,\"1406\":7,\"1408\":2,\"1478\":2,\"1487\":2,\"1489\":3,\"2001\":1,\"2002\":3,\"2037\":2,\"2038\":1,\"2050\":1,\"2052\":2,\"2053\":2,\"2055\":1,\"2058\":9,\"2109\":3,\"2118\":14,\"2124\":22,\"2164\":1,\"2165\":1,\"2167\":1,\"2202\":1,\"2205\":2,\"2208\":3,\"2376\":2,\"2395\":3,\"2438\":2,\"2512\":1,\"2546\":5,\"2723\":1,\"2740\":3,\"2745\":1,\"2764\":1,\"2872\":1,\"2878\":1,\"2893\":1,\"2901\":1,\"2923\":1,\"2924\":1,\"2953\":2,\"2999\":1,\"3006\":1,\"3021\":1,\"3045\":1,\"3049\":3,\"3051\":2,\"3053\":2,\"3065\":1,\"3107\":1,\"3189\":3,\"3224\":2,\"3300\":1,\"3372\":3,\"3376\":1,\"4022\":1,\"4073\":1,\"4108\":1,\"4254\":2,\"4368\":1,\"4372\":4,\"4458\":1,\"4490\":1,\"4507\":2,\"4554\":1,\"4569\":1,\"4660\":4,\"4861\":1,\"4866\":1,\"4869\":1,\"4903\":1,\"4922\":1,\"4926\":1,\"4978\":2,\"4992\":1,\"5001\":12,\"5003\":4,\"5035\":4,\"5112\":1,\"5334\":2,\"5336\":1,\"5353\":2,\"5384\":3,\"5455\":1,\"5457\":1,\"5460\":1,\"5476\":3,\"5486\":8,\"5489\":1,\"5491\":5,\"5494\":5,\"5497\":1,\"5524\":1,\"5525\":4,\"5529\":3,\"5579\":1,\"5608\":3,\"5609\":1,\"5646\":3,\"5763\":2,\"5800\":1,\"5801\":1,\"5802\":1,\"5803\":1,\"6083\":3,\"6086\":2,\"6118\":1,\"6132\":1,\"6201\":20,\"6258\":1,\"6808\":1}}],[\"2nd\",{\"1\":{\"6690\":1}}],[\"27\",{\"1\":{\"3496\":1,\"4963\":1,\"4969\":1}}],[\"275\",{\"1\":{\"2983\":1}}],[\"28909673\",{\"1\":{\"6272\":1}}],[\"288\",{\"1\":{\"4374\":1}}],[\"28\",{\"1\":{\"3093\":2,\"3284\":1,\"4374\":1,\"4920\":1,\"4978\":1,\"5169\":1}}],[\"2954372\",{\"1\":{\"6271\":1}}],[\"292\",{\"1\":{\"4380\":1}}],[\"298\",{\"1\":{\"4380\":1}}],[\"290\",{\"1\":{\"4374\":1}}],[\"29\",{\"1\":{\"3086\":2,\"4978\":1}}],[\"255\",{\"1\":{\"3366\":1}}],[\"253\",{\"1\":{\"3229\":1}}],[\"25\",{\"1\":{\"3085\":1,\"3507\":1,\"4978\":1,\"5914\":1,\"6996\":1}}],[\"269代码生成器\",{\"1\":{\"6369\":1}}],[\"2656555\",{\"1\":{\"6273\":1}}],[\"266\",{\"1\":{\"4380\":1}}],[\"268\",{\"1\":{\"4374\":1}}],[\"263\",{\"1\":{\"3229\":1}}],[\"26\",{\"1\":{\"3085\":2,\"3211\":1,\"5169\":2}}],[\"240\",{\"1\":{\"3443\":1}}],[\"24\",{\"1\":{\"3079\":1,\"4963\":1,\"4969\":1,\"5599\":1}}],[\"245\",{\"1\":{\"2376\":1}}],[\"2d实现\",{\"1\":{\"6449\":1}}],[\"2d\",{\"1\":{\"3029\":1}}],[\"21\",{\"1\":{\"3012\":1,\"3284\":1,\"3520\":1,\"4374\":1}}],[\"2l\",{\"1\":{\"2409\":2,\"3037\":1}}],[\"222\",{\"1\":{\"5355\":2,\"5463\":2,\"5466\":1,\"5469\":1}}],[\"22\",{\"1\":{\"2409\":3,\"3523\":1,\"3532\":1,\"4407\":1,\"4963\":1,\"4969\":1,\"5133\":1,\"5914\":1}}],[\"220\",{\"1\":{\"520\":1,\"540\":1}}],[\"220v\",{\"1\":{\"516\":1,\"520\":4,\"535\":1,\"540\":4}}],[\"2个以上的类对象\",{\"1\":{\"1096\":1}}],[\"230\",{\"1\":{\"4374\":1}}],[\"23\",{\"1\":{\"946\":1,\"2603\":1,\"4407\":1,\"4978\":1,\"5169\":1,\"6996\":1}}],[\"2048\",{\"1\":{\"3230\":2}}],[\"2015\",{\"1\":{\"6698\":1}}],[\"2013\",{\"1\":{\"5022\":1,\"5243\":1,\"6274\":1}}],[\"2019\",{\"1\":{\"3519\":1}}],[\"2016\",{\"1\":{\"3483\":1}}],[\"2011\",{\"1\":{\"3083\":1}}],[\"2018\",{\"1\":{\"2983\":1,\"3515\":1}}],[\"2017\",{\"1\":{\"2983\":1,\"3078\":1,\"3487\":1,\"3490\":1,\"3493\":1,\"3496\":1,\"3499\":1,\"3503\":1,\"3507\":1,\"3511\":1,\"5077\":1,\"5582\":1,\"6270\":1}}],[\"20\",{\"1\":{\"1704\":1,\"2373\":1,\"2374\":1,\"3284\":1,\"3370\":1,\"3374\":1,\"3493\":1,\"3503\":1,\"3515\":1,\"4978\":1,\"5017\":1,\"5914\":1}}],[\"2002\",{\"1\":{\"5581\":1}}],[\"2000\",{\"1\":{\"4693\":2}}],[\"20009015\",{\"1\":{\"4669\":1,\"4700\":1}}],[\"2001\",{\"1\":{\"4324\":1}}],[\"200\",{\"1\":{\"1436\":2,\"3226\":1}}],[\"20cm\",{\"1\":{\"709\":1}}],[\"2022\",{\"1\":{\"3531\":1}}],[\"20220226231346103\",{\"1\":{\"2904\":1}}],[\"20220226231114471\",{\"1\":{\"2897\":1}}],[\"20220226232506081\",{\"1\":{\"2889\":1}}],[\"20220226232425687\",{\"1\":{\"2886\":1}}],[\"20220226230456728\",{\"1\":{\"2855\":1}}],[\"20220226225625153\",{\"1\":{\"2839\":1}}],[\"20220226225439452\",{\"1\":{\"2838\":1}}],[\"20220226103439980\",{\"1\":{\"2209\":1}}],[\"20220226103435911\",{\"1\":{\"2206\":1}}],[\"20220226103414310\",{\"1\":{\"2203\":1}}],[\"20220224203440696\",{\"1\":{\"2142\":1}}],[\"20220224203106674\",{\"1\":{\"2123\":1}}],[\"20220224200505149\",{\"1\":{\"2057\":1}}],[\"20220224195635097\",{\"1\":{\"2036\":1}}],[\"20220227141801967\",{\"1\":{\"1296\":1}}],[\"20220227140635359\",{\"1\":{\"1243\":1}}],[\"20220227140036784\",{\"1\":{\"1209\":1}}],[\"20220227134528102\",{\"1\":{\"1195\":1}}],[\"20220327001543029\",{\"1\":{\"2876\":1}}],[\"20220327001329079\",{\"1\":{\"2870\":1}}],[\"20220327001011970\",{\"1\":{\"2829\":1}}],[\"20220327001037848\",{\"1\":{\"2827\":1}}],[\"20220325225354561\",{\"1\":{\"1883\":1}}],[\"20220325225306403\",{\"1\":{\"1863\":1}}],[\"20220326235402075\",{\"1\":{\"2823\":1}}],[\"20220326223223254\",{\"1\":{\"1294\":1}}],[\"20220326223625612\",{\"1\":{\"1188\":1}}],[\"20220326222947461\",{\"1\":{\"1234\":1}}],[\"20220326114122266\",{\"1\":{\"2671\":1}}],[\"20220326113623976\",{\"1\":{\"2661\":1}}],[\"20220326182515064\",{\"1\":{\"2544\":1}}],[\"20220326181409122\",{\"1\":{\"2532\":1}}],[\"20220326181157415\",{\"1\":{\"2510\":1}}],[\"20220326180057205\",{\"1\":{\"2519\":1}}],[\"20220326183929550\",{\"1\":{\"1969\":1}}],[\"20220326184654465\",{\"1\":{\"1951\":1}}],[\"20220326184616770\",{\"1\":{\"1949\":1}}],[\"20220326162754094\",{\"1\":{\"1724\":1}}],[\"20220326162333026\",{\"1\":{\"1713\":1}}],[\"20220326160613310\",{\"1\":{\"1699\":1}}],[\"20220326160526405\",{\"1\":{\"1695\":1}}],[\"20220326161321893\",{\"1\":{\"1684\":1}}],[\"20220326165601510\",{\"1\":{\"1646\":1}}],[\"20220326165253607\",{\"1\":{\"1634\":1}}],[\"20220326164847860\",{\"1\":{\"1640\":1}}],[\"20220326163930542\",{\"1\":{\"1598\":1}}],[\"20220326163154437\",{\"1\":{\"1591\":1}}],[\"20220326163809453\",{\"1\":{\"1584\":1}}],[\"20220326155841174\",{\"1\":{\"1546\":1}}],[\"20220326155825142\",{\"1\":{\"1544\":1}}],[\"20220326155107325\",{\"1\":{\"1530\":1}}],[\"20220326154814205\",{\"1\":{\"1523\":1}}],[\"20220326172843488\",{\"1\":{\"2450\":1}}],[\"20220326172739237\",{\"1\":{\"2445\":1}}],[\"20220326173758893\",{\"1\":{\"2436\":1}}],[\"20220326171909429\",{\"1\":{\"1484\":1}}],[\"20220326171643437\",{\"1\":{\"1474\":1}}],[\"20220326170939660\",{\"1\":{\"1481\":1}}],[\"20220326123658042\",{\"1\":{\"2957\":1}}],[\"20220326123351242\",{\"1\":{\"2951\":1}}],[\"20220326122132691\",{\"1\":{\"791\":1}}],[\"20220326122114890\",{\"1\":{\"786\":1}}],[\"20220326121345564\",{\"1\":{\"774\":1}}],[\"20220326120837468\",{\"1\":{\"764\":1}}],[\"20220301175359902\",{\"1\":{\"1777\":1}}],[\"20220301174437773\",{\"1\":{\"1759\":1}}],[\"20220301174940372\",{\"1\":{\"1754\":1}}],[\"20220301171914376\",{\"1\":{\"1299\":1}}],[\"20220301195650273\",{\"1\":{\"705\":1}}],[\"20220301194218699\",{\"1\":{\"691\":1}}],[\"20220301201855363\",{\"1\":{\"716\":1}}],[\"20220307155052736\",{\"1\":{\"572\":1}}],[\"20220307154814117\",{\"1\":{\"563\":1}}],[\"20220307153329627\",{\"1\":{\"538\":1}}],[\"20220307113851301\",{\"1\":{\"518\":1}}],[\"20220307113604066\",{\"1\":{\"510\":1}}],[\"20220307113733499\",{\"1\":{\"507\":1}}],[\"20220316220549595\",{\"1\":{\"1899\":1}}],[\"20220316221211102\",{\"1\":{\"1831\":1}}],[\"20220316221946018\",{\"1\":{\"685\":1}}],[\"20220316215716168\",{\"1\":{\"1867\":1}}],[\"20220316213701600\",{\"1\":{\"1840\":1}}],[\"20220314192143394\",{\"1\":{\"1823\":1}}],[\"20220314191251956\",{\"1\":{\"1434\":1}}],[\"20220314190856461\",{\"1\":{\"1422\":1}}],[\"20220314190248901\",{\"1\":{\"1414\":1}}],[\"20220314190636066\",{\"1\":{\"1404\":1}}],[\"20220314190648003\",{\"1\":{\"1397\":1}}],[\"20220314180442486\",{\"1\":{\"1143\":1}}],[\"20220314180358602\",{\"1\":{\"1141\":1}}],[\"20220314175754422\",{\"1\":{\"1131\":1}}],[\"20220314175728964\",{\"1\":{\"1129\":1}}],[\"20220314175108493\",{\"1\":{\"1120\":1}}],[\"20220314175538719\",{\"1\":{\"1112\":1}}],[\"20220314170106903\",{\"1\":{\"830\":1}}],[\"20220314170025485\",{\"1\":{\"827\":1}}],[\"20220314162102077\",{\"1\":{\"931\":1}}],[\"20220314162328427\",{\"1\":{\"892\":1}}],[\"20220314161323609\",{\"1\":{\"920\":1}}],[\"20220314161222580\",{\"1\":{\"918\":1}}],[\"20220314160744377\",{\"1\":{\"911\":1}}],[\"20220314160422590\",{\"1\":{\"902\":1}}],[\"20220314165737331\",{\"1\":{\"862\":1}}],[\"20220314164610345\",{\"1\":{\"847\":1}}],[\"20220314164535175\",{\"1\":{\"824\":1}}],[\"20220314163646797\",{\"1\":{\"840\":1}}],[\"20220314163409100\",{\"1\":{\"837\":1}}],[\"20220314155454968\",{\"1\":{\"658\":1}}],[\"20220314154956046\",{\"1\":{\"631\":1}}],[\"20220314154935717\",{\"1\":{\"629\":1}}],[\"20220314154311971\",{\"1\":{\"619\":1}}],[\"20220314154132216\",{\"1\":{\"603\":1}}],[\"20220314153823688\",{\"1\":{\"611\":1}}],[\"20220314153744545\",{\"1\":{\"608\":1}}],[\"20220314150231277\",{\"1\":{\"532\":1}}],[\"20220314150218744\",{\"1\":{\"514\":1}}],[\"2021\",{\"1\":{\"3085\":1,\"3211\":1}}],[\"2020\",{\"1\":{\"113\":1,\"3085\":2,\"3523\":1,\"3527\":1}}],[\"2px\",{\"1\":{\"354\":1}}],[\"2\",{\"0\":{\"909\":1,\"3533\":1},\"1\":{\"4\":1,\"31\":14,\"83\":1,\"277\":1,\"338\":1,\"384\":1,\"473\":2,\"832\":1,\"834\":1,\"913\":1,\"926\":1,\"928\":2,\"1239\":1,\"1436\":1,\"1479\":1,\"1601\":1,\"1718\":1,\"1774\":1,\"1788\":1,\"1795\":1,\"1797\":1,\"1871\":1,\"1903\":1,\"1953\":1,\"2002\":2,\"2017\":1,\"2018\":1,\"2052\":1,\"2058\":2,\"2082\":1,\"2089\":1,\"2144\":2,\"2149\":2,\"2152\":1,\"2188\":1,\"2286\":1,\"2293\":1,\"2381\":1,\"2452\":1,\"2469\":1,\"2546\":3,\"2564\":1,\"2663\":1,\"2887\":1,\"2962\":1,\"2983\":1,\"3004\":1,\"3006\":2,\"3012\":2,\"3016\":1,\"3018\":1,\"3020\":1,\"3029\":1,\"3030\":1,\"3034\":1,\"3052\":1,\"3058\":1,\"3074\":1,\"3076\":1,\"3079\":1,\"3081\":2,\"3086\":3,\"3089\":1,\"3099\":1,\"3105\":1,\"3106\":2,\"3115\":1,\"3118\":1,\"3119\":1,\"3124\":1,\"3159\":1,\"3188\":5,\"3189\":1,\"3205\":1,\"3206\":1,\"3217\":1,\"3222\":1,\"3224\":1,\"3226\":1,\"3229\":1,\"3251\":1,\"3263\":1,\"3272\":1,\"3276\":1,\"3278\":1,\"3364\":1,\"3366\":1,\"3375\":1,\"3378\":1,\"3383\":1,\"3389\":1,\"3394\":1,\"3414\":1,\"3423\":1,\"3426\":1,\"3427\":1,\"3439\":1,\"3442\":1,\"3455\":1,\"3491\":1,\"3492\":1,\"3494\":1,\"3497\":1,\"3501\":1,\"3504\":1,\"3520\":1,\"3524\":1,\"3528\":1,\"3532\":2,\"3539\":1,\"4024\":1,\"4115\":4,\"4125\":1,\"4326\":1,\"4333\":1,\"4360\":3,\"4405\":2,\"4407\":2,\"4682\":1,\"4685\":1,\"4953\":1,\"4978\":2,\"5046\":1,\"5062\":1,\"5112\":7,\"5169\":2,\"5262\":1,\"5291\":1,\"5303\":1,\"5377\":1,\"5402\":1,\"5411\":1,\"5431\":1,\"5445\":1,\"5446\":1,\"5461\":1,\"5463\":2,\"5466\":3,\"5469\":3,\"5476\":1,\"5477\":1,\"5487\":1,\"5629\":1,\"5651\":1,\"5861\":1,\"5916\":2,\"6054\":1,\"6118\":1,\"6201\":1,\"6477\":1,\"6558\":1,\"6577\":1}}],[\"^\",{\"1\":{\"6118\":3}}],[\"^1\",{\"1\":{\"4\":1}}],[\"^0\",{\"1\":{\"4\":1}}],[\"tuples\",{\"0\":{\"6912\":1},\"1\":{\"6772\":1,\"6913\":1}}],[\"tutorial\",{\"1\":{\"5198\":1,\"5241\":1}}],[\"t0\",{\"1\":{\"6063\":2}}],[\"tps\",{\"1\":{\"5940\":1}}],[\"tps=cs3\",{\"1\":{\"5940\":1}}],[\"tp\",{\"1\":{\"5940\":1}}],[\"t在运行时才能被确定下来\",{\"1\":{\"5206\":1}}],[\"t是type的简称\",{\"1\":{\"5015\":1}}],[\"txt\",{\"1\":{\"4861\":1,\"4866\":1,\"4869\":1}}],[\"t3的方式命名\",{\"1\":{\"3389\":1}}],[\"t3\",{\"1\":{\"3389\":1}}],[\"tccl\",{\"1\":{\"6201\":4}}],[\"tcp\",{\"1\":{\"3443\":1}}],[\"tcp连接超时\",{\"1\":{\"3214\":1}}],[\"tcpudpdeal\",{\"1\":{\"2989\":2}}],[\"tcl\",{\"1\":{\"1272\":1}}],[\"tmpconstructor\",{\"1\":{\"6065\":3,\"6086\":1}}],[\"tmp\",{\"1\":{\"4861\":1,\"4866\":1,\"4869\":1,\"6109\":7}}],[\"tmall\",{\"1\":{\"3426\":1}}],[\"tm\",{\"1\":{\"2663\":2}}],[\"t>描述和说明\",{\"1\":{\"3497\":1}}],[\"t>不能使用get方法\",{\"1\":{\"3111\":1}}],[\"t>来接收返回的数据\",{\"1\":{\"3111\":1}}],[\"t>\",{\"1\":{\"2546\":1,\"3111\":2,\"4660\":1,\"5046\":2}}],[\"t2\",{\"1\":{\"2104\":2,\"3374\":2,\"3388\":2,\"3389\":4,\"4192\":1,\"6054\":2}}],[\"t1\",{\"1\":{\"2104\":3,\"3374\":3,\"3388\":3,\"3389\":3,\"6063\":3}}],[\"t\",{\"1\":{\"1525\":1,\"2546\":1,\"2711\":1,\"2726\":1,\"3104\":1,\"3467\":1,\"3952\":1,\"4046\":1,\"4192\":1,\"4193\":1,\"4548\":1,\"4627\":1,\"4631\":1,\"4633\":1,\"4635\":1,\"4644\":1,\"4660\":4,\"4908\":2,\"4972\":2,\"5003\":2,\"5015\":3,\"5017\":6,\"5020\":5,\"5042\":3,\"5044\":3,\"5046\":2,\"5055\":4,\"5062\":6,\"5064\":1,\"5099\":3,\"5102\":1,\"5112\":3,\"5149\":3,\"5188\":2,\"5189\":1,\"5190\":3,\"5205\":5,\"5210\":3,\"5213\":1,\"5214\":1,\"5224\":2,\"5226\":2,\"5229\":5,\"5234\":3,\"5350\":1,\"5356\":1,\"5539\":9,\"5761\":1,\"5853\":6,\"5910\":1,\"5933\":1,\"6065\":1,\"6086\":6,\"6111\":3,\"6114\":3,\"6118\":1,\"6180\":1,\"6201\":5,\"6258\":1,\"6834\":1,\"6967\":1,\"6969\":1}}],[\"typed\",{\"1\":{\"6470\":1}}],[\"type就是一个接口而已\",{\"1\":{\"6048\":1}}],[\"typevariable\",{\"1\":{\"5233\":1}}],[\"type体系中类型的包括\",{\"1\":{\"5233\":1}}],[\"type是java中所有类型的公共高级接口\",{\"1\":{\"5233\":1}}],[\"typeparameterandtypeuseannotation<\",{\"1\":{\"4660\":1}}],[\"type头来确定\",{\"1\":{\"3224\":1}}],[\"type=\",{\"1\":{\"1338\":2,\"1351\":2}}],[\"type\",{\"1\":{\"1315\":1,\"1360\":1,\"1427\":5,\"1429\":5,\"1974\":5,\"2144\":6,\"2149\":7,\"2152\":5,\"3042\":1,\"3224\":1,\"3375\":1,\"4132\":1,\"4519\":1,\"4523\":1,\"4590\":4,\"4607\":1,\"4612\":1,\"4656\":1,\"4658\":1,\"4659\":3,\"4660\":4,\"4943\":1,\"4949\":1,\"4963\":1,\"4995\":1,\"5035\":1,\"5064\":2,\"5070\":1,\"5077\":1,\"5196\":1,\"5205\":2,\"5232\":1,\"5234\":4,\"5236\":4,\"5356\":1,\"5524\":1,\"5539\":1,\"5551\":1,\"5558\":1,\"5819\":1,\"5825\":1,\"5924\":1,\"5926\":1,\"5940\":2,\"6030\":1,\"6032\":1,\"6036\":1,\"6038\":1,\"6049\":1,\"6118\":4,\"6201\":1}}],[\"typesafely\",{\"1\":{\"6951\":1}}],[\"typesafe统一查询\",{\"1\":{\"6350\":1}}],[\"types\",{\"0\":{\"257\":1},\"1\":{\"214\":1,\"258\":1,\"4563\":1,\"4589\":1,\"5355\":1,\"5528\":1,\"6118\":2}}],[\"tv\",{\"1\":{\"1601\":8,\"1603\":2,\"1605\":4,\"2089\":14}}],[\"tvoffcommand\",{\"1\":{\"777\":2,\"783\":4}}],[\"tvoncommand\",{\"1\":{\"777\":2,\"783\":4}}],[\"tvreceiver\",{\"1\":{\"777\":12,\"779\":1}}],[\"tech\",{\"1\":{\"4326\":1,\"4333\":1,\"4337\":1,\"4360\":1,\"4368\":1,\"4372\":1,\"4374\":1,\"4378\":1,\"4380\":1,\"4383\":1,\"4405\":1,\"4407\":1,\"4411\":1,\"4413\":1,\"4415\":1,\"4419\":1,\"4704\":1,\"4993\":1,\"5247\":1,\"6138\":1}}],[\"tes\",{\"1\":{\"3361\":1}}],[\"testng\",{\"1\":{\"6641\":1,\"6956\":1}}],[\"testnpe\",{\"1\":{\"4938\":1,\"4943\":1,\"4961\":1,\"4963\":1,\"4969\":1,\"4972\":1,\"4976\":1,\"4978\":1}}],[\"test$inner\",{\"1\":{\"5888\":1}}],[\"testtimes\",{\"1\":{\"4981\":7}}],[\"testtimedoutexception\",{\"1\":{\"4380\":1}}],[\"tester\",{\"1\":{\"6054\":1}}],[\"testexceptionhandling\",{\"1\":{\"4920\":5}}],[\"tested\",{\"1\":{\"4383\":1}}],[\"testobj\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"testworld\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"testhello\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"testmethod\",{\"1\":{\"6967\":1,\"6969\":1}}],[\"testmethodannotation\",{\"1\":{\"4644\":1,\"4647\":2,\"4649\":4}}],[\"testmethodorder\",{\"1\":{\"4419\":1}}],[\"testinheritedannotation被\",{\"1\":{\"4617\":1}}],[\"testinheritedannotation\",{\"1\":{\"4612\":1,\"4614\":1,\"4616\":1,\"4617\":1}}],[\"testing\",{\"0\":{\"6953\":1},\"1\":{\"4430\":1,\"4433\":1,\"6779\":1}}],[\"testdoc\",{\"1\":{\"4607\":1}}],[\"testdocannotation\",{\"1\":{\"4607\":2}}],[\"testdocannotation注解信息\",{\"1\":{\"4606\":1}}],[\"testb\",{\"1\":{\"4419\":1}}],[\"testblockforever\",{\"1\":{\"4383\":1}}],[\"testc\",{\"1\":{\"4419\":1}}],[\"testcase来实现\",{\"1\":{\"4681\":1}}],[\"testcase2\",{\"1\":{\"4333\":1}}],[\"testcase1\",{\"1\":{\"4333\":1,\"4378\":1,\"4380\":1}}],[\"testcase\",{\"1\":{\"2792\":1,\"4682\":1,\"6157\":1}}],[\"testa\",{\"1\":{\"4419\":1}}],[\"testasserttrue\",{\"1\":{\"4368\":1}}],[\"testassertthathamcrestcorematchers\",{\"1\":{\"4368\":1}}],[\"testassertthathasitems\",{\"1\":{\"4368\":1}}],[\"testassertthateveryitemcontainsstring\",{\"1\":{\"4368\":1}}],[\"testassertthatbothcontainsstring\",{\"1\":{\"4368\":1}}],[\"testassertsame\",{\"1\":{\"4368\":1}}],[\"testassertnull\",{\"1\":{\"4368\":1}}],[\"testassertnotsame\",{\"1\":{\"4368\":1}}],[\"testassertnotnull\",{\"1\":{\"4368\":1}}],[\"testassertfalse\",{\"1\":{\"4368\":1}}],[\"testassertequals\",{\"1\":{\"4368\":1}}],[\"testassertarrayequals\",{\"1\":{\"4368\":1}}],[\"testprimenumberchecker\",{\"1\":{\"4407\":1}}],[\"testsay\",{\"1\":{\"4682\":1,\"4685\":1}}],[\"testsuit\",{\"1\":{\"4487\":1}}],[\"testsuite\",{\"1\":{\"2792\":1,\"4411\":1,\"4413\":1,\"4415\":1}}],[\"testsleepfortoolong\",{\"1\":{\"4383\":1}}],[\"test注解一起使用\",{\"1\":{\"4376\":1}}],[\"test注解在方法上标记方法为测试方法\",{\"1\":{\"4327\":1}}],[\"test注解的一些函数\",{\"1\":{\"4310\":1,\"4394\":1}}],[\"test就行了\",{\"1\":{\"4293\":1}}],[\"test2<t>\",{\"1\":{\"5210\":1,\"5213\":1}}],[\"test2\",{\"1\":{\"473\":1,\"4660\":1}}],[\"test\",{\"0\":{\"4463\":1,\"4480\":1,\"4484\":1},\"1\":{\"466\":1,\"469\":1,\"1336\":1,\"1353\":1,\"2792\":1,\"3045\":2,\"3281\":1,\"3283\":1,\"3305\":1,\"3308\":1,\"3316\":1,\"4171\":2,\"4292\":1,\"4296\":1,\"4326\":3,\"4333\":5,\"4337\":4,\"4360\":6,\"4368\":14,\"4371\":2,\"4372\":6,\"4374\":2,\"4376\":1,\"4378\":3,\"4380\":1,\"4383\":3,\"4395\":1,\"4407\":3,\"4411\":2,\"4413\":2,\"4415\":1,\"4419\":4,\"4460\":1,\"4464\":1,\"4465\":1,\"4466\":1,\"4467\":1,\"4469\":2,\"4473\":2,\"4475\":1,\"4477\":1,\"4481\":2,\"4485\":2,\"4507\":2,\"4614\":2,\"4644\":1,\"4649\":1,\"4660\":1,\"4684\":1,\"4685\":4,\"4981\":4,\"5035\":1,\"5090\":1,\"5093\":1,\"5112\":7,\"5133\":1,\"5169\":6,\"5188\":1,\"5525\":3,\"5733\":1,\"5853\":3,\"5855\":4,\"5883\":1,\"5888\":8,\"6054\":3,\"6962\":1,\"6964\":1}}],[\"teardown\",{\"1\":{\"4481\":2,\"4682\":2,\"4685\":1}}],[\"teamcity\",{\"1\":{\"6333\":1}}],[\"team\",{\"1\":{\"4367\":1,\"4368\":1,\"4422\":1}}],[\"teas\",{\"1\":{\"2869\":1,\"2875\":4}}],[\"teaching\",{\"1\":{\"2875\":1}}],[\"teacher\",{\"1\":{\"2875\":3}}],[\"teacherdaoproxy\",{\"1\":{\"1836\":1,\"1842\":2,\"1844\":4}}],[\"teacherdao\",{\"1\":{\"1835\":1,\"1842\":1,\"1844\":4,\"1869\":1,\"1873\":1,\"1901\":1,\"1905\":4}}],[\"teach\",{\"1\":{\"1842\":4,\"1844\":1,\"1869\":2,\"1873\":1,\"1901\":1,\"1905\":1}}],[\"terminated\",{\"1\":{\"3000\":2}}],[\"terminalexpression\",{\"1\":{\"1476\":1}}],[\"terminal\",{\"1\":{\"1469\":1}}],[\"tercher\",{\"1\":{\"2869\":1}}],[\"temporaryres\",{\"1\":{\"6076\":2}}],[\"tempfunctiontest\",{\"1\":{\"6054\":3}}],[\"temp\",{\"1\":{\"5044\":2}}],[\"temperatrue\",{\"1\":{\"1702\":3,\"1718\":4}}],[\"temperature\",{\"1\":{\"1702\":7,\"1716\":11,\"1718\":2}}],[\"templatemethodpattern\",{\"1\":{\"2663\":1}}],[\"templatemethod\",{\"1\":{\"2663\":2}}],[\"template\",{\"1\":{\"1028\":1,\"2621\":1,\"2638\":2,\"2744\":1}}],[\"textonetwohard\",{\"1\":{\"388\":1}}],[\"text|\",{\"1\":{\"387\":1}}],[\"text|b\",{\"1\":{\"225\":1}}],[\"texttext2abc\",{\"1\":{\"248\":1}}],[\"text2\",{\"1\":{\"247\":1,\"347\":1}}],[\"textab\",{\"1\":{\"226\":1,\"229\":1,\"232\":1,\"238\":1,\"244\":1}}],[\"text\",{\"0\":{\"221\":1,\"227\":1,\"236\":1,\"242\":1},\"1\":{\"177\":1,\"178\":1,\"180\":1,\"181\":1,\"186\":1,\"187\":1,\"189\":1,\"190\":1,\"193\":1,\"194\":1,\"196\":1,\"197\":1,\"199\":1,\"200\":1,\"202\":1,\"203\":1,\"211\":1,\"212\":1,\"214\":1,\"222\":1,\"223\":1,\"231\":1,\"237\":1,\"243\":1,\"247\":1,\"304\":1,\"305\":1,\"306\":1,\"335\":1,\"346\":1,\"347\":2,\"385\":2,\"4244\":1,\"4368\":2}}],[\"tex\",{\"0\":{\"96\":1}}],[\"tweetability\",{\"1\":{\"2738\":1,\"2739\":5}}],[\"tweetable\",{\"1\":{\"2735\":1,\"2736\":3,\"2739\":2}}],[\"tweet\",{\"1\":{\"2736\":3,\"2738\":1,\"2739\":2}}],[\"twitter官方账号\",{\"1\":{\"6707\":1,\"6710\":1}}],[\"twitter\",{\"0\":{\"6699\":1},\"1\":{\"380\":1}}],[\"two\",{\"1\":{\"267\":2,\"315\":1,\"322\":4,\"387\":1,\"388\":1,\"450\":1,\"453\":1,\"455\":1,\"1953\":2,\"3037\":2,\"4368\":1}}],[\"tapestry\",{\"1\":{\"6665\":1}}],[\"tapromotion\",{\"1\":{\"2989\":2}}],[\"takipi\",{\"1\":{\"6524\":1,\"6736\":1}}],[\"taking\",{\"1\":{\"6118\":1}}],[\"take\",{\"1\":{\"255\":1,\"6109\":1}}],[\"tao\",{\"1\":{\"5169\":6}}],[\"taobao\",{\"1\":{\"2987\":1,\"3009\":1,\"3010\":1,\"3011\":1,\"3290\":1,\"3426\":2}}],[\"task\",{\"1\":{\"3157\":2,\"3361\":1}}],[\"targetmethodref\",{\"1\":{\"6118\":1}}],[\"targetclass\",{\"1\":{\"6118\":3}}],[\"target注解用来说明那些被它所注解的注解类可修饰的对象范围\",{\"1\":{\"4589\":1}}],[\"target注解的作用是\",{\"1\":{\"4588\":1}}],[\"target用于标明注解使用的范围\",{\"1\":{\"4502\":1}}],[\"target>\",{\"1\":{\"4324\":1}}],[\"target\",{\"0\":{\"4587\":1},\"1\":{\"340\":1,\"499\":1,\"1842\":5,\"1871\":8,\"1873\":2,\"1903\":8,\"1905\":2,\"4132\":1,\"4502\":1,\"4515\":1,\"4519\":1,\"4523\":1,\"4586\":1,\"4589\":1,\"4607\":2,\"4612\":1,\"4642\":2,\"4660\":2,\"4690\":1,\"4943\":1,\"4948\":1,\"4963\":1,\"6118\":5}}],[\"tabs\",{\"1\":{\"3024\":1}}],[\"tab\",{\"1\":{\"329\":1,\"340\":1,\"341\":2,\"3024\":1,\"6271\":1}}],[\"table在功能上与不带where子句的delete语句相同\",{\"1\":{\"3392\":1}}],[\"table比delete速度快\",{\"1\":{\"3392\":1}}],[\"table\",{\"1\":{\"274\":1,\"3382\":1,\"3383\":1,\"3388\":2,\"3389\":2,\"3402\":1,\"4937\":1,\"4943\":1,\"4944\":1,\"4963\":1}}],[\"trove\",{\"1\":{\"6438\":1}}],[\"troublesome\",{\"1\":{\"304\":1}}],[\"truth\",{\"1\":{\"6642\":1}}],[\"truck\",{\"1\":{\"5782\":2}}],[\"truncate\",{\"1\":{\"3392\":2}}],[\"truefield\",{\"1\":{\"438\":5}}],[\"truetest\",{\"1\":{\"435\":1}}],[\"true\",{\"0\":{\"5612\":1},\"1\":{\"2\":1,\"49\":1,\"344\":3,\"435\":2,\"438\":3,\"441\":2,\"443\":1,\"464\":1,\"1351\":1,\"1436\":2,\"1525\":1,\"1537\":2,\"2286\":1,\"2293\":1,\"2298\":1,\"2304\":1,\"2310\":1,\"2313\":1,\"2320\":1,\"2454\":1,\"2677\":1,\"3051\":1,\"3053\":1,\"4368\":2,\"4405\":1,\"4407\":3,\"4690\":1,\"5090\":1,\"5267\":1,\"5273\":1,\"5275\":1,\"5311\":1,\"5313\":1,\"5420\":1,\"5422\":1,\"5424\":1,\"5427\":1,\"5434\":1,\"5436\":1,\"5440\":1,\"5445\":1,\"5646\":1,\"5654\":2,\"5656\":2,\"5914\":1,\"5964\":1,\"5980\":1,\"6017\":1,\"6044\":1,\"6059\":1,\"6065\":1,\"6076\":1,\"6083\":1,\"6090\":1,\"6099\":2,\"6180\":1,\"6258\":3}}],[\"tree命令\",{\"1\":{\"3429\":1}}],[\"tree的最左前缀匹配特性\",{\"1\":{\"3371\":1}}],[\"treeset是order\",{\"1\":{\"3152\":1}}],[\"treemap\",{\"1\":{\"3136\":1}}],[\"treated\",{\"1\":{\"346\":1}}],[\"trisha\",{\"1\":{\"6721\":1}}],[\"trim\",{\"1\":{\"6118\":1,\"6201\":3,\"6258\":1}}],[\"trial\",{\"1\":{\"4368\":2}}],[\"triangle\",{\"1\":{\"2149\":3,\"2152\":3}}],[\"triggered\",{\"1\":{\"334\":1,\"344\":1}}],[\"trampoline等特性\",{\"1\":{\"6413\":1}}],[\"travis\",{\"1\":{\"6334\":1,\"6880\":1}}],[\"transform\",{\"1\":{\"6906\":1}}],[\"transfermoney\",{\"1\":{\"4175\":1}}],[\"transfer\",{\"1\":{\"3421\":1,\"3537\":1}}],[\"transient\",{\"1\":{\"4157\":1}}],[\"transactional事务不要滥用\",{\"1\":{\"3403\":1}}],[\"trace\",{\"1\":{\"3257\":1}}],[\"trade\",{\"1\":{\"3287\":1,\"3361\":1}}],[\"tradeid\",{\"1\":{\"3009\":1,\"3010\":1,\"3011\":1}}],[\"traditional\",{\"1\":{\"1315\":1}}],[\"trapezoid\",{\"0\":{\"204\":1,\"207\":1}}],[\"try<user>\",{\"1\":{\"6927\":1}}],[\"trying\",{\"1\":{\"6201\":5}}],[\"trycatchreturn\",{\"1\":{\"4976\":2,\"4978\":4}}],[\"try语句块监控代码\",{\"1\":{\"4802\":1}}],[\"try语句块中的语句逐一被执行\",{\"1\":{\"4776\":1}}],[\"trywithresourcetest\",{\"1\":{\"4796\":1}}],[\"try块没有引发异常\",{\"1\":{\"4784\":1}}],[\"try块中引起异常\",{\"1\":{\"4784\":1}}],[\"try块中的return语句执行成功后\",{\"1\":{\"3271\":1,\"4930\":1}}],[\"tryacquire\",{\"1\":{\"3199\":1}}],[\"trylock\",{\"1\":{\"3172\":1}}],[\"try\",{\"0\":{\"4767\":1,\"4772\":1,\"4782\":1,\"4792\":1,\"4858\":1},\"1\":{\"438\":1,\"1315\":1,\"1356\":2,\"1366\":1,\"1772\":1,\"1795\":2,\"2473\":1,\"3164\":1,\"3168\":1,\"3170\":1,\"3172\":1,\"3265\":1,\"3272\":1,\"4016\":1,\"4019\":1,\"4022\":1,\"4231\":1,\"4233\":1,\"4647\":2,\"4682\":1,\"4693\":1,\"4736\":1,\"4757\":1,\"4763\":1,\"4764\":1,\"4765\":1,\"4766\":1,\"4768\":1,\"4769\":1,\"4771\":1,\"4774\":1,\"4781\":2,\"4785\":1,\"4786\":1,\"4793\":1,\"4796\":1,\"4799\":1,\"4801\":2,\"4853\":1,\"4861\":1,\"4862\":3,\"4863\":1,\"4865\":2,\"4866\":2,\"4867\":1,\"4868\":2,\"4869\":1,\"4902\":1,\"4903\":1,\"4908\":1,\"4911\":1,\"4914\":1,\"4918\":1,\"4922\":1,\"4926\":1,\"4932\":1,\"4938\":1,\"4959\":1,\"4961\":1,\"4969\":1,\"4972\":1,\"4976\":1,\"4981\":1,\"5219\":1,\"5221\":1,\"5224\":1,\"5226\":1,\"5229\":1,\"5271\":1,\"5457\":1,\"5463\":1,\"5466\":1,\"5534\":1,\"5561\":1,\"5662\":2,\"5670\":1,\"5703\":1,\"5706\":1,\"6054\":1,\"6063\":1,\"6065\":2,\"6076\":1,\"6118\":1,\"6180\":3,\"6201\":9,\"6258\":4,\"6817\":1,\"6834\":1,\"6835\":1,\"6924\":1,\"6926\":1,\"6927\":1}}],[\"tb\",{\"1\":{\"165\":1,\"169\":1,\"253\":1,\"256\":1,\"315\":1,\"318\":1,\"322\":1,\"326\":1}}],[\"tdd\",{\"1\":{\"4446\":1}}],[\"td\",{\"1\":{\"165\":1,\"170\":1,\"199\":1,\"202\":1,\"205\":1,\"208\":1,\"211\":1,\"268\":1,\"272\":1,\"380\":1}}],[\"tojson\",{\"1\":{\"6910\":1}}],[\"tojsonstring\",{\"1\":{\"4693\":2}}],[\"tolist\",{\"1\":{\"6851\":1}}],[\"touppercase\",{\"1\":{\"6851\":1,\"6853\":1,\"6927\":1}}],[\"togenericstring\",{\"1\":{\"5937\":1,\"5940\":1,\"5982\":1,\"6046\":1}}],[\"toajax\",{\"1\":{\"4696\":3}}],[\"toarray\",{\"1\":{\"3105\":1,\"3107\":1,\"3520\":1}}],[\"token\",{\"1\":{\"2699\":1,\"2700\":2,\"2705\":2,\"2711\":2,\"4058\":1,\"4092\":1,\"6603\":2}}],[\"toyduck\",{\"1\":{\"2525\":3,\"2526\":1,\"2539\":2,\"2541\":4}}],[\"tobytearray\",{\"1\":{\"1795\":1}}],[\"today\",{\"1\":{\"1702\":3,\"1716\":3}}],[\"todo\",{\"1\":{\"1356\":1,\"1360\":2,\"3222\":1,\"6201\":1}}],[\"tostringexample\",{\"1\":{\"5450\":1,\"5451\":5}}],[\"tostringmethod\",{\"1\":{\"4644\":1,\"4649\":1}}],[\"tostring的简单类\",{\"1\":{\"3534\":1}}],[\"tostring时\",{\"1\":{\"3062\":1}}],[\"tostring\",{\"0\":{\"5449\":1},\"1\":{\"1525\":2,\"1761\":1,\"1772\":1,\"2546\":2,\"3062\":1,\"4081\":1,\"4082\":1,\"4102\":1,\"4614\":1,\"4644\":3,\"4649\":2,\"4759\":1,\"5042\":2,\"5044\":2,\"5334\":1,\"5416\":1,\"5451\":1,\"5679\":1,\"5853\":1,\"5887\":1,\"5914\":4,\"5964\":1,\"6015\":1,\"6049\":1,\"6118\":3,\"6258\":1}}],[\"tomee\",{\"1\":{\"6613\":1}}],[\"tomcat加java\",{\"1\":{\"6613\":1}}],[\"tomcat\",{\"1\":{\"6612\":1}}],[\"tomcat默认限制为2mb\",{\"1\":{\"3231\":1}}],[\"tomap\",{\"1\":{\"3093\":1,\"3095\":1,\"3099\":1,\"3524\":1}}],[\"tom\",{\"1\":{\"1431\":1,\"1756\":3,\"1763\":1,\"1774\":1,\"1873\":1}}],[\"toolkit\",{\"1\":{\"6667\":1}}],[\"tools\",{\"0\":{\"6971\":1},\"1\":{\"5525\":1,\"5579\":1,\"6783\":1}}],[\"tool\",{\"1\":{\"3426\":1,\"6401\":1,\"6446\":1}}],[\"tooltip\",{\"1\":{\"333\":1,\"335\":2,\"336\":4,\"338\":1,\"344\":2}}],[\"too\",{\"1\":{\"255\":2,\"3444\":1,\"4095\":1}}],[\"to\",{\"0\":{\"307\":1},\"1\":{\"165\":1,\"166\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"214\":2,\"249\":1,\"255\":2,\"262\":1,\"266\":4,\"267\":1,\"270\":1,\"271\":1,\"274\":1,\"304\":2,\"308\":1,\"311\":1,\"321\":2,\"325\":1,\"329\":4,\"338\":2,\"339\":1,\"340\":2,\"346\":2,\"350\":6,\"353\":2,\"357\":2,\"360\":1,\"362\":2,\"364\":2,\"368\":1,\"375\":1,\"378\":1,\"385\":1,\"390\":1,\"391\":3,\"1315\":2,\"1603\":2,\"2001\":1,\"2693\":1,\"2840\":1,\"3100\":1,\"4481\":2,\"4530\":1,\"4533\":2,\"4536\":2,\"4539\":2,\"4542\":2,\"4545\":2,\"4548\":2,\"4551\":2,\"4554\":2,\"4557\":2,\"4560\":2,\"4563\":2,\"4566\":2,\"4569\":2,\"4572\":2,\"4575\":2,\"4578\":2,\"4581\":2,\"4584\":2,\"4861\":1,\"4866\":1,\"4869\":1,\"4943\":1,\"4947\":1,\"4963\":1,\"5279\":1,\"5398\":1,\"5476\":1,\"5524\":3,\"5525\":4,\"5527\":2,\"5529\":1,\"5530\":1,\"5578\":1,\"5608\":1,\"6063\":1,\"6065\":2,\"6076\":2,\"6083\":1,\"6086\":2,\"6096\":1,\"6109\":2,\"6111\":2,\"6114\":2,\"6118\":5,\"6201\":22,\"6834\":1,\"6996\":2}}],[\"topb1f1i1b2f2i2ab\",{\"1\":{\"327\":1}}],[\"top\",{\"1\":{\"165\":1,\"169\":1,\"170\":2,\"171\":1,\"326\":2,\"340\":1,\"6271\":1}}],[\"tochararray\",{\"1\":{\"1489\":1,\"1491\":1}}],[\"toc\",{\"1\":{\"127\":1}}],[\"thoughts\",{\"1\":{\"6738\":1}}],[\"thoughtwork开源解决方案\",{\"1\":{\"6331\":1}}],[\"thymeleaf\",{\"1\":{\"6622\":1}}],[\"thumbnailator是一个高质量java缩略图开发库\",{\"1\":{\"6451\":1}}],[\"thumbnailator\",{\"1\":{\"6451\":1}}],[\"th\",{\"1\":{\"1315\":4}}],[\"through\",{\"0\":{\"4123\":1},\"1\":{\"4124\":2,\"4125\":1}}],[\"throwifcondition\",{\"1\":{\"6840\":1}}],[\"throwing\",{\"1\":{\"4693\":1}}],[\"throwexception\",{\"1\":{\"6065\":1}}],[\"thrown\",{\"1\":{\"6063\":1}}],[\"throw等中断逻辑的右大括号后需要加一个空行\",{\"1\":{\"3191\":1}}],[\"throwable>\",{\"1\":{\"5224\":1,\"5226\":1,\"5229\":1}}],[\"throwable\",{\"0\":{\"4711\":1,\"4904\":1},\"1\":{\"1871\":1,\"1903\":2,\"4647\":1,\"4712\":1,\"4713\":1,\"4714\":1,\"4759\":1,\"4905\":1,\"4906\":1,\"4907\":1,\"4908\":1,\"4925\":1,\"4972\":1,\"5229\":1,\"5416\":1,\"5533\":1,\"6118\":2,\"6180\":1,\"6258\":1}}],[\"throws抛出异常的规则\",{\"1\":{\"4747\":1}}],[\"throws\",{\"0\":{\"4741\":1},\"1\":{\"1491\":3,\"1793\":1,\"1795\":1,\"1797\":1,\"1871\":1,\"1903\":2,\"4251\":1,\"4378\":1,\"4383\":2,\"4644\":1,\"4649\":1,\"4682\":2,\"4685\":1,\"4693\":3,\"4740\":1,\"4743\":1,\"4745\":1,\"4746\":1,\"4757\":1,\"4781\":1,\"4798\":1,\"4804\":1,\"4895\":1,\"4896\":2,\"4922\":1,\"4926\":1,\"5093\":1,\"5160\":1,\"5190\":1,\"5229\":1,\"5416\":5,\"5457\":1,\"5460\":1,\"5463\":1,\"5466\":1,\"5703\":1,\"5704\":1,\"5853\":1,\"5883\":1,\"5888\":1,\"5914\":1,\"5962\":1,\"6013\":1,\"6015\":3,\"6059\":1,\"6063\":3,\"6065\":1,\"6071\":1,\"6086\":3,\"6090\":1,\"6107\":1,\"6111\":2,\"6114\":1,\"6199\":1,\"6201\":1,\"6258\":5}}],[\"throw\",{\"0\":{\"4752\":1},\"1\":{\"850\":2,\"1356\":1,\"1366\":3,\"2370\":2,\"2467\":8,\"2726\":1,\"3097\":1,\"4679\":1,\"4739\":1,\"4754\":1,\"4757\":1,\"4781\":1,\"4805\":1,\"4918\":1,\"4922\":1,\"4926\":1,\"4981\":1,\"5229\":1,\"5703\":1,\"5705\":1,\"6063\":1,\"6065\":2,\"6071\":1,\"6083\":1,\"6086\":1,\"6090\":1,\"6118\":2,\"6201\":1,\"6258\":5,\"6834\":1}}],[\"threshold\",{\"1\":{\"3201\":1}}],[\"thread则会终止\",{\"1\":{\"4956\":1}}],[\"threadfactory\",{\"1\":{\"3157\":1}}],[\"thread\",{\"1\":{\"2397\":1,\"3000\":2,\"3157\":6,\"3162\":1,\"4380\":5,\"4920\":1,\"6116\":1,\"6118\":1,\"6201\":1,\"6258\":1,\"6927\":1}}],[\"threadlocal无法解决共享对象的更新问题\",{\"1\":{\"3182\":1}}],[\"threadlocal对象使用static修饰\",{\"1\":{\"3182\":1}}],[\"threadlocalrandom\",{\"1\":{\"3177\":1}}],[\"threadlocal<dateformat>\",{\"1\":{\"3161\":2}}],[\"threadlocal\",{\"1\":{\"2396\":2}}],[\"threeten\",{\"1\":{\"6360\":1}}],[\"three都要增加几个空格\",{\"1\":{\"3037\":1}}],[\"threeonec2c1twob2b1a2a1\",{\"1\":{\"316\":1,\"323\":1}}],[\"three\",{\"1\":{\"315\":1,\"322\":2,\"3037\":1,\"4368\":2}}],[\"that\",{\"0\":{\"303\":1},\"1\":{\"267\":1,\"350\":1,\"357\":1,\"368\":1,\"382\":1,\"2103\":1,\"4231\":1,\"4548\":1,\"4551\":1,\"4922\":1,\"4926\":1,\"5440\":4,\"5528\":1,\"5530\":1,\"6081\":1,\"6083\":1,\"6086\":1,\"6111\":1,\"6114\":1,\"6118\":1,\"6201\":8}}],[\"than\",{\"1\":{\"266\":1,\"267\":1,\"270\":1,\"357\":1,\"2001\":1,\"5528\":1}}],[\"thing\",{\"1\":{\"6118\":1}}],[\"think\",{\"1\":{\"5587\":1,\"6201\":1}}],[\"thinking\",{\"1\":{\"5586\":1,\"5587\":1,\"5588\":2,\"5819\":1,\"6693\":1}}],[\"thinkwon\",{\"1\":{\"4990\":1}}],[\"third\",{\"1\":{\"4419\":1,\"6201\":1,\"6867\":1}}],[\"thicker\",{\"1\":{\"353\":1}}],[\"thick\",{\"0\":{\"239\":1,\"242\":1},\"1\":{\"274\":1,\"287\":1,\"291\":1}}],[\"thisclassloader\",{\"1\":{\"6201\":2}}],[\"thisclass\",{\"1\":{\"6118\":2}}],[\"this和super不能出现在同一个构造器中\",{\"1\":{\"5729\":1}}],[\"this在同一类中调用其他构造均需要放在第一行\",{\"1\":{\"5727\":1}}],[\"this\",{\"0\":{\"5725\":1},\"1\":{\"164\":1,\"165\":1,\"166\":1,\"177\":1,\"178\":1,\"180\":1,\"181\":1,\"186\":1,\"187\":1,\"190\":1,\"191\":1,\"193\":1,\"194\":1,\"196\":1,\"197\":1,\"199\":1,\"200\":1,\"202\":1,\"203\":1,\"211\":1,\"212\":1,\"222\":1,\"223\":1,\"226\":1,\"255\":2,\"305\":1,\"306\":1,\"325\":1,\"329\":1,\"336\":2,\"339\":1,\"340\":1,\"341\":2,\"344\":2,\"347\":1,\"357\":1,\"385\":1,\"391\":1,\"540\":1,\"605\":1,\"624\":2,\"707\":3,\"711\":2,\"766\":2,\"832\":1,\"834\":1,\"850\":4,\"894\":1,\"922\":2,\"926\":1,\"1136\":6,\"1336\":3,\"1356\":3,\"1366\":1,\"1406\":3,\"1425\":2,\"1427\":1,\"1487\":4,\"1489\":2,\"1525\":2,\"1533\":4,\"1537\":2,\"1539\":1,\"1586\":4,\"1603\":15,\"1636\":4,\"1649\":4,\"1651\":1,\"1653\":6,\"1702\":7,\"1716\":6,\"1718\":6,\"1761\":6,\"1772\":6,\"1793\":2,\"1795\":1,\"1842\":1,\"1871\":1,\"1903\":3,\"1953\":1,\"1972\":6,\"1974\":3,\"2089\":4,\"2124\":1,\"2188\":3,\"2194\":3,\"2370\":2,\"2372\":2,\"2376\":2,\"2406\":1,\"2409\":2,\"2438\":3,\"2452\":6,\"2454\":4,\"2469\":2,\"2471\":9,\"2512\":1,\"2539\":2,\"2746\":2,\"2836\":1,\"2875\":1,\"2888\":2,\"2948\":1,\"2953\":2,\"2962\":3,\"3018\":1,\"3069\":1,\"3070\":2,\"3091\":1,\"3179\":1,\"4021\":2,\"4022\":1,\"4095\":2,\"4152\":3,\"4254\":1,\"4407\":2,\"4861\":1,\"4908\":1,\"4911\":1,\"4914\":2,\"4981\":1,\"5015\":1,\"5017\":4,\"5020\":3,\"5042\":3,\"5044\":3,\"5099\":1,\"5101\":1,\"5149\":1,\"5153\":1,\"5156\":1,\"5164\":1,\"5234\":1,\"5334\":3,\"5369\":1,\"5402\":3,\"5440\":4,\"5451\":1,\"5490\":1,\"5491\":2,\"5497\":1,\"5529\":1,\"5539\":1,\"5730\":1,\"5825\":2,\"5853\":4,\"5914\":5,\"6063\":5,\"6065\":3,\"6076\":5,\"6081\":2,\"6083\":5,\"6096\":1,\"6109\":1,\"6111\":3,\"6116\":1,\"6118\":10,\"6201\":9,\"6258\":2,\"6798\":2,\"6801\":1,\"6808\":4,\"6810\":1,\"6827\":3}}],[\"theories\",{\"1\":{\"6958\":1}}],[\"theserverside\",{\"1\":{\"6737\":1}}],[\"these\",{\"1\":{\"4179\":1,\"6076\":1,\"6096\":1,\"7012\":1}}],[\"theaterlight\",{\"1\":{\"1134\":8,\"1136\":6}}],[\"theunsafe\",{\"1\":{\"464\":1}}],[\"their\",{\"1\":{\"346\":1,\"5523\":1,\"5528\":1,\"6201\":1}}],[\"therefore\",{\"1\":{\"5530\":1}}],[\"there\",{\"1\":{\"258\":1,\"262\":1,\"385\":1,\"2001\":1}}],[\"then\",{\"1\":{\"252\":1,\"5527\":1,\"6063\":1,\"6201\":1,\"6927\":2}}],[\"the\",{\"0\":{\"185\":1,\"6804\":1,\"6983\":1},\"1\":{\"164\":2,\"165\":1,\"166\":1,\"177\":2,\"178\":2,\"180\":2,\"181\":2,\"186\":2,\"187\":2,\"189\":2,\"190\":2,\"191\":1,\"193\":2,\"194\":2,\"196\":2,\"197\":2,\"199\":2,\"200\":2,\"202\":2,\"203\":2,\"211\":2,\"212\":2,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"246\":1,\"249\":1,\"252\":1,\"255\":5,\"262\":1,\"266\":6,\"267\":2,\"270\":2,\"271\":8,\"274\":2,\"304\":1,\"305\":2,\"306\":2,\"308\":1,\"317\":1,\"321\":2,\"325\":4,\"329\":1,\"331\":2,\"332\":5,\"335\":4,\"338\":2,\"339\":1,\"340\":2,\"346\":4,\"350\":11,\"357\":2,\"358\":1,\"364\":3,\"368\":2,\"379\":2,\"382\":1,\"384\":4,\"385\":2,\"386\":4,\"390\":2,\"391\":5,\"1315\":3,\"4254\":1,\"4255\":2,\"4260\":1,\"4261\":1,\"4481\":2,\"4861\":1,\"4866\":1,\"4869\":1,\"4922\":1,\"4926\":1,\"5035\":3,\"5271\":1,\"5279\":1,\"5287\":1,\"5403\":1,\"5524\":2,\"5527\":1,\"5530\":2,\"5576\":1,\"5578\":1,\"5579\":1,\"5825\":3,\"6063\":5,\"6065\":7,\"6076\":1,\"6083\":7,\"6086\":1,\"6096\":1,\"6109\":2,\"6111\":1,\"6114\":1,\"6118\":7,\"6201\":45,\"6735\":1,\"6736\":1,\"6750\":1,\"6787\":1,\"6927\":1,\"6951\":1,\"7005\":1}}],[\"tigase\",{\"1\":{\"6507\":1}}],[\"tidb\",{\"1\":{\"6396\":1}}],[\"ti\",{\"1\":{\"6081\":1}}],[\"tinyint\",{\"1\":{\"3351\":1,\"3366\":1}}],[\"tim\",{\"1\":{\"6720\":1}}],[\"timsort\",{\"1\":{\"2546\":1}}],[\"times\",{\"1\":{\"6840\":1}}],[\"timestamp时\",{\"1\":{\"3081\":1}}],[\"timestamp\",{\"1\":{\"3081\":1}}],[\"time4j\",{\"1\":{\"6359\":1}}],[\"time是实际使用的时间日期库标准\",{\"1\":{\"6358\":1}}],[\"timed\",{\"1\":{\"4380\":1}}],[\"timeunit\",{\"1\":{\"4378\":2,\"4380\":2,\"4383\":2}}],[\"timeouttest\",{\"1\":{\"4378\":1,\"4380\":2}}],[\"timeout\",{\"1\":{\"4378\":3,\"4383\":4,\"5416\":2}}],[\"timeout=1000\",{\"1\":{\"4376\":1}}],[\"timeout=30\",{\"1\":{\"3443\":1}}],[\"timeout参数和\",{\"1\":{\"4376\":1}}],[\"time字段值为当前时间\",{\"1\":{\"3400\":1}}],[\"time的类型均为datetime类型\",{\"1\":{\"3359\":1}}],[\"timer运行多个timetask时\",{\"1\":{\"3174\":1}}],[\"timezoneconvert\",{\"1\":{\"3286\":1}}],[\"timezone\",{\"1\":{\"1315\":3}}],[\"time\",{\"0\":{\"6928\":1},\"1\":{\"357\":1,\"1603\":2,\"2991\":2,\"3081\":2,\"3359\":3,\"3548\":1,\"5193\":2,\"5549\":1,\"5672\":1,\"5819\":1,\"6201\":1,\"6358\":1,\"6774\":1,\"6929\":1}}],[\"tips\",{\"1\":{\"4972\":1}}],[\"tip\",{\"1\":{\"64\":1,\"343\":1,\"3257\":1}}],[\"title=tostringmethod\",{\"1\":{\"4649\":1}}],[\"title=test\",{\"1\":{\"4649\":1}}],[\"title=old\",{\"1\":{\"4649\":1}}],[\"title\",{\"1\":{\"4\":1,\"313\":1,\"4642\":1,\"4644\":3,\"4647\":1,\"4690\":1,\"4693\":1,\"4696\":3,\"5782\":1,\"5786\":1,\"5790\":1,\"5794\":1,\"5798\":1,\"5805\":1,\"6951\":1}}],[\"dfa\",{\"1\":{\"6656\":1}}],[\"dsl\",{\"1\":{\"6637\":1}}],[\"dstv\",{\"1\":{\"520\":2}}],[\"dst\",{\"1\":{\"520\":1,\"524\":1,\"529\":2,\"535\":1,\"540\":4,\"544\":1}}],[\"dcevm\",{\"1\":{\"6372\":1,\"6980\":1}}],[\"dysfunctional\",{\"1\":{\"5530\":1}}],[\"dynamicreports\",{\"1\":{\"6557\":1}}],[\"dynamically\",{\"1\":{\"5528\":1,\"6201\":1}}],[\"dynamic\",{\"1\":{\"4\":1,\"5560\":1}}],[\"dd的格式\",{\"1\":{\"3210\":1}}],[\"dd进行日期格式化\",{\"1\":{\"3078\":1}}],[\"dd\",{\"1\":{\"3078\":1,\"3161\":1,\"3236\":1,\"3284\":1}}],[\"dto\",{\"1\":{\"2989\":1,\"3006\":1,\"3059\":1,\"3421\":1,\"3468\":2,\"3534\":1,\"3537\":1}}],[\"dumping\",{\"1\":{\"6996\":1}}],[\"dump\",{\"1\":{\"6996\":2}}],[\"dummy\",{\"1\":{\"4474\":1,\"4475\":2,\"4476\":1}}],[\"during\",{\"1\":{\"4972\":1}}],[\"dubbo\",{\"1\":{\"3290\":1,\"3426\":2}}],[\"duck\",{\"1\":{\"2521\":4,\"2523\":1,\"2525\":2,\"2526\":1,\"2539\":5}}],[\"due\",{\"1\":{\"339\":1}}],[\"db\",{\"1\":{\"2365\":1,\"2764\":1,\"6927\":1}}],[\"dp\",{\"0\":{\"2154\":1}}],[\"dropwizard\",{\"1\":{\"6576\":1,\"6858\":1}}],[\"druid\",{\"1\":{\"6394\":1}}],[\"dremel论文中发布的基于组装算法的列式\",{\"1\":{\"6352\":1}}],[\"drawbacks\",{\"1\":{\"5526\":1}}],[\"draw\",{\"1\":{\"2151\":2,\"2152\":7,\"6013\":5,\"6015\":3,\"6017\":1,\"6019\":1}}],[\"drawtriangle\",{\"1\":{\"2149\":1}}],[\"drawcircle\",{\"1\":{\"2144\":2,\"2149\":2,\"6013\":3,\"6015\":2,\"6017\":1,\"6019\":1}}],[\"drawrectangle\",{\"1\":{\"2144\":2,\"2149\":2}}],[\"drawshape\",{\"1\":{\"2144\":3,\"2149\":4,\"2152\":5}}],[\"drink\",{\"1\":{\"903\":1,\"905\":1,\"906\":1,\"910\":1,\"922\":1,\"924\":1,\"926\":6,\"928\":2,\"932\":1}}],[\"driver文件\",{\"1\":{\"6191\":1,\"6232\":1}}],[\"driverslist\",{\"1\":{\"6180\":3}}],[\"driversiterator\",{\"1\":{\"6180\":3,\"6190\":3,\"6236\":3}}],[\"drivers\",{\"1\":{\"6180\":10}}],[\"driver的实现\",{\"1\":{\"6170\":1}}],[\"driver的文件\",{\"1\":{\"6168\":1}}],[\"drivermanager是java中的实现\",{\"1\":{\"6177\":1}}],[\"drivermanager\",{\"0\":{\"6163\":1},\"1\":{\"6173\":1,\"6178\":1,\"6180\":3}}],[\"driver接口\",{\"1\":{\"6141\":1}}],[\"driver\",{\"1\":{\"628\":4,\"5516\":1,\"6164\":2,\"6166\":1,\"6168\":1,\"6170\":1,\"6172\":1,\"6176\":1,\"6180\":1,\"6187\":1,\"6229\":1,\"6236\":1}}],[\"d+e=23\",{\"1\":{\"1479\":1}}],[\"d+e\",{\"1\":{\"1479\":1}}],[\"dvdplayer\",{\"1\":{\"1134\":4,\"1136\":8}}],[\"dvd\",{\"1\":{\"1116\":1,\"1117\":2,\"1133\":1,\"1134\":5}}],[\"d\",{\"1\":{\"250\":1,\"253\":1,\"256\":2,\"263\":1,\"268\":2,\"272\":2,\"341\":2,\"344\":1,\"387\":1,\"894\":2,\"1478\":2,\"1539\":2,\"2037\":2,\"2050\":1,\"2052\":7,\"2053\":2,\"2058\":9,\"2596\":1,\"3224\":1,\"3313\":1,\"3376\":2,\"5883\":1,\"6118\":2}}],[\"dictionary\",{\"1\":{\"3134\":1}}],[\"diamond\",{\"1\":{\"5564\":1}}],[\"diamonds\",{\"1\":{\"4104\":1}}],[\"diamond方式\",{\"1\":{\"3122\":1}}],[\"diagram在新窗口打开\",{\"1\":{\"5811\":1}}],[\"diagram\",{\"1\":{\"255\":1,\"346\":1,\"2840\":1}}],[\"differences\",{\"1\":{\"5576\":1}}],[\"difference\",{\"1\":{\"5565\":1,\"6252\":1,\"6271\":1}}],[\"different\",{\"1\":{\"214\":1,\"353\":1,\"357\":1}}],[\"diff\",{\"1\":{\"3051\":2}}],[\"dip\",{\"0\":{\"2059\":1}}],[\"di\",{\"0\":{\"1326\":1,\"1330\":1,\"1346\":1},\"1\":{\"1325\":4,\"1327\":2,\"1328\":2,\"1329\":2,\"1331\":1,\"1333\":2,\"1334\":1,\"1340\":1,\"1341\":1,\"1345\":2,\"1347\":1,\"1349\":2,\"1362\":1}}],[\"dim\",{\"1\":{\"1134\":2,\"1136\":1}}],[\"directly\",{\"1\":{\"6054\":1,\"6951\":1}}],[\"directory\",{\"1\":{\"6201\":1}}],[\"director\",{\"1\":{\"678\":1,\"684\":1}}],[\"directional\",{\"0\":{\"261\":1}}],[\"direction\",{\"0\":{\"324\":1},\"1\":{\"164\":1,\"325\":2,\"326\":3}}],[\"div>\",{\"1\":{\"344\":1}}],[\"disruptor\",{\"1\":{\"6431\":1}}],[\"disable\",{\"1\":{\"6065\":1}}],[\"disabled\",{\"1\":{\"329\":1}}],[\"discontinued\",{\"1\":{\"6698\":1,\"7005\":1}}],[\"discovery\",{\"1\":{\"6201\":2}}],[\"discoverable\",{\"1\":{\"5525\":1}}],[\"discount\",{\"1\":{\"5055\":2}}],[\"discouraged\",{\"1\":{\"4566\":1}}],[\"discussion\",{\"1\":{\"3958\":1}}],[\"distinct\",{\"1\":{\"3370\":1,\"3381\":2}}],[\"distributedlock\",{\"1\":{\"2406\":2}}],[\"dispenseprize\",{\"1\":{\"2452\":1,\"2454\":5}}],[\"dispenseoutstate\",{\"1\":{\"2452\":1,\"2454\":3}}],[\"dispensestate\",{\"1\":{\"2452\":2,\"2454\":2}}],[\"dispensoutstate\",{\"1\":{\"2452\":1}}],[\"display\",{\"1\":{\"1653\":1,\"1655\":3,\"1702\":2,\"1716\":4,\"2521\":3,\"2526\":1,\"2539\":4,\"2964\":1,\"2966\":3}}],[\"displaying\",{\"1\":{\"332\":1}}],[\"dom等模块\",{\"1\":{\"6454\":1}}],[\"domain\",{\"1\":{\"6118\":1}}],[\"doesnotcontain\",{\"1\":{\"6969\":1}}],[\"doesn\",{\"1\":{\"6118\":1}}],[\"doprivileged\",{\"1\":{\"6065\":1,\"6118\":1,\"6180\":2,\"6258\":2}}],[\"doprint\",{\"1\":{\"5035\":1}}],[\"dog\",{\"1\":{\"5333\":3,\"5334\":20,\"5336\":8,\"5883\":16}}],[\"dowork\",{\"1\":{\"5224\":1,\"5226\":1,\"5229\":1}}],[\"download\",{\"1\":{\"2711\":3}}],[\"downloadfromaliyun\",{\"1\":{\"2699\":1,\"2704\":2}}],[\"down\",{\"1\":{\"170\":1,\"1134\":2,\"1136\":1}}],[\"doafterthrowing\",{\"1\":{\"4693\":1}}],[\"doafterreturning\",{\"1\":{\"4693\":1}}],[\"docker\",{\"0\":{\"7026\":1},\"1\":{\"7016\":1}}],[\"docx\",{\"1\":{\"6408\":1}}],[\"docs\",{\"1\":{\"5198\":1,\"5241\":1}}],[\"docsify\",{\"1\":{\"339\":1}}],[\"documents4j\",{\"1\":{\"6409\":1}}],[\"documented注解的作用是\",{\"1\":{\"4605\":1}}],[\"documented用于标明是否生成javadoc文档\",{\"1\":{\"4502\":1}}],[\"documented\",{\"0\":{\"4604\":1},\"1\":{\"4502\":1,\"4519\":1,\"4586\":1,\"4607\":2,\"4690\":1}}],[\"documentation\",{\"1\":{\"3937\":1}}],[\"doc\",{\"0\":{\"4461\":1},\"1\":{\"4462\":1,\"6408\":1}}],[\"donotignoreexceptions\",{\"1\":{\"4911\":1}}],[\"donotcatchthrowable\",{\"1\":{\"4908\":1}}],[\"donotcloseresourceintry\",{\"1\":{\"4861\":1}}],[\"donothingelse\",{\"1\":{\"4021\":1}}],[\"donothing\",{\"1\":{\"4021\":1}}],[\"don\",{\"1\":{\"3467\":1,\"4548\":1,\"4644\":1,\"4908\":1,\"5350\":1,\"6201\":2}}],[\"done\",{\"1\":{\"360\":1,\"391\":1}}],[\"do语句中必须使用大括号\",{\"1\":{\"3187\":1}}],[\"doothers\",{\"1\":{\"3168\":1,\"3170\":1,\"3172\":1}}],[\"dosomething\",{\"1\":{\"3168\":1,\"3170\":1,\"3172\":1,\"4022\":1,\"4896\":1,\"4903\":1}}],[\"do等保留字与左右括号之间都必须加空格\",{\"1\":{\"3022\":1}}],[\"do\",{\"1\":{\"2989\":1,\"3420\":1,\"3535\":1,\"4006\":1,\"4152\":1,\"4861\":2,\"4908\":2,\"4911\":1,\"4914\":1,\"4922\":1,\"4926\":1,\"6065\":1,\"6180\":1,\"6201\":1}}],[\"doinstatemnt\",{\"1\":{\"789\":1}}],[\"doinstatement\",{\"1\":{\"789\":1}}],[\"dothing\",{\"1\":{\"6962\":1}}],[\"dots\",{\"1\":{\"274\":1}}],[\"dotted\",{\"0\":{\"233\":1,\"236\":1},\"1\":{\"274\":1,\"295\":1,\"299\":1}}],[\"double和关键字void同样表现为\",{\"1\":{\"5824\":1}}],[\"doublevalue\",{\"1\":{\"5003\":4,\"6118\":1}}],[\"double>\",{\"1\":{\"3093\":1,\"3099\":1}}],[\"double>>\",{\"1\":{\"3093\":1,\"3099\":1}}],[\"double\",{\"0\":{\"210\":1,\"4463\":1,\"5338\":1,\"5610\":1},\"1\":{\"309\":1,\"310\":1,\"335\":1,\"346\":1,\"2315\":1,\"3014\":1,\"3029\":1,\"3056\":2,\"3067\":1,\"3178\":1,\"4464\":1,\"4475\":1,\"4754\":1,\"5001\":3,\"5003\":1,\"5260\":1,\"5339\":1,\"5593\":1,\"5611\":2,\"6118\":1}}],[\"dagger\",{\"1\":{\"6822\":1}}],[\"dagger2\",{\"1\":{\"6364\":1}}],[\"date>\",{\"1\":{\"5169\":1}}],[\"dateinter\",{\"1\":{\"5151\":1,\"5160\":5,\"5169\":2}}],[\"datetimeformatter代替simpledateformat\",{\"1\":{\"3162\":1}}],[\"dateformat\",{\"1\":{\"3161\":1}}],[\"datestyle\",{\"1\":{\"3161\":1}}],[\"date\",{\"1\":{\"3059\":1,\"3080\":1,\"3081\":3,\"3085\":1,\"3211\":1,\"5115\":1,\"5151\":2,\"5153\":2,\"5158\":2,\"5160\":1,\"5164\":3,\"5169\":6,\"5178\":1,\"5549\":1,\"5672\":1}}],[\"dataholder\",{\"1\":{\"6798\":2,\"6801\":2,\"6807\":1}}],[\"datamelt\",{\"1\":{\"6588\":1}}],[\"dataloader\",{\"1\":{\"4144\":1}}],[\"data2=\",{\"1\":{\"2546\":1}}],[\"data2\",{\"1\":{\"2546\":3}}],[\"data\",{\"1\":{\"2103\":1,\"2546\":3,\"3070\":2,\"3420\":1,\"3421\":1,\"3535\":1,\"3537\":1,\"5234\":5,\"5356\":1,\"6081\":1,\"6572\":1,\"6712\":1,\"6798\":5,\"6801\":4,\"6808\":7,\"6810\":1,\"6827\":6,\"6828\":1}}],[\"datachange\",{\"1\":{\"1698\":1,\"1702\":3,\"1709\":1,\"1718\":3}}],[\"datainputstream\",{\"1\":{\"935\":1}}],[\"databasesearch\",{\"1\":{\"6153\":1}}],[\"database\",{\"1\":{\"183\":1,\"184\":1}}],[\"dazhepromotion\",{\"1\":{\"2987\":1}}],[\"dao层\",{\"1\":{\"3415\":1}}],[\"dao层方法命名规约\",{\"1\":{\"3006\":1}}],[\"daoexception\",{\"1\":{\"3277\":1,\"3418\":1}}],[\"daosupport\",{\"1\":{\"2895\":2}}],[\"dao\",{\"1\":{\"2003\":1,\"6952\":1}}],[\"dayarray\",{\"1\":{\"3085\":1}}],[\"daysofthisyear\",{\"1\":{\"3083\":1}}],[\"day\",{\"1\":{\"1313\":2}}],[\"dasharray\",{\"1\":{\"354\":1}}],[\"dashes\",{\"1\":{\"266\":1,\"267\":1,\"271\":1}}],[\"danger\",{\"1\":{\"64\":1}}],[\"devoxx4kids成员\",{\"1\":{\"6702\":1}}],[\"devoxx\",{\"1\":{\"6701\":1}}],[\"develop\",{\"0\":{\"7019\":1}}],[\"developing\",{\"1\":{\"5579\":1}}],[\"developer\",{\"1\":{\"5524\":1}}],[\"development\",{\"1\":{\"5524\":2,\"6415\":1}}],[\"derived\",{\"1\":{\"6640\":1}}],[\"detected\",{\"1\":{\"6996\":1}}],[\"determine\",{\"1\":{\"6201\":3}}],[\"detach\",{\"1\":{\"2964\":1}}],[\"details\",{\"1\":{\"64\":1,\"4423\":1,\"4491\":1,\"4669\":1,\"4699\":1,\"4700\":1,\"4988\":1,\"4989\":1,\"4990\":1,\"5239\":1,\"5240\":1,\"5242\":1,\"5246\":1,\"5588\":1,\"5813\":1,\"5882\":1,\"6083\":1,\"6133\":1,\"6134\":1,\"6137\":1,\"6275\":1}}],[\"deductsfromsource\",{\"1\":{\"4175\":1}}],[\"deductmoney\",{\"1\":{\"2452\":2,\"2454\":5}}],[\"deltaspike\",{\"1\":{\"6363\":1}}],[\"delayed等\",{\"1\":{\"3354\":1}}],[\"delegatingconstructoraccessorimpl\",{\"1\":{\"6086\":1}}],[\"delegatingmethodaccessorimpl\",{\"1\":{\"4374\":2,\"4380\":2,\"6109\":2,\"6111\":5,\"6112\":1}}],[\"delegation\",{\"1\":{\"2734\":1}}],[\"delegate\",{\"1\":{\"1084\":1,\"6086\":1,\"6111\":7}}],[\"deletedeptbyid\",{\"1\":{\"4696\":1}}],[\"deleted\",{\"1\":{\"3351\":1,\"3504\":1}}],[\"delete做前缀\",{\"1\":{\"3006\":1}}],[\"delete\",{\"1\":{\"1726\":1,\"2895\":1,\"2902\":2,\"3224\":1,\"4696\":1,\"6541\":1}}],[\"debugger\",{\"1\":{\"6996\":1}}],[\"debuggers\",{\"1\":{\"5525\":2}}],[\"debug\",{\"1\":{\"3287\":1,\"3288\":2,\"3289\":1}}],[\"debuctmoney\",{\"1\":{\"2452\":1,\"2456\":1}}],[\"demeter1\",{\"1\":{\"2188\":1,\"2194\":1}}],[\"demeter\",{\"1\":{\"2157\":1}}],[\"demo1\",{\"1\":{\"5042\":1}}],[\"demofunction\",{\"1\":{\"2381\":3,\"2748\":2}}],[\"demo\",{\"1\":{\"339\":1,\"1353\":1,\"3027\":1}}],[\"deeplearning4j\",{\"1\":{\"6490\":1}}],[\"deeply\",{\"1\":{\"4178\":1}}],[\"deepdive\",{\"1\":{\"6489\":1}}],[\"deepspace\",{\"1\":{\"4166\":2}}],[\"deepcloneexample\",{\"1\":{\"5466\":8}}],[\"deepclone\",{\"1\":{\"1795\":1,\"1797\":1}}],[\"deepcloneabletarget=\",{\"1\":{\"1797\":4}}],[\"deepcloneabletarget\",{\"1\":{\"1792\":1,\"1793\":2,\"1795\":5,\"1797\":6}}],[\"deep\",{\"1\":{\"1795\":3,\"4166\":1}}],[\"deepprototype\",{\"1\":{\"1794\":1,\"1795\":9,\"1797\":6,\"1798\":1}}],[\"deploying\",{\"0\":{\"6855\":1},\"1\":{\"6760\":1}}],[\"deploy\",{\"1\":{\"6201\":1}}],[\"deployed\",{\"1\":{\"6201\":1}}],[\"depth\",{\"1\":{\"6065\":1}}],[\"deptid\",{\"1\":{\"4696\":6}}],[\"deptservice\",{\"1\":{\"4696\":8}}],[\"deptcontroller\",{\"1\":{\"4696\":1}}],[\"dept\",{\"1\":{\"4696\":20}}],[\"deprecation\",{\"1\":{\"4540\":1,\"4542\":1,\"4644\":1}}],[\"deprecated和\",{\"1\":{\"4501\":1,\"4508\":1}}],[\"deprecated\",{\"0\":{\"4517\":1},\"1\":{\"4136\":1,\"4139\":1,\"4227\":1,\"4251\":1,\"4507\":1,\"4510\":1,\"4519\":1,\"4539\":1,\"4644\":2,\"4649\":1}}],[\"deprecated注解的代码则编译器将发出警告\",{\"1\":{\"4510\":1}}],[\"deprecated注解\",{\"1\":{\"3043\":1}}],[\"dep\",{\"1\":{\"4537\":1,\"6962\":4,\"6963\":1}}],[\"departmentb\",{\"1\":{\"5794\":2}}],[\"departmenta\",{\"1\":{\"5794\":2}}],[\"departmentapprover\",{\"1\":{\"1972\":2,\"1976\":6}}],[\"departmentlist\",{\"1\":{\"1535\":4,\"1537\":6}}],[\"departments\",{\"1\":{\"1535\":4,\"1537\":7,\"3095\":2}}],[\"department\",{\"1\":{\"854\":1,\"856\":2,\"858\":5,\"1533\":2,\"1535\":10,\"1537\":6,\"1539\":2,\"2853\":4}}],[\"depends\",{\"1\":{\"6872\":2}}],[\"dependecyinversion\",{\"1\":{\"2078\":1,\"2082\":1}}],[\"dependence\",{\"0\":{\"2849\":1},\"1\":{\"2061\":1}}],[\"dependencymanagement\",{\"1\":{\"6875\":1}}],[\"dependency>\",{\"1\":{\"4324\":1,\"6867\":1}}],[\"dependencypass\",{\"1\":{\"2089\":1}}],[\"dependency\",{\"0\":{\"5799\":1,\"6819\":1,\"6869\":1},\"1\":{\"1325\":1,\"2850\":1,\"5805\":1,\"6753\":1,\"6763\":1}}],[\"dependencies>\",{\"1\":{\"4324\":1,\"6867\":1}}],[\"dependencies\",{\"1\":{\"252\":1}}],[\"depend5\",{\"1\":{\"2052\":1,\"2058\":2}}],[\"depend4\",{\"1\":{\"2052\":1,\"2058\":2}}],[\"depend3\",{\"1\":{\"2052\":1,\"2058\":2}}],[\"depend2\",{\"1\":{\"2052\":1,\"2058\":2}}],[\"depend1\",{\"1\":{\"2052\":2,\"2058\":4}}],[\"depending\",{\"1\":{\"266\":1}}],[\"desired\",{\"1\":{\"6201\":1}}],[\"design\",{\"0\":{\"7020\":1},\"1\":{\"2569\":1,\"2571\":1,\"2574\":1,\"3313\":1,\"6510\":1}}],[\"destidx++\",{\"1\":{\"6099\":1}}],[\"destidx\",{\"1\":{\"6099\":1}}],[\"destroy\",{\"1\":{\"1345\":3,\"5530\":1}}],[\"desc=\",{\"1\":{\"5964\":1}}],[\"descfield\",{\"1\":{\"5964\":2}}],[\"description=override\",{\"1\":{\"4649\":1}}],[\"description=suppress\",{\"1\":{\"4649\":1}}],[\"description=deprecated\",{\"1\":{\"4649\":1}}],[\"description\",{\"1\":{\"4642\":1,\"4644\":3,\"4896\":2}}],[\"descriptor\",{\"1\":{\"3444\":1,\"6118\":3}}],[\"describes\",{\"1\":{\"4922\":1,\"4926\":1}}],[\"described\",{\"1\":{\"391\":1}}],[\"describe\",{\"1\":{\"252\":1,\"255\":1,\"6118\":1}}],[\"desc\",{\"1\":{\"1533\":8,\"1535\":5,\"5962\":5,\"5964\":1}}],[\"des\",{\"1\":{\"850\":8,\"852\":2,\"854\":2,\"856\":2,\"904\":1,\"922\":5,\"926\":1}}],[\"decode\",{\"1\":{\"3044\":1}}],[\"decoratorpattern\",{\"1\":{\"894\":1}}],[\"decorator\",{\"1\":{\"877\":1,\"889\":1,\"894\":3,\"926\":5,\"934\":1,\"995\":1,\"2614\":1,\"2744\":1}}],[\"decaf\",{\"1\":{\"896\":1,\"906\":1,\"924\":2,\"928\":1,\"933\":1}}],[\"decision\",{\"1\":{\"387\":1}}],[\"deciding\",{\"1\":{\"350\":1}}],[\"declaringclass\",{\"1\":{\"6116\":2,\"6118\":5,\"6119\":1}}],[\"declaration\",{\"1\":{\"384\":1,\"385\":1,\"386\":2}}],[\"declarations\",{\"0\":{\"383\":1},\"1\":{\"384\":2}}],[\"declaredpublicmethods\",{\"1\":{\"6081\":1,\"6096\":2}}],[\"declaredpublicfields\",{\"1\":{\"6081\":1}}],[\"declaredmethods\",{\"1\":{\"6081\":1,\"6096\":2}}],[\"declaredfields\",{\"1\":{\"6081\":1}}],[\"declaredconstructors\",{\"1\":{\"6076\":2,\"6081\":1}}],[\"declared\",{\"1\":{\"6065\":1,\"6090\":1}}],[\"declare\",{\"1\":{\"246\":1,\"249\":1}}],[\"declares\",{\"1\":{\"164\":1,\"165\":1,\"166\":1}}],[\"dec\",{\"1\":{\"309\":1,\"310\":1}}],[\"def\",{\"1\":{\"1649\":8,\"1653\":8}}],[\"defineclass方法实现中\",{\"1\":{\"6120\":1}}],[\"defineclass\",{\"1\":{\"6118\":1,\"6119\":1}}],[\"define\",{\"1\":{\"357\":1,\"6201\":3}}],[\"defined\",{\"1\":{\"332\":1,\"350\":2,\"1366\":2,\"5523\":1,\"5525\":1,\"6201\":1}}],[\"defining\",{\"1\":{\"357\":1,\"391\":1,\"6063\":1}}],[\"definitions\",{\"1\":{\"375\":1}}],[\"definition\",{\"1\":{\"266\":1,\"313\":1,\"340\":1,\"358\":1,\"368\":1,\"371\":1}}],[\"defaultbaz\",{\"1\":{\"6829\":1}}],[\"default\",{\"0\":{\"374\":1,\"4127\":1,\"6831\":1},\"1\":{\"266\":1,\"340\":1,\"350\":1,\"375\":1,\"376\":1,\"548\":1,\"1315\":1,\"1489\":1,\"3186\":2,\"4119\":1,\"4125\":1,\"4128\":1,\"4129\":1,\"4157\":1,\"4607\":2,\"4642\":2,\"4690\":4,\"5382\":1,\"5550\":1,\"5825\":1,\"6049\":1,\"6201\":5,\"6755\":1}}],[\"denaro\",{\"1\":{\"4\":1}}],[\"0和websocket启发的http客户端连接器\",{\"1\":{\"6577\":1}}],[\"0d196ad23915\",{\"1\":{\"6276\":1}}],[\"0之后不需要用class\",{\"1\":{\"6164\":1}}],[\"0之前\",{\"1\":{\"6164\":1}}],[\"0x00001000\",{\"1\":{\"5825\":1}}],[\"0x00004000\",{\"1\":{\"5825\":1}}],[\"0x00002000\",{\"1\":{\"5825\":1}}],[\"0x20\",{\"1\":{\"3948\":1}}],[\"0<\",{\"1\":{\"4324\":1}}],[\"01\",{\"1\":{\"5077\":1}}],[\"012\",{\"1\":{\"3952\":1}}],[\"01111111111111111111111111111110\",{\"1\":{\"425\":1}}],[\"08\",{\"1\":{\"3527\":1}}],[\"04\",{\"1\":{\"3523\":1,\"5022\":1,\"5243\":1,\"6270\":1}}],[\"06\",{\"1\":{\"3519\":1}}],[\"05\",{\"1\":{\"3503\":1,\"3515\":1}}],[\"03\",{\"1\":{\"3499\":1,\"3527\":1,\"3531\":1}}],[\"09\",{\"1\":{\"3487\":1,\"3507\":1,\"5022\":1,\"5243\":1,\"6274\":1}}],[\"02\",{\"1\":{\"3487\":1,\"3490\":1,\"3493\":1,\"3496\":1,\"3531\":1,\"6698\":1}}],[\"07\",{\"1\":{\"3483\":1}}],[\"0开始\",{\"1\":{\"3427\":1}}],[\"0000\",{\"1\":{\"3556\":1}}],[\"00000\",{\"1\":{\"3253\":1}}],[\"00000001\",{\"1\":{\"471\":4}}],[\"0001\",{\"1\":{\"3254\":1}}],[\"00\",{\"1\":{\"3054\":1}}],[\"0f\",{\"1\":{\"922\":1,\"924\":4,\"926\":2,\"1974\":1,\"3049\":1,\"3051\":1}}],[\"0\",{\"0\":{\"5612\":2},\"1\":{\"4\":4,\"338\":1,\"384\":1,\"473\":1,\"540\":1,\"553\":1,\"555\":1,\"781\":3,\"783\":4,\"922\":1,\"1313\":1,\"1338\":2,\"1351\":2,\"1366\":1,\"1487\":1,\"1489\":1,\"1525\":1,\"1535\":1,\"1537\":1,\"1601\":1,\"1603\":1,\"1605\":1,\"1718\":1,\"1956\":1,\"1974\":3,\"2188\":2,\"2194\":2,\"2379\":1,\"2397\":1,\"2406\":1,\"2452\":1,\"2454\":2,\"2456\":1,\"2546\":5,\"2866\":4,\"2997\":1,\"3025\":3,\"3041\":1,\"3049\":3,\"3051\":3,\"3053\":4,\"3054\":1,\"3056\":2,\"3057\":2,\"3072\":1,\"3087\":3,\"3090\":1,\"3103\":1,\"3105\":1,\"3106\":2,\"3110\":1,\"3113\":1,\"3157\":1,\"3190\":1,\"3243\":1,\"3272\":1,\"3351\":2,\"3366\":4,\"3381\":1,\"3382\":2,\"3384\":1,\"3427\":7,\"3431\":2,\"3485\":2,\"3489\":1,\"3492\":1,\"3495\":1,\"3501\":1,\"3505\":1,\"3512\":1,\"3513\":1,\"3517\":1,\"3521\":1,\"3525\":1,\"4115\":4,\"4324\":9,\"4372\":2,\"4405\":1,\"4458\":1,\"4600\":11,\"4693\":2,\"4696\":1,\"4754\":2,\"4932\":1,\"4943\":4,\"4963\":5,\"4969\":3,\"4978\":4,\"4981\":3,\"5048\":1,\"5093\":1,\"5133\":3,\"5169\":10,\"5193\":1,\"5196\":1,\"5234\":1,\"5271\":1,\"5382\":3,\"5463\":1,\"5466\":2,\"5469\":2,\"5535\":1,\"5761\":1,\"5914\":2,\"5916\":2,\"6063\":1,\"6076\":1,\"6083\":3,\"6086\":1,\"6099\":4,\"6101\":1,\"6118\":3,\"6168\":1,\"6170\":2,\"6193\":4,\"6258\":7,\"6552\":1,\"6603\":1,\"6872\":1,\"6962\":1,\"6963\":1}}],[\"1渲染器\",{\"1\":{\"6558\":1}}],[\"17\",{\"1\":{\"4374\":1,\"4380\":1,\"4920\":1,\"4978\":1,\"5448\":1,\"6270\":1,\"6274\":1}}],[\"175\",{\"1\":{\"3014\":1}}],[\"1中\",{\"1\":{\"3234\":1}}],[\"1f\",{\"1\":{\"3056\":1,\"5341\":1,\"5342\":1}}],[\"1e\",{\"1\":{\"3051\":1}}],[\"14\",{\"1\":{\"2546\":1,\"3528\":1,\"4374\":1,\"4380\":1,\"4600\":1,\"4963\":3,\"4969\":1,\"4978\":1}}],[\"140\",{\"1\":{\"2409\":1}}],[\"18\",{\"1\":{\"2546\":1,\"5761\":1,\"5964\":1}}],[\"137\",{\"1\":{\"4374\":1}}],[\"13\",{\"1\":{\"2546\":1,\"3490\":1}}],[\"139\",{\"1\":{\"2409\":1,\"3332\":1}}],[\"138\",{\"1\":{\"2409\":1}}],[\"134\",{\"1\":{\"2409\":3}}],[\"1+8\",{\"1\":{\"2124\":1}}],[\"1+8=\",{\"1\":{\"2124\":1}}],[\"1948\",{\"1\":{\"6951\":1}}],[\"1994\",{\"1\":{\"2693\":1}}],[\"1990\",{\"1\":{\"2574\":1}}],[\"19\",{\"1\":{\"2546\":1,\"3093\":1,\"3366\":1,\"3519\":1,\"4374\":1,\"4407\":1,\"4963\":2,\"4969\":1,\"4978\":1}}],[\"192\",{\"1\":{\"2409\":3}}],[\"1988\",{\"1\":{\"2127\":1}}],[\"1987\",{\"1\":{\"2103\":1}}],[\"19th\",{\"1\":{\"73\":1}}],[\"1l\",{\"1\":{\"1793\":1,\"2409\":2}}],[\"15\",{\"1\":{\"3284\":1,\"4600\":1,\"4963\":1,\"4969\":1,\"4978\":1,\"6017\":1}}],[\"15978\",{\"1\":{\"2997\":1}}],[\"150\",{\"1\":{\"1704\":1,\"3014\":1,\"3366\":1}}],[\"15分钟的闹钟\",{\"1\":{\"150\":1}}],[\"11个方法\",{\"1\":{\"5680\":1}}],[\"111\",{\"1\":{\"5355\":3}}],[\"11111111111111111111111111111101\",{\"1\":{\"423\":1}}],[\"1190000006731125\",{\"1\":{\"4458\":1,\"4490\":1}}],[\"112\",{\"1\":{\"3520\":1}}],[\"11+3\",{\"1\":{\"2124\":1}}],[\"11+3=\",{\"1\":{\"2124\":1}}],[\"11+3+9=\",{\"1\":{\"2118\":1,\"2124\":1}}],[\"11\",{\"1\":{\"1479\":1,\"2118\":6,\"2124\":7,\"2546\":1,\"2620\":1,\"2632\":1,\"2803\":1,\"3087\":1,\"3211\":1,\"3284\":1,\"3373\":2,\"3511\":1,\"3532\":1,\"4600\":2,\"4943\":2,\"4963\":1,\"4969\":1,\"4978\":1,\"5133\":1}}],[\"121\",{\"1\":{\"5115\":1}}],[\"1219\",{\"1\":{\"3332\":1}}],[\"12<\",{\"1\":{\"4324\":1}}],[\"120\",{\"1\":{\"3030\":1,\"3031\":1,\"3033\":2}}],[\"12\",{\"1\":{\"2546\":1,\"3078\":2,\"3079\":1,\"3093\":2,\"3391\":1,\"3483\":1,\"4374\":1,\"4380\":1}}],[\"12345\",{\"1\":{\"3263\":1}}],[\"123\",{\"1\":{\"2376\":1,\"5090\":1,\"5120\":2,\"5264\":2,\"5265\":1,\"5266\":1,\"5267\":4,\"5273\":2,\"5382\":1,\"5451\":1,\"5494\":2}}],[\"12306\",{\"1\":{\"1809\":1}}],[\"128~127\",{\"1\":{\"5270\":1}}],[\"128\",{\"1\":{\"1436\":2,\"3046\":1,\"5271\":2,\"5277\":1,\"5278\":1,\"5599\":1}}],[\"127\",{\"1\":{\"1338\":1,\"1351\":1,\"1436\":6,\"3046\":1,\"5271\":4,\"5277\":1,\"5278\":1,\"5599\":1,\"5608\":2}}],[\"160\",{\"1\":{\"1704\":1}}],[\"16\",{\"1\":{\"384\":1,\"3091\":1,\"3122\":1,\"3123\":2,\"3229\":1,\"3398\":1,\"3516\":1,\"4963\":1,\"4969\":1,\"4978\":1,\"5169\":1,\"5255\":1,\"5256\":1,\"6896\":1}}],[\"10125073\",{\"1\":{\"6052\":1}}],[\"101681073\",{\"1\":{\"4990\":1}}],[\"106038023\",{\"1\":{\"4669\":1,\"4700\":1}}],[\"10339039\",{\"1\":{\"4424\":1}}],[\"1052\",{\"1\":{\"3388\":1}}],[\"1024\",{\"1\":{\"3123\":1,\"3444\":1,\"3528\":1}}],[\"10f\",{\"1\":{\"1720\":2}}],[\"10cm\",{\"1\":{\"709\":1}}],[\"100d\",{\"1\":{\"5006\":1}}],[\"1000\",{\"1\":{\"3081\":2,\"3204\":1,\"4378\":1,\"4380\":1}}],[\"100000\",{\"1\":{\"3374\":1}}],[\"100000000000000000000000000000001\",{\"1\":{\"477\":1}}],[\"10000\",{\"1\":{\"1957\":2,\"1958\":1,\"1972\":2,\"4981\":1}}],[\"100f\",{\"1\":{\"1720\":2}}],[\"100\",{\"0\":{\"4027\":1},\"1\":{\"553\":1,\"555\":1,\"709\":1,\"1655\":2,\"2749\":1,\"3070\":2,\"3072\":1,\"3254\":1,\"3980\":1,\"3985\":1,\"4028\":1,\"4383\":2,\"5205\":1,\"6013\":1,\"6019\":1}}],[\"10\",{\"1\":{\"311\":1,\"1479\":1,\"1756\":1,\"2188\":2,\"2194\":2,\"2370\":1,\"2372\":1,\"2373\":1,\"2374\":1,\"2441\":1,\"2454\":2,\"2997\":1,\"3093\":1,\"3113\":1,\"3122\":1,\"3191\":1,\"3243\":1,\"3366\":1,\"3372\":1,\"4383\":2,\"4614\":1,\"4978\":1,\"5059\":6,\"5193\":1,\"5196\":1,\"5200\":6,\"5203\":1,\"5463\":1,\"5466\":1,\"5469\":1}}],[\"1\",{\"0\":{\"900\":1,\"3478\":1,\"5612\":1,\"5669\":1,\"5671\":1},\"1\":{\"4\":1,\"30\":12,\"54\":1,\"76\":1,\"82\":1,\"113\":2,\"276\":1,\"466\":1,\"469\":1,\"473\":1,\"475\":1,\"783\":4,\"832\":1,\"834\":1,\"910\":1,\"924\":1,\"926\":1,\"928\":1,\"1237\":1,\"1313\":1,\"1338\":1,\"1351\":1,\"1436\":1,\"1479\":1,\"1525\":2,\"1535\":1,\"1537\":4,\"1601\":2,\"1605\":1,\"1686\":1,\"1718\":1,\"1756\":1,\"1763\":1,\"1774\":1,\"1787\":1,\"1795\":1,\"1797\":1,\"1871\":1,\"1903\":1,\"1953\":1,\"1976\":2,\"2002\":2,\"2014\":1,\"2052\":2,\"2058\":3,\"2089\":1,\"2118\":5,\"2124\":3,\"2144\":2,\"2149\":2,\"2152\":1,\"2188\":1,\"2194\":1,\"2286\":1,\"2293\":1,\"2381\":1,\"2452\":1,\"2456\":3,\"2469\":1,\"2546\":9,\"2563\":1,\"2663\":1,\"2866\":2,\"2883\":1,\"2962\":1,\"2994\":1,\"3004\":1,\"3006\":2,\"3016\":1,\"3018\":1,\"3020\":1,\"3024\":2,\"3025\":1,\"3030\":1,\"3034\":1,\"3037\":1,\"3049\":1,\"3050\":1,\"3051\":1,\"3053\":1,\"3054\":2,\"3057\":2,\"3058\":1,\"3074\":1,\"3076\":1,\"3079\":1,\"3081\":2,\"3083\":2,\"3085\":3,\"3089\":1,\"3090\":1,\"3106\":1,\"3113\":1,\"3115\":1,\"3117\":1,\"3118\":1,\"3119\":1,\"3120\":2,\"3123\":1,\"3157\":1,\"3159\":1,\"3180\":1,\"3188\":5,\"3189\":1,\"3201\":1,\"3205\":1,\"3206\":1,\"3217\":1,\"3222\":1,\"3224\":1,\"3226\":1,\"3229\":1,\"3232\":1,\"3243\":1,\"3251\":1,\"3263\":1,\"3272\":1,\"3276\":1,\"3278\":1,\"3351\":2,\"3359\":1,\"3364\":1,\"3366\":1,\"3374\":2,\"3375\":1,\"3378\":1,\"3383\":1,\"3389\":1,\"3394\":1,\"3414\":1,\"3426\":1,\"3427\":3,\"3431\":1,\"3439\":1,\"3442\":1,\"3485\":1,\"3489\":2,\"3491\":1,\"3492\":1,\"3494\":1,\"3495\":2,\"3497\":1,\"3498\":3,\"3501\":1,\"3504\":1,\"3505\":1,\"3509\":2,\"3513\":1,\"3517\":1,\"3520\":1,\"3521\":1,\"3524\":1,\"3525\":1,\"3528\":1,\"3529\":2,\"3532\":1,\"4115\":4,\"4125\":1,\"4126\":1,\"4159\":1,\"4324\":1,\"4326\":2,\"4333\":1,\"4360\":3,\"4372\":2,\"4383\":1,\"4407\":1,\"4508\":1,\"4586\":2,\"4590\":2,\"4600\":2,\"4682\":1,\"4685\":1,\"4952\":1,\"4963\":2,\"4969\":2,\"4978\":2,\"4995\":1,\"5046\":1,\"5062\":1,\"5070\":1,\"5093\":1,\"5112\":7,\"5115\":1,\"5133\":4,\"5169\":7,\"5184\":1,\"5193\":2,\"5194\":1,\"5196\":2,\"5253\":1,\"5271\":3,\"5289\":1,\"5300\":1,\"5339\":4,\"5340\":2,\"5341\":1,\"5342\":1,\"5344\":1,\"5345\":2,\"5347\":1,\"5348\":1,\"5349\":1,\"5373\":1,\"5402\":1,\"5405\":1,\"5418\":1,\"5434\":2,\"5445\":6,\"5453\":1,\"5472\":1,\"5476\":2,\"5483\":1,\"5565\":2,\"5628\":1,\"5649\":1,\"5670\":1,\"5739\":1,\"5740\":1,\"5796\":3,\"5798\":1,\"5860\":1,\"5914\":1,\"5916\":2,\"6049\":1,\"6054\":1,\"6063\":1,\"6118\":2,\"6201\":2,\"6258\":3}}],[\"你把你代码提交到这个服务器来进行分析\",{\"1\":{\"6991\":1}}],[\"你甚至可以使用自定义注解来实现静态分析\",{\"1\":{\"6985\":1}}],[\"你还想咋地\",{\"1\":{\"6970\":1}}],[\"你曾经用\",{\"1\":{\"6966\":1}}],[\"你对\",{\"1\":{\"6944\":1}}],[\"你写的类要和路由文件中的路由信息关联起来\",{\"1\":{\"6942\":1}}],[\"你仅仅只需要实现\",{\"1\":{\"6901\":1}}],[\"你会从这些自动化方式中尝到很多的甜头\",{\"1\":{\"6887\":1}}],[\"你会发现有些库的版本是冲突的\",{\"1\":{\"6871\":1}}],[\"你会爱上自己的改变\",{\"1\":{\"144\":1}}],[\"你所有的\",{\"1\":{\"6866\":1}}],[\"你的仓库也跑起来了\",{\"1\":{\"6887\":1}}],[\"你的代码已经编译完了\",{\"1\":{\"6887\":1}}],[\"你的项目到底要引入哪一个版本呢\",{\"1\":{\"6873\":1}}],[\"你的根\",{\"1\":{\"6864\":1}}],[\"你的内在再丰富\",{\"1\":{\"148\":1}}],[\"你以可重用代码的名义全放这了\",{\"1\":{\"6841\":1}}],[\"你不得不迁移到手动配置更多的部署方案上来\",{\"1\":{\"6860\":1}}],[\"你不得不使用依赖注入\",{\"1\":{\"6820\":1}}],[\"你不能在没有强制类型转换的前提下将一个\",{\"1\":{\"5611\":1}}],[\"你只需要谨慎一点\",{\"1\":{\"5634\":1}}],[\"你如果又用list2往里面add\",{\"1\":{\"5144\":1}}],[\"你却使用异常处理\",{\"1\":{\"4928\":1}}],[\"你将会有几十个外部依赖了\",{\"1\":{\"6864\":1}}],[\"你将会丢失堆栈跟踪和原始异常的消息\",{\"1\":{\"4925\":1}}],[\"你将遵循\",{\"1\":{\"4386\":1}}],[\"你应该把它放到\",{\"1\":{\"6964\":1}}],[\"你应该把清理工作的代码放到\",{\"1\":{\"4863\":1}}],[\"你应该有自己的\",{\"1\":{\"6885\":1}}],[\"你应该从maven\",{\"1\":{\"6863\":1}}],[\"你应该返回一个\",{\"1\":{\"6824\":1}}],[\"你应该使用\",{\"1\":{\"6803\":1}}],[\"你应该创建和编写\",{\"1\":{\"34\":1}}],[\"你并没有关闭资源\",{\"1\":{\"4862\":1}}],[\"你自己也可能会抛出一个异常\",{\"1\":{\"4862\":1}}],[\"你也可以看到权限管理也是通过类似的注解\",{\"1\":{\"4697\":1}}],[\"你见过建筑设计图纸吗\",{\"1\":{\"2820\":1}}],[\"你设计了一款优秀的电子商务网站\",{\"1\":{\"2799\":1}}],[\"你创建了一个使用方形按钮的\",{\"1\":{\"2798\":1}}],[\"你在\",{\"1\":{\"2797\":1}}],[\"你就可以从服务器看到实时变化\",{\"1\":{\"6982\":1}}],[\"你就给我滚多远\",{\"1\":{\"3195\":1}}],[\"你就会发现\",{\"1\":{\"2716\":1}}],[\"你就会发现神奇地打印了false\",{\"1\":{\"439\":1}}],[\"你就懂了面向对象分析和设计\",{\"1\":{\"2596\":1}}],[\"你接手维护该项目怎么办\",{\"1\":{\"2576\":1}}],[\"你完全可以简单地理解为就是代码本身\",{\"1\":{\"2388\":1}}],[\"你中有我\",{\"1\":{\"1593\":1,\"2594\":1}}],[\"你刚刚参加工作想租房\",{\"1\":{\"1569\":1}}],[\"你可能又会说\",{\"1\":{\"2728\":1}}],[\"你可能会有这样的疑问\",{\"1\":{\"2715\":1}}],[\"你可能会说\",{\"1\":{\"1341\":1,\"2360\":1,\"2378\":1,\"2725\":1}}],[\"你可以看到你的代码的健康状况信息\",{\"1\":{\"6991\":1}}],[\"你可以把针对你的代码的检查规则控制在\",{\"1\":{\"6990\":1}}],[\"你可以把它检入你的版本控制工具\",{\"1\":{\"6988\":1}}],[\"你可以把相同的代码转换成这个样子\",{\"1\":{\"6968\":1}}],[\"你可以获取到变量的变化历史\",{\"1\":{\"6978\":1}}],[\"你可以用像\",{\"1\":{\"6941\":1}}],[\"你可以用新出的优秀的\",{\"1\":{\"6826\":1}}],[\"你可以选择一个版本\",{\"1\":{\"6877\":1}}],[\"你可以像这样来写代码\",{\"1\":{\"6850\":1}}],[\"你可以像这样在类中用\",{\"1\":{\"6826\":1}}],[\"你可以很容易地动态构建集合\",{\"1\":{\"6836\":1}}],[\"你可以很容易去修改它\",{\"1\":{\"6835\":1}}],[\"你可以建一个静态内部类来构建你的对象\",{\"1\":{\"6806\":1}}],[\"你可以使用它们验证你的代码从而检查代码是否有问题\",{\"1\":{\"6987\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"33\":1}}],[\"你可以使用\",{\"1\":{\"6906\":1}}],[\"你可以使用可随机访问的\",{\"1\":{\"5675\":1}}],[\"你可以使用这个语法\",{\"1\":{\"4868\":1}}],[\"你可以确保你清理了所有打开的资源\",{\"1\":{\"4865\":1}}],[\"你可以测试代码是否它抛出了想要得到的异常\",{\"1\":{\"4371\":1}}],[\"你可以先自己思考一下\",{\"1\":{\"2732\":1}}],[\"你可以简单理解为存储目录\",{\"1\":{\"2700\":1}}],[\"你可以自行补充完整\",{\"1\":{\"1359\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"117\":1}}],[\"你可以通过安装\",{\"1\":{\"6977\":1}}],[\"你可以通过在某处构建子类来与框架建立联系\",{\"1\":{\"2792\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"134\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"15\":1}}],[\"你可以将图片和\",{\"1\":{\"119\":1}}],[\"你可以在下面的代码片断中看到这样一个\",{\"1\":{\"4902\":1}}],[\"你可以在\",{\"1\":{\"111\":1,\"4905\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"1\":1}}],[\"你可以标记\",{\"1\":{\"79\":1}}],[\"你可以设置在主题选项中设置\",{\"1\":{\"49\":1}}],[\"你肯定会说不可能\",{\"1\":{\"451\":1}}],[\"你这么写的话客户如果懂点代码\",{\"1\":{\"412\":1}}],[\"你一定会越来越好\",{\"1\":{\"140\":1}}],[\"你需要这一个库足矣\",{\"1\":{\"6930\":1}}],[\"你需要一个仓库\",{\"1\":{\"6883\":1}}],[\"你需要一个地方存储你生成的\",{\"1\":{\"6883\":1}}],[\"你需要某种形式的持续集成服务器来帮你不断构建你的快照版本和基于\",{\"1\":{\"6879\":1}}],[\"你需要明确程序所有的执行流程及对应的执行结果等等\",{\"1\":{\"4439\":1}}],[\"你需要阅读\",{\"1\":{\"40\":1}}],[\"你需要在页面\",{\"1\":{\"2\":1}}]],\"serializationVersion\":2}";